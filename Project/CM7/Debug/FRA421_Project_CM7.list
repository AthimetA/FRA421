
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106ac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  0801094c  0801094c  0002094c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012314  08012314  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08012314  08012314  00022314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801231c  0801231c  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801231c  0801231c  0002231c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012320  08012320  00022320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012324  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  080123ac  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0801240c  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  0801246c  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  0801246c  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002629e  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a80  00000000  00000000  0005a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019d8  00000000  00000000  0005ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023918  00000000  00000000  0009ae9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00193771  00000000  00000000  000be7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00251f24  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007678  00000000  00000000  00251f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010934 	.word	0x08010934

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08010934 	.word	0x08010934

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fcdb 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fca6 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	3318      	adds	r3, #24
 800099e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8088 	bne.w	8000ace <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	e017      	b.n	80009f4 <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d10b      	bne.n	80009e8 <Player_Reading_Card_Trap+0x74>
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	785b      	ldrb	r3, [r3, #1]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d107      	bne.n	80009e8 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	7a5b      	ldrb	r3, [r3, #9]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 80009e6:	e008      	b.n	80009fa <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	3310      	adds	r3, #16
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3301      	adds	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	2b05      	cmp	r3, #5
 80009f8:	dde4      	ble.n	80009c4 <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12f      	bne.n	8000a64 <Player_Reading_Card_Trap+0xf0>
 8000a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d12b      	bne.n	8000a64 <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	799b      	ldrb	r3, [r3, #6]
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	d85c      	bhi.n	8000ace <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 fc20 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a1a:	6939      	ldr	r1, [r7, #16]
 8000a1c:	6978      	ldr	r0, [r7, #20]
 8000a1e:	f7ff fe31 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	799a      	ldrb	r2, [r3, #6]
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <Player_Reading_Card_Trap+0x164>)
 8000a28:	fba3 1302 	umull	r1, r3, r3, r2
 8000a2c:	0899      	lsrs	r1, r3, #2
 8000a2e:	460b      	mov	r3, r1
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	440b      	add	r3, r1
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	2200      	movs	r2, #0
 8000a42:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	2200      	movs	r2, #0
 8000a48:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a4a:	69b8      	ldr	r0, [r7, #24]
 8000a4c:	f7ff fe66 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	2200      	movs	r2, #0
 8000a54:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a62:	e034      	b.n	8000ace <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d12f      	bne.n	8000ace <Player_Reading_Card_Trap+0x15a>
 8000a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d12b      	bne.n	8000ace <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	799b      	ldrb	r3, [r3, #6]
 8000a7a:	2b05      	cmp	r3, #5
 8000a7c:	d927      	bls.n	8000ace <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 fbeb 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a84:	6939      	ldr	r1, [r7, #16]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff fdfc 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	799a      	ldrb	r2, [r3, #6]
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <Player_Reading_Card_Trap+0x164>)
 8000a92:	fba3 1302 	umull	r1, r3, r3, r2
 8000a96:	0899      	lsrs	r1, r3, #2
 8000a98:	460b      	mov	r3, r1
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	440b      	add	r3, r1
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ab4:	69b8      	ldr	r0, [r7, #24]
 8000ab6:	f7ff fe31 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2200      	movs	r2, #0
 8000abe:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000acc:	e7ff      	b.n	8000ace <Player_Reading_Card_Trap+0x15a>
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	aaaaaaab 	.word	0xaaaaaaab

08000adc <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3328      	adds	r3, #40	; 0x28
 8000aec:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	2358      	movs	r3, #88	; 0x58
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	3328      	adds	r3, #40	; 0x28
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	3318      	adds	r3, #24
 8000b06:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b0e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3308      	adds	r3, #8
 8000b14:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000b1c:	23ff      	movs	r3, #255	; 0xff
 8000b1e:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d17d      	bne.n	8000c24 <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	799b      	ldrb	r3, [r3, #6]
 8000b2c:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000b2e:	7cfb      	ldrb	r3, [r7, #19]
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	3308      	adds	r3, #8
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4413      	add	r3, r2
 8000b38:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d006      	beq.n	8000b50 <Player_Reading_Card_Stopdef+0x74>
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d12f      	bne.n	8000bba <Player_Reading_Card_Stopdef+0xde>
 8000b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d12b      	bne.n	8000bba <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	799b      	ldrb	r3, [r3, #6]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d85c      	bhi.n	8000c24 <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 fb75 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b70:	69b9      	ldr	r1, [r7, #24]
 8000b72:	69f8      	ldr	r0, [r7, #28]
 8000b74:	f7ff fd86 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	799a      	ldrb	r2, [r3, #6]
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <Player_Reading_Card_Stopdef+0x150>)
 8000b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b82:	0899      	lsrs	r1, r3, #2
 8000b84:	460b      	mov	r3, r1
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	440b      	add	r3, r1
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	2200      	movs	r2, #0
 8000b98:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ba0:	6a38      	ldr	r0, [r7, #32]
 8000ba2:	f7ff fdbb 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bb8:	e034      	b.n	8000c24 <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d12f      	bne.n	8000c24 <Player_Reading_Card_Stopdef+0x148>
 8000bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d12b      	bne.n	8000c24 <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	799b      	ldrb	r3, [r3, #6]
 8000bd0:	2b05      	cmp	r3, #5
 8000bd2:	d927      	bls.n	8000c24 <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 fb40 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bda:	69b9      	ldr	r1, [r7, #24]
 8000bdc:	69f8      	ldr	r0, [r7, #28]
 8000bde:	f7ff fd51 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	799a      	ldrb	r2, [r3, #6]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <Player_Reading_Card_Stopdef+0x150>)
 8000be8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bec:	0899      	lsrs	r1, r3, #2
 8000bee:	460b      	mov	r3, r1
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	440b      	add	r3, r1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	2200      	movs	r2, #0
 8000c02:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	2201      	movs	r2, #1
 8000c08:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c0a:	6a38      	ldr	r0, [r7, #32]
 8000c0c:	f7ff fd86 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	2200      	movs	r2, #0
 8000c14:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c22:	e7ff      	b.n	8000c24 <Player_Reading_Card_Stopdef+0x148>
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	aaaaaaab 	.word	0xaaaaaaab

08000c30 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3328      	adds	r3, #40	; 0x28
 8000c40:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2358      	movs	r3, #88	; 0x58
 8000c4a:	fb02 f303 	mul.w	r3, r2, r3
 8000c4e:	3328      	adds	r3, #40	; 0x28
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3318      	adds	r3, #24
 8000c5a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c62:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3308      	adds	r3, #8
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	78db      	ldrb	r3, [r3, #3]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	f040 8083 	bne.w	8000d80 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3368      	adds	r3, #104	; 0x68
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	e00f      	b.n	8000ca6 <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d103      	bne.n	8000c9a <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000c98:	e008      	b.n	8000cac <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3310      	adds	r3, #16
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b13      	cmp	r3, #19
 8000caa:	ddec      	ble.n	8000c86 <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d12f      	bne.n	8000d16 <Player_Reading_Card_Reborn+0xe6>
 8000cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d12b      	bne.n	8000d16 <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	799b      	ldrb	r3, [r3, #6]
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	d85c      	bhi.n	8000d80 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 fac7 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000ccc:	6939      	ldr	r1, [r7, #16]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff fcd8 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	799a      	ldrb	r2, [r3, #6]
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <Player_Reading_Card_Reborn+0x158>)
 8000cda:	fba3 1302 	umull	r1, r3, r3, r2
 8000cde:	0899      	lsrs	r1, r3, #2
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	440b      	add	r3, r1
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000cfc:	69b8      	ldr	r0, [r7, #24]
 8000cfe:	f7ff fd0d 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	2200      	movs	r2, #0
 8000d06:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d14:	e034      	b.n	8000d80 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d12f      	bne.n	8000d80 <Player_Reading_Card_Reborn+0x150>
 8000d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d12b      	bne.n	8000d80 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	799b      	ldrb	r3, [r3, #6]
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d927      	bls.n	8000d80 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fa92 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d36:	6939      	ldr	r1, [r7, #16]
 8000d38:	6978      	ldr	r0, [r7, #20]
 8000d3a:	f7ff fca3 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	799a      	ldrb	r2, [r3, #6]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <Player_Reading_Card_Reborn+0x158>)
 8000d44:	fba3 1302 	umull	r1, r3, r3, r2
 8000d48:	0899      	lsrs	r1, r3, #2
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	440b      	add	r3, r1
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2201      	movs	r2, #1
 8000d64:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d66:	69b8      	ldr	r0, [r7, #24]
 8000d68:	f7ff fcd8 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000d7e:	e7ff      	b.n	8000d80 <Player_Reading_Card_Reborn+0x150>
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	aaaaaaab 	.word	0xaaaaaaab

08000d8c <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3328      	adds	r3, #40	; 0x28
 8000d9c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	2358      	movs	r3, #88	; 0x58
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	3328      	adds	r3, #40	; 0x28
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	3318      	adds	r3, #24
 8000db6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000dbe:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	78db      	ldrb	r3, [r3, #3]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	f040 80cb 	bne.w	8000f6c <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dda:	e013      	b.n	8000e04 <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 8000ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d107      	bne.n	8000df8 <Player_Reading_Card_Ancient_Rule+0x6c>
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d103      	bne.n	8000df8 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000df6:	e008      	b.n	8000e0a <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	3310      	adds	r3, #16
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	3301      	adds	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	dde8      	ble.n	8000ddc <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d102      	bne.n	8000e24 <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3368      	adds	r3, #104	; 0x68
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
 8000e2e:	e00f      	b.n	8000e50 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d103      	bne.n	8000e44 <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000e42:	e008      	b.n	8000e56 <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	3310      	adds	r3, #16
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	2b13      	cmp	r3, #19
 8000e54:	ddec      	ble.n	8000e30 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e00f      	b.n	8000e84 <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d103      	bne.n	8000e78 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000e76:	e008      	b.n	8000e8a <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8000e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7a:	3310      	adds	r3, #16
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3301      	adds	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	ddec      	ble.n	8000e64 <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	78db      	ldrb	r3, [r3, #3]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d902      	bls.n	8000e98 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d12f      	bne.n	8000f02 <Player_Reading_Card_Ancient_Rule+0x176>
 8000ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d12b      	bne.n	8000f02 <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	799b      	ldrb	r3, [r3, #6]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d85c      	bhi.n	8000f6c <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f9d1 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff fbe2 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	799a      	ldrb	r2, [r3, #6]
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8000eca:	0899      	lsrs	r1, r3, #2
 8000ecc:	460b      	mov	r3, r1
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	440b      	add	r3, r1
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee8:	69b8      	ldr	r0, [r7, #24]
 8000eea:	f7ff fc17 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000f00:	e034      	b.n	8000f6c <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d12f      	bne.n	8000f6c <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d12b      	bne.n	8000f6c <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	799b      	ldrb	r3, [r3, #6]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d927      	bls.n	8000f6c <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f99c 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f22:	6939      	ldr	r1, [r7, #16]
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f7ff fbad 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	799a      	ldrb	r2, [r3, #6]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000f30:	fba3 1302 	umull	r1, r3, r3, r2
 8000f34:	0899      	lsrs	r1, r3, #2
 8000f36:	460b      	mov	r3, r1
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	440b      	add	r3, r1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000f52:	69b8      	ldr	r0, [r7, #24]
 8000f54:	f7ff fbe2 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000f6a:	e7ff      	b.n	8000f6c <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	aaaaaaab 	.word	0xaaaaaaab

08000f78 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3328      	adds	r3, #40	; 0x28
 8000f88:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2358      	movs	r3, #88	; 0x58
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	3328      	adds	r3, #40	; 0x28
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000faa:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3308      	adds	r3, #8
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	78db      	ldrb	r3, [r3, #3]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 80c7 	bne.w	8001150 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc6:	e00f      	b.n	8000fe8 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d103      	bne.n	8000fdc <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000fda:	e008      	b.n	8000fee <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fde:	3310      	adds	r3, #16
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	ddec      	ble.n	8000fc8 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d102      	bne.n	8000ffc <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d102      	bne.n	8001016 <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3368      	adds	r3, #104	; 0x68
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	e00f      	b.n	8001042 <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	429a      	cmp	r2, r3
 800102c:	d103      	bne.n	8001036 <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001034:	e008      	b.n	8001048 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 8001036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001038:	3310      	adds	r3, #16
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	3301      	adds	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	2b13      	cmp	r3, #19
 8001046:	ddec      	ble.n	8001022 <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	e00f      	b.n	8001076 <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	429a      	cmp	r2, r3
 8001060:	d103      	bne.n	800106a <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001068:	e008      	b.n	800107c <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 800106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106c:	3310      	adds	r3, #16
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	2b04      	cmp	r3, #4
 800107a:	ddec      	ble.n	8001056 <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001082:	2b00      	cmp	r3, #0
 8001084:	d12f      	bne.n	80010e6 <Player_Reading_Card_Monster_Effect+0x16e>
 8001086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800108a:	2b00      	cmp	r3, #0
 800108c:	d12b      	bne.n	80010e6 <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	799b      	ldrb	r3, [r3, #6]
 8001092:	2b05      	cmp	r3, #5
 8001094:	d85c      	bhi.n	8001150 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f8df 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff faf0 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	799a      	ldrb	r2, [r3, #6]
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80010aa:	fba3 1302 	umull	r1, r3, r3, r2
 80010ae:	0899      	lsrs	r1, r3, #2
 80010b0:	460b      	mov	r3, r1
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	440b      	add	r3, r1
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2200      	movs	r2, #0
 80010c4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2201      	movs	r2, #1
 80010ca:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80010cc:	69b8      	ldr	r0, [r7, #24]
 80010ce:	f7ff fb25 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	2200      	movs	r2, #0
 80010d6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80010e4:	e034      	b.n	8001150 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d12f      	bne.n	8001150 <Player_Reading_Card_Monster_Effect+0x1d8>
 80010f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d12b      	bne.n	8001150 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	799b      	ldrb	r3, [r3, #6]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d927      	bls.n	8001150 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f8aa 	bl	800125a <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001106:	6939      	ldr	r1, [r7, #16]
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff fabb 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	799a      	ldrb	r2, [r3, #6]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001114:	fba3 1302 	umull	r1, r3, r3, r2
 8001118:	0899      	lsrs	r1, r3, #2
 800111a:	460b      	mov	r3, r1
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	440b      	add	r3, r1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	b2da      	uxtb	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	2200      	movs	r2, #0
 800112e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2201      	movs	r2, #1
 8001134:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8001136:	69b8      	ldr	r0, [r7, #24]
 8001138:	f7ff faf0 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2200      	movs	r2, #0
 8001140:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 800114e:	e7ff      	b.n	8001150 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	; 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	aaaaaaab 	.word	0xaaaaaaab

0800115c <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001178:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800117a:	2300      	movs	r3, #0
 800117c:	76fb      	strb	r3, [r7, #27]
 800117e:	e00b      	b.n	8001198 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	69f9      	ldr	r1, [r7, #28]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fa7c 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	3310      	adds	r3, #16
 8001190:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001192:	7efb      	ldrb	r3, [r7, #27]
 8001194:	3301      	adds	r3, #1
 8001196:	76fb      	strb	r3, [r7, #27]
 8001198:	7efb      	ldrb	r3, [r7, #27]
 800119a:	2b05      	cmp	r3, #5
 800119c:	d9f0      	bls.n	8001180 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80011c4:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	76fb      	strb	r3, [r7, #27]
 80011ca:	e00b      	b.n	80011e4 <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	69f9      	ldr	r1, [r7, #28]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fa56 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	3310      	adds	r3, #16
 80011dc:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80011de:	7efb      	ldrb	r3, [r7, #27]
 80011e0:	3301      	adds	r3, #1
 80011e2:	76fb      	strb	r3, [r7, #27]
 80011e4:	7efb      	ldrb	r3, [r7, #27]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d9f0      	bls.n	80011cc <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3368      	adds	r3, #104	; 0x68
 80011ee:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80011f0:	2300      	movs	r3, #0
 80011f2:	76bb      	strb	r3, [r7, #26]
 80011f4:	e00b      	b.n	800120e <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	69f9      	ldr	r1, [r7, #28]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3310      	adds	r3, #16
 8001206:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8001208:	7ebb      	ldrb	r3, [r7, #26]
 800120a:	3301      	adds	r3, #1
 800120c:	76bb      	strb	r3, [r7, #26]
 800120e:	7ebb      	ldrb	r3, [r7, #26]
 8001210:	2b13      	cmp	r3, #19
 8001212:	d9f0      	bls.n	80011f6 <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3308      	adds	r3, #8
 8001218:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800121a:	2300      	movs	r3, #0
 800121c:	767b      	strb	r3, [r7, #25]
 800121e:	e00b      	b.n	8001238 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	69f9      	ldr	r1, [r7, #28]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fa2c 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3310      	adds	r3, #16
 8001230:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8001232:	7e7b      	ldrb	r3, [r7, #25]
 8001234:	3301      	adds	r3, #1
 8001236:	767b      	strb	r3, [r7, #25]
 8001238:	7e7b      	ldrb	r3, [r7, #25]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d9f0      	bls.n	8001220 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001244:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	69f9      	ldr	r1, [r7, #28]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fa19 	bl	8000684 <YUGIOH_card_copy>
}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001268:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001270:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001278:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001280:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001282:	2306      	movs	r3, #6
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	e00c      	b.n	80012a2 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001288:	6939      	ldr	r1, [r7, #16]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff f9fa 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3b10      	subs	r3, #16
 8001294:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	3b10      	subs	r3, #16
 800129a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3b01      	subs	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dcef      	bgt.n	8001288 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80012c0:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80012c8:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80012d0:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80012d8:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80012da:	2306      	movs	r3, #6
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	e02c      	b.n	800133a <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80012e0:	6939      	ldr	r1, [r7, #16]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff f9ce 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3b02      	subs	r3, #2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	1e50      	subs	r0, r2, #1
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3b02      	subs	r3, #2
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	1e50      	subs	r0, r2, #1
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3b10      	subs	r3, #16
 800132c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3b10      	subs	r3, #16
 8001332:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b01      	subs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	dccf      	bgt.n	80012e0 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 800134a:	b580      	push	{r7, lr}
 800134c:	b08a      	sub	sp, #40	; 0x28
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3368      	adds	r3, #104	; 0x68
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3368      	adds	r3, #104	; 0x68
 8001374:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800137c:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 800137e:	2314      	movs	r3, #20
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e00c      	b.n	800139e <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001388:	f7ff f97c 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	3b10      	subs	r3, #16
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	3b10      	subs	r3, #16
 8001396:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	3b01      	subs	r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dcef      	bgt.n	8001384 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3368      	adds	r3, #104	; 0x68
 80013ac:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80013ae:	6a39      	ldr	r1, [r7, #32]
 80013b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013b2:	f7ff f967 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 80013bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013be:	6a38      	ldr	r0, [r7, #32]
 80013c0:	f7ff f960 	bl	8000684 <YUGIOH_card_copy>

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af04      	add	r7, sp, #16
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3304      	adds	r3, #4
 80013da:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3304      	adds	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3304      	adds	r3, #4
 80013e6:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80013ee:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 800140c:	2108      	movs	r1, #8
 800140e:	48ad      	ldr	r0, [pc, #692]	; (80016c4 <GAME_PLAY_Management+0x2f8>)
 8001410:	f009 f938 	bl	800a684 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 800141c:	2102      	movs	r1, #2
 800141e:	48aa      	ldr	r0, [pc, #680]	; (80016c8 <GAME_PLAY_Management+0x2fc>)
 8001420:	f009 f930 	bl	800a684 <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 800142c:	2104      	movs	r1, #4
 800142e:	48a5      	ldr	r0, [pc, #660]	; (80016c4 <GAME_PLAY_Management+0x2f8>)
 8001430:	f009 f928 	bl	800a684 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 800143c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001440:	48a2      	ldr	r0, [pc, #648]	; (80016cc <GAME_PLAY_Management+0x300>)
 8001442:	f009 f91f 	bl	800a684 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001454:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3304      	adds	r3, #4
 800145a:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3304      	adds	r3, #4
 8001460:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	2b04      	cmp	r3, #4
 8001466:	f200 82c7 	bhi.w	80019f8 <GAME_PLAY_Management+0x62c>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <GAME_PLAY_Management+0xa4>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	08001485 	.word	0x08001485
 8001474:	08001701 	.word	0x08001701
 8001478:	0800185f 	.word	0x0800185f
 800147c:	080018dd 	.word	0x080018dd
 8001480:	08001985 	.word	0x08001985
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <GAME_PLAY_Management+0x304>)
 8001486:	2200      	movs	r2, #0
 8001488:	9202      	str	r2, [sp, #8]
 800148a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148e:	9201      	str	r2, [sp, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	9200      	str	r2, [sp, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a8f      	ldr	r2, [pc, #572]	; (80016d4 <GAME_PLAY_Management+0x308>)
 8001498:	2105      	movs	r1, #5
 800149a:	2005      	movs	r0, #5
 800149c:	f005 f92f 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80014a0:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <GAME_PLAY_Management+0x304>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	9202      	str	r2, [sp, #8]
 80014a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a89      	ldr	r2, [pc, #548]	; (80016d8 <GAME_PLAY_Management+0x30c>)
 80014b4:	210f      	movs	r1, #15
 80014b6:	2000      	movs	r0, #0
 80014b8:	f005 f921 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80014bc:	4b87      	ldr	r3, [pc, #540]	; (80016dc <GAME_PLAY_Management+0x310>)
 80014be:	2200      	movs	r2, #0
 80014c0:	9202      	str	r2, [sp, #8]
 80014c2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	9200      	str	r2, [sp, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a84      	ldr	r2, [pc, #528]	; (80016e0 <GAME_PLAY_Management+0x314>)
 80014d0:	2123      	movs	r1, #35	; 0x23
 80014d2:	2008      	movs	r0, #8
 80014d4:	f005 f913 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80014d8:	4b80      	ldr	r3, [pc, #512]	; (80016dc <GAME_PLAY_Management+0x310>)
 80014da:	2200      	movs	r2, #0
 80014dc:	9202      	str	r2, [sp, #8]
 80014de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7e      	ldr	r2, [pc, #504]	; (80016e4 <GAME_PLAY_Management+0x318>)
 80014ec:	213c      	movs	r1, #60	; 0x3c
 80014ee:	2019      	movs	r0, #25
 80014f0:	f005 f905 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80014f4:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <GAME_PLAY_Management+0x304>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	9202      	str	r2, [sp, #8]
 80014fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fe:	9201      	str	r2, [sp, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <GAME_PLAY_Management+0x30c>)
 8001508:	214b      	movs	r1, #75	; 0x4b
 800150a:	2000      	movs	r0, #0
 800150c:	f005 f8f7 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001510:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <GAME_PLAY_Management+0x304>)
 8001512:	2200      	movs	r2, #0
 8001514:	9202      	str	r2, [sp, #8]
 8001516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151a:	9201      	str	r2, [sp, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a71      	ldr	r2, [pc, #452]	; (80016e8 <GAME_PLAY_Management+0x31c>)
 8001524:	215a      	movs	r1, #90	; 0x5a
 8001526:	2000      	movs	r0, #0
 8001528:	f005 f8e9 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <GAME_PLAY_Management+0x304>)
 800152e:	2200      	movs	r2, #0
 8001530:	9202      	str	r2, [sp, #8]
 8001532:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001536:	9201      	str	r2, [sp, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6b      	ldr	r2, [pc, #428]	; (80016ec <GAME_PLAY_Management+0x320>)
 8001540:	215a      	movs	r1, #90	; 0x5a
 8001542:	205d      	movs	r0, #93	; 0x5d
 8001544:	f005 f8db 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <GAME_PLAY_Management+0x304>)
 800154a:	2200      	movs	r2, #0
 800154c:	9202      	str	r2, [sp, #8]
 800154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001552:	9201      	str	r2, [sp, #4]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	9200      	str	r2, [sp, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a65      	ldr	r2, [pc, #404]	; (80016f0 <GAME_PLAY_Management+0x324>)
 800155c:	2169      	movs	r1, #105	; 0x69
 800155e:	2000      	movs	r0, #0
 8001560:	f005 f8cd 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001564:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <GAME_PLAY_Management+0x304>)
 8001566:	2200      	movs	r2, #0
 8001568:	9202      	str	r2, [sp, #8]
 800156a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800156e:	9201      	str	r2, [sp, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	9200      	str	r2, [sp, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a5f      	ldr	r2, [pc, #380]	; (80016f4 <GAME_PLAY_Management+0x328>)
 8001578:	2169      	movs	r1, #105	; 0x69
 800157a:	2064      	movs	r0, #100	; 0x64
 800157c:	f005 f8bf 	bl	80066fe <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <GAME_PLAY_Management+0x304>)
 8001582:	2200      	movs	r2, #0
 8001584:	9202      	str	r2, [sp, #8]
 8001586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158a:	9201      	str	r2, [sp, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	9200      	str	r2, [sp, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a59      	ldr	r2, [pc, #356]	; (80016f8 <GAME_PLAY_Management+0x32c>)
 8001594:	2105      	movs	r1, #5
 8001596:	2005      	movs	r0, #5
 8001598:	f005 f8fb 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <GAME_PLAY_Management+0x304>)
 800159e:	2200      	movs	r2, #0
 80015a0:	9202      	str	r2, [sp, #8]
 80015a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	9200      	str	r2, [sp, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <GAME_PLAY_Management+0x30c>)
 80015b0:	210f      	movs	r1, #15
 80015b2:	2000      	movs	r0, #0
 80015b4:	f005 f8ed 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <GAME_PLAY_Management+0x310>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	9202      	str	r2, [sp, #8]
 80015be:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80015c2:	9201      	str	r2, [sp, #4]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	9200      	str	r2, [sp, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a45      	ldr	r2, [pc, #276]	; (80016e0 <GAME_PLAY_Management+0x314>)
 80015cc:	2123      	movs	r1, #35	; 0x23
 80015ce:	2008      	movs	r0, #8
 80015d0:	f005 f8df 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <GAME_PLAY_Management+0x310>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a3f      	ldr	r2, [pc, #252]	; (80016e4 <GAME_PLAY_Management+0x318>)
 80015e8:	213c      	movs	r1, #60	; 0x3c
 80015ea:	2014      	movs	r0, #20
 80015ec:	f005 f8d1 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <GAME_PLAY_Management+0x304>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	9202      	str	r2, [sp, #8]
 80015f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015fa:	9201      	str	r2, [sp, #4]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	9200      	str	r2, [sp, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <GAME_PLAY_Management+0x30c>)
 8001604:	214b      	movs	r1, #75	; 0x4b
 8001606:	2000      	movs	r0, #0
 8001608:	f005 f8c3 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <GAME_PLAY_Management+0x304>)
 800160e:	2200      	movs	r2, #0
 8001610:	9202      	str	r2, [sp, #8]
 8001612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001616:	9201      	str	r2, [sp, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <GAME_PLAY_Management+0x31c>)
 8001620:	215a      	movs	r1, #90	; 0x5a
 8001622:	2000      	movs	r0, #0
 8001624:	f005 f8b5 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <GAME_PLAY_Management+0x304>)
 800162a:	2200      	movs	r2, #0
 800162c:	9202      	str	r2, [sp, #8]
 800162e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001632:	9201      	str	r2, [sp, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <GAME_PLAY_Management+0x320>)
 800163c:	215a      	movs	r1, #90	; 0x5a
 800163e:	205d      	movs	r0, #93	; 0x5d
 8001640:	f005 f8a7 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <GAME_PLAY_Management+0x304>)
 8001646:	2200      	movs	r2, #0
 8001648:	9202      	str	r2, [sp, #8]
 800164a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	9200      	str	r2, [sp, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <GAME_PLAY_Management+0x324>)
 8001658:	2169      	movs	r1, #105	; 0x69
 800165a:	2000      	movs	r0, #0
 800165c:	f005 f899 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <GAME_PLAY_Management+0x304>)
 8001662:	2200      	movs	r2, #0
 8001664:	9202      	str	r2, [sp, #8]
 8001666:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	9200      	str	r2, [sp, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <GAME_PLAY_Management+0x328>)
 8001674:	2169      	movs	r1, #105	; 0x69
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f005 f88b 	bl	8006792 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800167c:	2108      	movs	r1, #8
 800167e:	481f      	ldr	r0, [pc, #124]	; (80016fc <GAME_PLAY_Management+0x330>)
 8001680:	f009 f800 	bl	800a684 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10a      	bne.n	80016a0 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800168a:	2000      	movs	r0, #0
 800168c:	f005 fa9e 	bl	8006bcc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001690:	2000      	movs	r0, #0
 8001692:	f005 faac 	bl	8006bee <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 800169e:	e1ab      	b.n	80019f8 <GAME_PLAY_Management+0x62c>
			state_game->PlyerAction_State = PS_AFK;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80016c0:	e19a      	b.n	80019f8 <GAME_PLAY_Management+0x62c>
 80016c2:	bf00      	nop
 80016c4:	58020800 	.word	0x58020800
 80016c8:	58020400 	.word	0x58020400
 80016cc:	58021400 	.word	0x58021400
 80016d0:	2400000c 	.word	0x2400000c
 80016d4:	0801094c 	.word	0x0801094c
 80016d8:	08010958 	.word	0x08010958
 80016dc:	24000014 	.word	0x24000014
 80016e0:	0801096c 	.word	0x0801096c
 80016e4:	08010978 	.word	0x08010978
 80016e8:	08010980 	.word	0x08010980
 80016ec:	08010990 	.word	0x08010990
 80016f0:	08010998 	.word	0x08010998
 80016f4:	080109a8 	.word	0x080109a8
 80016f8:	080109ac 	.word	0x080109ac
 80016fc:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <GAME_PLAY_Management+0x590>)
 8001702:	2200      	movs	r2, #0
 8001704:	9202      	str	r2, [sp, #8]
 8001706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800170a:	9201      	str	r2, [sp, #4]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	9200      	str	r2, [sp, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a93      	ldr	r2, [pc, #588]	; (8001960 <GAME_PLAY_Management+0x594>)
 8001714:	2105      	movs	r1, #5
 8001716:	2005      	movs	r0, #5
 8001718:	f004 fff1 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800171c:	4b8f      	ldr	r3, [pc, #572]	; (800195c <GAME_PLAY_Management+0x590>)
 800171e:	2200      	movs	r2, #0
 8001720:	9202      	str	r2, [sp, #8]
 8001722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001726:	9201      	str	r2, [sp, #4]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	9200      	str	r2, [sp, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a8d      	ldr	r2, [pc, #564]	; (8001964 <GAME_PLAY_Management+0x598>)
 8001730:	210f      	movs	r1, #15
 8001732:	2000      	movs	r0, #0
 8001734:	f004 ffe3 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001738:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <GAME_PLAY_Management+0x59c>)
 800173a:	2200      	movs	r2, #0
 800173c:	9202      	str	r2, [sp, #8]
 800173e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001742:	9201      	str	r2, [sp, #4]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a88      	ldr	r2, [pc, #544]	; (800196c <GAME_PLAY_Management+0x5a0>)
 800174c:	2123      	movs	r1, #35	; 0x23
 800174e:	2019      	movs	r0, #25
 8001750:	f004 ffd5 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001754:	4b84      	ldr	r3, [pc, #528]	; (8001968 <GAME_PLAY_Management+0x59c>)
 8001756:	2200      	movs	r2, #0
 8001758:	9202      	str	r2, [sp, #8]
 800175a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a82      	ldr	r2, [pc, #520]	; (8001970 <GAME_PLAY_Management+0x5a4>)
 8001768:	213c      	movs	r1, #60	; 0x3c
 800176a:	2021      	movs	r0, #33	; 0x21
 800176c:	f004 ffc7 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001770:	4b7a      	ldr	r3, [pc, #488]	; (800195c <GAME_PLAY_Management+0x590>)
 8001772:	2200      	movs	r2, #0
 8001774:	9202      	str	r2, [sp, #8]
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	9201      	str	r2, [sp, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a78      	ldr	r2, [pc, #480]	; (8001964 <GAME_PLAY_Management+0x598>)
 8001784:	214b      	movs	r1, #75	; 0x4b
 8001786:	2000      	movs	r0, #0
 8001788:	f004 ffb9 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <GAME_PLAY_Management+0x590>)
 800178e:	2200      	movs	r2, #0
 8001790:	9202      	str	r2, [sp, #8]
 8001792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001796:	9201      	str	r2, [sp, #4]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a75      	ldr	r2, [pc, #468]	; (8001974 <GAME_PLAY_Management+0x5a8>)
 80017a0:	2105      	movs	r1, #5
 80017a2:	2005      	movs	r0, #5
 80017a4:	f004 fff5 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017a8:	4b6c      	ldr	r3, [pc, #432]	; (800195c <GAME_PLAY_Management+0x590>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	9202      	str	r2, [sp, #8]
 80017ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	9200      	str	r2, [sp, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6a      	ldr	r2, [pc, #424]	; (8001964 <GAME_PLAY_Management+0x598>)
 80017bc:	210f      	movs	r1, #15
 80017be:	2000      	movs	r0, #0
 80017c0:	f004 ffe7 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <GAME_PLAY_Management+0x59c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	9202      	str	r2, [sp, #8]
 80017ca:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80017ce:	9201      	str	r2, [sp, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a65      	ldr	r2, [pc, #404]	; (800196c <GAME_PLAY_Management+0x5a0>)
 80017d8:	2123      	movs	r1, #35	; 0x23
 80017da:	2019      	movs	r0, #25
 80017dc:	f004 ffd9 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80017e0:	4b61      	ldr	r3, [pc, #388]	; (8001968 <GAME_PLAY_Management+0x59c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	9202      	str	r2, [sp, #8]
 80017e6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80017ea:	9201      	str	r2, [sp, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	9200      	str	r2, [sp, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a61      	ldr	r2, [pc, #388]	; (8001978 <GAME_PLAY_Management+0x5ac>)
 80017f4:	213c      	movs	r1, #60	; 0x3c
 80017f6:	2025      	movs	r0, #37	; 0x25
 80017f8:	f004 ffcb 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017fc:	4b57      	ldr	r3, [pc, #348]	; (800195c <GAME_PLAY_Management+0x590>)
 80017fe:	2200      	movs	r2, #0
 8001800:	9202      	str	r2, [sp, #8]
 8001802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001806:	9201      	str	r2, [sp, #4]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	9200      	str	r2, [sp, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a55      	ldr	r2, [pc, #340]	; (8001964 <GAME_PLAY_Management+0x598>)
 8001810:	214b      	movs	r1, #75	; 0x4b
 8001812:	2000      	movs	r0, #0
 8001814:	f004 ffbd 	bl	8006792 <ST7735_WriteString1>
		HAL_Delay(3000);
 8001818:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800181c:	f005 fde4 	bl	80073e8 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8001820:	2000      	movs	r0, #0
 8001822:	f005 f9d3 	bl	8006bcc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001826:	2000      	movs	r0, #0
 8001828:	f005 f9e1 	bl	8006bee <ST7735_FillScreen1>
		MainGUI();
 800182c:	f003 fe48 	bl	80054c0 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001836:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800183e:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8001840:	69f8      	ldr	r0, [r7, #28]
 8001842:	f7ff fcb1 	bl	80011a8 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8001846:	69b8      	ldr	r0, [r7, #24]
 8001848:	f7ff fcae 	bl	80011a8 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 800185c:	e0cc      	b.n	80019f8 <GAME_PLAY_Management+0x62c>
	case first_player:
		if (state_game -> F_flag == 0){
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8001864:	2b00      	cmp	r3, #0
 8001866:	d12b      	bne.n	80018c0 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <GAME_PLAY_Management+0x59c>)
 800186a:	2200      	movs	r2, #0
 800186c:	9202      	str	r2, [sp, #8]
 800186e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	9200      	str	r2, [sp, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a40      	ldr	r2, [pc, #256]	; (800197c <GAME_PLAY_Management+0x5b0>)
 800187c:	215a      	movs	r1, #90	; 0x5a
 800187e:	200f      	movs	r0, #15
 8001880:	f004 ff87 	bl	8006792 <ST7735_WriteString1>
			HAL_Delay(2000);
 8001884:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001888:	f005 fdae 	bl	80073e8 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2326      	movs	r3, #38	; 0x26
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	215a      	movs	r1, #90	; 0x5a
 8001896:	2000      	movs	r0, #0
 8001898:	f005 f89a 	bl	80069d0 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <GAME_PLAY_Management+0x5b4>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <GAME_PLAY_Management+0x5b4>)
 80018be:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	3304      	adds	r3, #4
 80018c4:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80018cc:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f899 	bl	8001a0c <GAME_PLAY_Phase_Management>
		break;
 80018da:	e08d      	b.n	80019f8 <GAME_PLAY_Management+0x62c>
	case second_player:
		if (state_game -> S_flag == 0){
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d12b      	bne.n	800193e <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <GAME_PLAY_Management+0x59c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	9202      	str	r2, [sp, #8]
 80018ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018f0:	9201      	str	r2, [sp, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	9200      	str	r2, [sp, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a20      	ldr	r2, [pc, #128]	; (800197c <GAME_PLAY_Management+0x5b0>)
 80018fa:	215a      	movs	r1, #90	; 0x5a
 80018fc:	200f      	movs	r0, #15
 80018fe:	f004 fefe 	bl	80066fe <ST7735_WriteString>
			HAL_Delay(2000);
 8001902:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001906:	f005 fd6f 	bl	80073e8 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 800190a:	2300      	movs	r3, #0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2326      	movs	r3, #38	; 0x26
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	215a      	movs	r1, #90	; 0x5a
 8001914:	2000      	movs	r0, #0
 8001916:	f004 ffe7 	bl	80068e8 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8001920:	3301      	adds	r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <GAME_PLAY_Management+0x5b4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <GAME_PLAY_Management+0x5b4>)
 800193c:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001944:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	3304      	adds	r3, #4
 800194a:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f85a 	bl	8001a0c <GAME_PLAY_Phase_Management>
		break;
 8001958:	e04e      	b.n	80019f8 <GAME_PLAY_Management+0x62c>
 800195a:	bf00      	nop
 800195c:	2400000c 	.word	0x2400000c
 8001960:	0801094c 	.word	0x0801094c
 8001964:	08010958 	.word	0x08010958
 8001968:	24000014 	.word	0x24000014
 800196c:	080109b8 	.word	0x080109b8
 8001970:	080109c0 	.word	0x080109c0
 8001974:	080109ac 	.word	0x080109ac
 8001978:	080109c8 	.word	0x080109c8
 800197c:	080109d0 	.word	0x080109d0
 8001980:	24000176 	.word	0x24000176
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8001984:	2301      	movs	r3, #1
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2300      	movs	r3, #0
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2326      	movs	r3, #38	; 0x26
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	215a      	movs	r1, #90	; 0x5a
 8001992:	2000      	movs	r0, #0
 8001994:	f005 f890 	bl	8006ab8 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2300      	movs	r3, #0
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2326      	movs	r3, #38	; 0x26
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	215a      	movs	r1, #90	; 0x5a
 80019a6:	2000      	movs	r0, #0
 80019a8:	f005 f886 	bl	8006ab8 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 80019ac:	20c8      	movs	r0, #200	; 0xc8
 80019ae:	f005 fd1b 	bl	80073e8 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <GAME_PLAY_Management+0x634>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	9203      	str	r2, [sp, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	9202      	str	r2, [sp, #8]
 80019bc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	9200      	str	r2, [sp, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <GAME_PLAY_Management+0x638>)
 80019ca:	215a      	movs	r1, #90	; 0x5a
 80019cc:	2014      	movs	r0, #20
 80019ce:	f004 ff2a 	bl	8006826 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <GAME_PLAY_Management+0x634>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	9203      	str	r2, [sp, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	9202      	str	r2, [sp, #8]
 80019dc:	221f      	movs	r2, #31
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	9200      	str	r2, [sp, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <GAME_PLAY_Management+0x63c>)
 80019e8:	215a      	movs	r1, #90	; 0x5a
 80019ea:	200f      	movs	r0, #15
 80019ec:	f004 ff1b 	bl	8006826 <ST7735_WriteStringNSS>
		HAL_Delay(200);
 80019f0:	20c8      	movs	r0, #200	; 0xc8
 80019f2:	f005 fcf9 	bl	80073e8 <HAL_Delay>
		break;
 80019f6:	bf00      	nop
	}
}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000014 	.word	0x24000014
 8001a04:	080109dc 	.word	0x080109dc
 8001a08:	080109e4 	.word	0x080109e4

08001a0c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8001a12:	af04      	add	r7, sp, #16
 8001a14:	f507 7418 	add.w	r4, r7, #608	; 0x260
 8001a18:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 8001a1c:	6020      	str	r0, [r4, #0]
 8001a1e:	f507 7018 	add.w	r0, r7, #608	; 0x260
 8001a22:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 8001a26:	6001      	str	r1, [r0, #0]
 8001a28:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8001a2c:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8001a30:	600a      	str	r2, [r1, #0]
 8001a32:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001a36:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8001a3a:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8001a3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a40:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001a4a:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001a4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8001a5c:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8001a60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001a6e:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 8001a72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a76:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8001a80:	461a      	mov	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	f00e fae0 	bl	8010048 <memset>

	switch (PAS) {
 8001a88:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	f203 82f8 	bhi.w	8005082 <GAME_PLAY_Phase_Management+0x3676>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <GAME_PLAY_Phase_Management+0x8c>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08005075 	.word	0x08005075
 8001a9c:	08001aa9 	.word	0x08001aa9
 8001aa0:	08001c01 	.word	0x08001c01
 8001aa4:	08003c1f 	.word	0x08003c1f
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 8001aa8:	48b5      	ldr	r0, [pc, #724]	; (8001d80 <GAME_PLAY_Phase_Management+0x374>)
 8001aaa:	f00b ff71 	bl	800d990 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 8001aae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ab2:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8001ab6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001aba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001abe:	6811      	ldr	r1, [r2, #0]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f003 fdbd 	bl	8005640 <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001ac6:	4baf      	ldr	r3, [pc, #700]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	9202      	str	r2, [sp, #8]
 8001acc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ad0:	9201      	str	r2, [sp, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4aab      	ldr	r2, [pc, #684]	; (8001d88 <GAME_PLAY_Phase_Management+0x37c>)
 8001ada:	2123      	movs	r1, #35	; 0x23
 8001adc:	206e      	movs	r0, #110	; 0x6e
 8001ade:	f004 fe0e 	bl	80066fe <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001ae2:	4ba8      	ldr	r3, [pc, #672]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	9202      	str	r2, [sp, #8]
 8001ae8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001aec:	9201      	str	r2, [sp, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	9200      	str	r2, [sp, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4aa4      	ldr	r2, [pc, #656]	; (8001d88 <GAME_PLAY_Phase_Management+0x37c>)
 8001af6:	2123      	movs	r1, #35	; 0x23
 8001af8:	206e      	movs	r0, #110	; 0x6e
 8001afa:	f004 fe4a 	bl	8006792 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001afe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b02:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	4b9e      	ldr	r3, [pc, #632]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001b0c:	9203      	str	r2, [sp, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	9202      	str	r2, [sp, #8]
 8001b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b16:	9201      	str	r2, [sp, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	9200      	str	r2, [sp, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a9b      	ldr	r2, [pc, #620]	; (8001d8c <GAME_PLAY_Phase_Management+0x380>)
 8001b20:	215a      	movs	r1, #90	; 0x5a
 8001b22:	2005      	movs	r0, #5
 8001b24:	f004 fe7f 	bl	8006826 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001b28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b2c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001b36:	9203      	str	r2, [sp, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	9202      	str	r2, [sp, #8]
 8001b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	9200      	str	r2, [sp, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a91      	ldr	r2, [pc, #580]	; (8001d90 <GAME_PLAY_Phase_Management+0x384>)
 8001b4a:	215a      	movs	r1, #90	; 0x5a
 8001b4c:	2005      	movs	r0, #5
 8001b4e:	f004 fe6a 	bl	8006826 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001b52:	2101      	movs	r1, #1
 8001b54:	488f      	ldr	r0, [pc, #572]	; (8001d94 <GAME_PLAY_Phase_Management+0x388>)
 8001b56:	f008 fd95 	bl	800a684 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f043 828b 	bne.w	8005078 <GAME_PLAY_Phase_Management+0x366c>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f005 f832 	bl	8006bcc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f005 f840 	bl	8006bee <ST7735_FillScreen1>
			MainGUI();
 8001b6e:	f003 fca7 	bl	80054c0 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8001b72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b76:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001b82:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b86:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001b92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001b96:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8001ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba4:	f005 fc20 	bl	80073e8 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001ba8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001bb6:	9203      	str	r2, [sp, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	9202      	str	r2, [sp, #8]
 8001bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc0:	9201      	str	r2, [sp, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a70      	ldr	r2, [pc, #448]	; (8001d8c <GAME_PLAY_Phase_Management+0x380>)
 8001bca:	215a      	movs	r1, #90	; 0x5a
 8001bcc:	2005      	movs	r0, #5
 8001bce:	f004 fe2a 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001bd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001bd6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001be0:	9203      	str	r2, [sp, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	9202      	str	r2, [sp, #8]
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	9201      	str	r2, [sp, #4]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	9200      	str	r2, [sp, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a69      	ldr	r2, [pc, #420]	; (8001d98 <GAME_PLAY_Phase_Management+0x38c>)
 8001bf4:	215a      	movs	r1, #90	; 0x5a
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f004 fe15 	bl	8006826 <ST7735_WriteStringNSS>
		}
		break;
 8001bfc:	f003 ba3c 	b.w	8005078 <GAME_PLAY_Phase_Management+0x366c>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8001c00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c04:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8001c08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001c10:	6811      	ldr	r1, [r2, #0]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	f003 fd14 	bl	8005640 <LCDvalue>

		switch (PMS)
 8001c18:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	f203 822d 	bhi.w	800507c <GAME_PLAY_Phase_Management+0x3670>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <GAME_PLAY_Phase_Management+0x21c>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08003bf5 	.word	0x08003bf5
 8001c2c:	08001c49 	.word	0x08001c49
 8001c30:	08001dfd 	.word	0x08001dfd
 8001c34:	08001f67 	.word	0x08001f67
 8001c38:	080024ed 	.word	0x080024ed
 8001c3c:	08002bc9 	.word	0x08002bc9
 8001c40:	08002999 	.word	0x08002999
 8001c44:	0800277f 	.word	0x0800277f
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8001c48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001c4c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 80a7 	bne.w	8001da8 <GAME_PLAY_Phase_Management+0x39c>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	9202      	str	r2, [sp, #8]
 8001c60:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001c64:	9201      	str	r2, [sp, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	9200      	str	r2, [sp, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <GAME_PLAY_Phase_Management+0x390>)
 8001c6e:	2123      	movs	r1, #35	; 0x23
 8001c70:	206e      	movs	r0, #110	; 0x6e
 8001c72:	f004 fd44 	bl	80066fe <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	9202      	str	r2, [sp, #8]
 8001c7c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	9200      	str	r2, [sp, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a44      	ldr	r2, [pc, #272]	; (8001d9c <GAME_PLAY_Phase_Management+0x390>)
 8001c8a:	2123      	movs	r1, #35	; 0x23
 8001c8c:	206e      	movs	r0, #110	; 0x6e
 8001c8e:	f004 fd80 	bl	8006792 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001c92:	2101      	movs	r1, #1
 8001c94:	483f      	ldr	r0, [pc, #252]	; (8001d94 <GAME_PLAY_Phase_Management+0x388>)
 8001c96:	f008 fcf5 	bl	800a684 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d15b      	bne.n	8001d58 <GAME_PLAY_Phase_Management+0x34c>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f004 ff93 	bl	8006bcc <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f004 ffa1 	bl	8006bee <ST7735_FillScreen1>
					MainGUI();
 8001cac:	f003 fc08 	bl	80054c0 <MainGUI>
					state_game->action = 50;
 8001cb0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cb4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2232      	movs	r2, #50	; 0x32
 8001cbc:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001cbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cc2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 8001cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cd2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	f003 fbd1 	bl	800547e <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 8001cdc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ce0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001cec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001cf0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 8001cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d00:	f005 fb72 	bl	80073e8 <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001d04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d08:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001d12:	9203      	str	r2, [sp, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1c:	9201      	str	r2, [sp, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <GAME_PLAY_Phase_Management+0x394>)
 8001d26:	215a      	movs	r1, #90	; 0x5a
 8001d28:	2005      	movs	r0, #5
 8001d2a:	f004 fd7c 	bl	8006826 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001d2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d32:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <GAME_PLAY_Phase_Management+0x378>)
 8001d3c:	9203      	str	r2, [sp, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	9202      	str	r2, [sp, #8]
 8001d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <GAME_PLAY_Phase_Management+0x398>)
 8001d50:	215a      	movs	r1, #90	; 0x5a
 8001d52:	2005      	movs	r0, #5
 8001d54:	f004 fd67 	bl	8006826 <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001d58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d5c:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8001d60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d64:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8001d68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d6c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	6809      	ldr	r1, [r1, #0]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f7fe fced 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8001d7a:	f001 bf3e 	b.w	8003bfa <GAME_PLAY_Phase_Management+0x21ee>
 8001d7e:	bf00      	nop
 8001d80:	240002e8 	.word	0x240002e8
 8001d84:	2400000c 	.word	0x2400000c
 8001d88:	080109f0 	.word	0x080109f0
 8001d8c:	080109f4 	.word	0x080109f4
 8001d90:	08010a04 	.word	0x08010a04
 8001d94:	58020800 	.word	0x58020800
 8001d98:	08010a10 	.word	0x08010a10
 8001d9c:	08010a20 	.word	0x08010a20
 8001da0:	08010a24 	.word	0x08010a24
 8001da4:	08010a34 	.word	0x08010a34
			else if (state_game->action == 1)
 8001da8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001dac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	f041 8720 	bne.w	8003bfa <GAME_PLAY_Phase_Management+0x21ee>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001dba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001dbe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2326      	movs	r3, #38	; 0x26
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	215a      	movs	r1, #90	; 0x5a
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f004 fe70 	bl	8006ab8 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8001dd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ddc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8001de8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001dec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001df8:	f001 beff 	b.w	8003bfa <GAME_PLAY_Phase_Management+0x21ee>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001dfc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e00:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	4ba6      	ldr	r3, [pc, #664]	; (80020a4 <GAME_PLAY_Phase_Management+0x698>)
 8001e0a:	9203      	str	r2, [sp, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	9202      	str	r2, [sp, #8]
 8001e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	9200      	str	r2, [sp, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4aa2      	ldr	r2, [pc, #648]	; (80020a8 <GAME_PLAY_Phase_Management+0x69c>)
 8001e1e:	215a      	movs	r1, #90	; 0x5a
 8001e20:	2005      	movs	r0, #5
 8001e22:	f004 fd00 	bl	8006826 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001e26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001e34:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001e38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e3c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e46:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8001e4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d147      	bne.n	8001eea <GAME_PLAY_Phase_Management+0x4de>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8001e5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	789b      	ldrb	r3, [r3, #2]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <GAME_PLAY_Phase_Management+0x478>
					ptrYugiohCard_src->cardState = 0;
 8001e6a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001e6e:	2200      	movs	r2, #0
 8001e70:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001e72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e76:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001e80:	f001 bebe 	b.w	8003c00 <GAME_PLAY_Phase_Management+0x21f4>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001e84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f041 86b5 	bne.w	8003c00 <GAME_PLAY_Phase_Management+0x21f4>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8001e96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e9e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	f003 fa9e 	bl	80053e4 <YUGIOH_Check_Spell_On_board>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8001eae:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d00c      	beq.n	8001ed0 <GAME_PLAY_Phase_Management+0x4c4>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8001eb6:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8001eba:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001ebe:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fc11 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8001ed0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001ed8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001edc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	701a      	strb	r2, [r3, #0]
			break;
 8001ee6:	f001 be8b 	b.w	8003c00 <GAME_PLAY_Phase_Management+0x21f4>
			else if (state_game->action == 2)
 8001eea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001eee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	f041 8682 	bne.w	8003c00 <GAME_PLAY_Phase_Management+0x21f4>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001efc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f00:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2326      	movs	r3, #38	; 0x26
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	215a      	movs	r1, #90	; 0x5a
 8001f14:	2000      	movs	r0, #0
 8001f16:	f004 fdcf 	bl	8006ab8 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001f1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f1e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2326      	movs	r3, #38	; 0x26
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	215a      	movs	r1, #90	; 0x5a
 8001f32:	2000      	movs	r0, #0
 8001f34:	f004 fdc0 	bl	8006ab8 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001f38:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8001f3c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8001f40:	f7fe fba0 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8001f44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f48:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8001f52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f56:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001f62:	f001 be4d 	b.w	8003c00 <GAME_PLAY_Phase_Management+0x21f4>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001f66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f6a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f74:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8001f78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f7c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	f041 863e 	bne.w	8003c06 <GAME_PLAY_Phase_Management+0x21fa>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001f8a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001f8e:	785b      	ldrb	r3, [r3, #1]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	f040 8093 	bne.w	80020bc <GAME_PLAY_Phase_Management+0x6b0>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001f96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <GAME_PLAY_Phase_Management+0x698>)
 8001fa4:	9203      	str	r2, [sp, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	9202      	str	r2, [sp, #8]
 8001faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	9200      	str	r2, [sp, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <GAME_PLAY_Phase_Management+0x6a0>)
 8001fb8:	215a      	movs	r1, #90	; 0x5a
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f004 fc33 	bl	8006826 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001fc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fc4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <GAME_PLAY_Phase_Management+0x698>)
 8001fce:	9203      	str	r2, [sp, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	9202      	str	r2, [sp, #8]
 8001fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd8:	9201      	str	r2, [sp, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	9200      	str	r2, [sp, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <GAME_PLAY_Phase_Management+0x6a4>)
 8001fe2:	215a      	movs	r1, #90	; 0x5a
 8001fe4:	2005      	movs	r0, #5
 8001fe6:	f004 fc1e 	bl	8006826 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001fea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fee:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <GAME_PLAY_Phase_Management+0x698>)
 8001ff8:	9203      	str	r2, [sp, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	9202      	str	r2, [sp, #8]
 8001ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002002:	9201      	str	r2, [sp, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	9200      	str	r2, [sp, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <GAME_PLAY_Phase_Management+0x6a8>)
 800200c:	2169      	movs	r1, #105	; 0x69
 800200e:	2005      	movs	r0, #5
 8002010:	f004 fc09 	bl	8006826 <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8002014:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002018:	2200      	movs	r2, #0
 800201a:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800201c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002020:	799a      	ldrb	r2, [r3, #6]
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <GAME_PLAY_Phase_Management+0x6ac>)
 8002024:	fba3 1302 	umull	r1, r3, r3, r2
 8002028:	0899      	lsrs	r1, r3, #2
 800202a:	460b      	mov	r3, r1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	440b      	add	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002038:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 800203c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002040:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	3308      	adds	r3, #8
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	4413      	add	r3, r2
 800204c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002050:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002054:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002058:	f7fe fb14 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800205c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002060:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	f7ff f879 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800206a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800206e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002078:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fb01 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8002082:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002086:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002090:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002094:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 80020a0:	f001 bdb1 	b.w	8003c06 <GAME_PLAY_Phase_Management+0x21fa>
 80020a4:	2400000c 	.word	0x2400000c
 80020a8:	08010a44 	.word	0x08010a44
 80020ac:	08010a54 	.word	0x08010a54
 80020b0:	08010a64 	.word	0x08010a64
 80020b4:	08010a74 	.word	0x08010a74
 80020b8:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 2)
 80020bc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f040 8146 	bne.w	8002354 <GAME_PLAY_Phase_Management+0x948>
					state_game->count_chain = 1;
 80020c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 80020d6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80020da:	789b      	ldrb	r3, [r3, #2]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	f040 80a7 	bne.w	8002230 <GAME_PLAY_Phase_Management+0x824>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80020e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b92      	ldr	r3, [pc, #584]	; (8002338 <GAME_PLAY_Phase_Management+0x92c>)
 80020f0:	9203      	str	r2, [sp, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	9202      	str	r2, [sp, #8]
 80020f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fa:	9201      	str	r2, [sp, #4]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	9200      	str	r2, [sp, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a8e      	ldr	r2, [pc, #568]	; (800233c <GAME_PLAY_Phase_Management+0x930>)
 8002104:	215a      	movs	r1, #90	; 0x5a
 8002106:	2005      	movs	r0, #5
 8002108:	f004 fb8d 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800210c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002110:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b87      	ldr	r3, [pc, #540]	; (8002338 <GAME_PLAY_Phase_Management+0x92c>)
 800211a:	9203      	str	r2, [sp, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	9202      	str	r2, [sp, #8]
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	9201      	str	r2, [sp, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a84      	ldr	r2, [pc, #528]	; (8002340 <GAME_PLAY_Phase_Management+0x934>)
 800212e:	215a      	movs	r1, #90	; 0x5a
 8002130:	2005      	movs	r0, #5
 8002132:	f004 fb78 	bl	8006826 <ST7735_WriteStringNSS>
						state_game->action = 4;
 8002136:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800213a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2204      	movs	r2, #4
 8002142:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8002144:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002148:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	f7ff f8b0 	bl	80012b2 <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8002152:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002156:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002160:	4619      	mov	r1, r3
 8002162:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002166:	f7fe fa8d 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 800216a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800216e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002178:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8002182:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002186:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002190:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 800219a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800219e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80021ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2326      	movs	r3, #38	; 0x26
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	215a      	movs	r1, #90	; 0x5a
 80021d2:	2000      	movs	r0, #0
 80021d4:	f004 fc70 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80021d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2326      	movs	r3, #38	; 0x26
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	215a      	movs	r1, #90	; 0x5a
 80021f0:	2000      	movs	r0, #0
 80021f2:	f004 fc61 	bl	8006ab8 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80021f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	f7fe ffac 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002204:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002208:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002212:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fa34 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 800221c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002220:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2207      	movs	r2, #7
 8002228:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800222c:	f001 bceb 	b.w	8003c06 <GAME_PLAY_Phase_Management+0x21fa>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002230:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002234:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <GAME_PLAY_Phase_Management+0x92c>)
 800223e:	9203      	str	r2, [sp, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	9202      	str	r2, [sp, #8]
 8002244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002248:	9201      	str	r2, [sp, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	9200      	str	r2, [sp, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3c      	ldr	r2, [pc, #240]	; (8002344 <GAME_PLAY_Phase_Management+0x938>)
 8002252:	215a      	movs	r1, #90	; 0x5a
 8002254:	2005      	movs	r0, #5
 8002256:	f004 fae6 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800225a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800225e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	4b34      	ldr	r3, [pc, #208]	; (8002338 <GAME_PLAY_Phase_Management+0x92c>)
 8002268:	9203      	str	r2, [sp, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	9202      	str	r2, [sp, #8]
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	9201      	str	r2, [sp, #4]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a33      	ldr	r2, [pc, #204]	; (8002348 <GAME_PLAY_Phase_Management+0x93c>)
 800227c:	215a      	movs	r1, #90	; 0x5a
 800227e:	2005      	movs	r0, #5
 8002280:	f004 fad1 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002284:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002288:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <GAME_PLAY_Phase_Management+0x92c>)
 8002292:	9203      	str	r2, [sp, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	9202      	str	r2, [sp, #8]
 8002298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229c:	9201      	str	r2, [sp, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	9200      	str	r2, [sp, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <GAME_PLAY_Phase_Management+0x940>)
 80022a6:	2169      	movs	r1, #105	; 0x69
 80022a8:	2005      	movs	r0, #5
 80022aa:	f004 fabc 	bl	8006826 <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80022ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80022b2:	799a      	ldrb	r2, [r3, #6]
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <GAME_PLAY_Phase_Management+0x944>)
 80022b6:	fba3 1302 	umull	r1, r3, r3, r2
 80022ba:	0899      	lsrs	r1, r3, #2
 80022bc:	460b      	mov	r3, r1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	440b      	add	r3, r1
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80022ca:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 80022ce:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80022d2:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	3308      	adds	r3, #8
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80022e2:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80022e6:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80022ea:	f7fe f9cb 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80022ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80022f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	f7fe ff30 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80022fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002300:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800230a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f9b8 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8002314:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002318:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002322:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002326:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002332:	f001 bc68 	b.w	8003c06 <GAME_PLAY_Phase_Management+0x21fa>
 8002336:	bf00      	nop
 8002338:	2400000c 	.word	0x2400000c
 800233c:	08010a7c 	.word	0x08010a7c
 8002340:	08010a94 	.word	0x08010a94
 8002344:	08010a54 	.word	0x08010a54
 8002348:	08010a64 	.word	0x08010a64
 800234c:	08010a74 	.word	0x08010a74
 8002350:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 8002354:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	2b01      	cmp	r3, #1
 800235c:	f041 8453 	bne.w	8003c06 <GAME_PLAY_Phase_Management+0x21fa>
					state_game->test = 2;
 8002360:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002364:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 8002370:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002374:	78db      	ldrb	r3, [r3, #3]
 8002376:	2b06      	cmp	r3, #6
 8002378:	f200 80a0 	bhi.w	80024bc <GAME_PLAY_Phase_Management+0xab0>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800237c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002380:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	4bc0      	ldr	r3, [pc, #768]	; (800268c <GAME_PLAY_Phase_Management+0xc80>)
 800238a:	9203      	str	r2, [sp, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	9202      	str	r2, [sp, #8]
 8002390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002394:	9201      	str	r2, [sp, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	9200      	str	r2, [sp, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4abc      	ldr	r2, [pc, #752]	; (8002690 <GAME_PLAY_Phase_Management+0xc84>)
 800239e:	215a      	movs	r1, #90	; 0x5a
 80023a0:	2005      	movs	r0, #5
 80023a2:	f004 fa40 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80023a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4bb6      	ldr	r3, [pc, #728]	; (800268c <GAME_PLAY_Phase_Management+0xc80>)
 80023b4:	9203      	str	r2, [sp, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	9202      	str	r2, [sp, #8]
 80023ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023be:	9201      	str	r2, [sp, #4]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	9200      	str	r2, [sp, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4ab3      	ldr	r2, [pc, #716]	; (8002694 <GAME_PLAY_Phase_Management+0xc88>)
 80023c8:	2169      	movs	r1, #105	; 0x69
 80023ca:	2005      	movs	r0, #5
 80023cc:	f004 fa2b 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80023d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023d4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	4bab      	ldr	r3, [pc, #684]	; (800268c <GAME_PLAY_Phase_Management+0xc80>)
 80023de:	9203      	str	r2, [sp, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	9202      	str	r2, [sp, #8]
 80023e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e8:	9201      	str	r2, [sp, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	9200      	str	r2, [sp, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4aa9      	ldr	r2, [pc, #676]	; (8002698 <GAME_PLAY_Phase_Management+0xc8c>)
 80023f2:	215a      	movs	r1, #90	; 0x5a
 80023f4:	2005      	movs	r0, #5
 80023f6:	f004 fa16 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80023fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	4ba1      	ldr	r3, [pc, #644]	; (800268c <GAME_PLAY_Phase_Management+0xc80>)
 8002408:	9203      	str	r2, [sp, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	9202      	str	r2, [sp, #8]
 800240e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002412:	9201      	str	r2, [sp, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	9200      	str	r2, [sp, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a9e      	ldr	r2, [pc, #632]	; (8002694 <GAME_PLAY_Phase_Management+0xc88>)
 800241c:	2169      	movs	r1, #105	; 0x69
 800241e:	2005      	movs	r0, #5
 8002420:	f004 fa01 	bl	8006826 <ST7735_WriteStringNSS>
						state_game->test = 1;
 8002424:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002428:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002434:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002438:	799a      	ldrb	r2, [r3, #6]
 800243a:	4b98      	ldr	r3, [pc, #608]	; (800269c <GAME_PLAY_Phase_Management+0xc90>)
 800243c:	fba3 1302 	umull	r1, r3, r3, r2
 8002440:	0899      	lsrs	r1, r3, #2
 8002442:	460b      	mov	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	440b      	add	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002450:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 8002454:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002458:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	3308      	adds	r3, #8
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4413      	add	r3, r2
 8002464:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002468:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800246c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002470:	f7fe f908 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002474:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002478:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	f7fe fe6d 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002482:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002486:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002490:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f8f5 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 800249a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800249e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80024a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80024b8:	f001 bba5 	b.w	8003c06 <GAME_PLAY_Phase_Management+0x21fa>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80024bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f7fe fe49 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80024ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2204      	movs	r2, #4
 80024d6:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 80024d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2204      	movs	r2, #4
 80024e4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80024e8:	f001 bb8d 	b.w	8003c06 <GAME_PLAY_Phase_Management+0x21fa>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80024ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024fa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 4)
 80024fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002502:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d111      	bne.n	8002532 <GAME_PLAY_Phase_Management+0xb26>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 800250e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002512:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002516:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800251a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800251e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002522:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	6809      	ldr	r1, [r1, #0]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	f7fe f912 	bl	8000754 <Player_Reading_Card>
 8002530:	e0cf      	b.n	80026d2 <GAME_PLAY_Phase_Management+0xcc6>
			}
			else if (state_game->action == 5)
 8002532:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002536:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d111      	bne.n	8002566 <GAME_PLAY_Phase_Management+0xb5a>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002542:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002546:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800254a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800254e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002552:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002556:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	6809      	ldr	r1, [r1, #0]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f7fe f8f8 	bl	8000754 <Player_Reading_Card>
 8002564:	e0b5      	b.n	80026d2 <GAME_PLAY_Phase_Management+0xcc6>
			}
			else if (state_game->action == 6)
 8002566:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800256a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b06      	cmp	r3, #6
 8002574:	f040 80ad 	bne.w	80026d2 <GAME_PLAY_Phase_Management+0xcc6>
			{
				uint8_t monsterflag = 0 ;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 800257e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002582:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800258c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8002590:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002594:	78db      	ldrb	r3, [r3, #3]
 8002596:	2b04      	cmp	r3, #4
 8002598:	d804      	bhi.n	80025a4 <GAME_PLAY_Phase_Management+0xb98>
				{
					monsterflag += 1;
 800259a:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800259e:	3301      	adds	r3, #1
 80025a0:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}
				ptrYugiohCard_dst++;
 80025a4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80025a8:	3310      	adds	r3, #16
 80025aa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80025ae:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80025b2:	78db      	ldrb	r3, [r3, #3]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d804      	bhi.n	80025c2 <GAME_PLAY_Phase_Management+0xbb6>
				{
					monsterflag += 1;
 80025b8:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80025bc:	3301      	adds	r3, #1
 80025be:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}

				if (monsterflag == 2)
 80025c2:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d16a      	bne.n	80026a0 <GAME_PLAY_Phase_Management+0xc94>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80025ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80025ce:	799a      	ldrb	r2, [r3, #6]
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <GAME_PLAY_Phase_Management+0xc90>)
 80025d2:	fba3 1302 	umull	r1, r3, r3, r2
 80025d6:	0899      	lsrs	r1, r3, #2
 80025d8:	460b      	mov	r3, r1
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	440b      	add	r3, r1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80025e6:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 80025ea:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80025ee:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3308      	adds	r3, #8
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80025fe:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002602:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002606:	f7fe f83d 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 800260a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800260e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8002618:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800261c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002620:	4611      	mov	r1, r2
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	f7fe fe91 	bl	800134a <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8002628:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800262c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8002636:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800263a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800263e:	4611      	mov	r1, r2
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	f7fe fe82 	bl	800134a <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002646:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800264a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	f7fe fd84 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002654:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002658:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002662:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe f80c 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 800266c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002670:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800267a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800267e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 800268a:	e022      	b.n	80026d2 <GAME_PLAY_Phase_Management+0xcc6>
 800268c:	2400000c 	.word	0x2400000c
 8002690:	08010aa8 	.word	0x08010aa8
 8002694:	08010ab4 	.word	0x08010ab4
 8002698:	08010ac0 	.word	0x08010ac0
 800269c:	aaaaaaab 	.word	0xaaaaaaab
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80026a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026a4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	f7fe fd57 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 80026ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80026bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7fd ffd9 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80026d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	4ba8      	ldr	r3, [pc, #672]	; (8002980 <GAME_PLAY_Phase_Management+0xf74>)
 80026e0:	9203      	str	r2, [sp, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	9202      	str	r2, [sp, #8]
 80026e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ea:	9201      	str	r2, [sp, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	9200      	str	r2, [sp, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4aa4      	ldr	r2, [pc, #656]	; (8002984 <GAME_PLAY_Phase_Management+0xf78>)
 80026f4:	215a      	movs	r1, #90	; 0x5a
 80026f6:	2005      	movs	r0, #5
 80026f8:	f004 f895 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80026fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002700:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	4b9d      	ldr	r3, [pc, #628]	; (8002980 <GAME_PLAY_Phase_Management+0xf74>)
 800270a:	9203      	str	r2, [sp, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	9202      	str	r2, [sp, #8]
 8002710:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002714:	9201      	str	r2, [sp, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	9200      	str	r2, [sp, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a9a      	ldr	r2, [pc, #616]	; (8002988 <GAME_PLAY_Phase_Management+0xf7c>)
 800271e:	2169      	movs	r1, #105	; 0x69
 8002720:	2005      	movs	r0, #5
 8002722:	f004 f880 	bl	8006826 <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002726:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800272a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	4b93      	ldr	r3, [pc, #588]	; (8002980 <GAME_PLAY_Phase_Management+0xf74>)
 8002734:	9203      	str	r2, [sp, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	9202      	str	r2, [sp, #8]
 800273a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273e:	9201      	str	r2, [sp, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	9200      	str	r2, [sp, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a91      	ldr	r2, [pc, #580]	; (800298c <GAME_PLAY_Phase_Management+0xf80>)
 8002748:	215a      	movs	r1, #90	; 0x5a
 800274a:	2005      	movs	r0, #5
 800274c:	f004 f86b 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8002750:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002754:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	4b88      	ldr	r3, [pc, #544]	; (8002980 <GAME_PLAY_Phase_Management+0xf74>)
 800275e:	9203      	str	r2, [sp, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	9202      	str	r2, [sp, #8]
 8002764:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002768:	9201      	str	r2, [sp, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a85      	ldr	r2, [pc, #532]	; (8002988 <GAME_PLAY_Phase_Management+0xf7c>)
 8002772:	2169      	movs	r1, #105	; 0x69
 8002774:	2005      	movs	r0, #5
 8002776:	f004 f856 	bl	8006826 <ST7735_WriteStringNSS>
			break;
 800277a:	f001 ba4e 	b.w	8003c1a <GAME_PLAY_Phase_Management+0x220e>
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800277e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002782:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	781a      	ldrb	r2, [r3, #0]
 800278a:	4b7d      	ldr	r3, [pc, #500]	; (8002980 <GAME_PLAY_Phase_Management+0xf74>)
 800278c:	9203      	str	r2, [sp, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	9202      	str	r2, [sp, #8]
 8002792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	9200      	str	r2, [sp, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <GAME_PLAY_Phase_Management+0xf84>)
 80027a0:	215a      	movs	r1, #90	; 0x5a
 80027a2:	2005      	movs	r0, #5
 80027a4:	f004 f83f 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80027a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	781a      	ldrb	r2, [r3, #0]
 80027b4:	4b72      	ldr	r3, [pc, #456]	; (8002980 <GAME_PLAY_Phase_Management+0xf74>)
 80027b6:	9203      	str	r2, [sp, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	9202      	str	r2, [sp, #8]
 80027bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c0:	9201      	str	r2, [sp, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	9200      	str	r2, [sp, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a72      	ldr	r2, [pc, #456]	; (8002994 <GAME_PLAY_Phase_Management+0xf88>)
 80027ca:	215a      	movs	r1, #90	; 0x5a
 80027cc:	2005      	movs	r0, #5
 80027ce:	f004 f82a 	bl	8006826 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 80027d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d138      	bne.n	8002854 <GAME_PLAY_Phase_Management+0xe48>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 80027e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	789b      	ldrb	r3, [r3, #2]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11d      	bne.n	800282e <GAME_PLAY_Phase_Management+0xe22>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80027f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027f6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2326      	movs	r3, #38	; 0x26
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	215a      	movs	r1, #90	; 0x5a
 800280a:	2000      	movs	r0, #0
 800280c:	f004 f954 	bl	8006ab8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002810:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002814:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2205      	movs	r2, #5
 800281c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8002820:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002824:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800282e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002832:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8002836:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800283a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800283e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002842:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6809      	ldr	r1, [r1, #0]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	f7fe f892 	bl	8000974 <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002850:	f001 b9dc 	b.w	8003c0c <GAME_PLAY_Phase_Management+0x2200>
			else if ((state_game->action == 5 )){
 8002854:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002858:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b05      	cmp	r3, #5
 8002862:	f041 81d3 	bne.w	8003c0c <GAME_PLAY_Phase_Management+0x2200>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002866:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800286a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	2300      	movs	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2326      	movs	r3, #38	; 0x26
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	215a      	movs	r1, #90	; 0x5a
 800287e:	2000      	movs	r0, #0
 8002880:	f004 f91a 	bl	8006ab8 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8002884:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002888:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002892:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8002896:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800289a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800289e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	f002 fd72 	bl	800538c <YUGIOH_Check_Trap_On_board>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 80028ae:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80028b2:	2bff      	cmp	r3, #255	; 0xff
 80028b4:	d05b      	beq.n	800296e <GAME_PLAY_Phase_Management+0xf62>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 80028b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	f7fe fcf7 	bl	80012b2 <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80028c4:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80028c8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80028cc:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	3308      	adds	r3, #8
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80028dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80028e0:	2200      	movs	r2, #0
 80028e2:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80028e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80028f2:	4619      	mov	r1, r3
 80028f4:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80028f8:	f7fd fec4 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 80028fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002900:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800290a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8002914:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002918:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002922:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 800292c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002930:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800293a:	3301      	adds	r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002942:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 800294c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002950:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2206      	movs	r2, #6
 8002958:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 800295c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002960:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2204      	movs	r2, #4
 8002968:	701a      	strb	r2, [r3, #0]
			break;
 800296a:	f001 b94f 	b.w	8003c0c <GAME_PLAY_Phase_Management+0x2200>
					state_game->action = 4;
 800296e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002972:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2204      	movs	r2, #4
 800297a:	701a      	strb	r2, [r3, #0]
			break;
 800297c:	f001 b946 	b.w	8003c0c <GAME_PLAY_Phase_Management+0x2200>
 8002980:	2400000c 	.word	0x2400000c
 8002984:	08010aa8 	.word	0x08010aa8
 8002988:	08010ab4 	.word	0x08010ab4
 800298c:	08010ac0 	.word	0x08010ac0
 8002990:	08010ad0 	.word	0x08010ad0
 8002994:	08010ae8 	.word	0x08010ae8
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002998:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800299c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <GAME_PLAY_Phase_Management+0x11b0>)
 80029a6:	9203      	str	r2, [sp, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	9202      	str	r2, [sp, #8]
 80029ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b0:	9201      	str	r2, [sp, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	9200      	str	r2, [sp, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a81      	ldr	r2, [pc, #516]	; (8002bc0 <GAME_PLAY_Phase_Management+0x11b4>)
 80029ba:	215a      	movs	r1, #90	; 0x5a
 80029bc:	2005      	movs	r0, #5
 80029be:	f003 ff32 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80029c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <GAME_PLAY_Phase_Management+0x11b0>)
 80029d0:	9203      	str	r2, [sp, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	9202      	str	r2, [sp, #8]
 80029d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029da:	9201      	str	r2, [sp, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	9200      	str	r2, [sp, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a78      	ldr	r2, [pc, #480]	; (8002bc4 <GAME_PLAY_Phase_Management+0x11b8>)
 80029e4:	215a      	movs	r1, #90	; 0x5a
 80029e6:	2005      	movs	r0, #5
 80029e8:	f003 ff1d 	bl	8006826 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 80029ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d158      	bne.n	8002aae <GAME_PLAY_Phase_Management+0x10a2>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80029fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a00:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002a04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a08:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002a0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a10:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	6809      	ldr	r1, [r1, #0]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	f7fd fe9b 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8002a1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a22:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	789b      	ldrb	r3, [r3, #2]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12c      	bne.n	8002a88 <GAME_PLAY_Phase_Management+0x107c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002a2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a32:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2326      	movs	r3, #38	; 0x26
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	215a      	movs	r1, #90	; 0x5a
 8002a46:	2000      	movs	r0, #0
 8002a48:	f004 f836 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002a4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a50:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2326      	movs	r3, #38	; 0x26
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	215a      	movs	r1, #90	; 0x5a
 8002a64:	2000      	movs	r0, #0
 8002a66:	f004 f827 	bl	8006ab8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002a6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2205      	movs	r2, #5
 8002a76:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8002a7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 8002a88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a8c:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002a90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a94:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002a98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a9c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	6809      	ldr	r1, [r1, #0]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	f7fd ff65 	bl	8000974 <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002aaa:	f001 b8b2 	b.w	8003c12 <GAME_PLAY_Phase_Management+0x2206>
			else if ((state_game->action == 5 )){
 8002aae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ab2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	f041 80a9 	bne.w	8003c12 <GAME_PLAY_Phase_Management+0x2206>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002ac0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ac4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ace:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8002ad2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ad6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ada:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	f002 fc54 	bl	800538c <YUGIOH_Check_Trap_On_board>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 8002aea:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8002aee:	2bff      	cmp	r3, #255	; 0xff
 8002af0:	d05b      	beq.n	8002baa <GAME_PLAY_Phase_Management+0x119e>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8002af2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002af6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	f7fe fbd9 	bl	80012b2 <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002b00:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8002b04:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002b08:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3308      	adds	r3, #8
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002b18:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002b20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8002b34:	f7fd fda6 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8002b38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b3c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002b46:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8002b50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b54:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002b5e:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8002b68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002b76:	3301      	adds	r3, #1
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8002b88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2206      	movs	r2, #6
 8002b94:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8002b98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	701a      	strb	r2, [r3, #0]
			break;
 8002ba6:	f001 b834 	b.w	8003c12 <GAME_PLAY_Phase_Management+0x2206>
					state_game->action = 4;
 8002baa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	701a      	strb	r2, [r3, #0]
			break;
 8002bb8:	f001 b82b 	b.w	8003c12 <GAME_PLAY_Phase_Management+0x2206>
 8002bbc:	2400000c 	.word	0x2400000c
 8002bc0:	08010ae8 	.word	0x08010ae8
 8002bc4:	08010ad0 	.word	0x08010ad0
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002bc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bcc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	4b9a      	ldr	r3, [pc, #616]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002bd6:	9203      	str	r2, [sp, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	9202      	str	r2, [sp, #8]
 8002bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be0:	9201      	str	r2, [sp, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	9200      	str	r2, [sp, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a96      	ldr	r2, [pc, #600]	; (8002e44 <GAME_PLAY_Phase_Management+0x1438>)
 8002bea:	215a      	movs	r1, #90	; 0x5a
 8002bec:	2005      	movs	r0, #5
 8002bee:	f003 fe1a 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002bf2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bf6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	4b90      	ldr	r3, [pc, #576]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002c00:	9203      	str	r2, [sp, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	9202      	str	r2, [sp, #8]
 8002c06:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c0a:	9201      	str	r2, [sp, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	9200      	str	r2, [sp, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a8d      	ldr	r2, [pc, #564]	; (8002e48 <GAME_PLAY_Phase_Management+0x143c>)
 8002c14:	2169      	movs	r1, #105	; 0x69
 8002c16:	2005      	movs	r0, #5
 8002c18:	f003 fe05 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002c1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c20:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	4b85      	ldr	r3, [pc, #532]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002c2a:	9203      	str	r2, [sp, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	9202      	str	r2, [sp, #8]
 8002c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c34:	9201      	str	r2, [sp, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	9200      	str	r2, [sp, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a83      	ldr	r2, [pc, #524]	; (8002e4c <GAME_PLAY_Phase_Management+0x1440>)
 8002c3e:	215a      	movs	r1, #90	; 0x5a
 8002c40:	2005      	movs	r0, #5
 8002c42:	f003 fdf0 	bl	8006826 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002c46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c4a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	4b7b      	ldr	r3, [pc, #492]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002c54:	9203      	str	r2, [sp, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	9202      	str	r2, [sp, #8]
 8002c5a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c5e:	9201      	str	r2, [sp, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	9200      	str	r2, [sp, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a78      	ldr	r2, [pc, #480]	; (8002e48 <GAME_PLAY_Phase_Management+0x143c>)
 8002c68:	2169      	movs	r1, #105	; 0x69
 8002c6a:	2005      	movs	r0, #5
 8002c6c:	f003 fddb 	bl	8006826 <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002c70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c74:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	785b      	ldrb	r3, [r3, #1]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c82:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002c86:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3304      	adds	r3, #4
 8002c92:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002c96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ca8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002cac:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 8002cbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cc0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	f040 82cd 	bne.w	8003268 <GAME_PLAY_Phase_Management+0x185c>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8002cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cd2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	785a      	ldrb	r2, [r3, #1]
 8002cda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cde:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f080 825d 	bcs.w	80031a8 <GAME_PLAY_Phase_Management+0x179c>
				{
					state_game->test = 165;
 8002cee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cf2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	22a5      	movs	r2, #165	; 0xa5
 8002cfa:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8002cfe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d02:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d10:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002d14:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 8002d24:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b0b      	cmp	r3, #11
 8002d2c:	f040 8096 	bne.w	8002e5c <GAME_PLAY_Phase_Management+0x1450>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8002d30:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 f9ae 	bl	8005098 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002d3c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe faff 	bl	800134a <YUGIOH_To_GY>
						state_game->count_chain++;
 8002d4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d60:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002d68:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002d72:	9203      	str	r2, [sp, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	9202      	str	r2, [sp, #8]
 8002d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7c:	9201      	str	r2, [sp, #4]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	9200      	str	r2, [sp, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a32      	ldr	r2, [pc, #200]	; (8002e50 <GAME_PLAY_Phase_Management+0x1444>)
 8002d86:	215a      	movs	r1, #90	; 0x5a
 8002d88:	2005      	movs	r0, #5
 8002d8a:	f003 fd4c 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002d8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002d98:	9203      	str	r2, [sp, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	9202      	str	r2, [sp, #8]
 8002d9e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002da2:	9201      	str	r2, [sp, #4]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	9200      	str	r2, [sp, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <GAME_PLAY_Phase_Management+0x1448>)
 8002dac:	2169      	movs	r1, #105	; 0x69
 8002dae:	2005      	movs	r0, #5
 8002db0:	f003 fd39 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002db4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002dbe:	9203      	str	r2, [sp, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	9202      	str	r2, [sp, #8]
 8002dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dc8:	9201      	str	r2, [sp, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	9200      	str	r2, [sp, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <GAME_PLAY_Phase_Management+0x144c>)
 8002dd2:	215a      	movs	r1, #90	; 0x5a
 8002dd4:	2005      	movs	r0, #5
 8002dd6:	f003 fd26 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002dda:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <GAME_PLAY_Phase_Management+0x1434>)
 8002de4:	9203      	str	r2, [sp, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	9202      	str	r2, [sp, #8]
 8002dea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002dee:	9201      	str	r2, [sp, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	9200      	str	r2, [sp, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <GAME_PLAY_Phase_Management+0x143c>)
 8002df8:	2169      	movs	r1, #105	; 0x69
 8002dfa:	2005      	movs	r0, #5
 8002dfc:	f003 fd13 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e04:	f004 faf0 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002e08:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2326      	movs	r3, #38	; 0x26
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	215a      	movs	r1, #90	; 0x5a
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f003 fe4b 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002e22:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2326      	movs	r3, #38	; 0x26
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	215a      	movs	r1, #90	; 0x5a
 8002e36:	2000      	movs	r0, #0
 8002e38:	f003 fe3e 	bl	8006ab8 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 8002e3c:	f000 beec 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
 8002e40:	2400000c 	.word	0x2400000c
 8002e44:	08010b04 	.word	0x08010b04
 8002e48:	08010b14 	.word	0x08010b14
 8002e4c:	08010b24 	.word	0x08010b24
 8002e50:	08010b38 	.word	0x08010b38
 8002e54:	08010b48 	.word	0x08010b48
 8002e58:	08010b50 	.word	0x08010b50
					else if (ptrYugiohCard_src->cardSignature == 12)
 8002e5c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	f040 808c 	bne.w	8002f80 <GAME_PLAY_Phase_Management+0x1574>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8002e68:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f002 f92e 	bl	80050d8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002e7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fa5f 	bl	800134a <YUGIOH_To_GY>
						state_game->count_chain++;
 8002e8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ea0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002ea8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	4bb5      	ldr	r3, [pc, #724]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 8002eb2:	9203      	str	r2, [sp, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	9202      	str	r2, [sp, #8]
 8002eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ebc:	9201      	str	r2, [sp, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	9200      	str	r2, [sp, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4ab1      	ldr	r2, [pc, #708]	; (800318c <GAME_PLAY_Phase_Management+0x1780>)
 8002ec6:	215a      	movs	r1, #90	; 0x5a
 8002ec8:	2005      	movs	r0, #5
 8002eca:	f003 fcac 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002ece:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	4bac      	ldr	r3, [pc, #688]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 8002ed8:	9203      	str	r2, [sp, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	9202      	str	r2, [sp, #8]
 8002ede:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ee2:	9201      	str	r2, [sp, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	9200      	str	r2, [sp, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4aa9      	ldr	r2, [pc, #676]	; (8003190 <GAME_PLAY_Phase_Management+0x1784>)
 8002eec:	2169      	movs	r1, #105	; 0x69
 8002eee:	2005      	movs	r0, #5
 8002ef0:	f003 fc99 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002ef4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	4ba2      	ldr	r3, [pc, #648]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 8002efe:	9203      	str	r2, [sp, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	9202      	str	r2, [sp, #8]
 8002f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f08:	9201      	str	r2, [sp, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	9200      	str	r2, [sp, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4aa0      	ldr	r2, [pc, #640]	; (8003194 <GAME_PLAY_Phase_Management+0x1788>)
 8002f12:	215a      	movs	r1, #90	; 0x5a
 8002f14:	2005      	movs	r0, #5
 8002f16:	f003 fc86 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002f1a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	4b99      	ldr	r3, [pc, #612]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 8002f24:	9203      	str	r2, [sp, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	9202      	str	r2, [sp, #8]
 8002f2a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	9200      	str	r2, [sp, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a98      	ldr	r2, [pc, #608]	; (8003198 <GAME_PLAY_Phase_Management+0x178c>)
 8002f38:	2169      	movs	r1, #105	; 0x69
 8002f3a:	2005      	movs	r0, #5
 8002f3c:	f003 fc73 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f44:	f004 fa50 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002f48:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2300      	movs	r3, #0
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2326      	movs	r3, #38	; 0x26
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	215a      	movs	r1, #90	; 0x5a
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f003 fdab 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002f62:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2326      	movs	r3, #38	; 0x26
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	215a      	movs	r1, #90	; 0x5a
 8002f76:	2000      	movs	r0, #0
 8002f78:	f003 fd9e 	bl	8006ab8 <ST7735_FillRectangleNSS>
			break;
 8002f7c:	f000 be4c 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8002f80:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b0d      	cmp	r3, #13
 8002f88:	d110      	bne.n	8002fac <GAME_PLAY_Phase_Management+0x15a0>
						state_game->test = 166;
 8002f8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f8e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	22a6      	movs	r2, #166	; 0xa6
 8002f96:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8002f9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f9e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2205      	movs	r2, #5
 8002fa6:	701a      	strb	r2, [r3, #0]
			break;
 8002fa8:	f000 be36 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8002fac:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b0e      	cmp	r3, #14
 8002fb4:	d005      	beq.n	8002fc2 <GAME_PLAY_Phase_Management+0x15b6>
 8002fb6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	f040 8094 	bne.w	80030ea <GAME_PLAY_Phase_Management+0x16de>
						state_game->test = 133;
 8002fc2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fc6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2285      	movs	r2, #133	; 0x85
 8002fce:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8002fd2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f002 f94d 	bl	8005280 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002fe6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe f9aa 	bl	800134a <YUGIOH_To_GY>
						state_game->count_chain++;
 8002ff6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ffa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	3301      	adds	r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800300a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003012:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	4b5b      	ldr	r3, [pc, #364]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 800301c:	9203      	str	r2, [sp, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	9202      	str	r2, [sp, #8]
 8003022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003026:	9201      	str	r2, [sp, #4]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	9200      	str	r2, [sp, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5b      	ldr	r2, [pc, #364]	; (800319c <GAME_PLAY_Phase_Management+0x1790>)
 8003030:	215a      	movs	r1, #90	; 0x5a
 8003032:	2005      	movs	r0, #5
 8003034:	f003 fbf7 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003038:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	4b51      	ldr	r3, [pc, #324]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 8003042:	9203      	str	r2, [sp, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	9202      	str	r2, [sp, #8]
 8003048:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800304c:	9201      	str	r2, [sp, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	9200      	str	r2, [sp, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a52      	ldr	r2, [pc, #328]	; (80031a0 <GAME_PLAY_Phase_Management+0x1794>)
 8003056:	2169      	movs	r1, #105	; 0x69
 8003058:	2005      	movs	r0, #5
 800305a:	f003 fbe4 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800305e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	4b48      	ldr	r3, [pc, #288]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 8003068:	9203      	str	r2, [sp, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	9202      	str	r2, [sp, #8]
 800306e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003072:	9201      	str	r2, [sp, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	9200      	str	r2, [sp, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a46      	ldr	r2, [pc, #280]	; (8003194 <GAME_PLAY_Phase_Management+0x1788>)
 800307c:	215a      	movs	r1, #90	; 0x5a
 800307e:	2005      	movs	r0, #5
 8003080:	f003 fbd1 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003084:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <GAME_PLAY_Phase_Management+0x177c>)
 800308e:	9203      	str	r2, [sp, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	9202      	str	r2, [sp, #8]
 8003094:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003098:	9201      	str	r2, [sp, #4]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	9200      	str	r2, [sp, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a40      	ldr	r2, [pc, #256]	; (80031a4 <GAME_PLAY_Phase_Management+0x1798>)
 80030a2:	2169      	movs	r1, #105	; 0x69
 80030a4:	2005      	movs	r0, #5
 80030a6:	f003 fbbe 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80030aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ae:	f004 f99b 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80030b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2300      	movs	r3, #0
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2326      	movs	r3, #38	; 0x26
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	215a      	movs	r1, #90	; 0x5a
 80030c6:	2000      	movs	r0, #0
 80030c8:	f003 fcf6 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80030cc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2326      	movs	r3, #38	; 0x26
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	215a      	movs	r1, #90	; 0x5a
 80030e0:	2000      	movs	r0, #0
 80030e2:	f003 fce9 	bl	8006ab8 <ST7735_FillRectangleNSS>
			break;
 80030e6:	f000 bd97 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
					else if(ptrYugiohCard_src->cardSignature == 16)
 80030ea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d110      	bne.n	8003116 <GAME_PLAY_Phase_Management+0x170a>
						state_game->test = 124;
 80030f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	227c      	movs	r2, #124	; 0x7c
 8003100:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8003104:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003108:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2205      	movs	r2, #5
 8003110:	701a      	strb	r2, [r3, #0]
			break;
 8003112:	f000 bd81 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8003116:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b11      	cmp	r3, #17
 800311e:	d108      	bne.n	8003132 <GAME_PLAY_Phase_Management+0x1726>
						state_game->action = 5;
 8003120:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003124:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2205      	movs	r2, #5
 800312c:	701a      	strb	r2, [r3, #0]
			break;
 800312e:	f000 bd73 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8003132:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b12      	cmp	r3, #18
 800313a:	d005      	beq.n	8003148 <GAME_PLAY_Phase_Management+0x173c>
 800313c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b13      	cmp	r3, #19
 8003144:	f040 8568 	bne.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8003148:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8561 	bne.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003156:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe f8f2 	bl	800134a <YUGIOH_To_GY>
							state_game->count_chain++;
 8003166:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800316a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	3301      	adds	r3, #1
 8003174:	b2da      	uxtb	r2, r3
 8003176:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800317a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	705a      	strb	r2, [r3, #1]
			break;
 8003182:	f000 bd49 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
 8003186:	bf00      	nop
 8003188:	2400000c 	.word	0x2400000c
 800318c:	08010b38 	.word	0x08010b38
 8003190:	08010b60 	.word	0x08010b60
 8003194:	08010b50 	.word	0x08010b50
 8003198:	08010b14 	.word	0x08010b14
 800319c:	08010b6c 	.word	0x08010b6c
 80031a0:	08010b7c 	.word	0x08010b7c
 80031a4:	08010b8c 	.word	0x08010b8c
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80031a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2326      	movs	r3, #38	; 0x26
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	215a      	movs	r1, #90	; 0x5a
 80031c0:	2000      	movs	r0, #0
 80031c2:	f003 fc79 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80031c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ca:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2326      	movs	r3, #38	; 0x26
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	215a      	movs	r1, #90	; 0x5a
 80031de:	2000      	movs	r0, #0
 80031e0:	f003 fc6a 	bl	8006ab8 <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80031ea:	e020      	b.n	800322e <GAME_PLAY_Phase_Management+0x1822>
						state_game->ptrChainUser[i] = &dummyPlayer;
 80031ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80031fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	f107 0210 	add.w	r2, r7, #16
 8003206:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 8003208:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800320c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003216:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	f107 0210 	add.w	r2, r7, #16
 8003222:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8003224:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003228:	3301      	adds	r3, #1
 800322a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800322e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003232:	2b05      	cmp	r3, #5
 8003234:	ddda      	ble.n	80031ec <GAME_PLAY_Phase_Management+0x17e0>
					state_game->ChainCount = 0;
 8003236:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800323a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 8003246:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800324a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8003254:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003258:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003264:	f000 bcd8 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
			else if (state_game->action == 5)
 8003268:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800326c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b05      	cmp	r3, #5
 8003276:	f040 809d 	bne.w	80033b4 <GAME_PLAY_Phase_Management+0x19a8>
				state_game->test = 167;
 800327a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800327e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	22a7      	movs	r2, #167	; 0xa7
 8003286:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800328a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800328e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	785b      	ldrb	r3, [r3, #1]
 8003296:	4619      	mov	r1, r3
 8003298:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800329c:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80032a0:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 80032b0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	789b      	ldrb	r3, [r3, #2]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d128      	bne.n	800330e <GAME_PLAY_Phase_Management+0x1902>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 80032bc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd ff4a 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&(*ptrUser)->ActtionBuffer[0],&(*ptrUser)->CardInPlayed);
 80032c8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80032d2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fd f9d0 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 4;
 80032e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2204      	movs	r2, #4
 80032f0:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 80032f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	3301      	adds	r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003306:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 800330e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b0d      	cmp	r3, #13
 8003316:	d110      	bne.n	800333a <GAME_PLAY_Phase_Management+0x192e>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 8003318:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003322:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003326:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800332a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800332e:	6809      	ldr	r1, [r1, #0]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	f7fd fc7d 	bl	8000c30 <Player_Reading_Card_Reborn>
			break;
 8003336:	f000 bc6f 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
				else if(ptrYugiohCard_src->cardSignature == 16){
 800333a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b10      	cmp	r3, #16
 8003342:	d110      	bne.n	8003366 <GAME_PLAY_Phase_Management+0x195a>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 8003344:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800334e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003352:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003356:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800335a:	6809      	ldr	r1, [r1, #0]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	f7fd fd15 	bl	8000d8c <Player_Reading_Card_Ancient_Rule>
			break;
 8003362:	f000 bc59 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
				else if (ptrYugiohCard_src->cardSignature == 17)
 8003366:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b11      	cmp	r3, #17
 800336e:	d110      	bne.n	8003392 <GAME_PLAY_Phase_Management+0x1986>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 8003370:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800337a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800337e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003382:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003386:	6809      	ldr	r1, [r1, #0]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	f7fd fba7 	bl	8000adc <Player_Reading_Card_Stopdef>
			break;
 800338e:	f000 bc43 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 8003392:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800339c:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80033a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033a4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80033a8:	6809      	ldr	r1, [r1, #0]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	f7fd f9d2 	bl	8000754 <Player_Reading_Card>
			break;
 80033b0:	f000 bc32 	b.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
			else if (state_game->action == 6)
 80033b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	f040 8429 	bne.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
				state_game->test = 169;
 80033c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033ca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	22a9      	movs	r2, #169	; 0xa9
 80033d2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80033d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	785b      	ldrb	r3, [r3, #1]
 80033e2:	4619      	mov	r1, r3
 80033e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033e8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80033ec:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 80033fc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b0d      	cmp	r3, #13
 8003404:	f040 819d 	bne.w	8003742 <GAME_PLAY_Phase_Management+0x1d36>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003408:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	781a      	ldrb	r2, [r3, #0]
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <GAME_PLAY_Phase_Management+0x1ba0>)
 8003412:	9203      	str	r2, [sp, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	9202      	str	r2, [sp, #8]
 8003418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800341c:	9201      	str	r2, [sp, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	9200      	str	r2, [sp, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a62      	ldr	r2, [pc, #392]	; (80035b0 <GAME_PLAY_Phase_Management+0x1ba4>)
 8003426:	215a      	movs	r1, #90	; 0x5a
 8003428:	2005      	movs	r0, #5
 800342a:	f003 f9fc 	bl	8006826 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 800342e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	789b      	ldrb	r3, [r3, #2]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 80c4 	bne.w	80035c4 <GAME_PLAY_Phase_Management+0x1bb8>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800343c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2300      	movs	r3, #0
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2326      	movs	r3, #38	; 0x26
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	215a      	movs	r1, #90	; 0x5a
 8003450:	2000      	movs	r0, #0
 8003452:	f003 fb31 	bl	8006ab8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8003456:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800345a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	22aa      	movs	r2, #170	; 0xaa
 8003462:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8003466:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003470:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8003474:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003478:	2200      	movs	r2, #0
 800347a:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800347c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003486:	4619      	mov	r1, r3
 8003488:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800348c:	f7fd f8fa 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8003490:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fe5c 	bl	8005154 <YUGIOH_Reborn>
						state_game->action = 4;
 800349c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2204      	movs	r2, #4
 80034a8:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80034aa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd ff48 	bl	800134a <YUGIOH_To_GY>
						state_game->count_chain++;
 80034ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	785b      	ldrb	r3, [r3, #1]
 80034c6:	3301      	adds	r3, #1
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80034d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <GAME_PLAY_Phase_Management+0x1ba0>)
 80034e0:	9203      	str	r2, [sp, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	9202      	str	r2, [sp, #8]
 80034e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ea:	9201      	str	r2, [sp, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	9200      	str	r2, [sp, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <GAME_PLAY_Phase_Management+0x1ba8>)
 80034f4:	215a      	movs	r1, #90	; 0x5a
 80034f6:	2005      	movs	r0, #5
 80034f8:	f003 f995 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80034fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	4b29      	ldr	r3, [pc, #164]	; (80035ac <GAME_PLAY_Phase_Management+0x1ba0>)
 8003506:	9203      	str	r2, [sp, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	9202      	str	r2, [sp, #8]
 800350c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003510:	9201      	str	r2, [sp, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	9200      	str	r2, [sp, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <GAME_PLAY_Phase_Management+0x1bac>)
 800351a:	2169      	movs	r1, #105	; 0x69
 800351c:	2005      	movs	r0, #5
 800351e:	f003 f982 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003522:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <GAME_PLAY_Phase_Management+0x1ba0>)
 800352c:	9203      	str	r2, [sp, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	9202      	str	r2, [sp, #8]
 8003532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003536:	9201      	str	r2, [sp, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	9200      	str	r2, [sp, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <GAME_PLAY_Phase_Management+0x1bb0>)
 8003540:	215a      	movs	r1, #90	; 0x5a
 8003542:	2005      	movs	r0, #5
 8003544:	f003 f96f 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003548:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <GAME_PLAY_Phase_Management+0x1ba0>)
 8003552:	9203      	str	r2, [sp, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	9202      	str	r2, [sp, #8]
 8003558:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800355c:	9201      	str	r2, [sp, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <GAME_PLAY_Phase_Management+0x1bb4>)
 8003566:	2169      	movs	r1, #105	; 0x69
 8003568:	2005      	movs	r0, #5
 800356a:	f003 f95c 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 800356e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003572:	f003 ff39 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003576:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2326      	movs	r3, #38	; 0x26
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	215a      	movs	r1, #90	; 0x5a
 800358a:	2000      	movs	r0, #0
 800358c:	f003 fa94 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003590:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	2300      	movs	r3, #0
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2326      	movs	r3, #38	; 0x26
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	215a      	movs	r1, #90	; 0x5a
 80035a4:	2000      	movs	r0, #0
 80035a6:	f003 fa87 	bl	8006ab8 <ST7735_FillRectangleNSS>
			break;
 80035aa:	e335      	b.n	8003c18 <GAME_PLAY_Phase_Management+0x220c>
 80035ac:	2400000c 	.word	0x2400000c
 80035b0:	08010a44 	.word	0x08010a44
 80035b4:	08010b38 	.word	0x08010b38
 80035b8:	08010b98 	.word	0x08010b98
 80035bc:	08010b50 	.word	0x08010b50
 80035c0:	08010b14 	.word	0x08010b14
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 80035c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f040 8323 	bne.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80035d2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2300      	movs	r3, #0
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2326      	movs	r3, #38	; 0x26
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	215a      	movs	r1, #90	; 0x5a
 80035e6:	2000      	movs	r0, #0
 80035e8:	f003 fa66 	bl	8006ab8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 80035ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	22ab      	movs	r2, #171	; 0xab
 80035f8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80035fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003606:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 800360a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800360e:	2201      	movs	r2, #1
 8003610:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003612:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800361c:	4619      	mov	r1, r3
 800361e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003622:	f7fd f82f 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8003626:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f001 fd91 	bl	8005154 <YUGIOH_Reborn>
						state_game->action = 4;
 8003632:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003636:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2204      	movs	r2, #4
 800363e:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003640:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fe7d 	bl	800134a <YUGIOH_To_GY>
						state_game->count_chain++;
 8003650:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003654:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	3301      	adds	r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003664:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800366c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	4ba5      	ldr	r3, [pc, #660]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 8003676:	9203      	str	r2, [sp, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	9202      	str	r2, [sp, #8]
 800367c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003680:	9201      	str	r2, [sp, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	9200      	str	r2, [sp, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4aa1      	ldr	r2, [pc, #644]	; (8003910 <GAME_PLAY_Phase_Management+0x1f04>)
 800368a:	215a      	movs	r1, #90	; 0x5a
 800368c:	2005      	movs	r0, #5
 800368e:	f003 f8ca 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003692:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	4b9c      	ldr	r3, [pc, #624]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 800369c:	9203      	str	r2, [sp, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	9202      	str	r2, [sp, #8]
 80036a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036a6:	9201      	str	r2, [sp, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	9200      	str	r2, [sp, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a99      	ldr	r2, [pc, #612]	; (8003914 <GAME_PLAY_Phase_Management+0x1f08>)
 80036b0:	2169      	movs	r1, #105	; 0x69
 80036b2:	2005      	movs	r0, #5
 80036b4:	f003 f8b7 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80036b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	4b92      	ldr	r3, [pc, #584]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 80036c2:	9203      	str	r2, [sp, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	9202      	str	r2, [sp, #8]
 80036c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036cc:	9201      	str	r2, [sp, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	9200      	str	r2, [sp, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a90      	ldr	r2, [pc, #576]	; (8003918 <GAME_PLAY_Phase_Management+0x1f0c>)
 80036d6:	215a      	movs	r1, #90	; 0x5a
 80036d8:	2005      	movs	r0, #5
 80036da:	f003 f8a4 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80036de:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	4b89      	ldr	r3, [pc, #548]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 80036e8:	9203      	str	r2, [sp, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	9202      	str	r2, [sp, #8]
 80036ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036f2:	9201      	str	r2, [sp, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	9200      	str	r2, [sp, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a88      	ldr	r2, [pc, #544]	; (800391c <GAME_PLAY_Phase_Management+0x1f10>)
 80036fc:	2169      	movs	r1, #105	; 0x69
 80036fe:	2005      	movs	r0, #5
 8003700:	f003 f891 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003708:	f003 fe6e 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800370c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	2300      	movs	r3, #0
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2326      	movs	r3, #38	; 0x26
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	215a      	movs	r1, #90	; 0x5a
 8003720:	2000      	movs	r0, #0
 8003722:	f003 f9c9 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003726:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2300      	movs	r3, #0
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2326      	movs	r3, #38	; 0x26
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	215a      	movs	r1, #90	; 0x5a
 800373a:	2000      	movs	r0, #0
 800373c:	f003 f9bc 	bl	8006ab8 <ST7735_FillRectangleNSS>
			break;
 8003740:	e26a      	b.n	8003c18 <GAME_PLAY_Phase_Management+0x220c>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8003742:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b10      	cmp	r3, #16
 800374a:	f040 81aa 	bne.w	8003aa2 <GAME_PLAY_Phase_Management+0x2096>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800374e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	2300      	movs	r3, #0
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2326      	movs	r3, #38	; 0x26
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	215a      	movs	r1, #90	; 0x5a
 8003762:	2000      	movs	r0, #0
 8003764:	f003 f9a8 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003768:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	4b66      	ldr	r3, [pc, #408]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 8003772:	9203      	str	r2, [sp, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	9202      	str	r2, [sp, #8]
 8003778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800377c:	9201      	str	r2, [sp, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	9200      	str	r2, [sp, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a66      	ldr	r2, [pc, #408]	; (8003920 <GAME_PLAY_Phase_Management+0x1f14>)
 8003786:	215a      	movs	r1, #90	; 0x5a
 8003788:	2005      	movs	r0, #5
 800378a:	f003 f84c 	bl	8006826 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 800378e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	789b      	ldrb	r3, [r3, #2]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 80c4 	bne.w	8003924 <GAME_PLAY_Phase_Management+0x1f18>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800379c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2326      	movs	r3, #38	; 0x26
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	215a      	movs	r1, #90	; 0x5a
 80037b0:	2000      	movs	r0, #0
 80037b2:	f003 f981 	bl	8006ab8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80037b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	22aa      	movs	r2, #170	; 0xaa
 80037c2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80037c6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80037d0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 80037d4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80037d8:	2200      	movs	r2, #0
 80037da:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80037dc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037e6:	4619      	mov	r1, r3
 80037e8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80037ec:	f7fc ff4a 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 80037f0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fd16 	bl	8005228 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 80037fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003800:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800380a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fd98 	bl	800134a <YUGIOH_To_GY>
						state_game->count_chain++;
 800381a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800381e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	3301      	adds	r3, #1
 8003828:	b2da      	uxtb	r2, r3
 800382a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800382e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003836:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	4b33      	ldr	r3, [pc, #204]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 8003840:	9203      	str	r2, [sp, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	9202      	str	r2, [sp, #8]
 8003846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384a:	9201      	str	r2, [sp, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	9200      	str	r2, [sp, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <GAME_PLAY_Phase_Management+0x1f04>)
 8003854:	215a      	movs	r1, #90	; 0x5a
 8003856:	2005      	movs	r0, #5
 8003858:	f002 ffe5 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800385c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	4b29      	ldr	r3, [pc, #164]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 8003866:	9203      	str	r2, [sp, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	9202      	str	r2, [sp, #8]
 800386c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003870:	9201      	str	r2, [sp, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	9200      	str	r2, [sp, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a26      	ldr	r2, [pc, #152]	; (8003914 <GAME_PLAY_Phase_Management+0x1f08>)
 800387a:	2169      	movs	r1, #105	; 0x69
 800387c:	2005      	movs	r0, #5
 800387e:	f002 ffd2 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003882:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 800388c:	9203      	str	r2, [sp, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	9202      	str	r2, [sp, #8]
 8003892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003896:	9201      	str	r2, [sp, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	9200      	str	r2, [sp, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <GAME_PLAY_Phase_Management+0x1f0c>)
 80038a0:	215a      	movs	r1, #90	; 0x5a
 80038a2:	2005      	movs	r0, #5
 80038a4:	f002 ffbf 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80038a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <GAME_PLAY_Phase_Management+0x1f00>)
 80038b2:	9203      	str	r2, [sp, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80038bc:	9201      	str	r2, [sp, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <GAME_PLAY_Phase_Management+0x1f10>)
 80038c6:	2169      	movs	r1, #105	; 0x69
 80038c8:	2005      	movs	r0, #5
 80038ca:	f002 ffac 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80038ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038d2:	f003 fd89 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80038d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2326      	movs	r3, #38	; 0x26
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	215a      	movs	r1, #90	; 0x5a
 80038ea:	2000      	movs	r0, #0
 80038ec:	f003 f8e4 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80038f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2326      	movs	r3, #38	; 0x26
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	215a      	movs	r1, #90	; 0x5a
 8003904:	2000      	movs	r0, #0
 8003906:	f003 f8d7 	bl	8006ab8 <ST7735_FillRectangleNSS>
			break;
 800390a:	e185      	b.n	8003c18 <GAME_PLAY_Phase_Management+0x220c>
 800390c:	2400000c 	.word	0x2400000c
 8003910:	08010b38 	.word	0x08010b38
 8003914:	08010b98 	.word	0x08010b98
 8003918:	08010b50 	.word	0x08010b50
 800391c:	08010b14 	.word	0x08010b14
 8003920:	08010a44 	.word	0x08010a44
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8003924:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 8173 	bne.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003932:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	2300      	movs	r3, #0
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2326      	movs	r3, #38	; 0x26
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	215a      	movs	r1, #90	; 0x5a
 8003946:	2000      	movs	r0, #0
 8003948:	f003 f8b6 	bl	8006ab8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 800394c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003950:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	22ab      	movs	r2, #171	; 0xab
 8003958:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 800395c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003966:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 800396a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800396e:	2201      	movs	r2, #1
 8003970:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003972:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800397c:	4619      	mov	r1, r3
 800397e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003982:	f7fc fe7f 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8003986:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f001 fc4b 	bl	8005228 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8003992:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003996:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2204      	movs	r2, #4
 800399e:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80039a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fccd 	bl	800134a <YUGIOH_To_GY>
						state_game->count_chain++;
 80039b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	3301      	adds	r3, #1
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80039cc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	781a      	ldrb	r2, [r3, #0]
 80039d4:	4ba3      	ldr	r3, [pc, #652]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 80039d6:	9203      	str	r2, [sp, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	9202      	str	r2, [sp, #8]
 80039dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e0:	9201      	str	r2, [sp, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	9200      	str	r2, [sp, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a9f      	ldr	r2, [pc, #636]	; (8003c68 <GAME_PLAY_Phase_Management+0x225c>)
 80039ea:	215a      	movs	r1, #90	; 0x5a
 80039ec:	2005      	movs	r0, #5
 80039ee:	f002 ff1a 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80039f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	4b9a      	ldr	r3, [pc, #616]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 80039fc:	9203      	str	r2, [sp, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	9202      	str	r2, [sp, #8]
 8003a02:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003a06:	9201      	str	r2, [sp, #4]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	9200      	str	r2, [sp, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a97      	ldr	r2, [pc, #604]	; (8003c6c <GAME_PLAY_Phase_Management+0x2260>)
 8003a10:	2169      	movs	r1, #105	; 0x69
 8003a12:	2005      	movs	r0, #5
 8003a14:	f002 ff07 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a18:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	4b90      	ldr	r3, [pc, #576]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 8003a22:	9203      	str	r2, [sp, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	9202      	str	r2, [sp, #8]
 8003a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2c:	9201      	str	r2, [sp, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	9200      	str	r2, [sp, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8e      	ldr	r2, [pc, #568]	; (8003c70 <GAME_PLAY_Phase_Management+0x2264>)
 8003a36:	215a      	movs	r1, #90	; 0x5a
 8003a38:	2005      	movs	r0, #5
 8003a3a:	f002 fef4 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a3e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	4b87      	ldr	r3, [pc, #540]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 8003a48:	9203      	str	r2, [sp, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	9202      	str	r2, [sp, #8]
 8003a4e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003a52:	9201      	str	r2, [sp, #4]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	9200      	str	r2, [sp, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a86      	ldr	r2, [pc, #536]	; (8003c74 <GAME_PLAY_Phase_Management+0x2268>)
 8003a5c:	2169      	movs	r1, #105	; 0x69
 8003a5e:	2005      	movs	r0, #5
 8003a60:	f002 fee1 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a68:	f003 fcbe 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a6c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2300      	movs	r3, #0
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2326      	movs	r3, #38	; 0x26
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	215a      	movs	r1, #90	; 0x5a
 8003a80:	2000      	movs	r0, #0
 8003a82:	f003 f819 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a86:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2326      	movs	r3, #38	; 0x26
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	215a      	movs	r1, #90	; 0x5a
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f003 f80c 	bl	8006ab8 <ST7735_FillRectangleNSS>
			break;
 8003aa0:	e0ba      	b.n	8003c18 <GAME_PLAY_Phase_Management+0x220c>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8003aa2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b11      	cmp	r3, #17
 8003aaa:	f040 80b5 	bne.w	8003c18 <GAME_PLAY_Phase_Management+0x220c>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8003aae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ab8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8003abc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003acc:	f7fc fdda 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8003ad0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f001 fc1e 	bl	8005320 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8003ae4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ae8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2204      	movs	r2, #4
 8003af0:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003af2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fc24 	bl	800134a <YUGIOH_To_GY>
					state_game->count_chain++;
 8003b02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b16:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b1e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 8003b28:	9203      	str	r2, [sp, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	9202      	str	r2, [sp, #8]
 8003b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b32:	9201      	str	r2, [sp, #4]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	9200      	str	r2, [sp, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <GAME_PLAY_Phase_Management+0x225c>)
 8003b3c:	215a      	movs	r1, #90	; 0x5a
 8003b3e:	2005      	movs	r0, #5
 8003b40:	f002 fe71 	bl	8006826 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b44:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 8003b4e:	9203      	str	r2, [sp, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	9202      	str	r2, [sp, #8]
 8003b54:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003b58:	9201      	str	r2, [sp, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	9200      	str	r2, [sp, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a45      	ldr	r2, [pc, #276]	; (8003c78 <GAME_PLAY_Phase_Management+0x226c>)
 8003b62:	2169      	movs	r1, #105	; 0x69
 8003b64:	2005      	movs	r0, #5
 8003b66:	f002 fe5e 	bl	8006826 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003b6a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 8003b74:	9203      	str	r2, [sp, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	9202      	str	r2, [sp, #8]
 8003b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b7e:	9201      	str	r2, [sp, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	9200      	str	r2, [sp, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <GAME_PLAY_Phase_Management+0x2264>)
 8003b88:	215a      	movs	r1, #90	; 0x5a
 8003b8a:	2005      	movs	r0, #5
 8003b8c:	f002 fe4b 	bl	8006826 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003b90:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <GAME_PLAY_Phase_Management+0x2258>)
 8003b9a:	9203      	str	r2, [sp, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	9202      	str	r2, [sp, #8]
 8003ba0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003ba4:	9201      	str	r2, [sp, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	9200      	str	r2, [sp, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <GAME_PLAY_Phase_Management+0x2268>)
 8003bae:	2169      	movs	r1, #105	; 0x69
 8003bb0:	2005      	movs	r0, #5
 8003bb2:	f002 fe38 	bl	8006826 <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8003bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bba:	f003 fc15 	bl	80073e8 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003bbe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2326      	movs	r3, #38	; 0x26
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	215a      	movs	r1, #90	; 0x5a
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f002 ff70 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003bd8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2326      	movs	r3, #38	; 0x26
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	215a      	movs	r1, #90	; 0x5a
 8003bec:	2000      	movs	r0, #0
 8003bee:	f002 ff63 	bl	8006ab8 <ST7735_FillRectangleNSS>
			break;
 8003bf2:	e011      	b.n	8003c18 <GAME_PLAY_Phase_Management+0x220c>
			break;
 8003bf4:	bf00      	nop
 8003bf6:	f001 ba41 	b.w	800507c <GAME_PLAY_Phase_Management+0x3670>
			break;
 8003bfa:	bf00      	nop
 8003bfc:	f001 ba3e 	b.w	800507c <GAME_PLAY_Phase_Management+0x3670>
			break;
 8003c00:	bf00      	nop
 8003c02:	f001 ba3b 	b.w	800507c <GAME_PLAY_Phase_Management+0x3670>
			break;
 8003c06:	bf00      	nop
 8003c08:	f001 ba38 	b.w	800507c <GAME_PLAY_Phase_Management+0x3670>
			break;
 8003c0c:	bf00      	nop
 8003c0e:	f001 ba35 	b.w	800507c <GAME_PLAY_Phase_Management+0x3670>
			break;
 8003c12:	bf00      	nop
 8003c14:	f001 ba32 	b.w	800507c <GAME_PLAY_Phase_Management+0x3670>
			break;
 8003c18:	bf00      	nop
		}
		break;
 8003c1a:	f001 ba2f 	b.w	800507c <GAME_PLAY_Phase_Management+0x3670>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8003c1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c22:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003c26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	f001 fd05 	bl	8005640 <LCDvalue>
			switch(PBS){
 8003c36:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	f201 8220 	bhi.w	8005080 <GAME_PLAY_Phase_Management+0x3674>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <GAME_PLAY_Phase_Management+0x223c>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	0800505d 	.word	0x0800505d
 8003c4c:	08003c7d 	.word	0x08003c7d
 8003c50:	080043ad 	.word	0x080043ad
 8003c54:	08004077 	.word	0x08004077
 8003c58:	080046e1 	.word	0x080046e1
 8003c5c:	080049bd 	.word	0x080049bd
 8003c60:	08004eed 	.word	0x08004eed
 8003c64:	2400000c 	.word	0x2400000c
 8003c68:	08010b38 	.word	0x08010b38
 8003c6c:	08010b98 	.word	0x08010b98
 8003c70:	08010b50 	.word	0x08010b50
 8003c74:	08010b14 	.word	0x08010b14
 8003c78:	08010ba8 	.word	0x08010ba8
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003c7c:	4ba2      	ldr	r3, [pc, #648]	; (8003f08 <GAME_PLAY_Phase_Management+0x24fc>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	9202      	str	r2, [sp, #8]
 8003c82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003c86:	9201      	str	r2, [sp, #4]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	9200      	str	r2, [sp, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a9f      	ldr	r2, [pc, #636]	; (8003f0c <GAME_PLAY_Phase_Management+0x2500>)
 8003c90:	2123      	movs	r1, #35	; 0x23
 8003c92:	206e      	movs	r0, #110	; 0x6e
 8003c94:	f002 fd33 	bl	80066fe <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003c98:	4b9b      	ldr	r3, [pc, #620]	; (8003f08 <GAME_PLAY_Phase_Management+0x24fc>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	9202      	str	r2, [sp, #8]
 8003c9e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003ca2:	9201      	str	r2, [sp, #4]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	9200      	str	r2, [sp, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a98      	ldr	r2, [pc, #608]	; (8003f0c <GAME_PLAY_Phase_Management+0x2500>)
 8003cac:	2123      	movs	r1, #35	; 0x23
 8003cae:	206e      	movs	r0, #110	; 0x6e
 8003cb0:	f002 fd6f 	bl	8006792 <ST7735_WriteString1>
				if(state_game->action == 50){
 8003cb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cb8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b32      	cmp	r3, #50	; 0x32
 8003cc2:	f040 809b 	bne.w	8003dfc <GAME_PLAY_Phase_Management+0x23f0>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8003cc6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cca:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003cd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cda:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	6809      	ldr	r1, [r1, #0]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	f7fc fd36 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4889      	ldr	r0, [pc, #548]	; (8003f10 <GAME_PLAY_Phase_Management+0x2504>)
 8003cec:	f006 fcca 	bl	800a684 <HAL_GPIO_ReadPin>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f041 81b4 	bne.w	8005060 <GAME_PLAY_Phase_Management+0x3654>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8003cf8:	4886      	ldr	r0, [pc, #536]	; (8003f14 <GAME_PLAY_Phase_Management+0x2508>)
 8003cfa:	f009 fec1 	bl	800da80 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8003cfe:	4986      	ldr	r1, [pc, #536]	; (8003f18 <GAME_PLAY_Phase_Management+0x250c>)
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003d0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2326      	movs	r3, #38	; 0x26
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	215a      	movs	r1, #90	; 0x5a
 8003d24:	2000      	movs	r0, #0
 8003d26:	f002 fec7 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003d2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d2e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <GAME_PLAY_Phase_Management+0x2510>)
 8003d38:	9203      	str	r2, [sp, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	9202      	str	r2, [sp, #8]
 8003d3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003d42:	9201      	str	r2, [sp, #4]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	9200      	str	r2, [sp, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a75      	ldr	r2, [pc, #468]	; (8003f20 <GAME_PLAY_Phase_Management+0x2514>)
 8003d4c:	215a      	movs	r1, #90	; 0x5a
 8003d4e:	200f      	movs	r0, #15
 8003d50:	f002 fd69 	bl	8006826 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8003d54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d58:	f003 fb46 	bl	80073e8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003d5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d60:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2326      	movs	r3, #38	; 0x26
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	215a      	movs	r1, #90	; 0x5a
 8003d74:	2000      	movs	r0, #0
 8003d76:	f002 fe9f 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003d7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d7e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2326      	movs	r3, #38	; 0x26
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	215a      	movs	r1, #90	; 0x5a
 8003d92:	2000      	movs	r0, #0
 8003d94:	f002 fe90 	bl	8006ab8 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8003d98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8003da6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003daa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	f001 fb44 	bl	800543c <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8003db4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003db8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d108      	bne.n	8003dd8 <GAME_PLAY_Phase_Management+0x23cc>
							state_game->MainGame_State = second_player;
 8003dc6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8003dd6:	e007      	b.n	8003de8 <GAME_PLAY_Phase_Management+0x23dc>
						}
						else{
							state_game->MainGame_State = first_player;
 8003dd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ddc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8003de8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8003df8:	f001 b932 	b.w	8005060 <GAME_PLAY_Phase_Management+0x3654>
				else if(state_game->action == 51){
 8003dfc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e00:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b33      	cmp	r3, #51	; 0x33
 8003e0a:	f041 8129 	bne.w	8005060 <GAME_PLAY_Phase_Management+0x3654>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003e0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2326      	movs	r3, #38	; 0x26
 8003e22:	2280      	movs	r2, #128	; 0x80
 8003e24:	215a      	movs	r1, #90	; 0x5a
 8003e26:	2000      	movs	r0, #0
 8003e28:	f002 fe46 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003e2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e30:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2326      	movs	r3, #38	; 0x26
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	215a      	movs	r1, #90	; 0x5a
 8003e44:	2000      	movs	r0, #0
 8003e46:	f002 fe37 	bl	8006ab8 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003e50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e54:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003e5e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8003e62:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003e66:	799b      	ldrb	r3, [r3, #6]
 8003e68:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8003e6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e70:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8003e82:	e013      	b.n	8003eac <GAME_PLAY_Phase_Management+0x24a0>
						if(ptrYugiohCard_dst->cardData == 0){
 8003e84:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <GAME_PLAY_Phase_Management+0x248c>
							check_def_mon++;
 8003e8e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003e92:	3301      	adds	r3, #1
 8003e94:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8003e98:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8003ea2:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8003eac:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d9e7      	bls.n	8003e84 <GAME_PLAY_Phase_Management+0x2478>
					uint8_t flag_can_atk = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003eba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ebe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ec8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8003ecc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ed0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3338      	adds	r3, #56	; 0x38
 8003ed8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8003ee2:	e02c      	b.n	8003f3e <GAME_PLAY_Phase_Management+0x2532>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8003ee4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d11a      	bne.n	8003f2a <GAME_PLAY_Phase_Management+0x251e>
							if(ptrYugiohCard_dst->cardState == 1){
 8003ef4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003ef8:	789b      	ldrb	r3, [r3, #2]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d112      	bne.n	8003f24 <GAME_PLAY_Phase_Management+0x2518>
								flag_can_atk = 2;
 8003efe:	2302      	movs	r3, #2
 8003f00:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 8003f04:	e01f      	b.n	8003f46 <GAME_PLAY_Phase_Management+0x253a>
 8003f06:	bf00      	nop
 8003f08:	2400000c 	.word	0x2400000c
 8003f0c:	08010bb8 	.word	0x08010bb8
 8003f10:	58020800 	.word	0x58020800
 8003f14:	240002e8 	.word	0x240002e8
 8003f18:	24000ea0 	.word	0x24000ea0
 8003f1c:	24000014 	.word	0x24000014
 8003f20:	08010bbc 	.word	0x08010bbc
								flag_can_atk = 1;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 8003f2a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003f2e:	3310      	adds	r3, #16
 8003f30:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8003f34:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8003f3e:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d9ce      	bls.n	8003ee4 <GAME_PLAY_Phase_Management+0x24d8>
					if (check_def_mon < 3)
 8003f46:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d810      	bhi.n	8003f70 <GAME_PLAY_Phase_Management+0x2564>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8003f4e:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 8003f52:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003f56:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4413      	add	r3, r2
 8003f62:	3304      	adds	r3, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <GAME_PLAY_Phase_Management+0x2564>
							flag_can_atk = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 8003f70:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d165      	bne.n	8004044 <GAME_PLAY_Phase_Management+0x2638>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8003f78:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003f7c:	7a1b      	ldrb	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d047      	beq.n	8004012 <GAME_PLAY_Phase_Management+0x2606>
 8003f82:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003f86:	789b      	ldrb	r3, [r3, #2]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d142      	bne.n	8004012 <GAME_PLAY_Phase_Management+0x2606>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8003f8c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003f90:	7a1b      	ldrb	r3, [r3, #8]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003f9a:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8003f9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fa0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003faa:	4619      	mov	r1, r3
 8003fac:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003fb0:	f7fc fb68 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8003fb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fb8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fc2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 8003fc6:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d104      	bne.n	8003fd8 <GAME_PLAY_Phase_Management+0x25cc>
								ptrYugiohCard_dst->targetPosition = 99;
 8003fce:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003fd2:	2263      	movs	r2, #99	; 0x63
 8003fd4:	71da      	strb	r2, [r3, #7]
 8003fd6:	e004      	b.n	8003fe2 <GAME_PLAY_Phase_Management+0x25d6>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8003fd8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003fdc:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 8003fe0:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8003fe2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fe6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	f7fd f8b6 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8003ff0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ff4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2234      	movs	r2, #52	; 0x34
 8003ffc:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8003ffe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004002:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2203      	movs	r2, #3
 800400a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800400e:	f001 b827 	b.w	8005060 <GAME_PLAY_Phase_Management+0x3654>
							state_game->test = 222;
 8004012:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004016:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	22de      	movs	r2, #222	; 0xde
 800401e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8004022:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004026:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2232      	movs	r2, #50	; 0x32
 800402e:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004030:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004034:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004040:	f001 b80e 	b.w	8005060 <GAME_PLAY_Phase_Management+0x3654>
						state_game->test = 223;
 8004044:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004048:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	22df      	movs	r2, #223	; 0xdf
 8004050:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8004054:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004058:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2232      	movs	r2, #50	; 0x32
 8004060:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004062:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004066:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004072:	f000 bff5 	b.w	8005060 <GAME_PLAY_Phase_Management+0x3654>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004076:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800407a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	4bc5      	ldr	r3, [pc, #788]	; (8004398 <GAME_PLAY_Phase_Management+0x298c>)
 8004084:	9203      	str	r2, [sp, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	9202      	str	r2, [sp, #8]
 800408a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800408e:	9201      	str	r2, [sp, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	9200      	str	r2, [sp, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4ac1      	ldr	r2, [pc, #772]	; (800439c <GAME_PLAY_Phase_Management+0x2990>)
 8004098:	215a      	movs	r1, #90	; 0x5a
 800409a:	2005      	movs	r0, #5
 800409c:	f002 fbc3 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80040a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040a4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	781a      	ldrb	r2, [r3, #0]
 80040ac:	4bba      	ldr	r3, [pc, #744]	; (8004398 <GAME_PLAY_Phase_Management+0x298c>)
 80040ae:	9203      	str	r2, [sp, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	9202      	str	r2, [sp, #8]
 80040b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040b8:	9201      	str	r2, [sp, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	9200      	str	r2, [sp, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4ab7      	ldr	r2, [pc, #732]	; (80043a0 <GAME_PLAY_Phase_Management+0x2994>)
 80040c2:	2169      	movs	r1, #105	; 0x69
 80040c4:	2005      	movs	r0, #5
 80040c6:	f002 fbae 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80040ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040ce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	4bb0      	ldr	r3, [pc, #704]	; (8004398 <GAME_PLAY_Phase_Management+0x298c>)
 80040d8:	9203      	str	r2, [sp, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	9202      	str	r2, [sp, #8]
 80040de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e2:	9201      	str	r2, [sp, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	9200      	str	r2, [sp, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4aae      	ldr	r2, [pc, #696]	; (80043a4 <GAME_PLAY_Phase_Management+0x2998>)
 80040ec:	215a      	movs	r1, #90	; 0x5a
 80040ee:	2005      	movs	r0, #5
 80040f0:	f002 fb99 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80040f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040f8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	4ba5      	ldr	r3, [pc, #660]	; (8004398 <GAME_PLAY_Phase_Management+0x298c>)
 8004102:	9203      	str	r2, [sp, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	9202      	str	r2, [sp, #8]
 8004108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800410c:	9201      	str	r2, [sp, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	9200      	str	r2, [sp, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4aa4      	ldr	r2, [pc, #656]	; (80043a8 <GAME_PLAY_Phase_Management+0x299c>)
 8004116:	2169      	movs	r1, #105	; 0x69
 8004118:	2005      	movs	r0, #5
 800411a:	f002 fb84 	bl	8006826 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 800411e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004122:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b34      	cmp	r3, #52	; 0x34
 800412c:	d141      	bne.n	80041b2 <GAME_PLAY_Phase_Management+0x27a6>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 800412e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004132:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	789b      	ldrb	r3, [r3, #2]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d115      	bne.n	800416a <GAME_PLAY_Phase_Management+0x275e>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 800413e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004142:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2204      	movs	r2, #4
 800414a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 800414e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004152:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2236      	movs	r2, #54	; 0x36
 800415a:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 800415c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004160:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800416a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800416e:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004172:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004176:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800417a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800417e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	6809      	ldr	r1, [r1, #0]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	f7fc fbf4 	bl	8000974 <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800418c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004190:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004194:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004198:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800419c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041a0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	6809      	ldr	r1, [r1, #0]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	f7fc fee5 	bl	8000f78 <Player_Reading_Card_Monster_Effect>





				break;
 80041ae:	f000 bf59 	b.w	8005064 <GAME_PLAY_Phase_Management+0x3658>
				else if ((state_game->action == 53 ))
 80041b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b35      	cmp	r3, #53	; 0x35
 80041c0:	f040 8750 	bne.w	8005064 <GAME_PLAY_Phase_Management+0x3658>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80041c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2326      	movs	r3, #38	; 0x26
 80041d8:	2280      	movs	r2, #128	; 0x80
 80041da:	215a      	movs	r1, #90	; 0x5a
 80041dc:	2000      	movs	r0, #0
 80041de:	f002 fc6b 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80041e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2326      	movs	r3, #38	; 0x26
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	215a      	movs	r1, #90	; 0x5a
 80041fa:	2000      	movs	r0, #0
 80041fc:	f002 fc5c 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004200:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004204:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800420e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8004212:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004216:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800421a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	f001 f8b4 	bl	800538c <YUGIOH_Check_Trap_On_board>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 800422a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d14f      	bne.n	80042d4 <GAME_PLAY_Phase_Management+0x28c8>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8004234:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004238:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	f7fd f838 	bl	80012b2 <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8004242:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004246:	2200      	movs	r2, #0
 8004248:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800424a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800424e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004258:	4619      	mov	r1, r3
 800425a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800425e:	f7fc fa11 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 8004262:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004266:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004270:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 800427a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800427e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004288:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8004292:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004296:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 80042b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80042c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2234      	movs	r2, #52	; 0x34
 80042ce:	701a      	strb	r2, [r3, #0]
				break;
 80042d0:	f000 bec8 	b.w	8005064 <GAME_PLAY_Phase_Management+0x3658>
						if (idx != 255)
 80042d4:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80042d8:	2bff      	cmp	r3, #255	; 0xff
 80042da:	f000 86c3 	beq.w	8005064 <GAME_PLAY_Phase_Management+0x3658>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80042de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042e2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	f7fc ffe3 	bl	80012b2 <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80042ec:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80042f0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80042f4:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3308      	adds	r3, #8
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	4413      	add	r3, r2
 8004300:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8004304:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004308:	2200      	movs	r2, #0
 800430a:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 800430c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004310:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800431a:	4619      	mov	r1, r3
 800431c:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004320:	f7fc f9b0 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8004324:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004328:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004332:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 800433c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004340:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800434a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8004354:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004358:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004362:	3301      	adds	r3, #1
 8004364:	b2da      	uxtb	r2, r3
 8004366:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800436a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8004374:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004378:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8004384:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004388:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2234      	movs	r2, #52	; 0x34
 8004390:	701a      	strb	r2, [r3, #0]
				break;
 8004392:	f000 be67 	b.w	8005064 <GAME_PLAY_Phase_Management+0x3658>
 8004396:	bf00      	nop
 8004398:	2400000c 	.word	0x2400000c
 800439c:	08010bc8 	.word	0x08010bc8
 80043a0:	08010bd8 	.word	0x08010bd8
 80043a4:	08010be4 	.word	0x08010be4
 80043a8:	08010bf4 	.word	0x08010bf4
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80043ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	4bc4      	ldr	r3, [pc, #784]	; (80046cc <GAME_PLAY_Phase_Management+0x2cc0>)
 80043ba:	9203      	str	r2, [sp, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	9202      	str	r2, [sp, #8]
 80043c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c4:	9201      	str	r2, [sp, #4]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4ac0      	ldr	r2, [pc, #768]	; (80046d0 <GAME_PLAY_Phase_Management+0x2cc4>)
 80043ce:	215a      	movs	r1, #90	; 0x5a
 80043d0:	2005      	movs	r0, #5
 80043d2:	f002 fa28 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80043d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4bba      	ldr	r3, [pc, #744]	; (80046cc <GAME_PLAY_Phase_Management+0x2cc0>)
 80043e4:	9203      	str	r2, [sp, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	9202      	str	r2, [sp, #8]
 80043ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ee:	9201      	str	r2, [sp, #4]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	9200      	str	r2, [sp, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4ab7      	ldr	r2, [pc, #732]	; (80046d4 <GAME_PLAY_Phase_Management+0x2cc8>)
 80043f8:	2169      	movs	r1, #105	; 0x69
 80043fa:	2005      	movs	r0, #5
 80043fc:	f002 fa13 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004400:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004404:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	4baf      	ldr	r3, [pc, #700]	; (80046cc <GAME_PLAY_Phase_Management+0x2cc0>)
 800440e:	9203      	str	r2, [sp, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	9202      	str	r2, [sp, #8]
 8004414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004418:	9201      	str	r2, [sp, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	9200      	str	r2, [sp, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4aad      	ldr	r2, [pc, #692]	; (80046d8 <GAME_PLAY_Phase_Management+0x2ccc>)
 8004422:	215a      	movs	r1, #90	; 0x5a
 8004424:	2005      	movs	r0, #5
 8004426:	f002 f9fe 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800442a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800442e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	4ba5      	ldr	r3, [pc, #660]	; (80046cc <GAME_PLAY_Phase_Management+0x2cc0>)
 8004438:	9203      	str	r2, [sp, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	9202      	str	r2, [sp, #8]
 800443e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004442:	9201      	str	r2, [sp, #4]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	9200      	str	r2, [sp, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4aa4      	ldr	r2, [pc, #656]	; (80046dc <GAME_PLAY_Phase_Management+0x2cd0>)
 800444c:	2169      	movs	r1, #105	; 0x69
 800444e:	2005      	movs	r0, #5
 8004450:	f002 f9e9 	bl	8006826 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8004454:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004458:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b34      	cmp	r3, #52	; 0x34
 8004462:	d141      	bne.n	80044e8 <GAME_PLAY_Phase_Management+0x2adc>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8004464:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004468:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	789b      	ldrb	r3, [r3, #2]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d115      	bne.n	80044a0 <GAME_PLAY_Phase_Management+0x2a94>
						//affect
						state_game->action = 54;
 8004474:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004478:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2236      	movs	r2, #54	; 0x36
 8004480:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8004482:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004486:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2204      	movs	r2, #4
 800448e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8004492:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004496:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2200      	movs	r2, #0
 800449e:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 80044a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044a4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80044a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ac:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80044b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044b4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	6809      	ldr	r1, [r1, #0]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	f7fc fa59 	bl	8000974 <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 80044c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044c6:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80044ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ce:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80044d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044d6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	6809      	ldr	r1, [r1, #0]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	f7fc fd4a 	bl	8000f78 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 80044e4:	f000 bdc0 	b.w	8005068 <GAME_PLAY_Phase_Management+0x365c>
				else if ((state_game->action == 53 )){
 80044e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b35      	cmp	r3, #53	; 0x35
 80044f6:	f040 85b7 	bne.w	8005068 <GAME_PLAY_Phase_Management+0x365c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80044fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	2300      	movs	r3, #0
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2326      	movs	r3, #38	; 0x26
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	215a      	movs	r1, #90	; 0x5a
 8004512:	2000      	movs	r0, #0
 8004514:	f002 fad0 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004518:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800451c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	2300      	movs	r3, #0
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2326      	movs	r3, #38	; 0x26
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	215a      	movs	r1, #90	; 0x5a
 8004530:	2000      	movs	r0, #0
 8004532:	f002 fac1 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8004536:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800453a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004544:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8004548:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800454c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004550:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	f000 ff19 	bl	800538c <YUGIOH_Check_Trap_On_board>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 8004560:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d14f      	bne.n	800460a <GAME_PLAY_Phase_Management+0x2bfe>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800456a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800456e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	f7fc fe9d 	bl	80012b2 <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8004578:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800457c:	2200      	movs	r2, #0
 800457e:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8004580:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004584:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800458e:	4619      	mov	r1, r3
 8004590:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8004594:	f7fc f876 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8004598:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800459c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80045a6:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 80045b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80045be:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80045c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80045d6:	3301      	adds	r3, #1
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045de:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 80045e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2203      	movs	r2, #3
 80045f4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80045f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045fc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2234      	movs	r2, #52	; 0x34
 8004604:	701a      	strb	r2, [r3, #0]
				break;
 8004606:	f000 bd2f 	b.w	8005068 <GAME_PLAY_Phase_Management+0x365c>
						if (idx != 255)
 800460a:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800460e:	2bff      	cmp	r3, #255	; 0xff
 8004610:	f000 852a 	beq.w	8005068 <GAME_PLAY_Phase_Management+0x365c>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8004614:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004618:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f7fc fe48 	bl	80012b2 <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8004622:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8004626:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800462a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	3308      	adds	r3, #8
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	4413      	add	r3, r2
 8004636:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800463a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800463e:	2200      	movs	r2, #0
 8004640:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8004642:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004646:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004650:	4619      	mov	r1, r3
 8004652:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004656:	f7fc f815 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 800465a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800465e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004668:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8004672:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004676:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004680:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 800468a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800468e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004698:	3301      	adds	r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 80046aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80046ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2234      	movs	r2, #52	; 0x34
 80046c6:	701a      	strb	r2, [r3, #0]
				break;
 80046c8:	f000 bcce 	b.w	8005068 <GAME_PLAY_Phase_Management+0x365c>
 80046cc:	2400000c 	.word	0x2400000c
 80046d0:	08010be4 	.word	0x08010be4
 80046d4:	08010c00 	.word	0x08010c00
 80046d8:	08010c08 	.word	0x08010c08
 80046dc:	08010c18 	.word	0x08010c18
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80046e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	4bb1      	ldr	r3, [pc, #708]	; (80049b4 <GAME_PLAY_Phase_Management+0x2fa8>)
 80046ee:	9203      	str	r2, [sp, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	9202      	str	r2, [sp, #8]
 80046f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f8:	9201      	str	r2, [sp, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	9200      	str	r2, [sp, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4aad      	ldr	r2, [pc, #692]	; (80049b8 <GAME_PLAY_Phase_Management+0x2fac>)
 8004702:	215a      	movs	r1, #90	; 0x5a
 8004704:	2005      	movs	r0, #5
 8004706:	f002 f88e 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800470a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800470e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	4ba7      	ldr	r3, [pc, #668]	; (80049b4 <GAME_PLAY_Phase_Management+0x2fa8>)
 8004718:	9203      	str	r2, [sp, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	9202      	str	r2, [sp, #8]
 800471e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004722:	9201      	str	r2, [sp, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	9200      	str	r2, [sp, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4aa3      	ldr	r2, [pc, #652]	; (80049b8 <GAME_PLAY_Phase_Management+0x2fac>)
 800472c:	215a      	movs	r1, #90	; 0x5a
 800472e:	2005      	movs	r0, #5
 8004730:	f002 f879 	bl	8006826 <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8004734:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004738:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	4619      	mov	r1, r3
 8004742:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004746:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800474a:	f501 7394 	add.w	r3, r1, #296	; 0x128
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	4413      	add	r3, r2
 8004754:	3304      	adds	r3, #4
 8004756:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 800475a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800475e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	4619      	mov	r1, r3
 8004768:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800476c:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004770:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	4413      	add	r3, r2
 800477a:	3304      	adds	r3, #4
 800477c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 8004780:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004784:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b36      	cmp	r3, #54	; 0x36
 800478e:	f040 846d 	bne.w	800506c <GAME_PLAY_Phase_Management+0x3660>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8004792:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004796:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	785a      	ldrb	r2, [r3, #1]
 800479e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047a2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80047ac:	429a      	cmp	r2, r3
 80047ae:	f080 80a2 	bcs.w	80048f6 <GAME_PLAY_Phase_Management+0x2eea>
					{
						state_game->test = 165;
 80047b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	22a5      	movs	r2, #165	; 0xa5
 80047be:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80047c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	4619      	mov	r1, r3
 80047d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047d4:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80047d8:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	4413      	add	r3, r2
 80047e2:	3304      	adds	r3, #4
 80047e4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 80047e8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d11d      	bne.n	800482e <GAME_PLAY_Phase_Management+0x2e22>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 80047f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2262      	movs	r2, #98	; 0x62
 80047fa:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80047fe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004808:	4618      	mov	r0, r3
 800480a:	f7fc fd9e 	bl	800134a <YUGIOH_To_GY>
							state_game->count_chain++;
 800480e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004812:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	785b      	ldrb	r3, [r3, #1]
 800481a:	3301      	adds	r3, #1
 800481c:	b2da      	uxtb	r2, r3
 800481e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004822:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 800482a:	f000 bc1f 	b.w	800506c <GAME_PLAY_Phase_Management+0x3660>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 800482e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b0e      	cmp	r3, #14
 8004836:	d004      	beq.n	8004842 <GAME_PLAY_Phase_Management+0x2e36>
 8004838:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d128      	bne.n	8004894 <GAME_PLAY_Phase_Management+0x2e88>
							state_game->test = 133;
 8004842:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004846:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2285      	movs	r2, #133	; 0x85
 800484e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8004852:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 fd0d 	bl	8005280 <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004866:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004870:	4618      	mov	r0, r3
 8004872:	f7fc fd6a 	bl	800134a <YUGIOH_To_GY>
							state_game->count_chain++;
 8004876:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800487a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	3301      	adds	r3, #1
 8004884:	b2da      	uxtb	r2, r3
 8004886:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800488a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	705a      	strb	r2, [r3, #1]
				break;
 8004892:	e3eb      	b.n	800506c <GAME_PLAY_Phase_Management+0x3660>
						else if(ptrYugiohCard_src->cardSignature == 20){
 8004894:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b14      	cmp	r3, #20
 800489c:	f040 83e6 	bne.w	800506c <GAME_PLAY_Phase_Management+0x3660>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80048a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fc fd4d 	bl	800134a <YUGIOH_To_GY>
							if(state_game->MainGame_State == first_player){
 80048b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d108      	bne.n	80048d4 <GAME_PLAY_Phase_Management+0x2ec8>
								state_game->MainGame_State = second_player;
 80048c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2203      	movs	r2, #3
 80048ce:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80048d2:	e007      	b.n	80048e4 <GAME_PLAY_Phase_Management+0x2ed8>
								state_game->MainGame_State = first_player;
 80048d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048d8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 80048e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 80048f4:	e3ba      	b.n	800506c <GAME_PLAY_Phase_Management+0x3660>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80048f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	2300      	movs	r3, #0
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2326      	movs	r3, #38	; 0x26
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	215a      	movs	r1, #90	; 0x5a
 800490e:	2000      	movs	r0, #0
 8004910:	f002 f8d2 	bl	8006ab8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004914:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004918:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	2300      	movs	r3, #0
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2326      	movs	r3, #38	; 0x26
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	215a      	movs	r1, #90	; 0x5a
 800492c:	2000      	movs	r0, #0
 800492e:	f002 f8c3 	bl	8006ab8 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8004938:	e020      	b.n	800497c <GAME_PLAY_Phase_Management+0x2f70>
							state_game->ptrChainUser[i] = &dummyPlayer;
 800493a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800493e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004948:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	f107 0210 	add.w	r2, r7, #16
 8004954:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 8004956:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800495a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004964:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	f107 0210 	add.w	r2, r7, #16
 8004970:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004972:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004976:	3301      	adds	r3, #1
 8004978:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800497c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004980:	2b05      	cmp	r3, #5
 8004982:	ddda      	ble.n	800493a <GAME_PLAY_Phase_Management+0x2f2e>
						state_game->ChainCount = 0;
 8004984:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004988:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 8004994:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004998:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2232      	movs	r2, #50	; 0x32
 80049a0:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80049a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2205      	movs	r2, #5
 80049ae:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80049b2:	e35b      	b.n	800506c <GAME_PLAY_Phase_Management+0x3660>
 80049b4:	2400000c 	.word	0x2400000c
 80049b8:	08010c28 	.word	0x08010c28
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80049bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049ca:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 80049ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80049d2:	791b      	ldrb	r3, [r3, #4]
 80049d4:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 80049d8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80049dc:	79db      	ldrb	r3, [r3, #7]
 80049de:	2b63      	cmp	r3, #99	; 0x63
 80049e0:	d122      	bne.n	8004a28 <GAME_PLAY_Phase_Management+0x301c>
				{
					playerDef->life_point -= atk*100;
 80049e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	889a      	ldrh	r2, [r3, #4]
 80049ee:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	0249      	lsls	r1, r1, #9
 80049f8:	1ac9      	subs	r1, r1, r3
 80049fa:	0089      	lsls	r1, r1, #2
 80049fc:	4419      	add	r1, r3
 80049fe:	00c9      	lsls	r1, r1, #3
 8004a00:	1acb      	subs	r3, r1, r3
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a0e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8004a16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a1a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2206      	movs	r2, #6
 8004a22:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 8004a26:	e323      	b.n	8005070 <GAME_PLAY_Phase_Management+0x3664>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8004a28:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004a2c:	79db      	ldrb	r3, [r3, #7]
 8004a2e:	2b62      	cmp	r3, #98	; 0x62
 8004a30:	d108      	bne.n	8004a44 <GAME_PLAY_Phase_Management+0x3038>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8004a32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a36:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2206      	movs	r2, #6
 8004a3e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004a42:	e315      	b.n	8005070 <GAME_PLAY_Phase_Management+0x3664>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8004a44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a48:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3308      	adds	r3, #8
 8004a50:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8004a54:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004a58:	79db      	ldrb	r3, [r3, #7]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a60:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004a64:	010b      	lsls	r3, r1, #4
 8004a66:	3308      	adds	r3, #8
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8004a70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a74:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2236      	movs	r2, #54	; 0x36
 8004a7c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8004a80:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004a84:	789b      	ldrb	r3, [r3, #2]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 8100 	bne.w	8004c8c <GAME_PLAY_Phase_Management+0x3280>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004a8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a90:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	781a      	ldrb	r2, [r3, #0]
 8004a98:	4b77      	ldr	r3, [pc, #476]	; (8004c78 <GAME_PLAY_Phase_Management+0x326c>)
 8004a9a:	9203      	str	r2, [sp, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	9202      	str	r2, [sp, #8]
 8004aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa4:	9201      	str	r2, [sp, #4]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	9200      	str	r2, [sp, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a73      	ldr	r2, [pc, #460]	; (8004c7c <GAME_PLAY_Phase_Management+0x3270>)
 8004aae:	215a      	movs	r1, #90	; 0x5a
 8004ab0:	2005      	movs	r0, #5
 8004ab2:	f001 feb8 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004ab6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004aba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	; (8004c78 <GAME_PLAY_Phase_Management+0x326c>)
 8004ac4:	9203      	str	r2, [sp, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	9202      	str	r2, [sp, #8]
 8004aca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004ace:	9201      	str	r2, [sp, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	9200      	str	r2, [sp, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6a      	ldr	r2, [pc, #424]	; (8004c80 <GAME_PLAY_Phase_Management+0x3274>)
 8004ad8:	2169      	movs	r1, #105	; 0x69
 8004ada:	2005      	movs	r0, #5
 8004adc:	f001 fea3 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004ae0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ae4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	4b62      	ldr	r3, [pc, #392]	; (8004c78 <GAME_PLAY_Phase_Management+0x326c>)
 8004aee:	9203      	str	r2, [sp, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	9202      	str	r2, [sp, #8]
 8004af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af8:	9201      	str	r2, [sp, #4]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	9200      	str	r2, [sp, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a60      	ldr	r2, [pc, #384]	; (8004c84 <GAME_PLAY_Phase_Management+0x3278>)
 8004b02:	215a      	movs	r1, #90	; 0x5a
 8004b04:	2005      	movs	r0, #5
 8004b06:	f001 fe8e 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004b0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b0e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <GAME_PLAY_Phase_Management+0x326c>)
 8004b18:	9203      	str	r2, [sp, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	9202      	str	r2, [sp, #8]
 8004b1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b22:	9201      	str	r2, [sp, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	9200      	str	r2, [sp, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a57      	ldr	r2, [pc, #348]	; (8004c88 <GAME_PLAY_Phase_Management+0x327c>)
 8004b2c:	2169      	movs	r1, #105	; 0x69
 8004b2e:	2005      	movs	r0, #5
 8004b30:	f001 fe79 	bl	8006826 <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8004b34:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004b38:	795b      	ldrb	r3, [r3, #5]
 8004b3a:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 8004b3e:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004b42:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d25e      	bcs.n	8004c08 <GAME_PLAY_Phase_Management+0x31fc>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004b4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b4e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2326      	movs	r3, #38	; 0x26
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	215a      	movs	r1, #90	; 0x5a
 8004b62:	2000      	movs	r0, #0
 8004b64:	f001 ffa8 	bl	8006ab8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004b68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b6c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	2300      	movs	r3, #0
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2326      	movs	r3, #38	; 0x26
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	215a      	movs	r1, #90	; 0x5a
 8004b80:	2000      	movs	r0, #0
 8004b82:	f001 ff99 	bl	8006ab8 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 8004b86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	889a      	ldrh	r2, [r3, #4]
 8004b92:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 8004b96:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004b9a:	1acb      	subs	r3, r1, r3
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	0249      	lsls	r1, r1, #9
 8004ba2:	1ac9      	subs	r1, r1, r3
 8004ba4:	0089      	lsls	r1, r1, #2
 8004ba6:	4419      	add	r1, r3
 8004ba8:	00c9      	lsls	r1, r1, #3
 8004baa:	1acb      	subs	r3, r1, r3
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bb8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8004bc0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004bc4:	799b      	ldrb	r3, [r3, #6]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bcc:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8004bd0:	010b      	lsls	r3, r1, #4
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	441a      	add	r2, r3
 8004bd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bdc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004be0:	4611      	mov	r1, r2
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	f7fc fbb1 	bl	800134a <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8004be8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	f7fc fab3 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004bf6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bfa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2206      	movs	r2, #6
 8004c02:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004c06:	e233      	b.n	8005070 <GAME_PLAY_Phase_Management+0x3664>
						else if(atk > def){
 8004c08:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004c0c:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8004c10:	429a      	cmp	r2, r3
 8004c12:	f240 822d 	bls.w	8005070 <GAME_PLAY_Phase_Management+0x3664>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004c16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c1a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	2300      	movs	r3, #0
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2326      	movs	r3, #38	; 0x26
 8004c2a:	2280      	movs	r2, #128	; 0x80
 8004c2c:	215a      	movs	r1, #90	; 0x5a
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f001 ff42 	bl	8006ab8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004c34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c38:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2326      	movs	r3, #38	; 0x26
 8004c48:	2280      	movs	r2, #128	; 0x80
 8004c4a:	215a      	movs	r1, #90	; 0x5a
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f001 ff33 	bl	8006ab8 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8004c52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c56:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004c5a:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	f7fc fb73 	bl	800134a <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004c64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2206      	movs	r2, #6
 8004c70:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004c74:	e1fc      	b.n	8005070 <GAME_PLAY_Phase_Management+0x3664>
 8004c76:	bf00      	nop
 8004c78:	2400000c 	.word	0x2400000c
 8004c7c:	08010c38 	.word	0x08010c38
 8004c80:	08010c48 	.word	0x08010c48
 8004c84:	08010c58 	.word	0x08010c58
 8004c88:	08010c68 	.word	0x08010c68
					else if(ptrYugiohCard_dst->cardState == 1){
 8004c8c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c90:	789b      	ldrb	r3, [r3, #2]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	f040 81ec 	bne.w	8005070 <GAME_PLAY_Phase_Management+0x3664>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004c98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c9c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	4bba      	ldr	r3, [pc, #744]	; (8004f90 <GAME_PLAY_Phase_Management+0x3584>)
 8004ca6:	9203      	str	r2, [sp, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	9202      	str	r2, [sp, #8]
 8004cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cb0:	9201      	str	r2, [sp, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	9200      	str	r2, [sp, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4ab6      	ldr	r2, [pc, #728]	; (8004f94 <GAME_PLAY_Phase_Management+0x3588>)
 8004cba:	215a      	movs	r1, #90	; 0x5a
 8004cbc:	2005      	movs	r0, #5
 8004cbe:	f001 fdb2 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004cc2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cc6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	4bb0      	ldr	r3, [pc, #704]	; (8004f90 <GAME_PLAY_Phase_Management+0x3584>)
 8004cd0:	9203      	str	r2, [sp, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	9202      	str	r2, [sp, #8]
 8004cd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004cda:	9201      	str	r2, [sp, #4]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	9200      	str	r2, [sp, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4aad      	ldr	r2, [pc, #692]	; (8004f98 <GAME_PLAY_Phase_Management+0x358c>)
 8004ce4:	2169      	movs	r1, #105	; 0x69
 8004ce6:	2005      	movs	r0, #5
 8004ce8:	f001 fd9d 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004cec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cf0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	4ba5      	ldr	r3, [pc, #660]	; (8004f90 <GAME_PLAY_Phase_Management+0x3584>)
 8004cfa:	9203      	str	r2, [sp, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	9202      	str	r2, [sp, #8]
 8004d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d04:	9201      	str	r2, [sp, #4]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	9200      	str	r2, [sp, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4aa3      	ldr	r2, [pc, #652]	; (8004f9c <GAME_PLAY_Phase_Management+0x3590>)
 8004d0e:	215a      	movs	r1, #90	; 0x5a
 8004d10:	2005      	movs	r0, #5
 8004d12:	f001 fd88 	bl	8006826 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004d16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d1a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	4b9b      	ldr	r3, [pc, #620]	; (8004f90 <GAME_PLAY_Phase_Management+0x3584>)
 8004d24:	9203      	str	r2, [sp, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	9202      	str	r2, [sp, #8]
 8004d2a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d2e:	9201      	str	r2, [sp, #4]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	9200      	str	r2, [sp, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a9a      	ldr	r2, [pc, #616]	; (8004fa0 <GAME_PLAY_Phase_Management+0x3594>)
 8004d38:	2169      	movs	r1, #105	; 0x69
 8004d3a:	2005      	movs	r0, #5
 8004d3c:	f001 fd73 	bl	8006826 <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8004d40:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d44:	791b      	ldrb	r3, [r3, #4]
 8004d46:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 8004d4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	223c      	movs	r2, #60	; 0x3c
 8004d56:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8004d5a:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004d5e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d266      	bcs.n	8004e34 <GAME_PLAY_Phase_Management+0x3428>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004d66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d6a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	2300      	movs	r3, #0
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2326      	movs	r3, #38	; 0x26
 8004d7a:	2280      	movs	r2, #128	; 0x80
 8004d7c:	215a      	movs	r1, #90	; 0x5a
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f001 fe9a 	bl	8006ab8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004d84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d88:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	2326      	movs	r3, #38	; 0x26
 8004d98:	2280      	movs	r2, #128	; 0x80
 8004d9a:	215a      	movs	r1, #90	; 0x5a
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f001 fe8b 	bl	8006ab8 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8004da2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004da6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	223d      	movs	r2, #61	; 0x3d
 8004dae:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8004db2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004db6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	889a      	ldrh	r2, [r3, #4]
 8004dbe:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 8004dc2:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004dc6:	1acb      	subs	r3, r1, r3
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	4619      	mov	r1, r3
 8004dcc:	0249      	lsls	r1, r1, #9
 8004dce:	1ac9      	subs	r1, r1, r3
 8004dd0:	0089      	lsls	r1, r1, #2
 8004dd2:	4419      	add	r1, r3
 8004dd4:	00c9      	lsls	r1, r1, #3
 8004dd6:	1acb      	subs	r3, r1, r3
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004de4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8004dec:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004df0:	799b      	ldrb	r3, [r3, #6]
 8004df2:	4619      	mov	r1, r3
 8004df4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004df8:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8004dfc:	010b      	lsls	r3, r1, #4
 8004dfe:	3308      	adds	r3, #8
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	441a      	add	r2, r3
 8004e04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e08:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	f7fc fa9b 	bl	800134a <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8004e14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e18:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	f7fc f99d 	bl	800115c <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004e22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2206      	movs	r2, #6
 8004e2e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004e32:	e11d      	b.n	8005070 <GAME_PLAY_Phase_Management+0x3664>
						else if(atk > atk2){
 8004e34:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004e38:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	f240 8117 	bls.w	8005070 <GAME_PLAY_Phase_Management+0x3664>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004e42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e46:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	2326      	movs	r3, #38	; 0x26
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	215a      	movs	r1, #90	; 0x5a
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f001 fe2c 	bl	8006ab8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004e60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e64:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2326      	movs	r3, #38	; 0x26
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	215a      	movs	r1, #90	; 0x5a
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f001 fe1d 	bl	8006ab8 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 8004e7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2246      	movs	r2, #70	; 0x46
 8004e8a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8004e8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e92:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	889a      	ldrh	r2, [r3, #4]
 8004e9a:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 8004e9e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	0249      	lsls	r1, r1, #9
 8004eaa:	1ac9      	subs	r1, r1, r3
 8004eac:	0089      	lsls	r1, r1, #2
 8004eae:	4419      	add	r1, r3
 8004eb0:	00c9      	lsls	r1, r1, #3
 8004eb2:	1acb      	subs	r3, r1, r3
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ec0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8004ec8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ecc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004ed0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	f7fc fa38 	bl	800134a <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004eda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ede:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2206      	movs	r2, #6
 8004ee6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004eea:	e0c1      	b.n	8005070 <GAME_PLAY_Phase_Management+0x3664>
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004eec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ef0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <GAME_PLAY_Phase_Management+0x3584>)
 8004efa:	9203      	str	r2, [sp, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	9202      	str	r2, [sp, #8]
 8004f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f04:	9201      	str	r2, [sp, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	9200      	str	r2, [sp, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	; (8004fa4 <GAME_PLAY_Phase_Management+0x3598>)
 8004f0e:	215a      	movs	r1, #90	; 0x5a
 8004f10:	2005      	movs	r0, #5
 8004f12:	f001 fc88 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004f16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f1a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <GAME_PLAY_Phase_Management+0x3584>)
 8004f24:	9203      	str	r2, [sp, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	9202      	str	r2, [sp, #8]
 8004f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f2e:	9201      	str	r2, [sp, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	9200      	str	r2, [sp, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <GAME_PLAY_Phase_Management+0x359c>)
 8004f38:	215a      	movs	r1, #90	; 0x5a
 8004f3a:	2005      	movs	r0, #5
 8004f3c:	f001 fc73 	bl	8006826 <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8004f40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f44:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f4e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 8004f52:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8004f56:	f7fb fbcc 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8004f5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f5e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	889b      	ldrh	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <GAME_PLAY_Phase_Management+0x3572>
 8004f6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f6e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	889b      	ldrh	r3, [r3, #4]
 8004f76:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d916      	bls.n	8004fac <GAME_PLAY_Phase_Management+0x35a0>
					state_game->MainGame_State = Game_Ended;
 8004f7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8004f8e:	e070      	b.n	8005072 <GAME_PLAY_Phase_Management+0x3666>
 8004f90:	2400000c 	.word	0x2400000c
 8004f94:	08010c38 	.word	0x08010c38
 8004f98:	08010c7c 	.word	0x08010c7c
 8004f9c:	08010c58 	.word	0x08010c58
 8004fa0:	08010c8c 	.word	0x08010c8c
 8004fa4:	08010ca0 	.word	0x08010ca0
 8004fa8:	08010cb0 	.word	0x08010cb0
					state_game->action = 50;
 8004fac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fb0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2232      	movs	r2, #50	; 0x32
 8004fb8:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004fba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fbe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2326      	movs	r3, #38	; 0x26
 8004fce:	2280      	movs	r2, #128	; 0x80
 8004fd0:	215a      	movs	r1, #90	; 0x5a
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f001 fd70 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004fd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fdc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2326      	movs	r3, #38	; 0x26
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	215a      	movs	r1, #90	; 0x5a
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f001 fd61 	bl	8006ab8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004ff6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ffa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	4b22      	ldr	r3, [pc, #136]	; (800508c <GAME_PLAY_Phase_Management+0x3680>)
 8005004:	9203      	str	r2, [sp, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	9202      	str	r2, [sp, #8]
 800500a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800500e:	9201      	str	r2, [sp, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	9200      	str	r2, [sp, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <GAME_PLAY_Phase_Management+0x3684>)
 8005018:	215a      	movs	r1, #90	; 0x5a
 800501a:	2005      	movs	r0, #5
 800501c:	f001 fc03 	bl	8006826 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005020:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005024:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	4b17      	ldr	r3, [pc, #92]	; (800508c <GAME_PLAY_Phase_Management+0x3680>)
 800502e:	9203      	str	r2, [sp, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	9202      	str	r2, [sp, #8]
 8005034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005038:	9201      	str	r2, [sp, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	9200      	str	r2, [sp, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a14      	ldr	r2, [pc, #80]	; (8005094 <GAME_PLAY_Phase_Management+0x3688>)
 8005042:	215a      	movs	r1, #90	; 0x5a
 8005044:	2005      	movs	r0, #5
 8005046:	f001 fbee 	bl	8006826 <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800504a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800504e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800505a:	e00a      	b.n	8005072 <GAME_PLAY_Phase_Management+0x3666>
				break;
 800505c:	bf00      	nop
 800505e:	e00f      	b.n	8005080 <GAME_PLAY_Phase_Management+0x3674>
				break;
 8005060:	bf00      	nop
 8005062:	e00d      	b.n	8005080 <GAME_PLAY_Phase_Management+0x3674>
				break;
 8005064:	bf00      	nop
 8005066:	e00b      	b.n	8005080 <GAME_PLAY_Phase_Management+0x3674>
				break;
 8005068:	bf00      	nop
 800506a:	e009      	b.n	8005080 <GAME_PLAY_Phase_Management+0x3674>
				break;
 800506c:	bf00      	nop
 800506e:	e007      	b.n	8005080 <GAME_PLAY_Phase_Management+0x3674>
				break;
 8005070:	bf00      	nop
			}
			break;
 8005072:	e005      	b.n	8005080 <GAME_PLAY_Phase_Management+0x3674>
		break;
 8005074:	bf00      	nop
 8005076:	e004      	b.n	8005082 <GAME_PLAY_Phase_Management+0x3676>
		break;
 8005078:	bf00      	nop
 800507a:	e002      	b.n	8005082 <GAME_PLAY_Phase_Management+0x3676>
		break;
 800507c:	bf00      	nop
 800507e:	e000      	b.n	8005082 <GAME_PLAY_Phase_Management+0x3676>
			break;
 8005080:	bf00      	nop

	}
}
 8005082:	bf00      	nop
 8005084:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8005088:	46bd      	mov	sp, r7
 800508a:	bd90      	pop	{r4, r7, pc}
 800508c:	2400000c 	.word	0x2400000c
 8005090:	08010ca0 	.word	0x08010ca0
 8005094:	08010cb0 	.word	0x08010cb0

08005098 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3338      	adds	r3, #56	; 0x38
 80050a4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80050a6:	2300      	movs	r3, #0
 80050a8:	72fb      	strb	r3, [r7, #11]
 80050aa:	e00d      	b.n	80050c8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc f947 	bl	800134a <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3310      	adds	r3, #16
 80050c0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80050c2:	7afb      	ldrb	r3, [r7, #11]
 80050c4:	3301      	adds	r3, #1
 80050c6:	72fb      	strb	r3, [r7, #11]
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d9ee      	bls.n	80050ac <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3308      	adds	r3, #8
 80050e6:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3338      	adds	r3, #56	; 0x38
 80050ec:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	3338      	adds	r3, #56	; 0x38
 80050f8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	e00d      	b.n	800511c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc f91d 	bl	800134a <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3310      	adds	r3, #16
 8005114:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3301      	adds	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d9ee      	bls.n	8005100 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8005122:	2300      	movs	r3, #0
 8005124:	73bb      	strb	r3, [r7, #14]
 8005126:	e00d      	b.n	8005144 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8005130:	6939      	ldr	r1, [r7, #16]
 8005132:	6838      	ldr	r0, [r7, #0]
 8005134:	f7fc f909 	bl	800134a <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3310      	adds	r3, #16
 800513c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800513e:	7bbb      	ldrb	r3, [r7, #14]
 8005140:	3301      	adds	r3, #1
 8005142:	73bb      	strb	r3, [r7, #14]
 8005144:	7bbb      	ldrb	r3, [r7, #14]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d9ee      	bls.n	8005128 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800516a:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3368      	adds	r3, #104	; 0x68
 8005170:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3368      	adds	r3, #104	; 0x68
 8005176:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8005178:	2300      	movs	r3, #0
 800517a:	74fb      	strb	r3, [r7, #19]
 800517c:	e010      	b.n	80051a0 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d104      	bne.n	8005194 <YUGIOH_Reborn+0x40>
			flag = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	77bb      	strb	r3, [r7, #30]
			break;
 8005192:	e008      	b.n	80051a6 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3310      	adds	r3, #16
 8005198:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 800519a:	7cfb      	ldrb	r3, [r7, #19]
 800519c:	3301      	adds	r3, #1
 800519e:	74fb      	strb	r3, [r7, #19]
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b13      	cmp	r3, #19
 80051a4:	d9eb      	bls.n	800517e <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3338      	adds	r3, #56	; 0x38
 80051aa:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80051ac:	7ffb      	ldrb	r3, [r7, #31]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d134      	bne.n	800521c <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	799a      	ldrb	r2, [r3, #6]
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <YUGIOH_Reborn+0xd0>)
 80051b8:	fba3 1302 	umull	r1, r3, r3, r2
 80051bc:	0899      	lsrs	r1, r3, #2
 80051be:	460b      	mov	r3, r1
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	440b      	add	r3, r1
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80051ca:	7afb      	ldrb	r3, [r7, #11]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	3308      	adds	r3, #8
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	69b8      	ldr	r0, [r7, #24]
 80051d8:	f7fb fa54 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80051dc:	7fbb      	ldrb	r3, [r7, #30]
 80051de:	3301      	adds	r3, #1
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	3368      	adds	r3, #104	; 0x68
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	4413      	add	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80051ea:	7fbb      	ldrb	r3, [r7, #30]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	3368      	adds	r3, #104	; 0x68
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80051f6:	7fbb      	ldrb	r3, [r7, #30]
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	e00c      	b.n	8005216 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	69b8      	ldr	r0, [r7, #24]
 8005200:	f7fb fa40 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	3310      	adds	r3, #16
 8005208:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	3310      	adds	r3, #16
 800520e:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b13      	cmp	r3, #19
 800521a:	ddef      	ble.n	80051fc <YUGIOH_Reborn+0xa8>
		}


	}
}
 800521c:	bf00      	nop
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	aaaaaaab 	.word	0xaaaaaaab

08005228 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005236:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800523e:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	799a      	ldrb	r2, [r3, #6]
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <YUGIOH_Ancient_Rules+0x54>)
 8005246:	fba3 1302 	umull	r1, r3, r3, r2
 800524a:	0899      	lsrs	r1, r3, #2
 800524c:	460b      	mov	r3, r1
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	440b      	add	r3, r1
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3308      	adds	r3, #8
 800525c:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	3308      	adds	r3, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f7fb fa09 	bl	8000684 <YUGIOH_card_copy>

}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	aaaaaaab 	.word	0xaaaaaaab

08005280 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3308      	adds	r3, #8
 800528e:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3338      	adds	r3, #56	; 0x38
 8005294:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	3338      	adds	r3, #56	; 0x38
 80052a0:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80052a6:	2300      	movs	r3, #0
 80052a8:	73bb      	strb	r3, [r7, #14]
 80052aa:	e00c      	b.n	80052c6 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	3301      	adds	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	3310      	adds	r3, #16
 80052be:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	3301      	adds	r3, #1
 80052c4:	73bb      	strb	r3, [r7, #14]
 80052c6:	7bbb      	ldrb	r3, [r7, #14]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d9ef      	bls.n	80052ac <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80052cc:	2300      	movs	r3, #0
 80052ce:	737b      	strb	r3, [r7, #13]
 80052d0:	e00c      	b.n	80052ec <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d102      	bne.n	80052e0 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	3301      	adds	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3310      	adds	r3, #16
 80052e4:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80052e6:	7b7b      	ldrb	r3, [r7, #13]
 80052e8:	3301      	adds	r3, #1
 80052ea:	737b      	strb	r3, [r7, #13]
 80052ec:	7b7b      	ldrb	r3, [r7, #13]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d9ef      	bls.n	80052d2 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	889a      	ldrh	r2, [r3, #4]
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	4619      	mov	r1, r3
 80052fc:	0089      	lsls	r1, r1, #2
 80052fe:	440b      	add	r3, r1
 8005300:	4619      	mov	r1, r3
 8005302:	0109      	lsls	r1, r1, #4
 8005304:	1acb      	subs	r3, r1, r3
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	b29b      	uxth	r3, r3
 800530a:	4413      	add	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	809a      	strh	r2, [r3, #4]

}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005330:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005338:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	799a      	ldrb	r2, [r3, #6]
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <YUGIOH_Stop_Defense+0x68>)
 8005340:	fba3 1302 	umull	r1, r3, r3, r2
 8005344:	0899      	lsrs	r1, r3, #2
 8005346:	460b      	mov	r3, r1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	440b      	add	r3, r1
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	3308      	adds	r3, #8
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	4413      	add	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	789b      	ldrb	r3, [r3, #2]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <YUGIOH_Stop_Defense+0x5a>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	709a      	strb	r2, [r3, #2]
	}

}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	aaaaaaab 	.word	0xaaaaaaab

0800538c <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3308      	adds	r3, #8
 800539a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	e016      	b.n	80053d0 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d10a      	bne.n	80053c4 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	7a5b      	ldrb	r3, [r3, #9]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d006      	beq.n	80053c4 <YUGIOH_Check_Trap_On_board+0x38>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d102      	bne.n	80053c4 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e009      	b.n	80053d8 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3310      	adds	r3, #16
 80053c8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	dde5      	ble.n	80053a2 <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 80053d6:	23ff      	movs	r3, #255	; 0xff
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3308      	adds	r3, #8
 80053f2:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]
 80053f8:	e016      	b.n	8005428 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	429a      	cmp	r2, r3
 8005404:	d10a      	bne.n	800541c <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	7a5b      	ldrb	r3, [r3, #9]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d006      	beq.n	800541c <YUGIOH_Check_Spell_On_board+0x38>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d102      	bne.n	800541c <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	e009      	b.n	8005430 <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3310      	adds	r3, #16
 8005420:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	3301      	adds	r3, #1
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b02      	cmp	r3, #2
 800542c:	dde5      	ble.n	80053fa <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 800542e:	23ff      	movs	r3, #255	; 0xff
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3308      	adds	r3, #8
 8005448:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 800544a:	2300      	movs	r3, #0
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	e00c      	b.n	800546a <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3310      	adds	r3, #16
 8005462:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	3301      	adds	r3, #1
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b02      	cmp	r3, #2
 800546e:	ddef      	ble.n	8005450 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3338      	adds	r3, #56	; 0x38
 800548a:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 800548c:	2303      	movs	r3, #3
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	e00c      	b.n	80054ac <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3310      	adds	r3, #16
 80054a4:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	3301      	adds	r3, #1
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	ddef      	ble.n	8005492 <YUGIOH_Monster_Activated+0x14>
	}
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <MainGUI>:
void MainGUI()
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80054c6:	4b55      	ldr	r3, [pc, #340]	; (800561c <MainGUI+0x15c>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	9202      	str	r2, [sp, #8]
 80054cc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80054d0:	9201      	str	r2, [sp, #4]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	9200      	str	r2, [sp, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a51      	ldr	r2, [pc, #324]	; (8005620 <MainGUI+0x160>)
 80054da:	2105      	movs	r1, #5
 80054dc:	2005      	movs	r0, #5
 80054de:	f001 f958 	bl	8006792 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80054e2:	4b4e      	ldr	r3, [pc, #312]	; (800561c <MainGUI+0x15c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	9202      	str	r2, [sp, #8]
 80054e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ec:	9201      	str	r2, [sp, #4]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	9200      	str	r2, [sp, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a4b      	ldr	r2, [pc, #300]	; (8005624 <MainGUI+0x164>)
 80054f6:	2114      	movs	r1, #20
 80054f8:	2005      	movs	r0, #5
 80054fa:	f001 f94a 	bl	8006792 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <MainGUI+0x15c>)
 8005500:	2200      	movs	r2, #0
 8005502:	9202      	str	r2, [sp, #8]
 8005504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005508:	9201      	str	r2, [sp, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	9200      	str	r2, [sp, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a45      	ldr	r2, [pc, #276]	; (8005628 <MainGUI+0x168>)
 8005512:	2123      	movs	r1, #35	; 0x23
 8005514:	2005      	movs	r0, #5
 8005516:	f001 f93c 	bl	8006792 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800551a:	4b40      	ldr	r3, [pc, #256]	; (800561c <MainGUI+0x15c>)
 800551c:	2200      	movs	r2, #0
 800551e:	9202      	str	r2, [sp, #8]
 8005520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005524:	9201      	str	r2, [sp, #4]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	9200      	str	r2, [sp, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3f      	ldr	r2, [pc, #252]	; (800562c <MainGUI+0x16c>)
 800552e:	2123      	movs	r1, #35	; 0x23
 8005530:	203c      	movs	r0, #60	; 0x3c
 8005532:	f001 f8e4 	bl	80066fe <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <MainGUI+0x15c>)
 8005538:	2200      	movs	r2, #0
 800553a:	9202      	str	r2, [sp, #8]
 800553c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005540:	9201      	str	r2, [sp, #4]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	9200      	str	r2, [sp, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a39      	ldr	r2, [pc, #228]	; (8005630 <MainGUI+0x170>)
 800554a:	2132      	movs	r1, #50	; 0x32
 800554c:	2000      	movs	r0, #0
 800554e:	f001 f920 	bl	8006792 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005552:	4b32      	ldr	r3, [pc, #200]	; (800561c <MainGUI+0x15c>)
 8005554:	2200      	movs	r2, #0
 8005556:	9202      	str	r2, [sp, #8]
 8005558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800555c:	9201      	str	r2, [sp, #4]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	9200      	str	r2, [sp, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a33      	ldr	r2, [pc, #204]	; (8005634 <MainGUI+0x174>)
 8005566:	213c      	movs	r1, #60	; 0x3c
 8005568:	2000      	movs	r0, #0
 800556a:	f001 f912 	bl	8006792 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800556e:	4b2b      	ldr	r3, [pc, #172]	; (800561c <MainGUI+0x15c>)
 8005570:	2200      	movs	r2, #0
 8005572:	9202      	str	r2, [sp, #8]
 8005574:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005578:	9201      	str	r2, [sp, #4]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	9200      	str	r2, [sp, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <MainGUI+0x178>)
 8005582:	2105      	movs	r1, #5
 8005584:	2005      	movs	r0, #5
 8005586:	f001 f8ba 	bl	80066fe <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <MainGUI+0x15c>)
 800558c:	2200      	movs	r2, #0
 800558e:	9202      	str	r2, [sp, #8]
 8005590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005594:	9201      	str	r2, [sp, #4]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	9200      	str	r2, [sp, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a21      	ldr	r2, [pc, #132]	; (8005624 <MainGUI+0x164>)
 800559e:	2114      	movs	r1, #20
 80055a0:	2005      	movs	r0, #5
 80055a2:	f001 f8ac 	bl	80066fe <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <MainGUI+0x15c>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	9202      	str	r2, [sp, #8]
 80055ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055b0:	9201      	str	r2, [sp, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	9200      	str	r2, [sp, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a20      	ldr	r2, [pc, #128]	; (800563c <MainGUI+0x17c>)
 80055ba:	2123      	movs	r1, #35	; 0x23
 80055bc:	2005      	movs	r0, #5
 80055be:	f001 f89e 	bl	80066fe <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80055c2:	4b16      	ldr	r3, [pc, #88]	; (800561c <MainGUI+0x15c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	9202      	str	r2, [sp, #8]
 80055c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055cc:	9201      	str	r2, [sp, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	9200      	str	r2, [sp, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a15      	ldr	r2, [pc, #84]	; (800562c <MainGUI+0x16c>)
 80055d6:	2123      	movs	r1, #35	; 0x23
 80055d8:	203c      	movs	r0, #60	; 0x3c
 80055da:	f001 f8da 	bl	8006792 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <MainGUI+0x15c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	9202      	str	r2, [sp, #8]
 80055e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e8:	9201      	str	r2, [sp, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	9200      	str	r2, [sp, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <MainGUI+0x170>)
 80055f2:	2132      	movs	r1, #50	; 0x32
 80055f4:	2000      	movs	r0, #0
 80055f6:	f001 f882 	bl	80066fe <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <MainGUI+0x15c>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	9202      	str	r2, [sp, #8]
 8005600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005604:	9201      	str	r2, [sp, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	9200      	str	r2, [sp, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a09      	ldr	r2, [pc, #36]	; (8005634 <MainGUI+0x174>)
 800560e:	213c      	movs	r1, #60	; 0x3c
 8005610:	2000      	movs	r0, #0
 8005612:	f001 f874 	bl	80066fe <ST7735_WriteString>
}
 8005616:	bf00      	nop
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	2400000c 	.word	0x2400000c
 8005620:	080109ac 	.word	0x080109ac
 8005624:	08010cc0 	.word	0x08010cc0
 8005628:	08010cd0 	.word	0x08010cd0
 800562c:	08010cd8 	.word	0x08010cd8
 8005630:	08010ce0 	.word	0x08010ce0
 8005634:	08010958 	.word	0x08010958
 8005638:	0801094c 	.word	0x0801094c
 800563c:	08010cf4 	.word	0x08010cf4

08005640 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af04      	add	r7, sp, #16
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 800564a:	2300      	movs	r3, #0
 800564c:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 800564e:	4b49      	ldr	r3, [pc, #292]	; (8005774 <LCDvalue+0x134>)
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	4b49      	ldr	r3, [pc, #292]	; (8005778 <LCDvalue+0x138>)
 8005654:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8005656:	4b49      	ldr	r3, [pc, #292]	; (800577c <LCDvalue+0x13c>)
 8005658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800565c:	4a48      	ldr	r2, [pc, #288]	; (8005780 <LCDvalue+0x140>)
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	f7fa fe8d 	bl	8000380 <__aeabi_uldivmod>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4613      	mov	r3, r2
 800566c:	817b      	strh	r3, [r7, #10]
	time -= a;
 800566e:	4b42      	ldr	r3, [pc, #264]	; (8005778 <LCDvalue+0x138>)
 8005670:	881a      	ldrh	r2, [r3, #0]
 8005672:	897b      	ldrh	r3, [r7, #10]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	b29a      	uxth	r2, r3
 8005678:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <LCDvalue+0x138>)
 800567a:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 800567c:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <LCDvalue+0x138>)
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	4940      	ldr	r1, [pc, #256]	; (8005784 <LCDvalue+0x144>)
 8005684:	4840      	ldr	r0, [pc, #256]	; (8005788 <LCDvalue+0x148>)
 8005686:	f00a fdd7 	bl	8010238 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 800568a:	2300      	movs	r3, #0
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e012      	b.n	80056b6 <LCDvalue+0x76>
		if(t_c[i] == 0){
 8005690:	4a3d      	ldr	r2, [pc, #244]	; (8005788 <LCDvalue+0x148>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <LCDvalue+0x70>
			t_c[i] = 32;
 800569c:	4a3a      	ldr	r2, [pc, #232]	; (8005788 <LCDvalue+0x148>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	2220      	movs	r2, #32
 80056a4:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	4a37      	ldr	r2, [pc, #220]	; (8005788 <LCDvalue+0x148>)
 80056ac:	2120      	movs	r1, #32
 80056ae:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	dde9      	ble.n	8005690 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 80056bc:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <LCDvalue+0x138>)
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 811d 	bne.w	8005900 <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 80056c6:	4831      	ldr	r0, [pc, #196]	; (800578c <LCDvalue+0x14c>)
 80056c8:	f008 f9da 	bl	800da80 <HAL_TIM_Base_Stop_IT>
		time = 0;
 80056cc:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <LCDvalue+0x138>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 80056d2:	2000      	movs	r0, #0
 80056d4:	f001 fa7a 	bl	8006bcc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 80056d8:	2000      	movs	r0, #0
 80056da:	f001 fa88 	bl	8006bee <ST7735_FillScreen1>
		while(time == 0){
 80056de:	e10a      	b.n	80058f6 <LCDvalue+0x2b6>
			uint8_t credit = 1;
 80056e0:	2301      	movs	r3, #1
 80056e2:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 80056e4:	7a7b      	ldrb	r3, [r7, #9]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d15e      	bne.n	80057a8 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	781a      	ldrb	r2, [r3, #0]
 80056ee:	4b28      	ldr	r3, [pc, #160]	; (8005790 <LCDvalue+0x150>)
 80056f0:	9203      	str	r2, [sp, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	9202      	str	r2, [sp, #8]
 80056f6:	221f      	movs	r2, #31
 80056f8:	9201      	str	r2, [sp, #4]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	9200      	str	r2, [sp, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a24      	ldr	r2, [pc, #144]	; (8005794 <LCDvalue+0x154>)
 8005702:	2123      	movs	r1, #35	; 0x23
 8005704:	200f      	movs	r0, #15
 8005706:	f001 f88e 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	781a      	ldrb	r2, [r3, #0]
 800570e:	4b22      	ldr	r3, [pc, #136]	; (8005798 <LCDvalue+0x158>)
 8005710:	9203      	str	r2, [sp, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	9202      	str	r2, [sp, #8]
 8005716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800571a:	9201      	str	r2, [sp, #4]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	9200      	str	r2, [sp, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1e      	ldr	r2, [pc, #120]	; (800579c <LCDvalue+0x15c>)
 8005724:	213c      	movs	r1, #60	; 0x3c
 8005726:	2005      	movs	r0, #5
 8005728:	f001 f87d 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	4b17      	ldr	r3, [pc, #92]	; (8005790 <LCDvalue+0x150>)
 8005732:	9203      	str	r2, [sp, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	9202      	str	r2, [sp, #8]
 8005738:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800573c:	9201      	str	r2, [sp, #4]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	9200      	str	r2, [sp, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <LCDvalue+0x160>)
 8005746:	2123      	movs	r1, #35	; 0x23
 8005748:	2014      	movs	r0, #20
 800574a:	f001 f86c 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	4b11      	ldr	r3, [pc, #68]	; (8005798 <LCDvalue+0x158>)
 8005754:	9203      	str	r2, [sp, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	9202      	str	r2, [sp, #8]
 800575a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800575e:	9201      	str	r2, [sp, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	9200      	str	r2, [sp, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a0f      	ldr	r2, [pc, #60]	; (80057a4 <LCDvalue+0x164>)
 8005768:	213c      	movs	r1, #60	; 0x3c
 800576a:	2000      	movs	r0, #0
 800576c:	f001 f85b 	bl	8006826 <ST7735_WriteStringNSS>
 8005770:	e0c1      	b.n	80058f6 <LCDvalue+0x2b6>
 8005772:	bf00      	nop
 8005774:	24000000 	.word	0x24000000
 8005778:	24000174 	.word	0x24000174
 800577c:	24000ea0 	.word	0x24000ea0
 8005780:	000f4240 	.word	0x000f4240
 8005784:	08010cfc 	.word	0x08010cfc
 8005788:	24000170 	.word	0x24000170
 800578c:	240002e8 	.word	0x240002e8
 8005790:	24000014 	.word	0x24000014
 8005794:	080109e4 	.word	0x080109e4
 8005798:	2400000c 	.word	0x2400000c
 800579c:	08010d00 	.word	0x08010d00
 80057a0:	080109dc 	.word	0x080109dc
 80057a4:	08010d14 	.word	0x08010d14
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 80057a8:	7a7b      	ldrb	r3, [r7, #9]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	f040 80a3 	bne.w	80058f6 <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	4ba1      	ldr	r3, [pc, #644]	; (8005a3c <LCDvalue+0x3fc>)
 80057b6:	9203      	str	r2, [sp, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	9202      	str	r2, [sp, #8]
 80057bc:	221f      	movs	r2, #31
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	9200      	str	r2, [sp, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a9e      	ldr	r2, [pc, #632]	; (8005a40 <LCDvalue+0x400>)
 80057c8:	2119      	movs	r1, #25
 80057ca:	200f      	movs	r0, #15
 80057cc:	f001 f82b 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	4b9b      	ldr	r3, [pc, #620]	; (8005a44 <LCDvalue+0x404>)
 80057d6:	9203      	str	r2, [sp, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e0:	9201      	str	r2, [sp, #4]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	9200      	str	r2, [sp, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a97      	ldr	r2, [pc, #604]	; (8005a48 <LCDvalue+0x408>)
 80057ea:	2132      	movs	r1, #50	; 0x32
 80057ec:	2005      	movs	r0, #5
 80057ee:	f001 f81a 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	4b91      	ldr	r3, [pc, #580]	; (8005a3c <LCDvalue+0x3fc>)
 80057f8:	9203      	str	r2, [sp, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	9202      	str	r2, [sp, #8]
 80057fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005802:	9201      	str	r2, [sp, #4]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	9200      	str	r2, [sp, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a90      	ldr	r2, [pc, #576]	; (8005a4c <LCDvalue+0x40c>)
 800580c:	2119      	movs	r1, #25
 800580e:	2014      	movs	r0, #20
 8005810:	f001 f809 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	4b8a      	ldr	r3, [pc, #552]	; (8005a44 <LCDvalue+0x404>)
 800581a:	9203      	str	r2, [sp, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	9202      	str	r2, [sp, #8]
 8005820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005824:	9201      	str	r2, [sp, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	9200      	str	r2, [sp, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a88      	ldr	r2, [pc, #544]	; (8005a50 <LCDvalue+0x410>)
 800582e:	2132      	movs	r1, #50	; 0x32
 8005830:	2000      	movs	r0, #0
 8005832:	f000 fff8 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8005836:	4b83      	ldr	r3, [pc, #524]	; (8005a44 <LCDvalue+0x404>)
 8005838:	2200      	movs	r2, #0
 800583a:	9203      	str	r2, [sp, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	9202      	str	r2, [sp, #8]
 8005840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005844:	9201      	str	r2, [sp, #4]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	9200      	str	r2, [sp, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a81      	ldr	r2, [pc, #516]	; (8005a54 <LCDvalue+0x414>)
 800584e:	2141      	movs	r1, #65	; 0x41
 8005850:	2000      	movs	r0, #0
 8005852:	f000 ffe8 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8005856:	4b7b      	ldr	r3, [pc, #492]	; (8005a44 <LCDvalue+0x404>)
 8005858:	2201      	movs	r2, #1
 800585a:	9203      	str	r2, [sp, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	9202      	str	r2, [sp, #8]
 8005860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005864:	9201      	str	r2, [sp, #4]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	9200      	str	r2, [sp, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a79      	ldr	r2, [pc, #484]	; (8005a54 <LCDvalue+0x414>)
 800586e:	2141      	movs	r1, #65	; 0x41
 8005870:	2000      	movs	r0, #0
 8005872:	f000 ffd8 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8005876:	4b73      	ldr	r3, [pc, #460]	; (8005a44 <LCDvalue+0x404>)
 8005878:	2200      	movs	r2, #0
 800587a:	9203      	str	r2, [sp, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	9202      	str	r2, [sp, #8]
 8005880:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8005884:	9201      	str	r2, [sp, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	9200      	str	r2, [sp, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a72      	ldr	r2, [pc, #456]	; (8005a58 <LCDvalue+0x418>)
 800588e:	2164      	movs	r1, #100	; 0x64
 8005890:	2000      	movs	r0, #0
 8005892:	f000 ffc8 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8005896:	4b6b      	ldr	r3, [pc, #428]	; (8005a44 <LCDvalue+0x404>)
 8005898:	2200      	movs	r2, #0
 800589a:	9203      	str	r2, [sp, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	9202      	str	r2, [sp, #8]
 80058a0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80058a4:	9201      	str	r2, [sp, #4]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	9200      	str	r2, [sp, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6b      	ldr	r2, [pc, #428]	; (8005a5c <LCDvalue+0x41c>)
 80058ae:	2173      	movs	r1, #115	; 0x73
 80058b0:	2000      	movs	r0, #0
 80058b2:	f000 ffb8 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 80058b6:	4b63      	ldr	r3, [pc, #396]	; (8005a44 <LCDvalue+0x404>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	9203      	str	r2, [sp, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	9202      	str	r2, [sp, #8]
 80058c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80058c4:	9201      	str	r2, [sp, #4]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	9200      	str	r2, [sp, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a64      	ldr	r2, [pc, #400]	; (8005a60 <LCDvalue+0x420>)
 80058ce:	2173      	movs	r1, #115	; 0x73
 80058d0:	2000      	movs	r0, #0
 80058d2:	f000 ffa8 	bl	8006826 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 80058d6:	4b5b      	ldr	r3, [pc, #364]	; (8005a44 <LCDvalue+0x404>)
 80058d8:	2201      	movs	r2, #1
 80058da:	9203      	str	r2, [sp, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	9202      	str	r2, [sp, #8]
 80058e0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80058e4:	9201      	str	r2, [sp, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	9200      	str	r2, [sp, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5d      	ldr	r2, [pc, #372]	; (8005a64 <LCDvalue+0x424>)
 80058ee:	215a      	movs	r1, #90	; 0x5a
 80058f0:	2000      	movs	r0, #0
 80058f2:	f000 ff98 	bl	8006826 <ST7735_WriteStringNSS>
		while(time == 0){
 80058f6:	4b5c      	ldr	r3, [pc, #368]	; (8005a68 <LCDvalue+0x428>)
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f43f aef0 	beq.w	80056e0 <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	889b      	ldrh	r3, [r3, #4]
 8005904:	461a      	mov	r2, r3
 8005906:	4959      	ldr	r1, [pc, #356]	; (8005a6c <LCDvalue+0x42c>)
 8005908:	4859      	ldr	r0, [pc, #356]	; (8005a70 <LCDvalue+0x430>)
 800590a:	f00a fc95 	bl	8010238 <siprintf>
	if(C_LP_ATK[3] == 0){
 800590e:	4b58      	ldr	r3, [pc, #352]	; (8005a70 <LCDvalue+0x430>)
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10e      	bne.n	8005934 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8005916:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <LCDvalue+0x430>)
 8005918:	789a      	ldrb	r2, [r3, #2]
 800591a:	4b55      	ldr	r3, [pc, #340]	; (8005a70 <LCDvalue+0x430>)
 800591c:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 800591e:	4b54      	ldr	r3, [pc, #336]	; (8005a70 <LCDvalue+0x430>)
 8005920:	785a      	ldrb	r2, [r3, #1]
 8005922:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <LCDvalue+0x430>)
 8005924:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8005926:	4b52      	ldr	r3, [pc, #328]	; (8005a70 <LCDvalue+0x430>)
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	4b51      	ldr	r3, [pc, #324]	; (8005a70 <LCDvalue+0x430>)
 800592c:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 800592e:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <LCDvalue+0x430>)
 8005930:	2220      	movs	r2, #32
 8005932:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <LCDvalue+0x404>)
 800593a:	9203      	str	r2, [sp, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	9202      	str	r2, [sp, #8]
 8005940:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005944:	9201      	str	r2, [sp, #4]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	9200      	str	r2, [sp, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a48      	ldr	r2, [pc, #288]	; (8005a70 <LCDvalue+0x430>)
 800594e:	2114      	movs	r1, #20
 8005950:	205a      	movs	r0, #90	; 0x5a
 8005952:	f000 ff68 	bl	8006826 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <LCDvalue+0x404>)
 800595c:	9203      	str	r2, [sp, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	9202      	str	r2, [sp, #8]
 8005962:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005966:	9201      	str	r2, [sp, #4]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	9200      	str	r2, [sp, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a41      	ldr	r2, [pc, #260]	; (8005a74 <LCDvalue+0x434>)
 8005970:	2132      	movs	r1, #50	; 0x32
 8005972:	2069      	movs	r0, #105	; 0x69
 8005974:	f000 ff57 	bl	8006826 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	889b      	ldrh	r3, [r3, #4]
 800597c:	461a      	mov	r2, r3
 800597e:	493b      	ldr	r1, [pc, #236]	; (8005a6c <LCDvalue+0x42c>)
 8005980:	483d      	ldr	r0, [pc, #244]	; (8005a78 <LCDvalue+0x438>)
 8005982:	f00a fc59 	bl	8010238 <siprintf>
	if(C_LP_DEF[3] == 0){
 8005986:	4b3c      	ldr	r3, [pc, #240]	; (8005a78 <LCDvalue+0x438>)
 8005988:	78db      	ldrb	r3, [r3, #3]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10e      	bne.n	80059ac <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 800598e:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <LCDvalue+0x438>)
 8005990:	789a      	ldrb	r2, [r3, #2]
 8005992:	4b39      	ldr	r3, [pc, #228]	; (8005a78 <LCDvalue+0x438>)
 8005994:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8005996:	4b38      	ldr	r3, [pc, #224]	; (8005a78 <LCDvalue+0x438>)
 8005998:	785a      	ldrb	r2, [r3, #1]
 800599a:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <LCDvalue+0x438>)
 800599c:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 800599e:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <LCDvalue+0x438>)
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <LCDvalue+0x438>)
 80059a4:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 80059a6:	4b34      	ldr	r3, [pc, #208]	; (8005a78 <LCDvalue+0x438>)
 80059a8:	2220      	movs	r2, #32
 80059aa:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <LCDvalue+0x404>)
 80059b2:	9203      	str	r2, [sp, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	9202      	str	r2, [sp, #8]
 80059b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80059bc:	9201      	str	r2, [sp, #4]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	9200      	str	r2, [sp, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <LCDvalue+0x438>)
 80059c6:	2114      	movs	r1, #20
 80059c8:	205a      	movs	r0, #90	; 0x5a
 80059ca:	f000 ff2c 	bl	8006826 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <LCDvalue+0x404>)
 80059d4:	9203      	str	r2, [sp, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	9202      	str	r2, [sp, #8]
 80059da:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80059de:	9201      	str	r2, [sp, #4]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	9200      	str	r2, [sp, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a25      	ldr	r2, [pc, #148]	; (8005a7c <LCDvalue+0x43c>)
 80059e8:	2132      	movs	r1, #50	; 0x32
 80059ea:	2069      	movs	r0, #105	; 0x69
 80059ec:	f000 ff1b 	bl	8006826 <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 80059f0:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <LCDvalue+0x440>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	491d      	ldr	r1, [pc, #116]	; (8005a6c <LCDvalue+0x42c>)
 80059f8:	4822      	ldr	r0, [pc, #136]	; (8005a84 <LCDvalue+0x444>)
 80059fa:	f00a fc1d 	bl	8010238 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <LCDvalue+0x404>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	9203      	str	r2, [sp, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	9202      	str	r2, [sp, #8]
 8005a08:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005a0c:	9201      	str	r2, [sp, #4]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	9200      	str	r2, [sp, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <LCDvalue+0x444>)
 8005a16:	2123      	movs	r1, #35	; 0x23
 8005a18:	2032      	movs	r0, #50	; 0x32
 8005a1a:	f000 ff04 	bl	8006826 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <LCDvalue+0x404>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	9203      	str	r2, [sp, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	9202      	str	r2, [sp, #8]
 8005a28:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005a2c:	9201      	str	r2, [sp, #4]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	9200      	str	r2, [sp, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <LCDvalue+0x444>)
 8005a36:	2123      	movs	r1, #35	; 0x23
 8005a38:	2032      	movs	r0, #50	; 0x32
 8005a3a:	e025      	b.n	8005a88 <LCDvalue+0x448>
 8005a3c:	24000014 	.word	0x24000014
 8005a40:	080109e4 	.word	0x080109e4
 8005a44:	2400000c 	.word	0x2400000c
 8005a48:	08010d00 	.word	0x08010d00
 8005a4c:	080109dc 	.word	0x080109dc
 8005a50:	08010d14 	.word	0x08010d14
 8005a54:	08010958 	.word	0x08010958
 8005a58:	08010d28 	.word	0x08010d28
 8005a5c:	08010d34 	.word	0x08010d34
 8005a60:	08010d44 	.word	0x08010d44
 8005a64:	08010d50 	.word	0x08010d50
 8005a68:	24000174 	.word	0x24000174
 8005a6c:	08010cfc 	.word	0x08010cfc
 8005a70:	24000164 	.word	0x24000164
 8005a74:	24000170 	.word	0x24000170
 8005a78:	24000168 	.word	0x24000168
 8005a7c:	080109a8 	.word	0x080109a8
 8005a80:	24000176 	.word	0x24000176
 8005a84:	2400016c 	.word	0x2400016c
 8005a88:	f000 fecd 	bl	8006826 <ST7735_WriteStringNSS>

}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a98:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <SystemInit+0xfc>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	4a3c      	ldr	r2, [pc, #240]	; (8005b90 <SystemInit+0xfc>)
 8005aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005aa8:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <SystemInit+0xfc>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	4a38      	ldr	r2, [pc, #224]	; (8005b90 <SystemInit+0xfc>)
 8005aae:	f043 0310 	orr.w	r3, r3, #16
 8005ab2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005ab4:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <SystemInit+0x100>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	2b06      	cmp	r3, #6
 8005abe:	d807      	bhi.n	8005ad0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005ac0:	4b34      	ldr	r3, [pc, #208]	; (8005b94 <SystemInit+0x100>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f023 030f 	bic.w	r3, r3, #15
 8005ac8:	4a32      	ldr	r2, [pc, #200]	; (8005b94 <SystemInit+0x100>)
 8005aca:	f043 0307 	orr.w	r3, r3, #7
 8005ace:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005ad0:	4b31      	ldr	r3, [pc, #196]	; (8005b98 <SystemInit+0x104>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a30      	ldr	r2, [pc, #192]	; (8005b98 <SystemInit+0x104>)
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005adc:	4b2e      	ldr	r3, [pc, #184]	; (8005b98 <SystemInit+0x104>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005ae2:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <SystemInit+0x104>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	492c      	ldr	r1, [pc, #176]	; (8005b98 <SystemInit+0x104>)
 8005ae8:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <SystemInit+0x108>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005aee:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <SystemInit+0x100>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <SystemInit+0x100>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 030f 	bic.w	r3, r3, #15
 8005b02:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <SystemInit+0x100>)
 8005b04:	f043 0307 	orr.w	r3, r3, #7
 8005b08:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <SystemInit+0x104>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005b10:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <SystemInit+0x104>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005b16:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <SystemInit+0x104>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005b1c:	4b1e      	ldr	r3, [pc, #120]	; (8005b98 <SystemInit+0x104>)
 8005b1e:	4a20      	ldr	r2, [pc, #128]	; (8005ba0 <SystemInit+0x10c>)
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005b22:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <SystemInit+0x104>)
 8005b24:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <SystemInit+0x110>)
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005b28:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <SystemInit+0x104>)
 8005b2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <SystemInit+0x114>)
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <SystemInit+0x104>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005b34:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <SystemInit+0x104>)
 8005b36:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <SystemInit+0x114>)
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005b3a:	4b17      	ldr	r3, [pc, #92]	; (8005b98 <SystemInit+0x104>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005b40:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <SystemInit+0x104>)
 8005b42:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <SystemInit+0x114>)
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <SystemInit+0x104>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005b4c:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <SystemInit+0x104>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <SystemInit+0x104>)
 8005b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <SystemInit+0x104>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <SystemInit+0x118>)
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <SystemInit+0x118>)
 8005b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b68:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <SystemInit+0x11c>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4b11      	ldr	r3, [pc, #68]	; (8005bb4 <SystemInit+0x120>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b76:	d202      	bcs.n	8005b7e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <SystemInit+0x124>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <SystemInit+0x128>)
 8005b80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005b84:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	e000ed00 	.word	0xe000ed00
 8005b94:	52002000 	.word	0x52002000
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005ba0:	02020200 	.word	0x02020200
 8005ba4:	01ff0000 	.word	0x01ff0000
 8005ba8:	01010280 	.word	0x01010280
 8005bac:	580000c0 	.word	0x580000c0
 8005bb0:	5c001000 	.word	0x5c001000
 8005bb4:	ffff0000 	.word	0xffff0000
 8005bb8:	51008108 	.word	0x51008108
 8005bbc:	52004000 	.word	0x52004000

08005bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8005bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bca:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8005bcc:	bf00      	nop
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <main+0xec>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <main+0x24>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	1e5a      	subs	r2, r3, #1
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dcf4      	bgt.n	8005bce <main+0xe>
	if ( timeout < 0 )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da01      	bge.n	8005bee <main+0x2e>
	{
		Error_Handler();
 8005bea:	f000 fbeb 	bl	80063c4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005bee:	f001 fb69 	bl	80072c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005bf2:	f000 f863 	bl	8005cbc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005bf6:	f000 f8e5 	bl	8005dc4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8005bfa:	4b2c      	ldr	r3, [pc, #176]	; (8005cac <main+0xec>)
 8005bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c00:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <main+0xec>)
 8005c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c0a:	4b28      	ldr	r3, [pc, #160]	; (8005cac <main+0xec>)
 8005c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f004 fd7f 	bl	800a71c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8005c1e:	2100      	movs	r1, #0
 8005c20:	2000      	movs	r0, #0
 8005c22:	f004 fd95 	bl	800a750 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8005c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c2a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8005c2c:	bf00      	nop
 8005c2e:	4b1f      	ldr	r3, [pc, #124]	; (8005cac <main+0xec>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <main+0x84>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dcf4      	bgt.n	8005c2e <main+0x6e>
	if ( timeout < 0 )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da01      	bge.n	8005c4e <main+0x8e>
	{
		Error_Handler();
 8005c4a:	f000 fbbb 	bl	80063c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c4e:	f000 fa6d 	bl	800612c <MX_GPIO_Init>
  MX_ETH_Init();
 8005c52:	f000 f8e9 	bl	8005e28 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8005c56:	f000 f9c1 	bl	8005fdc <MX_USART3_UART_Init>
  MX_DMA_Init();
 8005c5a:	f000 fa3f 	bl	80060dc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005c5e:	f000 fa0b 	bl	8006078 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8005c62:	f000 f92d 	bl	8005ec0 <MX_SPI3_Init>
  MX_TIM7_Init();
 8005c66:	f000 f983 	bl	8005f70 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8005c6a:	f000 fcb3 	bl	80065d4 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f000 ffbd 	bl	8006bee <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8005c74:	2000      	movs	r0, #0
 8005c76:	f000 ffa9 	bl	8006bcc <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8005c7a:	f001 fba9 	bl	80073d0 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <main+0xf0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2bc8      	cmp	r3, #200	; 0xc8
 8005c88:	d9f7      	bls.n	8005c7a <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8005c8a:	f001 fba1 	bl	80073d0 <HAL_GetTick>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <main+0xf0>)
 8005c92:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c98:	4806      	ldr	r0, [pc, #24]	; (8005cb4 <main+0xf4>)
 8005c9a:	f004 fd24 	bl	800a6e6 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8005c9e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8005ca2:	4905      	ldr	r1, [pc, #20]	; (8005cb8 <main+0xf8>)
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fb fb91 	bl	80013cc <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8005caa:	e7e6      	b.n	8005c7a <main+0xba>
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	24000e98 	.word	0x24000e98
 8005cb4:	58020400 	.word	0x58020400
 8005cb8:	240009c0 	.word	0x240009c0

08005cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b09c      	sub	sp, #112	; 0x70
 8005cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc6:	224c      	movs	r2, #76	; 0x4c
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f00a f9bc 	bl	8010048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f00a f9b6 	bl	8010048 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005cdc:	2004      	movs	r0, #4
 8005cde:	f004 fe93 	bl	800aa08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <SystemClock_Config+0xfc>)
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	4a33      	ldr	r2, [pc, #204]	; (8005db8 <SystemClock_Config+0xfc>)
 8005cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cf0:	6193      	str	r3, [r2, #24]
 8005cf2:	4b31      	ldr	r3, [pc, #196]	; (8005db8 <SystemClock_Config+0xfc>)
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	4b2f      	ldr	r3, [pc, #188]	; (8005dbc <SystemClock_Config+0x100>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <SystemClock_Config+0x100>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d08:	4b2c      	ldr	r3, [pc, #176]	; (8005dbc <SystemClock_Config+0x100>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005d14:	bf00      	nop
 8005d16:	4b28      	ldr	r3, [pc, #160]	; (8005db8 <SystemClock_Config+0xfc>)
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d22:	d1f8      	bne.n	8005d16 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005d24:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <SystemClock_Config+0x104>)
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	f023 0303 	bic.w	r3, r3, #3
 8005d2c:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <SystemClock_Config+0x104>)
 8005d2e:	f043 0302 	orr.w	r3, r3, #2
 8005d32:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005d38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d42:	2302      	movs	r3, #2
 8005d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005d46:	2301      	movs	r3, #1
 8005d48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8005d4a:	2378      	movs	r3, #120	; 0x78
 8005d4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005d52:	2302      	movs	r3, #2
 8005d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d56:	2302      	movs	r3, #2
 8005d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f004 feb6 	bl	800aadc <HAL_RCC_OscConfig>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8005d76:	f000 fb25 	bl	80063c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d7a:	233f      	movs	r3, #63	; 0x3f
 8005d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005d86:	2308      	movs	r3, #8
 8005d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005d8a:	2340      	movs	r3, #64	; 0x40
 8005d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005d98:	2340      	movs	r3, #64	; 0x40
 8005d9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005d9c:	1d3b      	adds	r3, r7, #4
 8005d9e:	2104      	movs	r1, #4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f005 fac9 	bl	800b338 <HAL_RCC_ClockConfig>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8005dac:	f000 fb0a 	bl	80063c4 <Error_Handler>
  }
}
 8005db0:	bf00      	nop
 8005db2:	3770      	adds	r7, #112	; 0x70
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	58024800 	.word	0x58024800
 8005dbc:	58000400 	.word	0x58000400
 8005dc0:	58024400 	.word	0x58024400

08005dc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b0b0      	sub	sp, #192	; 0xc0
 8005dc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	22bc      	movs	r2, #188	; 0xbc
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f00a f939 	bl	8010048 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8005dd6:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8005dda:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8005de0:	2318      	movs	r3, #24
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005de4:	2302      	movs	r3, #2
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8005de8:	2304      	movs	r3, #4
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8005dec:	2302      	movs	r3, #2
 8005dee:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8005df0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8005dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e02:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8005e04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e0c:	1d3b      	adds	r3, r7, #4
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f005 fe1e 	bl	800ba50 <HAL_RCCEx_PeriphCLKConfig>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8005e1a:	f000 fad3 	bl	80063c4 <Error_Handler>
  }
}
 8005e1e:	bf00      	nop
 8005e20:	37c0      	adds	r7, #192	; 0xc0
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <MX_ETH_Init+0x80>)
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <MX_ETH_Init+0x84>)
 8005e30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005e32:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <MX_ETH_Init+0x88>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <MX_ETH_Init+0x88>)
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8005e3e:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <MX_ETH_Init+0x88>)
 8005e40:	22e1      	movs	r2, #225	; 0xe1
 8005e42:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8005e44:	4b1a      	ldr	r3, [pc, #104]	; (8005eb0 <MX_ETH_Init+0x88>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8005e4a:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <MX_ETH_Init+0x88>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8005e50:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <MX_ETH_Init+0x88>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005e56:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <MX_ETH_Init+0x80>)
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <MX_ETH_Init+0x88>)
 8005e5a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005e5c:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <MX_ETH_Init+0x80>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005e62:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <MX_ETH_Init+0x80>)
 8005e64:	4a13      	ldr	r2, [pc, #76]	; (8005eb4 <MX_ETH_Init+0x8c>)
 8005e66:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <MX_ETH_Init+0x80>)
 8005e6a:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <MX_ETH_Init+0x90>)
 8005e6c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <MX_ETH_Init+0x80>)
 8005e70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005e74:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005e76:	480c      	ldr	r0, [pc, #48]	; (8005ea8 <MX_ETH_Init+0x80>)
 8005e78:	f003 fe30 	bl	8009adc <HAL_ETH_Init>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8005e82:	f000 fa9f 	bl	80063c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e86:	2238      	movs	r2, #56	; 0x38
 8005e88:	2100      	movs	r1, #0
 8005e8a:	480c      	ldr	r0, [pc, #48]	; (8005ebc <MX_ETH_Init+0x94>)
 8005e8c:	f00a f8dc 	bl	8010048 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <MX_ETH_Init+0x94>)
 8005e92:	2221      	movs	r2, #33	; 0x21
 8005e94:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005e96:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <MX_ETH_Init+0x94>)
 8005e98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005e9c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <MX_ETH_Init+0x94>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8005ea4:	bf00      	nop
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	240001b0 	.word	0x240001b0
 8005eac:	40028000 	.word	0x40028000
 8005eb0:	24000ea8 	.word	0x24000ea8
 8005eb4:	240000e8 	.word	0x240000e8
 8005eb8:	24000088 	.word	0x24000088
 8005ebc:	24000178 	.word	0x24000178

08005ec0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005ec4:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005ec6:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <MX_SPI3_Init+0xac>)
 8005ec8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005eca:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005ecc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005ed0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8005ed2:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005ed4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ed8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005edc:	2207      	movs	r2, #7
 8005ede:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ee0:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005eec:	4b1e      	ldr	r3, [pc, #120]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005eee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ef2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005ef4:	4b1c      	ldr	r3, [pc, #112]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005ef6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005efa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005efc:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f02:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f08:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8005f0e:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f1a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005f1c:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005f22:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005f34:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8005f3a:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005f40:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005f52:	4805      	ldr	r0, [pc, #20]	; (8005f68 <MX_SPI3_Init+0xa8>)
 8005f54:	f007 f8e4 	bl	800d120 <HAL_SPI_Init>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8005f5e:	f000 fa31 	bl	80063c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005f62:	bf00      	nop
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	24000260 	.word	0x24000260
 8005f6c:	40003c00 	.word	0x40003c00

08005f70 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <MX_TIM7_Init+0x64>)
 8005f82:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <MX_TIM7_Init+0x68>)
 8005f84:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <MX_TIM7_Init+0x64>)
 8005f88:	22ef      	movs	r2, #239	; 0xef
 8005f8a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <MX_TIM7_Init+0x64>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <MX_TIM7_Init+0x64>)
 8005f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f98:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <MX_TIM7_Init+0x64>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005fa0:	480c      	ldr	r0, [pc, #48]	; (8005fd4 <MX_TIM7_Init+0x64>)
 8005fa2:	f007 fc9e 	bl	800d8e2 <HAL_TIM_Base_Init>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005fac:	f000 fa0a 	bl	80063c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4805      	ldr	r0, [pc, #20]	; (8005fd4 <MX_TIM7_Init+0x64>)
 8005fbe:	f007 ff6f 	bl	800dea0 <HAL_TIMEx_MasterConfigSynchronization>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005fc8:	f000 f9fc 	bl	80063c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	240002e8 	.word	0x240002e8
 8005fd8:	40001400 	.word	0x40001400

08005fdc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005fe0:	4b22      	ldr	r3, [pc, #136]	; (800606c <MX_USART3_UART_Init+0x90>)
 8005fe2:	4a23      	ldr	r2, [pc, #140]	; (8006070 <MX_USART3_UART_Init+0x94>)
 8005fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8005fe6:	4b21      	ldr	r3, [pc, #132]	; (800606c <MX_USART3_UART_Init+0x90>)
 8005fe8:	4a22      	ldr	r2, [pc, #136]	; (8006074 <MX_USART3_UART_Init+0x98>)
 8005fea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fec:	4b1f      	ldr	r3, [pc, #124]	; (800606c <MX_USART3_UART_Init+0x90>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005ff2:	4b1e      	ldr	r3, [pc, #120]	; (800606c <MX_USART3_UART_Init+0x90>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	; (800606c <MX_USART3_UART_Init+0x90>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006000:	220c      	movs	r2, #12
 8006002:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006004:	4b19      	ldr	r3, [pc, #100]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006006:	2200      	movs	r2, #0
 8006008:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <MX_USART3_UART_Init+0x90>)
 800600c:	2200      	movs	r2, #0
 800600e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006010:	4b16      	ldr	r3, [pc, #88]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006012:	2200      	movs	r2, #0
 8006014:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006016:	4b15      	ldr	r3, [pc, #84]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006018:	2200      	movs	r2, #0
 800601a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800601c:	4b13      	ldr	r3, [pc, #76]	; (800606c <MX_USART3_UART_Init+0x90>)
 800601e:	2200      	movs	r2, #0
 8006020:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006022:	4812      	ldr	r0, [pc, #72]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006024:	f007 ffe8 	bl	800dff8 <HAL_UART_Init>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800602e:	f000 f9c9 	bl	80063c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006032:	2100      	movs	r1, #0
 8006034:	480d      	ldr	r0, [pc, #52]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006036:	f009 fc09 	bl	800f84c <HAL_UARTEx_SetTxFifoThreshold>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8006040:	f000 f9c0 	bl	80063c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006044:	2100      	movs	r1, #0
 8006046:	4809      	ldr	r0, [pc, #36]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006048:	f009 fc3e 	bl	800f8c8 <HAL_UARTEx_SetRxFifoThreshold>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8006052:	f000 f9b7 	bl	80063c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006056:	4805      	ldr	r0, [pc, #20]	; (800606c <MX_USART3_UART_Init+0x90>)
 8006058:	f009 fbbf 	bl	800f7da <HAL_UARTEx_DisableFifoMode>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8006062:	f000 f9af 	bl	80063c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	24000334 	.word	0x24000334
 8006070:	40004800 	.word	0x40004800
 8006074:	0005dc00 	.word	0x0005dc00

08006078 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800607c:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800607e:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006080:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006082:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006084:	2209      	movs	r2, #9
 8006086:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006088:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800608a:	2202      	movs	r2, #2
 800608c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800608e:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006090:	2200      	movs	r2, #0
 8006092:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006094:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006096:	2202      	movs	r2, #2
 8006098:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800609a:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800609c:	2200      	movs	r2, #0
 800609e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80060a0:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80060ac:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80060c0:	f004 fb5a 	bl	800a778 <HAL_PCD_Init>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80060ca:	f000 f97b 	bl	80063c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	240004b4 	.word	0x240004b4
 80060d8:	40080000 	.word	0x40080000

080060dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80060e2:	4b11      	ldr	r3, [pc, #68]	; (8006128 <MX_DMA_Init+0x4c>)
 80060e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060e8:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <MX_DMA_Init+0x4c>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <MX_DMA_Init+0x4c>)
 80060f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006100:	2200      	movs	r2, #0
 8006102:	2100      	movs	r1, #0
 8006104:	200c      	movs	r0, #12
 8006106:	f001 fa8e 	bl	8007626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800610a:	200c      	movs	r0, #12
 800610c:	f001 faa5 	bl	800765a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006110:	2200      	movs	r2, #0
 8006112:	2100      	movs	r1, #0
 8006114:	200f      	movs	r0, #15
 8006116:	f001 fa86 	bl	8007626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800611a:	200f      	movs	r0, #15
 800611c:	f001 fa9d 	bl	800765a <HAL_NVIC_EnableIRQ>

}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	58024400 	.word	0x58024400

0800612c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08e      	sub	sp, #56	; 0x38
 8006130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	605a      	str	r2, [r3, #4]
 800613c:	609a      	str	r2, [r3, #8]
 800613e:	60da      	str	r2, [r3, #12]
 8006140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006142:	4b8a      	ldr	r3, [pc, #552]	; (800636c <MX_GPIO_Init+0x240>)
 8006144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006148:	4a88      	ldr	r2, [pc, #544]	; (800636c <MX_GPIO_Init+0x240>)
 800614a:	f043 0304 	orr.w	r3, r3, #4
 800614e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006152:	4b86      	ldr	r3, [pc, #536]	; (800636c <MX_GPIO_Init+0x240>)
 8006154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006160:	4b82      	ldr	r3, [pc, #520]	; (800636c <MX_GPIO_Init+0x240>)
 8006162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006166:	4a81      	ldr	r2, [pc, #516]	; (800636c <MX_GPIO_Init+0x240>)
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006170:	4b7e      	ldr	r3, [pc, #504]	; (800636c <MX_GPIO_Init+0x240>)
 8006172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800617e:	4b7b      	ldr	r3, [pc, #492]	; (800636c <MX_GPIO_Init+0x240>)
 8006180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006184:	4a79      	ldr	r2, [pc, #484]	; (800636c <MX_GPIO_Init+0x240>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800618e:	4b77      	ldr	r3, [pc, #476]	; (800636c <MX_GPIO_Init+0x240>)
 8006190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800619c:	4b73      	ldr	r3, [pc, #460]	; (800636c <MX_GPIO_Init+0x240>)
 800619e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061a2:	4a72      	ldr	r2, [pc, #456]	; (800636c <MX_GPIO_Init+0x240>)
 80061a4:	f043 0302 	orr.w	r3, r3, #2
 80061a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061ac:	4b6f      	ldr	r3, [pc, #444]	; (800636c <MX_GPIO_Init+0x240>)
 80061ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80061ba:	4b6c      	ldr	r3, [pc, #432]	; (800636c <MX_GPIO_Init+0x240>)
 80061bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061c0:	4a6a      	ldr	r2, [pc, #424]	; (800636c <MX_GPIO_Init+0x240>)
 80061c2:	f043 0320 	orr.w	r3, r3, #32
 80061c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061ca:	4b68      	ldr	r3, [pc, #416]	; (800636c <MX_GPIO_Init+0x240>)
 80061cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061d8:	4b64      	ldr	r3, [pc, #400]	; (800636c <MX_GPIO_Init+0x240>)
 80061da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061de:	4a63      	ldr	r2, [pc, #396]	; (800636c <MX_GPIO_Init+0x240>)
 80061e0:	f043 0310 	orr.w	r3, r3, #16
 80061e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061e8:	4b60      	ldr	r3, [pc, #384]	; (800636c <MX_GPIO_Init+0x240>)
 80061ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061f6:	4b5d      	ldr	r3, [pc, #372]	; (800636c <MX_GPIO_Init+0x240>)
 80061f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061fc:	4a5b      	ldr	r2, [pc, #364]	; (800636c <MX_GPIO_Init+0x240>)
 80061fe:	f043 0308 	orr.w	r3, r3, #8
 8006202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006206:	4b59      	ldr	r3, [pc, #356]	; (800636c <MX_GPIO_Init+0x240>)
 8006208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006214:	4b55      	ldr	r3, [pc, #340]	; (800636c <MX_GPIO_Init+0x240>)
 8006216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800621a:	4a54      	ldr	r2, [pc, #336]	; (800636c <MX_GPIO_Init+0x240>)
 800621c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006224:	4b51      	ldr	r3, [pc, #324]	; (800636c <MX_GPIO_Init+0x240>)
 8006226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	607b      	str	r3, [r7, #4]
 8006230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8006232:	2201      	movs	r2, #1
 8006234:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8006238:	484d      	ldr	r0, [pc, #308]	; (8006370 <MX_GPIO_Init+0x244>)
 800623a:	f004 fa3b 	bl	800a6b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 800623e:	2200      	movs	r2, #0
 8006240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006244:	484a      	ldr	r0, [pc, #296]	; (8006370 <MX_GPIO_Init+0x244>)
 8006246:	f004 fa35 	bl	800a6b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800624a:	2200      	movs	r2, #0
 800624c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006250:	4848      	ldr	r0, [pc, #288]	; (8006374 <MX_GPIO_Init+0x248>)
 8006252:	f004 fa2f 	bl	800a6b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006256:	2200      	movs	r2, #0
 8006258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800625c:	4846      	ldr	r0, [pc, #280]	; (8006378 <MX_GPIO_Init+0x24c>)
 800625e:	f004 fa29 	bl	800a6b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006262:	2201      	movs	r2, #1
 8006264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006268:	4844      	ldr	r0, [pc, #272]	; (800637c <MX_GPIO_Init+0x250>)
 800626a:	f004 fa23 	bl	800a6b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 800626e:	230d      	movs	r3, #13
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006272:	2300      	movs	r3, #0
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006276:	2300      	movs	r3, #0
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800627a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800627e:	4619      	mov	r1, r3
 8006280:	483f      	ldr	r0, [pc, #252]	; (8006380 <MX_GPIO_Init+0x254>)
 8006282:	f004 f84f 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8006286:	2308      	movs	r3, #8
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800628a:	2300      	movs	r3, #0
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628e:	2300      	movs	r3, #0
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006296:	4619      	mov	r1, r3
 8006298:	483a      	ldr	r0, [pc, #232]	; (8006384 <MX_GPIO_Init+0x258>)
 800629a:	f004 f843 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 800629e:	2302      	movs	r3, #2
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062a2:	2300      	movs	r3, #0
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80062aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ae:	4619      	mov	r1, r3
 80062b0:	4830      	ldr	r0, [pc, #192]	; (8006374 <MX_GPIO_Init+0x248>)
 80062b2:	f004 f837 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 80062b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062bc:	2300      	movs	r3, #0
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80062c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062c8:	4619      	mov	r1, r3
 80062ca:	482f      	ldr	r0, [pc, #188]	; (8006388 <MX_GPIO_Init+0x25c>)
 80062cc:	f004 f82a 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80062d0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062d6:	2301      	movs	r3, #1
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062de:	2300      	movs	r3, #0
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e6:	4619      	mov	r1, r3
 80062e8:	4821      	ldr	r0, [pc, #132]	; (8006370 <MX_GPIO_Init+0x244>)
 80062ea:	f004 f81b 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80062ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062f4:	2301      	movs	r3, #1
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062fc:	2300      	movs	r3, #0
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006304:	4619      	mov	r1, r3
 8006306:	481b      	ldr	r0, [pc, #108]	; (8006374 <MX_GPIO_Init+0x248>)
 8006308:	f004 f80c 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800630c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006312:	2301      	movs	r3, #1
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006316:	2300      	movs	r3, #0
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800631a:	2300      	movs	r3, #0
 800631c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800631e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006322:	4619      	mov	r1, r3
 8006324:	4814      	ldr	r0, [pc, #80]	; (8006378 <MX_GPIO_Init+0x24c>)
 8006326:	f003 fffd 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800632e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006334:	2300      	movs	r3, #0
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800633c:	4619      	mov	r1, r3
 800633e:	480f      	ldr	r0, [pc, #60]	; (800637c <MX_GPIO_Init+0x250>)
 8006340:	f003 fff0 	bl	800a324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800634a:	2301      	movs	r3, #1
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634e:	2300      	movs	r3, #0
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006352:	2300      	movs	r3, #0
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800635a:	4619      	mov	r1, r3
 800635c:	4807      	ldr	r0, [pc, #28]	; (800637c <MX_GPIO_Init+0x250>)
 800635e:	f003 ffe1 	bl	800a324 <HAL_GPIO_Init>

}
 8006362:	bf00      	nop
 8006364:	3738      	adds	r7, #56	; 0x38
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400
 8006370:	58021000 	.word	0x58021000
 8006374:	58020400 	.word	0x58020400
 8006378:	58020c00 	.word	0x58020c00
 800637c:	58021800 	.word	0x58021800
 8006380:	58020800 	.word	0x58020800
 8006384:	58020000 	.word	0x58020000
 8006388:	58021400 	.word	0x58021400

0800638c <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800638c:	b4b0      	push	{r4, r5, r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d10a      	bne.n	80063b2 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 800639c:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80063a6:	1854      	adds	r4, r2, r1
 80063a8:	f143 0500 	adc.w	r5, r3, #0
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80063ae:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bcb0      	pop	{r4, r5, r7}
 80063ba:	4770      	bx	lr
 80063bc:	240002e8 	.word	0x240002e8
 80063c0:	24000ea0 	.word	0x24000ea0

080063c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80063c8:	b672      	cpsid	i
}
 80063ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80063cc:	e7fe      	b.n	80063cc <Error_Handler+0x8>
	...

080063d0 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80063d4:	2200      	movs	r2, #0
 80063d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063da:	4802      	ldr	r0, [pc, #8]	; (80063e4 <ST7735_Select+0x14>)
 80063dc:	f004 f96a 	bl	800a6b4 <HAL_GPIO_WritePin>
}
 80063e0:	bf00      	nop
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	58021000 	.word	0x58021000

080063e8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80063ec:	2201      	movs	r2, #1
 80063ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063f2:	4802      	ldr	r0, [pc, #8]	; (80063fc <ST7735_Unselect+0x14>)
 80063f4:	f004 f95e 	bl	800a6b4 <HAL_GPIO_WritePin>
}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	58021000 	.word	0x58021000

08006400 <ST7735_Select1>:
static void ST7735_Select1() {
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800640a:	4802      	ldr	r0, [pc, #8]	; (8006414 <ST7735_Select1+0x14>)
 800640c:	f004 f952 	bl	800a6b4 <HAL_GPIO_WritePin>
}
 8006410:	bf00      	nop
 8006412:	bd80      	pop	{r7, pc}
 8006414:	58021000 	.word	0x58021000

08006418 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 800641c:	2201      	movs	r2, #1
 800641e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006422:	4802      	ldr	r0, [pc, #8]	; (800642c <ST7735_Unselect1+0x14>)
 8006424:	f004 f946 	bl	800a6b4 <HAL_GPIO_WritePin>
}
 8006428:	bf00      	nop
 800642a:	bd80      	pop	{r7, pc}
 800642c:	58021000 	.word	0x58021000

08006430 <ST7735_Reset>:

static void ST7735_Reset() {
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8006434:	2200      	movs	r2, #0
 8006436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800643a:	4807      	ldr	r0, [pc, #28]	; (8006458 <ST7735_Reset+0x28>)
 800643c:	f004 f93a 	bl	800a6b4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8006440:	2005      	movs	r0, #5
 8006442:	f000 ffd1 	bl	80073e8 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8006446:	2201      	movs	r2, #1
 8006448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800644c:	4802      	ldr	r0, [pc, #8]	; (8006458 <ST7735_Reset+0x28>)
 800644e:	f004 f931 	bl	800a6b4 <HAL_GPIO_WritePin>
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	58021000 	.word	0x58021000

0800645c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8006466:	2200      	movs	r2, #0
 8006468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800646c:	4806      	ldr	r0, [pc, #24]	; (8006488 <ST7735_WriteCommand+0x2c>)
 800646e:	f004 f921 	bl	800a6b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006472:	1df9      	adds	r1, r7, #7
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
 8006478:	2201      	movs	r2, #1
 800647a:	4804      	ldr	r0, [pc, #16]	; (800648c <ST7735_WriteCommand+0x30>)
 800647c:	f006 ff56 	bl	800d32c <HAL_SPI_Transmit>
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	58021800 	.word	0x58021800
 800648c:	24000260 	.word	0x24000260

08006490 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800649a:	2201      	movs	r2, #1
 800649c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064a0:	4807      	ldr	r0, [pc, #28]	; (80064c0 <ST7735_WriteData+0x30>)
 80064a2:	f004 f907 	bl	800a6b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	f04f 33ff 	mov.w	r3, #4294967295
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4804      	ldr	r0, [pc, #16]	; (80064c4 <ST7735_WriteData+0x34>)
 80064b2:	f006 ff3b 	bl	800d32c <HAL_SPI_Transmit>
}
 80064b6:	bf00      	nop
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	58021800 	.word	0x58021800
 80064c4:	24000260 	.word	0x24000260

080064c8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 80064da:	e034      	b.n	8006546 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ffb7 	bl	800645c <ST7735_WriteCommand>

		numArgs = *addr++;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 80064f8:	7abb      	ldrb	r3, [r7, #10]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8006502:	7abb      	ldrb	r3, [r7, #10]
 8006504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006508:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 800650a:	7abb      	ldrb	r3, [r7, #10]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8006510:	7abb      	ldrb	r3, [r7, #10]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ffbb 	bl	8006490 <ST7735_WriteData>
			addr += numArgs;
 800651a:	7abb      	ldrb	r3, [r7, #10]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4413      	add	r3, r2
 8006520:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8006522:	89bb      	ldrh	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8006532:	89bb      	ldrh	r3, [r7, #12]
 8006534:	2bff      	cmp	r3, #255	; 0xff
 8006536:	d102      	bne.n	800653e <ST7735_ExecuteCommandList+0x76>
 8006538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800653c:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 800653e:	89bb      	ldrh	r3, [r7, #12]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 ff51 	bl	80073e8 <HAL_Delay>
	while(numCommands--) {
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	1e5a      	subs	r2, r3, #1
 800654a:	73fa      	strb	r2, [r7, #15]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1c5      	bne.n	80064dc <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800655a:	b590      	push	{r4, r7, lr}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	4604      	mov	r4, r0
 8006562:	4608      	mov	r0, r1
 8006564:	4611      	mov	r1, r2
 8006566:	461a      	mov	r2, r3
 8006568:	4623      	mov	r3, r4
 800656a:	71fb      	strb	r3, [r7, #7]
 800656c:	4603      	mov	r3, r0
 800656e:	71bb      	strb	r3, [r7, #6]
 8006570:	460b      	mov	r3, r1
 8006572:	717b      	strb	r3, [r7, #5]
 8006574:	4613      	mov	r3, r2
 8006576:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006578:	202a      	movs	r0, #42	; 0x2a
 800657a:	f7ff ff6f 	bl	800645c <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800657e:	2300      	movs	r3, #0
 8006580:	733b      	strb	r3, [r7, #12]
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	3302      	adds	r3, #2
 8006586:	b2db      	uxtb	r3, r3
 8006588:	737b      	strb	r3, [r7, #13]
 800658a:	2300      	movs	r3, #0
 800658c:	73bb      	strb	r3, [r7, #14]
 800658e:	797b      	ldrb	r3, [r7, #5]
 8006590:	3302      	adds	r3, #2
 8006592:	b2db      	uxtb	r3, r3
 8006594:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006596:	f107 030c 	add.w	r3, r7, #12
 800659a:	2104      	movs	r1, #4
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff ff77 	bl	8006490 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 80065a2:	202b      	movs	r0, #43	; 0x2b
 80065a4:	f7ff ff5a 	bl	800645c <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 80065a8:	79bb      	ldrb	r3, [r7, #6]
 80065aa:	3301      	adds	r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 80065b0:	793b      	ldrb	r3, [r7, #4]
 80065b2:	3301      	adds	r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80065b8:	f107 030c 	add.w	r3, r7, #12
 80065bc:	2104      	movs	r1, #4
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff ff66 	bl	8006490 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 80065c4:	202c      	movs	r0, #44	; 0x2c
 80065c6:	f7ff ff49 	bl	800645c <ST7735_WriteCommand>
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd90      	pop	{r4, r7, pc}
	...

080065d4 <ST7735_Init>:

void ST7735_Init() {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	ST7735_Select();
 80065d8:	f7ff fefa 	bl	80063d0 <ST7735_Select>
	ST7735_Select1();
 80065dc:	f7ff ff10 	bl	8006400 <ST7735_Select1>
	ST7735_Reset();
 80065e0:	f7ff ff26 	bl	8006430 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 80065e4:	4807      	ldr	r0, [pc, #28]	; (8006604 <ST7735_Init+0x30>)
 80065e6:	f7ff ff6f 	bl	80064c8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 80065ea:	4807      	ldr	r0, [pc, #28]	; (8006608 <ST7735_Init+0x34>)
 80065ec:	f7ff ff6c 	bl	80064c8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 80065f0:	4806      	ldr	r0, [pc, #24]	; (800660c <ST7735_Init+0x38>)
 80065f2:	f7ff ff69 	bl	80064c8 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 80065f6:	f7ff fef7 	bl	80063e8 <ST7735_Unselect>
	ST7735_Unselect1();
 80065fa:	f7ff ff0d 	bl	8006418 <ST7735_Unselect1>
}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	08012238 	.word	0x08012238
 8006608:	08012274 	.word	0x08012274
 800660c:	08012284 	.word	0x08012284

08006610 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006610:	b082      	sub	sp, #8
 8006612:	b590      	push	{r4, r7, lr}
 8006614:	b089      	sub	sp, #36	; 0x24
 8006616:	af00      	add	r7, sp, #0
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
 800661a:	4603      	mov	r3, r0
 800661c:	80fb      	strh	r3, [r7, #6]
 800661e:	460b      	mov	r3, r1
 8006620:	80bb      	strh	r3, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	b2d8      	uxtb	r0, r3
 800662a:	88bb      	ldrh	r3, [r7, #4]
 800662c:	b2d9      	uxtb	r1, r3
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006636:	4413      	add	r3, r2
 8006638:	b2db      	uxtb	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b2dc      	uxtb	r4, r3
 800663e:	88bb      	ldrh	r3, [r7, #4]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006646:	4413      	add	r3, r2
 8006648:	b2db      	uxtb	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	4622      	mov	r2, r4
 8006650:	f7ff ff83 	bl	800655a <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e043      	b.n	80066e2 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 800665a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	3b20      	subs	r3, #32
 8006660:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4619      	mov	r1, r3
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	440b      	add	r3, r1
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8006676:	2300      	movs	r3, #0
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	e029      	b.n	80066d0 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00e      	beq.n	80066aa <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 800668c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	b29b      	uxth	r3, r3
 8006692:	b2db      	uxtb	r3, r3
 8006694:	743b      	strb	r3, [r7, #16]
 8006696:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 800669c:	f107 0310 	add.w	r3, r7, #16
 80066a0:	2102      	movs	r1, #2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fef4 	bl	8006490 <ST7735_WriteData>
 80066a8:	e00f      	b.n	80066ca <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80066aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	733b      	strb	r3, [r7, #12]
 80066b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 80066be:	f107 030c 	add.w	r3, r7, #12
 80066c2:	2102      	movs	r1, #2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fee3 	bl	8006490 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	3301      	adds	r3, #1
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80066d4:	461a      	mov	r2, r3
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	4293      	cmp	r3, r2
 80066da:	d3cf      	bcc.n	800667c <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	3301      	adds	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80066e6:	461a      	mov	r2, r3
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d3b5      	bcc.n	800665a <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	3724      	adds	r7, #36	; 0x24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80066fa:	b002      	add	sp, #8
 80066fc:	4770      	bx	lr

080066fe <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80066fe:	b082      	sub	sp, #8
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af04      	add	r7, sp, #16
 8006706:	603a      	str	r2, [r7, #0]
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	4603      	mov	r3, r0
 800670c:	80fb      	strh	r3, [r7, #6]
 800670e:	460b      	mov	r3, r1
 8006710:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8006712:	f7ff fe5d 	bl	80063d0 <ST7735_Select>

	while(*str) {
 8006716:	e02d      	b.n	8006774 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	7d3a      	ldrb	r2, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	2b7f      	cmp	r3, #127	; 0x7f
 8006720:	dd13      	ble.n	800674a <ST7735_WriteString+0x4c>
			x = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006726:	7d7b      	ldrb	r3, [r7, #21]
 8006728:	b29a      	uxth	r2, r3
 800672a:	88bb      	ldrh	r3, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006730:	88bb      	ldrh	r3, [r7, #4]
 8006732:	7d7a      	ldrb	r2, [r7, #21]
 8006734:	4413      	add	r3, r2
 8006736:	2b7f      	cmp	r3, #127	; 0x7f
 8006738:	dc21      	bgt.n	800677e <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b20      	cmp	r3, #32
 8006740:	d103      	bne.n	800674a <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	603b      	str	r3, [r7, #0]
				continue;
 8006748:	e014      	b.n	8006774 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	88b9      	ldrh	r1, [r7, #4]
 8006750:	88f8      	ldrh	r0, [r7, #6]
 8006752:	8c3b      	ldrh	r3, [r7, #32]
 8006754:	9302      	str	r3, [sp, #8]
 8006756:	8bbb      	ldrh	r3, [r7, #28]
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f7ff ff56 	bl	8006610 <ST7735_WriteChar>
		x += font.width;
 8006764:	7d3b      	ldrb	r3, [r7, #20]
 8006766:	b29a      	uxth	r2, r3
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	4413      	add	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
		str++;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	3301      	adds	r3, #1
 8006772:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1cd      	bne.n	8006718 <ST7735_WriteString+0x1a>
 800677c:	e000      	b.n	8006780 <ST7735_WriteString+0x82>
				break;
 800677e:	bf00      	nop
	}

	ST7735_Unselect();
 8006780:	f7ff fe32 	bl	80063e8 <ST7735_Unselect>
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800678e:	b002      	add	sp, #8
 8006790:	4770      	bx	lr

08006792 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006792:	b082      	sub	sp, #8
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af04      	add	r7, sp, #16
 800679a:	603a      	str	r2, [r7, #0]
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	4603      	mov	r3, r0
 80067a0:	80fb      	strh	r3, [r7, #6]
 80067a2:	460b      	mov	r3, r1
 80067a4:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 80067a6:	f7ff fe2b 	bl	8006400 <ST7735_Select1>

	while(*str) {
 80067aa:	e02d      	b.n	8006808 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	7d3a      	ldrb	r2, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	2b7f      	cmp	r3, #127	; 0x7f
 80067b4:	dd13      	ble.n	80067de <ST7735_WriteString1+0x4c>
			x = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80067ba:	7d7b      	ldrb	r3, [r7, #21]
 80067bc:	b29a      	uxth	r2, r3
 80067be:	88bb      	ldrh	r3, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80067c4:	88bb      	ldrh	r3, [r7, #4]
 80067c6:	7d7a      	ldrb	r2, [r7, #21]
 80067c8:	4413      	add	r3, r2
 80067ca:	2b7f      	cmp	r3, #127	; 0x7f
 80067cc:	dc21      	bgt.n	8006812 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d103      	bne.n	80067de <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	603b      	str	r3, [r7, #0]
				continue;
 80067dc:	e014      	b.n	8006808 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	88b9      	ldrh	r1, [r7, #4]
 80067e4:	88f8      	ldrh	r0, [r7, #6]
 80067e6:	8c3b      	ldrh	r3, [r7, #32]
 80067e8:	9302      	str	r3, [sp, #8]
 80067ea:	8bbb      	ldrh	r3, [r7, #28]
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f7ff ff0c 	bl	8006610 <ST7735_WriteChar>
		x += font.width;
 80067f8:	7d3b      	ldrb	r3, [r7, #20]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	4413      	add	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
		str++;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1cd      	bne.n	80067ac <ST7735_WriteString1+0x1a>
 8006810:	e000      	b.n	8006814 <ST7735_WriteString1+0x82>
				break;
 8006812:	bf00      	nop
	}

	ST7735_Unselect1();
 8006814:	f7ff fe00 	bl	8006418 <ST7735_Unselect1>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006822:	b002      	add	sp, #8
 8006824:	4770      	bx	lr

08006826 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8006826:	b082      	sub	sp, #8
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af04      	add	r7, sp, #16
 800682e:	603a      	str	r2, [r7, #0]
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	4603      	mov	r3, r0
 8006834:	80fb      	strh	r3, [r7, #6]
 8006836:	460b      	mov	r3, r1
 8006838:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 800683a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8006842:	f7ff fdc5 	bl	80063d0 <ST7735_Select>
 8006846:	e034      	b.n	80068b2 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8006848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800684c:	2b01      	cmp	r3, #1
 800684e:	d130      	bne.n	80068b2 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8006850:	f7ff fdd6 	bl	8006400 <ST7735_Select1>

	}


	while(*str) {
 8006854:	e02d      	b.n	80068b2 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	7d3a      	ldrb	r2, [r7, #20]
 800685a:	4413      	add	r3, r2
 800685c:	2b7f      	cmp	r3, #127	; 0x7f
 800685e:	dd13      	ble.n	8006888 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006864:	7d7b      	ldrb	r3, [r7, #21]
 8006866:	b29a      	uxth	r2, r3
 8006868:	88bb      	ldrh	r3, [r7, #4]
 800686a:	4413      	add	r3, r2
 800686c:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	7d7a      	ldrb	r2, [r7, #21]
 8006872:	4413      	add	r3, r2
 8006874:	2b7f      	cmp	r3, #127	; 0x7f
 8006876:	dc21      	bgt.n	80068bc <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b20      	cmp	r3, #32
 800687e:	d103      	bne.n	8006888 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	603b      	str	r3, [r7, #0]
				continue;
 8006886:	e014      	b.n	80068b2 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	88b9      	ldrh	r1, [r7, #4]
 800688e:	88f8      	ldrh	r0, [r7, #6]
 8006890:	8c3b      	ldrh	r3, [r7, #32]
 8006892:	9302      	str	r3, [sp, #8]
 8006894:	8bbb      	ldrh	r3, [r7, #28]
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f7ff feb7 	bl	8006610 <ST7735_WriteChar>
		x += font.width;
 80068a2:	7d3b      	ldrb	r3, [r7, #20]
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	4413      	add	r3, r2
 80068aa:	80fb      	strh	r3, [r7, #6]
		str++;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	603b      	str	r3, [r7, #0]
	while(*str) {
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1cd      	bne.n	8006856 <ST7735_WriteStringNSS+0x30>
 80068ba:	e000      	b.n	80068be <ST7735_WriteStringNSS+0x98>
				break;
 80068bc:	bf00      	nop
	}
	if(NSS == 0){
 80068be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 80068c6:	f7ff fd8f 	bl	80063e8 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 80068ca:	e005      	b.n	80068d8 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 80068cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 80068d4:	f7ff fda0 	bl	8006418 <ST7735_Unselect1>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e2:	b002      	add	sp, #8
 80068e4:	4770      	bx	lr
	...

080068e8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4604      	mov	r4, r0
 80068f0:	4608      	mov	r0, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	461a      	mov	r2, r3
 80068f6:	4623      	mov	r3, r4
 80068f8:	80fb      	strh	r3, [r7, #6]
 80068fa:	4603      	mov	r3, r0
 80068fc:	80bb      	strh	r3, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	807b      	strh	r3, [r7, #2]
 8006902:	4613      	mov	r3, r2
 8006904:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2b7f      	cmp	r3, #127	; 0x7f
 800690a:	d858      	bhi.n	80069be <ST7735_FillRectangle+0xd6>
 800690c:	88bb      	ldrh	r3, [r7, #4]
 800690e:	2b7f      	cmp	r3, #127	; 0x7f
 8006910:	d855      	bhi.n	80069be <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006912:	88fa      	ldrh	r2, [r7, #6]
 8006914:	887b      	ldrh	r3, [r7, #2]
 8006916:	4413      	add	r3, r2
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	dd03      	ble.n	8006924 <ST7735_FillRectangle+0x3c>
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006922:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006924:	88ba      	ldrh	r2, [r7, #4]
 8006926:	883b      	ldrh	r3, [r7, #0]
 8006928:	4413      	add	r3, r2
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	dd03      	ble.n	8006936 <ST7735_FillRectangle+0x4e>
 800692e:	88bb      	ldrh	r3, [r7, #4]
 8006930:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006934:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8006936:	f7ff fd4b 	bl	80063d0 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	b2d8      	uxtb	r0, r3
 800693e:	88bb      	ldrh	r3, [r7, #4]
 8006940:	b2d9      	uxtb	r1, r3
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	887b      	ldrh	r3, [r7, #2]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	4413      	add	r3, r2
 800694c:	b2db      	uxtb	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b2dc      	uxtb	r4, r3
 8006952:	88bb      	ldrh	r3, [r7, #4]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	883b      	ldrh	r3, [r7, #0]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4413      	add	r3, r2
 800695c:	b2db      	uxtb	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	4622      	mov	r2, r4
 8006964:	f7ff fdf9 	bl	800655a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006968:	8c3b      	ldrh	r3, [r7, #32]
 800696a:	0a1b      	lsrs	r3, r3, #8
 800696c:	b29b      	uxth	r3, r3
 800696e:	b2db      	uxtb	r3, r3
 8006970:	733b      	strb	r3, [r7, #12]
 8006972:	8c3b      	ldrh	r3, [r7, #32]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006978:	2201      	movs	r2, #1
 800697a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800697e:	4812      	ldr	r0, [pc, #72]	; (80069c8 <ST7735_FillRectangle+0xe0>)
 8006980:	f003 fe98 	bl	800a6b4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006984:	883b      	ldrh	r3, [r7, #0]
 8006986:	80bb      	strh	r3, [r7, #4]
 8006988:	e013      	b.n	80069b2 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 800698a:	887b      	ldrh	r3, [r7, #2]
 800698c:	80fb      	strh	r3, [r7, #6]
 800698e:	e00a      	b.n	80069a6 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006990:	f107 010c 	add.w	r1, r7, #12
 8006994:	f04f 33ff 	mov.w	r3, #4294967295
 8006998:	2202      	movs	r2, #2
 800699a:	480c      	ldr	r0, [pc, #48]	; (80069cc <ST7735_FillRectangle+0xe4>)
 800699c:	f006 fcc6 	bl	800d32c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	80fb      	strh	r3, [r7, #6]
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f1      	bne.n	8006990 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 80069ac:	88bb      	ldrh	r3, [r7, #4]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	80bb      	strh	r3, [r7, #4]
 80069b2:	88bb      	ldrh	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e8      	bne.n	800698a <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 80069b8:	f7ff fd16 	bl	80063e8 <ST7735_Unselect>
 80069bc:	e000      	b.n	80069c0 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80069be:	bf00      	nop
}
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	58021800 	.word	0x58021800
 80069cc:	24000260 	.word	0x24000260

080069d0 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	4611      	mov	r1, r2
 80069dc:	461a      	mov	r2, r3
 80069de:	4623      	mov	r3, r4
 80069e0:	80fb      	strh	r3, [r7, #6]
 80069e2:	4603      	mov	r3, r0
 80069e4:	80bb      	strh	r3, [r7, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	807b      	strh	r3, [r7, #2]
 80069ea:	4613      	mov	r3, r2
 80069ec:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b7f      	cmp	r3, #127	; 0x7f
 80069f2:	d858      	bhi.n	8006aa6 <ST7735_FillRectangle1+0xd6>
 80069f4:	88bb      	ldrh	r3, [r7, #4]
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d855      	bhi.n	8006aa6 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80069fa:	88fa      	ldrh	r2, [r7, #6]
 80069fc:	887b      	ldrh	r3, [r7, #2]
 80069fe:	4413      	add	r3, r2
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	dd03      	ble.n	8006a0c <ST7735_FillRectangle1+0x3c>
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006a0a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006a0c:	88ba      	ldrh	r2, [r7, #4]
 8006a0e:	883b      	ldrh	r3, [r7, #0]
 8006a10:	4413      	add	r3, r2
 8006a12:	2b80      	cmp	r3, #128	; 0x80
 8006a14:	dd03      	ble.n	8006a1e <ST7735_FillRectangle1+0x4e>
 8006a16:	88bb      	ldrh	r3, [r7, #4]
 8006a18:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006a1c:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8006a1e:	f7ff fcef 	bl	8006400 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	b2d8      	uxtb	r0, r3
 8006a26:	88bb      	ldrh	r3, [r7, #4]
 8006a28:	b2d9      	uxtb	r1, r3
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	887b      	ldrh	r3, [r7, #2]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b2dc      	uxtb	r4, r3
 8006a3a:	88bb      	ldrh	r3, [r7, #4]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	883b      	ldrh	r3, [r7, #0]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	4413      	add	r3, r2
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	f7ff fd85 	bl	800655a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006a50:	8c3b      	ldrh	r3, [r7, #32]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	733b      	strb	r3, [r7, #12]
 8006a5a:	8c3b      	ldrh	r3, [r7, #32]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006a60:	2201      	movs	r2, #1
 8006a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a66:	4812      	ldr	r0, [pc, #72]	; (8006ab0 <ST7735_FillRectangle1+0xe0>)
 8006a68:	f003 fe24 	bl	800a6b4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006a6c:	883b      	ldrh	r3, [r7, #0]
 8006a6e:	80bb      	strh	r3, [r7, #4]
 8006a70:	e013      	b.n	8006a9a <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8006a72:	887b      	ldrh	r3, [r7, #2]
 8006a74:	80fb      	strh	r3, [r7, #6]
 8006a76:	e00a      	b.n	8006a8e <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006a78:	f107 010c 	add.w	r1, r7, #12
 8006a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a80:	2202      	movs	r2, #2
 8006a82:	480c      	ldr	r0, [pc, #48]	; (8006ab4 <ST7735_FillRectangle1+0xe4>)
 8006a84:	f006 fc52 	bl	800d32c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006a88:	88fb      	ldrh	r3, [r7, #6]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	80fb      	strh	r3, [r7, #6]
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f1      	bne.n	8006a78 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8006a94:	88bb      	ldrh	r3, [r7, #4]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	80bb      	strh	r3, [r7, #4]
 8006a9a:	88bb      	ldrh	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e8      	bne.n	8006a72 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8006aa0:	f7ff fcba 	bl	8006418 <ST7735_Unselect1>
 8006aa4:	e000      	b.n	8006aa8 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006aa6:	bf00      	nop
}
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd90      	pop	{r4, r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	58021800 	.word	0x58021800
 8006ab4:	24000260 	.word	0x24000260

08006ab8 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	80fb      	strh	r3, [r7, #6]
 8006aca:	4603      	mov	r3, r0
 8006acc:	80bb      	strh	r3, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	807b      	strh	r3, [r7, #2]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8006ada:	d86e      	bhi.n	8006bba <ST7735_FillRectangleNSS+0x102>
 8006adc:	88bb      	ldrh	r3, [r7, #4]
 8006ade:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae0:	d86b      	bhi.n	8006bba <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	2b80      	cmp	r3, #128	; 0x80
 8006aea:	dd03      	ble.n	8006af4 <ST7735_FillRectangleNSS+0x3c>
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006af2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006af4:	88ba      	ldrh	r2, [r7, #4]
 8006af6:	883b      	ldrh	r3, [r7, #0]
 8006af8:	4413      	add	r3, r2
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	dd03      	ble.n	8006b06 <ST7735_FillRectangleNSS+0x4e>
 8006afe:	88bb      	ldrh	r3, [r7, #4]
 8006b00:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006b04:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8006b06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8006b0e:	f7ff fc5f 	bl	80063d0 <ST7735_Select>
 8006b12:	e005      	b.n	8006b20 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8006b14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8006b1c:	f7ff fc70 	bl	8006400 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	b2d8      	uxtb	r0, r3
 8006b24:	88bb      	ldrh	r3, [r7, #4]
 8006b26:	b2d9      	uxtb	r1, r3
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	887b      	ldrh	r3, [r7, #2]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b2dc      	uxtb	r4, r3
 8006b38:	88bb      	ldrh	r3, [r7, #4]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	883b      	ldrh	r3, [r7, #0]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4413      	add	r3, r2
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	4622      	mov	r2, r4
 8006b4a:	f7ff fd06 	bl	800655a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006b4e:	8c3b      	ldrh	r3, [r7, #32]
 8006b50:	0a1b      	lsrs	r3, r3, #8
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	733b      	strb	r3, [r7, #12]
 8006b58:	8c3b      	ldrh	r3, [r7, #32]
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b64:	4817      	ldr	r0, [pc, #92]	; (8006bc4 <ST7735_FillRectangleNSS+0x10c>)
 8006b66:	f003 fda5 	bl	800a6b4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006b6a:	883b      	ldrh	r3, [r7, #0]
 8006b6c:	80bb      	strh	r3, [r7, #4]
 8006b6e:	e013      	b.n	8006b98 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8006b70:	887b      	ldrh	r3, [r7, #2]
 8006b72:	80fb      	strh	r3, [r7, #6]
 8006b74:	e00a      	b.n	8006b8c <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006b76:	f107 010c 	add.w	r1, r7, #12
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4811      	ldr	r0, [pc, #68]	; (8006bc8 <ST7735_FillRectangleNSS+0x110>)
 8006b82:	f006 fbd3 	bl	800d32c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	80fb      	strh	r3, [r7, #6]
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f1      	bne.n	8006b76 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8006b92:	88bb      	ldrh	r3, [r7, #4]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	80bb      	strh	r3, [r7, #4]
 8006b98:	88bb      	ldrh	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e8      	bne.n	8006b70 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8006b9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8006ba6:	f7ff fc1f 	bl	80063e8 <ST7735_Unselect>
 8006baa:	e007      	b.n	8006bbc <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8006bac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d103      	bne.n	8006bbc <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8006bb4:	f7ff fc30 	bl	8006418 <ST7735_Unselect1>
 8006bb8:	e000      	b.n	8006bbc <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006bba:	bf00      	nop
	}
}
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd90      	pop	{r4, r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	58021800 	.word	0x58021800
 8006bc8:	24000260 	.word	0x24000260

08006bcc <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	2380      	movs	r3, #128	; 0x80
 8006bdc:	2280      	movs	r2, #128	; 0x80
 8006bde:	2100      	movs	r1, #0
 8006be0:	2000      	movs	r0, #0
 8006be2:	f7ff fe81 	bl	80068e8 <ST7735_FillRectangle>
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af02      	add	r7, sp, #8
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	2280      	movs	r2, #128	; 0x80
 8006c00:	2100      	movs	r1, #0
 8006c02:	2000      	movs	r0, #0
 8006c04:	f7ff fee4 	bl	80069d0 <ST7735_FillRectangle1>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <HAL_MspInit+0x30>)
 8006c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c1c:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <HAL_MspInit+0x30>)
 8006c1e:	f043 0302 	orr.w	r3, r3, #2
 8006c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006c26:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_MspInit+0x30>)
 8006c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	58024400 	.word	0x58024400

08006c44 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08e      	sub	sp, #56	; 0x38
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	605a      	str	r2, [r3, #4]
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	60da      	str	r2, [r3, #12]
 8006c5a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a59      	ldr	r2, [pc, #356]	; (8006dc8 <HAL_ETH_MspInit+0x184>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f040 80ab 	bne.w	8006dbe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006c68:	4b58      	ldr	r3, [pc, #352]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c6e:	4a57      	ldr	r2, [pc, #348]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006c78:	4b54      	ldr	r3, [pc, #336]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c82:	623b      	str	r3, [r7, #32]
 8006c84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006c86:	4b51      	ldr	r3, [pc, #324]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c8c:	4a4f      	ldr	r2, [pc, #316]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006c96:	4b4d      	ldr	r3, [pc, #308]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006ca4:	4b49      	ldr	r3, [pc, #292]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006caa:	4a48      	ldr	r2, [pc, #288]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006cb4:	4b45      	ldr	r3, [pc, #276]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cc2:	4b42      	ldr	r3, [pc, #264]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cc8:	4a40      	ldr	r2, [pc, #256]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006cca:	f043 0304 	orr.w	r3, r3, #4
 8006cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cd2:	4b3e      	ldr	r3, [pc, #248]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ce0:	4b3a      	ldr	r3, [pc, #232]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ce6:	4a39      	ldr	r2, [pc, #228]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cf0:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cfe:	4b33      	ldr	r3, [pc, #204]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d04:	4a31      	ldr	r2, [pc, #196]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d1c:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d22:	4a2a      	ldr	r2, [pc, #168]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d2c:	4b27      	ldr	r3, [pc, #156]	; (8006dcc <HAL_ETH_MspInit+0x188>)
 8006d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006d3a:	2332      	movs	r3, #50	; 0x32
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d46:	2300      	movs	r3, #0
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d4a:	230b      	movs	r3, #11
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d52:	4619      	mov	r1, r3
 8006d54:	481e      	ldr	r0, [pc, #120]	; (8006dd0 <HAL_ETH_MspInit+0x18c>)
 8006d56:	f003 fae5 	bl	800a324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006d5a:	2386      	movs	r3, #134	; 0x86
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d66:	2300      	movs	r3, #0
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d6a:	230b      	movs	r3, #11
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d72:	4619      	mov	r1, r3
 8006d74:	4817      	ldr	r0, [pc, #92]	; (8006dd4 <HAL_ETH_MspInit+0x190>)
 8006d76:	f003 fad5 	bl	800a324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d80:	2302      	movs	r3, #2
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d8c:	230b      	movs	r3, #11
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d94:	4619      	mov	r1, r3
 8006d96:	4810      	ldr	r0, [pc, #64]	; (8006dd8 <HAL_ETH_MspInit+0x194>)
 8006d98:	f003 fac4 	bl	800a324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006d9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006da2:	2302      	movs	r3, #2
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006daa:	2300      	movs	r3, #0
 8006dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006dae:	230b      	movs	r3, #11
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db6:	4619      	mov	r1, r3
 8006db8:	4808      	ldr	r0, [pc, #32]	; (8006ddc <HAL_ETH_MspInit+0x198>)
 8006dba:	f003 fab3 	bl	800a324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8006dbe:	bf00      	nop
 8006dc0:	3738      	adds	r7, #56	; 0x38
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40028000 	.word	0x40028000
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	58020800 	.word	0x58020800
 8006dd4:	58020000 	.word	0x58020000
 8006dd8:	58020400 	.word	0x58020400
 8006ddc:	58021800 	.word	0x58021800

08006de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08a      	sub	sp, #40	; 0x28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a2a      	ldr	r2, [pc, #168]	; (8006ea8 <HAL_SPI_MspInit+0xc8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d14d      	bne.n	8006e9e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006e02:	4b2a      	ldr	r3, [pc, #168]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e08:	4a28      	ldr	r2, [pc, #160]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006e12:	4b26      	ldr	r3, [pc, #152]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e20:	4b22      	ldr	r3, [pc, #136]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e26:	4a21      	ldr	r2, [pc, #132]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e28:	f043 0302 	orr.w	r3, r3, #2
 8006e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e30:	4b1e      	ldr	r3, [pc, #120]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e3e:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e46:	f043 0304 	orr.w	r3, r3, #4
 8006e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e4e:	4b17      	ldr	r3, [pc, #92]	; (8006eac <HAL_SPI_MspInit+0xcc>)
 8006e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e60:	2302      	movs	r3, #2
 8006e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e64:	2302      	movs	r3, #2
 8006e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8006e6c:	2307      	movs	r3, #7
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	4619      	mov	r1, r3
 8006e76:	480e      	ldr	r0, [pc, #56]	; (8006eb0 <HAL_SPI_MspInit+0xd0>)
 8006e78:	f003 fa54 	bl	800a324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e82:	2302      	movs	r3, #2
 8006e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e86:	2302      	movs	r3, #2
 8006e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006e8e:	2306      	movs	r3, #6
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e92:	f107 0314 	add.w	r3, r7, #20
 8006e96:	4619      	mov	r1, r3
 8006e98:	4806      	ldr	r0, [pc, #24]	; (8006eb4 <HAL_SPI_MspInit+0xd4>)
 8006e9a:	f003 fa43 	bl	800a324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006e9e:	bf00      	nop
 8006ea0:	3728      	adds	r7, #40	; 0x28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40003c00 	.word	0x40003c00
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	58020400 	.word	0x58020400
 8006eb4:	58020800 	.word	0x58020800

08006eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0e      	ldr	r2, [pc, #56]	; (8006f00 <HAL_TIM_Base_MspInit+0x48>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d116      	bne.n	8006ef8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <HAL_TIM_Base_MspInit+0x4c>)
 8006ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	; (8006f04 <HAL_TIM_Base_MspInit+0x4c>)
 8006ed2:	f043 0320 	orr.w	r3, r3, #32
 8006ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <HAL_TIM_Base_MspInit+0x4c>)
 8006edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2100      	movs	r1, #0
 8006eec:	2037      	movs	r0, #55	; 0x37
 8006eee:	f000 fb9a 	bl	8007626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006ef2:	2037      	movs	r0, #55	; 0x37
 8006ef4:	f000 fbb1 	bl	800765a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40001400 	.word	0x40001400
 8006f04:	58024400 	.word	0x58024400

08006f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b0b8      	sub	sp, #224	; 0xe0
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f20:	f107 0310 	add.w	r3, r7, #16
 8006f24:	22bc      	movs	r2, #188	; 0xbc
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f009 f88d 	bl	8010048 <memset>
  if(huart->Instance==USART3)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a57      	ldr	r2, [pc, #348]	; (8007090 <HAL_UART_MspInit+0x188>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	f040 80a6 	bne.w	8007086 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f44:	f107 0310 	add.w	r3, r7, #16
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f004 fd81 	bl	800ba50 <HAL_RCCEx_PeriphCLKConfig>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006f54:	f7ff fa36 	bl	80063c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f58:	4b4e      	ldr	r3, [pc, #312]	; (8007094 <HAL_UART_MspInit+0x18c>)
 8006f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f5e:	4a4d      	ldr	r2, [pc, #308]	; (8007094 <HAL_UART_MspInit+0x18c>)
 8006f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006f68:	4b4a      	ldr	r3, [pc, #296]	; (8007094 <HAL_UART_MspInit+0x18c>)
 8006f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f76:	4b47      	ldr	r3, [pc, #284]	; (8007094 <HAL_UART_MspInit+0x18c>)
 8006f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f7c:	4a45      	ldr	r2, [pc, #276]	; (8007094 <HAL_UART_MspInit+0x18c>)
 8006f7e:	f043 0308 	orr.w	r3, r3, #8
 8006f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f86:	4b43      	ldr	r3, [pc, #268]	; (8007094 <HAL_UART_MspInit+0x18c>)
 8006f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006f94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006f98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006fae:	2307      	movs	r3, #7
 8006fb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4837      	ldr	r0, [pc, #220]	; (8007098 <HAL_UART_MspInit+0x190>)
 8006fbc:	f003 f9b2 	bl	800a324 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006fc0:	4b36      	ldr	r3, [pc, #216]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fc2:	4a37      	ldr	r2, [pc, #220]	; (80070a0 <HAL_UART_MspInit+0x198>)
 8006fc4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006fc6:	4b35      	ldr	r3, [pc, #212]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fc8:	222d      	movs	r2, #45	; 0x2d
 8006fca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fcc:	4b33      	ldr	r3, [pc, #204]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fd2:	4b32      	ldr	r3, [pc, #200]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fd8:	4b30      	ldr	r3, [pc, #192]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fde:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fe0:	4b2e      	ldr	r3, [pc, #184]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fe6:	4b2d      	ldr	r3, [pc, #180]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006fec:	4b2b      	ldr	r3, [pc, #172]	; (800709c <HAL_UART_MspInit+0x194>)
 8006fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ff2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006ff4:	4b29      	ldr	r3, [pc, #164]	; (800709c <HAL_UART_MspInit+0x194>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ffa:	4b28      	ldr	r3, [pc, #160]	; (800709c <HAL_UART_MspInit+0x194>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007000:	4826      	ldr	r0, [pc, #152]	; (800709c <HAL_UART_MspInit+0x194>)
 8007002:	f000 fb45 	bl	8007690 <HAL_DMA_Init>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800700c:	f7ff f9da 	bl	80063c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a22      	ldr	r2, [pc, #136]	; (800709c <HAL_UART_MspInit+0x194>)
 8007014:	67da      	str	r2, [r3, #124]	; 0x7c
 8007016:	4a21      	ldr	r2, [pc, #132]	; (800709c <HAL_UART_MspInit+0x194>)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800701c:	4b21      	ldr	r3, [pc, #132]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 800701e:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <HAL_UART_MspInit+0x1a0>)
 8007020:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007022:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 8007024:	222e      	movs	r2, #46	; 0x2e
 8007026:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007028:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800702e:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 8007030:	2200      	movs	r2, #0
 8007032:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007034:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 8007036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800703a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 800703e:	2200      	movs	r2, #0
 8007040:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007042:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 8007044:	2200      	movs	r2, #0
 8007046:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 800704a:	2200      	movs	r2, #0
 800704c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 8007050:	2200      	movs	r2, #0
 8007052:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007054:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 8007056:	2200      	movs	r2, #0
 8007058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800705a:	4812      	ldr	r0, [pc, #72]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 800705c:	f000 fb18 	bl	8007690 <HAL_DMA_Init>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8007066:	f7ff f9ad 	bl	80063c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a0d      	ldr	r2, [pc, #52]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 800706e:	679a      	str	r2, [r3, #120]	; 0x78
 8007070:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <HAL_UART_MspInit+0x19c>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007076:	2200      	movs	r2, #0
 8007078:	2100      	movs	r1, #0
 800707a:	2027      	movs	r0, #39	; 0x27
 800707c:	f000 fad3 	bl	8007626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007080:	2027      	movs	r0, #39	; 0x27
 8007082:	f000 faea 	bl	800765a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007086:	bf00      	nop
 8007088:	37e0      	adds	r7, #224	; 0xe0
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40004800 	.word	0x40004800
 8007094:	58024400 	.word	0x58024400
 8007098:	58020c00 	.word	0x58020c00
 800709c:	240003c4 	.word	0x240003c4
 80070a0:	40020028 	.word	0x40020028
 80070a4:	2400043c 	.word	0x2400043c
 80070a8:	40020070 	.word	0x40020070

080070ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	; 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	609a      	str	r2, [r3, #8]
 80070c0:	60da      	str	r2, [r3, #12]
 80070c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a22      	ldr	r2, [pc, #136]	; (8007154 <HAL_PCD_MspInit+0xa8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d13d      	bne.n	800714a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80070ce:	f003 fcf5 	bl	800aabc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <HAL_PCD_MspInit+0xac>)
 80070d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <HAL_PCD_MspInit+0xac>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_PCD_MspInit+0xac>)
 80070e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80070f0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80070f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f6:	2302      	movs	r3, #2
 80070f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070fe:	2300      	movs	r3, #0
 8007100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007102:	230a      	movs	r3, #10
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007106:	f107 0314 	add.w	r3, r7, #20
 800710a:	4619      	mov	r1, r3
 800710c:	4813      	ldr	r0, [pc, #76]	; (800715c <HAL_PCD_MspInit+0xb0>)
 800710e:	f003 f909 	bl	800a324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007118:	2300      	movs	r3, #0
 800711a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711c:	2300      	movs	r3, #0
 800711e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	4619      	mov	r1, r3
 8007126:	480d      	ldr	r0, [pc, #52]	; (800715c <HAL_PCD_MspInit+0xb0>)
 8007128:	f003 f8fc 	bl	800a324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <HAL_PCD_MspInit+0xac>)
 800712e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007132:	4a09      	ldr	r2, [pc, #36]	; (8007158 <HAL_PCD_MspInit+0xac>)
 8007134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007138:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <HAL_PCD_MspInit+0xac>)
 800713e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800714a:	bf00      	nop
 800714c:	3728      	adds	r7, #40	; 0x28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40080000 	.word	0x40080000
 8007158:	58024400 	.word	0x58024400
 800715c:	58020000 	.word	0x58020000

08007160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007164:	e7fe      	b.n	8007164 <NMI_Handler+0x4>

08007166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007166:	b480      	push	{r7}
 8007168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800716a:	e7fe      	b.n	800716a <HardFault_Handler+0x4>

0800716c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007170:	e7fe      	b.n	8007170 <MemManage_Handler+0x4>

08007172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007172:	b480      	push	{r7}
 8007174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007176:	e7fe      	b.n	8007176 <BusFault_Handler+0x4>

08007178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800717c:	e7fe      	b.n	800717c <UsageFault_Handler+0x4>

0800717e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800717e:	b480      	push	{r7}
 8007180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007182:	bf00      	nop
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800719a:	b480      	push	{r7}
 800719c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071ac:	f000 f8fc 	bl	80073a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80071b8:	4802      	ldr	r0, [pc, #8]	; (80071c4 <DMA1_Stream1_IRQHandler+0x10>)
 80071ba:	f001 fb29 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80071be:	bf00      	nop
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	240003c4 	.word	0x240003c4

080071c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80071cc:	4802      	ldr	r0, [pc, #8]	; (80071d8 <DMA1_Stream4_IRQHandler+0x10>)
 80071ce:	f001 fb1f 	bl	8008810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80071d2:	bf00      	nop
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	2400043c 	.word	0x2400043c

080071dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80071e0:	4802      	ldr	r0, [pc, #8]	; (80071ec <USART3_IRQHandler+0x10>)
 80071e2:	f006 ff59 	bl	800e098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80071e6:	bf00      	nop
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	24000334 	.word	0x24000334

080071f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80071f4:	4802      	ldr	r0, [pc, #8]	; (8007200 <TIM7_IRQHandler+0x10>)
 80071f6:	f006 fc72 	bl	800dade <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	240002e8 	.word	0x240002e8

08007204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800720c:	4a14      	ldr	r2, [pc, #80]	; (8007260 <_sbrk+0x5c>)
 800720e:	4b15      	ldr	r3, [pc, #84]	; (8007264 <_sbrk+0x60>)
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007218:	4b13      	ldr	r3, [pc, #76]	; (8007268 <_sbrk+0x64>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007220:	4b11      	ldr	r3, [pc, #68]	; (8007268 <_sbrk+0x64>)
 8007222:	4a12      	ldr	r2, [pc, #72]	; (800726c <_sbrk+0x68>)
 8007224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007226:	4b10      	ldr	r3, [pc, #64]	; (8007268 <_sbrk+0x64>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4413      	add	r3, r2
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	d207      	bcs.n	8007244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007234:	f008 fede 	bl	800fff4 <__errno>
 8007238:	4603      	mov	r3, r0
 800723a:	220c      	movs	r2, #12
 800723c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800723e:	f04f 33ff 	mov.w	r3, #4294967295
 8007242:	e009      	b.n	8007258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007244:	4b08      	ldr	r3, [pc, #32]	; (8007268 <_sbrk+0x64>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800724a:	4b07      	ldr	r3, [pc, #28]	; (8007268 <_sbrk+0x64>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	4a05      	ldr	r2, [pc, #20]	; (8007268 <_sbrk+0x64>)
 8007254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007256:	68fb      	ldr	r3, [r7, #12]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	24080000 	.word	0x24080000
 8007264:	00000400 	.word	0x00000400
 8007268:	24000eb0 	.word	0x24000eb0
 800726c:	24000ec8 	.word	0x24000ec8

08007270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007274:	f7fe fc0e 	bl	8005a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007278:	480c      	ldr	r0, [pc, #48]	; (80072ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800727a:	490d      	ldr	r1, [pc, #52]	; (80072b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800727c:	4a0d      	ldr	r2, [pc, #52]	; (80072b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800727e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007280:	e002      	b.n	8007288 <LoopCopyDataInit>

08007282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007286:	3304      	adds	r3, #4

08007288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800728a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800728c:	d3f9      	bcc.n	8007282 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800728e:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007290:	4c0a      	ldr	r4, [pc, #40]	; (80072bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8007292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007294:	e001      	b.n	800729a <LoopFillZerobss>

08007296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007298:	3204      	adds	r2, #4

0800729a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800729a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800729c:	d3fb      	bcc.n	8007296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800729e:	f008 feaf 	bl	8010000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072a2:	f7fe fc8d 	bl	8005bc0 <main>
  bx  lr
 80072a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80072a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80072ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80072b0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80072b4:	08012324 	.word	0x08012324
  ldr r2, =_sbss
 80072b8:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 80072bc:	24000ec8 	.word	0x24000ec8

080072c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072c0:	e7fe      	b.n	80072c0 <ADC3_IRQHandler>
	...

080072c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072ca:	2003      	movs	r0, #3
 80072cc:	f000 f9a0 	bl	8007610 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072d0:	f004 f9e8 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <HAL_Init+0x68>)
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	4913      	ldr	r1, [pc, #76]	; (8007330 <HAL_Init+0x6c>)
 80072e2:	5ccb      	ldrb	r3, [r1, r3]
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072ee:	4b0f      	ldr	r3, [pc, #60]	; (800732c <HAL_Init+0x68>)
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	4a0e      	ldr	r2, [pc, #56]	; (8007330 <HAL_Init+0x6c>)
 80072f8:	5cd3      	ldrb	r3, [r2, r3]
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	fa22 f303 	lsr.w	r3, r2, r3
 8007304:	4a0b      	ldr	r2, [pc, #44]	; (8007334 <HAL_Init+0x70>)
 8007306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007308:	4a0b      	ldr	r2, [pc, #44]	; (8007338 <HAL_Init+0x74>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800730e:	2000      	movs	r0, #0
 8007310:	f000 f814 	bl	800733c <HAL_InitTick>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e002      	b.n	8007324 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800731e:	f7ff fc77 	bl	8006c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	58024400 	.word	0x58024400
 8007330:	08010d60 	.word	0x08010d60
 8007334:	24000008 	.word	0x24000008
 8007338:	24000004 	.word	0x24000004

0800733c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007344:	4b15      	ldr	r3, [pc, #84]	; (800739c <HAL_InitTick+0x60>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e021      	b.n	8007394 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007350:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <HAL_InitTick+0x64>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	4b11      	ldr	r3, [pc, #68]	; (800739c <HAL_InitTick+0x60>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	4619      	mov	r1, r3
 800735a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800735e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f985 	bl	8007676 <HAL_SYSTICK_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e00e      	b.n	8007394 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b0f      	cmp	r3, #15
 800737a:	d80a      	bhi.n	8007392 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800737c:	2200      	movs	r2, #0
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	f000 f94f 	bl	8007626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007388:	4a06      	ldr	r2, [pc, #24]	; (80073a4 <HAL_InitTick+0x68>)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e000      	b.n	8007394 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	24000020 	.word	0x24000020
 80073a0:	24000004 	.word	0x24000004
 80073a4:	2400001c 	.word	0x2400001c

080073a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <HAL_IncTick+0x20>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <HAL_IncTick+0x24>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4413      	add	r3, r2
 80073b8:	4a04      	ldr	r2, [pc, #16]	; (80073cc <HAL_IncTick+0x24>)
 80073ba:	6013      	str	r3, [r2, #0]
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	24000020 	.word	0x24000020
 80073cc:	24000eb4 	.word	0x24000eb4

080073d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
  return uwTick;
 80073d4:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <HAL_GetTick+0x14>)
 80073d6:	681b      	ldr	r3, [r3, #0]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	24000eb4 	.word	0x24000eb4

080073e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073f0:	f7ff ffee 	bl	80073d0 <HAL_GetTick>
 80073f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d005      	beq.n	800740e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <HAL_Delay+0x44>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800740e:	bf00      	nop
 8007410:	f7ff ffde 	bl	80073d0 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d8f7      	bhi.n	8007410 <HAL_Delay+0x28>
  {
  }
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	24000020 	.word	0x24000020

08007430 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007434:	4b03      	ldr	r3, [pc, #12]	; (8007444 <HAL_GetREVID+0x14>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	0c1b      	lsrs	r3, r3, #16
}
 800743a:	4618      	mov	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	5c001000 	.word	0x5c001000

08007448 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007458:	4904      	ldr	r1, [pc, #16]	; (800746c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4313      	orrs	r3, r2
 800745e:	604b      	str	r3, [r1, #4]
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	58000400 	.word	0x58000400

08007470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <__NVIC_SetPriorityGrouping+0x40>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800748c:	4013      	ands	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <__NVIC_SetPriorityGrouping+0x44>)
 800749a:	4313      	orrs	r3, r2
 800749c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800749e:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <__NVIC_SetPriorityGrouping+0x40>)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	60d3      	str	r3, [r2, #12]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	e000ed00 	.word	0xe000ed00
 80074b4:	05fa0000 	.word	0x05fa0000

080074b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <__NVIC_GetPriorityGrouping+0x18>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	f003 0307 	and.w	r3, r3, #7
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80074de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	db0b      	blt.n	80074fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	f003 021f 	and.w	r2, r3, #31
 80074ec:	4907      	ldr	r1, [pc, #28]	; (800750c <__NVIC_EnableIRQ+0x38>)
 80074ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	2001      	movs	r0, #1
 80074f6:	fa00 f202 	lsl.w	r2, r0, r2
 80074fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	e000e100 	.word	0xe000e100

08007510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800751c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007520:	2b00      	cmp	r3, #0
 8007522:	db0a      	blt.n	800753a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	490c      	ldr	r1, [pc, #48]	; (800755c <__NVIC_SetPriority+0x4c>)
 800752a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800752e:	0112      	lsls	r2, r2, #4
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	440b      	add	r3, r1
 8007534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007538:	e00a      	b.n	8007550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	b2da      	uxtb	r2, r3
 800753e:	4908      	ldr	r1, [pc, #32]	; (8007560 <__NVIC_SetPriority+0x50>)
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	3b04      	subs	r3, #4
 8007548:	0112      	lsls	r2, r2, #4
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	440b      	add	r3, r1
 800754e:	761a      	strb	r2, [r3, #24]
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	e000e100 	.word	0xe000e100
 8007560:	e000ed00 	.word	0xe000ed00

08007564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007564:	b480      	push	{r7}
 8007566:	b089      	sub	sp, #36	; 0x24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f1c3 0307 	rsb	r3, r3, #7
 800757e:	2b04      	cmp	r3, #4
 8007580:	bf28      	it	cs
 8007582:	2304      	movcs	r3, #4
 8007584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3304      	adds	r3, #4
 800758a:	2b06      	cmp	r3, #6
 800758c:	d902      	bls.n	8007594 <NVIC_EncodePriority+0x30>
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	3b03      	subs	r3, #3
 8007592:	e000      	b.n	8007596 <NVIC_EncodePriority+0x32>
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	43da      	mvns	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	401a      	ands	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075ac:	f04f 31ff 	mov.w	r1, #4294967295
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	fa01 f303 	lsl.w	r3, r1, r3
 80075b6:	43d9      	mvns	r1, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075bc:	4313      	orrs	r3, r2
         );
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3724      	adds	r7, #36	; 0x24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075dc:	d301      	bcc.n	80075e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075de:	2301      	movs	r3, #1
 80075e0:	e00f      	b.n	8007602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075e2:	4a0a      	ldr	r2, [pc, #40]	; (800760c <SysTick_Config+0x40>)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075ea:	210f      	movs	r1, #15
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	f7ff ff8e 	bl	8007510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <SysTick_Config+0x40>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075fa:	4b04      	ldr	r3, [pc, #16]	; (800760c <SysTick_Config+0x40>)
 80075fc:	2207      	movs	r2, #7
 80075fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	e000e010 	.word	0xe000e010

08007610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff ff29 	bl	8007470 <__NVIC_SetPriorityGrouping>
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af00      	add	r7, sp, #0
 800762c:	4603      	mov	r3, r0
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007634:	f7ff ff40 	bl	80074b8 <__NVIC_GetPriorityGrouping>
 8007638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f7ff ff90 	bl	8007564 <NVIC_EncodePriority>
 8007644:	4602      	mov	r2, r0
 8007646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff ff5f 	bl	8007510 <__NVIC_SetPriority>
}
 8007652:	bf00      	nop
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	4603      	mov	r3, r0
 8007662:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff ff33 	bl	80074d4 <__NVIC_EnableIRQ>
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff ffa4 	bl	80075cc <SysTick_Config>
 8007684:	4603      	mov	r3, r0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007698:	f7ff fe9a 	bl	80073d0 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e316      	b.n	8007cd6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a66      	ldr	r2, [pc, #408]	; (8007848 <HAL_DMA_Init+0x1b8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d04a      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a65      	ldr	r2, [pc, #404]	; (800784c <HAL_DMA_Init+0x1bc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d045      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a63      	ldr	r2, [pc, #396]	; (8007850 <HAL_DMA_Init+0x1c0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d040      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a62      	ldr	r2, [pc, #392]	; (8007854 <HAL_DMA_Init+0x1c4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d03b      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a60      	ldr	r2, [pc, #384]	; (8007858 <HAL_DMA_Init+0x1c8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d036      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a5f      	ldr	r2, [pc, #380]	; (800785c <HAL_DMA_Init+0x1cc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d031      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a5d      	ldr	r2, [pc, #372]	; (8007860 <HAL_DMA_Init+0x1d0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d02c      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a5c      	ldr	r2, [pc, #368]	; (8007864 <HAL_DMA_Init+0x1d4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d027      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a5a      	ldr	r2, [pc, #360]	; (8007868 <HAL_DMA_Init+0x1d8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d022      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a59      	ldr	r2, [pc, #356]	; (800786c <HAL_DMA_Init+0x1dc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d01d      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a57      	ldr	r2, [pc, #348]	; (8007870 <HAL_DMA_Init+0x1e0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d018      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a56      	ldr	r2, [pc, #344]	; (8007874 <HAL_DMA_Init+0x1e4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d013      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a54      	ldr	r2, [pc, #336]	; (8007878 <HAL_DMA_Init+0x1e8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00e      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a53      	ldr	r2, [pc, #332]	; (800787c <HAL_DMA_Init+0x1ec>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d009      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a51      	ldr	r2, [pc, #324]	; (8007880 <HAL_DMA_Init+0x1f0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d004      	beq.n	8007748 <HAL_DMA_Init+0xb8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a50      	ldr	r2, [pc, #320]	; (8007884 <HAL_DMA_Init+0x1f4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d101      	bne.n	800774c <HAL_DMA_Init+0xbc>
 8007748:	2301      	movs	r3, #1
 800774a:	e000      	b.n	800774e <HAL_DMA_Init+0xbe>
 800774c:	2300      	movs	r3, #0
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 813b 	beq.w	80079ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a37      	ldr	r2, [pc, #220]	; (8007848 <HAL_DMA_Init+0x1b8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d04a      	beq.n	8007804 <HAL_DMA_Init+0x174>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a36      	ldr	r2, [pc, #216]	; (800784c <HAL_DMA_Init+0x1bc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d045      	beq.n	8007804 <HAL_DMA_Init+0x174>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a34      	ldr	r2, [pc, #208]	; (8007850 <HAL_DMA_Init+0x1c0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d040      	beq.n	8007804 <HAL_DMA_Init+0x174>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a33      	ldr	r2, [pc, #204]	; (8007854 <HAL_DMA_Init+0x1c4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d03b      	beq.n	8007804 <HAL_DMA_Init+0x174>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a31      	ldr	r2, [pc, #196]	; (8007858 <HAL_DMA_Init+0x1c8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d036      	beq.n	8007804 <HAL_DMA_Init+0x174>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a30      	ldr	r2, [pc, #192]	; (800785c <HAL_DMA_Init+0x1cc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d031      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a2e      	ldr	r2, [pc, #184]	; (8007860 <HAL_DMA_Init+0x1d0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d02c      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <HAL_DMA_Init+0x1d4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d027      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a2b      	ldr	r2, [pc, #172]	; (8007868 <HAL_DMA_Init+0x1d8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d022      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a2a      	ldr	r2, [pc, #168]	; (800786c <HAL_DMA_Init+0x1dc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d01d      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a28      	ldr	r2, [pc, #160]	; (8007870 <HAL_DMA_Init+0x1e0>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d018      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a27      	ldr	r2, [pc, #156]	; (8007874 <HAL_DMA_Init+0x1e4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a25      	ldr	r2, [pc, #148]	; (8007878 <HAL_DMA_Init+0x1e8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00e      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a24      	ldr	r2, [pc, #144]	; (800787c <HAL_DMA_Init+0x1ec>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d009      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a22      	ldr	r2, [pc, #136]	; (8007880 <HAL_DMA_Init+0x1f0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <HAL_DMA_Init+0x174>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a21      	ldr	r2, [pc, #132]	; (8007884 <HAL_DMA_Init+0x1f4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d108      	bne.n	8007816 <HAL_DMA_Init+0x186>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0201 	bic.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e007      	b.n	8007826 <HAL_DMA_Init+0x196>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007826:	e02f      	b.n	8007888 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007828:	f7ff fdd2 	bl	80073d0 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b05      	cmp	r3, #5
 8007834:	d928      	bls.n	8007888 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e246      	b.n	8007cd6 <HAL_DMA_Init+0x646>
 8007848:	40020010 	.word	0x40020010
 800784c:	40020028 	.word	0x40020028
 8007850:	40020040 	.word	0x40020040
 8007854:	40020058 	.word	0x40020058
 8007858:	40020070 	.word	0x40020070
 800785c:	40020088 	.word	0x40020088
 8007860:	400200a0 	.word	0x400200a0
 8007864:	400200b8 	.word	0x400200b8
 8007868:	40020410 	.word	0x40020410
 800786c:	40020428 	.word	0x40020428
 8007870:	40020440 	.word	0x40020440
 8007874:	40020458 	.word	0x40020458
 8007878:	40020470 	.word	0x40020470
 800787c:	40020488 	.word	0x40020488
 8007880:	400204a0 	.word	0x400204a0
 8007884:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1c8      	bne.n	8007828 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4b83      	ldr	r3, [pc, #524]	; (8007ab0 <HAL_DMA_Init+0x420>)
 80078a2:	4013      	ands	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80078ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d107      	bne.n	80078ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	4313      	orrs	r3, r2
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80078ec:	4b71      	ldr	r3, [pc, #452]	; (8007ab4 <HAL_DMA_Init+0x424>)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	4b71      	ldr	r3, [pc, #452]	; (8007ab8 <HAL_DMA_Init+0x428>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f8:	d328      	bcc.n	800794c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b28      	cmp	r3, #40	; 0x28
 8007900:	d903      	bls.n	800790a <HAL_DMA_Init+0x27a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2b2e      	cmp	r3, #46	; 0x2e
 8007908:	d917      	bls.n	800793a <HAL_DMA_Init+0x2aa>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b3e      	cmp	r3, #62	; 0x3e
 8007910:	d903      	bls.n	800791a <HAL_DMA_Init+0x28a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	2b42      	cmp	r3, #66	; 0x42
 8007918:	d90f      	bls.n	800793a <HAL_DMA_Init+0x2aa>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b46      	cmp	r3, #70	; 0x46
 8007920:	d903      	bls.n	800792a <HAL_DMA_Init+0x29a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2b48      	cmp	r3, #72	; 0x48
 8007928:	d907      	bls.n	800793a <HAL_DMA_Init+0x2aa>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b4e      	cmp	r3, #78	; 0x4e
 8007930:	d905      	bls.n	800793e <HAL_DMA_Init+0x2ae>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b52      	cmp	r3, #82	; 0x52
 8007938:	d801      	bhi.n	800793e <HAL_DMA_Init+0x2ae>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <HAL_DMA_Init+0x2b0>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800794a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0307 	bic.w	r3, r3, #7
 8007962:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	2b04      	cmp	r3, #4
 8007974:	d117      	bne.n	80079a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00e      	beq.n	80079a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 ff1d 	bl	80097c8 <DMA_CheckFifoParam>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2240      	movs	r2, #64	; 0x40
 8007998:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e197      	b.n	8007cd6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fe58 	bl	8009664 <DMA_CalcBaseAndBitshift>
 80079b4:	4603      	mov	r3, r0
 80079b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	223f      	movs	r2, #63	; 0x3f
 80079c2:	409a      	lsls	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	e0cd      	b.n	8007b66 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a3b      	ldr	r2, [pc, #236]	; (8007abc <HAL_DMA_Init+0x42c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d022      	beq.n	8007a1a <HAL_DMA_Init+0x38a>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a39      	ldr	r2, [pc, #228]	; (8007ac0 <HAL_DMA_Init+0x430>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01d      	beq.n	8007a1a <HAL_DMA_Init+0x38a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a38      	ldr	r2, [pc, #224]	; (8007ac4 <HAL_DMA_Init+0x434>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d018      	beq.n	8007a1a <HAL_DMA_Init+0x38a>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a36      	ldr	r2, [pc, #216]	; (8007ac8 <HAL_DMA_Init+0x438>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <HAL_DMA_Init+0x38a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a35      	ldr	r2, [pc, #212]	; (8007acc <HAL_DMA_Init+0x43c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00e      	beq.n	8007a1a <HAL_DMA_Init+0x38a>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a33      	ldr	r2, [pc, #204]	; (8007ad0 <HAL_DMA_Init+0x440>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d009      	beq.n	8007a1a <HAL_DMA_Init+0x38a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a32      	ldr	r2, [pc, #200]	; (8007ad4 <HAL_DMA_Init+0x444>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d004      	beq.n	8007a1a <HAL_DMA_Init+0x38a>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a30      	ldr	r2, [pc, #192]	; (8007ad8 <HAL_DMA_Init+0x448>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <HAL_DMA_Init+0x38e>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <HAL_DMA_Init+0x390>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8097 	beq.w	8007b54 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a24      	ldr	r2, [pc, #144]	; (8007abc <HAL_DMA_Init+0x42c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d021      	beq.n	8007a74 <HAL_DMA_Init+0x3e4>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a22      	ldr	r2, [pc, #136]	; (8007ac0 <HAL_DMA_Init+0x430>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01c      	beq.n	8007a74 <HAL_DMA_Init+0x3e4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a21      	ldr	r2, [pc, #132]	; (8007ac4 <HAL_DMA_Init+0x434>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d017      	beq.n	8007a74 <HAL_DMA_Init+0x3e4>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1f      	ldr	r2, [pc, #124]	; (8007ac8 <HAL_DMA_Init+0x438>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d012      	beq.n	8007a74 <HAL_DMA_Init+0x3e4>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1e      	ldr	r2, [pc, #120]	; (8007acc <HAL_DMA_Init+0x43c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00d      	beq.n	8007a74 <HAL_DMA_Init+0x3e4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1c      	ldr	r2, [pc, #112]	; (8007ad0 <HAL_DMA_Init+0x440>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d008      	beq.n	8007a74 <HAL_DMA_Init+0x3e4>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <HAL_DMA_Init+0x444>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <HAL_DMA_Init+0x3e4>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a19      	ldr	r2, [pc, #100]	; (8007ad8 <HAL_DMA_Init+0x448>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4b12      	ldr	r3, [pc, #72]	; (8007adc <HAL_DMA_Init+0x44c>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	d020      	beq.n	8007ae0 <HAL_DMA_Init+0x450>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d102      	bne.n	8007aac <HAL_DMA_Init+0x41c>
 8007aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007aaa:	e01a      	b.n	8007ae2 <HAL_DMA_Init+0x452>
 8007aac:	2300      	movs	r3, #0
 8007aae:	e018      	b.n	8007ae2 <HAL_DMA_Init+0x452>
 8007ab0:	fe10803f 	.word	0xfe10803f
 8007ab4:	5c001000 	.word	0x5c001000
 8007ab8:	ffff0000 	.word	0xffff0000
 8007abc:	58025408 	.word	0x58025408
 8007ac0:	5802541c 	.word	0x5802541c
 8007ac4:	58025430 	.word	0x58025430
 8007ac8:	58025444 	.word	0x58025444
 8007acc:	58025458 	.word	0x58025458
 8007ad0:	5802546c 	.word	0x5802546c
 8007ad4:	58025480 	.word	0x58025480
 8007ad8:	58025494 	.word	0x58025494
 8007adc:	fffe000f 	.word	0xfffe000f
 8007ae0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68d2      	ldr	r2, [r2, #12]
 8007ae6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ae8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007af0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b6e      	ldr	r3, [pc, #440]	; (8007ce0 <HAL_DMA_Init+0x650>)
 8007b28:	4413      	add	r3, r2
 8007b2a:	4a6e      	ldr	r2, [pc, #440]	; (8007ce4 <HAL_DMA_Init+0x654>)
 8007b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b30:	091b      	lsrs	r3, r3, #4
 8007b32:	009a      	lsls	r2, r3, #2
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 fd93 	bl	8009664 <DMA_CalcBaseAndBitshift>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	409a      	lsls	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	e008      	b.n	8007b66 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2240      	movs	r2, #64	; 0x40
 8007b58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e0b7      	b.n	8007cd6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a5f      	ldr	r2, [pc, #380]	; (8007ce8 <HAL_DMA_Init+0x658>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d072      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a5d      	ldr	r2, [pc, #372]	; (8007cec <HAL_DMA_Init+0x65c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d06d      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a5c      	ldr	r2, [pc, #368]	; (8007cf0 <HAL_DMA_Init+0x660>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d068      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a5a      	ldr	r2, [pc, #360]	; (8007cf4 <HAL_DMA_Init+0x664>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d063      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a59      	ldr	r2, [pc, #356]	; (8007cf8 <HAL_DMA_Init+0x668>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d05e      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a57      	ldr	r2, [pc, #348]	; (8007cfc <HAL_DMA_Init+0x66c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d059      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a56      	ldr	r2, [pc, #344]	; (8007d00 <HAL_DMA_Init+0x670>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d054      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a54      	ldr	r2, [pc, #336]	; (8007d04 <HAL_DMA_Init+0x674>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d04f      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a53      	ldr	r2, [pc, #332]	; (8007d08 <HAL_DMA_Init+0x678>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04a      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a51      	ldr	r2, [pc, #324]	; (8007d0c <HAL_DMA_Init+0x67c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d045      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a50      	ldr	r2, [pc, #320]	; (8007d10 <HAL_DMA_Init+0x680>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d040      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a4e      	ldr	r2, [pc, #312]	; (8007d14 <HAL_DMA_Init+0x684>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d03b      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a4d      	ldr	r2, [pc, #308]	; (8007d18 <HAL_DMA_Init+0x688>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d036      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a4b      	ldr	r2, [pc, #300]	; (8007d1c <HAL_DMA_Init+0x68c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a4a      	ldr	r2, [pc, #296]	; (8007d20 <HAL_DMA_Init+0x690>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d02c      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a48      	ldr	r2, [pc, #288]	; (8007d24 <HAL_DMA_Init+0x694>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d027      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a47      	ldr	r2, [pc, #284]	; (8007d28 <HAL_DMA_Init+0x698>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d022      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a45      	ldr	r2, [pc, #276]	; (8007d2c <HAL_DMA_Init+0x69c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01d      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a44      	ldr	r2, [pc, #272]	; (8007d30 <HAL_DMA_Init+0x6a0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d018      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a42      	ldr	r2, [pc, #264]	; (8007d34 <HAL_DMA_Init+0x6a4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a41      	ldr	r2, [pc, #260]	; (8007d38 <HAL_DMA_Init+0x6a8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00e      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a3f      	ldr	r2, [pc, #252]	; (8007d3c <HAL_DMA_Init+0x6ac>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d009      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a3e      	ldr	r2, [pc, #248]	; (8007d40 <HAL_DMA_Init+0x6b0>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_DMA_Init+0x5c6>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a3c      	ldr	r2, [pc, #240]	; (8007d44 <HAL_DMA_Init+0x6b4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d101      	bne.n	8007c5a <HAL_DMA_Init+0x5ca>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <HAL_DMA_Init+0x5cc>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d032      	beq.n	8007cc6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fe2d 	bl	80098c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d102      	bne.n	8007c74 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d010      	beq.n	8007cb4 <HAL_DMA_Init+0x624>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d80c      	bhi.n	8007cb4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 feaa 	bl	80099f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	e008      	b.n	8007cc6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	a7fdabf8 	.word	0xa7fdabf8
 8007ce4:	cccccccd 	.word	0xcccccccd
 8007ce8:	40020010 	.word	0x40020010
 8007cec:	40020028 	.word	0x40020028
 8007cf0:	40020040 	.word	0x40020040
 8007cf4:	40020058 	.word	0x40020058
 8007cf8:	40020070 	.word	0x40020070
 8007cfc:	40020088 	.word	0x40020088
 8007d00:	400200a0 	.word	0x400200a0
 8007d04:	400200b8 	.word	0x400200b8
 8007d08:	40020410 	.word	0x40020410
 8007d0c:	40020428 	.word	0x40020428
 8007d10:	40020440 	.word	0x40020440
 8007d14:	40020458 	.word	0x40020458
 8007d18:	40020470 	.word	0x40020470
 8007d1c:	40020488 	.word	0x40020488
 8007d20:	400204a0 	.word	0x400204a0
 8007d24:	400204b8 	.word	0x400204b8
 8007d28:	58025408 	.word	0x58025408
 8007d2c:	5802541c 	.word	0x5802541c
 8007d30:	58025430 	.word	0x58025430
 8007d34:	58025444 	.word	0x58025444
 8007d38:	58025458 	.word	0x58025458
 8007d3c:	5802546c 	.word	0x5802546c
 8007d40:	58025480 	.word	0x58025480
 8007d44:	58025494 	.word	0x58025494

08007d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007d50:	f7ff fb3e 	bl	80073d0 <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e2dc      	b.n	800831a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d008      	beq.n	8007d7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2280      	movs	r2, #128	; 0x80
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e2cd      	b.n	800831a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a76      	ldr	r2, [pc, #472]	; (8007f5c <HAL_DMA_Abort+0x214>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d04a      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a74      	ldr	r2, [pc, #464]	; (8007f60 <HAL_DMA_Abort+0x218>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d045      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a73      	ldr	r2, [pc, #460]	; (8007f64 <HAL_DMA_Abort+0x21c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d040      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a71      	ldr	r2, [pc, #452]	; (8007f68 <HAL_DMA_Abort+0x220>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d03b      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a70      	ldr	r2, [pc, #448]	; (8007f6c <HAL_DMA_Abort+0x224>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d036      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a6e      	ldr	r2, [pc, #440]	; (8007f70 <HAL_DMA_Abort+0x228>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d031      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a6d      	ldr	r2, [pc, #436]	; (8007f74 <HAL_DMA_Abort+0x22c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d02c      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a6b      	ldr	r2, [pc, #428]	; (8007f78 <HAL_DMA_Abort+0x230>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d027      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a6a      	ldr	r2, [pc, #424]	; (8007f7c <HAL_DMA_Abort+0x234>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d022      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a68      	ldr	r2, [pc, #416]	; (8007f80 <HAL_DMA_Abort+0x238>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01d      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a67      	ldr	r2, [pc, #412]	; (8007f84 <HAL_DMA_Abort+0x23c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d018      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a65      	ldr	r2, [pc, #404]	; (8007f88 <HAL_DMA_Abort+0x240>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a64      	ldr	r2, [pc, #400]	; (8007f8c <HAL_DMA_Abort+0x244>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00e      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a62      	ldr	r2, [pc, #392]	; (8007f90 <HAL_DMA_Abort+0x248>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d009      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a61      	ldr	r2, [pc, #388]	; (8007f94 <HAL_DMA_Abort+0x24c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d004      	beq.n	8007e1e <HAL_DMA_Abort+0xd6>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a5f      	ldr	r2, [pc, #380]	; (8007f98 <HAL_DMA_Abort+0x250>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d101      	bne.n	8007e22 <HAL_DMA_Abort+0xda>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <HAL_DMA_Abort+0xdc>
 8007e22:	2300      	movs	r3, #0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d013      	beq.n	8007e50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 021e 	bic.w	r2, r2, #30
 8007e36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	e00a      	b.n	8007e66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 020e 	bic.w	r2, r2, #14
 8007e5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a3c      	ldr	r2, [pc, #240]	; (8007f5c <HAL_DMA_Abort+0x214>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d072      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a3a      	ldr	r2, [pc, #232]	; (8007f60 <HAL_DMA_Abort+0x218>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d06d      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a39      	ldr	r2, [pc, #228]	; (8007f64 <HAL_DMA_Abort+0x21c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d068      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a37      	ldr	r2, [pc, #220]	; (8007f68 <HAL_DMA_Abort+0x220>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d063      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a36      	ldr	r2, [pc, #216]	; (8007f6c <HAL_DMA_Abort+0x224>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d05e      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a34      	ldr	r2, [pc, #208]	; (8007f70 <HAL_DMA_Abort+0x228>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d059      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a33      	ldr	r2, [pc, #204]	; (8007f74 <HAL_DMA_Abort+0x22c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d054      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a31      	ldr	r2, [pc, #196]	; (8007f78 <HAL_DMA_Abort+0x230>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d04f      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a30      	ldr	r2, [pc, #192]	; (8007f7c <HAL_DMA_Abort+0x234>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d04a      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a2e      	ldr	r2, [pc, #184]	; (8007f80 <HAL_DMA_Abort+0x238>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d045      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a2d      	ldr	r2, [pc, #180]	; (8007f84 <HAL_DMA_Abort+0x23c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d040      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a2b      	ldr	r2, [pc, #172]	; (8007f88 <HAL_DMA_Abort+0x240>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d03b      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a2a      	ldr	r2, [pc, #168]	; (8007f8c <HAL_DMA_Abort+0x244>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d036      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a28      	ldr	r2, [pc, #160]	; (8007f90 <HAL_DMA_Abort+0x248>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d031      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a27      	ldr	r2, [pc, #156]	; (8007f94 <HAL_DMA_Abort+0x24c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d02c      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <HAL_DMA_Abort+0x250>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d027      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <HAL_DMA_Abort+0x254>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d022      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a22      	ldr	r2, [pc, #136]	; (8007fa0 <HAL_DMA_Abort+0x258>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d01d      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <HAL_DMA_Abort+0x25c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d018      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1f      	ldr	r2, [pc, #124]	; (8007fa8 <HAL_DMA_Abort+0x260>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1e      	ldr	r2, [pc, #120]	; (8007fac <HAL_DMA_Abort+0x264>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00e      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1c      	ldr	r2, [pc, #112]	; (8007fb0 <HAL_DMA_Abort+0x268>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d009      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1b      	ldr	r2, [pc, #108]	; (8007fb4 <HAL_DMA_Abort+0x26c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_DMA_Abort+0x20e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <HAL_DMA_Abort+0x270>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d132      	bne.n	8007fbc <HAL_DMA_Abort+0x274>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e031      	b.n	8007fbe <HAL_DMA_Abort+0x276>
 8007f5a:	bf00      	nop
 8007f5c:	40020010 	.word	0x40020010
 8007f60:	40020028 	.word	0x40020028
 8007f64:	40020040 	.word	0x40020040
 8007f68:	40020058 	.word	0x40020058
 8007f6c:	40020070 	.word	0x40020070
 8007f70:	40020088 	.word	0x40020088
 8007f74:	400200a0 	.word	0x400200a0
 8007f78:	400200b8 	.word	0x400200b8
 8007f7c:	40020410 	.word	0x40020410
 8007f80:	40020428 	.word	0x40020428
 8007f84:	40020440 	.word	0x40020440
 8007f88:	40020458 	.word	0x40020458
 8007f8c:	40020470 	.word	0x40020470
 8007f90:	40020488 	.word	0x40020488
 8007f94:	400204a0 	.word	0x400204a0
 8007f98:	400204b8 	.word	0x400204b8
 8007f9c:	58025408 	.word	0x58025408
 8007fa0:	5802541c 	.word	0x5802541c
 8007fa4:	58025430 	.word	0x58025430
 8007fa8:	58025444 	.word	0x58025444
 8007fac:	58025458 	.word	0x58025458
 8007fb0:	5802546c 	.word	0x5802546c
 8007fb4:	58025480 	.word	0x58025480
 8007fb8:	58025494 	.word	0x58025494
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a6d      	ldr	r2, [pc, #436]	; (800818c <HAL_DMA_Abort+0x444>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d04a      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a6b      	ldr	r2, [pc, #428]	; (8008190 <HAL_DMA_Abort+0x448>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d045      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a6a      	ldr	r2, [pc, #424]	; (8008194 <HAL_DMA_Abort+0x44c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d040      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a68      	ldr	r2, [pc, #416]	; (8008198 <HAL_DMA_Abort+0x450>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d03b      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a67      	ldr	r2, [pc, #412]	; (800819c <HAL_DMA_Abort+0x454>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d036      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a65      	ldr	r2, [pc, #404]	; (80081a0 <HAL_DMA_Abort+0x458>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d031      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a64      	ldr	r2, [pc, #400]	; (80081a4 <HAL_DMA_Abort+0x45c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d02c      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a62      	ldr	r2, [pc, #392]	; (80081a8 <HAL_DMA_Abort+0x460>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d027      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a61      	ldr	r2, [pc, #388]	; (80081ac <HAL_DMA_Abort+0x464>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a5f      	ldr	r2, [pc, #380]	; (80081b0 <HAL_DMA_Abort+0x468>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a5e      	ldr	r2, [pc, #376]	; (80081b4 <HAL_DMA_Abort+0x46c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a5c      	ldr	r2, [pc, #368]	; (80081b8 <HAL_DMA_Abort+0x470>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a5b      	ldr	r2, [pc, #364]	; (80081bc <HAL_DMA_Abort+0x474>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a59      	ldr	r2, [pc, #356]	; (80081c0 <HAL_DMA_Abort+0x478>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a58      	ldr	r2, [pc, #352]	; (80081c4 <HAL_DMA_Abort+0x47c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_DMA_Abort+0x32a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a56      	ldr	r2, [pc, #344]	; (80081c8 <HAL_DMA_Abort+0x480>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d108      	bne.n	8008084 <HAL_DMA_Abort+0x33c>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e007      	b.n	8008094 <HAL_DMA_Abort+0x34c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008094:	e013      	b.n	80080be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008096:	f7ff f99b 	bl	80073d0 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d90c      	bls.n	80080be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2220      	movs	r2, #32
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2203      	movs	r2, #3
 80080ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e12d      	b.n	800831a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e5      	bne.n	8008096 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a2f      	ldr	r2, [pc, #188]	; (800818c <HAL_DMA_Abort+0x444>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d04a      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a2d      	ldr	r2, [pc, #180]	; (8008190 <HAL_DMA_Abort+0x448>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d045      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a2c      	ldr	r2, [pc, #176]	; (8008194 <HAL_DMA_Abort+0x44c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d040      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <HAL_DMA_Abort+0x450>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d03b      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a29      	ldr	r2, [pc, #164]	; (800819c <HAL_DMA_Abort+0x454>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d036      	beq.n	800816a <HAL_DMA_Abort+0x422>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a27      	ldr	r2, [pc, #156]	; (80081a0 <HAL_DMA_Abort+0x458>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d031      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <HAL_DMA_Abort+0x45c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d02c      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a24      	ldr	r2, [pc, #144]	; (80081a8 <HAL_DMA_Abort+0x460>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d027      	beq.n	800816a <HAL_DMA_Abort+0x422>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a23      	ldr	r2, [pc, #140]	; (80081ac <HAL_DMA_Abort+0x464>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d022      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a21      	ldr	r2, [pc, #132]	; (80081b0 <HAL_DMA_Abort+0x468>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01d      	beq.n	800816a <HAL_DMA_Abort+0x422>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <HAL_DMA_Abort+0x46c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d018      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <HAL_DMA_Abort+0x470>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d013      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <HAL_DMA_Abort+0x474>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00e      	beq.n	800816a <HAL_DMA_Abort+0x422>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <HAL_DMA_Abort+0x478>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d009      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <HAL_DMA_Abort+0x47c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d004      	beq.n	800816a <HAL_DMA_Abort+0x422>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <HAL_DMA_Abort+0x480>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d101      	bne.n	800816e <HAL_DMA_Abort+0x426>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <HAL_DMA_Abort+0x428>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d02b      	beq.n	80081cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008178:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	223f      	movs	r2, #63	; 0x3f
 8008184:	409a      	lsls	r2, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	609a      	str	r2, [r3, #8]
 800818a:	e02a      	b.n	80081e2 <HAL_DMA_Abort+0x49a>
 800818c:	40020010 	.word	0x40020010
 8008190:	40020028 	.word	0x40020028
 8008194:	40020040 	.word	0x40020040
 8008198:	40020058 	.word	0x40020058
 800819c:	40020070 	.word	0x40020070
 80081a0:	40020088 	.word	0x40020088
 80081a4:	400200a0 	.word	0x400200a0
 80081a8:	400200b8 	.word	0x400200b8
 80081ac:	40020410 	.word	0x40020410
 80081b0:	40020428 	.word	0x40020428
 80081b4:	40020440 	.word	0x40020440
 80081b8:	40020458 	.word	0x40020458
 80081bc:	40020470 	.word	0x40020470
 80081c0:	40020488 	.word	0x40020488
 80081c4:	400204a0 	.word	0x400204a0
 80081c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2201      	movs	r2, #1
 80081dc:	409a      	lsls	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a4f      	ldr	r2, [pc, #316]	; (8008324 <HAL_DMA_Abort+0x5dc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d072      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a4d      	ldr	r2, [pc, #308]	; (8008328 <HAL_DMA_Abort+0x5e0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d06d      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a4c      	ldr	r2, [pc, #304]	; (800832c <HAL_DMA_Abort+0x5e4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d068      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a4a      	ldr	r2, [pc, #296]	; (8008330 <HAL_DMA_Abort+0x5e8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d063      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a49      	ldr	r2, [pc, #292]	; (8008334 <HAL_DMA_Abort+0x5ec>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d05e      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a47      	ldr	r2, [pc, #284]	; (8008338 <HAL_DMA_Abort+0x5f0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d059      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a46      	ldr	r2, [pc, #280]	; (800833c <HAL_DMA_Abort+0x5f4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d054      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a44      	ldr	r2, [pc, #272]	; (8008340 <HAL_DMA_Abort+0x5f8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d04f      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a43      	ldr	r2, [pc, #268]	; (8008344 <HAL_DMA_Abort+0x5fc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d04a      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a41      	ldr	r2, [pc, #260]	; (8008348 <HAL_DMA_Abort+0x600>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d045      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a40      	ldr	r2, [pc, #256]	; (800834c <HAL_DMA_Abort+0x604>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d040      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a3e      	ldr	r2, [pc, #248]	; (8008350 <HAL_DMA_Abort+0x608>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d03b      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3d      	ldr	r2, [pc, #244]	; (8008354 <HAL_DMA_Abort+0x60c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d036      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a3b      	ldr	r2, [pc, #236]	; (8008358 <HAL_DMA_Abort+0x610>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d031      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3a      	ldr	r2, [pc, #232]	; (800835c <HAL_DMA_Abort+0x614>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d02c      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a38      	ldr	r2, [pc, #224]	; (8008360 <HAL_DMA_Abort+0x618>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d027      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a37      	ldr	r2, [pc, #220]	; (8008364 <HAL_DMA_Abort+0x61c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d022      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a35      	ldr	r2, [pc, #212]	; (8008368 <HAL_DMA_Abort+0x620>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01d      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a34      	ldr	r2, [pc, #208]	; (800836c <HAL_DMA_Abort+0x624>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d018      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a32      	ldr	r2, [pc, #200]	; (8008370 <HAL_DMA_Abort+0x628>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a31      	ldr	r2, [pc, #196]	; (8008374 <HAL_DMA_Abort+0x62c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00e      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a2f      	ldr	r2, [pc, #188]	; (8008378 <HAL_DMA_Abort+0x630>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d009      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a2e      	ldr	r2, [pc, #184]	; (800837c <HAL_DMA_Abort+0x634>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d004      	beq.n	80082d2 <HAL_DMA_Abort+0x58a>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2c      	ldr	r2, [pc, #176]	; (8008380 <HAL_DMA_Abort+0x638>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d101      	bne.n	80082d6 <HAL_DMA_Abort+0x58e>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <HAL_DMA_Abort+0x590>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d015      	beq.n	8008308 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00c      	beq.n	8008308 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008306:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	40020010 	.word	0x40020010
 8008328:	40020028 	.word	0x40020028
 800832c:	40020040 	.word	0x40020040
 8008330:	40020058 	.word	0x40020058
 8008334:	40020070 	.word	0x40020070
 8008338:	40020088 	.word	0x40020088
 800833c:	400200a0 	.word	0x400200a0
 8008340:	400200b8 	.word	0x400200b8
 8008344:	40020410 	.word	0x40020410
 8008348:	40020428 	.word	0x40020428
 800834c:	40020440 	.word	0x40020440
 8008350:	40020458 	.word	0x40020458
 8008354:	40020470 	.word	0x40020470
 8008358:	40020488 	.word	0x40020488
 800835c:	400204a0 	.word	0x400204a0
 8008360:	400204b8 	.word	0x400204b8
 8008364:	58025408 	.word	0x58025408
 8008368:	5802541c 	.word	0x5802541c
 800836c:	58025430 	.word	0x58025430
 8008370:	58025444 	.word	0x58025444
 8008374:	58025458 	.word	0x58025458
 8008378:	5802546c 	.word	0x5802546c
 800837c:	58025480 	.word	0x58025480
 8008380:	58025494 	.word	0x58025494

08008384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e237      	b.n	8008806 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d004      	beq.n	80083ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2280      	movs	r2, #128	; 0x80
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e22c      	b.n	8008806 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a5c      	ldr	r2, [pc, #368]	; (8008524 <HAL_DMA_Abort_IT+0x1a0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d04a      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a5b      	ldr	r2, [pc, #364]	; (8008528 <HAL_DMA_Abort_IT+0x1a4>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d045      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a59      	ldr	r2, [pc, #356]	; (800852c <HAL_DMA_Abort_IT+0x1a8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d040      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a58      	ldr	r2, [pc, #352]	; (8008530 <HAL_DMA_Abort_IT+0x1ac>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d03b      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a56      	ldr	r2, [pc, #344]	; (8008534 <HAL_DMA_Abort_IT+0x1b0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d036      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a55      	ldr	r2, [pc, #340]	; (8008538 <HAL_DMA_Abort_IT+0x1b4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d031      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a53      	ldr	r2, [pc, #332]	; (800853c <HAL_DMA_Abort_IT+0x1b8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d02c      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a52      	ldr	r2, [pc, #328]	; (8008540 <HAL_DMA_Abort_IT+0x1bc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d027      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a50      	ldr	r2, [pc, #320]	; (8008544 <HAL_DMA_Abort_IT+0x1c0>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d022      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a4f      	ldr	r2, [pc, #316]	; (8008548 <HAL_DMA_Abort_IT+0x1c4>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d01d      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a4d      	ldr	r2, [pc, #308]	; (800854c <HAL_DMA_Abort_IT+0x1c8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d018      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a4c      	ldr	r2, [pc, #304]	; (8008550 <HAL_DMA_Abort_IT+0x1cc>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d013      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a4a      	ldr	r2, [pc, #296]	; (8008554 <HAL_DMA_Abort_IT+0x1d0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00e      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a49      	ldr	r2, [pc, #292]	; (8008558 <HAL_DMA_Abort_IT+0x1d4>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a47      	ldr	r2, [pc, #284]	; (800855c <HAL_DMA_Abort_IT+0x1d8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d004      	beq.n	800844c <HAL_DMA_Abort_IT+0xc8>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a46      	ldr	r2, [pc, #280]	; (8008560 <HAL_DMA_Abort_IT+0x1dc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d101      	bne.n	8008450 <HAL_DMA_Abort_IT+0xcc>
 800844c:	2301      	movs	r3, #1
 800844e:	e000      	b.n	8008452 <HAL_DMA_Abort_IT+0xce>
 8008450:	2300      	movs	r3, #0
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8086 	beq.w	8008564 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2204      	movs	r2, #4
 800845c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a2f      	ldr	r2, [pc, #188]	; (8008524 <HAL_DMA_Abort_IT+0x1a0>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d04a      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a2e      	ldr	r2, [pc, #184]	; (8008528 <HAL_DMA_Abort_IT+0x1a4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d045      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a2c      	ldr	r2, [pc, #176]	; (800852c <HAL_DMA_Abort_IT+0x1a8>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d040      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a2b      	ldr	r2, [pc, #172]	; (8008530 <HAL_DMA_Abort_IT+0x1ac>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d03b      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a29      	ldr	r2, [pc, #164]	; (8008534 <HAL_DMA_Abort_IT+0x1b0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d036      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a28      	ldr	r2, [pc, #160]	; (8008538 <HAL_DMA_Abort_IT+0x1b4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d031      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a26      	ldr	r2, [pc, #152]	; (800853c <HAL_DMA_Abort_IT+0x1b8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d02c      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a25      	ldr	r2, [pc, #148]	; (8008540 <HAL_DMA_Abort_IT+0x1bc>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d027      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a23      	ldr	r2, [pc, #140]	; (8008544 <HAL_DMA_Abort_IT+0x1c0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d022      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a22      	ldr	r2, [pc, #136]	; (8008548 <HAL_DMA_Abort_IT+0x1c4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d01d      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a20      	ldr	r2, [pc, #128]	; (800854c <HAL_DMA_Abort_IT+0x1c8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d018      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <HAL_DMA_Abort_IT+0x1cc>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d013      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <HAL_DMA_Abort_IT+0x1d0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00e      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <HAL_DMA_Abort_IT+0x1d4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	; (800855c <HAL_DMA_Abort_IT+0x1d8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_DMA_Abort_IT+0x17c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a19      	ldr	r2, [pc, #100]	; (8008560 <HAL_DMA_Abort_IT+0x1dc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d108      	bne.n	8008512 <HAL_DMA_Abort_IT+0x18e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0201 	bic.w	r2, r2, #1
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e178      	b.n	8008804 <HAL_DMA_Abort_IT+0x480>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0201 	bic.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	e16f      	b.n	8008804 <HAL_DMA_Abort_IT+0x480>
 8008524:	40020010 	.word	0x40020010
 8008528:	40020028 	.word	0x40020028
 800852c:	40020040 	.word	0x40020040
 8008530:	40020058 	.word	0x40020058
 8008534:	40020070 	.word	0x40020070
 8008538:	40020088 	.word	0x40020088
 800853c:	400200a0 	.word	0x400200a0
 8008540:	400200b8 	.word	0x400200b8
 8008544:	40020410 	.word	0x40020410
 8008548:	40020428 	.word	0x40020428
 800854c:	40020440 	.word	0x40020440
 8008550:	40020458 	.word	0x40020458
 8008554:	40020470 	.word	0x40020470
 8008558:	40020488 	.word	0x40020488
 800855c:	400204a0 	.word	0x400204a0
 8008560:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 020e 	bic.w	r2, r2, #14
 8008572:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a6c      	ldr	r2, [pc, #432]	; (800872c <HAL_DMA_Abort_IT+0x3a8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d04a      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a6b      	ldr	r2, [pc, #428]	; (8008730 <HAL_DMA_Abort_IT+0x3ac>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d045      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a69      	ldr	r2, [pc, #420]	; (8008734 <HAL_DMA_Abort_IT+0x3b0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d040      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a68      	ldr	r2, [pc, #416]	; (8008738 <HAL_DMA_Abort_IT+0x3b4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d03b      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a66      	ldr	r2, [pc, #408]	; (800873c <HAL_DMA_Abort_IT+0x3b8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d036      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a65      	ldr	r2, [pc, #404]	; (8008740 <HAL_DMA_Abort_IT+0x3bc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d031      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a63      	ldr	r2, [pc, #396]	; (8008744 <HAL_DMA_Abort_IT+0x3c0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d02c      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a62      	ldr	r2, [pc, #392]	; (8008748 <HAL_DMA_Abort_IT+0x3c4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d027      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a60      	ldr	r2, [pc, #384]	; (800874c <HAL_DMA_Abort_IT+0x3c8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d022      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a5f      	ldr	r2, [pc, #380]	; (8008750 <HAL_DMA_Abort_IT+0x3cc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d01d      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a5d      	ldr	r2, [pc, #372]	; (8008754 <HAL_DMA_Abort_IT+0x3d0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d018      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a5c      	ldr	r2, [pc, #368]	; (8008758 <HAL_DMA_Abort_IT+0x3d4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a5a      	ldr	r2, [pc, #360]	; (800875c <HAL_DMA_Abort_IT+0x3d8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00e      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a59      	ldr	r2, [pc, #356]	; (8008760 <HAL_DMA_Abort_IT+0x3dc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d009      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a57      	ldr	r2, [pc, #348]	; (8008764 <HAL_DMA_Abort_IT+0x3e0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <HAL_DMA_Abort_IT+0x290>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a56      	ldr	r2, [pc, #344]	; (8008768 <HAL_DMA_Abort_IT+0x3e4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d108      	bne.n	8008626 <HAL_DMA_Abort_IT+0x2a2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0201 	bic.w	r2, r2, #1
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	e007      	b.n	8008636 <HAL_DMA_Abort_IT+0x2b2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0201 	bic.w	r2, r2, #1
 8008634:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a3c      	ldr	r2, [pc, #240]	; (800872c <HAL_DMA_Abort_IT+0x3a8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d072      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a3a      	ldr	r2, [pc, #232]	; (8008730 <HAL_DMA_Abort_IT+0x3ac>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d06d      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a39      	ldr	r2, [pc, #228]	; (8008734 <HAL_DMA_Abort_IT+0x3b0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d068      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a37      	ldr	r2, [pc, #220]	; (8008738 <HAL_DMA_Abort_IT+0x3b4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d063      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a36      	ldr	r2, [pc, #216]	; (800873c <HAL_DMA_Abort_IT+0x3b8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d05e      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a34      	ldr	r2, [pc, #208]	; (8008740 <HAL_DMA_Abort_IT+0x3bc>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d059      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a33      	ldr	r2, [pc, #204]	; (8008744 <HAL_DMA_Abort_IT+0x3c0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d054      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a31      	ldr	r2, [pc, #196]	; (8008748 <HAL_DMA_Abort_IT+0x3c4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d04f      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a30      	ldr	r2, [pc, #192]	; (800874c <HAL_DMA_Abort_IT+0x3c8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d04a      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a2e      	ldr	r2, [pc, #184]	; (8008750 <HAL_DMA_Abort_IT+0x3cc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d045      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <HAL_DMA_Abort_IT+0x3d0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d040      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a2b      	ldr	r2, [pc, #172]	; (8008758 <HAL_DMA_Abort_IT+0x3d4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d03b      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2a      	ldr	r2, [pc, #168]	; (800875c <HAL_DMA_Abort_IT+0x3d8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d036      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <HAL_DMA_Abort_IT+0x3dc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d031      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a27      	ldr	r2, [pc, #156]	; (8008764 <HAL_DMA_Abort_IT+0x3e0>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d02c      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a25      	ldr	r2, [pc, #148]	; (8008768 <HAL_DMA_Abort_IT+0x3e4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d027      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a24      	ldr	r2, [pc, #144]	; (800876c <HAL_DMA_Abort_IT+0x3e8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a22      	ldr	r2, [pc, #136]	; (8008770 <HAL_DMA_Abort_IT+0x3ec>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01d      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a21      	ldr	r2, [pc, #132]	; (8008774 <HAL_DMA_Abort_IT+0x3f0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1f      	ldr	r2, [pc, #124]	; (8008778 <HAL_DMA_Abort_IT+0x3f4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1e      	ldr	r2, [pc, #120]	; (800877c <HAL_DMA_Abort_IT+0x3f8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1c      	ldr	r2, [pc, #112]	; (8008780 <HAL_DMA_Abort_IT+0x3fc>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1b      	ldr	r2, [pc, #108]	; (8008784 <HAL_DMA_Abort_IT+0x400>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_DMA_Abort_IT+0x3a2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a19      	ldr	r2, [pc, #100]	; (8008788 <HAL_DMA_Abort_IT+0x404>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d132      	bne.n	800878c <HAL_DMA_Abort_IT+0x408>
 8008726:	2301      	movs	r3, #1
 8008728:	e031      	b.n	800878e <HAL_DMA_Abort_IT+0x40a>
 800872a:	bf00      	nop
 800872c:	40020010 	.word	0x40020010
 8008730:	40020028 	.word	0x40020028
 8008734:	40020040 	.word	0x40020040
 8008738:	40020058 	.word	0x40020058
 800873c:	40020070 	.word	0x40020070
 8008740:	40020088 	.word	0x40020088
 8008744:	400200a0 	.word	0x400200a0
 8008748:	400200b8 	.word	0x400200b8
 800874c:	40020410 	.word	0x40020410
 8008750:	40020428 	.word	0x40020428
 8008754:	40020440 	.word	0x40020440
 8008758:	40020458 	.word	0x40020458
 800875c:	40020470 	.word	0x40020470
 8008760:	40020488 	.word	0x40020488
 8008764:	400204a0 	.word	0x400204a0
 8008768:	400204b8 	.word	0x400204b8
 800876c:	58025408 	.word	0x58025408
 8008770:	5802541c 	.word	0x5802541c
 8008774:	58025430 	.word	0x58025430
 8008778:	58025444 	.word	0x58025444
 800877c:	58025458 	.word	0x58025458
 8008780:	5802546c 	.word	0x5802546c
 8008784:	58025480 	.word	0x58025480
 8008788:	58025494 	.word	0x58025494
 800878c:	2300      	movs	r3, #0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d028      	beq.n	80087e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	2201      	movs	r2, #1
 80087b2:	409a      	lsls	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80087c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop

08008810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	; 0x28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800881c:	4b67      	ldr	r3, [pc, #412]	; (80089bc <HAL_DMA_IRQHandler+0x1ac>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a67      	ldr	r2, [pc, #412]	; (80089c0 <HAL_DMA_IRQHandler+0x1b0>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	0a9b      	lsrs	r3, r3, #10
 8008828:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008834:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a5f      	ldr	r2, [pc, #380]	; (80089c4 <HAL_DMA_IRQHandler+0x1b4>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d04a      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a5d      	ldr	r2, [pc, #372]	; (80089c8 <HAL_DMA_IRQHandler+0x1b8>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d045      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a5c      	ldr	r2, [pc, #368]	; (80089cc <HAL_DMA_IRQHandler+0x1bc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d040      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a5a      	ldr	r2, [pc, #360]	; (80089d0 <HAL_DMA_IRQHandler+0x1c0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d03b      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a59      	ldr	r2, [pc, #356]	; (80089d4 <HAL_DMA_IRQHandler+0x1c4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d036      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a57      	ldr	r2, [pc, #348]	; (80089d8 <HAL_DMA_IRQHandler+0x1c8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d031      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a56      	ldr	r2, [pc, #344]	; (80089dc <HAL_DMA_IRQHandler+0x1cc>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d02c      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a54      	ldr	r2, [pc, #336]	; (80089e0 <HAL_DMA_IRQHandler+0x1d0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d027      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a53      	ldr	r2, [pc, #332]	; (80089e4 <HAL_DMA_IRQHandler+0x1d4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d022      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a51      	ldr	r2, [pc, #324]	; (80089e8 <HAL_DMA_IRQHandler+0x1d8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01d      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a50      	ldr	r2, [pc, #320]	; (80089ec <HAL_DMA_IRQHandler+0x1dc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d018      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a4e      	ldr	r2, [pc, #312]	; (80089f0 <HAL_DMA_IRQHandler+0x1e0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a4d      	ldr	r2, [pc, #308]	; (80089f4 <HAL_DMA_IRQHandler+0x1e4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a4b      	ldr	r2, [pc, #300]	; (80089f8 <HAL_DMA_IRQHandler+0x1e8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a4a      	ldr	r2, [pc, #296]	; (80089fc <HAL_DMA_IRQHandler+0x1ec>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <HAL_DMA_IRQHandler+0xd2>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a48      	ldr	r2, [pc, #288]	; (8008a00 <HAL_DMA_IRQHandler+0x1f0>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <HAL_DMA_IRQHandler+0xd6>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <HAL_DMA_IRQHandler+0xd8>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 842b 	beq.w	8009144 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	2208      	movs	r2, #8
 80088f8:	409a      	lsls	r2, r3
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	4013      	ands	r3, r2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80a2 	beq.w	8008a48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a2e      	ldr	r2, [pc, #184]	; (80089c4 <HAL_DMA_IRQHandler+0x1b4>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d04a      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a2d      	ldr	r2, [pc, #180]	; (80089c8 <HAL_DMA_IRQHandler+0x1b8>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d045      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a2b      	ldr	r2, [pc, #172]	; (80089cc <HAL_DMA_IRQHandler+0x1bc>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d040      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a2a      	ldr	r2, [pc, #168]	; (80089d0 <HAL_DMA_IRQHandler+0x1c0>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d03b      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a28      	ldr	r2, [pc, #160]	; (80089d4 <HAL_DMA_IRQHandler+0x1c4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d036      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a27      	ldr	r2, [pc, #156]	; (80089d8 <HAL_DMA_IRQHandler+0x1c8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d031      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a25      	ldr	r2, [pc, #148]	; (80089dc <HAL_DMA_IRQHandler+0x1cc>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d02c      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a24      	ldr	r2, [pc, #144]	; (80089e0 <HAL_DMA_IRQHandler+0x1d0>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d027      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a22      	ldr	r2, [pc, #136]	; (80089e4 <HAL_DMA_IRQHandler+0x1d4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d022      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a21      	ldr	r2, [pc, #132]	; (80089e8 <HAL_DMA_IRQHandler+0x1d8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d01d      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1f      	ldr	r2, [pc, #124]	; (80089ec <HAL_DMA_IRQHandler+0x1dc>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d018      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <HAL_DMA_IRQHandler+0x1e0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d013      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <HAL_DMA_IRQHandler+0x1e4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <HAL_DMA_IRQHandler+0x1e8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d009      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	; (80089fc <HAL_DMA_IRQHandler+0x1ec>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x194>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <HAL_DMA_IRQHandler+0x1f0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d12f      	bne.n	8008a04 <HAL_DMA_IRQHandler+0x1f4>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf14      	ite	ne
 80089b2:	2301      	movne	r3, #1
 80089b4:	2300      	moveq	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	e02e      	b.n	8008a18 <HAL_DMA_IRQHandler+0x208>
 80089ba:	bf00      	nop
 80089bc:	24000004 	.word	0x24000004
 80089c0:	1b4e81b5 	.word	0x1b4e81b5
 80089c4:	40020010 	.word	0x40020010
 80089c8:	40020028 	.word	0x40020028
 80089cc:	40020040 	.word	0x40020040
 80089d0:	40020058 	.word	0x40020058
 80089d4:	40020070 	.word	0x40020070
 80089d8:	40020088 	.word	0x40020088
 80089dc:	400200a0 	.word	0x400200a0
 80089e0:	400200b8 	.word	0x400200b8
 80089e4:	40020410 	.word	0x40020410
 80089e8:	40020428 	.word	0x40020428
 80089ec:	40020440 	.word	0x40020440
 80089f0:	40020458 	.word	0x40020458
 80089f4:	40020470 	.word	0x40020470
 80089f8:	40020488 	.word	0x40020488
 80089fc:	400204a0 	.word	0x400204a0
 8008a00:	400204b8 	.word	0x400204b8
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bf14      	ite	ne
 8008a12:	2301      	movne	r3, #1
 8008a14:	2300      	moveq	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d015      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0204 	bic.w	r2, r2, #4
 8008a2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a30:	f003 031f 	and.w	r3, r3, #31
 8008a34:	2208      	movs	r2, #8
 8008a36:	409a      	lsls	r2, r3
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a40:	f043 0201 	orr.w	r2, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d06e      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a69      	ldr	r2, [pc, #420]	; (8008c08 <HAL_DMA_IRQHandler+0x3f8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d04a      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a67      	ldr	r2, [pc, #412]	; (8008c0c <HAL_DMA_IRQHandler+0x3fc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d045      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a66      	ldr	r2, [pc, #408]	; (8008c10 <HAL_DMA_IRQHandler+0x400>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d040      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a64      	ldr	r2, [pc, #400]	; (8008c14 <HAL_DMA_IRQHandler+0x404>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d03b      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a63      	ldr	r2, [pc, #396]	; (8008c18 <HAL_DMA_IRQHandler+0x408>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d036      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a61      	ldr	r2, [pc, #388]	; (8008c1c <HAL_DMA_IRQHandler+0x40c>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d031      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a60      	ldr	r2, [pc, #384]	; (8008c20 <HAL_DMA_IRQHandler+0x410>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d02c      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a5e      	ldr	r2, [pc, #376]	; (8008c24 <HAL_DMA_IRQHandler+0x414>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d027      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a5d      	ldr	r2, [pc, #372]	; (8008c28 <HAL_DMA_IRQHandler+0x418>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d022      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a5b      	ldr	r2, [pc, #364]	; (8008c2c <HAL_DMA_IRQHandler+0x41c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d01d      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a5a      	ldr	r2, [pc, #360]	; (8008c30 <HAL_DMA_IRQHandler+0x420>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d018      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a58      	ldr	r2, [pc, #352]	; (8008c34 <HAL_DMA_IRQHandler+0x424>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d013      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a57      	ldr	r2, [pc, #348]	; (8008c38 <HAL_DMA_IRQHandler+0x428>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00e      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a55      	ldr	r2, [pc, #340]	; (8008c3c <HAL_DMA_IRQHandler+0x42c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d009      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a54      	ldr	r2, [pc, #336]	; (8008c40 <HAL_DMA_IRQHandler+0x430>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d004      	beq.n	8008afe <HAL_DMA_IRQHandler+0x2ee>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a52      	ldr	r2, [pc, #328]	; (8008c44 <HAL_DMA_IRQHandler+0x434>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d10a      	bne.n	8008b14 <HAL_DMA_IRQHandler+0x304>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf14      	ite	ne
 8008b0c:	2301      	movne	r3, #1
 8008b0e:	2300      	moveq	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	e003      	b.n	8008b1c <HAL_DMA_IRQHandler+0x30c>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00d      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	2201      	movs	r2, #1
 8008b2a:	409a      	lsls	r2, r3
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b34:	f043 0202 	orr.w	r2, r3, #2
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b40:	f003 031f 	and.w	r3, r3, #31
 8008b44:	2204      	movs	r2, #4
 8008b46:	409a      	lsls	r2, r3
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 808f 	beq.w	8008c70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a2c      	ldr	r2, [pc, #176]	; (8008c08 <HAL_DMA_IRQHandler+0x3f8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d04a      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <HAL_DMA_IRQHandler+0x3fc>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d045      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a29      	ldr	r2, [pc, #164]	; (8008c10 <HAL_DMA_IRQHandler+0x400>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d040      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a27      	ldr	r2, [pc, #156]	; (8008c14 <HAL_DMA_IRQHandler+0x404>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d03b      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a26      	ldr	r2, [pc, #152]	; (8008c18 <HAL_DMA_IRQHandler+0x408>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d036      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a24      	ldr	r2, [pc, #144]	; (8008c1c <HAL_DMA_IRQHandler+0x40c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d031      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a23      	ldr	r2, [pc, #140]	; (8008c20 <HAL_DMA_IRQHandler+0x410>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d02c      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a21      	ldr	r2, [pc, #132]	; (8008c24 <HAL_DMA_IRQHandler+0x414>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d027      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a20      	ldr	r2, [pc, #128]	; (8008c28 <HAL_DMA_IRQHandler+0x418>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d022      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <HAL_DMA_IRQHandler+0x41c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d01d      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a1d      	ldr	r2, [pc, #116]	; (8008c30 <HAL_DMA_IRQHandler+0x420>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d018      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a1b      	ldr	r2, [pc, #108]	; (8008c34 <HAL_DMA_IRQHandler+0x424>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d013      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a1a      	ldr	r2, [pc, #104]	; (8008c38 <HAL_DMA_IRQHandler+0x428>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00e      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a18      	ldr	r2, [pc, #96]	; (8008c3c <HAL_DMA_IRQHandler+0x42c>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d009      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a17      	ldr	r2, [pc, #92]	; (8008c40 <HAL_DMA_IRQHandler+0x430>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d004      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x3e2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a15      	ldr	r2, [pc, #84]	; (8008c44 <HAL_DMA_IRQHandler+0x434>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d12a      	bne.n	8008c48 <HAL_DMA_IRQHandler+0x438>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bf14      	ite	ne
 8008c00:	2301      	movne	r3, #1
 8008c02:	2300      	moveq	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	e023      	b.n	8008c50 <HAL_DMA_IRQHandler+0x440>
 8008c08:	40020010 	.word	0x40020010
 8008c0c:	40020028 	.word	0x40020028
 8008c10:	40020040 	.word	0x40020040
 8008c14:	40020058 	.word	0x40020058
 8008c18:	40020070 	.word	0x40020070
 8008c1c:	40020088 	.word	0x40020088
 8008c20:	400200a0 	.word	0x400200a0
 8008c24:	400200b8 	.word	0x400200b8
 8008c28:	40020410 	.word	0x40020410
 8008c2c:	40020428 	.word	0x40020428
 8008c30:	40020440 	.word	0x40020440
 8008c34:	40020458 	.word	0x40020458
 8008c38:	40020470 	.word	0x40020470
 8008c3c:	40020488 	.word	0x40020488
 8008c40:	400204a0 	.word	0x400204a0
 8008c44:	400204b8 	.word	0x400204b8
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00d      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	2204      	movs	r2, #4
 8008c5e:	409a      	lsls	r2, r3
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c68:	f043 0204 	orr.w	r2, r3, #4
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	2210      	movs	r2, #16
 8008c7a:	409a      	lsls	r2, r3
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 80a6 	beq.w	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a85      	ldr	r2, [pc, #532]	; (8008ea0 <HAL_DMA_IRQHandler+0x690>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d04a      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a83      	ldr	r2, [pc, #524]	; (8008ea4 <HAL_DMA_IRQHandler+0x694>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d045      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a82      	ldr	r2, [pc, #520]	; (8008ea8 <HAL_DMA_IRQHandler+0x698>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d040      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a80      	ldr	r2, [pc, #512]	; (8008eac <HAL_DMA_IRQHandler+0x69c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d03b      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a7f      	ldr	r2, [pc, #508]	; (8008eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d036      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a7d      	ldr	r2, [pc, #500]	; (8008eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d031      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a7c      	ldr	r2, [pc, #496]	; (8008eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d02c      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a7a      	ldr	r2, [pc, #488]	; (8008ebc <HAL_DMA_IRQHandler+0x6ac>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d027      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a79      	ldr	r2, [pc, #484]	; (8008ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d022      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a77      	ldr	r2, [pc, #476]	; (8008ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d01d      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a76      	ldr	r2, [pc, #472]	; (8008ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d018      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a74      	ldr	r2, [pc, #464]	; (8008ecc <HAL_DMA_IRQHandler+0x6bc>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d013      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a73      	ldr	r2, [pc, #460]	; (8008ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00e      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a71      	ldr	r2, [pc, #452]	; (8008ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d009      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a70      	ldr	r2, [pc, #448]	; (8008ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d004      	beq.n	8008d26 <HAL_DMA_IRQHandler+0x516>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a6e      	ldr	r2, [pc, #440]	; (8008edc <HAL_DMA_IRQHandler+0x6cc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d10a      	bne.n	8008d3c <HAL_DMA_IRQHandler+0x52c>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bf14      	ite	ne
 8008d34:	2301      	movne	r3, #1
 8008d36:	2300      	moveq	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	e009      	b.n	8008d50 <HAL_DMA_IRQHandler+0x540>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	2300      	moveq	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d03e      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d58:	f003 031f 	and.w	r3, r3, #31
 8008d5c:	2210      	movs	r2, #16
 8008d5e:	409a      	lsls	r2, r3
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d018      	beq.n	8008da4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d024      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
 8008d90:	e01f      	b.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01b      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
 8008da2:	e016      	b.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d107      	bne.n	8008dc2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0208 	bic.w	r2, r2, #8
 8008dc0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	2220      	movs	r2, #32
 8008ddc:	409a      	lsls	r2, r3
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8110 	beq.w	8009008 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a2c      	ldr	r2, [pc, #176]	; (8008ea0 <HAL_DMA_IRQHandler+0x690>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d04a      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a2b      	ldr	r2, [pc, #172]	; (8008ea4 <HAL_DMA_IRQHandler+0x694>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d045      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a29      	ldr	r2, [pc, #164]	; (8008ea8 <HAL_DMA_IRQHandler+0x698>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d040      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a28      	ldr	r2, [pc, #160]	; (8008eac <HAL_DMA_IRQHandler+0x69c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d03b      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <HAL_DMA_IRQHandler+0x6a0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d036      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a25      	ldr	r2, [pc, #148]	; (8008eb4 <HAL_DMA_IRQHandler+0x6a4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d031      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a23      	ldr	r2, [pc, #140]	; (8008eb8 <HAL_DMA_IRQHandler+0x6a8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d02c      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a22      	ldr	r2, [pc, #136]	; (8008ebc <HAL_DMA_IRQHandler+0x6ac>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d027      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a20      	ldr	r2, [pc, #128]	; (8008ec0 <HAL_DMA_IRQHandler+0x6b0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d022      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <HAL_DMA_IRQHandler+0x6b4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d01d      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1d      	ldr	r2, [pc, #116]	; (8008ec8 <HAL_DMA_IRQHandler+0x6b8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d018      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <HAL_DMA_IRQHandler+0x6bc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d013      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <HAL_DMA_IRQHandler+0x6c0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00e      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <HAL_DMA_IRQHandler+0x6c4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d009      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a17      	ldr	r2, [pc, #92]	; (8008ed8 <HAL_DMA_IRQHandler+0x6c8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d004      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x678>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a16      	ldr	r2, [pc, #88]	; (8008edc <HAL_DMA_IRQHandler+0x6cc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d12b      	bne.n	8008ee0 <HAL_DMA_IRQHandler+0x6d0>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0310 	and.w	r3, r3, #16
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bf14      	ite	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	2300      	moveq	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	e02a      	b.n	8008ef4 <HAL_DMA_IRQHandler+0x6e4>
 8008e9e:	bf00      	nop
 8008ea0:	40020010 	.word	0x40020010
 8008ea4:	40020028 	.word	0x40020028
 8008ea8:	40020040 	.word	0x40020040
 8008eac:	40020058 	.word	0x40020058
 8008eb0:	40020070 	.word	0x40020070
 8008eb4:	40020088 	.word	0x40020088
 8008eb8:	400200a0 	.word	0x400200a0
 8008ebc:	400200b8 	.word	0x400200b8
 8008ec0:	40020410 	.word	0x40020410
 8008ec4:	40020428 	.word	0x40020428
 8008ec8:	40020440 	.word	0x40020440
 8008ecc:	40020458 	.word	0x40020458
 8008ed0:	40020470 	.word	0x40020470
 8008ed4:	40020488 	.word	0x40020488
 8008ed8:	400204a0 	.word	0x400204a0
 8008edc:	400204b8 	.word	0x400204b8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bf14      	ite	ne
 8008eee:	2301      	movne	r3, #1
 8008ef0:	2300      	moveq	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8087 	beq.w	8009008 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efe:	f003 031f 	and.w	r3, r3, #31
 8008f02:	2220      	movs	r2, #32
 8008f04:	409a      	lsls	r2, r3
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d139      	bne.n	8008f8a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0216 	bic.w	r2, r2, #22
 8008f24:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695a      	ldr	r2, [r3, #20]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f34:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <HAL_DMA_IRQHandler+0x736>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0208 	bic.w	r2, r2, #8
 8008f54:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	223f      	movs	r2, #63	; 0x3f
 8008f60:	409a      	lsls	r2, r3
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 834a 	beq.w	8009614 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	4798      	blx	r3
          }
          return;
 8008f88:	e344      	b.n	8009614 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d018      	beq.n	8008fca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d108      	bne.n	8008fb8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d02c      	beq.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3
 8008fb6:	e027      	b.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d023      	beq.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	4798      	blx	r3
 8008fc8:	e01e      	b.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10f      	bne.n	8008ff8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0210 	bic.w	r2, r2, #16
 8008fe6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8306 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 8088 	beq.w	8009130 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2204      	movs	r2, #4
 8009024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a7a      	ldr	r2, [pc, #488]	; (8009218 <HAL_DMA_IRQHandler+0xa08>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d04a      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a79      	ldr	r2, [pc, #484]	; (800921c <HAL_DMA_IRQHandler+0xa0c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d045      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a77      	ldr	r2, [pc, #476]	; (8009220 <HAL_DMA_IRQHandler+0xa10>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d040      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a76      	ldr	r2, [pc, #472]	; (8009224 <HAL_DMA_IRQHandler+0xa14>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d03b      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a74      	ldr	r2, [pc, #464]	; (8009228 <HAL_DMA_IRQHandler+0xa18>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d036      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a73      	ldr	r2, [pc, #460]	; (800922c <HAL_DMA_IRQHandler+0xa1c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d031      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a71      	ldr	r2, [pc, #452]	; (8009230 <HAL_DMA_IRQHandler+0xa20>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d02c      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a70      	ldr	r2, [pc, #448]	; (8009234 <HAL_DMA_IRQHandler+0xa24>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d027      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a6e      	ldr	r2, [pc, #440]	; (8009238 <HAL_DMA_IRQHandler+0xa28>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d022      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a6d      	ldr	r2, [pc, #436]	; (800923c <HAL_DMA_IRQHandler+0xa2c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d01d      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a6b      	ldr	r2, [pc, #428]	; (8009240 <HAL_DMA_IRQHandler+0xa30>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d018      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a6a      	ldr	r2, [pc, #424]	; (8009244 <HAL_DMA_IRQHandler+0xa34>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d013      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a68      	ldr	r2, [pc, #416]	; (8009248 <HAL_DMA_IRQHandler+0xa38>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00e      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a67      	ldr	r2, [pc, #412]	; (800924c <HAL_DMA_IRQHandler+0xa3c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d009      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a65      	ldr	r2, [pc, #404]	; (8009250 <HAL_DMA_IRQHandler+0xa40>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d004      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x8b8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a64      	ldr	r2, [pc, #400]	; (8009254 <HAL_DMA_IRQHandler+0xa44>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d108      	bne.n	80090da <HAL_DMA_IRQHandler+0x8ca>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0201 	bic.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	e007      	b.n	80090ea <HAL_DMA_IRQHandler+0x8da>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d307      	bcc.n	8009106 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1f2      	bne.n	80090ea <HAL_DMA_IRQHandler+0x8da>
 8009104:	e000      	b.n	8009108 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009106:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2203      	movs	r2, #3
 800911a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800911e:	e003      	b.n	8009128 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8272 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
 8009142:	e26c      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a43      	ldr	r2, [pc, #268]	; (8009258 <HAL_DMA_IRQHandler+0xa48>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d022      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a42      	ldr	r2, [pc, #264]	; (800925c <HAL_DMA_IRQHandler+0xa4c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d01d      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a40      	ldr	r2, [pc, #256]	; (8009260 <HAL_DMA_IRQHandler+0xa50>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d018      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a3f      	ldr	r2, [pc, #252]	; (8009264 <HAL_DMA_IRQHandler+0xa54>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d013      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a3d      	ldr	r2, [pc, #244]	; (8009268 <HAL_DMA_IRQHandler+0xa58>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00e      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a3c      	ldr	r2, [pc, #240]	; (800926c <HAL_DMA_IRQHandler+0xa5c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d009      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a3a      	ldr	r2, [pc, #232]	; (8009270 <HAL_DMA_IRQHandler+0xa60>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d004      	beq.n	8009194 <HAL_DMA_IRQHandler+0x984>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a39      	ldr	r2, [pc, #228]	; (8009274 <HAL_DMA_IRQHandler+0xa64>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d101      	bne.n	8009198 <HAL_DMA_IRQHandler+0x988>
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <HAL_DMA_IRQHandler+0x98a>
 8009198:	2300      	movs	r3, #0
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 823f 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ac:	f003 031f 	and.w	r3, r3, #31
 80091b0:	2204      	movs	r2, #4
 80091b2:	409a      	lsls	r2, r3
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4013      	ands	r3, r2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 80cd 	beq.w	8009358 <HAL_DMA_IRQHandler+0xb48>
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80c7 	beq.w	8009358 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ce:	f003 031f 	and.w	r3, r3, #31
 80091d2:	2204      	movs	r2, #4
 80091d4:	409a      	lsls	r2, r3
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d049      	beq.n	8009278 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 8210 	beq.w	8009618 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009200:	e20a      	b.n	8009618 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 8206 	beq.w	8009618 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009214:	e200      	b.n	8009618 <HAL_DMA_IRQHandler+0xe08>
 8009216:	bf00      	nop
 8009218:	40020010 	.word	0x40020010
 800921c:	40020028 	.word	0x40020028
 8009220:	40020040 	.word	0x40020040
 8009224:	40020058 	.word	0x40020058
 8009228:	40020070 	.word	0x40020070
 800922c:	40020088 	.word	0x40020088
 8009230:	400200a0 	.word	0x400200a0
 8009234:	400200b8 	.word	0x400200b8
 8009238:	40020410 	.word	0x40020410
 800923c:	40020428 	.word	0x40020428
 8009240:	40020440 	.word	0x40020440
 8009244:	40020458 	.word	0x40020458
 8009248:	40020470 	.word	0x40020470
 800924c:	40020488 	.word	0x40020488
 8009250:	400204a0 	.word	0x400204a0
 8009254:	400204b8 	.word	0x400204b8
 8009258:	58025408 	.word	0x58025408
 800925c:	5802541c 	.word	0x5802541c
 8009260:	58025430 	.word	0x58025430
 8009264:	58025444 	.word	0x58025444
 8009268:	58025458 	.word	0x58025458
 800926c:	5802546c 	.word	0x5802546c
 8009270:	58025480 	.word	0x58025480
 8009274:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d160      	bne.n	8009344 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a7f      	ldr	r2, [pc, #508]	; (8009484 <HAL_DMA_IRQHandler+0xc74>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d04a      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a7d      	ldr	r2, [pc, #500]	; (8009488 <HAL_DMA_IRQHandler+0xc78>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d045      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a7c      	ldr	r2, [pc, #496]	; (800948c <HAL_DMA_IRQHandler+0xc7c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d040      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a7a      	ldr	r2, [pc, #488]	; (8009490 <HAL_DMA_IRQHandler+0xc80>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d03b      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a79      	ldr	r2, [pc, #484]	; (8009494 <HAL_DMA_IRQHandler+0xc84>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d036      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a77      	ldr	r2, [pc, #476]	; (8009498 <HAL_DMA_IRQHandler+0xc88>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d031      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a76      	ldr	r2, [pc, #472]	; (800949c <HAL_DMA_IRQHandler+0xc8c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d02c      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a74      	ldr	r2, [pc, #464]	; (80094a0 <HAL_DMA_IRQHandler+0xc90>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d027      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a73      	ldr	r2, [pc, #460]	; (80094a4 <HAL_DMA_IRQHandler+0xc94>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d022      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a71      	ldr	r2, [pc, #452]	; (80094a8 <HAL_DMA_IRQHandler+0xc98>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d01d      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a70      	ldr	r2, [pc, #448]	; (80094ac <HAL_DMA_IRQHandler+0xc9c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d018      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a6e      	ldr	r2, [pc, #440]	; (80094b0 <HAL_DMA_IRQHandler+0xca0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d013      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a6d      	ldr	r2, [pc, #436]	; (80094b4 <HAL_DMA_IRQHandler+0xca4>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00e      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a6b      	ldr	r2, [pc, #428]	; (80094b8 <HAL_DMA_IRQHandler+0xca8>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d009      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a6a      	ldr	r2, [pc, #424]	; (80094bc <HAL_DMA_IRQHandler+0xcac>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d004      	beq.n	8009322 <HAL_DMA_IRQHandler+0xb12>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a68      	ldr	r2, [pc, #416]	; (80094c0 <HAL_DMA_IRQHandler+0xcb0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d108      	bne.n	8009334 <HAL_DMA_IRQHandler+0xb24>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0208 	bic.w	r2, r2, #8
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	e007      	b.n	8009344 <HAL_DMA_IRQHandler+0xb34>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0204 	bic.w	r2, r2, #4
 8009342:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8165 	beq.w	8009618 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009356:	e15f      	b.n	8009618 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800935c:	f003 031f 	and.w	r3, r3, #31
 8009360:	2202      	movs	r2, #2
 8009362:	409a      	lsls	r2, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	4013      	ands	r3, r2
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80c5 	beq.w	80094f8 <HAL_DMA_IRQHandler+0xce8>
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80bf 	beq.w	80094f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	2202      	movs	r2, #2
 8009384:	409a      	lsls	r2, r3
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d018      	beq.n	80093c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 813a 	beq.w	800961c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093b0:	e134      	b.n	800961c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8130 	beq.w	800961c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093c4:	e12a      	b.n	800961c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f003 0320 	and.w	r3, r3, #32
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f040 8089 	bne.w	80094e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a2b      	ldr	r2, [pc, #172]	; (8009484 <HAL_DMA_IRQHandler+0xc74>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d04a      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a29      	ldr	r2, [pc, #164]	; (8009488 <HAL_DMA_IRQHandler+0xc78>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d045      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a28      	ldr	r2, [pc, #160]	; (800948c <HAL_DMA_IRQHandler+0xc7c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d040      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a26      	ldr	r2, [pc, #152]	; (8009490 <HAL_DMA_IRQHandler+0xc80>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d03b      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a25      	ldr	r2, [pc, #148]	; (8009494 <HAL_DMA_IRQHandler+0xc84>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d036      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a23      	ldr	r2, [pc, #140]	; (8009498 <HAL_DMA_IRQHandler+0xc88>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d031      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a22      	ldr	r2, [pc, #136]	; (800949c <HAL_DMA_IRQHandler+0xc8c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d02c      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a20      	ldr	r2, [pc, #128]	; (80094a0 <HAL_DMA_IRQHandler+0xc90>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d027      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a1f      	ldr	r2, [pc, #124]	; (80094a4 <HAL_DMA_IRQHandler+0xc94>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d022      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1d      	ldr	r2, [pc, #116]	; (80094a8 <HAL_DMA_IRQHandler+0xc98>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d01d      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a1c      	ldr	r2, [pc, #112]	; (80094ac <HAL_DMA_IRQHandler+0xc9c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d018      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a1a      	ldr	r2, [pc, #104]	; (80094b0 <HAL_DMA_IRQHandler+0xca0>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d013      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <HAL_DMA_IRQHandler+0xca4>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00e      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <HAL_DMA_IRQHandler+0xca8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d009      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a16      	ldr	r2, [pc, #88]	; (80094bc <HAL_DMA_IRQHandler+0xcac>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d004      	beq.n	8009472 <HAL_DMA_IRQHandler+0xc62>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a14      	ldr	r2, [pc, #80]	; (80094c0 <HAL_DMA_IRQHandler+0xcb0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d128      	bne.n	80094c4 <HAL_DMA_IRQHandler+0xcb4>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0214 	bic.w	r2, r2, #20
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e027      	b.n	80094d4 <HAL_DMA_IRQHandler+0xcc4>
 8009484:	40020010 	.word	0x40020010
 8009488:	40020028 	.word	0x40020028
 800948c:	40020040 	.word	0x40020040
 8009490:	40020058 	.word	0x40020058
 8009494:	40020070 	.word	0x40020070
 8009498:	40020088 	.word	0x40020088
 800949c:	400200a0 	.word	0x400200a0
 80094a0:	400200b8 	.word	0x400200b8
 80094a4:	40020410 	.word	0x40020410
 80094a8:	40020428 	.word	0x40020428
 80094ac:	40020440 	.word	0x40020440
 80094b0:	40020458 	.word	0x40020458
 80094b4:	40020470 	.word	0x40020470
 80094b8:	40020488 	.word	0x40020488
 80094bc:	400204a0 	.word	0x400204a0
 80094c0:	400204b8 	.word	0x400204b8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 020a 	bic.w	r2, r2, #10
 80094d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8097 	beq.w	800961c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094f6:	e091      	b.n	800961c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	2208      	movs	r2, #8
 8009502:	409a      	lsls	r2, r3
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	4013      	ands	r3, r2
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8088 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8082 	beq.w	800961e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a41      	ldr	r2, [pc, #260]	; (8009624 <HAL_DMA_IRQHandler+0xe14>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d04a      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3f      	ldr	r2, [pc, #252]	; (8009628 <HAL_DMA_IRQHandler+0xe18>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d045      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a3e      	ldr	r2, [pc, #248]	; (800962c <HAL_DMA_IRQHandler+0xe1c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d040      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a3c      	ldr	r2, [pc, #240]	; (8009630 <HAL_DMA_IRQHandler+0xe20>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d03b      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a3b      	ldr	r2, [pc, #236]	; (8009634 <HAL_DMA_IRQHandler+0xe24>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d036      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a39      	ldr	r2, [pc, #228]	; (8009638 <HAL_DMA_IRQHandler+0xe28>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d031      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a38      	ldr	r2, [pc, #224]	; (800963c <HAL_DMA_IRQHandler+0xe2c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d02c      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a36      	ldr	r2, [pc, #216]	; (8009640 <HAL_DMA_IRQHandler+0xe30>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d027      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a35      	ldr	r2, [pc, #212]	; (8009644 <HAL_DMA_IRQHandler+0xe34>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d022      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a33      	ldr	r2, [pc, #204]	; (8009648 <HAL_DMA_IRQHandler+0xe38>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d01d      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a32      	ldr	r2, [pc, #200]	; (800964c <HAL_DMA_IRQHandler+0xe3c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d018      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a30      	ldr	r2, [pc, #192]	; (8009650 <HAL_DMA_IRQHandler+0xe40>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d013      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a2f      	ldr	r2, [pc, #188]	; (8009654 <HAL_DMA_IRQHandler+0xe44>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00e      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a2d      	ldr	r2, [pc, #180]	; (8009658 <HAL_DMA_IRQHandler+0xe48>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d009      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a2c      	ldr	r2, [pc, #176]	; (800965c <HAL_DMA_IRQHandler+0xe4c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d004      	beq.n	80095ba <HAL_DMA_IRQHandler+0xdaa>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a2a      	ldr	r2, [pc, #168]	; (8009660 <HAL_DMA_IRQHandler+0xe50>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d108      	bne.n	80095cc <HAL_DMA_IRQHandler+0xdbc>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 021c 	bic.w	r2, r2, #28
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	e007      	b.n	80095dc <HAL_DMA_IRQHandler+0xdcc>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 020e 	bic.w	r2, r2, #14
 80095da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e0:	f003 031f 	and.w	r3, r3, #31
 80095e4:	2201      	movs	r2, #1
 80095e6:	409a      	lsls	r2, r3
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	4798      	blx	r3
 8009612:	e004      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009614:	bf00      	nop
 8009616:	e002      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009618:	bf00      	nop
 800961a:	e000      	b.n	800961e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800961c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800961e:	3728      	adds	r7, #40	; 0x28
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40020010 	.word	0x40020010
 8009628:	40020028 	.word	0x40020028
 800962c:	40020040 	.word	0x40020040
 8009630:	40020058 	.word	0x40020058
 8009634:	40020070 	.word	0x40020070
 8009638:	40020088 	.word	0x40020088
 800963c:	400200a0 	.word	0x400200a0
 8009640:	400200b8 	.word	0x400200b8
 8009644:	40020410 	.word	0x40020410
 8009648:	40020428 	.word	0x40020428
 800964c:	40020440 	.word	0x40020440
 8009650:	40020458 	.word	0x40020458
 8009654:	40020470 	.word	0x40020470
 8009658:	40020488 	.word	0x40020488
 800965c:	400204a0 	.word	0x400204a0
 8009660:	400204b8 	.word	0x400204b8

08009664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a42      	ldr	r2, [pc, #264]	; (800977c <DMA_CalcBaseAndBitshift+0x118>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d04a      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a41      	ldr	r2, [pc, #260]	; (8009780 <DMA_CalcBaseAndBitshift+0x11c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d045      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a3f      	ldr	r2, [pc, #252]	; (8009784 <DMA_CalcBaseAndBitshift+0x120>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d040      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a3e      	ldr	r2, [pc, #248]	; (8009788 <DMA_CalcBaseAndBitshift+0x124>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d03b      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a3c      	ldr	r2, [pc, #240]	; (800978c <DMA_CalcBaseAndBitshift+0x128>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d036      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a3b      	ldr	r2, [pc, #236]	; (8009790 <DMA_CalcBaseAndBitshift+0x12c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d031      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a39      	ldr	r2, [pc, #228]	; (8009794 <DMA_CalcBaseAndBitshift+0x130>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d02c      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a38      	ldr	r2, [pc, #224]	; (8009798 <DMA_CalcBaseAndBitshift+0x134>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d027      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a36      	ldr	r2, [pc, #216]	; (800979c <DMA_CalcBaseAndBitshift+0x138>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d022      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a35      	ldr	r2, [pc, #212]	; (80097a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d01d      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a33      	ldr	r2, [pc, #204]	; (80097a4 <DMA_CalcBaseAndBitshift+0x140>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d018      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a32      	ldr	r2, [pc, #200]	; (80097a8 <DMA_CalcBaseAndBitshift+0x144>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d013      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a30      	ldr	r2, [pc, #192]	; (80097ac <DMA_CalcBaseAndBitshift+0x148>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00e      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a2f      	ldr	r2, [pc, #188]	; (80097b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d009      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a2d      	ldr	r2, [pc, #180]	; (80097b4 <DMA_CalcBaseAndBitshift+0x150>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <DMA_CalcBaseAndBitshift+0xa8>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a2c      	ldr	r2, [pc, #176]	; (80097b8 <DMA_CalcBaseAndBitshift+0x154>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d101      	bne.n	8009710 <DMA_CalcBaseAndBitshift+0xac>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <DMA_CalcBaseAndBitshift+0xae>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d024      	beq.n	8009760 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	3b10      	subs	r3, #16
 800971e:	4a27      	ldr	r2, [pc, #156]	; (80097bc <DMA_CalcBaseAndBitshift+0x158>)
 8009720:	fba2 2303 	umull	r2, r3, r2, r3
 8009724:	091b      	lsrs	r3, r3, #4
 8009726:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	4a24      	ldr	r2, [pc, #144]	; (80097c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8009730:	5cd3      	ldrb	r3, [r2, r3]
 8009732:	461a      	mov	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b03      	cmp	r3, #3
 800973c:	d908      	bls.n	8009750 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	4b1f      	ldr	r3, [pc, #124]	; (80097c4 <DMA_CalcBaseAndBitshift+0x160>)
 8009746:	4013      	ands	r3, r2
 8009748:	1d1a      	adds	r2, r3, #4
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	659a      	str	r2, [r3, #88]	; 0x58
 800974e:	e00d      	b.n	800976c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <DMA_CalcBaseAndBitshift+0x160>)
 8009758:	4013      	ands	r3, r2
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	6593      	str	r3, [r2, #88]	; 0x58
 800975e:	e005      	b.n	800976c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	40020010 	.word	0x40020010
 8009780:	40020028 	.word	0x40020028
 8009784:	40020040 	.word	0x40020040
 8009788:	40020058 	.word	0x40020058
 800978c:	40020070 	.word	0x40020070
 8009790:	40020088 	.word	0x40020088
 8009794:	400200a0 	.word	0x400200a0
 8009798:	400200b8 	.word	0x400200b8
 800979c:	40020410 	.word	0x40020410
 80097a0:	40020428 	.word	0x40020428
 80097a4:	40020440 	.word	0x40020440
 80097a8:	40020458 	.word	0x40020458
 80097ac:	40020470 	.word	0x40020470
 80097b0:	40020488 	.word	0x40020488
 80097b4:	400204a0 	.word	0x400204a0
 80097b8:	400204b8 	.word	0x400204b8
 80097bc:	aaaaaaab 	.word	0xaaaaaaab
 80097c0:	080122b0 	.word	0x080122b0
 80097c4:	fffffc00 	.word	0xfffffc00

080097c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d120      	bne.n	800981e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d858      	bhi.n	8009896 <DMA_CheckFifoParam+0xce>
 80097e4:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <DMA_CheckFifoParam+0x24>)
 80097e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ea:	bf00      	nop
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	0800980f 	.word	0x0800980f
 80097f4:	080097fd 	.word	0x080097fd
 80097f8:	08009897 	.word	0x08009897
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d048      	beq.n	800989a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800980c:	e045      	b.n	800989a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009816:	d142      	bne.n	800989e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800981c:	e03f      	b.n	800989e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009826:	d123      	bne.n	8009870 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982c:	2b03      	cmp	r3, #3
 800982e:	d838      	bhi.n	80098a2 <DMA_CheckFifoParam+0xda>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <DMA_CheckFifoParam+0x70>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009849 	.word	0x08009849
 800983c:	0800984f 	.word	0x0800984f
 8009840:	08009849 	.word	0x08009849
 8009844:	08009861 	.word	0x08009861
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
        break;
 800984c:	e030      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d025      	beq.n	80098a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800985e:	e022      	b.n	80098a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009868:	d11f      	bne.n	80098aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800986e:	e01c      	b.n	80098aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	2b02      	cmp	r3, #2
 8009876:	d902      	bls.n	800987e <DMA_CheckFifoParam+0xb6>
 8009878:	2b03      	cmp	r3, #3
 800987a:	d003      	beq.n	8009884 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800987c:	e018      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	73fb      	strb	r3, [r7, #15]
        break;
 8009882:	e015      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00e      	beq.n	80098ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	73fb      	strb	r3, [r7, #15]
    break;
 8009894:	e00b      	b.n	80098ae <DMA_CheckFifoParam+0xe6>
        break;
 8009896:	bf00      	nop
 8009898:	e00a      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
        break;
 800989a:	bf00      	nop
 800989c:	e008      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
        break;
 800989e:	bf00      	nop
 80098a0:	e006      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
        break;
 80098a2:	bf00      	nop
 80098a4:	e004      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
        break;
 80098a6:	bf00      	nop
 80098a8:	e002      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
        break;
 80098aa:	bf00      	nop
 80098ac:	e000      	b.n	80098b0 <DMA_CheckFifoParam+0xe8>
    break;
 80098ae:	bf00      	nop
    }
  }

  return status;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop

080098c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a38      	ldr	r2, [pc, #224]	; (80099b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d022      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a36      	ldr	r2, [pc, #216]	; (80099b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d01d      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a35      	ldr	r2, [pc, #212]	; (80099bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d018      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a33      	ldr	r2, [pc, #204]	; (80099c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d013      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a32      	ldr	r2, [pc, #200]	; (80099c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d00e      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a30      	ldr	r2, [pc, #192]	; (80099c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d009      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a2f      	ldr	r2, [pc, #188]	; (80099cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d004      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a2d      	ldr	r2, [pc, #180]	; (80099d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d101      	bne.n	8009922 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009922:	2300      	movs	r3, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d01a      	beq.n	800995e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	3b08      	subs	r3, #8
 8009930:	4a28      	ldr	r2, [pc, #160]	; (80099d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009932:	fba2 2303 	umull	r2, r3, r2, r3
 8009936:	091b      	lsrs	r3, r3, #4
 8009938:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4b26      	ldr	r3, [pc, #152]	; (80099d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a24      	ldr	r2, [pc, #144]	; (80099dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800994c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f003 031f 	and.w	r3, r3, #31
 8009954:	2201      	movs	r2, #1
 8009956:	409a      	lsls	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800995c:	e024      	b.n	80099a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	3b10      	subs	r3, #16
 8009966:	4a1e      	ldr	r2, [pc, #120]	; (80099e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009968:	fba2 2303 	umull	r2, r3, r2, r3
 800996c:	091b      	lsrs	r3, r3, #4
 800996e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4a1c      	ldr	r2, [pc, #112]	; (80099e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d806      	bhi.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4a1b      	ldr	r2, [pc, #108]	; (80099e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d902      	bls.n	8009986 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3308      	adds	r3, #8
 8009984:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	4b18      	ldr	r3, [pc, #96]	; (80099ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	461a      	mov	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a16      	ldr	r2, [pc, #88]	; (80099f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009998:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f003 031f 	and.w	r3, r3, #31
 80099a0:	2201      	movs	r2, #1
 80099a2:	409a      	lsls	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80099a8:	bf00      	nop
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	58025408 	.word	0x58025408
 80099b8:	5802541c 	.word	0x5802541c
 80099bc:	58025430 	.word	0x58025430
 80099c0:	58025444 	.word	0x58025444
 80099c4:	58025458 	.word	0x58025458
 80099c8:	5802546c 	.word	0x5802546c
 80099cc:	58025480 	.word	0x58025480
 80099d0:	58025494 	.word	0x58025494
 80099d4:	cccccccd 	.word	0xcccccccd
 80099d8:	16009600 	.word	0x16009600
 80099dc:	58025880 	.word	0x58025880
 80099e0:	aaaaaaab 	.word	0xaaaaaaab
 80099e4:	400204b8 	.word	0x400204b8
 80099e8:	4002040f 	.word	0x4002040f
 80099ec:	10008200 	.word	0x10008200
 80099f0:	40020880 	.word	0x40020880

080099f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d04a      	beq.n	8009aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d847      	bhi.n	8009aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a25      	ldr	r2, [pc, #148]	; (8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d022      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a24      	ldr	r2, [pc, #144]	; (8009ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d01d      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a22      	ldr	r2, [pc, #136]	; (8009ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d018      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a21      	ldr	r2, [pc, #132]	; (8009ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d013      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a1f      	ldr	r2, [pc, #124]	; (8009abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00e      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d009      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a1c      	ldr	r2, [pc, #112]	; (8009ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d004      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1b      	ldr	r2, [pc, #108]	; (8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d101      	bne.n	8009a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e000      	b.n	8009a66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009a64:	2300      	movs	r3, #0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4b17      	ldr	r3, [pc, #92]	; (8009acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	461a      	mov	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a15      	ldr	r2, [pc, #84]	; (8009ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009a7c:	671a      	str	r2, [r3, #112]	; 0x70
 8009a7e:	e009      	b.n	8009a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	461a      	mov	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a11      	ldr	r2, [pc, #68]	; (8009ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009a92:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	2201      	movs	r2, #1
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	58025408 	.word	0x58025408
 8009ab0:	5802541c 	.word	0x5802541c
 8009ab4:	58025430 	.word	0x58025430
 8009ab8:	58025444 	.word	0x58025444
 8009abc:	58025458 	.word	0x58025458
 8009ac0:	5802546c 	.word	0x5802546c
 8009ac4:	58025480 	.word	0x58025480
 8009ac8:	58025494 	.word	0x58025494
 8009acc:	1600963f 	.word	0x1600963f
 8009ad0:	58025940 	.word	0x58025940
 8009ad4:	1000823f 	.word	0x1000823f
 8009ad8:	40020940 	.word	0x40020940

08009adc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e0cf      	b.n	8009c8e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2223      	movs	r2, #35	; 0x23
 8009afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7fd f89f 	bl	8006c44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b06:	4b64      	ldr	r3, [pc, #400]	; (8009c98 <HAL_ETH_Init+0x1bc>)
 8009b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b0c:	4a62      	ldr	r2, [pc, #392]	; (8009c98 <HAL_ETH_Init+0x1bc>)
 8009b0e:	f043 0302 	orr.w	r3, r3, #2
 8009b12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009b16:	4b60      	ldr	r3, [pc, #384]	; (8009c98 <HAL_ETH_Init+0x1bc>)
 8009b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	60bb      	str	r3, [r7, #8]
 8009b22:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7a1b      	ldrb	r3, [r3, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f7fd fc8b 	bl	8007448 <HAL_SYSCFG_ETHInterfaceSelect>
 8009b32:	e003      	b.n	8009b3c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009b34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009b38:	f7fd fc86 	bl	8007448 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009b3c:	4b57      	ldr	r3, [pc, #348]	; (8009c9c <HAL_ETH_Init+0x1c0>)
 8009b3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6812      	ldr	r2, [r2, #0]
 8009b4e:	f043 0301 	orr.w	r3, r3, #1
 8009b52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b58:	f7fd fc3a 	bl	80073d0 <HAL_GetTick>
 8009b5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009b5e:	e011      	b.n	8009b84 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009b60:	f7fd fc36 	bl	80073d0 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b6e:	d909      	bls.n	8009b84 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2204      	movs	r2, #4
 8009b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	22e0      	movs	r2, #224	; 0xe0
 8009b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e084      	b.n	8009c8e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e4      	bne.n	8009b60 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f886 	bl	8009ca8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009b9c:	f001 fefc 	bl	800b998 <HAL_RCC_GetHCLKFreq>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4a3f      	ldr	r2, [pc, #252]	; (8009ca0 <HAL_ETH_Init+0x1c4>)
 8009ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba8:	0c9a      	lsrs	r2, r3, #18
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3a01      	subs	r2, #1
 8009bb0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa71 	bl	800a09c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009bc6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bd6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d009      	beq.n	8009bfa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	22e0      	movs	r2, #224	; 0xe0
 8009bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e049      	b.n	8009c8e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c02:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009c06:	4b27      	ldr	r3, [pc, #156]	; (8009ca4 <HAL_ETH_Init+0x1c8>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	6952      	ldr	r2, [r2, #20]
 8009c0e:	0051      	lsls	r1, r2, #1
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6812      	ldr	r2, [r2, #0]
 8009c14:	430b      	orrs	r3, r1
 8009c16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fad9 	bl	800a1d6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fb1f 	bl	800a268 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	3305      	adds	r3, #5
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	021a      	lsls	r2, r3, #8
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	3303      	adds	r3, #3
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	061a      	lsls	r2, r3, #24
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	3302      	adds	r3, #2
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	041b      	lsls	r3, r3, #16
 8009c5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	3301      	adds	r3, #1
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009c76:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2210      	movs	r2, #16
 8009c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	58000400 	.word	0x58000400
 8009ca0:	431bde83 	.word	0x431bde83
 8009ca4:	ffff8001 	.word	0xffff8001

08009ca8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009cc2:	f001 fe69 	bl	800b998 <HAL_RCC_GetHCLKFreq>
 8009cc6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4a1e      	ldr	r2, [pc, #120]	; (8009d44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d908      	bls.n	8009ce2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4a1d      	ldr	r2, [pc, #116]	; (8009d48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d804      	bhi.n	8009ce2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	e027      	b.n	8009d32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	4a18      	ldr	r2, [pc, #96]	; (8009d48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d908      	bls.n	8009cfc <HAL_ETH_SetMDIOClockRange+0x54>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4a17      	ldr	r2, [pc, #92]	; (8009d4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d204      	bcs.n	8009cfc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009cf8:	60fb      	str	r3, [r7, #12]
 8009cfa:	e01a      	b.n	8009d32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4a13      	ldr	r2, [pc, #76]	; (8009d4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d303      	bcc.n	8009d0c <HAL_ETH_SetMDIOClockRange+0x64>
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4a12      	ldr	r2, [pc, #72]	; (8009d50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d911      	bls.n	8009d30 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4a10      	ldr	r2, [pc, #64]	; (8009d50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d908      	bls.n	8009d26 <HAL_ETH_SetMDIOClockRange+0x7e>
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4a0f      	ldr	r2, [pc, #60]	; (8009d54 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d804      	bhi.n	8009d26 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	e005      	b.n	8009d32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	e000      	b.n	8009d32 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009d30:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	01312cff 	.word	0x01312cff
 8009d48:	02160ebf 	.word	0x02160ebf
 8009d4c:	03938700 	.word	0x03938700
 8009d50:	05f5e0ff 	.word	0x05f5e0ff
 8009d54:	08f0d17f 	.word	0x08f0d17f

08009d58 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009d6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	791b      	ldrb	r3, [r3, #4]
 8009d70:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	7b1b      	ldrb	r3, [r3, #12]
 8009d78:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009d7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	7b5b      	ldrb	r3, [r3, #13]
 8009d80:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009d82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	7b9b      	ldrb	r3, [r3, #14]
 8009d88:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009d8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	7bdb      	ldrb	r3, [r3, #15]
 8009d90:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009d92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	d102      	bne.n	8009da2 <ETH_SetMACConfig+0x4a>
 8009d9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009da0:	e000      	b.n	8009da4 <ETH_SetMACConfig+0x4c>
 8009da2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009da4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	7c52      	ldrb	r2, [r2, #17]
 8009daa:	2a00      	cmp	r2, #0
 8009dac:	d102      	bne.n	8009db4 <ETH_SetMACConfig+0x5c>
 8009dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009db2:	e000      	b.n	8009db6 <ETH_SetMACConfig+0x5e>
 8009db4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	7c9b      	ldrb	r3, [r3, #18]
 8009dbc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009dbe:	431a      	orrs	r2, r3
               macconf->Speed |
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009dc4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	7f1b      	ldrb	r3, [r3, #28]
 8009dd0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009dd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	7f5b      	ldrb	r3, [r3, #29]
 8009dd8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009dda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	7f92      	ldrb	r2, [r2, #30]
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	d102      	bne.n	8009dea <ETH_SetMACConfig+0x92>
 8009de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009de8:	e000      	b.n	8009dec <ETH_SetMACConfig+0x94>
 8009dea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009dec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	7fdb      	ldrb	r3, [r3, #31]
 8009df2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009df4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	d102      	bne.n	8009e06 <ETH_SetMACConfig+0xae>
 8009e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e04:	e000      	b.n	8009e08 <ETH_SetMACConfig+0xb0>
 8009e06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009e08:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009e0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e16:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009e18:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	4b56      	ldr	r3, [pc, #344]	; (8009f84 <ETH_SetMACConfig+0x22c>)
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	68f9      	ldr	r1, [r7, #12]
 8009e32:	430b      	orrs	r3, r1
 8009e34:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e42:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009e44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e4c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009e4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009e56:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009e58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	d102      	bne.n	8009e6a <ETH_SetMACConfig+0x112>
 8009e64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e68:	e000      	b.n	8009e6c <ETH_SetMACConfig+0x114>
 8009e6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009e6c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <ETH_SetMACConfig+0x230>)
 8009e7e:	4013      	ands	r3, r2
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6812      	ldr	r2, [r2, #0]
 8009e84:	68f9      	ldr	r1, [r7, #12]
 8009e86:	430b      	orrs	r3, r1
 8009e88:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e90:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68da      	ldr	r2, [r3, #12]
 8009ea0:	4b3a      	ldr	r3, [pc, #232]	; (8009f8c <ETH_SetMACConfig+0x234>)
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6812      	ldr	r2, [r2, #0]
 8009ea8:	68f9      	ldr	r1, [r7, #12]
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009eb4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009eba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	d101      	bne.n	8009eca <ETH_SetMACConfig+0x172>
 8009ec6:	2280      	movs	r2, #128	; 0x80
 8009ec8:	e000      	b.n	8009ecc <ETH_SetMACConfig+0x174>
 8009eca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009ecc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ede:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6812      	ldr	r2, [r2, #0]
 8009ee8:	68f9      	ldr	r1, [r7, #12]
 8009eea:	430b      	orrs	r3, r1
 8009eec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009ef4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009efc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0a:	f023 0103 	bic.w	r1, r3, #3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009f22:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	d101      	bne.n	8009f46 <ETH_SetMACConfig+0x1ee>
 8009f42:	2240      	movs	r2, #64	; 0x40
 8009f44:	e000      	b.n	8009f48 <ETH_SetMACConfig+0x1f0>
 8009f46:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009f48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009f50:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009f52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f5a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009f68:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8009f78:	bf00      	nop
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	00048083 	.word	0x00048083
 8009f88:	c0f88000 	.word	0xc0f88000
 8009f8c:	fffffef0 	.word	0xfffffef0

08009f90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	4b38      	ldr	r3, [pc, #224]	; (800a088 <ETH_SetDMAConfig+0xf8>)
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	6811      	ldr	r1, [r2, #0]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6812      	ldr	r2, [r2, #0]
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fb6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	791b      	ldrb	r3, [r3, #4]
 8009fbc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009fc2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	7b1b      	ldrb	r3, [r3, #12]
 8009fc8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	4b2c      	ldr	r3, [pc, #176]	; (800a08c <ETH_SetDMAConfig+0xfc>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	6812      	ldr	r2, [r2, #0]
 8009fe0:	68f9      	ldr	r1, [r7, #12]
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fe8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	7b5b      	ldrb	r3, [r3, #13]
 8009fee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a000:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a004:	4b22      	ldr	r3, [pc, #136]	; (800a090 <ETH_SetDMAConfig+0x100>)
 800a006:	4013      	ands	r3, r2
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	68f9      	ldr	r1, [r7, #12]
 800a00e:	430b      	orrs	r3, r1
 800a010:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a014:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	7d1b      	ldrb	r3, [r3, #20]
 800a020:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a022:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	7f5b      	ldrb	r3, [r3, #29]
 800a028:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a036:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a03a:	4b16      	ldr	r3, [pc, #88]	; (800a094 <ETH_SetDMAConfig+0x104>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6812      	ldr	r2, [r2, #0]
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	430b      	orrs	r3, r1
 800a046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a04a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	7f1b      	ldrb	r3, [r3, #28]
 800a052:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a058:	4313      	orrs	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a064:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a068:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <ETH_SetDMAConfig+0x108>)
 800a06a:	4013      	ands	r3, r2
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	68f9      	ldr	r1, [r7, #12]
 800a072:	430b      	orrs	r3, r1
 800a074:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a078:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a07c:	bf00      	nop
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	ffff87fd 	.word	0xffff87fd
 800a08c:	ffff2ffe 	.word	0xffff2ffe
 800a090:	fffec000 	.word	0xfffec000
 800a094:	ffc0efef 	.word	0xffc0efef
 800a098:	7fc0ffff 	.word	0x7fc0ffff

0800a09c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b0a4      	sub	sp, #144	; 0x90
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a0d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0dc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a0f4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a0f8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a100:	2300      	movs	r3, #0
 800a102:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800a104:	2301      	movs	r3, #1
 800a106:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a110:	2300      	movs	r3, #0
 800a112:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a116:	2300      	movs	r3, #0
 800a118:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a11e:	2300      	movs	r3, #0
 800a120:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a122:	2300      	movs	r3, #0
 800a124:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a134:	2320      	movs	r3, #32
 800a136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a140:	2300      	movs	r3, #0
 800a142:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a146:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a14c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a150:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a158:	2302      	movs	r3, #2
 800a15a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a15e:	2300      	movs	r3, #0
 800a160:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a164:	2300      	movs	r3, #0
 800a166:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a170:	2301      	movs	r3, #1
 800a172:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a176:	2300      	movs	r3, #0
 800a178:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a17a:	2301      	movs	r3, #1
 800a17c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff fde6 	bl	8009d58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a190:	2301      	movs	r3, #1
 800a192:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a194:	2300      	movs	r3, #0
 800a196:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a198:	2300      	movs	r3, #0
 800a19a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a1a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a1b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a1bc:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a1c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a1c2:	f107 0308 	add.w	r3, r7, #8
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fee1 	bl	8009f90 <ETH_SetDMAConfig>
}
 800a1ce:	bf00      	nop
 800a1d0:	3790      	adds	r7, #144	; 0x90
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b085      	sub	sp, #20
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	e01d      	b.n	800a220 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68d9      	ldr	r1, [r3, #12]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	4413      	add	r3, r2
 800a1f0:	00db      	lsls	r3, r3, #3
 800a1f2:	440b      	add	r3, r1
 800a1f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2200      	movs	r2, #0
 800a206:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a20e:	68b9      	ldr	r1, [r7, #8]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	3206      	adds	r2, #6
 800a216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3301      	adds	r3, #1
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b03      	cmp	r3, #3
 800a224:	d9de      	bls.n	800a1e4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a234:	461a      	mov	r2, r3
 800a236:	2303      	movs	r3, #3
 800a238:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a248:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a258:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	e023      	b.n	800a2be <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6919      	ldr	r1, [r3, #16]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4613      	mov	r3, r2
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	4413      	add	r3, r2
 800a282:	00db      	lsls	r3, r3, #3
 800a284:	440b      	add	r3, r1
 800a286:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2200      	movs	r2, #0
 800a292:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2200      	movs	r2, #0
 800a298:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2200      	movs	r2, #0
 800a29e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	3212      	adds	r2, #18
 800a2b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d9d8      	bls.n	800a276 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691a      	ldr	r2, [r3, #16]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2fe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a312:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a316:	bf00      	nop
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
	...

0800a324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a324:	b480      	push	{r7}
 800a326:	b089      	sub	sp, #36	; 0x24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a32e:	2300      	movs	r3, #0
 800a330:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a332:	4b89      	ldr	r3, [pc, #548]	; (800a558 <HAL_GPIO_Init+0x234>)
 800a334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a336:	e194      	b.n	800a662 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	2101      	movs	r1, #1
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	fa01 f303 	lsl.w	r3, r1, r3
 800a344:	4013      	ands	r3, r2
 800a346:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 8186 	beq.w	800a65c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d005      	beq.n	800a368 <HAL_GPIO_Init+0x44>
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	f003 0303 	and.w	r3, r3, #3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d130      	bne.n	800a3ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	2203      	movs	r2, #3
 800a374:	fa02 f303 	lsl.w	r3, r2, r3
 800a378:	43db      	mvns	r3, r3
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	4013      	ands	r3, r2
 800a37e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	fa02 f303 	lsl.w	r3, r2, r3
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	4313      	orrs	r3, r2
 800a390:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a39e:	2201      	movs	r2, #1
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a6:	43db      	mvns	r3, r3
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	091b      	lsrs	r3, r3, #4
 800a3b4:	f003 0201 	and.w	r2, r3, #1
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d017      	beq.n	800a406 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	005b      	lsls	r3, r3, #1
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e6:	43db      	mvns	r3, r3
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fa:	69ba      	ldr	r2, [r7, #24]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f003 0303 	and.w	r3, r3, #3
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d123      	bne.n	800a45a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	08da      	lsrs	r2, r3, #3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3208      	adds	r2, #8
 800a41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	f003 0307 	and.w	r3, r3, #7
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	220f      	movs	r2, #15
 800a42a:	fa02 f303 	lsl.w	r3, r2, r3
 800a42e:	43db      	mvns	r3, r3
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	4013      	ands	r3, r2
 800a434:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	691a      	ldr	r2, [r3, #16]
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	fa02 f303 	lsl.w	r3, r2, r3
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	4313      	orrs	r3, r2
 800a44a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	08da      	lsrs	r2, r3, #3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3208      	adds	r2, #8
 800a454:	69b9      	ldr	r1, [r7, #24]
 800a456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	2203      	movs	r2, #3
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	43db      	mvns	r3, r3
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	4013      	ands	r3, r2
 800a470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f003 0203 	and.w	r2, r3, #3
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	fa02 f303 	lsl.w	r3, r2, r3
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	4313      	orrs	r3, r2
 800a486:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 80e0 	beq.w	800a65c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a49c:	4b2f      	ldr	r3, [pc, #188]	; (800a55c <HAL_GPIO_Init+0x238>)
 800a49e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4a2:	4a2e      	ldr	r2, [pc, #184]	; (800a55c <HAL_GPIO_Init+0x238>)
 800a4a4:	f043 0302 	orr.w	r3, r3, #2
 800a4a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a4ac:	4b2b      	ldr	r3, [pc, #172]	; (800a55c <HAL_GPIO_Init+0x238>)
 800a4ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4ba:	4a29      	ldr	r2, [pc, #164]	; (800a560 <HAL_GPIO_Init+0x23c>)
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	089b      	lsrs	r3, r3, #2
 800a4c0:	3302      	adds	r3, #2
 800a4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	220f      	movs	r2, #15
 800a4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d6:	43db      	mvns	r3, r3
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a20      	ldr	r2, [pc, #128]	; (800a564 <HAL_GPIO_Init+0x240>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d052      	beq.n	800a58c <HAL_GPIO_Init+0x268>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a1f      	ldr	r2, [pc, #124]	; (800a568 <HAL_GPIO_Init+0x244>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d031      	beq.n	800a552 <HAL_GPIO_Init+0x22e>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a1e      	ldr	r2, [pc, #120]	; (800a56c <HAL_GPIO_Init+0x248>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d02b      	beq.n	800a54e <HAL_GPIO_Init+0x22a>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a1d      	ldr	r2, [pc, #116]	; (800a570 <HAL_GPIO_Init+0x24c>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d025      	beq.n	800a54a <HAL_GPIO_Init+0x226>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a1c      	ldr	r2, [pc, #112]	; (800a574 <HAL_GPIO_Init+0x250>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d01f      	beq.n	800a546 <HAL_GPIO_Init+0x222>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a1b      	ldr	r2, [pc, #108]	; (800a578 <HAL_GPIO_Init+0x254>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d019      	beq.n	800a542 <HAL_GPIO_Init+0x21e>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a1a      	ldr	r2, [pc, #104]	; (800a57c <HAL_GPIO_Init+0x258>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d013      	beq.n	800a53e <HAL_GPIO_Init+0x21a>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a19      	ldr	r2, [pc, #100]	; (800a580 <HAL_GPIO_Init+0x25c>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00d      	beq.n	800a53a <HAL_GPIO_Init+0x216>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a18      	ldr	r2, [pc, #96]	; (800a584 <HAL_GPIO_Init+0x260>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d007      	beq.n	800a536 <HAL_GPIO_Init+0x212>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a17      	ldr	r2, [pc, #92]	; (800a588 <HAL_GPIO_Init+0x264>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d101      	bne.n	800a532 <HAL_GPIO_Init+0x20e>
 800a52e:	2309      	movs	r3, #9
 800a530:	e02d      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a532:	230a      	movs	r3, #10
 800a534:	e02b      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a536:	2308      	movs	r3, #8
 800a538:	e029      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a53a:	2307      	movs	r3, #7
 800a53c:	e027      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a53e:	2306      	movs	r3, #6
 800a540:	e025      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a542:	2305      	movs	r3, #5
 800a544:	e023      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a546:	2304      	movs	r3, #4
 800a548:	e021      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a54a:	2303      	movs	r3, #3
 800a54c:	e01f      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a54e:	2302      	movs	r3, #2
 800a550:	e01d      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a552:	2301      	movs	r3, #1
 800a554:	e01b      	b.n	800a58e <HAL_GPIO_Init+0x26a>
 800a556:	bf00      	nop
 800a558:	58000080 	.word	0x58000080
 800a55c:	58024400 	.word	0x58024400
 800a560:	58000400 	.word	0x58000400
 800a564:	58020000 	.word	0x58020000
 800a568:	58020400 	.word	0x58020400
 800a56c:	58020800 	.word	0x58020800
 800a570:	58020c00 	.word	0x58020c00
 800a574:	58021000 	.word	0x58021000
 800a578:	58021400 	.word	0x58021400
 800a57c:	58021800 	.word	0x58021800
 800a580:	58021c00 	.word	0x58021c00
 800a584:	58022000 	.word	0x58022000
 800a588:	58022400 	.word	0x58022400
 800a58c:	2300      	movs	r3, #0
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	f002 0203 	and.w	r2, r2, #3
 800a594:	0092      	lsls	r2, r2, #2
 800a596:	4093      	lsls	r3, r2
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a59e:	4938      	ldr	r1, [pc, #224]	; (800a680 <HAL_GPIO_Init+0x35c>)
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	089b      	lsrs	r3, r3, #2
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	69ba      	ldr	r2, [r7, #24]
 800a5a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a5ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	43db      	mvns	r3, r3
 800a5b8:	69ba      	ldr	r2, [r7, #24]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a5d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a5da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	43db      	mvns	r3, r3
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a5f8:	69ba      	ldr	r2, [r7, #24]
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	43db      	mvns	r3, r3
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	4013      	ands	r3, r2
 800a616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	4313      	orrs	r3, r2
 800a62a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	43db      	mvns	r3, r3
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	4013      	ands	r3, r2
 800a640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	4313      	orrs	r3, r2
 800a654:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	3301      	adds	r3, #1
 800a660:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	fa22 f303 	lsr.w	r3, r2, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f47f ae63 	bne.w	800a338 <HAL_GPIO_Init+0x14>
  }
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	3724      	adds	r7, #36	; 0x24
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	58000400 	.word	0x58000400

0800a684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	887b      	ldrh	r3, [r7, #2]
 800a696:	4013      	ands	r3, r2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a69c:	2301      	movs	r3, #1
 800a69e:	73fb      	strb	r3, [r7, #15]
 800a6a0:	e001      	b.n	800a6a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	807b      	strh	r3, [r7, #2]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6c4:	787b      	ldrb	r3, [r7, #1]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6ca:	887a      	ldrh	r2, [r7, #2]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a6d0:	e003      	b.n	800a6da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a6d2:	887b      	ldrh	r3, [r7, #2]
 800a6d4:	041a      	lsls	r2, r3, #16
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	619a      	str	r2, [r3, #24]
}
 800a6da:	bf00      	nop
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b085      	sub	sp, #20
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6f8:	887a      	ldrh	r2, [r7, #2]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	041a      	lsls	r2, r3, #16
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	43d9      	mvns	r1, r3
 800a704:	887b      	ldrh	r3, [r7, #2]
 800a706:	400b      	ands	r3, r1
 800a708:	431a      	orrs	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	619a      	str	r2, [r3, #24]
}
 800a70e:	bf00      	nop
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
	...

0800a71c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800a724:	4a08      	ldr	r2, [pc, #32]	; (800a748 <HAL_HSEM_FastTake+0x2c>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3320      	adds	r3, #32
 800a72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a72e:	4a07      	ldr	r2, [pc, #28]	; (800a74c <HAL_HSEM_FastTake+0x30>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d101      	bne.n	800a738 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	e000      	b.n	800a73a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	58026400 	.word	0x58026400
 800a74c:	80000300 	.word	0x80000300

0800a750 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800a75a:	4906      	ldr	r1, [pc, #24]	; (800a774 <HAL_HSEM_Release+0x24>)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	58026400 	.word	0x58026400

0800a778 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a77a:	b08f      	sub	sp, #60	; 0x3c
 800a77c:	af0a      	add	r7, sp, #40	; 0x28
 800a77e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e116      	b.n	800a9b8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7fc fc81 	bl	80070ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2203      	movs	r2, #3
 800a7ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d102      	bne.n	800a7c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f005 f977 	bl	800fabc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	687e      	ldr	r6, [r7, #4]
 800a7d6:	466d      	mov	r5, sp
 800a7d8:	f106 0410 	add.w	r4, r6, #16
 800a7dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a7e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a7e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a7e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800a7ec:	1d33      	adds	r3, r6, #4
 800a7ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7f0:	6838      	ldr	r0, [r7, #0]
 800a7f2:	f005 f8f5 	bl	800f9e0 <USB_CoreInit>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d005      	beq.n	800a808 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e0d7      	b.n	800a9b8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2100      	movs	r1, #0
 800a80e:	4618      	mov	r0, r3
 800a810:	f005 f965 	bl	800fade <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a814:	2300      	movs	r3, #0
 800a816:	73fb      	strb	r3, [r7, #15]
 800a818:	e04a      	b.n	800a8b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a81a:	7bfa      	ldrb	r2, [r7, #15]
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	333d      	adds	r3, #61	; 0x3d
 800a82a:	2201      	movs	r2, #1
 800a82c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a82e:	7bfa      	ldrb	r2, [r7, #15]
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	4613      	mov	r3, r2
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	4413      	add	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	440b      	add	r3, r1
 800a83c:	333c      	adds	r3, #60	; 0x3c
 800a83e:	7bfa      	ldrb	r2, [r7, #15]
 800a840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a842:	7bfa      	ldrb	r2, [r7, #15]
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	b298      	uxth	r0, r3
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	4613      	mov	r3, r2
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	3344      	adds	r3, #68	; 0x44
 800a856:	4602      	mov	r2, r0
 800a858:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a85a:	7bfa      	ldrb	r2, [r7, #15]
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	440b      	add	r3, r1
 800a868:	3340      	adds	r3, #64	; 0x40
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a86e:	7bfa      	ldrb	r2, [r7, #15]
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	4613      	mov	r3, r2
 800a874:	00db      	lsls	r3, r3, #3
 800a876:	4413      	add	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	440b      	add	r3, r1
 800a87c:	3348      	adds	r3, #72	; 0x48
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a882:	7bfa      	ldrb	r2, [r7, #15]
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	4613      	mov	r3, r2
 800a888:	00db      	lsls	r3, r3, #3
 800a88a:	4413      	add	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	440b      	add	r3, r1
 800a890:	334c      	adds	r3, #76	; 0x4c
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a896:	7bfa      	ldrb	r2, [r7, #15]
 800a898:	6879      	ldr	r1, [r7, #4]
 800a89a:	4613      	mov	r3, r2
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	4413      	add	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	440b      	add	r3, r1
 800a8a4:	3354      	adds	r3, #84	; 0x54
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	73fb      	strb	r3, [r7, #15]
 800a8b0:	7bfa      	ldrb	r2, [r7, #15]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d3af      	bcc.n	800a81a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]
 800a8be:	e044      	b.n	800a94a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a8c0:	7bfa      	ldrb	r2, [r7, #15]
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	4413      	add	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	440b      	add	r3, r1
 800a8ce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a8d6:	7bfa      	ldrb	r2, [r7, #15]
 800a8d8:	6879      	ldr	r1, [r7, #4]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	440b      	add	r3, r1
 800a8e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a8e8:	7bfa      	ldrb	r2, [r7, #15]
 800a8ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a8ec:	7bfa      	ldrb	r2, [r7, #15]
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	440b      	add	r3, r1
 800a8fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a8fe:	2200      	movs	r2, #0
 800a900:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a902:	7bfa      	ldrb	r2, [r7, #15]
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	4613      	mov	r3, r2
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	440b      	add	r3, r1
 800a910:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a918:	7bfa      	ldrb	r2, [r7, #15]
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	4613      	mov	r3, r2
 800a91e:	00db      	lsls	r3, r3, #3
 800a920:	4413      	add	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	440b      	add	r3, r1
 800a926:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a92e:	7bfa      	ldrb	r2, [r7, #15]
 800a930:	6879      	ldr	r1, [r7, #4]
 800a932:	4613      	mov	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	440b      	add	r3, r1
 800a93c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	3301      	adds	r3, #1
 800a948:	73fb      	strb	r3, [r7, #15]
 800a94a:	7bfa      	ldrb	r2, [r7, #15]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	429a      	cmp	r2, r3
 800a952:	d3b5      	bcc.n	800a8c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	603b      	str	r3, [r7, #0]
 800a95a:	687e      	ldr	r6, [r7, #4]
 800a95c:	466d      	mov	r5, sp
 800a95e:	f106 0410 	add.w	r4, r6, #16
 800a962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a96a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a96e:	e885 0003 	stmia.w	r5, {r0, r1}
 800a972:	1d33      	adds	r3, r6, #4
 800a974:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a976:	6838      	ldr	r0, [r7, #0]
 800a978:	f005 f8fe 	bl	800fb78 <USB_DevInit>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2202      	movs	r2, #2
 800a986:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e014      	b.n	800a9b8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d102      	bne.n	800a9ac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f80a 	bl	800a9c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f005 fabc 	bl	800ff2e <USB_DevDisconnect>

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <HAL_PCDEx_ActivateLPM+0x44>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	10000003 	.word	0x10000003

0800aa08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800aa10:	4b29      	ldr	r3, [pc, #164]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	d00a      	beq.n	800aa32 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aa1c:	4b26      	ldr	r3, [pc, #152]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d001      	beq.n	800aa2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e040      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e03e      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aa32:	4b21      	ldr	r3, [pc, #132]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800aa3a:	491f      	ldr	r1, [pc, #124]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aa42:	f7fc fcc5 	bl	80073d0 <HAL_GetTick>
 800aa46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa48:	e009      	b.n	800aa5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa4a:	f7fc fcc1 	bl	80073d0 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa58:	d901      	bls.n	800aa5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e028      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa5e:	4b16      	ldr	r3, [pc, #88]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa6a:	d1ee      	bne.n	800aa4a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b1e      	cmp	r3, #30
 800aa70:	d008      	beq.n	800aa84 <HAL_PWREx_ConfigSupply+0x7c>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b2e      	cmp	r3, #46	; 0x2e
 800aa76:	d005      	beq.n	800aa84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b1d      	cmp	r3, #29
 800aa7c:	d002      	beq.n	800aa84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b2d      	cmp	r3, #45	; 0x2d
 800aa82:	d114      	bne.n	800aaae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800aa84:	f7fc fca4 	bl	80073d0 <HAL_GetTick>
 800aa88:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800aa8a:	e009      	b.n	800aaa0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa8c:	f7fc fca0 	bl	80073d0 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa9a:	d901      	bls.n	800aaa0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e007      	b.n	800aab0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800aaa0:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <HAL_PWREx_ConfigSupply+0xb0>)
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaac:	d1ee      	bne.n	800aa8c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	58024800 	.word	0x58024800

0800aabc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	4a04      	ldr	r2, [pc, #16]	; (800aad8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800aac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aaca:	60d3      	str	r3, [r2, #12]
}
 800aacc:	bf00      	nop
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	58024800 	.word	0x58024800

0800aadc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08c      	sub	sp, #48	; 0x30
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d102      	bne.n	800aaf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	f000 bc1d 	b.w	800b32a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 8087 	beq.w	800ac0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aafe:	4b99      	ldr	r3, [pc, #612]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab08:	4b96      	ldr	r3, [pc, #600]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	2b10      	cmp	r3, #16
 800ab12:	d007      	beq.n	800ab24 <HAL_RCC_OscConfig+0x48>
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	2b18      	cmp	r3, #24
 800ab18:	d110      	bne.n	800ab3c <HAL_RCC_OscConfig+0x60>
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d10b      	bne.n	800ab3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab24:	4b8f      	ldr	r3, [pc, #572]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d06c      	beq.n	800ac0a <HAL_RCC_OscConfig+0x12e>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d168      	bne.n	800ac0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e3f6      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab44:	d106      	bne.n	800ab54 <HAL_RCC_OscConfig+0x78>
 800ab46:	4b87      	ldr	r3, [pc, #540]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a86      	ldr	r2, [pc, #536]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	e02e      	b.n	800abb2 <HAL_RCC_OscConfig+0xd6>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10c      	bne.n	800ab76 <HAL_RCC_OscConfig+0x9a>
 800ab5c:	4b81      	ldr	r3, [pc, #516]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a80      	ldr	r2, [pc, #512]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	4b7e      	ldr	r3, [pc, #504]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a7d      	ldr	r2, [pc, #500]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab72:	6013      	str	r3, [r2, #0]
 800ab74:	e01d      	b.n	800abb2 <HAL_RCC_OscConfig+0xd6>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab7e:	d10c      	bne.n	800ab9a <HAL_RCC_OscConfig+0xbe>
 800ab80:	4b78      	ldr	r3, [pc, #480]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a77      	ldr	r2, [pc, #476]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	4b75      	ldr	r3, [pc, #468]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a74      	ldr	r2, [pc, #464]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	e00b      	b.n	800abb2 <HAL_RCC_OscConfig+0xd6>
 800ab9a:	4b72      	ldr	r3, [pc, #456]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a71      	ldr	r2, [pc, #452]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800aba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	4b6f      	ldr	r3, [pc, #444]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a6e      	ldr	r2, [pc, #440]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800abac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d013      	beq.n	800abe2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abba:	f7fc fc09 	bl	80073d0 <HAL_GetTick>
 800abbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abc0:	e008      	b.n	800abd4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abc2:	f7fc fc05 	bl	80073d0 <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	2b64      	cmp	r3, #100	; 0x64
 800abce:	d901      	bls.n	800abd4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e3aa      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800abd4:	4b63      	ldr	r3, [pc, #396]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d0f0      	beq.n	800abc2 <HAL_RCC_OscConfig+0xe6>
 800abe0:	e014      	b.n	800ac0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe2:	f7fc fbf5 	bl	80073d0 <HAL_GetTick>
 800abe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800abe8:	e008      	b.n	800abfc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abea:	f7fc fbf1 	bl	80073d0 <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	2b64      	cmp	r3, #100	; 0x64
 800abf6:	d901      	bls.n	800abfc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e396      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800abfc:	4b59      	ldr	r3, [pc, #356]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1f0      	bne.n	800abea <HAL_RCC_OscConfig+0x10e>
 800ac08:	e000      	b.n	800ac0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 80cb 	beq.w	800adb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac1a:	4b52      	ldr	r3, [pc, #328]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac24:	4b4f      	ldr	r3, [pc, #316]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ac26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <HAL_RCC_OscConfig+0x164>
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	2b18      	cmp	r3, #24
 800ac34:	d156      	bne.n	800ace4 <HAL_RCC_OscConfig+0x208>
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d151      	bne.n	800ace4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac40:	4b48      	ldr	r3, [pc, #288]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <HAL_RCC_OscConfig+0x17c>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e368      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f023 0219 	bic.w	r2, r3, #25
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	493f      	ldr	r1, [pc, #252]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ac66:	4313      	orrs	r3, r2
 800ac68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac6a:	f7fc fbb1 	bl	80073d0 <HAL_GetTick>
 800ac6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac70:	e008      	b.n	800ac84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac72:	f7fc fbad 	bl	80073d0 <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d901      	bls.n	800ac84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e352      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac84:	4b37      	ldr	r3, [pc, #220]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d0f0      	beq.n	800ac72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac90:	f7fc fbce 	bl	8007430 <HAL_GetREVID>
 800ac94:	4603      	mov	r3, r0
 800ac96:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d817      	bhi.n	800acce <HAL_RCC_OscConfig+0x1f2>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b40      	cmp	r3, #64	; 0x40
 800aca4:	d108      	bne.n	800acb8 <HAL_RCC_OscConfig+0x1dc>
 800aca6:	4b2f      	ldr	r3, [pc, #188]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800acae:	4a2d      	ldr	r2, [pc, #180]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800acb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acb6:	e07b      	b.n	800adb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acb8:	4b2a      	ldr	r3, [pc, #168]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	031b      	lsls	r3, r3, #12
 800acc6:	4927      	ldr	r1, [pc, #156]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800accc:	e070      	b.n	800adb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acce:	4b25      	ldr	r3, [pc, #148]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	061b      	lsls	r3, r3, #24
 800acdc:	4921      	ldr	r1, [pc, #132]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ace2:	e065      	b.n	800adb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d048      	beq.n	800ad7e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800acec:	4b1d      	ldr	r3, [pc, #116]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f023 0219 	bic.w	r2, r3, #25
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	491a      	ldr	r1, [pc, #104]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acfe:	f7fc fb67 	bl	80073d0 <HAL_GetTick>
 800ad02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad04:	e008      	b.n	800ad18 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad06:	f7fc fb63 	bl	80073d0 <HAL_GetTick>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d901      	bls.n	800ad18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	e308      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad18:	4b12      	ldr	r3, [pc, #72]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0f0      	beq.n	800ad06 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad24:	f7fc fb84 	bl	8007430 <HAL_GetREVID>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f241 0203 	movw	r2, #4099	; 0x1003
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d81a      	bhi.n	800ad68 <HAL_RCC_OscConfig+0x28c>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d108      	bne.n	800ad4c <HAL_RCC_OscConfig+0x270>
 800ad3a:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ad42:	4a08      	ldr	r2, [pc, #32]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ad44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad48:	6053      	str	r3, [r2, #4]
 800ad4a:	e031      	b.n	800adb0 <HAL_RCC_OscConfig+0x2d4>
 800ad4c:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	031b      	lsls	r3, r3, #12
 800ad5a:	4902      	ldr	r1, [pc, #8]	; (800ad64 <HAL_RCC_OscConfig+0x288>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	604b      	str	r3, [r1, #4]
 800ad60:	e026      	b.n	800adb0 <HAL_RCC_OscConfig+0x2d4>
 800ad62:	bf00      	nop
 800ad64:	58024400 	.word	0x58024400
 800ad68:	4b9a      	ldr	r3, [pc, #616]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	061b      	lsls	r3, r3, #24
 800ad76:	4997      	ldr	r1, [pc, #604]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	604b      	str	r3, [r1, #4]
 800ad7c:	e018      	b.n	800adb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad7e:	4b95      	ldr	r3, [pc, #596]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a94      	ldr	r2, [pc, #592]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ad84:	f023 0301 	bic.w	r3, r3, #1
 800ad88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad8a:	f7fc fb21 	bl	80073d0 <HAL_GetTick>
 800ad8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ad90:	e008      	b.n	800ada4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad92:	f7fc fb1d 	bl	80073d0 <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d901      	bls.n	800ada4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e2c2      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ada4:	4b8b      	ldr	r3, [pc, #556]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1f0      	bne.n	800ad92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 80a9 	beq.w	800af10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adbe:	4b85      	ldr	r3, [pc, #532]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800adc8:	4b82      	ldr	r3, [pc, #520]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800adca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adcc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	2b08      	cmp	r3, #8
 800add2:	d007      	beq.n	800ade4 <HAL_RCC_OscConfig+0x308>
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	2b18      	cmp	r3, #24
 800add8:	d13a      	bne.n	800ae50 <HAL_RCC_OscConfig+0x374>
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f003 0303 	and.w	r3, r3, #3
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d135      	bne.n	800ae50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ade4:	4b7b      	ldr	r3, [pc, #492]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adec:	2b00      	cmp	r3, #0
 800adee:	d005      	beq.n	800adfc <HAL_RCC_OscConfig+0x320>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	2b80      	cmp	r3, #128	; 0x80
 800adf6:	d001      	beq.n	800adfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e296      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800adfc:	f7fc fb18 	bl	8007430 <HAL_GetREVID>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f241 0203 	movw	r2, #4099	; 0x1003
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d817      	bhi.n	800ae3a <HAL_RCC_OscConfig+0x35e>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	2b20      	cmp	r3, #32
 800ae10:	d108      	bne.n	800ae24 <HAL_RCC_OscConfig+0x348>
 800ae12:	4b70      	ldr	r3, [pc, #448]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ae1a:	4a6e      	ldr	r2, [pc, #440]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae22:	e075      	b.n	800af10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae24:	4b6b      	ldr	r3, [pc, #428]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	069b      	lsls	r3, r3, #26
 800ae32:	4968      	ldr	r1, [pc, #416]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae38:	e06a      	b.n	800af10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae3a:	4b66      	ldr	r3, [pc, #408]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	061b      	lsls	r3, r3, #24
 800ae48:	4962      	ldr	r1, [pc, #392]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae4e:	e05f      	b.n	800af10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	69db      	ldr	r3, [r3, #28]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d042      	beq.n	800aede <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ae58:	4b5e      	ldr	r3, [pc, #376]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a5d      	ldr	r2, [pc, #372]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae64:	f7fc fab4 	bl	80073d0 <HAL_GetTick>
 800ae68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae6a:	e008      	b.n	800ae7e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ae6c:	f7fc fab0 	bl	80073d0 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e255      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae7e:	4b55      	ldr	r3, [pc, #340]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f0      	beq.n	800ae6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae8a:	f7fc fad1 	bl	8007430 <HAL_GetREVID>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f241 0203 	movw	r2, #4099	; 0x1003
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d817      	bhi.n	800aec8 <HAL_RCC_OscConfig+0x3ec>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	2b20      	cmp	r3, #32
 800ae9e:	d108      	bne.n	800aeb2 <HAL_RCC_OscConfig+0x3d6>
 800aea0:	4b4c      	ldr	r3, [pc, #304]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aea8:	4a4a      	ldr	r2, [pc, #296]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aeaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aeae:	6053      	str	r3, [r2, #4]
 800aeb0:	e02e      	b.n	800af10 <HAL_RCC_OscConfig+0x434>
 800aeb2:	4b48      	ldr	r3, [pc, #288]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	069b      	lsls	r3, r3, #26
 800aec0:	4944      	ldr	r1, [pc, #272]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	604b      	str	r3, [r1, #4]
 800aec6:	e023      	b.n	800af10 <HAL_RCC_OscConfig+0x434>
 800aec8:	4b42      	ldr	r3, [pc, #264]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	061b      	lsls	r3, r3, #24
 800aed6:	493f      	ldr	r1, [pc, #252]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60cb      	str	r3, [r1, #12]
 800aedc:	e018      	b.n	800af10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aede:	4b3d      	ldr	r3, [pc, #244]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a3c      	ldr	r2, [pc, #240]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800aee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeea:	f7fc fa71 	bl	80073d0 <HAL_GetTick>
 800aeee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aef0:	e008      	b.n	800af04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800aef2:	f7fc fa6d 	bl	80073d0 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d901      	bls.n	800af04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e212      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af04:	4b33      	ldr	r3, [pc, #204]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1f0      	bne.n	800aef2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0308 	and.w	r3, r3, #8
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d036      	beq.n	800af8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d019      	beq.n	800af58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af24:	4b2b      	ldr	r3, [pc, #172]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800af26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af28:	4a2a      	ldr	r2, [pc, #168]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800af2a:	f043 0301 	orr.w	r3, r3, #1
 800af2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af30:	f7fc fa4e 	bl	80073d0 <HAL_GetTick>
 800af34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af36:	e008      	b.n	800af4a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af38:	f7fc fa4a 	bl	80073d0 <HAL_GetTick>
 800af3c:	4602      	mov	r2, r0
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	2b02      	cmp	r3, #2
 800af44:	d901      	bls.n	800af4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800af46:	2303      	movs	r3, #3
 800af48:	e1ef      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af4a:	4b22      	ldr	r3, [pc, #136]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800af4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0f0      	beq.n	800af38 <HAL_RCC_OscConfig+0x45c>
 800af56:	e018      	b.n	800af8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af58:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800af5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af5c:	4a1d      	ldr	r2, [pc, #116]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800af5e:	f023 0301 	bic.w	r3, r3, #1
 800af62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af64:	f7fc fa34 	bl	80073d0 <HAL_GetTick>
 800af68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af6a:	e008      	b.n	800af7e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af6c:	f7fc fa30 	bl	80073d0 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e1d5      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af7e:	4b15      	ldr	r3, [pc, #84]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800af80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1f0      	bne.n	800af6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0320 	and.w	r3, r3, #32
 800af92:	2b00      	cmp	r3, #0
 800af94:	d039      	beq.n	800b00a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d01c      	beq.n	800afd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af9e:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a0c      	ldr	r2, [pc, #48]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800afa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800afa8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800afaa:	f7fc fa11 	bl	80073d0 <HAL_GetTick>
 800afae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afb0:	e008      	b.n	800afc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800afb2:	f7fc fa0d 	bl	80073d0 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e1b2      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afc4:	4b03      	ldr	r3, [pc, #12]	; (800afd4 <HAL_RCC_OscConfig+0x4f8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f0      	beq.n	800afb2 <HAL_RCC_OscConfig+0x4d6>
 800afd0:	e01b      	b.n	800b00a <HAL_RCC_OscConfig+0x52e>
 800afd2:	bf00      	nop
 800afd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800afd8:	4b9b      	ldr	r3, [pc, #620]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a9a      	ldr	r2, [pc, #616]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800afde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800afe4:	f7fc f9f4 	bl	80073d0 <HAL_GetTick>
 800afe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800afea:	e008      	b.n	800affe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800afec:	f7fc f9f0 	bl	80073d0 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d901      	bls.n	800affe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e195      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800affe:	4b92      	ldr	r3, [pc, #584]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1f0      	bne.n	800afec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0304 	and.w	r3, r3, #4
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 8081 	beq.w	800b11a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b018:	4b8c      	ldr	r3, [pc, #560]	; (800b24c <HAL_RCC_OscConfig+0x770>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a8b      	ldr	r2, [pc, #556]	; (800b24c <HAL_RCC_OscConfig+0x770>)
 800b01e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b024:	f7fc f9d4 	bl	80073d0 <HAL_GetTick>
 800b028:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b02a:	e008      	b.n	800b03e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b02c:	f7fc f9d0 	bl	80073d0 <HAL_GetTick>
 800b030:	4602      	mov	r2, r0
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	2b64      	cmp	r3, #100	; 0x64
 800b038:	d901      	bls.n	800b03e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e175      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b03e:	4b83      	ldr	r3, [pc, #524]	; (800b24c <HAL_RCC_OscConfig+0x770>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0f0      	beq.n	800b02c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d106      	bne.n	800b060 <HAL_RCC_OscConfig+0x584>
 800b052:	4b7d      	ldr	r3, [pc, #500]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b056:	4a7c      	ldr	r2, [pc, #496]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	6713      	str	r3, [r2, #112]	; 0x70
 800b05e:	e02d      	b.n	800b0bc <HAL_RCC_OscConfig+0x5e0>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10c      	bne.n	800b082 <HAL_RCC_OscConfig+0x5a6>
 800b068:	4b77      	ldr	r3, [pc, #476]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06c:	4a76      	ldr	r2, [pc, #472]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b06e:	f023 0301 	bic.w	r3, r3, #1
 800b072:	6713      	str	r3, [r2, #112]	; 0x70
 800b074:	4b74      	ldr	r3, [pc, #464]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b078:	4a73      	ldr	r2, [pc, #460]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b07a:	f023 0304 	bic.w	r3, r3, #4
 800b07e:	6713      	str	r3, [r2, #112]	; 0x70
 800b080:	e01c      	b.n	800b0bc <HAL_RCC_OscConfig+0x5e0>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	2b05      	cmp	r3, #5
 800b088:	d10c      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x5c8>
 800b08a:	4b6f      	ldr	r3, [pc, #444]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08e:	4a6e      	ldr	r2, [pc, #440]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b090:	f043 0304 	orr.w	r3, r3, #4
 800b094:	6713      	str	r3, [r2, #112]	; 0x70
 800b096:	4b6c      	ldr	r3, [pc, #432]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b09a:	4a6b      	ldr	r2, [pc, #428]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b09c:	f043 0301 	orr.w	r3, r3, #1
 800b0a0:	6713      	str	r3, [r2, #112]	; 0x70
 800b0a2:	e00b      	b.n	800b0bc <HAL_RCC_OscConfig+0x5e0>
 800b0a4:	4b68      	ldr	r3, [pc, #416]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a8:	4a67      	ldr	r2, [pc, #412]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b0aa:	f023 0301 	bic.w	r3, r3, #1
 800b0ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b0b0:	4b65      	ldr	r3, [pc, #404]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b4:	4a64      	ldr	r2, [pc, #400]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b0b6:	f023 0304 	bic.w	r3, r3, #4
 800b0ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d015      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0c4:	f7fc f984 	bl	80073d0 <HAL_GetTick>
 800b0c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0ca:	e00a      	b.n	800b0e2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0cc:	f7fc f980 	bl	80073d0 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e123      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0e2:	4b59      	ldr	r3, [pc, #356]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	f003 0302 	and.w	r3, r3, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0ee      	beq.n	800b0cc <HAL_RCC_OscConfig+0x5f0>
 800b0ee:	e014      	b.n	800b11a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0f0:	f7fc f96e 	bl	80073d0 <HAL_GetTick>
 800b0f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b0f6:	e00a      	b.n	800b10e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0f8:	f7fc f96a 	bl	80073d0 <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	f241 3288 	movw	r2, #5000	; 0x1388
 800b106:	4293      	cmp	r3, r2
 800b108:	d901      	bls.n	800b10e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e10d      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b10e:	4b4e      	ldr	r3, [pc, #312]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b112:	f003 0302 	and.w	r3, r3, #2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1ee      	bne.n	800b0f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 8102 	beq.w	800b328 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b124:	4b48      	ldr	r3, [pc, #288]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b12c:	2b18      	cmp	r3, #24
 800b12e:	f000 80bd 	beq.w	800b2ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	2b02      	cmp	r3, #2
 800b138:	f040 809e 	bne.w	800b278 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b13c:	4b42      	ldr	r3, [pc, #264]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a41      	ldr	r2, [pc, #260]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b148:	f7fc f942 	bl	80073d0 <HAL_GetTick>
 800b14c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b14e:	e008      	b.n	800b162 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b150:	f7fc f93e 	bl	80073d0 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d901      	bls.n	800b162 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e0e3      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b162:	4b39      	ldr	r3, [pc, #228]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1f0      	bne.n	800b150 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b16e:	4b36      	ldr	r3, [pc, #216]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b172:	4b37      	ldr	r3, [pc, #220]	; (800b250 <HAL_RCC_OscConfig+0x774>)
 800b174:	4013      	ands	r3, r2
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b17e:	0112      	lsls	r2, r2, #4
 800b180:	430a      	orrs	r2, r1
 800b182:	4931      	ldr	r1, [pc, #196]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b184:	4313      	orrs	r3, r2
 800b186:	628b      	str	r3, [r1, #40]	; 0x28
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	3b01      	subs	r3, #1
 800b18e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b196:	3b01      	subs	r3, #1
 800b198:	025b      	lsls	r3, r3, #9
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	041b      	lsls	r3, r3, #16
 800b1a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	061b      	lsls	r3, r3, #24
 800b1b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1b8:	4923      	ldr	r1, [pc, #140]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b1be:	4b22      	ldr	r3, [pc, #136]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c2:	4a21      	ldr	r2, [pc, #132]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1c4:	f023 0301 	bic.w	r3, r3, #1
 800b1c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1ca:	4b1f      	ldr	r3, [pc, #124]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1ce:	4b21      	ldr	r3, [pc, #132]	; (800b254 <HAL_RCC_OscConfig+0x778>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b1d6:	00d2      	lsls	r2, r2, #3
 800b1d8:	491b      	ldr	r1, [pc, #108]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b1de:	4b1a      	ldr	r3, [pc, #104]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e2:	f023 020c 	bic.w	r2, r3, #12
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ea:	4917      	ldr	r1, [pc, #92]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b1f0:	4b15      	ldr	r3, [pc, #84]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f4:	f023 0202 	bic.w	r2, r3, #2
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fc:	4912      	ldr	r1, [pc, #72]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b1fe:	4313      	orrs	r3, r2
 800b200:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b202:	4b11      	ldr	r3, [pc, #68]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	4a10      	ldr	r2, [pc, #64]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b20c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b20e:	4b0e      	ldr	r3, [pc, #56]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	4a0d      	ldr	r2, [pc, #52]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b21a:	4b0b      	ldr	r3, [pc, #44]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21e:	4a0a      	ldr	r2, [pc, #40]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b224:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b226:	4b08      	ldr	r3, [pc, #32]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	4a07      	ldr	r2, [pc, #28]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b22c:	f043 0301 	orr.w	r3, r3, #1
 800b230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b232:	4b05      	ldr	r3, [pc, #20]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a04      	ldr	r2, [pc, #16]	; (800b248 <HAL_RCC_OscConfig+0x76c>)
 800b238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b23c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b23e:	f7fc f8c7 	bl	80073d0 <HAL_GetTick>
 800b242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b244:	e011      	b.n	800b26a <HAL_RCC_OscConfig+0x78e>
 800b246:	bf00      	nop
 800b248:	58024400 	.word	0x58024400
 800b24c:	58024800 	.word	0x58024800
 800b250:	fffffc0c 	.word	0xfffffc0c
 800b254:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b258:	f7fc f8ba 	bl	80073d0 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	2b02      	cmp	r3, #2
 800b264:	d901      	bls.n	800b26a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e05f      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b26a:	4b32      	ldr	r3, [pc, #200]	; (800b334 <HAL_RCC_OscConfig+0x858>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0f0      	beq.n	800b258 <HAL_RCC_OscConfig+0x77c>
 800b276:	e057      	b.n	800b328 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b278:	4b2e      	ldr	r3, [pc, #184]	; (800b334 <HAL_RCC_OscConfig+0x858>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a2d      	ldr	r2, [pc, #180]	; (800b334 <HAL_RCC_OscConfig+0x858>)
 800b27e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b284:	f7fc f8a4 	bl	80073d0 <HAL_GetTick>
 800b288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b28a:	e008      	b.n	800b29e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b28c:	f7fc f8a0 	bl	80073d0 <HAL_GetTick>
 800b290:	4602      	mov	r2, r0
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	2b02      	cmp	r3, #2
 800b298:	d901      	bls.n	800b29e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e045      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b29e:	4b25      	ldr	r3, [pc, #148]	; (800b334 <HAL_RCC_OscConfig+0x858>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1f0      	bne.n	800b28c <HAL_RCC_OscConfig+0x7b0>
 800b2aa:	e03d      	b.n	800b328 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b2ac:	4b21      	ldr	r3, [pc, #132]	; (800b334 <HAL_RCC_OscConfig+0x858>)
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b2b2:	4b20      	ldr	r3, [pc, #128]	; (800b334 <HAL_RCC_OscConfig+0x858>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d031      	beq.n	800b324 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	f003 0203 	and.w	r2, r3, #3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d12a      	bne.n	800b324 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	091b      	lsrs	r3, r3, #4
 800b2d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d122      	bne.n	800b324 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d11a      	bne.n	800b324 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	0a5b      	lsrs	r3, r3, #9
 800b2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d111      	bne.n	800b324 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	0c1b      	lsrs	r3, r3, #16
 800b304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b30e:	429a      	cmp	r2, r3
 800b310:	d108      	bne.n	800b324 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	0e1b      	lsrs	r3, r3, #24
 800b316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b320:	429a      	cmp	r2, r3
 800b322:	d001      	beq.n	800b328 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e000      	b.n	800b32a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3730      	adds	r7, #48	; 0x30
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	58024400 	.word	0x58024400

0800b338 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e19c      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b34c:	4b8a      	ldr	r3, [pc, #552]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 030f 	and.w	r3, r3, #15
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	429a      	cmp	r2, r3
 800b358:	d910      	bls.n	800b37c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b35a:	4b87      	ldr	r3, [pc, #540]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f023 020f 	bic.w	r2, r3, #15
 800b362:	4985      	ldr	r1, [pc, #532]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	4313      	orrs	r3, r2
 800b368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b36a:	4b83      	ldr	r3, [pc, #524]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	d001      	beq.n	800b37c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e184      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f003 0304 	and.w	r3, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	d010      	beq.n	800b3aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	4b7b      	ldr	r3, [pc, #492]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b394:	429a      	cmp	r2, r3
 800b396:	d908      	bls.n	800b3aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b398:	4b78      	ldr	r3, [pc, #480]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	4975      	ldr	r1, [pc, #468]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0308 	and.w	r3, r3, #8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d010      	beq.n	800b3d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695a      	ldr	r2, [r3, #20]
 800b3ba:	4b70      	ldr	r3, [pc, #448]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d908      	bls.n	800b3d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b3c6:	4b6d      	ldr	r3, [pc, #436]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	496a      	ldr	r1, [pc, #424]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0310 	and.w	r3, r3, #16
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d010      	beq.n	800b406 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699a      	ldr	r2, [r3, #24]
 800b3e8:	4b64      	ldr	r3, [pc, #400]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b3ea:	69db      	ldr	r3, [r3, #28]
 800b3ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d908      	bls.n	800b406 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3f4:	4b61      	ldr	r3, [pc, #388]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	495e      	ldr	r1, [pc, #376]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b402:	4313      	orrs	r3, r2
 800b404:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d010      	beq.n	800b434 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	69da      	ldr	r2, [r3, #28]
 800b416:	4b59      	ldr	r3, [pc, #356]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b41e:	429a      	cmp	r2, r3
 800b420:	d908      	bls.n	800b434 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b422:	4b56      	ldr	r3, [pc, #344]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	69db      	ldr	r3, [r3, #28]
 800b42e:	4953      	ldr	r1, [pc, #332]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b430:	4313      	orrs	r3, r2
 800b432:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d010      	beq.n	800b462 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	4b4d      	ldr	r3, [pc, #308]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d908      	bls.n	800b462 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b450:	4b4a      	ldr	r3, [pc, #296]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	f023 020f 	bic.w	r2, r3, #15
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	4947      	ldr	r1, [pc, #284]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d055      	beq.n	800b51a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b46e:	4b43      	ldr	r3, [pc, #268]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	4940      	ldr	r1, [pc, #256]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	2b02      	cmp	r3, #2
 800b486:	d107      	bne.n	800b498 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b488:	4b3c      	ldr	r3, [pc, #240]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d121      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e0f6      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	2b03      	cmp	r3, #3
 800b49e:	d107      	bne.n	800b4b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b4a0:	4b36      	ldr	r3, [pc, #216]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d115      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e0ea      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d107      	bne.n	800b4c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b4b8:	4b30      	ldr	r3, [pc, #192]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d109      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e0de      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4c8:	4b2c      	ldr	r3, [pc, #176]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0304 	and.w	r3, r3, #4
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e0d6      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b4d8:	4b28      	ldr	r3, [pc, #160]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	f023 0207 	bic.w	r2, r3, #7
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	4925      	ldr	r1, [pc, #148]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4ea:	f7fb ff71 	bl	80073d0 <HAL_GetTick>
 800b4ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4f0:	e00a      	b.n	800b508 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4f2:	f7fb ff6d 	bl	80073d0 <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b500:	4293      	cmp	r3, r2
 800b502:	d901      	bls.n	800b508 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b504:	2303      	movs	r3, #3
 800b506:	e0be      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b508:	4b1c      	ldr	r3, [pc, #112]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	00db      	lsls	r3, r3, #3
 800b516:	429a      	cmp	r2, r3
 800b518:	d1eb      	bne.n	800b4f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0302 	and.w	r3, r3, #2
 800b522:	2b00      	cmp	r3, #0
 800b524:	d010      	beq.n	800b548 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	4b14      	ldr	r3, [pc, #80]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	f003 030f 	and.w	r3, r3, #15
 800b532:	429a      	cmp	r2, r3
 800b534:	d208      	bcs.n	800b548 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b536:	4b11      	ldr	r3, [pc, #68]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	f023 020f 	bic.w	r2, r3, #15
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	490e      	ldr	r1, [pc, #56]	; (800b57c <HAL_RCC_ClockConfig+0x244>)
 800b544:	4313      	orrs	r3, r2
 800b546:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b548:	4b0b      	ldr	r3, [pc, #44]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 030f 	and.w	r3, r3, #15
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d214      	bcs.n	800b580 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b556:	4b08      	ldr	r3, [pc, #32]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f023 020f 	bic.w	r2, r3, #15
 800b55e:	4906      	ldr	r1, [pc, #24]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	4313      	orrs	r3, r2
 800b564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b566:	4b04      	ldr	r3, [pc, #16]	; (800b578 <HAL_RCC_ClockConfig+0x240>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 030f 	and.w	r3, r3, #15
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d005      	beq.n	800b580 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	e086      	b.n	800b686 <HAL_RCC_ClockConfig+0x34e>
 800b578:	52002000 	.word	0x52002000
 800b57c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d010      	beq.n	800b5ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691a      	ldr	r2, [r3, #16]
 800b590:	4b3f      	ldr	r3, [pc, #252]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b598:	429a      	cmp	r2, r3
 800b59a:	d208      	bcs.n	800b5ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b59c:	4b3c      	ldr	r3, [pc, #240]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	4939      	ldr	r1, [pc, #228]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0308 	and.w	r3, r3, #8
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d010      	beq.n	800b5dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	695a      	ldr	r2, [r3, #20]
 800b5be:	4b34      	ldr	r3, [pc, #208]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d208      	bcs.n	800b5dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b5ca:	4b31      	ldr	r3, [pc, #196]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	492e      	ldr	r1, [pc, #184]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d010      	beq.n	800b60a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	699a      	ldr	r2, [r3, #24]
 800b5ec:	4b28      	ldr	r3, [pc, #160]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b5ee:	69db      	ldr	r3, [r3, #28]
 800b5f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d208      	bcs.n	800b60a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5f8:	4b25      	ldr	r3, [pc, #148]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	4922      	ldr	r1, [pc, #136]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b606:	4313      	orrs	r3, r2
 800b608:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0320 	and.w	r3, r3, #32
 800b612:	2b00      	cmp	r3, #0
 800b614:	d010      	beq.n	800b638 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	69da      	ldr	r2, [r3, #28]
 800b61a:	4b1d      	ldr	r3, [pc, #116]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b622:	429a      	cmp	r2, r3
 800b624:	d208      	bcs.n	800b638 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b626:	4b1a      	ldr	r3, [pc, #104]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	4917      	ldr	r1, [pc, #92]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b634:	4313      	orrs	r3, r2
 800b636:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b638:	f000 f834 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800b63c:	4602      	mov	r2, r0
 800b63e:	4b14      	ldr	r3, [pc, #80]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	0a1b      	lsrs	r3, r3, #8
 800b644:	f003 030f 	and.w	r3, r3, #15
 800b648:	4912      	ldr	r1, [pc, #72]	; (800b694 <HAL_RCC_ClockConfig+0x35c>)
 800b64a:	5ccb      	ldrb	r3, [r1, r3]
 800b64c:	f003 031f 	and.w	r3, r3, #31
 800b650:	fa22 f303 	lsr.w	r3, r2, r3
 800b654:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b656:	4b0e      	ldr	r3, [pc, #56]	; (800b690 <HAL_RCC_ClockConfig+0x358>)
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	f003 030f 	and.w	r3, r3, #15
 800b65e:	4a0d      	ldr	r2, [pc, #52]	; (800b694 <HAL_RCC_ClockConfig+0x35c>)
 800b660:	5cd3      	ldrb	r3, [r2, r3]
 800b662:	f003 031f 	and.w	r3, r3, #31
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	fa22 f303 	lsr.w	r3, r2, r3
 800b66c:	4a0a      	ldr	r2, [pc, #40]	; (800b698 <HAL_RCC_ClockConfig+0x360>)
 800b66e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b670:	4a0a      	ldr	r2, [pc, #40]	; (800b69c <HAL_RCC_ClockConfig+0x364>)
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b676:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <HAL_RCC_ClockConfig+0x368>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fb fe5e 	bl	800733c <HAL_InitTick>
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b684:	7bfb      	ldrb	r3, [r7, #15]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	58024400 	.word	0x58024400
 800b694:	08010d60 	.word	0x08010d60
 800b698:	24000008 	.word	0x24000008
 800b69c:	24000004 	.word	0x24000004
 800b6a0:	2400001c 	.word	0x2400001c

0800b6a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b089      	sub	sp, #36	; 0x24
 800b6a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6aa:	4bb3      	ldr	r3, [pc, #716]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6b2:	2b18      	cmp	r3, #24
 800b6b4:	f200 8155 	bhi.w	800b962 <HAL_RCC_GetSysClockFreq+0x2be>
 800b6b8:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6be:	bf00      	nop
 800b6c0:	0800b725 	.word	0x0800b725
 800b6c4:	0800b963 	.word	0x0800b963
 800b6c8:	0800b963 	.word	0x0800b963
 800b6cc:	0800b963 	.word	0x0800b963
 800b6d0:	0800b963 	.word	0x0800b963
 800b6d4:	0800b963 	.word	0x0800b963
 800b6d8:	0800b963 	.word	0x0800b963
 800b6dc:	0800b963 	.word	0x0800b963
 800b6e0:	0800b74b 	.word	0x0800b74b
 800b6e4:	0800b963 	.word	0x0800b963
 800b6e8:	0800b963 	.word	0x0800b963
 800b6ec:	0800b963 	.word	0x0800b963
 800b6f0:	0800b963 	.word	0x0800b963
 800b6f4:	0800b963 	.word	0x0800b963
 800b6f8:	0800b963 	.word	0x0800b963
 800b6fc:	0800b963 	.word	0x0800b963
 800b700:	0800b751 	.word	0x0800b751
 800b704:	0800b963 	.word	0x0800b963
 800b708:	0800b963 	.word	0x0800b963
 800b70c:	0800b963 	.word	0x0800b963
 800b710:	0800b963 	.word	0x0800b963
 800b714:	0800b963 	.word	0x0800b963
 800b718:	0800b963 	.word	0x0800b963
 800b71c:	0800b963 	.word	0x0800b963
 800b720:	0800b757 	.word	0x0800b757
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b724:	4b94      	ldr	r3, [pc, #592]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 0320 	and.w	r3, r3, #32
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d009      	beq.n	800b744 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b730:	4b91      	ldr	r3, [pc, #580]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	08db      	lsrs	r3, r3, #3
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	4a90      	ldr	r2, [pc, #576]	; (800b97c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b73c:	fa22 f303 	lsr.w	r3, r2, r3
 800b740:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b742:	e111      	b.n	800b968 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b744:	4b8d      	ldr	r3, [pc, #564]	; (800b97c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b746:	61bb      	str	r3, [r7, #24]
    break;
 800b748:	e10e      	b.n	800b968 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b74a:	4b8d      	ldr	r3, [pc, #564]	; (800b980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b74c:	61bb      	str	r3, [r7, #24]
    break;
 800b74e:	e10b      	b.n	800b968 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b750:	4b8c      	ldr	r3, [pc, #560]	; (800b984 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b752:	61bb      	str	r3, [r7, #24]
    break;
 800b754:	e108      	b.n	800b968 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b756:	4b88      	ldr	r3, [pc, #544]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b75a:	f003 0303 	and.w	r3, r3, #3
 800b75e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b760:	4b85      	ldr	r3, [pc, #532]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b764:	091b      	lsrs	r3, r3, #4
 800b766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b76a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b76c:	4b82      	ldr	r3, [pc, #520]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	f003 0301 	and.w	r3, r3, #1
 800b774:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b776:	4b80      	ldr	r3, [pc, #512]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b77a:	08db      	lsrs	r3, r3, #3
 800b77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	fb02 f303 	mul.w	r3, r2, r3
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 80e1 	beq.w	800b95c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	f000 8083 	beq.w	800b8a8 <HAL_RCC_GetSysClockFreq+0x204>
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	f200 80a1 	bhi.w	800b8ec <HAL_RCC_GetSysClockFreq+0x248>
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <HAL_RCC_GetSysClockFreq+0x114>
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d056      	beq.n	800b864 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b7b6:	e099      	b.n	800b8ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7b8:	4b6f      	ldr	r3, [pc, #444]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0320 	and.w	r3, r3, #32
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d02d      	beq.n	800b820 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b7c4:	4b6c      	ldr	r3, [pc, #432]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	08db      	lsrs	r3, r3, #3
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	4a6b      	ldr	r2, [pc, #428]	; (800b97c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	ee07 3a90 	vmov	s15, r3
 800b7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ee:	4b62      	ldr	r3, [pc, #392]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f6:	ee07 3a90 	vmov	s15, r3
 800b7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b802:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b81a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b81e:	e087      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b82a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b98c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b832:	4b51      	ldr	r3, [pc, #324]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83a:	ee07 3a90 	vmov	s15, r3
 800b83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b842:	ed97 6a02 	vldr	s12, [r7, #8]
 800b846:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b862:	e065      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b990 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b876:	4b40      	ldr	r3, [pc, #256]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87e:	ee07 3a90 	vmov	s15, r3
 800b882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b886:	ed97 6a02 	vldr	s12, [r7, #8]
 800b88a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8a6:	e043      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	ee07 3a90 	vmov	s15, r3
 800b8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b994 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ba:	4b2f      	ldr	r3, [pc, #188]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c2:	ee07 3a90 	vmov	s15, r3
 800b8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ea:	e021      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b990 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8fe:	4b1e      	ldr	r3, [pc, #120]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b906:	ee07 3a90 	vmov	s15, r3
 800b90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b90e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b912:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b91e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b92a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b92e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b930:	4b11      	ldr	r3, [pc, #68]	; (800b978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b934:	0a5b      	lsrs	r3, r3, #9
 800b936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b93a:	3301      	adds	r3, #1
 800b93c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b948:	edd7 6a07 	vldr	s13, [r7, #28]
 800b94c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b954:	ee17 3a90 	vmov	r3, s15
 800b958:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b95a:	e005      	b.n	800b968 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b95c:	2300      	movs	r3, #0
 800b95e:	61bb      	str	r3, [r7, #24]
    break;
 800b960:	e002      	b.n	800b968 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b962:	4b07      	ldr	r3, [pc, #28]	; (800b980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b964:	61bb      	str	r3, [r7, #24]
    break;
 800b966:	bf00      	nop
  }

  return sysclockfreq;
 800b968:	69bb      	ldr	r3, [r7, #24]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3724      	adds	r7, #36	; 0x24
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	58024400 	.word	0x58024400
 800b97c:	03d09000 	.word	0x03d09000
 800b980:	003d0900 	.word	0x003d0900
 800b984:	007a1200 	.word	0x007a1200
 800b988:	46000000 	.word	0x46000000
 800b98c:	4c742400 	.word	0x4c742400
 800b990:	4a742400 	.word	0x4a742400
 800b994:	4af42400 	.word	0x4af42400

0800b998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b99e:	f7ff fe81 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	4b10      	ldr	r3, [pc, #64]	; (800b9e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	0a1b      	lsrs	r3, r3, #8
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	490f      	ldr	r1, [pc, #60]	; (800b9ec <HAL_RCC_GetHCLKFreq+0x54>)
 800b9b0:	5ccb      	ldrb	r3, [r1, r3]
 800b9b2:	f003 031f 	and.w	r3, r3, #31
 800b9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	f003 030f 	and.w	r3, r3, #15
 800b9c4:	4a09      	ldr	r2, [pc, #36]	; (800b9ec <HAL_RCC_GetHCLKFreq+0x54>)
 800b9c6:	5cd3      	ldrb	r3, [r2, r3]
 800b9c8:	f003 031f 	and.w	r3, r3, #31
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d2:	4a07      	ldr	r2, [pc, #28]	; (800b9f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b9d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b9d6:	4a07      	ldr	r2, [pc, #28]	; (800b9f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b9de:	681b      	ldr	r3, [r3, #0]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	58024400 	.word	0x58024400
 800b9ec:	08010d60 	.word	0x08010d60
 800b9f0:	24000008 	.word	0x24000008
 800b9f4:	24000004 	.word	0x24000004

0800b9f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b9fc:	f7ff ffcc 	bl	800b998 <HAL_RCC_GetHCLKFreq>
 800ba00:	4602      	mov	r2, r0
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	091b      	lsrs	r3, r3, #4
 800ba08:	f003 0307 	and.w	r3, r3, #7
 800ba0c:	4904      	ldr	r1, [pc, #16]	; (800ba20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba0e:	5ccb      	ldrb	r3, [r1, r3]
 800ba10:	f003 031f 	and.w	r3, r3, #31
 800ba14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	58024400 	.word	0x58024400
 800ba20:	08010d60 	.word	0x08010d60

0800ba24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ba28:	f7ff ffb6 	bl	800b998 <HAL_RCC_GetHCLKFreq>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	0a1b      	lsrs	r3, r3, #8
 800ba34:	f003 0307 	and.w	r3, r3, #7
 800ba38:	4904      	ldr	r1, [pc, #16]	; (800ba4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ba3a:	5ccb      	ldrb	r3, [r1, r3]
 800ba3c:	f003 031f 	and.w	r3, r3, #31
 800ba40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	58024400 	.word	0x58024400
 800ba4c:	08010d60 	.word	0x08010d60

0800ba50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba58:	2300      	movs	r3, #0
 800ba5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d03f      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba74:	d02a      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ba76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba7a:	d824      	bhi.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba80:	d018      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ba82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba86:	d81e      	bhi.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ba8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba90:	d007      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ba92:	e018      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba94:	4ba3      	ldr	r3, [pc, #652]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba98:	4aa2      	ldr	r2, [pc, #648]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ba9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800baa0:	e015      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3304      	adds	r3, #4
 800baa6:	2102      	movs	r1, #2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f001 f9d5 	bl	800ce58 <RCCEx_PLL2_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bab2:	e00c      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	3324      	adds	r3, #36	; 0x24
 800bab8:	2102      	movs	r1, #2
 800baba:	4618      	mov	r0, r3
 800babc:	f001 fa7e 	bl	800cfbc <RCCEx_PLL3_Config>
 800bac0:	4603      	mov	r3, r0
 800bac2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bac4:	e003      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	75fb      	strb	r3, [r7, #23]
      break;
 800baca:	e000      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bacc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d109      	bne.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bad4:	4b93      	ldr	r3, [pc, #588]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bae0:	4990      	ldr	r1, [pc, #576]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	650b      	str	r3, [r1, #80]	; 0x50
 800bae6:	e001      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
 800baea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d03d      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafc:	2b04      	cmp	r3, #4
 800bafe:	d826      	bhi.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800bb00:	a201      	add	r2, pc, #4	; (adr r2, 800bb08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800bb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb06:	bf00      	nop
 800bb08:	0800bb1d 	.word	0x0800bb1d
 800bb0c:	0800bb2b 	.word	0x0800bb2b
 800bb10:	0800bb3d 	.word	0x0800bb3d
 800bb14:	0800bb55 	.word	0x0800bb55
 800bb18:	0800bb55 	.word	0x0800bb55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb1c:	4b81      	ldr	r3, [pc, #516]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	4a80      	ldr	r2, [pc, #512]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb28:	e015      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	2100      	movs	r1, #0
 800bb30:	4618      	mov	r0, r3
 800bb32:	f001 f991 	bl	800ce58 <RCCEx_PLL2_Config>
 800bb36:	4603      	mov	r3, r0
 800bb38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb3a:	e00c      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3324      	adds	r3, #36	; 0x24
 800bb40:	2100      	movs	r1, #0
 800bb42:	4618      	mov	r0, r3
 800bb44:	f001 fa3a 	bl	800cfbc <RCCEx_PLL3_Config>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb4c:	e003      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	75fb      	strb	r3, [r7, #23]
      break;
 800bb52:	e000      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800bb54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d109      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb5c:	4b71      	ldr	r3, [pc, #452]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb60:	f023 0207 	bic.w	r2, r3, #7
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb68:	496e      	ldr	r1, [pc, #440]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	650b      	str	r3, [r1, #80]	; 0x50
 800bb6e:	e001      	b.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d042      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb88:	d02b      	beq.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800bb8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb8e:	d825      	bhi.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bb90:	2bc0      	cmp	r3, #192	; 0xc0
 800bb92:	d028      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bb94:	2bc0      	cmp	r3, #192	; 0xc0
 800bb96:	d821      	bhi.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bb98:	2b80      	cmp	r3, #128	; 0x80
 800bb9a:	d016      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800bb9c:	2b80      	cmp	r3, #128	; 0x80
 800bb9e:	d81d      	bhi.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800bba4:	2b40      	cmp	r3, #64	; 0x40
 800bba6:	d007      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bba8:	e018      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbaa:	4b5e      	ldr	r3, [pc, #376]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbae:	4a5d      	ldr	r2, [pc, #372]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bbb6:	e017      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 f94a 	bl	800ce58 <RCCEx_PLL2_Config>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bbc8:	e00e      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3324      	adds	r3, #36	; 0x24
 800bbce:	2100      	movs	r1, #0
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f001 f9f3 	bl	800cfbc <RCCEx_PLL3_Config>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bbda:	e005      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe0:	e002      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bbe2:	bf00      	nop
 800bbe4:	e000      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bbe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d109      	bne.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bbee:	4b4d      	ldr	r3, [pc, #308]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfa:	494a      	ldr	r1, [pc, #296]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	650b      	str	r3, [r1, #80]	; 0x50
 800bc00:	e001      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
 800bc04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d049      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc1c:	d030      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bc1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc22:	d82a      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bc24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc28:	d02c      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bc2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc2e:	d824      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bc30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc34:	d018      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bc36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc3a:	d81e      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bc40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc44:	d007      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bc46:	e018      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc48:	4b36      	ldr	r3, [pc, #216]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	4a35      	ldr	r2, [pc, #212]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc54:	e017      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f001 f8fb 	bl	800ce58 <RCCEx_PLL2_Config>
 800bc62:	4603      	mov	r3, r0
 800bc64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bc66:	e00e      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	3324      	adds	r3, #36	; 0x24
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f001 f9a4 	bl	800cfbc <RCCEx_PLL3_Config>
 800bc74:	4603      	mov	r3, r0
 800bc76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bc78:	e005      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc7e:	e002      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bc80:	bf00      	nop
 800bc82:	e000      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bc84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc86:	7dfb      	ldrb	r3, [r7, #23]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bc8c:	4b25      	ldr	r3, [pc, #148]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc9a:	4922      	ldr	r1, [pc, #136]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	658b      	str	r3, [r1, #88]	; 0x58
 800bca0:	e001      	b.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d04b      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bcb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcbc:	d030      	beq.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bcbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcc2:	d82a      	bhi.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bcc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bcc8:	d02e      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800bcca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bcce:	d824      	bhi.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bcd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcd4:	d018      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bcd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcda:	d81e      	bhi.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bce4:	d007      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bce6:	e018      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce8:	4b0e      	ldr	r3, [pc, #56]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	4a0d      	ldr	r2, [pc, #52]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bcee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bcf4:	e019      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 f8ab 	bl	800ce58 <RCCEx_PLL2_Config>
 800bd02:	4603      	mov	r3, r0
 800bd04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bd06:	e010      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	3324      	adds	r3, #36	; 0x24
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f001 f954 	bl	800cfbc <RCCEx_PLL3_Config>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bd18:	e007      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	75fb      	strb	r3, [r7, #23]
      break;
 800bd1e:	e004      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800bd20:	bf00      	nop
 800bd22:	e002      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bd24:	58024400 	.word	0x58024400
      break;
 800bd28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bd30:	4b99      	ldr	r3, [pc, #612]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bd3e:	4996      	ldr	r1, [pc, #600]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	658b      	str	r3, [r1, #88]	; 0x58
 800bd44:	e001      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd46:	7dfb      	ldrb	r3, [r7, #23]
 800bd48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d032      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd5a:	2b30      	cmp	r3, #48	; 0x30
 800bd5c:	d01c      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800bd5e:	2b30      	cmp	r3, #48	; 0x30
 800bd60:	d817      	bhi.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bd62:	2b20      	cmp	r3, #32
 800bd64:	d00c      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800bd66:	2b20      	cmp	r3, #32
 800bd68:	d813      	bhi.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d016      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bd6e:	2b10      	cmp	r3, #16
 800bd70:	d10f      	bne.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd72:	4b89      	ldr	r3, [pc, #548]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	4a88      	ldr	r2, [pc, #544]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bd78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bd7e:	e00e      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	2102      	movs	r1, #2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 f866 	bl	800ce58 <RCCEx_PLL2_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bd90:	e005      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	75fb      	strb	r3, [r7, #23]
      break;
 800bd96:	e002      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bd98:	bf00      	nop
 800bd9a:	e000      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800bd9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d109      	bne.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bda4:	4b7c      	ldr	r3, [pc, #496]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bda6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb0:	4979      	ldr	r1, [pc, #484]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bdb6:	e001      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d047      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdd0:	d030      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bdd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdd6:	d82a      	bhi.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bdd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bddc:	d02c      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800bdde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bde2:	d824      	bhi.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bde4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde8:	d018      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bdea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdee:	d81e      	bhi.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d003      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf8:	d007      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bdfa:	e018      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdfc:	4b66      	ldr	r3, [pc, #408]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	4a65      	ldr	r2, [pc, #404]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800be02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800be08:	e017      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	3304      	adds	r3, #4
 800be0e:	2100      	movs	r1, #0
 800be10:	4618      	mov	r0, r3
 800be12:	f001 f821 	bl	800ce58 <RCCEx_PLL2_Config>
 800be16:	4603      	mov	r3, r0
 800be18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800be1a:	e00e      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	3324      	adds	r3, #36	; 0x24
 800be20:	2100      	movs	r1, #0
 800be22:	4618      	mov	r0, r3
 800be24:	f001 f8ca 	bl	800cfbc <RCCEx_PLL3_Config>
 800be28:	4603      	mov	r3, r0
 800be2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800be2c:	e005      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	75fb      	strb	r3, [r7, #23]
      break;
 800be32:	e002      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800be34:	bf00      	nop
 800be36:	e000      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800be38:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d109      	bne.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800be40:	4b55      	ldr	r3, [pc, #340]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800be42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be4c:	4952      	ldr	r1, [pc, #328]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800be4e:	4313      	orrs	r3, r2
 800be50:	650b      	str	r3, [r1, #80]	; 0x50
 800be52:	e001      	b.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d049      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be6c:	d02e      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800be6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be72:	d828      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be78:	d02a      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800be7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be7e:	d822      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be84:	d026      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800be86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be8a:	d81c      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be90:	d010      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800be92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be96:	d816      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01d      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800be9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea0:	d111      	bne.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3304      	adds	r3, #4
 800bea6:	2101      	movs	r1, #1
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 ffd5 	bl	800ce58 <RCCEx_PLL2_Config>
 800beae:	4603      	mov	r3, r0
 800beb0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800beb2:	e012      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3324      	adds	r3, #36	; 0x24
 800beb8:	2101      	movs	r1, #1
 800beba:	4618      	mov	r0, r3
 800bebc:	f001 f87e 	bl	800cfbc <RCCEx_PLL3_Config>
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bec4:	e009      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	75fb      	strb	r3, [r7, #23]
      break;
 800beca:	e006      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800becc:	bf00      	nop
 800bece:	e004      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bed0:	bf00      	nop
 800bed2:	e002      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bed4:	bf00      	nop
 800bed6:	e000      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d109      	bne.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bee0:	4b2d      	ldr	r3, [pc, #180]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beec:	492a      	ldr	r1, [pc, #168]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800beee:	4313      	orrs	r3, r2
 800bef0:	650b      	str	r3, [r1, #80]	; 0x50
 800bef2:	e001      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef4:	7dfb      	ldrb	r3, [r7, #23]
 800bef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d04d      	beq.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf0e:	d02e      	beq.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bf10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf14:	d828      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf1a:	d02a      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bf1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf20:	d822      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf26:	d026      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bf28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf2c:	d81c      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf32:	d010      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bf34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf38:	d816      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d01d      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bf3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf42:	d111      	bne.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	3304      	adds	r3, #4
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 ff84 	bl	800ce58 <RCCEx_PLL2_Config>
 800bf50:	4603      	mov	r3, r0
 800bf52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bf54:	e012      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	3324      	adds	r3, #36	; 0x24
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 f82d 	bl	800cfbc <RCCEx_PLL3_Config>
 800bf62:	4603      	mov	r3, r0
 800bf64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bf66:	e009      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf6c:	e006      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf6e:	bf00      	nop
 800bf70:	e004      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf72:	bf00      	nop
 800bf74:	e002      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf76:	bf00      	nop
 800bf78:	e000      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bf7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10c      	bne.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf82:	4b05      	ldr	r3, [pc, #20]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bf84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bf90:	4901      	ldr	r1, [pc, #4]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	658b      	str	r3, [r1, #88]	; 0x58
 800bf96:	e003      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bf98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
 800bf9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d02f      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb4:	d00e      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bfb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfba:	d814      	bhi.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d015      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bfc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfc4:	d10f      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfc6:	4baf      	ldr	r3, [pc, #700]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfca:	4aae      	ldr	r2, [pc, #696]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bfcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bfd2:	e00c      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	2101      	movs	r1, #1
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 ff3c 	bl	800ce58 <RCCEx_PLL2_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bfe4:	e003      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	75fb      	strb	r3, [r7, #23]
      break;
 800bfea:	e000      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bfec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d109      	bne.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bff4:	4ba3      	ldr	r3, [pc, #652]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c000:	49a0      	ldr	r1, [pc, #640]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c002:	4313      	orrs	r3, r2
 800c004:	650b      	str	r3, [r1, #80]	; 0x50
 800c006:	e001      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c008:	7dfb      	ldrb	r3, [r7, #23]
 800c00a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d032      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d81b      	bhi.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c020:	a201      	add	r2, pc, #4	; (adr r2, 800c028 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c026:	bf00      	nop
 800c028:	0800c05f 	.word	0x0800c05f
 800c02c:	0800c039 	.word	0x0800c039
 800c030:	0800c047 	.word	0x0800c047
 800c034:	0800c05f 	.word	0x0800c05f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c038:	4b92      	ldr	r3, [pc, #584]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03c:	4a91      	ldr	r2, [pc, #580]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c03e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c044:	e00c      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3304      	adds	r3, #4
 800c04a:	2102      	movs	r1, #2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 ff03 	bl	800ce58 <RCCEx_PLL2_Config>
 800c052:	4603      	mov	r3, r0
 800c054:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c056:	e003      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	75fb      	strb	r3, [r7, #23]
      break;
 800c05c:	e000      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d109      	bne.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c066:	4b87      	ldr	r3, [pc, #540]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c06a:	f023 0203 	bic.w	r2, r3, #3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c072:	4984      	ldr	r1, [pc, #528]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c074:	4313      	orrs	r3, r2
 800c076:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c078:	e001      	b.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 8086 	beq.w	800c198 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c08c:	4b7e      	ldr	r3, [pc, #504]	; (800c288 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a7d      	ldr	r2, [pc, #500]	; (800c288 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c098:	f7fb f99a 	bl	80073d0 <HAL_GetTick>
 800c09c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c09e:	e009      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0a0:	f7fb f996 	bl	80073d0 <HAL_GetTick>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	2b64      	cmp	r3, #100	; 0x64
 800c0ac:	d902      	bls.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	75fb      	strb	r3, [r7, #23]
        break;
 800c0b2:	e005      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0b4:	4b74      	ldr	r3, [pc, #464]	; (800c288 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0ef      	beq.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d166      	bne.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c0c6:	4b6f      	ldr	r3, [pc, #444]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0d0:	4053      	eors	r3, r2
 800c0d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d013      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0da:	4b6a      	ldr	r3, [pc, #424]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0e4:	4b67      	ldr	r3, [pc, #412]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0e8:	4a66      	ldr	r2, [pc, #408]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0f0:	4b64      	ldr	r3, [pc, #400]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0f4:	4a63      	ldr	r2, [pc, #396]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c0fc:	4a61      	ldr	r2, [pc, #388]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c10c:	d115      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c10e:	f7fb f95f 	bl	80073d0 <HAL_GetTick>
 800c112:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c114:	e00b      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c116:	f7fb f95b 	bl	80073d0 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	f241 3288 	movw	r2, #5000	; 0x1388
 800c124:	4293      	cmp	r3, r2
 800c126:	d902      	bls.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c128:	2303      	movs	r3, #3
 800c12a:	75fb      	strb	r3, [r7, #23]
            break;
 800c12c:	e005      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c12e:	4b55      	ldr	r3, [pc, #340]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c132:	f003 0302 	and.w	r3, r3, #2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0ed      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c13a:	7dfb      	ldrb	r3, [r7, #23]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d126      	bne.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c14a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c14e:	d10d      	bne.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c150:	4b4c      	ldr	r3, [pc, #304]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c15e:	0919      	lsrs	r1, r3, #4
 800c160:	4b4a      	ldr	r3, [pc, #296]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c162:	400b      	ands	r3, r1
 800c164:	4947      	ldr	r1, [pc, #284]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c166:	4313      	orrs	r3, r2
 800c168:	610b      	str	r3, [r1, #16]
 800c16a:	e005      	b.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c16c:	4b45      	ldr	r3, [pc, #276]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	4a44      	ldr	r2, [pc, #272]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c172:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c176:	6113      	str	r3, [r2, #16]
 800c178:	4b42      	ldr	r3, [pc, #264]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c17a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c186:	493f      	ldr	r1, [pc, #252]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c188:	4313      	orrs	r3, r2
 800c18a:	670b      	str	r3, [r1, #112]	; 0x70
 800c18c:	e004      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c18e:	7dfb      	ldrb	r3, [r7, #23]
 800c190:	75bb      	strb	r3, [r7, #22]
 800c192:	e001      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c194:	7dfb      	ldrb	r3, [r7, #23]
 800c196:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 0301 	and.w	r3, r3, #1
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 8085 	beq.w	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1aa:	2b28      	cmp	r3, #40	; 0x28
 800c1ac:	d866      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c1ae:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c291 	.word	0x0800c291
 800c1b8:	0800c27d 	.word	0x0800c27d
 800c1bc:	0800c27d 	.word	0x0800c27d
 800c1c0:	0800c27d 	.word	0x0800c27d
 800c1c4:	0800c27d 	.word	0x0800c27d
 800c1c8:	0800c27d 	.word	0x0800c27d
 800c1cc:	0800c27d 	.word	0x0800c27d
 800c1d0:	0800c27d 	.word	0x0800c27d
 800c1d4:	0800c259 	.word	0x0800c259
 800c1d8:	0800c27d 	.word	0x0800c27d
 800c1dc:	0800c27d 	.word	0x0800c27d
 800c1e0:	0800c27d 	.word	0x0800c27d
 800c1e4:	0800c27d 	.word	0x0800c27d
 800c1e8:	0800c27d 	.word	0x0800c27d
 800c1ec:	0800c27d 	.word	0x0800c27d
 800c1f0:	0800c27d 	.word	0x0800c27d
 800c1f4:	0800c26b 	.word	0x0800c26b
 800c1f8:	0800c27d 	.word	0x0800c27d
 800c1fc:	0800c27d 	.word	0x0800c27d
 800c200:	0800c27d 	.word	0x0800c27d
 800c204:	0800c27d 	.word	0x0800c27d
 800c208:	0800c27d 	.word	0x0800c27d
 800c20c:	0800c27d 	.word	0x0800c27d
 800c210:	0800c27d 	.word	0x0800c27d
 800c214:	0800c291 	.word	0x0800c291
 800c218:	0800c27d 	.word	0x0800c27d
 800c21c:	0800c27d 	.word	0x0800c27d
 800c220:	0800c27d 	.word	0x0800c27d
 800c224:	0800c27d 	.word	0x0800c27d
 800c228:	0800c27d 	.word	0x0800c27d
 800c22c:	0800c27d 	.word	0x0800c27d
 800c230:	0800c27d 	.word	0x0800c27d
 800c234:	0800c291 	.word	0x0800c291
 800c238:	0800c27d 	.word	0x0800c27d
 800c23c:	0800c27d 	.word	0x0800c27d
 800c240:	0800c27d 	.word	0x0800c27d
 800c244:	0800c27d 	.word	0x0800c27d
 800c248:	0800c27d 	.word	0x0800c27d
 800c24c:	0800c27d 	.word	0x0800c27d
 800c250:	0800c27d 	.word	0x0800c27d
 800c254:	0800c291 	.word	0x0800c291
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	3304      	adds	r3, #4
 800c25c:	2101      	movs	r1, #1
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fdfa 	bl	800ce58 <RCCEx_PLL2_Config>
 800c264:	4603      	mov	r3, r0
 800c266:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c268:	e013      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3324      	adds	r3, #36	; 0x24
 800c26e:	2101      	movs	r1, #1
 800c270:	4618      	mov	r0, r3
 800c272:	f000 fea3 	bl	800cfbc <RCCEx_PLL3_Config>
 800c276:	4603      	mov	r3, r0
 800c278:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c27a:	e00a      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	75fb      	strb	r3, [r7, #23]
      break;
 800c280:	e007      	b.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c282:	bf00      	nop
 800c284:	58024400 	.word	0x58024400
 800c288:	58024800 	.word	0x58024800
 800c28c:	00ffffcf 	.word	0x00ffffcf
      break;
 800c290:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c292:	7dfb      	ldrb	r3, [r7, #23]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d109      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c298:	4b96      	ldr	r3, [pc, #600]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2a4:	4993      	ldr	r1, [pc, #588]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	654b      	str	r3, [r1, #84]	; 0x54
 800c2aa:	e001      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0302 	and.w	r3, r3, #2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d038      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2c0:	2b05      	cmp	r3, #5
 800c2c2:	d821      	bhi.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c2c4:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ca:	bf00      	nop
 800c2cc:	0800c30f 	.word	0x0800c30f
 800c2d0:	0800c2e5 	.word	0x0800c2e5
 800c2d4:	0800c2f7 	.word	0x0800c2f7
 800c2d8:	0800c30f 	.word	0x0800c30f
 800c2dc:	0800c30f 	.word	0x0800c30f
 800c2e0:	0800c30f 	.word	0x0800c30f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 fdb4 	bl	800ce58 <RCCEx_PLL2_Config>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c2f4:	e00c      	b.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	3324      	adds	r3, #36	; 0x24
 800c2fa:	2101      	movs	r1, #1
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fe5d 	bl	800cfbc <RCCEx_PLL3_Config>
 800c302:	4603      	mov	r3, r0
 800c304:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c306:	e003      	b.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	75fb      	strb	r3, [r7, #23]
      break;
 800c30c:	e000      	b.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c30e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d109      	bne.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c316:	4b77      	ldr	r3, [pc, #476]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31a:	f023 0207 	bic.w	r2, r3, #7
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c322:	4974      	ldr	r1, [pc, #464]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c324:	4313      	orrs	r3, r2
 800c326:	654b      	str	r3, [r1, #84]	; 0x54
 800c328:	e001      	b.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0304 	and.w	r3, r3, #4
 800c336:	2b00      	cmp	r3, #0
 800c338:	d03a      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c340:	2b05      	cmp	r3, #5
 800c342:	d821      	bhi.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c344:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34a:	bf00      	nop
 800c34c:	0800c38f 	.word	0x0800c38f
 800c350:	0800c365 	.word	0x0800c365
 800c354:	0800c377 	.word	0x0800c377
 800c358:	0800c38f 	.word	0x0800c38f
 800c35c:	0800c38f 	.word	0x0800c38f
 800c360:	0800c38f 	.word	0x0800c38f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3304      	adds	r3, #4
 800c368:	2101      	movs	r1, #1
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 fd74 	bl	800ce58 <RCCEx_PLL2_Config>
 800c370:	4603      	mov	r3, r0
 800c372:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c374:	e00c      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	3324      	adds	r3, #36	; 0x24
 800c37a:	2101      	movs	r1, #1
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 fe1d 	bl	800cfbc <RCCEx_PLL3_Config>
 800c382:	4603      	mov	r3, r0
 800c384:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c386:	e003      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	75fb      	strb	r3, [r7, #23]
      break;
 800c38c:	e000      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c38e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c390:	7dfb      	ldrb	r3, [r7, #23]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10a      	bne.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c396:	4b57      	ldr	r3, [pc, #348]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c39a:	f023 0207 	bic.w	r2, r3, #7
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a4:	4953      	ldr	r1, [pc, #332]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	658b      	str	r3, [r1, #88]	; 0x58
 800c3aa:	e001      	b.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d04b      	beq.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3c6:	d02e      	beq.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3cc:	d828      	bhi.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d2:	d02a      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d8:	d822      	bhi.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3de:	d026      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c3e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3e4:	d81c      	bhi.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ea:	d010      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3f0:	d816      	bhi.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d01d      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c3f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3fa:	d111      	bne.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3304      	adds	r3, #4
 800c400:	2100      	movs	r1, #0
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fd28 	bl	800ce58 <RCCEx_PLL2_Config>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c40c:	e012      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3324      	adds	r3, #36	; 0x24
 800c412:	2102      	movs	r1, #2
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fdd1 	bl	800cfbc <RCCEx_PLL3_Config>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c41e:	e009      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	75fb      	strb	r3, [r7, #23]
      break;
 800c424:	e006      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c426:	bf00      	nop
 800c428:	e004      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c42a:	bf00      	nop
 800c42c:	e002      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c42e:	bf00      	nop
 800c430:	e000      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c432:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10a      	bne.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c43a:	4b2e      	ldr	r3, [pc, #184]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c43c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c448:	492a      	ldr	r1, [pc, #168]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c44a:	4313      	orrs	r3, r2
 800c44c:	654b      	str	r3, [r1, #84]	; 0x54
 800c44e:	e001      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d04d      	beq.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c466:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c46a:	d02e      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c46c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c470:	d828      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c476:	d02a      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c47c:	d822      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c47e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c482:	d026      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c488:	d81c      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c48a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c48e:	d010      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c494:	d816      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d01d      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c49e:	d111      	bne.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fcd6 	bl	800ce58 <RCCEx_PLL2_Config>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c4b0:	e012      	b.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3324      	adds	r3, #36	; 0x24
 800c4b6:	2102      	movs	r1, #2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 fd7f 	bl	800cfbc <RCCEx_PLL3_Config>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c4c2:	e009      	b.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	75fb      	strb	r3, [r7, #23]
      break;
 800c4c8:	e006      	b.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4ca:	bf00      	nop
 800c4cc:	e004      	b.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4ce:	bf00      	nop
 800c4d0:	e002      	b.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4d2:	bf00      	nop
 800c4d4:	e000      	b.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c4d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10c      	bne.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4ec:	4901      	ldr	r1, [pc, #4]	; (800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	658b      	str	r3, [r1, #88]	; 0x58
 800c4f2:	e003      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c4f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
 800c4fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c504:	2b00      	cmp	r3, #0
 800c506:	d04b      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c50e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c512:	d02e      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c514:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c518:	d828      	bhi.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c51e:	d02a      	beq.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c524:	d822      	bhi.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c526:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c52a:	d026      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c52c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c530:	d81c      	bhi.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c536:	d010      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c53c:	d816      	bhi.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d01d      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c546:	d111      	bne.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	3304      	adds	r3, #4
 800c54c:	2100      	movs	r1, #0
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 fc82 	bl	800ce58 <RCCEx_PLL2_Config>
 800c554:	4603      	mov	r3, r0
 800c556:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c558:	e012      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3324      	adds	r3, #36	; 0x24
 800c55e:	2102      	movs	r1, #2
 800c560:	4618      	mov	r0, r3
 800c562:	f000 fd2b 	bl	800cfbc <RCCEx_PLL3_Config>
 800c566:	4603      	mov	r3, r0
 800c568:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c56a:	e009      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	75fb      	strb	r3, [r7, #23]
      break;
 800c570:	e006      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c572:	bf00      	nop
 800c574:	e004      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c576:	bf00      	nop
 800c578:	e002      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c57a:	bf00      	nop
 800c57c:	e000      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c57e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10a      	bne.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c586:	4b9d      	ldr	r3, [pc, #628]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c58a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c594:	4999      	ldr	r1, [pc, #612]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c596:	4313      	orrs	r3, r2
 800c598:	658b      	str	r3, [r1, #88]	; 0x58
 800c59a:	e001      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
 800c59e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0308 	and.w	r3, r3, #8
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d01a      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5b6:	d10a      	bne.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3324      	adds	r3, #36	; 0x24
 800c5bc:	2102      	movs	r1, #2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fcfc 	bl	800cfbc <RCCEx_PLL3_Config>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c5ce:	4b8b      	ldr	r3, [pc, #556]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5dc:	4987      	ldr	r1, [pc, #540]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 0310 	and.w	r3, r3, #16
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d01a      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5f8:	d10a      	bne.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	3324      	adds	r3, #36	; 0x24
 800c5fe:	2102      	movs	r1, #2
 800c600:	4618      	mov	r0, r3
 800c602:	f000 fcdb 	bl	800cfbc <RCCEx_PLL3_Config>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c610:	4b7a      	ldr	r3, [pc, #488]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c61e:	4977      	ldr	r1, [pc, #476]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c620:	4313      	orrs	r3, r2
 800c622:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d034      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c63a:	d01d      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c63c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c640:	d817      	bhi.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c64a:	d009      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c64c:	e011      	b.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3304      	adds	r3, #4
 800c652:	2100      	movs	r1, #0
 800c654:	4618      	mov	r0, r3
 800c656:	f000 fbff 	bl	800ce58 <RCCEx_PLL2_Config>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c65e:	e00c      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	3324      	adds	r3, #36	; 0x24
 800c664:	2102      	movs	r1, #2
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fca8 	bl	800cfbc <RCCEx_PLL3_Config>
 800c66c:	4603      	mov	r3, r0
 800c66e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c670:	e003      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	75fb      	strb	r3, [r7, #23]
      break;
 800c676:	e000      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c680:	4b5e      	ldr	r3, [pc, #376]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c68e:	495b      	ldr	r1, [pc, #364]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c690:	4313      	orrs	r3, r2
 800c692:	658b      	str	r3, [r1, #88]	; 0x58
 800c694:	e001      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c696:	7dfb      	ldrb	r3, [r7, #23]
 800c698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d033      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6b0:	d01c      	beq.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c6b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6b6:	d816      	bhi.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c6b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6bc:	d003      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c6be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6c2:	d007      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c6c4:	e00f      	b.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6c6:	4b4d      	ldr	r3, [pc, #308]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ca:	4a4c      	ldr	r2, [pc, #304]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c6cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c6d2:	e00c      	b.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3324      	adds	r3, #36	; 0x24
 800c6d8:	2101      	movs	r1, #1
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fc6e 	bl	800cfbc <RCCEx_PLL3_Config>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c6e4:	e003      	b.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c6ea:	e000      	b.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c6ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6ee:	7dfb      	ldrb	r3, [r7, #23]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10a      	bne.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6f4:	4b41      	ldr	r3, [pc, #260]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c702:	493e      	ldr	r1, [pc, #248]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c704:	4313      	orrs	r3, r2
 800c706:	654b      	str	r3, [r1, #84]	; 0x54
 800c708:	e001      	b.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c70a:	7dfb      	ldrb	r3, [r7, #23]
 800c70c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d029      	beq.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c726:	d007      	beq.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c728:	e00f      	b.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c72a:	4b34      	ldr	r3, [pc, #208]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72e:	4a33      	ldr	r2, [pc, #204]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c736:	e00b      	b.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3304      	adds	r3, #4
 800c73c:	2102      	movs	r1, #2
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 fb8a 	bl	800ce58 <RCCEx_PLL2_Config>
 800c744:	4603      	mov	r3, r0
 800c746:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c748:	e002      	b.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	75fb      	strb	r3, [r7, #23]
      break;
 800c74e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c750:	7dfb      	ldrb	r3, [r7, #23]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c756:	4b29      	ldr	r3, [pc, #164]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c75a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c762:	4926      	ldr	r1, [pc, #152]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c764:	4313      	orrs	r3, r2
 800c766:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c768:	e001      	b.n	800c76e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	3324      	adds	r3, #36	; 0x24
 800c77e:	2102      	movs	r1, #2
 800c780:	4618      	mov	r0, r3
 800c782:	f000 fc1b 	bl	800cfbc <RCCEx_PLL3_Config>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d001      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d033      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7a4:	d017      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c7a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7aa:	d811      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c7ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7b0:	d013      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c7b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7b6:	d80b      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d010      	beq.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c0:	d106      	bne.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7c2:	4b0e      	ldr	r3, [pc, #56]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c6:	4a0d      	ldr	r2, [pc, #52]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c7ce:	e007      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7d4:	e004      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c7d6:	bf00      	nop
 800c7d8:	e002      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c7da:	bf00      	nop
 800c7dc:	e000      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c7de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10c      	bne.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c7e6:	4b05      	ldr	r3, [pc, #20]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7f2:	4902      	ldr	r1, [pc, #8]	; (800c7fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	654b      	str	r3, [r1, #84]	; 0x54
 800c7f8:	e004      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c7fa:	bf00      	nop
 800c7fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d008      	beq.n	800c822 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c810:	4b31      	ldr	r3, [pc, #196]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c81c:	492e      	ldr	r1, [pc, #184]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c81e:	4313      	orrs	r3, r2
 800c820:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d009      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c82e:	4b2a      	ldr	r3, [pc, #168]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c83c:	4926      	ldr	r1, [pc, #152]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c83e:	4313      	orrs	r3, r2
 800c840:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d008      	beq.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c84e:	4b22      	ldr	r3, [pc, #136]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c852:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c85a:	491f      	ldr	r1, [pc, #124]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c85c:	4313      	orrs	r3, r2
 800c85e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00d      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c86c:	4b1a      	ldr	r3, [pc, #104]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c86e:	691b      	ldr	r3, [r3, #16]
 800c870:	4a19      	ldr	r2, [pc, #100]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c872:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c876:	6113      	str	r3, [r2, #16]
 800c878:	4b17      	ldr	r3, [pc, #92]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c87a:	691a      	ldr	r2, [r3, #16]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c882:	4915      	ldr	r1, [pc, #84]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c884:	4313      	orrs	r3, r2
 800c886:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	da08      	bge.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c890:	4b11      	ldr	r3, [pc, #68]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c894:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c89c:	490e      	ldr	r1, [pc, #56]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d009      	beq.n	800c8c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c8ae:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8bc:	4906      	ldr	r1, [pc, #24]	; (800c8d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c8c2:	7dbb      	ldrb	r3, [r7, #22]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d101      	bne.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e000      	b.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3718      	adds	r7, #24
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	58024400 	.word	0x58024400

0800c8dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c8e0:	f7ff f85a 	bl	800b998 <HAL_RCC_GetHCLKFreq>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	4b06      	ldr	r3, [pc, #24]	; (800c900 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	091b      	lsrs	r3, r3, #4
 800c8ec:	f003 0307 	and.w	r3, r3, #7
 800c8f0:	4904      	ldr	r1, [pc, #16]	; (800c904 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c8f2:	5ccb      	ldrb	r3, [r1, r3]
 800c8f4:	f003 031f 	and.w	r3, r3, #31
 800c8f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	58024400 	.word	0x58024400
 800c904:	08010d60 	.word	0x08010d60

0800c908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c908:	b480      	push	{r7}
 800c90a:	b089      	sub	sp, #36	; 0x24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c910:	4ba1      	ldr	r3, [pc, #644]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c914:	f003 0303 	and.w	r3, r3, #3
 800c918:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c91a:	4b9f      	ldr	r3, [pc, #636]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91e:	0b1b      	lsrs	r3, r3, #12
 800c920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c924:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c926:	4b9c      	ldr	r3, [pc, #624]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92a:	091b      	lsrs	r3, r3, #4
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c932:	4b99      	ldr	r3, [pc, #612]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c936:	08db      	lsrs	r3, r3, #3
 800c938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	fb02 f303 	mul.w	r3, r2, r3
 800c942:	ee07 3a90 	vmov	s15, r3
 800c946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c94a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 8111 	beq.w	800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	f000 8083 	beq.w	800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	2b02      	cmp	r3, #2
 800c962:	f200 80a1 	bhi.w	800caa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d003      	beq.n	800c974 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d056      	beq.n	800ca20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c972:	e099      	b.n	800caa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c974:	4b88      	ldr	r3, [pc, #544]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 0320 	and.w	r3, r3, #32
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d02d      	beq.n	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c980:	4b85      	ldr	r3, [pc, #532]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	08db      	lsrs	r3, r3, #3
 800c986:	f003 0303 	and.w	r3, r3, #3
 800c98a:	4a84      	ldr	r2, [pc, #528]	; (800cb9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c98c:	fa22 f303 	lsr.w	r3, r2, r3
 800c990:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	ee07 3a90 	vmov	s15, r3
 800c998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9aa:	4b7b      	ldr	r3, [pc, #492]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c9da:	e087      	b.n	800caec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cba4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ee:	4b6a      	ldr	r3, [pc, #424]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca02:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca1e:	e065      	b.n	800caec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	ee07 3a90 	vmov	s15, r3
 800ca26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca32:	4b59      	ldr	r3, [pc, #356]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca46:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca62:	e043      	b.n	800caec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cbac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca76:	4b48      	ldr	r3, [pc, #288]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800caa6:	e021      	b.n	800caec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caba:	4b37      	ldr	r3, [pc, #220]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cace:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800caea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800caec:	4b2a      	ldr	r3, [pc, #168]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf0:	0a5b      	lsrs	r3, r3, #9
 800caf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb06:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb12:	ee17 2a90 	vmov	r2, s15
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800cb1a:	4b1f      	ldr	r3, [pc, #124]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1e:	0c1b      	lsrs	r3, r3, #16
 800cb20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb24:	ee07 3a90 	vmov	s15, r3
 800cb28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb34:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb40:	ee17 2a90 	vmov	r2, s15
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800cb48:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4c:	0e1b      	lsrs	r3, r3, #24
 800cb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb52:	ee07 3a90 	vmov	s15, r3
 800cb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb62:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb6e:	ee17 2a90 	vmov	r2, s15
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb76:	e008      	b.n	800cb8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	609a      	str	r2, [r3, #8]
}
 800cb8a:	bf00      	nop
 800cb8c:	3724      	adds	r7, #36	; 0x24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	58024400 	.word	0x58024400
 800cb9c:	03d09000 	.word	0x03d09000
 800cba0:	46000000 	.word	0x46000000
 800cba4:	4c742400 	.word	0x4c742400
 800cba8:	4a742400 	.word	0x4a742400
 800cbac:	4af42400 	.word	0x4af42400

0800cbb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b089      	sub	sp, #36	; 0x24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbb8:	4ba1      	ldr	r3, [pc, #644]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbbc:	f003 0303 	and.w	r3, r3, #3
 800cbc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800cbc2:	4b9f      	ldr	r3, [pc, #636]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc6:	0d1b      	lsrs	r3, r3, #20
 800cbc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cbce:	4b9c      	ldr	r3, [pc, #624]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd2:	0a1b      	lsrs	r3, r3, #8
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cbda:	4b99      	ldr	r3, [pc, #612]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbde:	08db      	lsrs	r3, r3, #3
 800cbe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	fb02 f303 	mul.w	r3, r2, r3
 800cbea:	ee07 3a90 	vmov	s15, r3
 800cbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 8111 	beq.w	800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	f000 8083 	beq.w	800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	f200 80a1 	bhi.w	800cd50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d003      	beq.n	800cc1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d056      	beq.n	800ccc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc1a:	e099      	b.n	800cd50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc1c:	4b88      	ldr	r3, [pc, #544]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0320 	and.w	r3, r3, #32
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d02d      	beq.n	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc28:	4b85      	ldr	r3, [pc, #532]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	08db      	lsrs	r3, r3, #3
 800cc2e:	f003 0303 	and.w	r3, r3, #3
 800cc32:	4a84      	ldr	r2, [pc, #528]	; (800ce44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc34:	fa22 f303 	lsr.w	r3, r2, r3
 800cc38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	ee07 3a90 	vmov	s15, r3
 800cc40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	ee07 3a90 	vmov	s15, r3
 800cc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc52:	4b7b      	ldr	r3, [pc, #492]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc5a:	ee07 3a90 	vmov	s15, r3
 800cc5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc62:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cc82:	e087      	b.n	800cd94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	ee07 3a90 	vmov	s15, r3
 800cc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc96:	4b6a      	ldr	r3, [pc, #424]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc9e:	ee07 3a90 	vmov	s15, r3
 800cca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cca6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ccc6:	e065      	b.n	800cd94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	ee07 3a90 	vmov	s15, r3
 800ccce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccda:	4b59      	ldr	r3, [pc, #356]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce2:	ee07 3a90 	vmov	s15, r3
 800cce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccea:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd0a:	e043      	b.n	800cd94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	ee07 3a90 	vmov	s15, r3
 800cd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd1e:	4b48      	ldr	r3, [pc, #288]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd26:	ee07 3a90 	vmov	s15, r3
 800cd2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd4e:	e021      	b.n	800cd94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd62:	4b37      	ldr	r3, [pc, #220]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd6a:	ee07 3a90 	vmov	s15, r3
 800cd6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cd94:	4b2a      	ldr	r3, [pc, #168]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd98:	0a5b      	lsrs	r3, r3, #9
 800cd9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9e:	ee07 3a90 	vmov	s15, r3
 800cda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cda6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdae:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdba:	ee17 2a90 	vmov	r2, s15
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cdc2:	4b1f      	ldr	r3, [pc, #124]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc6:	0c1b      	lsrs	r3, r3, #16
 800cdc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdcc:	ee07 3a90 	vmov	s15, r3
 800cdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cddc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cde0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cde4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde8:	ee17 2a90 	vmov	r2, s15
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cdf0:	4b13      	ldr	r3, [pc, #76]	; (800ce40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf4:	0e1b      	lsrs	r3, r3, #24
 800cdf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce16:	ee17 2a90 	vmov	r2, s15
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce1e:	e008      	b.n	800ce32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	609a      	str	r2, [r3, #8]
}
 800ce32:	bf00      	nop
 800ce34:	3724      	adds	r7, #36	; 0x24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	58024400 	.word	0x58024400
 800ce44:	03d09000 	.word	0x03d09000
 800ce48:	46000000 	.word	0x46000000
 800ce4c:	4c742400 	.word	0x4c742400
 800ce50:	4a742400 	.word	0x4a742400
 800ce54:	4af42400 	.word	0x4af42400

0800ce58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce62:	2300      	movs	r3, #0
 800ce64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce66:	4b53      	ldr	r3, [pc, #332]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800ce68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6a:	f003 0303 	and.w	r3, r3, #3
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d101      	bne.n	800ce76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce72:	2301      	movs	r3, #1
 800ce74:	e099      	b.n	800cfaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce76:	4b4f      	ldr	r3, [pc, #316]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a4e      	ldr	r2, [pc, #312]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800ce7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce82:	f7fa faa5 	bl	80073d0 <HAL_GetTick>
 800ce86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce88:	e008      	b.n	800ce9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ce8a:	f7fa faa1 	bl	80073d0 <HAL_GetTick>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	d901      	bls.n	800ce9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e086      	b.n	800cfaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce9c:	4b45      	ldr	r3, [pc, #276]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1f0      	bne.n	800ce8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cea8:	4b42      	ldr	r3, [pc, #264]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800ceaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	031b      	lsls	r3, r3, #12
 800ceb6:	493f      	ldr	r1, [pc, #252]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	628b      	str	r3, [r1, #40]	; 0x28
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	025b      	lsls	r3, r3, #9
 800cece:	b29b      	uxth	r3, r3
 800ced0:	431a      	orrs	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	3b01      	subs	r3, #1
 800ced8:	041b      	lsls	r3, r3, #16
 800ceda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cede:	431a      	orrs	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	061b      	lsls	r3, r3, #24
 800cee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ceec:	4931      	ldr	r1, [pc, #196]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800ceee:	4313      	orrs	r3, r2
 800cef0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cef2:	4b30      	ldr	r3, [pc, #192]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	492d      	ldr	r1, [pc, #180]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf00:	4313      	orrs	r3, r2
 800cf02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf04:	4b2b      	ldr	r3, [pc, #172]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	f023 0220 	bic.w	r2, r3, #32
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	699b      	ldr	r3, [r3, #24]
 800cf10:	4928      	ldr	r1, [pc, #160]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf16:	4b27      	ldr	r3, [pc, #156]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1a:	4a26      	ldr	r2, [pc, #152]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf1c:	f023 0310 	bic.w	r3, r3, #16
 800cf20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf22:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf26:	4b24      	ldr	r3, [pc, #144]	; (800cfb8 <RCCEx_PLL2_Config+0x160>)
 800cf28:	4013      	ands	r3, r2
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	69d2      	ldr	r2, [r2, #28]
 800cf2e:	00d2      	lsls	r2, r2, #3
 800cf30:	4920      	ldr	r1, [pc, #128]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf32:	4313      	orrs	r3, r2
 800cf34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf36:	4b1f      	ldr	r3, [pc, #124]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3a:	4a1e      	ldr	r2, [pc, #120]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf3c:	f043 0310 	orr.w	r3, r3, #16
 800cf40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d106      	bne.n	800cf56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf48:	4b1a      	ldr	r3, [pc, #104]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	4a19      	ldr	r2, [pc, #100]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf52:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf54:	e00f      	b.n	800cf76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d106      	bne.n	800cf6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf5c:	4b15      	ldr	r3, [pc, #84]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	4a14      	ldr	r2, [pc, #80]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf66:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf68:	e005      	b.n	800cf76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf6a:	4b12      	ldr	r3, [pc, #72]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6e:	4a11      	ldr	r2, [pc, #68]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf76:	4b0f      	ldr	r3, [pc, #60]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a0e      	ldr	r2, [pc, #56]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf82:	f7fa fa25 	bl	80073d0 <HAL_GetTick>
 800cf86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf88:	e008      	b.n	800cf9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cf8a:	f7fa fa21 	bl	80073d0 <HAL_GetTick>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d901      	bls.n	800cf9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	e006      	b.n	800cfaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf9c:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <RCCEx_PLL2_Config+0x15c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d0f0      	beq.n	800cf8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	58024400 	.word	0x58024400
 800cfb8:	ffff0007 	.word	0xffff0007

0800cfbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfca:	4b53      	ldr	r3, [pc, #332]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800cfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfce:	f003 0303 	and.w	r3, r3, #3
 800cfd2:	2b03      	cmp	r3, #3
 800cfd4:	d101      	bne.n	800cfda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e099      	b.n	800d10e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cfda:	4b4f      	ldr	r3, [pc, #316]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a4e      	ldr	r2, [pc, #312]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800cfe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfe6:	f7fa f9f3 	bl	80073d0 <HAL_GetTick>
 800cfea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfec:	e008      	b.n	800d000 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cfee:	f7fa f9ef 	bl	80073d0 <HAL_GetTick>
 800cff2:	4602      	mov	r2, r0
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d901      	bls.n	800d000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e086      	b.n	800d10e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d000:	4b45      	ldr	r3, [pc, #276]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1f0      	bne.n	800cfee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d00c:	4b42      	ldr	r3, [pc, #264]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d010:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	051b      	lsls	r3, r3, #20
 800d01a:	493f      	ldr	r1, [pc, #252]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d01c:	4313      	orrs	r3, r2
 800d01e:	628b      	str	r3, [r1, #40]	; 0x28
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	3b01      	subs	r3, #1
 800d026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	3b01      	subs	r3, #1
 800d030:	025b      	lsls	r3, r3, #9
 800d032:	b29b      	uxth	r3, r3
 800d034:	431a      	orrs	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	041b      	lsls	r3, r3, #16
 800d03e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	3b01      	subs	r3, #1
 800d04a:	061b      	lsls	r3, r3, #24
 800d04c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d050:	4931      	ldr	r1, [pc, #196]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d052:	4313      	orrs	r3, r2
 800d054:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d056:	4b30      	ldr	r3, [pc, #192]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	695b      	ldr	r3, [r3, #20]
 800d062:	492d      	ldr	r1, [pc, #180]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d064:	4313      	orrs	r3, r2
 800d066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d068:	4b2b      	ldr	r3, [pc, #172]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	4928      	ldr	r1, [pc, #160]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d076:	4313      	orrs	r3, r2
 800d078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d07a:	4b27      	ldr	r3, [pc, #156]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	4a26      	ldr	r2, [pc, #152]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d086:	4b24      	ldr	r3, [pc, #144]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d08a:	4b24      	ldr	r3, [pc, #144]	; (800d11c <RCCEx_PLL3_Config+0x160>)
 800d08c:	4013      	ands	r3, r2
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	69d2      	ldr	r2, [r2, #28]
 800d092:	00d2      	lsls	r2, r2, #3
 800d094:	4920      	ldr	r1, [pc, #128]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d096:	4313      	orrs	r3, r2
 800d098:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d09a:	4b1f      	ldr	r3, [pc, #124]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09e:	4a1e      	ldr	r2, [pc, #120]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d0ac:	4b1a      	ldr	r3, [pc, #104]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b0:	4a19      	ldr	r2, [pc, #100]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d0b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0b8:	e00f      	b.n	800d0da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d106      	bne.n	800d0ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0c0:	4b15      	ldr	r3, [pc, #84]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	4a14      	ldr	r2, [pc, #80]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0cc:	e005      	b.n	800d0da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0ce:	4b12      	ldr	r3, [pc, #72]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d2:	4a11      	ldr	r2, [pc, #68]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0da:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a0e      	ldr	r2, [pc, #56]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0e6:	f7fa f973 	bl	80073d0 <HAL_GetTick>
 800d0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0ec:	e008      	b.n	800d100 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d0ee:	f7fa f96f 	bl	80073d0 <HAL_GetTick>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d901      	bls.n	800d100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	e006      	b.n	800d10e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d100:	4b05      	ldr	r3, [pc, #20]	; (800d118 <RCCEx_PLL3_Config+0x15c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0f0      	beq.n	800d0ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	58024400 	.word	0x58024400
 800d11c:	ffff0007 	.word	0xffff0007

0800d120 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e0f1      	b.n	800d316 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a78      	ldr	r2, [pc, #480]	; (800d320 <HAL_SPI_Init+0x200>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d00f      	beq.n	800d162 <HAL_SPI_Init+0x42>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a77      	ldr	r2, [pc, #476]	; (800d324 <HAL_SPI_Init+0x204>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d00a      	beq.n	800d162 <HAL_SPI_Init+0x42>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a75      	ldr	r2, [pc, #468]	; (800d328 <HAL_SPI_Init+0x208>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d005      	beq.n	800d162 <HAL_SPI_Init+0x42>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	2b0f      	cmp	r3, #15
 800d15c:	d901      	bls.n	800d162 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e0d9      	b.n	800d316 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fba2 	bl	800d8ac <SPI_GetPacketSize>
 800d168:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a6c      	ldr	r2, [pc, #432]	; (800d320 <HAL_SPI_Init+0x200>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d00c      	beq.n	800d18e <HAL_SPI_Init+0x6e>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a6a      	ldr	r2, [pc, #424]	; (800d324 <HAL_SPI_Init+0x204>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d007      	beq.n	800d18e <HAL_SPI_Init+0x6e>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a69      	ldr	r2, [pc, #420]	; (800d328 <HAL_SPI_Init+0x208>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d002      	beq.n	800d18e <HAL_SPI_Init+0x6e>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b08      	cmp	r3, #8
 800d18c:	d811      	bhi.n	800d1b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d192:	4a63      	ldr	r2, [pc, #396]	; (800d320 <HAL_SPI_Init+0x200>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d009      	beq.n	800d1ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a61      	ldr	r2, [pc, #388]	; (800d324 <HAL_SPI_Init+0x204>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d004      	beq.n	800d1ac <HAL_SPI_Init+0x8c>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a60      	ldr	r2, [pc, #384]	; (800d328 <HAL_SPI_Init+0x208>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d104      	bne.n	800d1b6 <HAL_SPI_Init+0x96>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2b10      	cmp	r3, #16
 800d1b0:	d901      	bls.n	800d1b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e0af      	b.n	800d316 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d106      	bne.n	800d1d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7f9 fe08 	bl	8006de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2202      	movs	r2, #2
 800d1d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f022 0201 	bic.w	r2, r2, #1
 800d1e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d1f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	699b      	ldr	r3, [r3, #24]
 800d1f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d1fc:	d119      	bne.n	800d232 <HAL_SPI_Init+0x112>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d206:	d103      	bne.n	800d210 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d008      	beq.n	800d222 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10c      	bne.n	800d232 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d21c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d220:	d107      	bne.n	800d232 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d230:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	69da      	ldr	r2, [r3, #28]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23a:	431a      	orrs	r2, r3
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	431a      	orrs	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d244:	ea42 0103 	orr.w	r1, r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68da      	ldr	r2, [r3, #12]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	430a      	orrs	r2, r1
 800d252:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25c:	431a      	orrs	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	431a      	orrs	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	699b      	ldr	r3, [r3, #24]
 800d268:	431a      	orrs	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	431a      	orrs	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	431a      	orrs	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	431a      	orrs	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	431a      	orrs	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d286:	431a      	orrs	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	431a      	orrs	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d292:	ea42 0103 	orr.w	r1, r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	430a      	orrs	r2, r1
 800d2a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d113      	bne.n	800d2d2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f022 0201 	bic.w	r2, r2, #1
 800d2e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00a      	beq.n	800d304 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	430a      	orrs	r2, r1
 800d302:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	40013000 	.word	0x40013000
 800d324:	40003800 	.word	0x40003800
 800d328:	40003c00 	.word	0x40003c00

0800d32c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08a      	sub	sp, #40	; 0x28
 800d330:	af02      	add	r7, sp, #8
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	603b      	str	r3, [r7, #0]
 800d338:	4613      	mov	r3, r2
 800d33a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	3320      	adds	r3, #32
 800d342:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d101      	bne.n	800d356 <HAL_SPI_Transmit+0x2a>
 800d352:	2302      	movs	r3, #2
 800d354:	e1d7      	b.n	800d706 <HAL_SPI_Transmit+0x3da>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d35e:	f7fa f837 	bl	80073d0 <HAL_GetTick>
 800d362:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d007      	beq.n	800d380 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d370:	2302      	movs	r3, #2
 800d372:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d37c:	7efb      	ldrb	r3, [r7, #27]
 800d37e:	e1c2      	b.n	800d706 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <HAL_SPI_Transmit+0x60>
 800d386:	88fb      	ldrh	r3, [r7, #6]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d107      	bne.n	800d39c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d398:	7efb      	ldrb	r3, [r7, #27]
 800d39a:	e1b4      	b.n	800d706 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2203      	movs	r2, #3
 800d3a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	88fa      	ldrh	r2, [r7, #6]
 800d3b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	88fa      	ldrh	r2, [r7, #6]
 800d3be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d3ec:	d107      	bne.n	800d3fe <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	685a      	ldr	r2, [r3, #4]
 800d404:	4b96      	ldr	r3, [pc, #600]	; (800d660 <HAL_SPI_Transmit+0x334>)
 800d406:	4013      	ands	r3, r2
 800d408:	88f9      	ldrh	r1, [r7, #6]
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	6812      	ldr	r2, [r2, #0]
 800d40e:	430b      	orrs	r3, r1
 800d410:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f042 0201 	orr.w	r2, r2, #1
 800d420:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d42a:	d107      	bne.n	800d43c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d43a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	2b0f      	cmp	r3, #15
 800d442:	d947      	bls.n	800d4d4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d444:	e03f      	b.n	800d4c6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	695b      	ldr	r3, [r3, #20]
 800d44c:	f003 0302 	and.w	r3, r3, #2
 800d450:	2b02      	cmp	r3, #2
 800d452:	d114      	bne.n	800d47e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6812      	ldr	r2, [r2, #0]
 800d45e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d464:	1d1a      	adds	r2, r3, #4
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d470:	b29b      	uxth	r3, r3
 800d472:	3b01      	subs	r3, #1
 800d474:	b29a      	uxth	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d47c:	e023      	b.n	800d4c6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d47e:	f7f9 ffa7 	bl	80073d0 <HAL_GetTick>
 800d482:	4602      	mov	r2, r0
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	683a      	ldr	r2, [r7, #0]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d803      	bhi.n	800d496 <HAL_SPI_Transmit+0x16a>
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d494:	d102      	bne.n	800d49c <HAL_SPI_Transmit+0x170>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d114      	bne.n	800d4c6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f000 f937 	bl	800d710 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e11f      	b.n	800d706 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1b9      	bne.n	800d446 <HAL_SPI_Transmit+0x11a>
 800d4d2:	e0f2      	b.n	800d6ba <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	2b07      	cmp	r3, #7
 800d4da:	f240 80e7 	bls.w	800d6ac <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d4de:	e05d      	b.n	800d59c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	f003 0302 	and.w	r3, r3, #2
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d132      	bne.n	800d554 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d918      	bls.n	800d52c <HAL_SPI_Transmit+0x200>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d014      	beq.n	800d52c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6812      	ldr	r2, [r2, #0]
 800d50c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d512:	1d1a      	adds	r2, r3, #4
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d51e:	b29b      	uxth	r3, r3
 800d520:	3b02      	subs	r3, #2
 800d522:	b29a      	uxth	r2, r3
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d52a:	e037      	b.n	800d59c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d530:	881a      	ldrh	r2, [r3, #0]
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d53a:	1c9a      	adds	r2, r3, #2
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d546:	b29b      	uxth	r3, r3
 800d548:	3b01      	subs	r3, #1
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d552:	e023      	b.n	800d59c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d554:	f7f9 ff3c 	bl	80073d0 <HAL_GetTick>
 800d558:	4602      	mov	r2, r0
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	1ad3      	subs	r3, r2, r3
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	429a      	cmp	r2, r3
 800d562:	d803      	bhi.n	800d56c <HAL_SPI_Transmit+0x240>
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56a:	d102      	bne.n	800d572 <HAL_SPI_Transmit+0x246>
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d114      	bne.n	800d59c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f000 f8cc 	bl	800d710 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e0b4      	b.n	800d706 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d19b      	bne.n	800d4e0 <HAL_SPI_Transmit+0x1b4>
 800d5a8:	e087      	b.n	800d6ba <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	f003 0302 	and.w	r3, r3, #2
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d155      	bne.n	800d664 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	2b03      	cmp	r3, #3
 800d5c2:	d918      	bls.n	800d5f6 <HAL_SPI_Transmit+0x2ca>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c8:	2b40      	cmp	r3, #64	; 0x40
 800d5ca:	d914      	bls.n	800d5f6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6812      	ldr	r2, [r2, #0]
 800d5d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5dc:	1d1a      	adds	r2, r3, #4
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	3b04      	subs	r3, #4
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d5f4:	e05a      	b.n	800d6ac <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d917      	bls.n	800d632 <HAL_SPI_Transmit+0x306>
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d606:	2b00      	cmp	r3, #0
 800d608:	d013      	beq.n	800d632 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d60e:	881a      	ldrh	r2, [r3, #0]
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d618:	1c9a      	adds	r2, r3, #2
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d624:	b29b      	uxth	r3, r3
 800d626:	3b02      	subs	r3, #2
 800d628:	b29a      	uxth	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d630:	e03c      	b.n	800d6ac <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3320      	adds	r3, #32
 800d63c:	7812      	ldrb	r2, [r2, #0]
 800d63e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d650:	b29b      	uxth	r3, r3
 800d652:	3b01      	subs	r3, #1
 800d654:	b29a      	uxth	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d65c:	e026      	b.n	800d6ac <HAL_SPI_Transmit+0x380>
 800d65e:	bf00      	nop
 800d660:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d664:	f7f9 feb4 	bl	80073d0 <HAL_GetTick>
 800d668:	4602      	mov	r2, r0
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	683a      	ldr	r2, [r7, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	d803      	bhi.n	800d67c <HAL_SPI_Transmit+0x350>
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67a:	d102      	bne.n	800d682 <HAL_SPI_Transmit+0x356>
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d114      	bne.n	800d6ac <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f000 f844 	bl	800d710 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e02c      	b.n	800d706 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f47f af78 	bne.w	800d5aa <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2108      	movs	r1, #8
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f000 f8c3 	bl	800d850 <SPI_WaitOnFlagUntilTimeout>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d007      	beq.n	800d6e0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6d6:	f043 0220 	orr.w	r2, r3, #32
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 f815 	bl	800d710 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d001      	beq.n	800d704 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	e000      	b.n	800d706 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d704:	7efb      	ldrb	r3, [r7, #27]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3720      	adds	r7, #32
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop

0800d710 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	699a      	ldr	r2, [r3, #24]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f042 0208 	orr.w	r2, r2, #8
 800d72e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	699a      	ldr	r2, [r3, #24]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f042 0210 	orr.w	r2, r2, #16
 800d73e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f022 0201 	bic.w	r2, r2, #1
 800d74e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6919      	ldr	r1, [r3, #16]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	4b3c      	ldr	r3, [pc, #240]	; (800d84c <SPI_CloseTransfer+0x13c>)
 800d75c:	400b      	ands	r3, r1
 800d75e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	689a      	ldr	r2, [r3, #8]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d76e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b04      	cmp	r3, #4
 800d77a:	d014      	beq.n	800d7a6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f003 0320 	and.w	r3, r3, #32
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00f      	beq.n	800d7a6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d78c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	699a      	ldr	r2, [r3, #24]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f042 0220 	orr.w	r2, r2, #32
 800d7a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b03      	cmp	r3, #3
 800d7b0:	d014      	beq.n	800d7dc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00f      	beq.n	800d7dc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7c2:	f043 0204 	orr.w	r2, r3, #4
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	699a      	ldr	r2, [r3, #24]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00f      	beq.n	800d806 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7ec:	f043 0201 	orr.w	r2, r3, #1
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	699a      	ldr	r2, [r3, #24]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d804:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00f      	beq.n	800d830 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d816:	f043 0208 	orr.w	r2, r3, #8
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	699a      	ldr	r2, [r3, #24]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d82e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d840:	bf00      	nop
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	fffffc90 	.word	0xfffffc90

0800d850 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	603b      	str	r3, [r7, #0]
 800d85c:	4613      	mov	r3, r2
 800d85e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d860:	e010      	b.n	800d884 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d862:	f7f9 fdb5 	bl	80073d0 <HAL_GetTick>
 800d866:	4602      	mov	r2, r0
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	69ba      	ldr	r2, [r7, #24]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d803      	bhi.n	800d87a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d878:	d102      	bne.n	800d880 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d101      	bne.n	800d884 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d880:	2303      	movs	r3, #3
 800d882:	e00f      	b.n	800d8a4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	695a      	ldr	r2, [r3, #20]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	4013      	ands	r3, r2
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	429a      	cmp	r2, r3
 800d892:	bf0c      	ite	eq
 800d894:	2301      	moveq	r3, #1
 800d896:	2300      	movne	r3, #0
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	461a      	mov	r2, r3
 800d89c:	79fb      	ldrb	r3, [r7, #7]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d0df      	beq.n	800d862 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b8:	095b      	lsrs	r3, r3, #5
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	3307      	adds	r3, #7
 800d8ca:	08db      	lsrs	r3, r3, #3
 800d8cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e049      	b.n	800d988 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d106      	bne.n	800d90e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7f9 fad5 	bl	8006eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2202      	movs	r2, #2
 800d912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	3304      	adds	r3, #4
 800d91e:	4619      	mov	r1, r3
 800d920:	4610      	mov	r0, r2
 800d922:	f000 fa23 	bl	800dd6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2201      	movs	r2, #1
 800d942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2201      	movs	r2, #1
 800d952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d001      	beq.n	800d9a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e054      	b.n	800da52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f042 0201 	orr.w	r2, r2, #1
 800d9be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a26      	ldr	r2, [pc, #152]	; (800da60 <HAL_TIM_Base_Start_IT+0xd0>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d022      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x80>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9d2:	d01d      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x80>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a22      	ldr	r2, [pc, #136]	; (800da64 <HAL_TIM_Base_Start_IT+0xd4>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d018      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x80>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a21      	ldr	r2, [pc, #132]	; (800da68 <HAL_TIM_Base_Start_IT+0xd8>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d013      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x80>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a1f      	ldr	r2, [pc, #124]	; (800da6c <HAL_TIM_Base_Start_IT+0xdc>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d00e      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x80>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a1e      	ldr	r2, [pc, #120]	; (800da70 <HAL_TIM_Base_Start_IT+0xe0>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d009      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x80>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a1c      	ldr	r2, [pc, #112]	; (800da74 <HAL_TIM_Base_Start_IT+0xe4>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d004      	beq.n	800da10 <HAL_TIM_Base_Start_IT+0x80>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a1b      	ldr	r2, [pc, #108]	; (800da78 <HAL_TIM_Base_Start_IT+0xe8>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d115      	bne.n	800da3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	689a      	ldr	r2, [r3, #8]
 800da16:	4b19      	ldr	r3, [pc, #100]	; (800da7c <HAL_TIM_Base_Start_IT+0xec>)
 800da18:	4013      	ands	r3, r2
 800da1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b06      	cmp	r3, #6
 800da20:	d015      	beq.n	800da4e <HAL_TIM_Base_Start_IT+0xbe>
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da28:	d011      	beq.n	800da4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f042 0201 	orr.w	r2, r2, #1
 800da38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da3a:	e008      	b.n	800da4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f042 0201 	orr.w	r2, r2, #1
 800da4a:	601a      	str	r2, [r3, #0]
 800da4c:	e000      	b.n	800da50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	40010000 	.word	0x40010000
 800da64:	40000400 	.word	0x40000400
 800da68:	40000800 	.word	0x40000800
 800da6c:	40000c00 	.word	0x40000c00
 800da70:	40010400 	.word	0x40010400
 800da74:	40001800 	.word	0x40001800
 800da78:	40014000 	.word	0x40014000
 800da7c:	00010007 	.word	0x00010007

0800da80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68da      	ldr	r2, [r3, #12]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f022 0201 	bic.w	r2, r2, #1
 800da96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6a1a      	ldr	r2, [r3, #32]
 800da9e:	f241 1311 	movw	r3, #4369	; 0x1111
 800daa2:	4013      	ands	r3, r2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10f      	bne.n	800dac8 <HAL_TIM_Base_Stop_IT+0x48>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6a1a      	ldr	r2, [r3, #32]
 800daae:	f240 4344 	movw	r3, #1092	; 0x444
 800dab2:	4013      	ands	r3, r2
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d107      	bne.n	800dac8 <HAL_TIM_Base_Stop_IT+0x48>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f022 0201 	bic.w	r2, r2, #1
 800dac6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	370c      	adds	r7, #12
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	f003 0302 	and.w	r3, r3, #2
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d122      	bne.n	800db3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	f003 0302 	and.w	r3, r3, #2
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d11b      	bne.n	800db3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f06f 0202 	mvn.w	r2, #2
 800db0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	f003 0303 	and.w	r3, r3, #3
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f905 	bl	800dd30 <HAL_TIM_IC_CaptureCallback>
 800db26:	e005      	b.n	800db34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f8f7 	bl	800dd1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f908 	bl	800dd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	f003 0304 	and.w	r3, r3, #4
 800db44:	2b04      	cmp	r3, #4
 800db46:	d122      	bne.n	800db8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	f003 0304 	and.w	r3, r3, #4
 800db52:	2b04      	cmp	r3, #4
 800db54:	d11b      	bne.n	800db8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f06f 0204 	mvn.w	r2, #4
 800db5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2202      	movs	r2, #2
 800db64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	699b      	ldr	r3, [r3, #24]
 800db6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db70:	2b00      	cmp	r3, #0
 800db72:	d003      	beq.n	800db7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 f8db 	bl	800dd30 <HAL_TIM_IC_CaptureCallback>
 800db7a:	e005      	b.n	800db88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 f8cd 	bl	800dd1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f8de 	bl	800dd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	f003 0308 	and.w	r3, r3, #8
 800db98:	2b08      	cmp	r3, #8
 800db9a:	d122      	bne.n	800dbe2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	f003 0308 	and.w	r3, r3, #8
 800dba6:	2b08      	cmp	r3, #8
 800dba8:	d11b      	bne.n	800dbe2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f06f 0208 	mvn.w	r2, #8
 800dbb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2204      	movs	r2, #4
 800dbb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	f003 0303 	and.w	r3, r3, #3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d003      	beq.n	800dbd0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f8b1 	bl	800dd30 <HAL_TIM_IC_CaptureCallback>
 800dbce:	e005      	b.n	800dbdc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f8a3 	bl	800dd1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f8b4 	bl	800dd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	f003 0310 	and.w	r3, r3, #16
 800dbec:	2b10      	cmp	r3, #16
 800dbee:	d122      	bne.n	800dc36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	f003 0310 	and.w	r3, r3, #16
 800dbfa:	2b10      	cmp	r3, #16
 800dbfc:	d11b      	bne.n	800dc36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f06f 0210 	mvn.w	r2, #16
 800dc06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2208      	movs	r2, #8
 800dc0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f887 	bl	800dd30 <HAL_TIM_IC_CaptureCallback>
 800dc22:	e005      	b.n	800dc30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 f879 	bl	800dd1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 f88a 	bl	800dd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d10e      	bne.n	800dc62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d107      	bne.n	800dc62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f06f 0201 	mvn.w	r2, #1
 800dc5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7f8 fb95 	bl	800638c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc6c:	2b80      	cmp	r3, #128	; 0x80
 800dc6e:	d10e      	bne.n	800dc8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc7a:	2b80      	cmp	r3, #128	; 0x80
 800dc7c:	d107      	bne.n	800dc8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 f9a1 	bl	800dfd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc9c:	d10e      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dca8:	2b80      	cmp	r3, #128	; 0x80
 800dcaa:	d107      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dcb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f994 	bl	800dfe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcc6:	2b40      	cmp	r3, #64	; 0x40
 800dcc8:	d10e      	bne.n	800dce8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd4:	2b40      	cmp	r3, #64	; 0x40
 800dcd6:	d107      	bne.n	800dce8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 f838 	bl	800dd58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	f003 0320 	and.w	r3, r3, #32
 800dcf2:	2b20      	cmp	r3, #32
 800dcf4:	d10e      	bne.n	800dd14 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	f003 0320 	and.w	r3, r3, #32
 800dd00:	2b20      	cmp	r3, #32
 800dd02:	d107      	bne.n	800dd14 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f06f 0220 	mvn.w	r2, #32
 800dd0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f954 	bl	800dfbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd14:	bf00      	nop
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a40      	ldr	r2, [pc, #256]	; (800de80 <TIM_Base_SetConfig+0x114>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d013      	beq.n	800ddac <TIM_Base_SetConfig+0x40>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd8a:	d00f      	beq.n	800ddac <TIM_Base_SetConfig+0x40>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4a3d      	ldr	r2, [pc, #244]	; (800de84 <TIM_Base_SetConfig+0x118>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d00b      	beq.n	800ddac <TIM_Base_SetConfig+0x40>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a3c      	ldr	r2, [pc, #240]	; (800de88 <TIM_Base_SetConfig+0x11c>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d007      	beq.n	800ddac <TIM_Base_SetConfig+0x40>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a3b      	ldr	r2, [pc, #236]	; (800de8c <TIM_Base_SetConfig+0x120>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d003      	beq.n	800ddac <TIM_Base_SetConfig+0x40>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a3a      	ldr	r2, [pc, #232]	; (800de90 <TIM_Base_SetConfig+0x124>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d108      	bne.n	800ddbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a2f      	ldr	r2, [pc, #188]	; (800de80 <TIM_Base_SetConfig+0x114>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d01f      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddcc:	d01b      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4a2c      	ldr	r2, [pc, #176]	; (800de84 <TIM_Base_SetConfig+0x118>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d017      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4a2b      	ldr	r2, [pc, #172]	; (800de88 <TIM_Base_SetConfig+0x11c>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d013      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4a2a      	ldr	r2, [pc, #168]	; (800de8c <TIM_Base_SetConfig+0x120>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d00f      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	4a29      	ldr	r2, [pc, #164]	; (800de90 <TIM_Base_SetConfig+0x124>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d00b      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4a28      	ldr	r2, [pc, #160]	; (800de94 <TIM_Base_SetConfig+0x128>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d007      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a27      	ldr	r2, [pc, #156]	; (800de98 <TIM_Base_SetConfig+0x12c>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d003      	beq.n	800de06 <TIM_Base_SetConfig+0x9a>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4a26      	ldr	r2, [pc, #152]	; (800de9c <TIM_Base_SetConfig+0x130>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d108      	bne.n	800de18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	4313      	orrs	r3, r2
 800de16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	4313      	orrs	r3, r2
 800de24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	689a      	ldr	r2, [r3, #8]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a10      	ldr	r2, [pc, #64]	; (800de80 <TIM_Base_SetConfig+0x114>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d00f      	beq.n	800de64 <TIM_Base_SetConfig+0xf8>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	4a12      	ldr	r2, [pc, #72]	; (800de90 <TIM_Base_SetConfig+0x124>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d00b      	beq.n	800de64 <TIM_Base_SetConfig+0xf8>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a11      	ldr	r2, [pc, #68]	; (800de94 <TIM_Base_SetConfig+0x128>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d007      	beq.n	800de64 <TIM_Base_SetConfig+0xf8>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	4a10      	ldr	r2, [pc, #64]	; (800de98 <TIM_Base_SetConfig+0x12c>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d003      	beq.n	800de64 <TIM_Base_SetConfig+0xf8>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4a0f      	ldr	r2, [pc, #60]	; (800de9c <TIM_Base_SetConfig+0x130>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d103      	bne.n	800de6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	691a      	ldr	r2, [r3, #16]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2201      	movs	r2, #1
 800de70:	615a      	str	r2, [r3, #20]
}
 800de72:	bf00      	nop
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	40010000 	.word	0x40010000
 800de84:	40000400 	.word	0x40000400
 800de88:	40000800 	.word	0x40000800
 800de8c:	40000c00 	.word	0x40000c00
 800de90:	40010400 	.word	0x40010400
 800de94:	40014000 	.word	0x40014000
 800de98:	40014400 	.word	0x40014400
 800de9c:	40014800 	.word	0x40014800

0800dea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d101      	bne.n	800deb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800deb4:	2302      	movs	r3, #2
 800deb6:	e06d      	b.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2202      	movs	r2, #2
 800dec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a30      	ldr	r2, [pc, #192]	; (800dfa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d004      	beq.n	800deec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a2f      	ldr	r2, [pc, #188]	; (800dfa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d108      	bne.n	800defe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800def2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	4313      	orrs	r3, r2
 800defc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a20      	ldr	r2, [pc, #128]	; (800dfa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d022      	beq.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df2a:	d01d      	beq.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a1d      	ldr	r2, [pc, #116]	; (800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d018      	beq.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4a1c      	ldr	r2, [pc, #112]	; (800dfac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d013      	beq.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a1a      	ldr	r2, [pc, #104]	; (800dfb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d00e      	beq.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a15      	ldr	r2, [pc, #84]	; (800dfa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d009      	beq.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a16      	ldr	r2, [pc, #88]	; (800dfb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d004      	beq.n	800df68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a15      	ldr	r2, [pc, #84]	; (800dfb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d10c      	bne.n	800df82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	4313      	orrs	r3, r2
 800df78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	40010000 	.word	0x40010000
 800dfa4:	40010400 	.word	0x40010400
 800dfa8:	40000400 	.word	0x40000400
 800dfac:	40000800 	.word	0x40000800
 800dfb0:	40000c00 	.word	0x40000c00
 800dfb4:	40001800 	.word	0x40001800
 800dfb8:	40014000 	.word	0x40014000

0800dfbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dfc4:	bf00      	nop
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d101      	bne.n	800e00a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	e042      	b.n	800e090 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e010:	2b00      	cmp	r3, #0
 800e012:	d106      	bne.n	800e022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7f8 ff73 	bl	8006f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2224      	movs	r2, #36	; 0x24
 800e026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f022 0201 	bic.w	r2, r2, #1
 800e038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 fbea 	bl	800e814 <UART_SetConfig>
 800e040:	4603      	mov	r3, r0
 800e042:	2b01      	cmp	r3, #1
 800e044:	d101      	bne.n	800e04a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e022      	b.n	800e090 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f001 f946 	bl	800f2e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	689a      	ldr	r2, [r3, #8]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f042 0201 	orr.w	r2, r2, #1
 800e086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f001 f9cd 	bl	800f428 <UART_CheckIdleState>
 800e08e:	4603      	mov	r3, r0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b0ba      	sub	sp, #232	; 0xe8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	69db      	ldr	r3, [r3, #28]
 800e0a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e0be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e0c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e0cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d11b      	bne.n	800e10c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0d8:	f003 0320 	and.w	r3, r3, #32
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d015      	beq.n	800e10c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0e4:	f003 0320 	and.w	r3, r3, #32
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d105      	bne.n	800e0f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f000 835a 	beq.w	800e7b6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	4798      	blx	r3
      }
      return;
 800e10a:	e354      	b.n	800e7b6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e10c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e110:	2b00      	cmp	r3, #0
 800e112:	f000 811f 	beq.w	800e354 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e116:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e11a:	4b8b      	ldr	r3, [pc, #556]	; (800e348 <HAL_UART_IRQHandler+0x2b0>)
 800e11c:	4013      	ands	r3, r2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d106      	bne.n	800e130 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e122:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e126:	4b89      	ldr	r3, [pc, #548]	; (800e34c <HAL_UART_IRQHandler+0x2b4>)
 800e128:	4013      	ands	r3, r2
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 8112 	beq.w	800e354 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d011      	beq.n	800e160 <HAL_UART_IRQHandler+0xc8>
 800e13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00b      	beq.n	800e160 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2201      	movs	r2, #1
 800e14e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e156:	f043 0201 	orr.w	r2, r3, #1
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e164:	f003 0302 	and.w	r3, r3, #2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d011      	beq.n	800e190 <HAL_UART_IRQHandler+0xf8>
 800e16c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00b      	beq.n	800e190 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2202      	movs	r2, #2
 800e17e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e186:	f043 0204 	orr.w	r2, r3, #4
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e194:	f003 0304 	and.w	r3, r3, #4
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d011      	beq.n	800e1c0 <HAL_UART_IRQHandler+0x128>
 800e19c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00b      	beq.n	800e1c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2204      	movs	r2, #4
 800e1ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1b6:	f043 0202 	orr.w	r2, r3, #2
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1c4:	f003 0308 	and.w	r3, r3, #8
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d017      	beq.n	800e1fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1d0:	f003 0320 	and.w	r3, r3, #32
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d105      	bne.n	800e1e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e1d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e1dc:	4b5a      	ldr	r3, [pc, #360]	; (800e348 <HAL_UART_IRQHandler+0x2b0>)
 800e1de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00b      	beq.n	800e1fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2208      	movs	r2, #8
 800e1ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1f2:	f043 0208 	orr.w	r2, r3, #8
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e204:	2b00      	cmp	r3, #0
 800e206:	d012      	beq.n	800e22e <HAL_UART_IRQHandler+0x196>
 800e208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e20c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00c      	beq.n	800e22e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e21c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e224:	f043 0220 	orr.w	r2, r3, #32
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e234:	2b00      	cmp	r3, #0
 800e236:	f000 82c0 	beq.w	800e7ba <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b00      	cmp	r3, #0
 800e244:	d013      	beq.n	800e26e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e24a:	f003 0320 	and.w	r3, r3, #32
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d105      	bne.n	800e25e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d007      	beq.n	800e26e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e282:	2b40      	cmp	r3, #64	; 0x40
 800e284:	d005      	beq.n	800e292 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e28a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d04f      	beq.n	800e332 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f001 f9dc 	bl	800f650 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d141      	bne.n	800e32a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3308      	adds	r3, #8
 800e2ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2b4:	e853 3f00 	ldrex	r3, [r3]
 800e2b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e2bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e2c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e2d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e2de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e2e2:	e841 2300 	strex	r3, r2, [r1]
 800e2e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e2ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1d9      	bne.n	800e2a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d013      	beq.n	800e322 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2fe:	4a14      	ldr	r2, [pc, #80]	; (800e350 <HAL_UART_IRQHandler+0x2b8>)
 800e300:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e306:	4618      	mov	r0, r3
 800e308:	f7fa f83c 	bl	8008384 <HAL_DMA_Abort_IT>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d017      	beq.n	800e342 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e31c:	4610      	mov	r0, r2
 800e31e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e320:	e00f      	b.n	800e342 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fa60 	bl	800e7e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e328:	e00b      	b.n	800e342 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 fa5c 	bl	800e7e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e330:	e007      	b.n	800e342 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 fa58 	bl	800e7e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e340:	e23b      	b.n	800e7ba <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e342:	bf00      	nop
    return;
 800e344:	e239      	b.n	800e7ba <HAL_UART_IRQHandler+0x722>
 800e346:	bf00      	nop
 800e348:	10000001 	.word	0x10000001
 800e34c:	04000120 	.word	0x04000120
 800e350:	0800f71d 	.word	0x0800f71d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e358:	2b01      	cmp	r3, #1
 800e35a:	f040 81ce 	bne.w	800e6fa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e362:	f003 0310 	and.w	r3, r3, #16
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 81c7 	beq.w	800e6fa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e370:	f003 0310 	and.w	r3, r3, #16
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 81c0 	beq.w	800e6fa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2210      	movs	r2, #16
 800e380:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e38c:	2b40      	cmp	r3, #64	; 0x40
 800e38e:	f040 813b 	bne.w	800e608 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a8b      	ldr	r2, [pc, #556]	; (800e5c8 <HAL_UART_IRQHandler+0x530>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d059      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a89      	ldr	r2, [pc, #548]	; (800e5cc <HAL_UART_IRQHandler+0x534>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d053      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a87      	ldr	r2, [pc, #540]	; (800e5d0 <HAL_UART_IRQHandler+0x538>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d04d      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a85      	ldr	r2, [pc, #532]	; (800e5d4 <HAL_UART_IRQHandler+0x53c>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d047      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a83      	ldr	r2, [pc, #524]	; (800e5d8 <HAL_UART_IRQHandler+0x540>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d041      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a81      	ldr	r2, [pc, #516]	; (800e5dc <HAL_UART_IRQHandler+0x544>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d03b      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a7f      	ldr	r2, [pc, #508]	; (800e5e0 <HAL_UART_IRQHandler+0x548>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d035      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a7d      	ldr	r2, [pc, #500]	; (800e5e4 <HAL_UART_IRQHandler+0x54c>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d02f      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a7b      	ldr	r2, [pc, #492]	; (800e5e8 <HAL_UART_IRQHandler+0x550>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d029      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a79      	ldr	r2, [pc, #484]	; (800e5ec <HAL_UART_IRQHandler+0x554>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d023      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a77      	ldr	r2, [pc, #476]	; (800e5f0 <HAL_UART_IRQHandler+0x558>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d01d      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a75      	ldr	r2, [pc, #468]	; (800e5f4 <HAL_UART_IRQHandler+0x55c>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d017      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a73      	ldr	r2, [pc, #460]	; (800e5f8 <HAL_UART_IRQHandler+0x560>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d011      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a71      	ldr	r2, [pc, #452]	; (800e5fc <HAL_UART_IRQHandler+0x564>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d00b      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a6f      	ldr	r2, [pc, #444]	; (800e600 <HAL_UART_IRQHandler+0x568>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d005      	beq.n	800e452 <HAL_UART_IRQHandler+0x3ba>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a6d      	ldr	r2, [pc, #436]	; (800e604 <HAL_UART_IRQHandler+0x56c>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d105      	bne.n	800e45e <HAL_UART_IRQHandler+0x3c6>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	e004      	b.n	800e468 <HAL_UART_IRQHandler+0x3d0>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	b29b      	uxth	r3, r3
 800e468:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e46c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 81a4 	beq.w	800e7be <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e47c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e480:	429a      	cmp	r2, r3
 800e482:	f080 819c 	bcs.w	800e7be <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e48c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e494:	69db      	ldr	r3, [r3, #28]
 800e496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e49a:	f000 8086 	beq.w	800e5aa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4aa:	e853 3f00 	ldrex	r3, [r3]
 800e4ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e4d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e4d8:	e841 2300 	strex	r3, r2, [r1]
 800e4dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e4e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1da      	bne.n	800e49e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4f2:	e853 3f00 	ldrex	r3, [r3]
 800e4f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e4f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4fa:	f023 0301 	bic.w	r3, r3, #1
 800e4fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3308      	adds	r3, #8
 800e508:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e50c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e510:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e512:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e514:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e518:	e841 2300 	strex	r3, r2, [r1]
 800e51c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e51e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1e1      	bne.n	800e4e8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3308      	adds	r3, #8
 800e52a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e52e:	e853 3f00 	ldrex	r3, [r3]
 800e532:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e53a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3308      	adds	r3, #8
 800e544:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e548:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e54a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e54e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e550:	e841 2300 	strex	r3, r2, [r1]
 800e554:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1e3      	bne.n	800e524 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2220      	movs	r2, #32
 800e560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e572:	e853 3f00 	ldrex	r3, [r3]
 800e576:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e57a:	f023 0310 	bic.w	r3, r3, #16
 800e57e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	461a      	mov	r2, r3
 800e588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e58c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e58e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e594:	e841 2300 	strex	r3, r2, [r1]
 800e598:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1e4      	bne.n	800e56a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7f9 fbcf 	bl	8007d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	1ad3      	subs	r3, r2, r3
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f91c 	bl	800e7fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5c4:	e0fb      	b.n	800e7be <HAL_UART_IRQHandler+0x726>
 800e5c6:	bf00      	nop
 800e5c8:	40020010 	.word	0x40020010
 800e5cc:	40020028 	.word	0x40020028
 800e5d0:	40020040 	.word	0x40020040
 800e5d4:	40020058 	.word	0x40020058
 800e5d8:	40020070 	.word	0x40020070
 800e5dc:	40020088 	.word	0x40020088
 800e5e0:	400200a0 	.word	0x400200a0
 800e5e4:	400200b8 	.word	0x400200b8
 800e5e8:	40020410 	.word	0x40020410
 800e5ec:	40020428 	.word	0x40020428
 800e5f0:	40020440 	.word	0x40020440
 800e5f4:	40020458 	.word	0x40020458
 800e5f8:	40020470 	.word	0x40020470
 800e5fc:	40020488 	.word	0x40020488
 800e600:	400204a0 	.word	0x400204a0
 800e604:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e614:	b29b      	uxth	r3, r3
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e622:	b29b      	uxth	r3, r3
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 80cc 	beq.w	800e7c2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e62a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 80c7 	beq.w	800e7c2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63c:	e853 3f00 	ldrex	r3, [r3]
 800e640:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	461a      	mov	r2, r3
 800e652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e656:	647b      	str	r3, [r7, #68]	; 0x44
 800e658:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e65c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e65e:	e841 2300 	strex	r3, r2, [r1]
 800e662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1e4      	bne.n	800e634 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	3308      	adds	r3, #8
 800e670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	e853 3f00 	ldrex	r3, [r3]
 800e678:	623b      	str	r3, [r7, #32]
   return(result);
 800e67a:	6a3a      	ldr	r2, [r7, #32]
 800e67c:	4b54      	ldr	r3, [pc, #336]	; (800e7d0 <HAL_UART_IRQHandler+0x738>)
 800e67e:	4013      	ands	r3, r2
 800e680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3308      	adds	r3, #8
 800e68a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e68e:	633a      	str	r2, [r7, #48]	; 0x30
 800e690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e696:	e841 2300 	strex	r3, r2, [r1]
 800e69a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1e3      	bne.n	800e66a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2220      	movs	r2, #32
 800e6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	e853 3f00 	ldrex	r3, [r3]
 800e6c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f023 0310 	bic.w	r3, r3, #16
 800e6ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6d8:	61fb      	str	r3, [r7, #28]
 800e6da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6dc:	69b9      	ldr	r1, [r7, #24]
 800e6de:	69fa      	ldr	r2, [r7, #28]
 800e6e0:	e841 2300 	strex	r3, r2, [r1]
 800e6e4:	617b      	str	r3, [r7, #20]
   return(result);
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d1e4      	bne.n	800e6b6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 f882 	bl	800e7fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6f8:	e063      	b.n	800e7c2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00e      	beq.n	800e724 <HAL_UART_IRQHandler+0x68c>
 800e706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e70a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d008      	beq.n	800e724 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e71a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f001 f83e 	bl	800f79e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e722:	e051      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d014      	beq.n	800e75a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d105      	bne.n	800e748 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e73c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d008      	beq.n	800e75a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d03a      	beq.n	800e7c6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	4798      	blx	r3
    }
    return;
 800e758:	e035      	b.n	800e7c6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e762:	2b00      	cmp	r3, #0
 800e764:	d009      	beq.n	800e77a <HAL_UART_IRQHandler+0x6e2>
 800e766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d003      	beq.n	800e77a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 ffe8 	bl	800f748 <UART_EndTransmit_IT>
    return;
 800e778:	e026      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e77e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <HAL_UART_IRQHandler+0x702>
 800e786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e78a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d003      	beq.n	800e79a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f001 f817 	bl	800f7c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e798:	e016      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e79e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d010      	beq.n	800e7c8 <HAL_UART_IRQHandler+0x730>
 800e7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	da0c      	bge.n	800e7c8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 ffff 	bl	800f7b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7b4:	e008      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
      return;
 800e7b6:	bf00      	nop
 800e7b8:	e006      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
    return;
 800e7ba:	bf00      	nop
 800e7bc:	e004      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
      return;
 800e7be:	bf00      	nop
 800e7c0:	e002      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
      return;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <HAL_UART_IRQHandler+0x730>
    return;
 800e7c6:	bf00      	nop
  }
}
 800e7c8:	37e8      	adds	r7, #232	; 0xe8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	effffffe 	.word	0xeffffffe

0800e7d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	460b      	mov	r3, r1
 800e806:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e808:	bf00      	nop
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e818:	b092      	sub	sp, #72	; 0x48
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e81e:	2300      	movs	r3, #0
 800e820:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	689a      	ldr	r2, [r3, #8]
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	431a      	orrs	r2, r3
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	431a      	orrs	r2, r3
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	69db      	ldr	r3, [r3, #28]
 800e838:	4313      	orrs	r3, r2
 800e83a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	4bbe      	ldr	r3, [pc, #760]	; (800eb3c <UART_SetConfig+0x328>)
 800e844:	4013      	ands	r3, r2
 800e846:	697a      	ldr	r2, [r7, #20]
 800e848:	6812      	ldr	r2, [r2, #0]
 800e84a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e84c:	430b      	orrs	r3, r1
 800e84e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4ab3      	ldr	r2, [pc, #716]	; (800eb40 <UART_SetConfig+0x32c>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d004      	beq.n	800e880 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	6a1b      	ldr	r3, [r3, #32]
 800e87a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e87c:	4313      	orrs	r3, r2
 800e87e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	689a      	ldr	r2, [r3, #8]
 800e886:	4baf      	ldr	r3, [pc, #700]	; (800eb44 <UART_SetConfig+0x330>)
 800e888:	4013      	ands	r3, r2
 800e88a:	697a      	ldr	r2, [r7, #20]
 800e88c:	6812      	ldr	r2, [r2, #0]
 800e88e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e890:	430b      	orrs	r3, r1
 800e892:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89a:	f023 010f 	bic.w	r1, r3, #15
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4aa6      	ldr	r2, [pc, #664]	; (800eb48 <UART_SetConfig+0x334>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d177      	bne.n	800e9a4 <UART_SetConfig+0x190>
 800e8b4:	4ba5      	ldr	r3, [pc, #660]	; (800eb4c <UART_SetConfig+0x338>)
 800e8b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8bc:	2b28      	cmp	r3, #40	; 0x28
 800e8be:	d86d      	bhi.n	800e99c <UART_SetConfig+0x188>
 800e8c0:	a201      	add	r2, pc, #4	; (adr r2, 800e8c8 <UART_SetConfig+0xb4>)
 800e8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c6:	bf00      	nop
 800e8c8:	0800e96d 	.word	0x0800e96d
 800e8cc:	0800e99d 	.word	0x0800e99d
 800e8d0:	0800e99d 	.word	0x0800e99d
 800e8d4:	0800e99d 	.word	0x0800e99d
 800e8d8:	0800e99d 	.word	0x0800e99d
 800e8dc:	0800e99d 	.word	0x0800e99d
 800e8e0:	0800e99d 	.word	0x0800e99d
 800e8e4:	0800e99d 	.word	0x0800e99d
 800e8e8:	0800e975 	.word	0x0800e975
 800e8ec:	0800e99d 	.word	0x0800e99d
 800e8f0:	0800e99d 	.word	0x0800e99d
 800e8f4:	0800e99d 	.word	0x0800e99d
 800e8f8:	0800e99d 	.word	0x0800e99d
 800e8fc:	0800e99d 	.word	0x0800e99d
 800e900:	0800e99d 	.word	0x0800e99d
 800e904:	0800e99d 	.word	0x0800e99d
 800e908:	0800e97d 	.word	0x0800e97d
 800e90c:	0800e99d 	.word	0x0800e99d
 800e910:	0800e99d 	.word	0x0800e99d
 800e914:	0800e99d 	.word	0x0800e99d
 800e918:	0800e99d 	.word	0x0800e99d
 800e91c:	0800e99d 	.word	0x0800e99d
 800e920:	0800e99d 	.word	0x0800e99d
 800e924:	0800e99d 	.word	0x0800e99d
 800e928:	0800e985 	.word	0x0800e985
 800e92c:	0800e99d 	.word	0x0800e99d
 800e930:	0800e99d 	.word	0x0800e99d
 800e934:	0800e99d 	.word	0x0800e99d
 800e938:	0800e99d 	.word	0x0800e99d
 800e93c:	0800e99d 	.word	0x0800e99d
 800e940:	0800e99d 	.word	0x0800e99d
 800e944:	0800e99d 	.word	0x0800e99d
 800e948:	0800e98d 	.word	0x0800e98d
 800e94c:	0800e99d 	.word	0x0800e99d
 800e950:	0800e99d 	.word	0x0800e99d
 800e954:	0800e99d 	.word	0x0800e99d
 800e958:	0800e99d 	.word	0x0800e99d
 800e95c:	0800e99d 	.word	0x0800e99d
 800e960:	0800e99d 	.word	0x0800e99d
 800e964:	0800e99d 	.word	0x0800e99d
 800e968:	0800e995 	.word	0x0800e995
 800e96c:	2301      	movs	r3, #1
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e972:	e222      	b.n	800edba <UART_SetConfig+0x5a6>
 800e974:	2304      	movs	r3, #4
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97a:	e21e      	b.n	800edba <UART_SetConfig+0x5a6>
 800e97c:	2308      	movs	r3, #8
 800e97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e982:	e21a      	b.n	800edba <UART_SetConfig+0x5a6>
 800e984:	2310      	movs	r3, #16
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98a:	e216      	b.n	800edba <UART_SetConfig+0x5a6>
 800e98c:	2320      	movs	r3, #32
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e992:	e212      	b.n	800edba <UART_SetConfig+0x5a6>
 800e994:	2340      	movs	r3, #64	; 0x40
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e99a:	e20e      	b.n	800edba <UART_SetConfig+0x5a6>
 800e99c:	2380      	movs	r3, #128	; 0x80
 800e99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9a2:	e20a      	b.n	800edba <UART_SetConfig+0x5a6>
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a69      	ldr	r2, [pc, #420]	; (800eb50 <UART_SetConfig+0x33c>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d130      	bne.n	800ea10 <UART_SetConfig+0x1fc>
 800e9ae:	4b67      	ldr	r3, [pc, #412]	; (800eb4c <UART_SetConfig+0x338>)
 800e9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b2:	f003 0307 	and.w	r3, r3, #7
 800e9b6:	2b05      	cmp	r3, #5
 800e9b8:	d826      	bhi.n	800ea08 <UART_SetConfig+0x1f4>
 800e9ba:	a201      	add	r2, pc, #4	; (adr r2, 800e9c0 <UART_SetConfig+0x1ac>)
 800e9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c0:	0800e9d9 	.word	0x0800e9d9
 800e9c4:	0800e9e1 	.word	0x0800e9e1
 800e9c8:	0800e9e9 	.word	0x0800e9e9
 800e9cc:	0800e9f1 	.word	0x0800e9f1
 800e9d0:	0800e9f9 	.word	0x0800e9f9
 800e9d4:	0800ea01 	.word	0x0800ea01
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9de:	e1ec      	b.n	800edba <UART_SetConfig+0x5a6>
 800e9e0:	2304      	movs	r3, #4
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e6:	e1e8      	b.n	800edba <UART_SetConfig+0x5a6>
 800e9e8:	2308      	movs	r3, #8
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ee:	e1e4      	b.n	800edba <UART_SetConfig+0x5a6>
 800e9f0:	2310      	movs	r3, #16
 800e9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9f6:	e1e0      	b.n	800edba <UART_SetConfig+0x5a6>
 800e9f8:	2320      	movs	r3, #32
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9fe:	e1dc      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea00:	2340      	movs	r3, #64	; 0x40
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea06:	e1d8      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea08:	2380      	movs	r3, #128	; 0x80
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea0e:	e1d4      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a4f      	ldr	r2, [pc, #316]	; (800eb54 <UART_SetConfig+0x340>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d130      	bne.n	800ea7c <UART_SetConfig+0x268>
 800ea1a:	4b4c      	ldr	r3, [pc, #304]	; (800eb4c <UART_SetConfig+0x338>)
 800ea1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea1e:	f003 0307 	and.w	r3, r3, #7
 800ea22:	2b05      	cmp	r3, #5
 800ea24:	d826      	bhi.n	800ea74 <UART_SetConfig+0x260>
 800ea26:	a201      	add	r2, pc, #4	; (adr r2, 800ea2c <UART_SetConfig+0x218>)
 800ea28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2c:	0800ea45 	.word	0x0800ea45
 800ea30:	0800ea4d 	.word	0x0800ea4d
 800ea34:	0800ea55 	.word	0x0800ea55
 800ea38:	0800ea5d 	.word	0x0800ea5d
 800ea3c:	0800ea65 	.word	0x0800ea65
 800ea40:	0800ea6d 	.word	0x0800ea6d
 800ea44:	2300      	movs	r3, #0
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4a:	e1b6      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea4c:	2304      	movs	r3, #4
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea52:	e1b2      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea54:	2308      	movs	r3, #8
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5a:	e1ae      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea5c:	2310      	movs	r3, #16
 800ea5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea62:	e1aa      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea64:	2320      	movs	r3, #32
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6a:	e1a6      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea6c:	2340      	movs	r3, #64	; 0x40
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea72:	e1a2      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea74:	2380      	movs	r3, #128	; 0x80
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea7a:	e19e      	b.n	800edba <UART_SetConfig+0x5a6>
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a35      	ldr	r2, [pc, #212]	; (800eb58 <UART_SetConfig+0x344>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d130      	bne.n	800eae8 <UART_SetConfig+0x2d4>
 800ea86:	4b31      	ldr	r3, [pc, #196]	; (800eb4c <UART_SetConfig+0x338>)
 800ea88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea8a:	f003 0307 	and.w	r3, r3, #7
 800ea8e:	2b05      	cmp	r3, #5
 800ea90:	d826      	bhi.n	800eae0 <UART_SetConfig+0x2cc>
 800ea92:	a201      	add	r2, pc, #4	; (adr r2, 800ea98 <UART_SetConfig+0x284>)
 800ea94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea98:	0800eab1 	.word	0x0800eab1
 800ea9c:	0800eab9 	.word	0x0800eab9
 800eaa0:	0800eac1 	.word	0x0800eac1
 800eaa4:	0800eac9 	.word	0x0800eac9
 800eaa8:	0800ead1 	.word	0x0800ead1
 800eaac:	0800ead9 	.word	0x0800ead9
 800eab0:	2300      	movs	r3, #0
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e180      	b.n	800edba <UART_SetConfig+0x5a6>
 800eab8:	2304      	movs	r3, #4
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eabe:	e17c      	b.n	800edba <UART_SetConfig+0x5a6>
 800eac0:	2308      	movs	r3, #8
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac6:	e178      	b.n	800edba <UART_SetConfig+0x5a6>
 800eac8:	2310      	movs	r3, #16
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eace:	e174      	b.n	800edba <UART_SetConfig+0x5a6>
 800ead0:	2320      	movs	r3, #32
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead6:	e170      	b.n	800edba <UART_SetConfig+0x5a6>
 800ead8:	2340      	movs	r3, #64	; 0x40
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eade:	e16c      	b.n	800edba <UART_SetConfig+0x5a6>
 800eae0:	2380      	movs	r3, #128	; 0x80
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae6:	e168      	b.n	800edba <UART_SetConfig+0x5a6>
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a1b      	ldr	r2, [pc, #108]	; (800eb5c <UART_SetConfig+0x348>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d142      	bne.n	800eb78 <UART_SetConfig+0x364>
 800eaf2:	4b16      	ldr	r3, [pc, #88]	; (800eb4c <UART_SetConfig+0x338>)
 800eaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf6:	f003 0307 	and.w	r3, r3, #7
 800eafa:	2b05      	cmp	r3, #5
 800eafc:	d838      	bhi.n	800eb70 <UART_SetConfig+0x35c>
 800eafe:	a201      	add	r2, pc, #4	; (adr r2, 800eb04 <UART_SetConfig+0x2f0>)
 800eb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb04:	0800eb1d 	.word	0x0800eb1d
 800eb08:	0800eb25 	.word	0x0800eb25
 800eb0c:	0800eb2d 	.word	0x0800eb2d
 800eb10:	0800eb35 	.word	0x0800eb35
 800eb14:	0800eb61 	.word	0x0800eb61
 800eb18:	0800eb69 	.word	0x0800eb69
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb22:	e14a      	b.n	800edba <UART_SetConfig+0x5a6>
 800eb24:	2304      	movs	r3, #4
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2a:	e146      	b.n	800edba <UART_SetConfig+0x5a6>
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e142      	b.n	800edba <UART_SetConfig+0x5a6>
 800eb34:	2310      	movs	r3, #16
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e13e      	b.n	800edba <UART_SetConfig+0x5a6>
 800eb3c:	cfff69f3 	.word	0xcfff69f3
 800eb40:	58000c00 	.word	0x58000c00
 800eb44:	11fff4ff 	.word	0x11fff4ff
 800eb48:	40011000 	.word	0x40011000
 800eb4c:	58024400 	.word	0x58024400
 800eb50:	40004400 	.word	0x40004400
 800eb54:	40004800 	.word	0x40004800
 800eb58:	40004c00 	.word	0x40004c00
 800eb5c:	40005000 	.word	0x40005000
 800eb60:	2320      	movs	r3, #32
 800eb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb66:	e128      	b.n	800edba <UART_SetConfig+0x5a6>
 800eb68:	2340      	movs	r3, #64	; 0x40
 800eb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6e:	e124      	b.n	800edba <UART_SetConfig+0x5a6>
 800eb70:	2380      	movs	r3, #128	; 0x80
 800eb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb76:	e120      	b.n	800edba <UART_SetConfig+0x5a6>
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4acb      	ldr	r2, [pc, #812]	; (800eeac <UART_SetConfig+0x698>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d176      	bne.n	800ec70 <UART_SetConfig+0x45c>
 800eb82:	4bcb      	ldr	r3, [pc, #812]	; (800eeb0 <UART_SetConfig+0x69c>)
 800eb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb8a:	2b28      	cmp	r3, #40	; 0x28
 800eb8c:	d86c      	bhi.n	800ec68 <UART_SetConfig+0x454>
 800eb8e:	a201      	add	r2, pc, #4	; (adr r2, 800eb94 <UART_SetConfig+0x380>)
 800eb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb94:	0800ec39 	.word	0x0800ec39
 800eb98:	0800ec69 	.word	0x0800ec69
 800eb9c:	0800ec69 	.word	0x0800ec69
 800eba0:	0800ec69 	.word	0x0800ec69
 800eba4:	0800ec69 	.word	0x0800ec69
 800eba8:	0800ec69 	.word	0x0800ec69
 800ebac:	0800ec69 	.word	0x0800ec69
 800ebb0:	0800ec69 	.word	0x0800ec69
 800ebb4:	0800ec41 	.word	0x0800ec41
 800ebb8:	0800ec69 	.word	0x0800ec69
 800ebbc:	0800ec69 	.word	0x0800ec69
 800ebc0:	0800ec69 	.word	0x0800ec69
 800ebc4:	0800ec69 	.word	0x0800ec69
 800ebc8:	0800ec69 	.word	0x0800ec69
 800ebcc:	0800ec69 	.word	0x0800ec69
 800ebd0:	0800ec69 	.word	0x0800ec69
 800ebd4:	0800ec49 	.word	0x0800ec49
 800ebd8:	0800ec69 	.word	0x0800ec69
 800ebdc:	0800ec69 	.word	0x0800ec69
 800ebe0:	0800ec69 	.word	0x0800ec69
 800ebe4:	0800ec69 	.word	0x0800ec69
 800ebe8:	0800ec69 	.word	0x0800ec69
 800ebec:	0800ec69 	.word	0x0800ec69
 800ebf0:	0800ec69 	.word	0x0800ec69
 800ebf4:	0800ec51 	.word	0x0800ec51
 800ebf8:	0800ec69 	.word	0x0800ec69
 800ebfc:	0800ec69 	.word	0x0800ec69
 800ec00:	0800ec69 	.word	0x0800ec69
 800ec04:	0800ec69 	.word	0x0800ec69
 800ec08:	0800ec69 	.word	0x0800ec69
 800ec0c:	0800ec69 	.word	0x0800ec69
 800ec10:	0800ec69 	.word	0x0800ec69
 800ec14:	0800ec59 	.word	0x0800ec59
 800ec18:	0800ec69 	.word	0x0800ec69
 800ec1c:	0800ec69 	.word	0x0800ec69
 800ec20:	0800ec69 	.word	0x0800ec69
 800ec24:	0800ec69 	.word	0x0800ec69
 800ec28:	0800ec69 	.word	0x0800ec69
 800ec2c:	0800ec69 	.word	0x0800ec69
 800ec30:	0800ec69 	.word	0x0800ec69
 800ec34:	0800ec61 	.word	0x0800ec61
 800ec38:	2301      	movs	r3, #1
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e0bc      	b.n	800edba <UART_SetConfig+0x5a6>
 800ec40:	2304      	movs	r3, #4
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e0b8      	b.n	800edba <UART_SetConfig+0x5a6>
 800ec48:	2308      	movs	r3, #8
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e0b4      	b.n	800edba <UART_SetConfig+0x5a6>
 800ec50:	2310      	movs	r3, #16
 800ec52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec56:	e0b0      	b.n	800edba <UART_SetConfig+0x5a6>
 800ec58:	2320      	movs	r3, #32
 800ec5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5e:	e0ac      	b.n	800edba <UART_SetConfig+0x5a6>
 800ec60:	2340      	movs	r3, #64	; 0x40
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec66:	e0a8      	b.n	800edba <UART_SetConfig+0x5a6>
 800ec68:	2380      	movs	r3, #128	; 0x80
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec6e:	e0a4      	b.n	800edba <UART_SetConfig+0x5a6>
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a8f      	ldr	r2, [pc, #572]	; (800eeb4 <UART_SetConfig+0x6a0>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d130      	bne.n	800ecdc <UART_SetConfig+0x4c8>
 800ec7a:	4b8d      	ldr	r3, [pc, #564]	; (800eeb0 <UART_SetConfig+0x69c>)
 800ec7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec7e:	f003 0307 	and.w	r3, r3, #7
 800ec82:	2b05      	cmp	r3, #5
 800ec84:	d826      	bhi.n	800ecd4 <UART_SetConfig+0x4c0>
 800ec86:	a201      	add	r2, pc, #4	; (adr r2, 800ec8c <UART_SetConfig+0x478>)
 800ec88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8c:	0800eca5 	.word	0x0800eca5
 800ec90:	0800ecad 	.word	0x0800ecad
 800ec94:	0800ecb5 	.word	0x0800ecb5
 800ec98:	0800ecbd 	.word	0x0800ecbd
 800ec9c:	0800ecc5 	.word	0x0800ecc5
 800eca0:	0800eccd 	.word	0x0800eccd
 800eca4:	2300      	movs	r3, #0
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e086      	b.n	800edba <UART_SetConfig+0x5a6>
 800ecac:	2304      	movs	r3, #4
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e082      	b.n	800edba <UART_SetConfig+0x5a6>
 800ecb4:	2308      	movs	r3, #8
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecba:	e07e      	b.n	800edba <UART_SetConfig+0x5a6>
 800ecbc:	2310      	movs	r3, #16
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc2:	e07a      	b.n	800edba <UART_SetConfig+0x5a6>
 800ecc4:	2320      	movs	r3, #32
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecca:	e076      	b.n	800edba <UART_SetConfig+0x5a6>
 800eccc:	2340      	movs	r3, #64	; 0x40
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecd2:	e072      	b.n	800edba <UART_SetConfig+0x5a6>
 800ecd4:	2380      	movs	r3, #128	; 0x80
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecda:	e06e      	b.n	800edba <UART_SetConfig+0x5a6>
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a75      	ldr	r2, [pc, #468]	; (800eeb8 <UART_SetConfig+0x6a4>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d130      	bne.n	800ed48 <UART_SetConfig+0x534>
 800ece6:	4b72      	ldr	r3, [pc, #456]	; (800eeb0 <UART_SetConfig+0x69c>)
 800ece8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecea:	f003 0307 	and.w	r3, r3, #7
 800ecee:	2b05      	cmp	r3, #5
 800ecf0:	d826      	bhi.n	800ed40 <UART_SetConfig+0x52c>
 800ecf2:	a201      	add	r2, pc, #4	; (adr r2, 800ecf8 <UART_SetConfig+0x4e4>)
 800ecf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf8:	0800ed11 	.word	0x0800ed11
 800ecfc:	0800ed19 	.word	0x0800ed19
 800ed00:	0800ed21 	.word	0x0800ed21
 800ed04:	0800ed29 	.word	0x0800ed29
 800ed08:	0800ed31 	.word	0x0800ed31
 800ed0c:	0800ed39 	.word	0x0800ed39
 800ed10:	2300      	movs	r3, #0
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed16:	e050      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed18:	2304      	movs	r3, #4
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1e:	e04c      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed20:	2308      	movs	r3, #8
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed26:	e048      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed28:	2310      	movs	r3, #16
 800ed2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2e:	e044      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed30:	2320      	movs	r3, #32
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed36:	e040      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed38:	2340      	movs	r3, #64	; 0x40
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3e:	e03c      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed40:	2380      	movs	r3, #128	; 0x80
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed46:	e038      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a5b      	ldr	r2, [pc, #364]	; (800eebc <UART_SetConfig+0x6a8>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d130      	bne.n	800edb4 <UART_SetConfig+0x5a0>
 800ed52:	4b57      	ldr	r3, [pc, #348]	; (800eeb0 <UART_SetConfig+0x69c>)
 800ed54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed56:	f003 0307 	and.w	r3, r3, #7
 800ed5a:	2b05      	cmp	r3, #5
 800ed5c:	d826      	bhi.n	800edac <UART_SetConfig+0x598>
 800ed5e:	a201      	add	r2, pc, #4	; (adr r2, 800ed64 <UART_SetConfig+0x550>)
 800ed60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed64:	0800ed7d 	.word	0x0800ed7d
 800ed68:	0800ed85 	.word	0x0800ed85
 800ed6c:	0800ed8d 	.word	0x0800ed8d
 800ed70:	0800ed95 	.word	0x0800ed95
 800ed74:	0800ed9d 	.word	0x0800ed9d
 800ed78:	0800eda5 	.word	0x0800eda5
 800ed7c:	2302      	movs	r3, #2
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e01a      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed84:	2304      	movs	r3, #4
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8a:	e016      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed8c:	2308      	movs	r3, #8
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed92:	e012      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed94:	2310      	movs	r3, #16
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9a:	e00e      	b.n	800edba <UART_SetConfig+0x5a6>
 800ed9c:	2320      	movs	r3, #32
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda2:	e00a      	b.n	800edba <UART_SetConfig+0x5a6>
 800eda4:	2340      	movs	r3, #64	; 0x40
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edaa:	e006      	b.n	800edba <UART_SetConfig+0x5a6>
 800edac:	2380      	movs	r3, #128	; 0x80
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb2:	e002      	b.n	800edba <UART_SetConfig+0x5a6>
 800edb4:	2380      	movs	r3, #128	; 0x80
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a3f      	ldr	r2, [pc, #252]	; (800eebc <UART_SetConfig+0x6a8>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	f040 80f8 	bne.w	800efb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800edc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800edca:	2b20      	cmp	r3, #32
 800edcc:	dc46      	bgt.n	800ee5c <UART_SetConfig+0x648>
 800edce:	2b02      	cmp	r3, #2
 800edd0:	f2c0 8082 	blt.w	800eed8 <UART_SetConfig+0x6c4>
 800edd4:	3b02      	subs	r3, #2
 800edd6:	2b1e      	cmp	r3, #30
 800edd8:	d87e      	bhi.n	800eed8 <UART_SetConfig+0x6c4>
 800edda:	a201      	add	r2, pc, #4	; (adr r2, 800ede0 <UART_SetConfig+0x5cc>)
 800eddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede0:	0800ee63 	.word	0x0800ee63
 800ede4:	0800eed9 	.word	0x0800eed9
 800ede8:	0800ee6b 	.word	0x0800ee6b
 800edec:	0800eed9 	.word	0x0800eed9
 800edf0:	0800eed9 	.word	0x0800eed9
 800edf4:	0800eed9 	.word	0x0800eed9
 800edf8:	0800ee7b 	.word	0x0800ee7b
 800edfc:	0800eed9 	.word	0x0800eed9
 800ee00:	0800eed9 	.word	0x0800eed9
 800ee04:	0800eed9 	.word	0x0800eed9
 800ee08:	0800eed9 	.word	0x0800eed9
 800ee0c:	0800eed9 	.word	0x0800eed9
 800ee10:	0800eed9 	.word	0x0800eed9
 800ee14:	0800eed9 	.word	0x0800eed9
 800ee18:	0800ee8b 	.word	0x0800ee8b
 800ee1c:	0800eed9 	.word	0x0800eed9
 800ee20:	0800eed9 	.word	0x0800eed9
 800ee24:	0800eed9 	.word	0x0800eed9
 800ee28:	0800eed9 	.word	0x0800eed9
 800ee2c:	0800eed9 	.word	0x0800eed9
 800ee30:	0800eed9 	.word	0x0800eed9
 800ee34:	0800eed9 	.word	0x0800eed9
 800ee38:	0800eed9 	.word	0x0800eed9
 800ee3c:	0800eed9 	.word	0x0800eed9
 800ee40:	0800eed9 	.word	0x0800eed9
 800ee44:	0800eed9 	.word	0x0800eed9
 800ee48:	0800eed9 	.word	0x0800eed9
 800ee4c:	0800eed9 	.word	0x0800eed9
 800ee50:	0800eed9 	.word	0x0800eed9
 800ee54:	0800eed9 	.word	0x0800eed9
 800ee58:	0800eecb 	.word	0x0800eecb
 800ee5c:	2b40      	cmp	r3, #64	; 0x40
 800ee5e:	d037      	beq.n	800eed0 <UART_SetConfig+0x6bc>
 800ee60:	e03a      	b.n	800eed8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee62:	f7fd fd3b 	bl	800c8dc <HAL_RCCEx_GetD3PCLK1Freq>
 800ee66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee68:	e03c      	b.n	800eee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fd fd4a 	bl	800c908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee78:	e034      	b.n	800eee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee7a:	f107 0318 	add.w	r3, r7, #24
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fd fe96 	bl	800cbb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee88:	e02c      	b.n	800eee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <UART_SetConfig+0x69c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f003 0320 	and.w	r3, r3, #32
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d016      	beq.n	800eec4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee96:	4b06      	ldr	r3, [pc, #24]	; (800eeb0 <UART_SetConfig+0x69c>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	08db      	lsrs	r3, r3, #3
 800ee9c:	f003 0303 	and.w	r3, r3, #3
 800eea0:	4a07      	ldr	r2, [pc, #28]	; (800eec0 <UART_SetConfig+0x6ac>)
 800eea2:	fa22 f303 	lsr.w	r3, r2, r3
 800eea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eea8:	e01c      	b.n	800eee4 <UART_SetConfig+0x6d0>
 800eeaa:	bf00      	nop
 800eeac:	40011400 	.word	0x40011400
 800eeb0:	58024400 	.word	0x58024400
 800eeb4:	40007800 	.word	0x40007800
 800eeb8:	40007c00 	.word	0x40007c00
 800eebc:	58000c00 	.word	0x58000c00
 800eec0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800eec4:	4b9d      	ldr	r3, [pc, #628]	; (800f13c <UART_SetConfig+0x928>)
 800eec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eec8:	e00c      	b.n	800eee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eeca:	4b9d      	ldr	r3, [pc, #628]	; (800f140 <UART_SetConfig+0x92c>)
 800eecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eece:	e009      	b.n	800eee4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eed6:	e005      	b.n	800eee4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800eed8:	2300      	movs	r3, #0
 800eeda:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eee2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 81de 	beq.w	800f2a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef0:	4a94      	ldr	r2, [pc, #592]	; (800f144 <UART_SetConfig+0x930>)
 800eef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eef6:	461a      	mov	r2, r3
 800eef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eefa:	fbb3 f3f2 	udiv	r3, r3, r2
 800eefe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	685a      	ldr	r2, [r3, #4]
 800ef04:	4613      	mov	r3, r2
 800ef06:	005b      	lsls	r3, r3, #1
 800ef08:	4413      	add	r3, r2
 800ef0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d305      	bcc.n	800ef1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d903      	bls.n	800ef24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef22:	e1c1      	b.n	800f2a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef26:	2200      	movs	r2, #0
 800ef28:	60bb      	str	r3, [r7, #8]
 800ef2a:	60fa      	str	r2, [r7, #12]
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef30:	4a84      	ldr	r2, [pc, #528]	; (800f144 <UART_SetConfig+0x930>)
 800ef32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	2200      	movs	r2, #0
 800ef3a:	603b      	str	r3, [r7, #0]
 800ef3c:	607a      	str	r2, [r7, #4]
 800ef3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ef46:	f7f1 fa1b 	bl	8000380 <__aeabi_uldivmod>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	4610      	mov	r0, r2
 800ef50:	4619      	mov	r1, r3
 800ef52:	f04f 0200 	mov.w	r2, #0
 800ef56:	f04f 0300 	mov.w	r3, #0
 800ef5a:	020b      	lsls	r3, r1, #8
 800ef5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef60:	0202      	lsls	r2, r0, #8
 800ef62:	6979      	ldr	r1, [r7, #20]
 800ef64:	6849      	ldr	r1, [r1, #4]
 800ef66:	0849      	lsrs	r1, r1, #1
 800ef68:	2000      	movs	r0, #0
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	eb12 0804 	adds.w	r8, r2, r4
 800ef72:	eb43 0905 	adc.w	r9, r3, r5
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	469a      	mov	sl, r3
 800ef7e:	4693      	mov	fp, r2
 800ef80:	4652      	mov	r2, sl
 800ef82:	465b      	mov	r3, fp
 800ef84:	4640      	mov	r0, r8
 800ef86:	4649      	mov	r1, r9
 800ef88:	f7f1 f9fa 	bl	8000380 <__aeabi_uldivmod>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	460b      	mov	r3, r1
 800ef90:	4613      	mov	r3, r2
 800ef92:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef9a:	d308      	bcc.n	800efae <UART_SetConfig+0x79a>
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efa2:	d204      	bcs.n	800efae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efaa:	60da      	str	r2, [r3, #12]
 800efac:	e17c      	b.n	800f2a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800efb4:	e178      	b.n	800f2a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	69db      	ldr	r3, [r3, #28]
 800efba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efbe:	f040 80c5 	bne.w	800f14c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800efc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800efc6:	2b20      	cmp	r3, #32
 800efc8:	dc48      	bgt.n	800f05c <UART_SetConfig+0x848>
 800efca:	2b00      	cmp	r3, #0
 800efcc:	db7b      	blt.n	800f0c6 <UART_SetConfig+0x8b2>
 800efce:	2b20      	cmp	r3, #32
 800efd0:	d879      	bhi.n	800f0c6 <UART_SetConfig+0x8b2>
 800efd2:	a201      	add	r2, pc, #4	; (adr r2, 800efd8 <UART_SetConfig+0x7c4>)
 800efd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd8:	0800f063 	.word	0x0800f063
 800efdc:	0800f06b 	.word	0x0800f06b
 800efe0:	0800f0c7 	.word	0x0800f0c7
 800efe4:	0800f0c7 	.word	0x0800f0c7
 800efe8:	0800f073 	.word	0x0800f073
 800efec:	0800f0c7 	.word	0x0800f0c7
 800eff0:	0800f0c7 	.word	0x0800f0c7
 800eff4:	0800f0c7 	.word	0x0800f0c7
 800eff8:	0800f083 	.word	0x0800f083
 800effc:	0800f0c7 	.word	0x0800f0c7
 800f000:	0800f0c7 	.word	0x0800f0c7
 800f004:	0800f0c7 	.word	0x0800f0c7
 800f008:	0800f0c7 	.word	0x0800f0c7
 800f00c:	0800f0c7 	.word	0x0800f0c7
 800f010:	0800f0c7 	.word	0x0800f0c7
 800f014:	0800f0c7 	.word	0x0800f0c7
 800f018:	0800f093 	.word	0x0800f093
 800f01c:	0800f0c7 	.word	0x0800f0c7
 800f020:	0800f0c7 	.word	0x0800f0c7
 800f024:	0800f0c7 	.word	0x0800f0c7
 800f028:	0800f0c7 	.word	0x0800f0c7
 800f02c:	0800f0c7 	.word	0x0800f0c7
 800f030:	0800f0c7 	.word	0x0800f0c7
 800f034:	0800f0c7 	.word	0x0800f0c7
 800f038:	0800f0c7 	.word	0x0800f0c7
 800f03c:	0800f0c7 	.word	0x0800f0c7
 800f040:	0800f0c7 	.word	0x0800f0c7
 800f044:	0800f0c7 	.word	0x0800f0c7
 800f048:	0800f0c7 	.word	0x0800f0c7
 800f04c:	0800f0c7 	.word	0x0800f0c7
 800f050:	0800f0c7 	.word	0x0800f0c7
 800f054:	0800f0c7 	.word	0x0800f0c7
 800f058:	0800f0b9 	.word	0x0800f0b9
 800f05c:	2b40      	cmp	r3, #64	; 0x40
 800f05e:	d02e      	beq.n	800f0be <UART_SetConfig+0x8aa>
 800f060:	e031      	b.n	800f0c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f062:	f7fc fcc9 	bl	800b9f8 <HAL_RCC_GetPCLK1Freq>
 800f066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f068:	e033      	b.n	800f0d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f06a:	f7fc fcdb 	bl	800ba24 <HAL_RCC_GetPCLK2Freq>
 800f06e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f070:	e02f      	b.n	800f0d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f076:	4618      	mov	r0, r3
 800f078:	f7fd fc46 	bl	800c908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f080:	e027      	b.n	800f0d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f082:	f107 0318 	add.w	r3, r7, #24
 800f086:	4618      	mov	r0, r3
 800f088:	f7fd fd92 	bl	800cbb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f090:	e01f      	b.n	800f0d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f092:	4b2d      	ldr	r3, [pc, #180]	; (800f148 <UART_SetConfig+0x934>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f003 0320 	and.w	r3, r3, #32
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d009      	beq.n	800f0b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f09e:	4b2a      	ldr	r3, [pc, #168]	; (800f148 <UART_SetConfig+0x934>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	08db      	lsrs	r3, r3, #3
 800f0a4:	f003 0303 	and.w	r3, r3, #3
 800f0a8:	4a24      	ldr	r2, [pc, #144]	; (800f13c <UART_SetConfig+0x928>)
 800f0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0b0:	e00f      	b.n	800f0d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f0b2:	4b22      	ldr	r3, [pc, #136]	; (800f13c <UART_SetConfig+0x928>)
 800f0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b6:	e00c      	b.n	800f0d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0b8:	4b21      	ldr	r3, [pc, #132]	; (800f140 <UART_SetConfig+0x92c>)
 800f0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0bc:	e009      	b.n	800f0d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0c4:	e005      	b.n	800f0d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f0d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 80e7 	beq.w	800f2a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0de:	4a19      	ldr	r2, [pc, #100]	; (800f144 <UART_SetConfig+0x930>)
 800f0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0ec:	005a      	lsls	r2, r3, #1
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	085b      	lsrs	r3, r3, #1
 800f0f4:	441a      	add	r2, r3
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	2b0f      	cmp	r3, #15
 800f104:	d916      	bls.n	800f134 <UART_SetConfig+0x920>
 800f106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f10c:	d212      	bcs.n	800f134 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f110:	b29b      	uxth	r3, r3
 800f112:	f023 030f 	bic.w	r3, r3, #15
 800f116:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11a:	085b      	lsrs	r3, r3, #1
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	f003 0307 	and.w	r3, r3, #7
 800f122:	b29a      	uxth	r2, r3
 800f124:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f126:	4313      	orrs	r3, r2
 800f128:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f130:	60da      	str	r2, [r3, #12]
 800f132:	e0b9      	b.n	800f2a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f134:	2301      	movs	r3, #1
 800f136:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f13a:	e0b5      	b.n	800f2a8 <UART_SetConfig+0xa94>
 800f13c:	03d09000 	.word	0x03d09000
 800f140:	003d0900 	.word	0x003d0900
 800f144:	080122b8 	.word	0x080122b8
 800f148:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f14c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f150:	2b20      	cmp	r3, #32
 800f152:	dc49      	bgt.n	800f1e8 <UART_SetConfig+0x9d4>
 800f154:	2b00      	cmp	r3, #0
 800f156:	db7c      	blt.n	800f252 <UART_SetConfig+0xa3e>
 800f158:	2b20      	cmp	r3, #32
 800f15a:	d87a      	bhi.n	800f252 <UART_SetConfig+0xa3e>
 800f15c:	a201      	add	r2, pc, #4	; (adr r2, 800f164 <UART_SetConfig+0x950>)
 800f15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f162:	bf00      	nop
 800f164:	0800f1ef 	.word	0x0800f1ef
 800f168:	0800f1f7 	.word	0x0800f1f7
 800f16c:	0800f253 	.word	0x0800f253
 800f170:	0800f253 	.word	0x0800f253
 800f174:	0800f1ff 	.word	0x0800f1ff
 800f178:	0800f253 	.word	0x0800f253
 800f17c:	0800f253 	.word	0x0800f253
 800f180:	0800f253 	.word	0x0800f253
 800f184:	0800f20f 	.word	0x0800f20f
 800f188:	0800f253 	.word	0x0800f253
 800f18c:	0800f253 	.word	0x0800f253
 800f190:	0800f253 	.word	0x0800f253
 800f194:	0800f253 	.word	0x0800f253
 800f198:	0800f253 	.word	0x0800f253
 800f19c:	0800f253 	.word	0x0800f253
 800f1a0:	0800f253 	.word	0x0800f253
 800f1a4:	0800f21f 	.word	0x0800f21f
 800f1a8:	0800f253 	.word	0x0800f253
 800f1ac:	0800f253 	.word	0x0800f253
 800f1b0:	0800f253 	.word	0x0800f253
 800f1b4:	0800f253 	.word	0x0800f253
 800f1b8:	0800f253 	.word	0x0800f253
 800f1bc:	0800f253 	.word	0x0800f253
 800f1c0:	0800f253 	.word	0x0800f253
 800f1c4:	0800f253 	.word	0x0800f253
 800f1c8:	0800f253 	.word	0x0800f253
 800f1cc:	0800f253 	.word	0x0800f253
 800f1d0:	0800f253 	.word	0x0800f253
 800f1d4:	0800f253 	.word	0x0800f253
 800f1d8:	0800f253 	.word	0x0800f253
 800f1dc:	0800f253 	.word	0x0800f253
 800f1e0:	0800f253 	.word	0x0800f253
 800f1e4:	0800f245 	.word	0x0800f245
 800f1e8:	2b40      	cmp	r3, #64	; 0x40
 800f1ea:	d02e      	beq.n	800f24a <UART_SetConfig+0xa36>
 800f1ec:	e031      	b.n	800f252 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1ee:	f7fc fc03 	bl	800b9f8 <HAL_RCC_GetPCLK1Freq>
 800f1f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1f4:	e033      	b.n	800f25e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1f6:	f7fc fc15 	bl	800ba24 <HAL_RCC_GetPCLK2Freq>
 800f1fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1fc:	e02f      	b.n	800f25e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f202:	4618      	mov	r0, r3
 800f204:	f7fd fb80 	bl	800c908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f20c:	e027      	b.n	800f25e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f20e:	f107 0318 	add.w	r3, r7, #24
 800f212:	4618      	mov	r0, r3
 800f214:	f7fd fccc 	bl	800cbb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f21c:	e01f      	b.n	800f25e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f21e:	4b2d      	ldr	r3, [pc, #180]	; (800f2d4 <UART_SetConfig+0xac0>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 0320 	and.w	r3, r3, #32
 800f226:	2b00      	cmp	r3, #0
 800f228:	d009      	beq.n	800f23e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f22a:	4b2a      	ldr	r3, [pc, #168]	; (800f2d4 <UART_SetConfig+0xac0>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	08db      	lsrs	r3, r3, #3
 800f230:	f003 0303 	and.w	r3, r3, #3
 800f234:	4a28      	ldr	r2, [pc, #160]	; (800f2d8 <UART_SetConfig+0xac4>)
 800f236:	fa22 f303 	lsr.w	r3, r2, r3
 800f23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f23c:	e00f      	b.n	800f25e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f23e:	4b26      	ldr	r3, [pc, #152]	; (800f2d8 <UART_SetConfig+0xac4>)
 800f240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f242:	e00c      	b.n	800f25e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f244:	4b25      	ldr	r3, [pc, #148]	; (800f2dc <UART_SetConfig+0xac8>)
 800f246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f248:	e009      	b.n	800f25e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f250:	e005      	b.n	800f25e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f252:	2300      	movs	r3, #0
 800f254:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f256:	2301      	movs	r3, #1
 800f258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f25c:	bf00      	nop
    }

    if (pclk != 0U)
 800f25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f260:	2b00      	cmp	r3, #0
 800f262:	d021      	beq.n	800f2a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f268:	4a1d      	ldr	r2, [pc, #116]	; (800f2e0 <UART_SetConfig+0xacc>)
 800f26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f26e:	461a      	mov	r2, r3
 800f270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f272:	fbb3 f2f2 	udiv	r2, r3, r2
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	685b      	ldr	r3, [r3, #4]
 800f27a:	085b      	lsrs	r3, r3, #1
 800f27c:	441a      	add	r2, r3
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	fbb2 f3f3 	udiv	r3, r2, r3
 800f286:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28a:	2b0f      	cmp	r3, #15
 800f28c:	d909      	bls.n	800f2a2 <UART_SetConfig+0xa8e>
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f294:	d205      	bcs.n	800f2a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f298:	b29a      	uxth	r2, r3
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	60da      	str	r2, [r3, #12]
 800f2a0:	e002      	b.n	800f2a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f2c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3748      	adds	r7, #72	; 0x48
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2d2:	bf00      	nop
 800f2d4:	58024400 	.word	0x58024400
 800f2d8:	03d09000 	.word	0x03d09000
 800f2dc:	003d0900 	.word	0x003d0900
 800f2e0:	080122b8 	.word	0x080122b8

0800f2e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f0:	f003 0301 	and.w	r3, r3, #1
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00a      	beq.n	800f30e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	430a      	orrs	r2, r1
 800f30c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f312:	f003 0302 	and.w	r3, r3, #2
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00a      	beq.n	800f330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	430a      	orrs	r2, r1
 800f32e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f334:	f003 0304 	and.w	r3, r3, #4
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00a      	beq.n	800f352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	430a      	orrs	r2, r1
 800f350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f356:	f003 0308 	and.w	r3, r3, #8
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00a      	beq.n	800f374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	430a      	orrs	r2, r1
 800f372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f378:	f003 0310 	and.w	r3, r3, #16
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00a      	beq.n	800f396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	430a      	orrs	r2, r1
 800f394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f39a:	f003 0320 	and.w	r3, r3, #32
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00a      	beq.n	800f3b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	430a      	orrs	r2, r1
 800f3b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d01a      	beq.n	800f3fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	430a      	orrs	r2, r1
 800f3d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3e2:	d10a      	bne.n	800f3fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	430a      	orrs	r2, r1
 800f3f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f402:	2b00      	cmp	r3, #0
 800f404:	d00a      	beq.n	800f41c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	430a      	orrs	r2, r1
 800f41a:	605a      	str	r2, [r3, #4]
  }
}
 800f41c:	bf00      	nop
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af02      	add	r7, sp, #8
 800f42e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f438:	f7f7 ffca 	bl	80073d0 <HAL_GetTick>
 800f43c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f003 0308 	and.w	r3, r3, #8
 800f448:	2b08      	cmp	r3, #8
 800f44a:	d10e      	bne.n	800f46a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f44c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2200      	movs	r2, #0
 800f456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 f82f 	bl	800f4be <UART_WaitOnFlagUntilTimeout>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f466:	2303      	movs	r3, #3
 800f468:	e025      	b.n	800f4b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f003 0304 	and.w	r3, r3, #4
 800f474:	2b04      	cmp	r3, #4
 800f476:	d10e      	bne.n	800f496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2200      	movs	r2, #0
 800f482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 f819 	bl	800f4be <UART_WaitOnFlagUntilTimeout>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f492:	2303      	movs	r3, #3
 800f494:	e00f      	b.n	800f4b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2220      	movs	r2, #32
 800f49a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2220      	movs	r2, #32
 800f4a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f4b4:	2300      	movs	r3, #0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b09c      	sub	sp, #112	; 0x70
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	60f8      	str	r0, [r7, #12]
 800f4c6:	60b9      	str	r1, [r7, #8]
 800f4c8:	603b      	str	r3, [r7, #0]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4ce:	e0a9      	b.n	800f624 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d6:	f000 80a5 	beq.w	800f624 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4da:	f7f7 ff79 	bl	80073d0 <HAL_GetTick>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d302      	bcc.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0x32>
 800f4ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d140      	bne.n	800f572 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f8:	e853 3f00 	ldrex	r3, [r3]
 800f4fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f500:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f504:	667b      	str	r3, [r7, #100]	; 0x64
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	461a      	mov	r2, r3
 800f50c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f50e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f510:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f514:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f516:	e841 2300 	strex	r3, r2, [r1]
 800f51a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f51c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1e6      	bne.n	800f4f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3308      	adds	r3, #8
 800f528:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f52c:	e853 3f00 	ldrex	r3, [r3]
 800f530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f534:	f023 0301 	bic.w	r3, r3, #1
 800f538:	663b      	str	r3, [r7, #96]	; 0x60
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	3308      	adds	r3, #8
 800f540:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f542:	64ba      	str	r2, [r7, #72]	; 0x48
 800f544:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f54a:	e841 2300 	strex	r3, r2, [r1]
 800f54e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e5      	bne.n	800f522 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2220      	movs	r2, #32
 800f55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2220      	movs	r2, #32
 800f562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f56e:	2303      	movs	r3, #3
 800f570:	e069      	b.n	800f646 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f003 0304 	and.w	r3, r3, #4
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d051      	beq.n	800f624 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	69db      	ldr	r3, [r3, #28]
 800f586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f58a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f58e:	d149      	bne.n	800f624 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f598:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a2:	e853 3f00 	ldrex	r3, [r3]
 800f5a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f5ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800f5ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5c0:	e841 2300 	strex	r3, r2, [r1]
 800f5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1e6      	bne.n	800f59a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	3308      	adds	r3, #8
 800f5d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	e853 3f00 	ldrex	r3, [r3]
 800f5da:	613b      	str	r3, [r7, #16]
   return(result);
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f023 0301 	bic.w	r3, r3, #1
 800f5e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3308      	adds	r3, #8
 800f5ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f5ec:	623a      	str	r2, [r7, #32]
 800f5ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5f0:	69f9      	ldr	r1, [r7, #28]
 800f5f2:	6a3a      	ldr	r2, [r7, #32]
 800f5f4:	e841 2300 	strex	r3, r2, [r1]
 800f5f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d1e5      	bne.n	800f5cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2220      	movs	r2, #32
 800f604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2220      	movs	r2, #32
 800f60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2220      	movs	r2, #32
 800f614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f620:	2303      	movs	r3, #3
 800f622:	e010      	b.n	800f646 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	69da      	ldr	r2, [r3, #28]
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	4013      	ands	r3, r2
 800f62e:	68ba      	ldr	r2, [r7, #8]
 800f630:	429a      	cmp	r2, r3
 800f632:	bf0c      	ite	eq
 800f634:	2301      	moveq	r3, #1
 800f636:	2300      	movne	r3, #0
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	461a      	mov	r2, r3
 800f63c:	79fb      	ldrb	r3, [r7, #7]
 800f63e:	429a      	cmp	r2, r3
 800f640:	f43f af46 	beq.w	800f4d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3770      	adds	r7, #112	; 0x70
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
	...

0800f650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f650:	b480      	push	{r7}
 800f652:	b095      	sub	sp, #84	; 0x54
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f660:	e853 3f00 	ldrex	r3, [r3]
 800f664:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f66c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	461a      	mov	r2, r3
 800f674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f676:	643b      	str	r3, [r7, #64]	; 0x40
 800f678:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f67c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f67e:	e841 2300 	strex	r3, r2, [r1]
 800f682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1e6      	bne.n	800f658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	3308      	adds	r3, #8
 800f690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f692:	6a3b      	ldr	r3, [r7, #32]
 800f694:	e853 3f00 	ldrex	r3, [r3]
 800f698:	61fb      	str	r3, [r7, #28]
   return(result);
 800f69a:	69fa      	ldr	r2, [r7, #28]
 800f69c:	4b1e      	ldr	r3, [pc, #120]	; (800f718 <UART_EndRxTransfer+0xc8>)
 800f69e:	4013      	ands	r3, r2
 800f6a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f6ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6b2:	e841 2300 	strex	r3, r2, [r1]
 800f6b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1e5      	bne.n	800f68a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d118      	bne.n	800f6f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	e853 3f00 	ldrex	r3, [r3]
 800f6d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	f023 0310 	bic.w	r3, r3, #16
 800f6da:	647b      	str	r3, [r7, #68]	; 0x44
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6e4:	61bb      	str	r3, [r7, #24]
 800f6e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e8:	6979      	ldr	r1, [r7, #20]
 800f6ea:	69ba      	ldr	r2, [r7, #24]
 800f6ec:	e841 2300 	strex	r3, r2, [r1]
 800f6f0:	613b      	str	r3, [r7, #16]
   return(result);
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1e6      	bne.n	800f6c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2220      	movs	r2, #32
 800f6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f70c:	bf00      	nop
 800f70e:	3754      	adds	r7, #84	; 0x54
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr
 800f718:	effffffe 	.word	0xeffffffe

0800f71c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f728:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2200      	movs	r2, #0
 800f72e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f7ff f854 	bl	800e7e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f740:	bf00      	nop
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b088      	sub	sp, #32
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	e853 3f00 	ldrex	r3, [r3]
 800f75c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f764:	61fb      	str	r3, [r7, #28]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	461a      	mov	r2, r3
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	61bb      	str	r3, [r7, #24]
 800f770:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f772:	6979      	ldr	r1, [r7, #20]
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	e841 2300 	strex	r3, r2, [r1]
 800f77a:	613b      	str	r3, [r7, #16]
   return(result);
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1e6      	bne.n	800f750 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2220      	movs	r2, #32
 800f786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff f81f 	bl	800e7d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f796:	bf00      	nop
 800f798:	3720      	adds	r7, #32
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b083      	sub	sp, #12
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f7a6:	bf00      	nop
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr

0800f7b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f7b2:	b480      	push	{r7}
 800f7b4:	b083      	sub	sp, #12
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f7ba:	bf00      	nop
 800f7bc:	370c      	adds	r7, #12
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr

0800f7c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f7c6:	b480      	push	{r7}
 800f7c8:	b083      	sub	sp, #12
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f7ce:	bf00      	nop
 800f7d0:	370c      	adds	r7, #12
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr

0800f7da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f7da:	b480      	push	{r7}
 800f7dc:	b085      	sub	sp, #20
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d101      	bne.n	800f7f0 <HAL_UARTEx_DisableFifoMode+0x16>
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	e027      	b.n	800f840 <HAL_UARTEx_DisableFifoMode+0x66>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2224      	movs	r2, #36	; 0x24
 800f7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f022 0201 	bic.w	r2, r2, #1
 800f816:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f81e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2220      	movs	r2, #32
 800f832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f83e:	2300      	movs	r3, #0
}
 800f840:	4618      	mov	r0, r3
 800f842:	3714      	adds	r7, #20
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d101      	bne.n	800f864 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f860:	2302      	movs	r3, #2
 800f862:	e02d      	b.n	800f8c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2224      	movs	r2, #36	; 0x24
 800f870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f022 0201 	bic.w	r2, r2, #1
 800f88a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	430a      	orrs	r2, r1
 800f89e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f000 f84f 	bl	800f944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2220      	movs	r2, #32
 800f8b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f8be:	2300      	movs	r3, #0
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d101      	bne.n	800f8e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f8dc:	2302      	movs	r3, #2
 800f8de:	e02d      	b.n	800f93c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2224      	movs	r2, #36	; 0x24
 800f8ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f022 0201 	bic.w	r2, r2, #1
 800f906:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	430a      	orrs	r2, r1
 800f91a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 f811 	bl	800f944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2220      	movs	r2, #32
 800f92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f950:	2b00      	cmp	r3, #0
 800f952:	d108      	bne.n	800f966 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2201      	movs	r2, #1
 800f958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f964:	e031      	b.n	800f9ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f966:	2310      	movs	r3, #16
 800f968:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f96a:	2310      	movs	r3, #16
 800f96c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	0e5b      	lsrs	r3, r3, #25
 800f976:	b2db      	uxtb	r3, r3
 800f978:	f003 0307 	and.w	r3, r3, #7
 800f97c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	0f5b      	lsrs	r3, r3, #29
 800f986:	b2db      	uxtb	r3, r3
 800f988:	f003 0307 	and.w	r3, r3, #7
 800f98c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f98e:	7bbb      	ldrb	r3, [r7, #14]
 800f990:	7b3a      	ldrb	r2, [r7, #12]
 800f992:	4911      	ldr	r1, [pc, #68]	; (800f9d8 <UARTEx_SetNbDataToProcess+0x94>)
 800f994:	5c8a      	ldrb	r2, [r1, r2]
 800f996:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f99a:	7b3a      	ldrb	r2, [r7, #12]
 800f99c:	490f      	ldr	r1, [pc, #60]	; (800f9dc <UARTEx_SetNbDataToProcess+0x98>)
 800f99e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	7b7a      	ldrb	r2, [r7, #13]
 800f9b0:	4909      	ldr	r1, [pc, #36]	; (800f9d8 <UARTEx_SetNbDataToProcess+0x94>)
 800f9b2:	5c8a      	ldrb	r2, [r1, r2]
 800f9b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f9b8:	7b7a      	ldrb	r2, [r7, #13]
 800f9ba:	4908      	ldr	r1, [pc, #32]	; (800f9dc <UARTEx_SetNbDataToProcess+0x98>)
 800f9bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9be:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f9ca:	bf00      	nop
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	080122d0 	.word	0x080122d0
 800f9dc:	080122d8 	.word	0x080122d8

0800f9e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f9e0:	b084      	sub	sp, #16
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	f107 001c 	add.w	r0, r7, #28
 800f9ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d120      	bne.n	800fa3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	68da      	ldr	r2, [r3, #12]
 800fa08:	4b2a      	ldr	r3, [pc, #168]	; (800fab4 <USB_CoreInit+0xd4>)
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fa1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d105      	bne.n	800fa2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 faac 	bl	800ff8c <USB_CoreReset>
 800fa34:	4603      	mov	r3, r0
 800fa36:	73fb      	strb	r3, [r7, #15]
 800fa38:	e01a      	b.n	800fa70 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 faa0 	bl	800ff8c <USB_CoreReset>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fa50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d106      	bne.n	800fa64 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	639a      	str	r2, [r3, #56]	; 0x38
 800fa62:	e005      	b.n	800fa70 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d116      	bne.n	800faa4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa84:	4b0c      	ldr	r3, [pc, #48]	; (800fab8 <USB_CoreInit+0xd8>)
 800fa86:	4313      	orrs	r3, r2
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	f043 0206 	orr.w	r2, r3, #6
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	f043 0220 	orr.w	r2, r3, #32
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800faa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fab0:	b004      	add	sp, #16
 800fab2:	4770      	bx	lr
 800fab4:	ffbdffbf 	.word	0xffbdffbf
 800fab8:	03ee0000 	.word	0x03ee0000

0800fabc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	f023 0201 	bic.w	r2, r3, #1
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr

0800fade <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b084      	sub	sp, #16
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	460b      	mov	r3, r1
 800fae8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800faea:	2300      	movs	r3, #0
 800faec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d115      	bne.n	800fb2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fb0c:	2001      	movs	r0, #1
 800fb0e:	f7f7 fc6b 	bl	80073e8 <HAL_Delay>
      ms++;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3301      	adds	r3, #1
 800fb16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 fa29 	bl	800ff70 <USB_GetMode>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d01e      	beq.n	800fb62 <USB_SetCurrentMode+0x84>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2b31      	cmp	r3, #49	; 0x31
 800fb28:	d9f0      	bls.n	800fb0c <USB_SetCurrentMode+0x2e>
 800fb2a:	e01a      	b.n	800fb62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fb2c:	78fb      	ldrb	r3, [r7, #3]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d115      	bne.n	800fb5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fb3e:	2001      	movs	r0, #1
 800fb40:	f7f7 fc52 	bl	80073e8 <HAL_Delay>
      ms++;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3301      	adds	r3, #1
 800fb48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fa10 	bl	800ff70 <USB_GetMode>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d005      	beq.n	800fb62 <USB_SetCurrentMode+0x84>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2b31      	cmp	r3, #49	; 0x31
 800fb5a:	d9f0      	bls.n	800fb3e <USB_SetCurrentMode+0x60>
 800fb5c:	e001      	b.n	800fb62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e005      	b.n	800fb6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2b32      	cmp	r3, #50	; 0x32
 800fb66:	d101      	bne.n	800fb6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e000      	b.n	800fb6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
	...

0800fb78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb78:	b084      	sub	sp, #16
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b086      	sub	sp, #24
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fb86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fb92:	2300      	movs	r3, #0
 800fb94:	613b      	str	r3, [r7, #16]
 800fb96:	e009      	b.n	800fbac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	3340      	adds	r3, #64	; 0x40
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	4413      	add	r3, r2
 800fba2:	2200      	movs	r2, #0
 800fba4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	613b      	str	r3, [r7, #16]
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	2b0e      	cmp	r3, #14
 800fbb0:	d9f2      	bls.n	800fb98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d11c      	bne.n	800fbf2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbc6:	f043 0302 	orr.w	r3, r3, #2
 800fbca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	601a      	str	r2, [r3, #0]
 800fbf0:	e005      	b.n	800fbfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc04:	461a      	mov	r2, r3
 800fc06:	2300      	movs	r3, #0
 800fc08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc10:	4619      	mov	r1, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc18:	461a      	mov	r2, r3
 800fc1a:	680b      	ldr	r3, [r1, #0]
 800fc1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d10c      	bne.n	800fc3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d104      	bne.n	800fc34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 f965 	bl	800fefc <USB_SetDevSpeed>
 800fc32:	e008      	b.n	800fc46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc34:	2101      	movs	r1, #1
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 f960 	bl	800fefc <USB_SetDevSpeed>
 800fc3c:	e003      	b.n	800fc46 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fc3e:	2103      	movs	r1, #3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f95b 	bl	800fefc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fc46:	2110      	movs	r1, #16
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 f8f3 	bl	800fe34 <USB_FlushTxFifo>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d001      	beq.n	800fc58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fc54:	2301      	movs	r3, #1
 800fc56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 f91f 	bl	800fe9c <USB_FlushRxFifo>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d001      	beq.n	800fc68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fc64:	2301      	movs	r3, #1
 800fc66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc6e:	461a      	mov	r2, r3
 800fc70:	2300      	movs	r3, #0
 800fc72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc86:	461a      	mov	r2, r3
 800fc88:	2300      	movs	r3, #0
 800fc8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	613b      	str	r3, [r7, #16]
 800fc90:	e043      	b.n	800fd1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	015a      	lsls	r2, r3, #5
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	4413      	add	r3, r2
 800fc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fca8:	d118      	bne.n	800fcdc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d10a      	bne.n	800fcc6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	015a      	lsls	r2, r3, #5
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fcc2:	6013      	str	r3, [r2, #0]
 800fcc4:	e013      	b.n	800fcee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	015a      	lsls	r2, r3, #5
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	4413      	add	r3, r2
 800fcce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fcd8:	6013      	str	r3, [r2, #0]
 800fcda:	e008      	b.n	800fcee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	015a      	lsls	r2, r3, #5
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	4413      	add	r3, r2
 800fce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce8:	461a      	mov	r2, r3
 800fcea:	2300      	movs	r3, #0
 800fcec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	015a      	lsls	r2, r3, #5
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	015a      	lsls	r2, r3, #5
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	4413      	add	r3, r2
 800fd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fd12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	3301      	adds	r3, #1
 800fd18:	613b      	str	r3, [r7, #16]
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	693a      	ldr	r2, [r7, #16]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d3b7      	bcc.n	800fc92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd22:	2300      	movs	r3, #0
 800fd24:	613b      	str	r3, [r7, #16]
 800fd26:	e043      	b.n	800fdb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	015a      	lsls	r2, r3, #5
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd3e:	d118      	bne.n	800fd72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d10a      	bne.n	800fd5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	015a      	lsls	r2, r3, #5
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd52:	461a      	mov	r2, r3
 800fd54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	e013      	b.n	800fd84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	015a      	lsls	r2, r3, #5
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	4413      	add	r3, r2
 800fd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd68:	461a      	mov	r2, r3
 800fd6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fd6e:	6013      	str	r3, [r2, #0]
 800fd70:	e008      	b.n	800fd84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	015a      	lsls	r2, r3, #5
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	4413      	add	r3, r2
 800fd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7e:	461a      	mov	r2, r3
 800fd80:	2300      	movs	r3, #0
 800fd82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	015a      	lsls	r2, r3, #5
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd90:	461a      	mov	r2, r3
 800fd92:	2300      	movs	r3, #0
 800fd94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	015a      	lsls	r2, r3, #5
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda2:	461a      	mov	r2, r3
 800fda4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fda8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	3301      	adds	r3, #1
 800fdae:	613b      	str	r3, [r7, #16]
 800fdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb2:	693a      	ldr	r2, [r7, #16]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d3b7      	bcc.n	800fd28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	68fa      	ldr	r2, [r7, #12]
 800fdc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fdd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d105      	bne.n	800fdec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	699b      	ldr	r3, [r3, #24]
 800fde4:	f043 0210 	orr.w	r2, r3, #16
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	699a      	ldr	r2, [r3, #24]
 800fdf0:	4b0e      	ldr	r3, [pc, #56]	; (800fe2c <USB_DevInit+0x2b4>)
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d005      	beq.n	800fe0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	699b      	ldr	r3, [r3, #24]
 800fe02:	f043 0208 	orr.w	r2, r3, #8
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fe0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d105      	bne.n	800fe1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	699a      	ldr	r2, [r3, #24]
 800fe14:	4b06      	ldr	r3, [pc, #24]	; (800fe30 <USB_DevInit+0x2b8>)
 800fe16:	4313      	orrs	r3, r2
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3718      	adds	r7, #24
 800fe22:	46bd      	mov	sp, r7
 800fe24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe28:	b004      	add	sp, #16
 800fe2a:	4770      	bx	lr
 800fe2c:	803c3800 	.word	0x803c3800
 800fe30:	40000004 	.word	0x40000004

0800fe34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	3301      	adds	r3, #1
 800fe46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	4a13      	ldr	r2, [pc, #76]	; (800fe98 <USB_FlushTxFifo+0x64>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d901      	bls.n	800fe54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fe50:	2303      	movs	r3, #3
 800fe52:	e01b      	b.n	800fe8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	daf2      	bge.n	800fe42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	019b      	lsls	r3, r3, #6
 800fe64:	f043 0220 	orr.w	r2, r3, #32
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	4a08      	ldr	r2, [pc, #32]	; (800fe98 <USB_FlushTxFifo+0x64>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d901      	bls.n	800fe7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fe7a:	2303      	movs	r3, #3
 800fe7c:	e006      	b.n	800fe8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	f003 0320 	and.w	r3, r3, #32
 800fe86:	2b20      	cmp	r3, #32
 800fe88:	d0f0      	beq.n	800fe6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3714      	adds	r7, #20
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	00030d40 	.word	0x00030d40

0800fe9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fea4:	2300      	movs	r3, #0
 800fea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3301      	adds	r3, #1
 800feac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	4a11      	ldr	r2, [pc, #68]	; (800fef8 <USB_FlushRxFifo+0x5c>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d901      	bls.n	800feba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800feb6:	2303      	movs	r3, #3
 800feb8:	e018      	b.n	800feec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	daf2      	bge.n	800fea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fec2:	2300      	movs	r3, #0
 800fec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2210      	movs	r2, #16
 800feca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	3301      	adds	r3, #1
 800fed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	4a08      	ldr	r2, [pc, #32]	; (800fef8 <USB_FlushRxFifo+0x5c>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d901      	bls.n	800fede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800feda:	2303      	movs	r3, #3
 800fedc:	e006      	b.n	800feec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	691b      	ldr	r3, [r3, #16]
 800fee2:	f003 0310 	and.w	r3, r3, #16
 800fee6:	2b10      	cmp	r3, #16
 800fee8:	d0f0      	beq.n	800fecc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3714      	adds	r7, #20
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	00030d40 	.word	0x00030d40

0800fefc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	460b      	mov	r3, r1
 800ff06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	78fb      	ldrb	r3, [r7, #3]
 800ff16:	68f9      	ldr	r1, [r7, #12]
 800ff18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3714      	adds	r7, #20
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr

0800ff2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff2e:	b480      	push	{r7}
 800ff30:	b085      	sub	sp, #20
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff48:	f023 0303 	bic.w	r3, r3, #3
 800ff4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	68fa      	ldr	r2, [r7, #12]
 800ff58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff5c:	f043 0302 	orr.w	r3, r3, #2
 800ff60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3714      	adds	r7, #20
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	695b      	ldr	r3, [r3, #20]
 800ff7c:	f003 0301 	and.w	r3, r3, #1
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ff94:	2300      	movs	r3, #0
 800ff96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	4a13      	ldr	r2, [pc, #76]	; (800fff0 <USB_CoreReset+0x64>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d901      	bls.n	800ffaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ffa6:	2303      	movs	r3, #3
 800ffa8:	e01b      	b.n	800ffe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	691b      	ldr	r3, [r3, #16]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	daf2      	bge.n	800ff98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	691b      	ldr	r3, [r3, #16]
 800ffba:	f043 0201 	orr.w	r2, r3, #1
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	4a09      	ldr	r2, [pc, #36]	; (800fff0 <USB_CoreReset+0x64>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d901      	bls.n	800ffd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ffd0:	2303      	movs	r3, #3
 800ffd2:	e006      	b.n	800ffe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	f003 0301 	and.w	r3, r3, #1
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d0f0      	beq.n	800ffc2 <USB_CoreReset+0x36>

  return HAL_OK;
 800ffe0:	2300      	movs	r3, #0
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3714      	adds	r7, #20
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	00030d40 	.word	0x00030d40

0800fff4 <__errno>:
 800fff4:	4b01      	ldr	r3, [pc, #4]	; (800fffc <__errno+0x8>)
 800fff6:	6818      	ldr	r0, [r3, #0]
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	24000024 	.word	0x24000024

08010000 <__libc_init_array>:
 8010000:	b570      	push	{r4, r5, r6, lr}
 8010002:	4d0d      	ldr	r5, [pc, #52]	; (8010038 <__libc_init_array+0x38>)
 8010004:	4c0d      	ldr	r4, [pc, #52]	; (801003c <__libc_init_array+0x3c>)
 8010006:	1b64      	subs	r4, r4, r5
 8010008:	10a4      	asrs	r4, r4, #2
 801000a:	2600      	movs	r6, #0
 801000c:	42a6      	cmp	r6, r4
 801000e:	d109      	bne.n	8010024 <__libc_init_array+0x24>
 8010010:	4d0b      	ldr	r5, [pc, #44]	; (8010040 <__libc_init_array+0x40>)
 8010012:	4c0c      	ldr	r4, [pc, #48]	; (8010044 <__libc_init_array+0x44>)
 8010014:	f000 fc8e 	bl	8010934 <_init>
 8010018:	1b64      	subs	r4, r4, r5
 801001a:	10a4      	asrs	r4, r4, #2
 801001c:	2600      	movs	r6, #0
 801001e:	42a6      	cmp	r6, r4
 8010020:	d105      	bne.n	801002e <__libc_init_array+0x2e>
 8010022:	bd70      	pop	{r4, r5, r6, pc}
 8010024:	f855 3b04 	ldr.w	r3, [r5], #4
 8010028:	4798      	blx	r3
 801002a:	3601      	adds	r6, #1
 801002c:	e7ee      	b.n	801000c <__libc_init_array+0xc>
 801002e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010032:	4798      	blx	r3
 8010034:	3601      	adds	r6, #1
 8010036:	e7f2      	b.n	801001e <__libc_init_array+0x1e>
 8010038:	0801231c 	.word	0x0801231c
 801003c:	0801231c 	.word	0x0801231c
 8010040:	0801231c 	.word	0x0801231c
 8010044:	08012320 	.word	0x08012320

08010048 <memset>:
 8010048:	4402      	add	r2, r0
 801004a:	4603      	mov	r3, r0
 801004c:	4293      	cmp	r3, r2
 801004e:	d100      	bne.n	8010052 <memset+0xa>
 8010050:	4770      	bx	lr
 8010052:	f803 1b01 	strb.w	r1, [r3], #1
 8010056:	e7f9      	b.n	801004c <memset+0x4>

08010058 <_free_r>:
 8010058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801005a:	2900      	cmp	r1, #0
 801005c:	d044      	beq.n	80100e8 <_free_r+0x90>
 801005e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010062:	9001      	str	r0, [sp, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	f1a1 0404 	sub.w	r4, r1, #4
 801006a:	bfb8      	it	lt
 801006c:	18e4      	addlt	r4, r4, r3
 801006e:	f000 f903 	bl	8010278 <__malloc_lock>
 8010072:	4a1e      	ldr	r2, [pc, #120]	; (80100ec <_free_r+0x94>)
 8010074:	9801      	ldr	r0, [sp, #4]
 8010076:	6813      	ldr	r3, [r2, #0]
 8010078:	b933      	cbnz	r3, 8010088 <_free_r+0x30>
 801007a:	6063      	str	r3, [r4, #4]
 801007c:	6014      	str	r4, [r2, #0]
 801007e:	b003      	add	sp, #12
 8010080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010084:	f000 b8fe 	b.w	8010284 <__malloc_unlock>
 8010088:	42a3      	cmp	r3, r4
 801008a:	d908      	bls.n	801009e <_free_r+0x46>
 801008c:	6825      	ldr	r5, [r4, #0]
 801008e:	1961      	adds	r1, r4, r5
 8010090:	428b      	cmp	r3, r1
 8010092:	bf01      	itttt	eq
 8010094:	6819      	ldreq	r1, [r3, #0]
 8010096:	685b      	ldreq	r3, [r3, #4]
 8010098:	1949      	addeq	r1, r1, r5
 801009a:	6021      	streq	r1, [r4, #0]
 801009c:	e7ed      	b.n	801007a <_free_r+0x22>
 801009e:	461a      	mov	r2, r3
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	b10b      	cbz	r3, 80100a8 <_free_r+0x50>
 80100a4:	42a3      	cmp	r3, r4
 80100a6:	d9fa      	bls.n	801009e <_free_r+0x46>
 80100a8:	6811      	ldr	r1, [r2, #0]
 80100aa:	1855      	adds	r5, r2, r1
 80100ac:	42a5      	cmp	r5, r4
 80100ae:	d10b      	bne.n	80100c8 <_free_r+0x70>
 80100b0:	6824      	ldr	r4, [r4, #0]
 80100b2:	4421      	add	r1, r4
 80100b4:	1854      	adds	r4, r2, r1
 80100b6:	42a3      	cmp	r3, r4
 80100b8:	6011      	str	r1, [r2, #0]
 80100ba:	d1e0      	bne.n	801007e <_free_r+0x26>
 80100bc:	681c      	ldr	r4, [r3, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	6053      	str	r3, [r2, #4]
 80100c2:	4421      	add	r1, r4
 80100c4:	6011      	str	r1, [r2, #0]
 80100c6:	e7da      	b.n	801007e <_free_r+0x26>
 80100c8:	d902      	bls.n	80100d0 <_free_r+0x78>
 80100ca:	230c      	movs	r3, #12
 80100cc:	6003      	str	r3, [r0, #0]
 80100ce:	e7d6      	b.n	801007e <_free_r+0x26>
 80100d0:	6825      	ldr	r5, [r4, #0]
 80100d2:	1961      	adds	r1, r4, r5
 80100d4:	428b      	cmp	r3, r1
 80100d6:	bf04      	itt	eq
 80100d8:	6819      	ldreq	r1, [r3, #0]
 80100da:	685b      	ldreq	r3, [r3, #4]
 80100dc:	6063      	str	r3, [r4, #4]
 80100de:	bf04      	itt	eq
 80100e0:	1949      	addeq	r1, r1, r5
 80100e2:	6021      	streq	r1, [r4, #0]
 80100e4:	6054      	str	r4, [r2, #4]
 80100e6:	e7ca      	b.n	801007e <_free_r+0x26>
 80100e8:	b003      	add	sp, #12
 80100ea:	bd30      	pop	{r4, r5, pc}
 80100ec:	24000eb8 	.word	0x24000eb8

080100f0 <sbrk_aligned>:
 80100f0:	b570      	push	{r4, r5, r6, lr}
 80100f2:	4e0e      	ldr	r6, [pc, #56]	; (801012c <sbrk_aligned+0x3c>)
 80100f4:	460c      	mov	r4, r1
 80100f6:	6831      	ldr	r1, [r6, #0]
 80100f8:	4605      	mov	r5, r0
 80100fa:	b911      	cbnz	r1, 8010102 <sbrk_aligned+0x12>
 80100fc:	f000 f88c 	bl	8010218 <_sbrk_r>
 8010100:	6030      	str	r0, [r6, #0]
 8010102:	4621      	mov	r1, r4
 8010104:	4628      	mov	r0, r5
 8010106:	f000 f887 	bl	8010218 <_sbrk_r>
 801010a:	1c43      	adds	r3, r0, #1
 801010c:	d00a      	beq.n	8010124 <sbrk_aligned+0x34>
 801010e:	1cc4      	adds	r4, r0, #3
 8010110:	f024 0403 	bic.w	r4, r4, #3
 8010114:	42a0      	cmp	r0, r4
 8010116:	d007      	beq.n	8010128 <sbrk_aligned+0x38>
 8010118:	1a21      	subs	r1, r4, r0
 801011a:	4628      	mov	r0, r5
 801011c:	f000 f87c 	bl	8010218 <_sbrk_r>
 8010120:	3001      	adds	r0, #1
 8010122:	d101      	bne.n	8010128 <sbrk_aligned+0x38>
 8010124:	f04f 34ff 	mov.w	r4, #4294967295
 8010128:	4620      	mov	r0, r4
 801012a:	bd70      	pop	{r4, r5, r6, pc}
 801012c:	24000ebc 	.word	0x24000ebc

08010130 <_malloc_r>:
 8010130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010134:	1ccd      	adds	r5, r1, #3
 8010136:	f025 0503 	bic.w	r5, r5, #3
 801013a:	3508      	adds	r5, #8
 801013c:	2d0c      	cmp	r5, #12
 801013e:	bf38      	it	cc
 8010140:	250c      	movcc	r5, #12
 8010142:	2d00      	cmp	r5, #0
 8010144:	4607      	mov	r7, r0
 8010146:	db01      	blt.n	801014c <_malloc_r+0x1c>
 8010148:	42a9      	cmp	r1, r5
 801014a:	d905      	bls.n	8010158 <_malloc_r+0x28>
 801014c:	230c      	movs	r3, #12
 801014e:	603b      	str	r3, [r7, #0]
 8010150:	2600      	movs	r6, #0
 8010152:	4630      	mov	r0, r6
 8010154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010158:	4e2e      	ldr	r6, [pc, #184]	; (8010214 <_malloc_r+0xe4>)
 801015a:	f000 f88d 	bl	8010278 <__malloc_lock>
 801015e:	6833      	ldr	r3, [r6, #0]
 8010160:	461c      	mov	r4, r3
 8010162:	bb34      	cbnz	r4, 80101b2 <_malloc_r+0x82>
 8010164:	4629      	mov	r1, r5
 8010166:	4638      	mov	r0, r7
 8010168:	f7ff ffc2 	bl	80100f0 <sbrk_aligned>
 801016c:	1c43      	adds	r3, r0, #1
 801016e:	4604      	mov	r4, r0
 8010170:	d14d      	bne.n	801020e <_malloc_r+0xde>
 8010172:	6834      	ldr	r4, [r6, #0]
 8010174:	4626      	mov	r6, r4
 8010176:	2e00      	cmp	r6, #0
 8010178:	d140      	bne.n	80101fc <_malloc_r+0xcc>
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	4631      	mov	r1, r6
 801017e:	4638      	mov	r0, r7
 8010180:	eb04 0803 	add.w	r8, r4, r3
 8010184:	f000 f848 	bl	8010218 <_sbrk_r>
 8010188:	4580      	cmp	r8, r0
 801018a:	d13a      	bne.n	8010202 <_malloc_r+0xd2>
 801018c:	6821      	ldr	r1, [r4, #0]
 801018e:	3503      	adds	r5, #3
 8010190:	1a6d      	subs	r5, r5, r1
 8010192:	f025 0503 	bic.w	r5, r5, #3
 8010196:	3508      	adds	r5, #8
 8010198:	2d0c      	cmp	r5, #12
 801019a:	bf38      	it	cc
 801019c:	250c      	movcc	r5, #12
 801019e:	4629      	mov	r1, r5
 80101a0:	4638      	mov	r0, r7
 80101a2:	f7ff ffa5 	bl	80100f0 <sbrk_aligned>
 80101a6:	3001      	adds	r0, #1
 80101a8:	d02b      	beq.n	8010202 <_malloc_r+0xd2>
 80101aa:	6823      	ldr	r3, [r4, #0]
 80101ac:	442b      	add	r3, r5
 80101ae:	6023      	str	r3, [r4, #0]
 80101b0:	e00e      	b.n	80101d0 <_malloc_r+0xa0>
 80101b2:	6822      	ldr	r2, [r4, #0]
 80101b4:	1b52      	subs	r2, r2, r5
 80101b6:	d41e      	bmi.n	80101f6 <_malloc_r+0xc6>
 80101b8:	2a0b      	cmp	r2, #11
 80101ba:	d916      	bls.n	80101ea <_malloc_r+0xba>
 80101bc:	1961      	adds	r1, r4, r5
 80101be:	42a3      	cmp	r3, r4
 80101c0:	6025      	str	r5, [r4, #0]
 80101c2:	bf18      	it	ne
 80101c4:	6059      	strne	r1, [r3, #4]
 80101c6:	6863      	ldr	r3, [r4, #4]
 80101c8:	bf08      	it	eq
 80101ca:	6031      	streq	r1, [r6, #0]
 80101cc:	5162      	str	r2, [r4, r5]
 80101ce:	604b      	str	r3, [r1, #4]
 80101d0:	4638      	mov	r0, r7
 80101d2:	f104 060b 	add.w	r6, r4, #11
 80101d6:	f000 f855 	bl	8010284 <__malloc_unlock>
 80101da:	f026 0607 	bic.w	r6, r6, #7
 80101de:	1d23      	adds	r3, r4, #4
 80101e0:	1af2      	subs	r2, r6, r3
 80101e2:	d0b6      	beq.n	8010152 <_malloc_r+0x22>
 80101e4:	1b9b      	subs	r3, r3, r6
 80101e6:	50a3      	str	r3, [r4, r2]
 80101e8:	e7b3      	b.n	8010152 <_malloc_r+0x22>
 80101ea:	6862      	ldr	r2, [r4, #4]
 80101ec:	42a3      	cmp	r3, r4
 80101ee:	bf0c      	ite	eq
 80101f0:	6032      	streq	r2, [r6, #0]
 80101f2:	605a      	strne	r2, [r3, #4]
 80101f4:	e7ec      	b.n	80101d0 <_malloc_r+0xa0>
 80101f6:	4623      	mov	r3, r4
 80101f8:	6864      	ldr	r4, [r4, #4]
 80101fa:	e7b2      	b.n	8010162 <_malloc_r+0x32>
 80101fc:	4634      	mov	r4, r6
 80101fe:	6876      	ldr	r6, [r6, #4]
 8010200:	e7b9      	b.n	8010176 <_malloc_r+0x46>
 8010202:	230c      	movs	r3, #12
 8010204:	603b      	str	r3, [r7, #0]
 8010206:	4638      	mov	r0, r7
 8010208:	f000 f83c 	bl	8010284 <__malloc_unlock>
 801020c:	e7a1      	b.n	8010152 <_malloc_r+0x22>
 801020e:	6025      	str	r5, [r4, #0]
 8010210:	e7de      	b.n	80101d0 <_malloc_r+0xa0>
 8010212:	bf00      	nop
 8010214:	24000eb8 	.word	0x24000eb8

08010218 <_sbrk_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d06      	ldr	r5, [pc, #24]	; (8010234 <_sbrk_r+0x1c>)
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	602b      	str	r3, [r5, #0]
 8010224:	f7f6 ffee 	bl	8007204 <_sbrk>
 8010228:	1c43      	adds	r3, r0, #1
 801022a:	d102      	bne.n	8010232 <_sbrk_r+0x1a>
 801022c:	682b      	ldr	r3, [r5, #0]
 801022e:	b103      	cbz	r3, 8010232 <_sbrk_r+0x1a>
 8010230:	6023      	str	r3, [r4, #0]
 8010232:	bd38      	pop	{r3, r4, r5, pc}
 8010234:	24000ec0 	.word	0x24000ec0

08010238 <siprintf>:
 8010238:	b40e      	push	{r1, r2, r3}
 801023a:	b500      	push	{lr}
 801023c:	b09c      	sub	sp, #112	; 0x70
 801023e:	ab1d      	add	r3, sp, #116	; 0x74
 8010240:	9002      	str	r0, [sp, #8]
 8010242:	9006      	str	r0, [sp, #24]
 8010244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010248:	4809      	ldr	r0, [pc, #36]	; (8010270 <siprintf+0x38>)
 801024a:	9107      	str	r1, [sp, #28]
 801024c:	9104      	str	r1, [sp, #16]
 801024e:	4909      	ldr	r1, [pc, #36]	; (8010274 <siprintf+0x3c>)
 8010250:	f853 2b04 	ldr.w	r2, [r3], #4
 8010254:	9105      	str	r1, [sp, #20]
 8010256:	6800      	ldr	r0, [r0, #0]
 8010258:	9301      	str	r3, [sp, #4]
 801025a:	a902      	add	r1, sp, #8
 801025c:	f000 f874 	bl	8010348 <_svfiprintf_r>
 8010260:	9b02      	ldr	r3, [sp, #8]
 8010262:	2200      	movs	r2, #0
 8010264:	701a      	strb	r2, [r3, #0]
 8010266:	b01c      	add	sp, #112	; 0x70
 8010268:	f85d eb04 	ldr.w	lr, [sp], #4
 801026c:	b003      	add	sp, #12
 801026e:	4770      	bx	lr
 8010270:	24000024 	.word	0x24000024
 8010274:	ffff0208 	.word	0xffff0208

08010278 <__malloc_lock>:
 8010278:	4801      	ldr	r0, [pc, #4]	; (8010280 <__malloc_lock+0x8>)
 801027a:	f000 baf9 	b.w	8010870 <__retarget_lock_acquire_recursive>
 801027e:	bf00      	nop
 8010280:	24000ec4 	.word	0x24000ec4

08010284 <__malloc_unlock>:
 8010284:	4801      	ldr	r0, [pc, #4]	; (801028c <__malloc_unlock+0x8>)
 8010286:	f000 baf4 	b.w	8010872 <__retarget_lock_release_recursive>
 801028a:	bf00      	nop
 801028c:	24000ec4 	.word	0x24000ec4

08010290 <__ssputs_r>:
 8010290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010294:	688e      	ldr	r6, [r1, #8]
 8010296:	429e      	cmp	r6, r3
 8010298:	4682      	mov	sl, r0
 801029a:	460c      	mov	r4, r1
 801029c:	4690      	mov	r8, r2
 801029e:	461f      	mov	r7, r3
 80102a0:	d838      	bhi.n	8010314 <__ssputs_r+0x84>
 80102a2:	898a      	ldrh	r2, [r1, #12]
 80102a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102a8:	d032      	beq.n	8010310 <__ssputs_r+0x80>
 80102aa:	6825      	ldr	r5, [r4, #0]
 80102ac:	6909      	ldr	r1, [r1, #16]
 80102ae:	eba5 0901 	sub.w	r9, r5, r1
 80102b2:	6965      	ldr	r5, [r4, #20]
 80102b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102bc:	3301      	adds	r3, #1
 80102be:	444b      	add	r3, r9
 80102c0:	106d      	asrs	r5, r5, #1
 80102c2:	429d      	cmp	r5, r3
 80102c4:	bf38      	it	cc
 80102c6:	461d      	movcc	r5, r3
 80102c8:	0553      	lsls	r3, r2, #21
 80102ca:	d531      	bpl.n	8010330 <__ssputs_r+0xa0>
 80102cc:	4629      	mov	r1, r5
 80102ce:	f7ff ff2f 	bl	8010130 <_malloc_r>
 80102d2:	4606      	mov	r6, r0
 80102d4:	b950      	cbnz	r0, 80102ec <__ssputs_r+0x5c>
 80102d6:	230c      	movs	r3, #12
 80102d8:	f8ca 3000 	str.w	r3, [sl]
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102e2:	81a3      	strh	r3, [r4, #12]
 80102e4:	f04f 30ff 	mov.w	r0, #4294967295
 80102e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ec:	6921      	ldr	r1, [r4, #16]
 80102ee:	464a      	mov	r2, r9
 80102f0:	f000 fac0 	bl	8010874 <memcpy>
 80102f4:	89a3      	ldrh	r3, [r4, #12]
 80102f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80102fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102fe:	81a3      	strh	r3, [r4, #12]
 8010300:	6126      	str	r6, [r4, #16]
 8010302:	6165      	str	r5, [r4, #20]
 8010304:	444e      	add	r6, r9
 8010306:	eba5 0509 	sub.w	r5, r5, r9
 801030a:	6026      	str	r6, [r4, #0]
 801030c:	60a5      	str	r5, [r4, #8]
 801030e:	463e      	mov	r6, r7
 8010310:	42be      	cmp	r6, r7
 8010312:	d900      	bls.n	8010316 <__ssputs_r+0x86>
 8010314:	463e      	mov	r6, r7
 8010316:	6820      	ldr	r0, [r4, #0]
 8010318:	4632      	mov	r2, r6
 801031a:	4641      	mov	r1, r8
 801031c:	f000 fab8 	bl	8010890 <memmove>
 8010320:	68a3      	ldr	r3, [r4, #8]
 8010322:	1b9b      	subs	r3, r3, r6
 8010324:	60a3      	str	r3, [r4, #8]
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	4433      	add	r3, r6
 801032a:	6023      	str	r3, [r4, #0]
 801032c:	2000      	movs	r0, #0
 801032e:	e7db      	b.n	80102e8 <__ssputs_r+0x58>
 8010330:	462a      	mov	r2, r5
 8010332:	f000 fac7 	bl	80108c4 <_realloc_r>
 8010336:	4606      	mov	r6, r0
 8010338:	2800      	cmp	r0, #0
 801033a:	d1e1      	bne.n	8010300 <__ssputs_r+0x70>
 801033c:	6921      	ldr	r1, [r4, #16]
 801033e:	4650      	mov	r0, sl
 8010340:	f7ff fe8a 	bl	8010058 <_free_r>
 8010344:	e7c7      	b.n	80102d6 <__ssputs_r+0x46>
	...

08010348 <_svfiprintf_r>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	4698      	mov	r8, r3
 801034e:	898b      	ldrh	r3, [r1, #12]
 8010350:	061b      	lsls	r3, r3, #24
 8010352:	b09d      	sub	sp, #116	; 0x74
 8010354:	4607      	mov	r7, r0
 8010356:	460d      	mov	r5, r1
 8010358:	4614      	mov	r4, r2
 801035a:	d50e      	bpl.n	801037a <_svfiprintf_r+0x32>
 801035c:	690b      	ldr	r3, [r1, #16]
 801035e:	b963      	cbnz	r3, 801037a <_svfiprintf_r+0x32>
 8010360:	2140      	movs	r1, #64	; 0x40
 8010362:	f7ff fee5 	bl	8010130 <_malloc_r>
 8010366:	6028      	str	r0, [r5, #0]
 8010368:	6128      	str	r0, [r5, #16]
 801036a:	b920      	cbnz	r0, 8010376 <_svfiprintf_r+0x2e>
 801036c:	230c      	movs	r3, #12
 801036e:	603b      	str	r3, [r7, #0]
 8010370:	f04f 30ff 	mov.w	r0, #4294967295
 8010374:	e0d1      	b.n	801051a <_svfiprintf_r+0x1d2>
 8010376:	2340      	movs	r3, #64	; 0x40
 8010378:	616b      	str	r3, [r5, #20]
 801037a:	2300      	movs	r3, #0
 801037c:	9309      	str	r3, [sp, #36]	; 0x24
 801037e:	2320      	movs	r3, #32
 8010380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010384:	f8cd 800c 	str.w	r8, [sp, #12]
 8010388:	2330      	movs	r3, #48	; 0x30
 801038a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010534 <_svfiprintf_r+0x1ec>
 801038e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010392:	f04f 0901 	mov.w	r9, #1
 8010396:	4623      	mov	r3, r4
 8010398:	469a      	mov	sl, r3
 801039a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801039e:	b10a      	cbz	r2, 80103a4 <_svfiprintf_r+0x5c>
 80103a0:	2a25      	cmp	r2, #37	; 0x25
 80103a2:	d1f9      	bne.n	8010398 <_svfiprintf_r+0x50>
 80103a4:	ebba 0b04 	subs.w	fp, sl, r4
 80103a8:	d00b      	beq.n	80103c2 <_svfiprintf_r+0x7a>
 80103aa:	465b      	mov	r3, fp
 80103ac:	4622      	mov	r2, r4
 80103ae:	4629      	mov	r1, r5
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7ff ff6d 	bl	8010290 <__ssputs_r>
 80103b6:	3001      	adds	r0, #1
 80103b8:	f000 80aa 	beq.w	8010510 <_svfiprintf_r+0x1c8>
 80103bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103be:	445a      	add	r2, fp
 80103c0:	9209      	str	r2, [sp, #36]	; 0x24
 80103c2:	f89a 3000 	ldrb.w	r3, [sl]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f000 80a2 	beq.w	8010510 <_svfiprintf_r+0x1c8>
 80103cc:	2300      	movs	r3, #0
 80103ce:	f04f 32ff 	mov.w	r2, #4294967295
 80103d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103d6:	f10a 0a01 	add.w	sl, sl, #1
 80103da:	9304      	str	r3, [sp, #16]
 80103dc:	9307      	str	r3, [sp, #28]
 80103de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103e2:	931a      	str	r3, [sp, #104]	; 0x68
 80103e4:	4654      	mov	r4, sl
 80103e6:	2205      	movs	r2, #5
 80103e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ec:	4851      	ldr	r0, [pc, #324]	; (8010534 <_svfiprintf_r+0x1ec>)
 80103ee:	f7ef ff77 	bl	80002e0 <memchr>
 80103f2:	9a04      	ldr	r2, [sp, #16]
 80103f4:	b9d8      	cbnz	r0, 801042e <_svfiprintf_r+0xe6>
 80103f6:	06d0      	lsls	r0, r2, #27
 80103f8:	bf44      	itt	mi
 80103fa:	2320      	movmi	r3, #32
 80103fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010400:	0711      	lsls	r1, r2, #28
 8010402:	bf44      	itt	mi
 8010404:	232b      	movmi	r3, #43	; 0x2b
 8010406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801040a:	f89a 3000 	ldrb.w	r3, [sl]
 801040e:	2b2a      	cmp	r3, #42	; 0x2a
 8010410:	d015      	beq.n	801043e <_svfiprintf_r+0xf6>
 8010412:	9a07      	ldr	r2, [sp, #28]
 8010414:	4654      	mov	r4, sl
 8010416:	2000      	movs	r0, #0
 8010418:	f04f 0c0a 	mov.w	ip, #10
 801041c:	4621      	mov	r1, r4
 801041e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010422:	3b30      	subs	r3, #48	; 0x30
 8010424:	2b09      	cmp	r3, #9
 8010426:	d94e      	bls.n	80104c6 <_svfiprintf_r+0x17e>
 8010428:	b1b0      	cbz	r0, 8010458 <_svfiprintf_r+0x110>
 801042a:	9207      	str	r2, [sp, #28]
 801042c:	e014      	b.n	8010458 <_svfiprintf_r+0x110>
 801042e:	eba0 0308 	sub.w	r3, r0, r8
 8010432:	fa09 f303 	lsl.w	r3, r9, r3
 8010436:	4313      	orrs	r3, r2
 8010438:	9304      	str	r3, [sp, #16]
 801043a:	46a2      	mov	sl, r4
 801043c:	e7d2      	b.n	80103e4 <_svfiprintf_r+0x9c>
 801043e:	9b03      	ldr	r3, [sp, #12]
 8010440:	1d19      	adds	r1, r3, #4
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	9103      	str	r1, [sp, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	bfbb      	ittet	lt
 801044a:	425b      	neglt	r3, r3
 801044c:	f042 0202 	orrlt.w	r2, r2, #2
 8010450:	9307      	strge	r3, [sp, #28]
 8010452:	9307      	strlt	r3, [sp, #28]
 8010454:	bfb8      	it	lt
 8010456:	9204      	strlt	r2, [sp, #16]
 8010458:	7823      	ldrb	r3, [r4, #0]
 801045a:	2b2e      	cmp	r3, #46	; 0x2e
 801045c:	d10c      	bne.n	8010478 <_svfiprintf_r+0x130>
 801045e:	7863      	ldrb	r3, [r4, #1]
 8010460:	2b2a      	cmp	r3, #42	; 0x2a
 8010462:	d135      	bne.n	80104d0 <_svfiprintf_r+0x188>
 8010464:	9b03      	ldr	r3, [sp, #12]
 8010466:	1d1a      	adds	r2, r3, #4
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	9203      	str	r2, [sp, #12]
 801046c:	2b00      	cmp	r3, #0
 801046e:	bfb8      	it	lt
 8010470:	f04f 33ff 	movlt.w	r3, #4294967295
 8010474:	3402      	adds	r4, #2
 8010476:	9305      	str	r3, [sp, #20]
 8010478:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010544 <_svfiprintf_r+0x1fc>
 801047c:	7821      	ldrb	r1, [r4, #0]
 801047e:	2203      	movs	r2, #3
 8010480:	4650      	mov	r0, sl
 8010482:	f7ef ff2d 	bl	80002e0 <memchr>
 8010486:	b140      	cbz	r0, 801049a <_svfiprintf_r+0x152>
 8010488:	2340      	movs	r3, #64	; 0x40
 801048a:	eba0 000a 	sub.w	r0, r0, sl
 801048e:	fa03 f000 	lsl.w	r0, r3, r0
 8010492:	9b04      	ldr	r3, [sp, #16]
 8010494:	4303      	orrs	r3, r0
 8010496:	3401      	adds	r4, #1
 8010498:	9304      	str	r3, [sp, #16]
 801049a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801049e:	4826      	ldr	r0, [pc, #152]	; (8010538 <_svfiprintf_r+0x1f0>)
 80104a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104a4:	2206      	movs	r2, #6
 80104a6:	f7ef ff1b 	bl	80002e0 <memchr>
 80104aa:	2800      	cmp	r0, #0
 80104ac:	d038      	beq.n	8010520 <_svfiprintf_r+0x1d8>
 80104ae:	4b23      	ldr	r3, [pc, #140]	; (801053c <_svfiprintf_r+0x1f4>)
 80104b0:	bb1b      	cbnz	r3, 80104fa <_svfiprintf_r+0x1b2>
 80104b2:	9b03      	ldr	r3, [sp, #12]
 80104b4:	3307      	adds	r3, #7
 80104b6:	f023 0307 	bic.w	r3, r3, #7
 80104ba:	3308      	adds	r3, #8
 80104bc:	9303      	str	r3, [sp, #12]
 80104be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c0:	4433      	add	r3, r6
 80104c2:	9309      	str	r3, [sp, #36]	; 0x24
 80104c4:	e767      	b.n	8010396 <_svfiprintf_r+0x4e>
 80104c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80104ca:	460c      	mov	r4, r1
 80104cc:	2001      	movs	r0, #1
 80104ce:	e7a5      	b.n	801041c <_svfiprintf_r+0xd4>
 80104d0:	2300      	movs	r3, #0
 80104d2:	3401      	adds	r4, #1
 80104d4:	9305      	str	r3, [sp, #20]
 80104d6:	4619      	mov	r1, r3
 80104d8:	f04f 0c0a 	mov.w	ip, #10
 80104dc:	4620      	mov	r0, r4
 80104de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104e2:	3a30      	subs	r2, #48	; 0x30
 80104e4:	2a09      	cmp	r2, #9
 80104e6:	d903      	bls.n	80104f0 <_svfiprintf_r+0x1a8>
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0c5      	beq.n	8010478 <_svfiprintf_r+0x130>
 80104ec:	9105      	str	r1, [sp, #20]
 80104ee:	e7c3      	b.n	8010478 <_svfiprintf_r+0x130>
 80104f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80104f4:	4604      	mov	r4, r0
 80104f6:	2301      	movs	r3, #1
 80104f8:	e7f0      	b.n	80104dc <_svfiprintf_r+0x194>
 80104fa:	ab03      	add	r3, sp, #12
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	462a      	mov	r2, r5
 8010500:	4b0f      	ldr	r3, [pc, #60]	; (8010540 <_svfiprintf_r+0x1f8>)
 8010502:	a904      	add	r1, sp, #16
 8010504:	4638      	mov	r0, r7
 8010506:	f3af 8000 	nop.w
 801050a:	1c42      	adds	r2, r0, #1
 801050c:	4606      	mov	r6, r0
 801050e:	d1d6      	bne.n	80104be <_svfiprintf_r+0x176>
 8010510:	89ab      	ldrh	r3, [r5, #12]
 8010512:	065b      	lsls	r3, r3, #25
 8010514:	f53f af2c 	bmi.w	8010370 <_svfiprintf_r+0x28>
 8010518:	9809      	ldr	r0, [sp, #36]	; 0x24
 801051a:	b01d      	add	sp, #116	; 0x74
 801051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010520:	ab03      	add	r3, sp, #12
 8010522:	9300      	str	r3, [sp, #0]
 8010524:	462a      	mov	r2, r5
 8010526:	4b06      	ldr	r3, [pc, #24]	; (8010540 <_svfiprintf_r+0x1f8>)
 8010528:	a904      	add	r1, sp, #16
 801052a:	4638      	mov	r0, r7
 801052c:	f000 f87a 	bl	8010624 <_printf_i>
 8010530:	e7eb      	b.n	801050a <_svfiprintf_r+0x1c2>
 8010532:	bf00      	nop
 8010534:	080122e0 	.word	0x080122e0
 8010538:	080122ea 	.word	0x080122ea
 801053c:	00000000 	.word	0x00000000
 8010540:	08010291 	.word	0x08010291
 8010544:	080122e6 	.word	0x080122e6

08010548 <_printf_common>:
 8010548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801054c:	4616      	mov	r6, r2
 801054e:	4699      	mov	r9, r3
 8010550:	688a      	ldr	r2, [r1, #8]
 8010552:	690b      	ldr	r3, [r1, #16]
 8010554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010558:	4293      	cmp	r3, r2
 801055a:	bfb8      	it	lt
 801055c:	4613      	movlt	r3, r2
 801055e:	6033      	str	r3, [r6, #0]
 8010560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010564:	4607      	mov	r7, r0
 8010566:	460c      	mov	r4, r1
 8010568:	b10a      	cbz	r2, 801056e <_printf_common+0x26>
 801056a:	3301      	adds	r3, #1
 801056c:	6033      	str	r3, [r6, #0]
 801056e:	6823      	ldr	r3, [r4, #0]
 8010570:	0699      	lsls	r1, r3, #26
 8010572:	bf42      	ittt	mi
 8010574:	6833      	ldrmi	r3, [r6, #0]
 8010576:	3302      	addmi	r3, #2
 8010578:	6033      	strmi	r3, [r6, #0]
 801057a:	6825      	ldr	r5, [r4, #0]
 801057c:	f015 0506 	ands.w	r5, r5, #6
 8010580:	d106      	bne.n	8010590 <_printf_common+0x48>
 8010582:	f104 0a19 	add.w	sl, r4, #25
 8010586:	68e3      	ldr	r3, [r4, #12]
 8010588:	6832      	ldr	r2, [r6, #0]
 801058a:	1a9b      	subs	r3, r3, r2
 801058c:	42ab      	cmp	r3, r5
 801058e:	dc26      	bgt.n	80105de <_printf_common+0x96>
 8010590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010594:	1e13      	subs	r3, r2, #0
 8010596:	6822      	ldr	r2, [r4, #0]
 8010598:	bf18      	it	ne
 801059a:	2301      	movne	r3, #1
 801059c:	0692      	lsls	r2, r2, #26
 801059e:	d42b      	bmi.n	80105f8 <_printf_common+0xb0>
 80105a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105a4:	4649      	mov	r1, r9
 80105a6:	4638      	mov	r0, r7
 80105a8:	47c0      	blx	r8
 80105aa:	3001      	adds	r0, #1
 80105ac:	d01e      	beq.n	80105ec <_printf_common+0xa4>
 80105ae:	6823      	ldr	r3, [r4, #0]
 80105b0:	68e5      	ldr	r5, [r4, #12]
 80105b2:	6832      	ldr	r2, [r6, #0]
 80105b4:	f003 0306 	and.w	r3, r3, #6
 80105b8:	2b04      	cmp	r3, #4
 80105ba:	bf08      	it	eq
 80105bc:	1aad      	subeq	r5, r5, r2
 80105be:	68a3      	ldr	r3, [r4, #8]
 80105c0:	6922      	ldr	r2, [r4, #16]
 80105c2:	bf0c      	ite	eq
 80105c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105c8:	2500      	movne	r5, #0
 80105ca:	4293      	cmp	r3, r2
 80105cc:	bfc4      	itt	gt
 80105ce:	1a9b      	subgt	r3, r3, r2
 80105d0:	18ed      	addgt	r5, r5, r3
 80105d2:	2600      	movs	r6, #0
 80105d4:	341a      	adds	r4, #26
 80105d6:	42b5      	cmp	r5, r6
 80105d8:	d11a      	bne.n	8010610 <_printf_common+0xc8>
 80105da:	2000      	movs	r0, #0
 80105dc:	e008      	b.n	80105f0 <_printf_common+0xa8>
 80105de:	2301      	movs	r3, #1
 80105e0:	4652      	mov	r2, sl
 80105e2:	4649      	mov	r1, r9
 80105e4:	4638      	mov	r0, r7
 80105e6:	47c0      	blx	r8
 80105e8:	3001      	adds	r0, #1
 80105ea:	d103      	bne.n	80105f4 <_printf_common+0xac>
 80105ec:	f04f 30ff 	mov.w	r0, #4294967295
 80105f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f4:	3501      	adds	r5, #1
 80105f6:	e7c6      	b.n	8010586 <_printf_common+0x3e>
 80105f8:	18e1      	adds	r1, r4, r3
 80105fa:	1c5a      	adds	r2, r3, #1
 80105fc:	2030      	movs	r0, #48	; 0x30
 80105fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010602:	4422      	add	r2, r4
 8010604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801060c:	3302      	adds	r3, #2
 801060e:	e7c7      	b.n	80105a0 <_printf_common+0x58>
 8010610:	2301      	movs	r3, #1
 8010612:	4622      	mov	r2, r4
 8010614:	4649      	mov	r1, r9
 8010616:	4638      	mov	r0, r7
 8010618:	47c0      	blx	r8
 801061a:	3001      	adds	r0, #1
 801061c:	d0e6      	beq.n	80105ec <_printf_common+0xa4>
 801061e:	3601      	adds	r6, #1
 8010620:	e7d9      	b.n	80105d6 <_printf_common+0x8e>
	...

08010624 <_printf_i>:
 8010624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010628:	7e0f      	ldrb	r7, [r1, #24]
 801062a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801062c:	2f78      	cmp	r7, #120	; 0x78
 801062e:	4691      	mov	r9, r2
 8010630:	4680      	mov	r8, r0
 8010632:	460c      	mov	r4, r1
 8010634:	469a      	mov	sl, r3
 8010636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801063a:	d807      	bhi.n	801064c <_printf_i+0x28>
 801063c:	2f62      	cmp	r7, #98	; 0x62
 801063e:	d80a      	bhi.n	8010656 <_printf_i+0x32>
 8010640:	2f00      	cmp	r7, #0
 8010642:	f000 80d8 	beq.w	80107f6 <_printf_i+0x1d2>
 8010646:	2f58      	cmp	r7, #88	; 0x58
 8010648:	f000 80a3 	beq.w	8010792 <_printf_i+0x16e>
 801064c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010654:	e03a      	b.n	80106cc <_printf_i+0xa8>
 8010656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801065a:	2b15      	cmp	r3, #21
 801065c:	d8f6      	bhi.n	801064c <_printf_i+0x28>
 801065e:	a101      	add	r1, pc, #4	; (adr r1, 8010664 <_printf_i+0x40>)
 8010660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010664:	080106bd 	.word	0x080106bd
 8010668:	080106d1 	.word	0x080106d1
 801066c:	0801064d 	.word	0x0801064d
 8010670:	0801064d 	.word	0x0801064d
 8010674:	0801064d 	.word	0x0801064d
 8010678:	0801064d 	.word	0x0801064d
 801067c:	080106d1 	.word	0x080106d1
 8010680:	0801064d 	.word	0x0801064d
 8010684:	0801064d 	.word	0x0801064d
 8010688:	0801064d 	.word	0x0801064d
 801068c:	0801064d 	.word	0x0801064d
 8010690:	080107dd 	.word	0x080107dd
 8010694:	08010701 	.word	0x08010701
 8010698:	080107bf 	.word	0x080107bf
 801069c:	0801064d 	.word	0x0801064d
 80106a0:	0801064d 	.word	0x0801064d
 80106a4:	080107ff 	.word	0x080107ff
 80106a8:	0801064d 	.word	0x0801064d
 80106ac:	08010701 	.word	0x08010701
 80106b0:	0801064d 	.word	0x0801064d
 80106b4:	0801064d 	.word	0x0801064d
 80106b8:	080107c7 	.word	0x080107c7
 80106bc:	682b      	ldr	r3, [r5, #0]
 80106be:	1d1a      	adds	r2, r3, #4
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	602a      	str	r2, [r5, #0]
 80106c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106cc:	2301      	movs	r3, #1
 80106ce:	e0a3      	b.n	8010818 <_printf_i+0x1f4>
 80106d0:	6820      	ldr	r0, [r4, #0]
 80106d2:	6829      	ldr	r1, [r5, #0]
 80106d4:	0606      	lsls	r6, r0, #24
 80106d6:	f101 0304 	add.w	r3, r1, #4
 80106da:	d50a      	bpl.n	80106f2 <_printf_i+0xce>
 80106dc:	680e      	ldr	r6, [r1, #0]
 80106de:	602b      	str	r3, [r5, #0]
 80106e0:	2e00      	cmp	r6, #0
 80106e2:	da03      	bge.n	80106ec <_printf_i+0xc8>
 80106e4:	232d      	movs	r3, #45	; 0x2d
 80106e6:	4276      	negs	r6, r6
 80106e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106ec:	485e      	ldr	r0, [pc, #376]	; (8010868 <_printf_i+0x244>)
 80106ee:	230a      	movs	r3, #10
 80106f0:	e019      	b.n	8010726 <_printf_i+0x102>
 80106f2:	680e      	ldr	r6, [r1, #0]
 80106f4:	602b      	str	r3, [r5, #0]
 80106f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80106fa:	bf18      	it	ne
 80106fc:	b236      	sxthne	r6, r6
 80106fe:	e7ef      	b.n	80106e0 <_printf_i+0xbc>
 8010700:	682b      	ldr	r3, [r5, #0]
 8010702:	6820      	ldr	r0, [r4, #0]
 8010704:	1d19      	adds	r1, r3, #4
 8010706:	6029      	str	r1, [r5, #0]
 8010708:	0601      	lsls	r1, r0, #24
 801070a:	d501      	bpl.n	8010710 <_printf_i+0xec>
 801070c:	681e      	ldr	r6, [r3, #0]
 801070e:	e002      	b.n	8010716 <_printf_i+0xf2>
 8010710:	0646      	lsls	r6, r0, #25
 8010712:	d5fb      	bpl.n	801070c <_printf_i+0xe8>
 8010714:	881e      	ldrh	r6, [r3, #0]
 8010716:	4854      	ldr	r0, [pc, #336]	; (8010868 <_printf_i+0x244>)
 8010718:	2f6f      	cmp	r7, #111	; 0x6f
 801071a:	bf0c      	ite	eq
 801071c:	2308      	moveq	r3, #8
 801071e:	230a      	movne	r3, #10
 8010720:	2100      	movs	r1, #0
 8010722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010726:	6865      	ldr	r5, [r4, #4]
 8010728:	60a5      	str	r5, [r4, #8]
 801072a:	2d00      	cmp	r5, #0
 801072c:	bfa2      	ittt	ge
 801072e:	6821      	ldrge	r1, [r4, #0]
 8010730:	f021 0104 	bicge.w	r1, r1, #4
 8010734:	6021      	strge	r1, [r4, #0]
 8010736:	b90e      	cbnz	r6, 801073c <_printf_i+0x118>
 8010738:	2d00      	cmp	r5, #0
 801073a:	d04d      	beq.n	80107d8 <_printf_i+0x1b4>
 801073c:	4615      	mov	r5, r2
 801073e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010742:	fb03 6711 	mls	r7, r3, r1, r6
 8010746:	5dc7      	ldrb	r7, [r0, r7]
 8010748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801074c:	4637      	mov	r7, r6
 801074e:	42bb      	cmp	r3, r7
 8010750:	460e      	mov	r6, r1
 8010752:	d9f4      	bls.n	801073e <_printf_i+0x11a>
 8010754:	2b08      	cmp	r3, #8
 8010756:	d10b      	bne.n	8010770 <_printf_i+0x14c>
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	07de      	lsls	r6, r3, #31
 801075c:	d508      	bpl.n	8010770 <_printf_i+0x14c>
 801075e:	6923      	ldr	r3, [r4, #16]
 8010760:	6861      	ldr	r1, [r4, #4]
 8010762:	4299      	cmp	r1, r3
 8010764:	bfde      	ittt	le
 8010766:	2330      	movle	r3, #48	; 0x30
 8010768:	f805 3c01 	strble.w	r3, [r5, #-1]
 801076c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010770:	1b52      	subs	r2, r2, r5
 8010772:	6122      	str	r2, [r4, #16]
 8010774:	f8cd a000 	str.w	sl, [sp]
 8010778:	464b      	mov	r3, r9
 801077a:	aa03      	add	r2, sp, #12
 801077c:	4621      	mov	r1, r4
 801077e:	4640      	mov	r0, r8
 8010780:	f7ff fee2 	bl	8010548 <_printf_common>
 8010784:	3001      	adds	r0, #1
 8010786:	d14c      	bne.n	8010822 <_printf_i+0x1fe>
 8010788:	f04f 30ff 	mov.w	r0, #4294967295
 801078c:	b004      	add	sp, #16
 801078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010792:	4835      	ldr	r0, [pc, #212]	; (8010868 <_printf_i+0x244>)
 8010794:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010798:	6829      	ldr	r1, [r5, #0]
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	f851 6b04 	ldr.w	r6, [r1], #4
 80107a0:	6029      	str	r1, [r5, #0]
 80107a2:	061d      	lsls	r5, r3, #24
 80107a4:	d514      	bpl.n	80107d0 <_printf_i+0x1ac>
 80107a6:	07df      	lsls	r7, r3, #31
 80107a8:	bf44      	itt	mi
 80107aa:	f043 0320 	orrmi.w	r3, r3, #32
 80107ae:	6023      	strmi	r3, [r4, #0]
 80107b0:	b91e      	cbnz	r6, 80107ba <_printf_i+0x196>
 80107b2:	6823      	ldr	r3, [r4, #0]
 80107b4:	f023 0320 	bic.w	r3, r3, #32
 80107b8:	6023      	str	r3, [r4, #0]
 80107ba:	2310      	movs	r3, #16
 80107bc:	e7b0      	b.n	8010720 <_printf_i+0xfc>
 80107be:	6823      	ldr	r3, [r4, #0]
 80107c0:	f043 0320 	orr.w	r3, r3, #32
 80107c4:	6023      	str	r3, [r4, #0]
 80107c6:	2378      	movs	r3, #120	; 0x78
 80107c8:	4828      	ldr	r0, [pc, #160]	; (801086c <_printf_i+0x248>)
 80107ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107ce:	e7e3      	b.n	8010798 <_printf_i+0x174>
 80107d0:	0659      	lsls	r1, r3, #25
 80107d2:	bf48      	it	mi
 80107d4:	b2b6      	uxthmi	r6, r6
 80107d6:	e7e6      	b.n	80107a6 <_printf_i+0x182>
 80107d8:	4615      	mov	r5, r2
 80107da:	e7bb      	b.n	8010754 <_printf_i+0x130>
 80107dc:	682b      	ldr	r3, [r5, #0]
 80107de:	6826      	ldr	r6, [r4, #0]
 80107e0:	6961      	ldr	r1, [r4, #20]
 80107e2:	1d18      	adds	r0, r3, #4
 80107e4:	6028      	str	r0, [r5, #0]
 80107e6:	0635      	lsls	r5, r6, #24
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	d501      	bpl.n	80107f0 <_printf_i+0x1cc>
 80107ec:	6019      	str	r1, [r3, #0]
 80107ee:	e002      	b.n	80107f6 <_printf_i+0x1d2>
 80107f0:	0670      	lsls	r0, r6, #25
 80107f2:	d5fb      	bpl.n	80107ec <_printf_i+0x1c8>
 80107f4:	8019      	strh	r1, [r3, #0]
 80107f6:	2300      	movs	r3, #0
 80107f8:	6123      	str	r3, [r4, #16]
 80107fa:	4615      	mov	r5, r2
 80107fc:	e7ba      	b.n	8010774 <_printf_i+0x150>
 80107fe:	682b      	ldr	r3, [r5, #0]
 8010800:	1d1a      	adds	r2, r3, #4
 8010802:	602a      	str	r2, [r5, #0]
 8010804:	681d      	ldr	r5, [r3, #0]
 8010806:	6862      	ldr	r2, [r4, #4]
 8010808:	2100      	movs	r1, #0
 801080a:	4628      	mov	r0, r5
 801080c:	f7ef fd68 	bl	80002e0 <memchr>
 8010810:	b108      	cbz	r0, 8010816 <_printf_i+0x1f2>
 8010812:	1b40      	subs	r0, r0, r5
 8010814:	6060      	str	r0, [r4, #4]
 8010816:	6863      	ldr	r3, [r4, #4]
 8010818:	6123      	str	r3, [r4, #16]
 801081a:	2300      	movs	r3, #0
 801081c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010820:	e7a8      	b.n	8010774 <_printf_i+0x150>
 8010822:	6923      	ldr	r3, [r4, #16]
 8010824:	462a      	mov	r2, r5
 8010826:	4649      	mov	r1, r9
 8010828:	4640      	mov	r0, r8
 801082a:	47d0      	blx	sl
 801082c:	3001      	adds	r0, #1
 801082e:	d0ab      	beq.n	8010788 <_printf_i+0x164>
 8010830:	6823      	ldr	r3, [r4, #0]
 8010832:	079b      	lsls	r3, r3, #30
 8010834:	d413      	bmi.n	801085e <_printf_i+0x23a>
 8010836:	68e0      	ldr	r0, [r4, #12]
 8010838:	9b03      	ldr	r3, [sp, #12]
 801083a:	4298      	cmp	r0, r3
 801083c:	bfb8      	it	lt
 801083e:	4618      	movlt	r0, r3
 8010840:	e7a4      	b.n	801078c <_printf_i+0x168>
 8010842:	2301      	movs	r3, #1
 8010844:	4632      	mov	r2, r6
 8010846:	4649      	mov	r1, r9
 8010848:	4640      	mov	r0, r8
 801084a:	47d0      	blx	sl
 801084c:	3001      	adds	r0, #1
 801084e:	d09b      	beq.n	8010788 <_printf_i+0x164>
 8010850:	3501      	adds	r5, #1
 8010852:	68e3      	ldr	r3, [r4, #12]
 8010854:	9903      	ldr	r1, [sp, #12]
 8010856:	1a5b      	subs	r3, r3, r1
 8010858:	42ab      	cmp	r3, r5
 801085a:	dcf2      	bgt.n	8010842 <_printf_i+0x21e>
 801085c:	e7eb      	b.n	8010836 <_printf_i+0x212>
 801085e:	2500      	movs	r5, #0
 8010860:	f104 0619 	add.w	r6, r4, #25
 8010864:	e7f5      	b.n	8010852 <_printf_i+0x22e>
 8010866:	bf00      	nop
 8010868:	080122f1 	.word	0x080122f1
 801086c:	08012302 	.word	0x08012302

08010870 <__retarget_lock_acquire_recursive>:
 8010870:	4770      	bx	lr

08010872 <__retarget_lock_release_recursive>:
 8010872:	4770      	bx	lr

08010874 <memcpy>:
 8010874:	440a      	add	r2, r1
 8010876:	4291      	cmp	r1, r2
 8010878:	f100 33ff 	add.w	r3, r0, #4294967295
 801087c:	d100      	bne.n	8010880 <memcpy+0xc>
 801087e:	4770      	bx	lr
 8010880:	b510      	push	{r4, lr}
 8010882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010886:	f803 4f01 	strb.w	r4, [r3, #1]!
 801088a:	4291      	cmp	r1, r2
 801088c:	d1f9      	bne.n	8010882 <memcpy+0xe>
 801088e:	bd10      	pop	{r4, pc}

08010890 <memmove>:
 8010890:	4288      	cmp	r0, r1
 8010892:	b510      	push	{r4, lr}
 8010894:	eb01 0402 	add.w	r4, r1, r2
 8010898:	d902      	bls.n	80108a0 <memmove+0x10>
 801089a:	4284      	cmp	r4, r0
 801089c:	4623      	mov	r3, r4
 801089e:	d807      	bhi.n	80108b0 <memmove+0x20>
 80108a0:	1e43      	subs	r3, r0, #1
 80108a2:	42a1      	cmp	r1, r4
 80108a4:	d008      	beq.n	80108b8 <memmove+0x28>
 80108a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108ae:	e7f8      	b.n	80108a2 <memmove+0x12>
 80108b0:	4402      	add	r2, r0
 80108b2:	4601      	mov	r1, r0
 80108b4:	428a      	cmp	r2, r1
 80108b6:	d100      	bne.n	80108ba <memmove+0x2a>
 80108b8:	bd10      	pop	{r4, pc}
 80108ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108c2:	e7f7      	b.n	80108b4 <memmove+0x24>

080108c4 <_realloc_r>:
 80108c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c8:	4680      	mov	r8, r0
 80108ca:	4614      	mov	r4, r2
 80108cc:	460e      	mov	r6, r1
 80108ce:	b921      	cbnz	r1, 80108da <_realloc_r+0x16>
 80108d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108d4:	4611      	mov	r1, r2
 80108d6:	f7ff bc2b 	b.w	8010130 <_malloc_r>
 80108da:	b92a      	cbnz	r2, 80108e8 <_realloc_r+0x24>
 80108dc:	f7ff fbbc 	bl	8010058 <_free_r>
 80108e0:	4625      	mov	r5, r4
 80108e2:	4628      	mov	r0, r5
 80108e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108e8:	f000 f81b 	bl	8010922 <_malloc_usable_size_r>
 80108ec:	4284      	cmp	r4, r0
 80108ee:	4607      	mov	r7, r0
 80108f0:	d802      	bhi.n	80108f8 <_realloc_r+0x34>
 80108f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80108f6:	d812      	bhi.n	801091e <_realloc_r+0x5a>
 80108f8:	4621      	mov	r1, r4
 80108fa:	4640      	mov	r0, r8
 80108fc:	f7ff fc18 	bl	8010130 <_malloc_r>
 8010900:	4605      	mov	r5, r0
 8010902:	2800      	cmp	r0, #0
 8010904:	d0ed      	beq.n	80108e2 <_realloc_r+0x1e>
 8010906:	42bc      	cmp	r4, r7
 8010908:	4622      	mov	r2, r4
 801090a:	4631      	mov	r1, r6
 801090c:	bf28      	it	cs
 801090e:	463a      	movcs	r2, r7
 8010910:	f7ff ffb0 	bl	8010874 <memcpy>
 8010914:	4631      	mov	r1, r6
 8010916:	4640      	mov	r0, r8
 8010918:	f7ff fb9e 	bl	8010058 <_free_r>
 801091c:	e7e1      	b.n	80108e2 <_realloc_r+0x1e>
 801091e:	4635      	mov	r5, r6
 8010920:	e7df      	b.n	80108e2 <_realloc_r+0x1e>

08010922 <_malloc_usable_size_r>:
 8010922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010926:	1f18      	subs	r0, r3, #4
 8010928:	2b00      	cmp	r3, #0
 801092a:	bfbc      	itt	lt
 801092c:	580b      	ldrlt	r3, [r1, r0]
 801092e:	18c0      	addlt	r0, r0, r3
 8010930:	4770      	bx	lr
	...

08010934 <_init>:
 8010934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010936:	bf00      	nop
 8010938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801093a:	bc08      	pop	{r3}
 801093c:	469e      	mov	lr, r3
 801093e:	4770      	bx	lr

08010940 <_fini>:
 8010940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010942:	bf00      	nop
 8010944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010946:	bc08      	pop	{r3}
 8010948:	469e      	mov	lr, r3
 801094a:	4770      	bx	lr
