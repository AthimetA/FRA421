
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000767c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800794c  0800794c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007954  08007954  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007954  08007954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800795c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  08007970  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  080079d0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000824  240000d4  08007a30  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240008f8  08007a30  000208f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c619  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e56  00000000  00000000  0003c71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012a0  00000000  00000000  0003f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001198  00000000  00000000  00040818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c293  00000000  00000000  000419b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017f4b  00000000  00000000  0007dc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186aa6  00000000  00000000  00095b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021c634  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004f34  00000000  00000000  0021c684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080078fc 	.word	0x080078fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	080078fc 	.word	0x080078fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	460a      	mov	r2, r1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <Write_MFRC522+0x5c>)
 800072e:	f002 f863 	bl	80027f8 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_PORT, &addr_bits, 1, 500);
 8000732:	f107 010f 	add.w	r1, r7, #15
 8000736:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800073a:	2201      	movs	r2, #1
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <Write_MFRC522+0x60>)
 800073e:	f004 fe97 	bl	8005470 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_PORT, &val, 1, 500);
 8000742:	1db9      	adds	r1, r7, #6
 8000744:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000748:	2201      	movs	r2, #1
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <Write_MFRC522+0x60>)
 800074c:	f004 fe90 	bl	8005470 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <Write_MFRC522+0x5c>)
 8000758:	f002 f84e 	bl	80027f8 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	58020c00 	.word	0x58020c00
 8000768:	240001d8 	.word	0x240001d8

0800076c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000780:	b25b      	sxtb	r3, r3
 8000782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000786:	b25b      	sxtb	r3, r3
 8000788:	b2db      	uxtb	r3, r3
 800078a:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <Read_MFRC522+0x64>)
 8000794:	f002 f830 	bl	80027f8 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_PORT, &addr_bits, 1, 500);
 8000798:	f107 010e 	add.w	r1, r7, #14
 800079c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007a0:	2201      	movs	r2, #1
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <Read_MFRC522+0x68>)
 80007a4:	f004 fe64 	bl	8005470 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_PORT, &rx_bits, 1, 500);
 80007a8:	f107 010f 	add.w	r1, r7, #15
 80007ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007b0:	2201      	movs	r2, #1
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <Read_MFRC522+0x68>)
 80007b4:	f005 f84e 	bl	8005854 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <Read_MFRC522+0x64>)
 80007c0:	f002 f81a 	bl	80027f8 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58020c00 	.word	0x58020c00
 80007d4:	240001d8 	.word	0x240001d8

080007d8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffbe 	bl	800076c <Read_MFRC522>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff81 	bl	8000708 <Write_MFRC522>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	460a      	mov	r2, r1
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ffa3 	bl	800076c <Read_MFRC522>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800082a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800082e:	43db      	mvns	r3, r3
 8000830:	b25a      	sxtb	r2, r3
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4013      	ands	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	b2da      	uxtb	r2, r3
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff61 	bl	8000708 <Write_MFRC522>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8000852:	2103      	movs	r1, #3
 8000854:	2014      	movs	r0, #20
 8000856:	f7ff ffbf 	bl	80007d8 <SetBitMask>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000862:	210f      	movs	r1, #15
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff ff4f 	bl	8000708 <Write_MFRC522>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 8000872:	f7ff fff4 	bl	800085e <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	202a      	movs	r0, #42	; 0x2a
 800087a:	f7ff ff45 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 800087e:	21a9      	movs	r1, #169	; 0xa9
 8000880:	202b      	movs	r0, #43	; 0x2b
 8000882:	f7ff ff41 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 8000886:	2103      	movs	r1, #3
 8000888:	202d      	movs	r0, #45	; 0x2d
 800088a:	f7ff ff3d 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 800088e:	21e8      	movs	r1, #232	; 0xe8
 8000890:	202c      	movs	r0, #44	; 0x2c
 8000892:	f7ff ff39 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	2015      	movs	r0, #21
 800089a:	f7ff ff35 	bl	8000708 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 800089e:	213d      	movs	r1, #61	; 0x3d
 80008a0:	2011      	movs	r0, #17
 80008a2:	f7ff ff31 	bl	8000708 <Write_MFRC522>

  // interrupts, still playing with these
   Write_MFRC522(CommIEnReg, 0xFF);
 80008a6:	21ff      	movs	r1, #255	; 0xff
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff ff2d 	bl	8000708 <Write_MFRC522>
   Write_MFRC522(DivlEnReg, 0xFF);
 80008ae:	21ff      	movs	r1, #255	; 0xff
 80008b0:	2003      	movs	r0, #3
 80008b2:	f7ff ff29 	bl	8000708 <Write_MFRC522>

  // turn antenna on
  AntennaOn();
 80008b6:	f7ff ffca 	bl	800084e <AntennaOn>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}

080008be <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af02      	add	r7, sp, #8
 80008c4:	4603      	mov	r3, r0
 80008c6:	6039      	str	r1, [r7, #0]
 80008c8:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 80008ca:	2107      	movs	r1, #7
 80008cc:	200d      	movs	r0, #13
 80008ce:	f7ff ff1b 	bl	8000708 <Write_MFRC522>

  TagType[0] = reqMode;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	2201      	movs	r2, #1
 80008e2:	6839      	ldr	r1, [r7, #0]
 80008e4:	200c      	movs	r0, #12
 80008e6:	f000 f80f 	bl	8000908 <MFRC522_ToCard>
 80008ea:	4603      	mov	r3, r0
 80008ec:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <MFRC522_Request+0x3c>
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	2b10      	cmp	r3, #16
 80008f8:	d001      	beq.n	80008fe <MFRC522_Request+0x40>
    status = MI_ERR;
 80008fa:	2302      	movs	r3, #2
 80008fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	4613      	mov	r3, r2
 8000918:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 800091a:	2302      	movs	r3, #2
 800091c:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	d006      	beq.n	800093a <MFRC522_ToCard+0x32>
 800092c:	2b0e      	cmp	r3, #14
 800092e:	d109      	bne.n	8000944 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8000930:	2312      	movs	r3, #18
 8000932:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8000934:	2310      	movs	r3, #16
 8000936:	777b      	strb	r3, [r7, #29]
        break;
 8000938:	e005      	b.n	8000946 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 800093a:	2377      	movs	r3, #119	; 0x77
 800093c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 800093e:	2330      	movs	r3, #48	; 0x30
 8000940:	777b      	strb	r3, [r7, #29]
        break;
 8000942:	e000      	b.n	8000946 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 8000944:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8000946:	7fbb      	ldrb	r3, [r7, #30]
 8000948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fed9 	bl	8000708 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	2004      	movs	r0, #4
 800095a:	f7ff ff58 	bl	800080e <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	200a      	movs	r0, #10
 8000962:	f7ff ff39 	bl	80007d8 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8000966:	2100      	movs	r1, #0
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fecd 	bl	8000708 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	e00a      	b.n	800098a <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	2009      	movs	r0, #9
 8000980:	f7ff fec2 	bl	8000708 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	3301      	adds	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	429a      	cmp	r2, r3
 8000990:	d3f0      	bcc.n	8000974 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	4619      	mov	r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff feb6 	bl	8000708 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b0c      	cmp	r3, #12
 80009a0:	d103      	bne.n	80009aa <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	200d      	movs	r0, #13
 80009a6:	f7ff ff17 	bl	80007d8 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80009aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ae:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80009b0:	2004      	movs	r0, #4
 80009b2:	f7ff fedb 	bl	800076c <Read_MFRC522>
 80009b6:	4603      	mov	r3, r0
 80009b8:	773b      	strb	r3, [r7, #28]
    i--;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	3b01      	subs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00a      	beq.n	80009dc <MFRC522_ToCard+0xd4>
 80009c6:	7f3b      	ldrb	r3, [r7, #28]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d105      	bne.n	80009dc <MFRC522_ToCard+0xd4>
 80009d0:	7f3a      	ldrb	r2, [r7, #28]
 80009d2:	7f7b      	ldrb	r3, [r7, #29]
 80009d4:	4013      	ands	r3, r2
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0e9      	beq.n	80009b0 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	200d      	movs	r0, #13
 80009e0:	f7ff ff15 	bl	800080e <ClearBitMask>

  if (i != 0)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d052      	beq.n	8000a90 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80009ea:	2006      	movs	r0, #6
 80009ec:	f7ff febe 	bl	800076c <Read_MFRC522>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f003 031b 	and.w	r3, r3, #27
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d148      	bne.n	8000a8c <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 80009fe:	7f3a      	ldrb	r2, [r7, #28]
 8000a00:	7fbb      	ldrb	r3, [r7, #30]
 8000a02:	4013      	ands	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8000a0e:	2301      	movs	r3, #1
 8000a10:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	2b0c      	cmp	r3, #12
 8000a16:	d13b      	bne.n	8000a90 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f7ff fea7 	bl	800076c <Read_MFRC522>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000a22:	200c      	movs	r0, #12
 8000a24:	f7ff fea2 	bl	800076c <Read_MFRC522>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d008      	beq.n	8000a48 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8000a36:	7f3b      	ldrb	r3, [r7, #28]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	00da      	lsls	r2, r3, #3
 8000a3c:	7dfb      	ldrb	r3, [r7, #23]
 8000a3e:	4413      	add	r3, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e004      	b.n	8000a52 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8000a48:	7f3b      	ldrb	r3, [r7, #28]
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8000a52:	7f3b      	ldrb	r3, [r7, #28]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <MFRC522_ToCard+0x154>
        {
          n = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8000a5c:	7f3b      	ldrb	r3, [r7, #28]
 8000a5e:	2b10      	cmp	r3, #16
 8000a60:	d901      	bls.n	8000a66 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8000a62:	2310      	movs	r3, #16
 8000a64:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	e00a      	b.n	8000a82 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	18d4      	adds	r4, r2, r3
 8000a72:	2009      	movs	r0, #9
 8000a74:	f7ff fe7a 	bl	800076c <Read_MFRC522>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	7f3b      	ldrb	r3, [r7, #28]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3f0      	bcc.n	8000a6c <MFRC522_ToCard+0x164>
 8000a8a:	e001      	b.n	8000a90 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}

08000a9a <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af02      	add	r7, sp, #8
 8000aa0:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	200d      	movs	r0, #13
 8000aaa:	f7ff fe2d 	bl	8000708 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2293      	movs	r2, #147	; 0x93
 8000ab2:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	2220      	movs	r2, #32
 8000aba:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	200c      	movs	r0, #12
 8000aca:	f7ff ff1d 	bl	8000908 <MFRC522_ToCard>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d118      	bne.n	8000b0a <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
 8000adc:	e009      	b.n	8000af2 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	7b7b      	ldrb	r3, [r7, #13]
 8000ae8:	4053      	eors	r3, r2
 8000aea:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	3301      	adds	r3, #1
 8000af0:	73bb      	strb	r3, [r7, #14]
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d9f2      	bls.n	8000ade <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	7b7a      	ldrb	r2, [r7, #13]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d001      	beq.n	8000b0a <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8000b06:	2302      	movs	r3, #2
 8000b08:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b1e:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b20:	bf00      	nop
 8000b22:	4b93      	ldr	r3, [pc, #588]	; (8000d70 <main+0x25c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d004      	beq.n	8000b38 <main+0x24>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	61fa      	str	r2, [r7, #28]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dcf4      	bgt.n	8000b22 <main+0xe>
  if ( timeout < 0 )
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da01      	bge.n	8000b42 <main+0x2e>
  {
  Error_Handler();
 8000b3e:	f000 fc07 	bl	8001350 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f000 fecb 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f92f 	bl	8000da8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b4a:	f000 f9b1 	bl	8000eb0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <main+0x25c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a86      	ldr	r2, [pc, #536]	; (8000d70 <main+0x25c>)
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b84      	ldr	r3, [pc, #528]	; (8000d70 <main+0x25c>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f001 fe77 	bl	8002860 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f001 fe8d 	bl	8002894 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b7e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b80:	bf00      	nop
 8000b82:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <main+0x25c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d104      	bne.n	8000b98 <main+0x84>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	61fa      	str	r2, [r7, #28]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dcf4      	bgt.n	8000b82 <main+0x6e>
if ( timeout < 0 )
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da01      	bge.n	8000ba2 <main+0x8e>
{
Error_Handler();
 8000b9e:	f000 fbd7 	bl	8001350 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 fb2d 	bl	8001200 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ba6:	f000 f9b5 	bl	8000f14 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000baa:	f000 faab 	bl	8001104 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bae:	f000 faf5 	bl	800119c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000bb2:	f000 fa51 	bl	8001058 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000bb6:	f000 f9f9 	bl	8000fac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i < 16; i++){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	e007      	b.n	8000bd0 <main+0xbc>
	  tmp_str[i] = 'A';
 8000bc0:	4a6c      	ldr	r2, [pc, #432]	; (8000d74 <main+0x260>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2241      	movs	r2, #65	; 0x41
 8000bc8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 16; i++){
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	ddf4      	ble.n	8000bc0 <main+0xac>
  }
  for (int i = 16; i < 32; i++){
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e007      	b.n	8000bec <main+0xd8>
	  tmp_str[i] = 'B';
 8000bdc:	4a65      	ldr	r2, [pc, #404]	; (8000d74 <main+0x260>)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	4413      	add	r3, r2
 8000be2:	2242      	movs	r2, #66	; 0x42
 8000be4:	701a      	strb	r2, [r3, #0]
  for (int i = 16; i < 32; i++){
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	2b1f      	cmp	r3, #31
 8000bf0:	ddf4      	ble.n	8000bdc <main+0xc8>
  }
  for (int i = 32; i < 48; i++){
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	e007      	b.n	8000c08 <main+0xf4>
	  tmp_str[i] = 'C';
 8000bf8:	4a5e      	ldr	r2, [pc, #376]	; (8000d74 <main+0x260>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	2243      	movs	r2, #67	; 0x43
 8000c00:	701a      	strb	r2, [r3, #0]
  for (int i = 32; i < 48; i++){
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	3301      	adds	r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2b2f      	cmp	r3, #47	; 0x2f
 8000c0c:	ddf4      	ble.n	8000bf8 <main+0xe4>
  }
  for (int i = 48; i < 64; i++){
 8000c0e:	2330      	movs	r3, #48	; 0x30
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e007      	b.n	8000c24 <main+0x110>
	  tmp_str[i] = 'D';
 8000c14:	4a57      	ldr	r2, [pc, #348]	; (8000d74 <main+0x260>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2244      	movs	r2, #68	; 0x44
 8000c1c:	701a      	strb	r2, [r3, #0]
  for (int i = 48; i < 64; i++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b3f      	cmp	r3, #63	; 0x3f
 8000c28:	ddf4      	ble.n	8000c14 <main+0x100>
  }

  // Reset RC522
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4852      	ldr	r0, [pc, #328]	; (8000d78 <main+0x264>)
 8000c30:	f001 fde2 	bl	80027f8 <HAL_GPIO_WritePin>
  tsest = 2;
 8000c34:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <main+0x268>)
 8000c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3a:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8000c3c:	2064      	movs	r0, #100	; 0x64
 8000c3e:	f000 fedf 	bl	8001a00 <HAL_Delay>
  MFRC522_Init();
 8000c42:	f7ff fe14 	bl	800086e <MFRC522_Init>
  tsest = 3;
 8000c46:	4b4d      	ldr	r3, [pc, #308]	; (8000d7c <main+0x268>)
 8000c48:	4a4d      	ldr	r2, [pc, #308]	; (8000d80 <main+0x26c>)
 8000c4a:	601a      	str	r2, [r3, #0]

  status = Read_MFRC522(VersionReg);
 8000c4c:	2037      	movs	r0, #55	; 0x37
 8000c4e:	f7ff fd8d 	bl	800076c <Read_MFRC522>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <main+0x270>)
 8000c58:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      if(HAL_GetTick() - timemsM7 > 100)
 8000c5a:	f000 fec5 	bl	80019e8 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <main+0x274>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	; 0x64
 8000c68:	d95f      	bls.n	8000d2a <main+0x216>
      {
          timemsM7 = HAL_GetTick();
 8000c6a:	f000 febd 	bl	80019e8 <HAL_GetTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a45      	ldr	r2, [pc, #276]	; (8000d88 <main+0x274>)
 8000c72:	6013      	str	r3, [r2, #0]

    	  if(hspi1.State == HAL_SPI_STATE_READY)
 8000c74:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <main+0x278>)
 8000c76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d154      	bne.n	8000d2a <main+0x216>
    	  {

    		  tsest+=1;
 8000c80:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <main+0x268>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c8e:	4b3b      	ldr	r3, [pc, #236]	; (8000d7c <main+0x268>)
 8000c90:	edc3 7a00 	vstr	s15, [r3]
//    		  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
//			  HAL_SPI_Transmit(&hspi1, &testDataM7, testSizeM7, 1000);
//			  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//        		  HAL_SPI_Transmit_IT(&hspi1, &testData, testSize);

    		  for (int i = 0; i < 16; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	e007      	b.n	8000caa <main+0x196>
    		  {
    			  cardstr[i] = 0;
 8000c9a:	4a3d      	ldr	r2, [pc, #244]	; (8000d90 <main+0x27c>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
    		  for (int i = 0; i < 16; i++)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	ddf4      	ble.n	8000c9a <main+0x186>
    		  }
    		  status = 99;
 8000cb0:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <main+0x270>)
 8000cb2:	2263      	movs	r2, #99	; 0x63
 8000cb4:	701a      	strb	r2, [r3, #0]
    		  // Find cards
    		  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8000cb6:	4936      	ldr	r1, [pc, #216]	; (8000d90 <main+0x27c>)
 8000cb8:	2026      	movs	r0, #38	; 0x26
 8000cba:	f7ff fe00 	bl	80008be <MFRC522_Request>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <main+0x270>)
 8000cc4:	701a      	strb	r2, [r3, #0]
    		  if(status == MI_OK)
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <main+0x270>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d12d      	bne.n	8000d2a <main+0x216>
    		  {
    			  result = 0;
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <main+0x280>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
    			  result++;
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <main+0x280>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <main+0x280>)
 8000cde:	801a      	strh	r2, [r3, #0]
    			  status = MFRC522_Anticoll(cardstr);
 8000ce0:	482b      	ldr	r0, [pc, #172]	; (8000d90 <main+0x27c>)
 8000ce2:	f7ff feda 	bl	8000a9a <MFRC522_Anticoll>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <main+0x270>)
 8000cec:	701a      	strb	r2, [r3, #0]
    			  if(status == MI_OK)
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <main+0x270>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d119      	bne.n	8000d2a <main+0x216>
    			  {
    				  result++;
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <main+0x280>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <main+0x280>)
 8000d00:	801a      	strh	r2, [r3, #0]
    				  UID[0] = cardstr[0];
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <main+0x27c>)
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <main+0x284>)
 8000d08:	701a      	strb	r2, [r3, #0]
    				  UID[1] = cardstr[1];
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <main+0x27c>)
 8000d0c:	785a      	ldrb	r2, [r3, #1]
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <main+0x284>)
 8000d10:	705a      	strb	r2, [r3, #1]
    				  UID[2] = cardstr[2];
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <main+0x27c>)
 8000d14:	789a      	ldrb	r2, [r3, #2]
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <main+0x284>)
 8000d18:	709a      	strb	r2, [r3, #2]
    				  UID[3] = cardstr[3];
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <main+0x27c>)
 8000d1c:	78da      	ldrb	r2, [r3, #3]
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <main+0x284>)
 8000d20:	70da      	strb	r2, [r3, #3]
    				  UID[4] = cardstr[4];
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <main+0x27c>)
 8000d24:	791a      	ldrb	r2, [r3, #4]
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <main+0x284>)
 8000d28:	711a      	strb	r2, [r3, #4]

    	  }

      }

      if(HAL_GetTick() - timemsM7 > 1000)
 8000d2a:	f000 fe5d 	bl	80019e8 <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <main+0x274>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d3a:	d98e      	bls.n	8000c5a <main+0x146>
      {
          timemsM7 = HAL_GetTick();
 8000d3c:	f000 fe54 	bl	80019e8 <HAL_GetTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <main+0x274>)
 8000d44:	6013      	str	r3, [r2, #0]
          HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <main+0x264>)
 8000d4c:	f001 fd6d 	bl	800282a <HAL_GPIO_TogglePin>

          if(hspi2.State == HAL_SPI_STATE_READY)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <main+0x288>)
 8000d52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	f47f af7e 	bne.w	8000c5a <main+0x146>
    	  {
        	  HAL_SPI_Transmit(&hspi2, &testDataM7, testSizeM7, 1000);
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <main+0x28c>)
 8000d60:	881a      	ldrh	r2, [r3, #0]
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	490f      	ldr	r1, [pc, #60]	; (8000da4 <main+0x290>)
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <main+0x288>)
 8000d6a:	f004 fb81 	bl	8005470 <HAL_SPI_Transmit>
      if(HAL_GetTick() - timemsM7 > 100)
 8000d6e:	e774      	b.n	8000c5a <main+0x146>
 8000d70:	58024400 	.word	0x58024400
 8000d74:	2400088c 	.word	0x2400088c
 8000d78:	58020400 	.word	0x58020400
 8000d7c:	24000888 	.word	0x24000888
 8000d80:	40400000 	.word	0x40400000
 8000d84:	240008cd 	.word	0x240008cd
 8000d88:	24000884 	.word	0x24000884
 8000d8c:	240001d8 	.word	0x240001d8
 8000d90:	240008d0 	.word	0x240008d0
 8000d94:	240008e2 	.word	0x240008e2
 8000d98:	240008e4 	.word	0x240008e4
 8000d9c:	24000260 	.word	0x24000260
 8000da0:	24000008 	.word	0x24000008
 8000da4:	2400000a 	.word	0x2400000a

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09c      	sub	sp, #112	; 0x70
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	224c      	movs	r2, #76	; 0x4c
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f006 fd98 	bl	80078ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fd92 	bl	80078ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000dc8:	2004      	movs	r0, #4
 8000dca:	f001 febf 	bl	8002b4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <SystemClock_Config+0xfc>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <SystemClock_Config+0xfc>)
 8000dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <SystemClock_Config+0xfc>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <SystemClock_Config+0x100>)
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <SystemClock_Config+0x100>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <SystemClock_Config+0x100>)
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e00:	bf00      	nop
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <SystemClock_Config+0xfc>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e0e:	d1f8      	bne.n	8000e02 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <SystemClock_Config+0x104>)
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	f023 0303 	bic.w	r3, r3, #3
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <SystemClock_Config+0x104>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000e36:	2378      	movs	r3, #120	; 0x78
 8000e38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e46:	230c      	movs	r3, #12
 8000e48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fee2 	bl	8002c20 <HAL_RCC_OscConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e62:	f000 fa75 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e66:	233f      	movs	r3, #63	; 0x3f
 8000e68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e72:	2308      	movs	r3, #8
 8000e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 faf5 	bl	800347c <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000e98:	f000 fa5a 	bl	8001350 <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3770      	adds	r7, #112	; 0x70
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	58024800 	.word	0x58024800
 8000ea8:	58000400 	.word	0x58000400
 8000eac:	58024400 	.word	0x58024400

08000eb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0b0      	sub	sp, #192	; 0xc0
 8000eb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	22bc      	movs	r2, #188	; 0xbc
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fd15 	bl	80078ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI2
 8000ec2:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000ec6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000ecc:	2318      	movs	r3, #24
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000edc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fe4a 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000f06:	f000 fa23 	bl	8001350 <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	37c0      	adds	r7, #192	; 0xc0
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_ETH_Init+0x80>)
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <MX_ETH_Init+0x84>)
 8000f1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_ETH_Init+0x88>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_ETH_Init+0x88>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_ETH_Init+0x88>)
 8000f2c:	22e1      	movs	r2, #225	; 0xe1
 8000f2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_ETH_Init+0x88>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_ETH_Init+0x88>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_ETH_Init+0x88>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_ETH_Init+0x80>)
 8000f44:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_ETH_Init+0x88>)
 8000f46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_ETH_Init+0x80>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_ETH_Init+0x80>)
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <MX_ETH_Init+0x8c>)
 8000f52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_ETH_Init+0x80>)
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <MX_ETH_Init+0x90>)
 8000f58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_ETH_Init+0x80>)
 8000f5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_ETH_Init+0x80>)
 8000f64:	f000 fe74 	bl	8001c50 <HAL_ETH_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f6e:	f000 f9ef 	bl	8001350 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f72:	2238      	movs	r2, #56	; 0x38
 8000f74:	2100      	movs	r1, #0
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <MX_ETH_Init+0x94>)
 8000f78:	f006 fcb8 	bl	80078ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_ETH_Init+0x94>)
 8000f7e:	2221      	movs	r2, #33	; 0x21
 8000f80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_ETH_Init+0x94>)
 8000f84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_ETH_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24000128 	.word	0x24000128
 8000f98:	40028000 	.word	0x40028000
 8000f9c:	240008ec 	.word	0x240008ec
 8000fa0:	24000074 	.word	0x24000074
 8000fa4:	24000014 	.word	0x24000014
 8000fa8:	240000f0 	.word	0x240000f0

08000fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fb2:	4a28      	ldr	r2, [pc, #160]	; (8001054 <MX_SPI1_Init+0xa8>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_SPI1_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_SPI1_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_SPI1_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_SPI1_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_SPI1_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_SPI1_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_SPI1_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_SPI1_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_SPI1_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_SPI1_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_SPI1_Init+0xa4>)
 800103c:	f004 f912 	bl	8005264 <HAL_SPI_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001046:	f000 f983 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	240001d8 	.word	0x240001d8
 8001054:	40013000 	.word	0x40013000

08001058 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_SPI2_Init+0xa4>)
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <MX_SPI2_Init+0xa8>)
 8001060:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_SPI2_Init+0xa4>)
 8001064:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001068:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_SPI2_Init+0xa4>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_SPI2_Init+0xa4>)
 8001072:	2203      	movs	r2, #3
 8001074:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_SPI2_Init+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_SPI2_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_SPI2_Init+0xa4>)
 8001084:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001088:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_SPI2_Init+0xa4>)
 800108c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001090:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_SPI2_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_SPI2_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_SPI2_Init+0xa4>)
 80010e8:	f004 f8bc 	bl	8005264 <HAL_SPI_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80010f2:	f000 f92d 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	24000260 	.word	0x24000260
 8001100:	40003800 	.word	0x40003800

08001104 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_USART3_UART_Init+0x90>)
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <MX_USART3_UART_Init+0x94>)
 800110c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_USART3_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_USART3_UART_Init+0x90>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_USART3_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800114c:	4811      	ldr	r0, [pc, #68]	; (8001194 <MX_USART3_UART_Init+0x90>)
 800114e:	f005 f82e 	bl	80061ae <HAL_UART_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001158:	f000 f8fa 	bl	8001350 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115c:	2100      	movs	r1, #0
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001160:	f005 ffcc 	bl	80070fc <HAL_UARTEx_SetTxFifoThreshold>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800116a:	f000 f8f1 	bl	8001350 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4808      	ldr	r0, [pc, #32]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001172:	f006 f801 	bl	8007178 <HAL_UARTEx_SetRxFifoThreshold>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800117c:	f000 f8e8 	bl	8001350 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_USART3_UART_Init+0x90>)
 8001182:	f005 ff82 	bl	800708a <HAL_UARTEx_DisableFifoMode>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f8e0 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	240002e8 	.word	0x240002e8
 8001198:	40004800 	.word	0x40004800

0800119c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a2:	4a16      	ldr	r2, [pc, #88]	; (80011fc <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a8:	2209      	movs	r2, #9
 80011aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ae:	2202      	movs	r2, #2
 80011b0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e4:	f001 fb6a 	bl	80028bc <HAL_PCD_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011ee:	f000 f8af 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	24000378 	.word	0x24000378
 80011fc:	40080000 	.word	0x40080000

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <MX_GPIO_Init+0x140>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	4a48      	ldr	r2, [pc, #288]	; (8001340 <MX_GPIO_Init+0x140>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <MX_GPIO_Init+0x140>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001234:	4b42      	ldr	r3, [pc, #264]	; (8001340 <MX_GPIO_Init+0x140>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	4a41      	ldr	r2, [pc, #260]	; (8001340 <MX_GPIO_Init+0x140>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001244:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <MX_GPIO_Init+0x140>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_GPIO_Init+0x140>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	4a39      	ldr	r2, [pc, #228]	; (8001340 <MX_GPIO_Init+0x140>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <MX_GPIO_Init+0x140>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <MX_GPIO_Init+0x140>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a32      	ldr	r2, [pc, #200]	; (8001340 <MX_GPIO_Init+0x140>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_GPIO_Init+0x140>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_GPIO_Init+0x140>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a2a      	ldr	r2, [pc, #168]	; (8001340 <MX_GPIO_Init+0x140>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <MX_GPIO_Init+0x140>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <MX_GPIO_Init+0x140>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a23      	ldr	r2, [pc, #140]	; (8001340 <MX_GPIO_Init+0x140>)
 80012b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_GPIO_Init+0x140>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|RC522_Rst_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f244 0120 	movw	r1, #16416	; 0x4020
 80012d0:	481c      	ldr	r0, [pc, #112]	; (8001344 <MX_GPIO_Init+0x144>)
 80012d2:	f001 fa91 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <MX_GPIO_Init+0x148>)
 80012de:	f001 fa8b 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin RC522_Rst_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|RC522_Rst_Pin;
 80012e2:	f244 0320 	movw	r3, #16416	; 0x4020
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <MX_GPIO_Init+0x144>)
 80012fc:	f001 f8cc 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin RC522_CS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|RC522_CS_Pin;
 8001300:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <MX_GPIO_Init+0x148>)
 800131a:	f001 f8bd 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001322:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_GPIO_Init+0x14c>)
 8001334:	f001 f8b0 	bl	8002498 <HAL_GPIO_Init>

}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58024400 	.word	0x58024400
 8001344:	58020400 	.word	0x58020400
 8001348:	58020c00 	.word	0x58020c00
 800134c:	58021800 	.word	0x58021800

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_MspInit+0x30>)
 8001364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x30>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x30>)
 8001374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	58024400 	.word	0x58024400

08001390 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a59      	ldr	r2, [pc, #356]	; (8001514 <HAL_ETH_MspInit+0x184>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	f040 80ab 	bne.w	800150a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ba:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013c4:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d8:	4a4f      	ldr	r2, [pc, #316]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a40      	ldr	r2, [pc, #256]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a39      	ldr	r2, [pc, #228]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a31      	ldr	r2, [pc, #196]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001486:	2332      	movs	r3, #50	; 0x32
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001496:	230b      	movs	r3, #11
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	481e      	ldr	r0, [pc, #120]	; (800151c <HAL_ETH_MspInit+0x18c>)
 80014a2:	f000 fff9 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80014a6:	2386      	movs	r3, #134	; 0x86
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b6:	230b      	movs	r3, #11
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4817      	ldr	r0, [pc, #92]	; (8001520 <HAL_ETH_MspInit+0x190>)
 80014c2:	f000 ffe9 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d8:	230b      	movs	r3, #11
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_ETH_MspInit+0x194>)
 80014e4:	f000 ffd8 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80014e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fa:	230b      	movs	r3, #11
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <HAL_ETH_MspInit+0x198>)
 8001506:	f000 ffc7 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40028000 	.word	0x40028000
 8001518:	58024400 	.word	0x58024400
 800151c:	58020800 	.word	0x58020800
 8001520:	58020000 	.word	0x58020000
 8001524:	58020400 	.word	0x58020400
 8001528:	58021800 	.word	0x58021800

0800152c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a53      	ldr	r2, [pc, #332]	; (8001698 <HAL_SPI_MspInit+0x16c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d14d      	bne.n	80015ea <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800154e:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001556:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800155e:	4b4f      	ldr	r3, [pc, #316]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <HAL_SPI_MspInit+0x170>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	4a4a      	ldr	r2, [pc, #296]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157c:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_SPI_MspInit+0x170>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_SPI_MspInit+0x170>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	4a42      	ldr	r2, [pc, #264]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159a:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_SPI_MspInit+0x170>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015b8:	2305      	movs	r3, #5
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4837      	ldr	r0, [pc, #220]	; (80016a0 <HAL_SPI_MspInit+0x174>)
 80015c4:	f000 ff68 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d8:	2305      	movs	r3, #5
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4830      	ldr	r0, [pc, #192]	; (80016a4 <HAL_SPI_MspInit+0x178>)
 80015e4:	f000 ff58 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015e8:	e052      	b.n	8001690 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2e      	ldr	r2, [pc, #184]	; (80016a8 <HAL_SPI_MspInit+0x17c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d14d      	bne.n	8001690 <HAL_SPI_MspInit+0x164>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_SPI_MspInit+0x170>)
 80015f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015fa:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_SPI_MspInit+0x170>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	4a20      	ldr	r2, [pc, #128]	; (800169c <HAL_SPI_MspInit+0x170>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_SPI_MspInit+0x170>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800164e:	230c      	movs	r3, #12
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800165e:	2305      	movs	r3, #5
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <HAL_SPI_MspInit+0x180>)
 800166a:	f000 ff15 	bl	8002498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001680:	2305      	movs	r3, #5
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <HAL_SPI_MspInit+0x184>)
 800168c:	f000 ff04 	bl	8002498 <HAL_GPIO_Init>
}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40013000 	.word	0x40013000
 800169c:	58024400 	.word	0x58024400
 80016a0:	58020000 	.word	0x58020000
 80016a4:	58020c00 	.word	0x58020c00
 80016a8:	40003800 	.word	0x40003800
 80016ac:	58020800 	.word	0x58020800
 80016b0:	58020400 	.word	0x58020400

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0b8      	sub	sp, #224	; 0xe0
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	22bc      	movs	r2, #188	; 0xbc
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f006 f909 	bl	80078ec <memset>
  if(huart->Instance==USART3)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <HAL_UART_MspInit+0xc0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d142      	bne.n	800176a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016e4:	2302      	movs	r3, #2
 80016e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fa4e 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016fe:	f7ff fe27 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_UART_MspInit+0xc4>)
 8001704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <HAL_UART_MspInit+0xc4>)
 800170a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_UART_MspInit+0xc4>)
 8001714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_UART_MspInit+0xc4>)
 8001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_UART_MspInit+0xc4>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_UART_MspInit+0xc4>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800173e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001758:	2307      	movs	r3, #7
 800175a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_UART_MspInit+0xc8>)
 8001766:	f000 fe97 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	37e0      	adds	r7, #224	; 0xe0
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40004800 	.word	0x40004800
 8001778:	58024400 	.word	0x58024400
 800177c:	58020c00 	.word	0x58020c00

08001780 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a22      	ldr	r2, [pc, #136]	; (8001828 <HAL_PCD_MspInit+0xa8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d13d      	bne.n	800181e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80017a2:	f001 fa2d 	bl	8002c00 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_PCD_MspInit+0xac>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_PCD_MspInit+0xac>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_PCD_MspInit+0xac>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017c4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017d6:	230a      	movs	r3, #10
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <HAL_PCD_MspInit+0xb0>)
 80017e2:	f000 fe59 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_PCD_MspInit+0xb0>)
 80017fc:	f000 fe4c 	bl	8002498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_PCD_MspInit+0xac>)
 8001802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_PCD_MspInit+0xac>)
 8001808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800180c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_PCD_MspInit+0xac>)
 8001812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40080000 	.word	0x40080000
 800182c:	58024400 	.word	0x58024400
 8001830:	58020000 	.word	0x58020000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f89e 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f7fe fea6 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f005 fff5 	bl	80078a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff f92b 	bl	8000b14 <main>
  bx  lr
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80018cc:	0800795c 	.word	0x0800795c
  ldr r2, =_sbss
 80018d0:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 80018d4:	240008f8 	.word	0x240008f8

080018d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f982 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e8:	f001 ff7e 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_Init+0x68>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	4913      	ldr	r1, [pc, #76]	; (8001948 <HAL_Init+0x6c>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_Init+0x68>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_Init+0x6c>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_Init+0x70>)
 800191e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_Init+0x74>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f814 	bl	8001954 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e002      	b.n	800193c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001936:	f7ff fd11 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58024400 	.word	0x58024400
 8001948:	08007914 	.word	0x08007914
 800194c:	24000004 	.word	0x24000004
 8001950:	24000000 	.word	0x24000000

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_InitTick+0x60>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e021      	b.n	80019ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_InitTick+0x64>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f959 	bl	8001c36 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f931 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x68>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	24000010 	.word	0x24000010
 80019b8:	24000000 	.word	0x24000000
 80019bc:	2400000c 	.word	0x2400000c

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	24000010 	.word	0x24000010
 80019e4:	240008f4 	.word	0x240008f4

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	240008f4 	.word	0x240008f4

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	24000010 	.word	0x24000010

08001a48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetREVID+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0c1b      	lsrs	r3, r3, #16
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	5c001000 	.word	0x5c001000

08001a60 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a70:	4904      	ldr	r1, [pc, #16]	; (8001a84 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58000400 	.word	0x58000400

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	05fa0000 	.word	0x05fa0000

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff47 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff5e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff90 	bl	8001b40 <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5f 	bl	8001aec <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffb2 	bl	8001ba8 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0cf      	b.n	8001e02 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d106      	bne.n	8001c7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2223      	movs	r2, #35	; 0x23
 8001c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fb8b 	bl	8001390 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	4b64      	ldr	r3, [pc, #400]	; (8001e0c <HAL_ETH_Init+0x1bc>)
 8001c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c80:	4a62      	ldr	r2, [pc, #392]	; (8001e0c <HAL_ETH_Init+0x1bc>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c8a:	4b60      	ldr	r3, [pc, #384]	; (8001e0c <HAL_ETH_Init+0x1bc>)
 8001c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7a1b      	ldrb	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fedd 	bl	8001a60 <HAL_SYSCFG_ETHInterfaceSelect>
 8001ca6:	e003      	b.n	8001cb0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ca8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001cac:	f7ff fed8 	bl	8001a60 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001cb0:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <HAL_ETH_Init+0x1c0>)
 8001cb2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff fe8c 	bl	80019e8 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cd2:	e011      	b.n	8001cf8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cd4:	f7ff fe88 	bl	80019e8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce2:	d909      	bls.n	8001cf8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	22e0      	movs	r2, #224	; 0xe0
 8001cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e084      	b.n	8001e02 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f886 	bl	8001e1c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001d10:	f001 fee4 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a3f      	ldr	r2, [pc, #252]	; (8001e14 <HAL_ETH_Init+0x1c4>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	0c9a      	lsrs	r2, r3, #18
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3a01      	subs	r2, #1
 8001d24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fa71 	bl	8002210 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d36:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d3a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d4a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	22e0      	movs	r2, #224	; 0xe0
 8001d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e049      	b.n	8001e02 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_ETH_Init+0x1c8>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6952      	ldr	r2, [r2, #20]
 8001d82:	0051      	lsls	r1, r2, #1
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d8e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fad9 	bl	800234a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fb1f 	bl	80023dc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	3305      	adds	r3, #5
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	021a      	lsls	r2, r3, #8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	3303      	adds	r3, #3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	061a      	lsls	r2, r3, #24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	3302      	adds	r3, #2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ddc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	58000400 	.word	0x58000400
 8001e14:	431bde83 	.word	0x431bde83
 8001e18:	ffff8001 	.word	0xffff8001

08001e1c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e36:	f001 fe51 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8001e3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d908      	bls.n	8001e56 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d804      	bhi.n	8001e56 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e027      	b.n	8001ea6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d908      	bls.n	8001e70 <HAL_ETH_SetMDIOClockRange+0x54>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d204      	bcs.n	8001e70 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e01a      	b.n	8001ea6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d303      	bcc.n	8001e80 <HAL_ETH_SetMDIOClockRange+0x64>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d911      	bls.n	8001ea4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d908      	bls.n	8001e9a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d804      	bhi.n	8001e9a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e005      	b.n	8001ea6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e000      	b.n	8001ea6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001ea4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	01312cff 	.word	0x01312cff
 8001ebc:	02160ebf 	.word	0x02160ebf
 8001ec0:	03938700 	.word	0x03938700
 8001ec4:	05f5e0ff 	.word	0x05f5e0ff
 8001ec8:	08f0d17f 	.word	0x08f0d17f

08001ecc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001ede:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001ee6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	7b1b      	ldrb	r3, [r3, #12]
 8001eec:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001eee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7b5b      	ldrb	r3, [r3, #13]
 8001ef4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ef6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	7b9b      	ldrb	r3, [r3, #14]
 8001efc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001efe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7bdb      	ldrb	r3, [r3, #15]
 8001f04:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	7c12      	ldrb	r2, [r2, #16]
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	d102      	bne.n	8001f16 <ETH_SetMACConfig+0x4a>
 8001f10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f14:	e000      	b.n	8001f18 <ETH_SetMACConfig+0x4c>
 8001f16:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	7c52      	ldrb	r2, [r2, #17]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d102      	bne.n	8001f28 <ETH_SetMACConfig+0x5c>
 8001f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f26:	e000      	b.n	8001f2a <ETH_SetMACConfig+0x5e>
 8001f28:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	7c9b      	ldrb	r3, [r3, #18]
 8001f30:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f32:	431a      	orrs	r2, r3
               macconf->Speed |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001f38:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001f3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	7f1b      	ldrb	r3, [r3, #28]
 8001f44:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001f46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	7f5b      	ldrb	r3, [r3, #29]
 8001f4c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001f4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	7f92      	ldrb	r2, [r2, #30]
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d102      	bne.n	8001f5e <ETH_SetMACConfig+0x92>
 8001f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5c:	e000      	b.n	8001f60 <ETH_SetMACConfig+0x94>
 8001f5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001f60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7fdb      	ldrb	r3, [r3, #31]
 8001f66:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001f68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f70:	2a00      	cmp	r2, #0
 8001f72:	d102      	bne.n	8001f7a <ETH_SetMACConfig+0xae>
 8001f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f78:	e000      	b.n	8001f7c <ETH_SetMACConfig+0xb0>
 8001f7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001f7c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001f82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f8a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001f8c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <ETH_SetMACConfig+0x22c>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	68f9      	ldr	r1, [r7, #12]
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fb6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001fb8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001fc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fca:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001fcc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d102      	bne.n	8001fde <ETH_SetMACConfig+0x112>
 8001fd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fdc:	e000      	b.n	8001fe0 <ETH_SetMACConfig+0x114>
 8001fde:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001fe0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <ETH_SetMACConfig+0x230>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002004:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <ETH_SetMACConfig+0x234>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	68f9      	ldr	r1, [r7, #12]
 800201e:	430b      	orrs	r3, r1
 8002020:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002028:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800202e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002036:	2a00      	cmp	r2, #0
 8002038:	d101      	bne.n	800203e <ETH_SetMACConfig+0x172>
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	e000      	b.n	8002040 <ETH_SetMACConfig+0x174>
 800203e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002040:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002046:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002052:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002056:	4013      	ands	r3, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	430b      	orrs	r3, r1
 8002060:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002068:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002070:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f023 0103 	bic.w	r1, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	430a      	orrs	r2, r1
 800208a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002096:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d101      	bne.n	80020ba <ETH_SetMACConfig+0x1ee>
 80020b6:	2240      	movs	r2, #64	; 0x40
 80020b8:	e000      	b.n	80020bc <ETH_SetMACConfig+0x1f0>
 80020ba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80020bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80020c4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80020c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80020ce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020dc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	00048083 	.word	0x00048083
 80020fc:	c0f88000 	.word	0xc0f88000
 8002100:	fffffef0 	.word	0xfffffef0

08002104 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b38      	ldr	r3, [pc, #224]	; (80021fc <ETH_SetDMAConfig+0xf8>)
 800211a:	4013      	ands	r3, r2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	6811      	ldr	r1, [r2, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	430b      	orrs	r3, r1
 8002126:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800212a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	791b      	ldrb	r3, [r3, #4]
 8002130:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002136:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	7b1b      	ldrb	r3, [r3, #12]
 800213c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <ETH_SetDMAConfig+0xfc>)
 800214e:	4013      	ands	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	430b      	orrs	r3, r1
 8002158:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800215c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	7b5b      	ldrb	r3, [r3, #13]
 8002162:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <ETH_SetDMAConfig+0x100>)
 800217a:	4013      	ands	r3, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	430b      	orrs	r3, r1
 8002184:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002188:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	7d1b      	ldrb	r3, [r3, #20]
 8002194:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002196:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7f5b      	ldrb	r3, [r3, #29]
 800219c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <ETH_SetDMAConfig+0x104>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	68f9      	ldr	r1, [r7, #12]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021be:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7f1b      	ldrb	r3, [r3, #28]
 80021c6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <ETH_SetDMAConfig+0x108>)
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	68f9      	ldr	r1, [r7, #12]
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	ffff87fd 	.word	0xffff87fd
 8002200:	ffff2ffe 	.word	0xffff2ffe
 8002204:	fffec000 	.word	0xfffec000
 8002208:	ffc0efef 	.word	0xffc0efef
 800220c:	7fc0ffff 	.word	0x7fc0ffff

08002210 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0a4      	sub	sp, #144	; 0x90
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800221e:	2300      	movs	r3, #0
 8002220:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800224c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002258:	2300      	movs	r3, #0
 800225a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002268:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800226c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002274:	2300      	movs	r3, #0
 8002276:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800228a:	2300      	movs	r3, #0
 800228c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800228e:	2300      	movs	r3, #0
 8002290:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002292:	2300      	movs	r3, #0
 8002294:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80022a8:	2320      	movs	r3, #32
 80022aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80022ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80022ea:	2300      	movs	r3, #0
 80022ec:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fde6 	bl	8001ecc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002300:	2301      	movs	r3, #1
 8002302:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002304:	2301      	movs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800231a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800231e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002328:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002330:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fee1 	bl	8002104 <ETH_SetDMAConfig>
}
 8002342:	bf00      	nop
 8002344:	3790      	adds	r7, #144	; 0x90
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e01d      	b.n	8002394 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68d9      	ldr	r1, [r3, #12]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	3206      	adds	r2, #6
 800238a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3301      	adds	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d9de      	bls.n	8002358 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a8:	461a      	mov	r2, r3
 80023aa:	2303      	movs	r3, #3
 80023ac:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023cc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e023      	b.n	8002432 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	3212      	adds	r2, #18
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3301      	adds	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d9d8      	bls.n	80023ea <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	461a      	mov	r2, r3
 8002460:	2303      	movs	r3, #3
 8002462:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002472:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002486:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024a6:	4b89      	ldr	r3, [pc, #548]	; (80026cc <HAL_GPIO_Init+0x234>)
 80024a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024aa:	e194      	b.n	80027d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8186 	beq.w	80027d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d005      	beq.n	80024dc <HAL_GPIO_Init+0x44>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d130      	bne.n	800253e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002512:	2201      	movs	r2, #1
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0201 	and.w	r2, r3, #1
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d017      	beq.n	800257a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d123      	bne.n	80025ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	69b9      	ldr	r1, [r7, #24]
 80025ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0203 	and.w	r2, r3, #3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80e0 	beq.w	80027d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_GPIO_Init+0x238>)
 8002612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002616:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <HAL_GPIO_Init+0x238>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_GPIO_Init+0x238>)
 8002622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <HAL_GPIO_Init+0x23c>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <HAL_GPIO_Init+0x240>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d052      	beq.n	8002700 <HAL_GPIO_Init+0x268>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_GPIO_Init+0x244>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_GPIO_Init+0x22e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_GPIO_Init+0x248>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <HAL_GPIO_Init+0x22a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_GPIO_Init+0x24c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x226>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_GPIO_Init+0x250>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x222>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_GPIO_Init+0x254>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x21e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <HAL_GPIO_Init+0x258>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x21a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_GPIO_Init+0x25c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x216>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <HAL_GPIO_Init+0x260>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x212>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_GPIO_Init+0x264>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x20e>
 80026a2:	2309      	movs	r3, #9
 80026a4:	e02d      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026a6:	230a      	movs	r3, #10
 80026a8:	e02b      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e029      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e027      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e025      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e023      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e021      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026be:	2303      	movs	r3, #3
 80026c0:	e01f      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e01d      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e01b      	b.n	8002702 <HAL_GPIO_Init+0x26a>
 80026ca:	bf00      	nop
 80026cc:	58000080 	.word	0x58000080
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58000400 	.word	0x58000400
 80026d8:	58020000 	.word	0x58020000
 80026dc:	58020400 	.word	0x58020400
 80026e0:	58020800 	.word	0x58020800
 80026e4:	58020c00 	.word	0x58020c00
 80026e8:	58021000 	.word	0x58021000
 80026ec:	58021400 	.word	0x58021400
 80026f0:	58021800 	.word	0x58021800
 80026f4:	58021c00 	.word	0x58021c00
 80026f8:	58022000 	.word	0x58022000
 80026fc:	58022400 	.word	0x58022400
 8002700:	2300      	movs	r3, #0
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	f002 0203 	and.w	r2, r2, #3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	4093      	lsls	r3, r2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002712:	4938      	ldr	r1, [pc, #224]	; (80027f4 <HAL_GPIO_Init+0x35c>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f47f ae63 	bne.w	80024ac <HAL_GPIO_Init+0x14>
  }
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	58000400 	.word	0x58000400

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283c:	887a      	ldrh	r2, [r7, #2]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	041a      	lsls	r2, r3, #16
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43d9      	mvns	r1, r3
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	400b      	ands	r3, r1
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_HSEM_FastTake+0x2c>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3320      	adds	r3, #32
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_HSEM_FastTake+0x30>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	58026400 	.word	0x58026400
 8002890:	80000300 	.word	0x80000300

08002894 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800289e:	4906      	ldr	r1, [pc, #24]	; (80028b8 <HAL_HSEM_Release+0x24>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	58026400 	.word	0x58026400

080028bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	b08f      	sub	sp, #60	; 0x3c
 80028c0:	af0a      	add	r7, sp, #40	; 0x28
 80028c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e116      	b.n	8002afc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fe ff49 	bl	8001780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fd2d 	bl	800736c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	687e      	ldr	r6, [r7, #4]
 800291a:	466d      	mov	r5, sp
 800291c:	f106 0410 	add.w	r4, r6, #16
 8002920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800292c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002930:	1d33      	adds	r3, r6, #4
 8002932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	f004 fcab 	bl	8007290 <USB_CoreInit>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0d7      	b.n	8002afc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f004 fd1b 	bl	800738e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e04a      	b.n	80029f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	333d      	adds	r3, #61	; 0x3d
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	333c      	adds	r3, #60	; 0x3c
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	b298      	uxth	r0, r3
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3344      	adds	r3, #68	; 0x44
 800299a:	4602      	mov	r2, r0
 800299c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3340      	adds	r3, #64	; 0x40
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	3348      	adds	r3, #72	; 0x48
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	334c      	adds	r3, #76	; 0x4c
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3354      	adds	r3, #84	; 0x54
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	3301      	adds	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d3af      	bcc.n	800295e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e044      	b.n	8002a8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3b5      	bcc.n	8002a04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	687e      	ldr	r6, [r7, #4]
 8002aa0:	466d      	mov	r5, sp
 8002aa2:	f106 0410 	add.w	r4, r6, #16
 8002aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ab6:	1d33      	adds	r3, r6, #4
 8002ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aba:	6838      	ldr	r0, [r7, #0]
 8002abc:	f004 fcb4 	bl	8007428 <USB_DevInit>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e014      	b.n	8002afc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d102      	bne.n	8002af0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f80a 	bl	8002b04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fe72 	bl	80077de <USB_DevDisconnect>

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	10000003 	.word	0x10000003

08002b4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d00a      	beq.n	8002b76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e040      	b.n	8002bf4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e03e      	b.n	8002bf4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b7e:	491f      	ldr	r1, [pc, #124]	; (8002bfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b86:	f7fe ff2f 	bl	80019e8 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b8e:	f7fe ff2b 	bl	80019e8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b9c:	d901      	bls.n	8002ba2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e028      	b.n	8002bf4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	d1ee      	bne.n	8002b8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b1e      	cmp	r3, #30
 8002bb4:	d008      	beq.n	8002bc8 <HAL_PWREx_ConfigSupply+0x7c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8002bba:	d005      	beq.n	8002bc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b1d      	cmp	r3, #29
 8002bc0:	d002      	beq.n	8002bc8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b2d      	cmp	r3, #45	; 0x2d
 8002bc6:	d114      	bne.n	8002bf2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002bc8:	f7fe ff0e 	bl	80019e8 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bce:	e009      	b.n	8002be4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bd0:	f7fe ff0a 	bl	80019e8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bde:	d901      	bls.n	8002be4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e007      	b.n	8002bf4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_PWREx_ConfigSupply+0xb0>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d1ee      	bne.n	8002bd0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	58024800 	.word	0x58024800

08002c00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	58024800 	.word	0x58024800

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f000 bc1d 	b.w	800346e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8087 	beq.w	8002d50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b99      	ldr	r3, [pc, #612]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c4c:	4b96      	ldr	r3, [pc, #600]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d007      	beq.n	8002c68 <HAL_RCC_OscConfig+0x48>
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d110      	bne.n	8002c80 <HAL_RCC_OscConfig+0x60>
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b8f      	ldr	r3, [pc, #572]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d06c      	beq.n	8002d4e <HAL_RCC_OscConfig+0x12e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d168      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e3f6      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x78>
 8002c8a:	4b87      	ldr	r3, [pc, #540]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a86      	ldr	r2, [pc, #536]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e02e      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x9a>
 8002ca0:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7d      	ldr	r2, [pc, #500]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e01d      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0xbe>
 8002cc4:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a77      	ldr	r2, [pc, #476]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a74      	ldr	r2, [pc, #464]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd6>
 8002cde:	4b72      	ldr	r3, [pc, #456]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a71      	ldr	r2, [pc, #452]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d013      	beq.n	8002d26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fe73 	bl	80019e8 <HAL_GetTick>
 8002d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d06:	f7fe fe6f 	bl	80019e8 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	; 0x64
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e3aa      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d18:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0xe6>
 8002d24:	e014      	b.n	8002d50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fe5f 	bl	80019e8 <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fe5b 	bl	80019e8 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e396      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x10e>
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80cb 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5e:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d68:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_RCC_OscConfig+0x164>
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b18      	cmp	r3, #24
 8002d78:	d156      	bne.n	8002e28 <HAL_RCC_OscConfig+0x208>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d151      	bne.n	8002e28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d84:	4b48      	ldr	r3, [pc, #288]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_OscConfig+0x17c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e368      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 0219 	bic.w	r2, r3, #25
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	493f      	ldr	r1, [pc, #252]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dae:	f7fe fe1b 	bl	80019e8 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe fe17 	bl	80019e8 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e352      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc8:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	f7fe fe38 	bl	8001a48 <HAL_GetREVID>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d817      	bhi.n	8002e12 <HAL_RCC_OscConfig+0x1f2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d108      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1dc>
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002df2:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfa:	e07b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	031b      	lsls	r3, r3, #12
 8002e0a:	4927      	ldr	r1, [pc, #156]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e10:	e070      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	4921      	ldr	r1, [pc, #132]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e26:	e065      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d048      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 0219 	bic.w	r2, r3, #25
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	491a      	ldr	r1, [pc, #104]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fe fdd1 	bl	80019e8 <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fe fdcd 	bl	80019e8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e308      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	f7fe fdee 	bl	8001a48 <HAL_GetREVID>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d81a      	bhi.n	8002eac <HAL_RCC_OscConfig+0x28c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d108      	bne.n	8002e90 <HAL_RCC_OscConfig+0x270>
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8c:	6053      	str	r3, [r2, #4]
 8002e8e:	e031      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	031b      	lsls	r3, r3, #12
 8002e9e:	4902      	ldr	r1, [pc, #8]	; (8002ea8 <HAL_RCC_OscConfig+0x288>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e026      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
 8002ea6:	bf00      	nop
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	4b9a      	ldr	r3, [pc, #616]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	4997      	ldr	r1, [pc, #604]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
 8002ec0:	e018      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b95      	ldr	r3, [pc, #596]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a94      	ldr	r2, [pc, #592]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe fd8b 	bl	80019e8 <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fd87 	bl	80019e8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e2c2      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ee8:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a9 	beq.w	8003054 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f02:	4b85      	ldr	r3, [pc, #532]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f0c:	4b82      	ldr	r3, [pc, #520]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d007      	beq.n	8002f28 <HAL_RCC_OscConfig+0x308>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b18      	cmp	r3, #24
 8002f1c:	d13a      	bne.n	8002f94 <HAL_RCC_OscConfig+0x374>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d135      	bne.n	8002f94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f28:	4b7b      	ldr	r3, [pc, #492]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_OscConfig+0x320>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e296      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f40:	f7fe fd82 	bl	8001a48 <HAL_GetREVID>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d817      	bhi.n	8002f7e <HAL_RCC_OscConfig+0x35e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d108      	bne.n	8002f68 <HAL_RCC_OscConfig+0x348>
 8002f56:	4b70      	ldr	r3, [pc, #448]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f5e:	4a6e      	ldr	r2, [pc, #440]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f66:	e075      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f68:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	069b      	lsls	r3, r3, #26
 8002f76:	4968      	ldr	r1, [pc, #416]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f7c:	e06a      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f7e:	4b66      	ldr	r3, [pc, #408]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	4962      	ldr	r1, [pc, #392]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f92:	e05f      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d042      	beq.n	8003022 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fd1e 	bl	80019e8 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fd1a 	bl	80019e8 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e255      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc2:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fce:	f7fe fd3b 	bl	8001a48 <HAL_GetREVID>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d817      	bhi.n	800300c <HAL_RCC_OscConfig+0x3ec>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d108      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3d6>
 8002fe4:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fec:	4a4a      	ldr	r2, [pc, #296]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ff2:	6053      	str	r3, [r2, #4]
 8002ff4:	e02e      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
 8002ff6:	4b48      	ldr	r3, [pc, #288]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	4944      	ldr	r1, [pc, #272]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
 800300a:	e023      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
 800300c:	4b42      	ldr	r3, [pc, #264]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	493f      	ldr	r1, [pc, #252]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	4313      	orrs	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
 8003020:	e018      	b.n	8003054 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003022:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800302c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe fcdb 	bl	80019e8 <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003036:	f7fe fcd7 	bl	80019e8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e212      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003048:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d036      	beq.n	80030ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d019      	beq.n	800309c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	4a2a      	ldr	r2, [pc, #168]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fcb8 	bl	80019e8 <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe fcb4 	bl	80019e8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1ef      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x45c>
 800309a:	e018      	b.n	80030ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fc9e 	bl	80019e8 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fc9a 	bl	80019e8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1d5      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d039      	beq.n	800314e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01c      	beq.n	800311c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fc7b 	bl	80019e8 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe fc77 	bl	80019e8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1b2      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x4d6>
 8003114:	e01b      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
 8003116:	bf00      	nop
 8003118:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800311c:	4b9b      	ldr	r3, [pc, #620]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a9a      	ldr	r2, [pc, #616]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003126:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003128:	f7fe fc5e 	bl	80019e8 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003130:	f7fe fc5a 	bl	80019e8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e195      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003142:	4b92      	ldr	r3, [pc, #584]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8081 	beq.w	800325e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800315c:	4b8c      	ldr	r3, [pc, #560]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a8b      	ldr	r2, [pc, #556]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003168:	f7fe fc3e 	bl	80019e8 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe fc3a 	bl	80019e8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e175      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003182:	4b83      	ldr	r3, [pc, #524]	; (8003390 <HAL_RCC_OscConfig+0x770>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_OscConfig+0x584>
 8003196:	4b7d      	ldr	r3, [pc, #500]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a7c      	ldr	r2, [pc, #496]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	e02d      	b.n	8003200 <HAL_RCC_OscConfig+0x5e0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5a6>
 80031ac:	4b77      	ldr	r3, [pc, #476]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a76      	ldr	r2, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	4b74      	ldr	r3, [pc, #464]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a73      	ldr	r2, [pc, #460]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e01c      	b.n	8003200 <HAL_RCC_OscConfig+0x5e0>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c8>
 80031ce:	4b6f      	ldr	r3, [pc, #444]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a6e      	ldr	r2, [pc, #440]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a6b      	ldr	r2, [pc, #428]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x5e0>
 80031e8:	4b68      	ldr	r3, [pc, #416]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a67      	ldr	r2, [pc, #412]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	4b65      	ldr	r3, [pc, #404]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a64      	ldr	r2, [pc, #400]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fbee 	bl	80019e8 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe fbea 	bl	80019e8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e123      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <HAL_RCC_OscConfig+0x5f0>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe fbd8 	bl	80019e8 <HAL_GetTick>
 8003238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe fbd4 	bl	80019e8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e10d      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003252:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8102 	beq.w	800346c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003268:	4b48      	ldr	r3, [pc, #288]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003270:	2b18      	cmp	r3, #24
 8003272:	f000 80bd 	beq.w	80033f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b02      	cmp	r3, #2
 800327c:	f040 809e 	bne.w	80033bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a41      	ldr	r2, [pc, #260]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800328a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fbac 	bl	80019e8 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe fba8 	bl	80019e8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e0e3      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b6:	4b37      	ldr	r3, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x774>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	430a      	orrs	r2, r1
 80032c6:	4931      	ldr	r1, [pc, #196]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	628b      	str	r3, [r1, #40]	; 0x28
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	3b01      	subs	r3, #1
 80032d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	3b01      	subs	r3, #1
 80032dc:	025b      	lsls	r3, r3, #9
 80032de:	b29b      	uxth	r3, r3
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	3b01      	subs	r3, #1
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032fc:	4923      	ldr	r1, [pc, #140]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003302:	4b22      	ldr	r3, [pc, #136]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800330e:	4b1f      	ldr	r3, [pc, #124]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_RCC_OscConfig+0x778>)
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800331a:	00d2      	lsls	r2, r2, #3
 800331c:	491b      	ldr	r1, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	f023 020c 	bic.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f023 0202 	bic.w	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	4912      	ldr	r1, [pc, #72]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a0d      	ldr	r2, [pc, #52]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	4a07      	ldr	r2, [pc, #28]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_RCC_OscConfig+0x76c>)
 800337c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fb31 	bl	80019e8 <HAL_GetTick>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003388:	e011      	b.n	80033ae <HAL_RCC_OscConfig+0x78e>
 800338a:	bf00      	nop
 800338c:	58024400 	.word	0x58024400
 8003390:	58024800 	.word	0x58024800
 8003394:	fffffc0c 	.word	0xfffffc0c
 8003398:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fb24 	bl	80019e8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e05f      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x77c>
 80033ba:	e057      	b.n	800346c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fb0e 	bl	80019e8 <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe fb0a 	bl	80019e8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e045      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x7b0>
 80033ee:	e03d      	b.n	800346c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_OscConfig+0x858>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b01      	cmp	r3, #1
 8003402:	d031      	beq.n	8003468 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d12a      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d122      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d11a      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	0a5b      	lsrs	r3, r3, #9
 8003436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d111      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d108      	bne.n	8003468 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3730      	adds	r7, #48	; 0x30
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400

0800347c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e19c      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b8a      	ldr	r3, [pc, #552]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d910      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b87      	ldr	r3, [pc, #540]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 020f 	bic.w	r2, r3, #15
 80034a6:	4985      	ldr	r1, [pc, #532]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b83      	ldr	r3, [pc, #524]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e184      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d8:	429a      	cmp	r2, r3
 80034da:	d908      	bls.n	80034ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034dc:	4b78      	ldr	r3, [pc, #480]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	4975      	ldr	r1, [pc, #468]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d010      	beq.n	800351c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003506:	429a      	cmp	r2, r3
 8003508:	d908      	bls.n	800351c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800350a:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	496a      	ldr	r1, [pc, #424]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003518:	4313      	orrs	r3, r2
 800351a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	4b64      	ldr	r3, [pc, #400]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003534:	429a      	cmp	r2, r3
 8003536:	d908      	bls.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003538:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	495e      	ldr	r1, [pc, #376]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003546:	4313      	orrs	r3, r2
 8003548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003562:	429a      	cmp	r2, r3
 8003564:	d908      	bls.n	8003578 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4953      	ldr	r1, [pc, #332]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003574:	4313      	orrs	r3, r2
 8003576:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	429a      	cmp	r2, r3
 8003592:	d908      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f023 020f 	bic.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4947      	ldr	r1, [pc, #284]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d055      	beq.n	800365e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4940      	ldr	r1, [pc, #256]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d121      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0f6      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0ea      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0de      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800360c:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d6      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f023 0207 	bic.w	r2, r3, #7
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4925      	ldr	r1, [pc, #148]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800362a:	4313      	orrs	r3, r2
 800362c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fe f9db 	bl	80019e8 <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003634:	e00a      	b.n	800364c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003636:	f7fe f9d7 	bl	80019e8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e0be      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364c:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	429a      	cmp	r2, r3
 800365c:	d1eb      	bne.n	8003636 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	429a      	cmp	r2, r3
 8003678:	d208      	bcs.n	800368c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f023 020f 	bic.w	r2, r3, #15
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	490e      	ldr	r1, [pc, #56]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 8003688:	4313      	orrs	r3, r2
 800368a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d214      	bcs.n	80036c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	4906      	ldr	r1, [pc, #24]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e086      	b.n	80037ca <HAL_RCC_ClockConfig+0x34e>
 80036bc:	52002000 	.word	0x52002000
 80036c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d010      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036dc:	429a      	cmp	r2, r3
 80036de:	d208      	bcs.n	80036f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036e0:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4939      	ldr	r1, [pc, #228]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d010      	beq.n	8003720 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370a:	429a      	cmp	r2, r3
 800370c:	d208      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	492e      	ldr	r1, [pc, #184]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003738:	429a      	cmp	r2, r3
 800373a:	d208      	bcs.n	800374e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	4922      	ldr	r1, [pc, #136]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800374a:	4313      	orrs	r3, r2
 800374c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d010      	beq.n	800377c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003766:	429a      	cmp	r2, r3
 8003768:	d208      	bcs.n	800377c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4917      	ldr	r1, [pc, #92]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003778:	4313      	orrs	r3, r2
 800377a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800377c:	f000 f834 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	4912      	ldr	r1, [pc, #72]	; (80037d8 <HAL_RCC_ClockConfig+0x35c>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x358>)
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <HAL_RCC_ClockConfig+0x35c>)
 80037a4:	5cd3      	ldrb	r3, [r2, r3]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x360>)
 80037b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037b4:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <HAL_RCC_ClockConfig+0x364>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_RCC_ClockConfig+0x368>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe f8c8 	bl	8001954 <HAL_InitTick>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
 80037d8:	08007914 	.word	0x08007914
 80037dc:	24000004 	.word	0x24000004
 80037e0:	24000000 	.word	0x24000000
 80037e4:	2400000c 	.word	0x2400000c

080037e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ee:	4bb3      	ldr	r3, [pc, #716]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f6:	2b18      	cmp	r3, #24
 80037f8:	f200 8155 	bhi.w	8003aa6 <HAL_RCC_GetSysClockFreq+0x2be>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003869 	.word	0x08003869
 8003808:	08003aa7 	.word	0x08003aa7
 800380c:	08003aa7 	.word	0x08003aa7
 8003810:	08003aa7 	.word	0x08003aa7
 8003814:	08003aa7 	.word	0x08003aa7
 8003818:	08003aa7 	.word	0x08003aa7
 800381c:	08003aa7 	.word	0x08003aa7
 8003820:	08003aa7 	.word	0x08003aa7
 8003824:	0800388f 	.word	0x0800388f
 8003828:	08003aa7 	.word	0x08003aa7
 800382c:	08003aa7 	.word	0x08003aa7
 8003830:	08003aa7 	.word	0x08003aa7
 8003834:	08003aa7 	.word	0x08003aa7
 8003838:	08003aa7 	.word	0x08003aa7
 800383c:	08003aa7 	.word	0x08003aa7
 8003840:	08003aa7 	.word	0x08003aa7
 8003844:	08003895 	.word	0x08003895
 8003848:	08003aa7 	.word	0x08003aa7
 800384c:	08003aa7 	.word	0x08003aa7
 8003850:	08003aa7 	.word	0x08003aa7
 8003854:	08003aa7 	.word	0x08003aa7
 8003858:	08003aa7 	.word	0x08003aa7
 800385c:	08003aa7 	.word	0x08003aa7
 8003860:	08003aa7 	.word	0x08003aa7
 8003864:	0800389b 	.word	0x0800389b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003868:	4b94      	ldr	r3, [pc, #592]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003874:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	08db      	lsrs	r3, r3, #3
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	4a90      	ldr	r2, [pc, #576]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
 8003884:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003886:	e111      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003888:	4b8d      	ldr	r3, [pc, #564]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800388a:	61bb      	str	r3, [r7, #24]
    break;
 800388c:	e10e      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800388e:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003890:	61bb      	str	r3, [r7, #24]
    break;
 8003892:	e10b      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003894:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003896:	61bb      	str	r3, [r7, #24]
    break;
 8003898:	e108      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038a4:	4b85      	ldr	r3, [pc, #532]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038b0:	4b82      	ldr	r3, [pc, #520]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80038ba:	4b80      	ldr	r3, [pc, #512]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	08db      	lsrs	r3, r3, #3
 80038c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80e1 	beq.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f000 8083 	beq.w	80039ec <HAL_RCC_GetSysClockFreq+0x204>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	f200 80a1 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x248>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x114>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d056      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038fa:	e099      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038fc:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02d      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003908:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	4a6b      	ldr	r2, [pc, #428]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003942:	ed97 6a02 	vldr	s12, [r7, #8]
 8003946:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003962:	e087      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b51      	ldr	r3, [pc, #324]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a02 	vldr	s12, [r7, #8]
 800398a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039a6:	e065      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b40      	ldr	r3, [pc, #256]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ea:	e043      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ad8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a2e:	e021      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	0a5b      	lsrs	r3, r3, #9
 8003a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7e:	3301      	adds	r3, #1
 8003a80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a98:	ee17 3a90 	vmov	r3, s15
 8003a9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a9e:	e005      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
    break;
 8003aa4:	e002      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa8:	61bb      	str	r3, [r7, #24]
    break;
 8003aaa:	bf00      	nop
  }

  return sysclockfreq;
 8003aac:	69bb      	ldr	r3, [r7, #24]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	03d09000 	.word	0x03d09000
 8003ac4:	003d0900 	.word	0x003d0900
 8003ac8:	007a1200 	.word	0x007a1200
 8003acc:	46000000 	.word	0x46000000
 8003ad0:	4c742400 	.word	0x4c742400
 8003ad4:	4a742400 	.word	0x4a742400
 8003ad8:	4af42400 	.word	0x4af42400

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ae2:	f7ff fe81 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490f      	ldr	r1, [pc, #60]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a07      	ldr	r2, [pc, #28]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b1a:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	08007914 	.word	0x08007914
 8003b34:	24000004 	.word	0x24000004
 8003b38:	24000000 	.word	0x24000000

08003b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b40:	f7ff ffcc 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4904      	ldr	r1, [pc, #16]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58024400 	.word	0x58024400
 8003b64:	08007914 	.word	0x08007914

08003b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b6c:	f7ff ffb6 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	08007914 	.word	0x08007914

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d03f      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bb8:	d02a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bbe:	d824      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc4:	d018      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bca:	d81e      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd4:	d007      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bd6:	e018      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd8:	4ba3      	ldr	r3, [pc, #652]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	4aa2      	ldr	r2, [pc, #648]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003be4:	e015      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 f9d5 	bl	8004f9c <RCCEx_PLL2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003bf6:	e00c      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 fa7e 	bl	8005100 <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c18:	4b93      	ldr	r3, [pc, #588]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c24:	4990      	ldr	r1, [pc, #576]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	650b      	str	r3, [r1, #80]	; 0x50
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d03d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d826      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c61 	.word	0x08003c61
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c99 	.word	0x08003c99
 8003c5c:	08003c99 	.word	0x08003c99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a80      	ldr	r2, [pc, #512]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c6c:	e015      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 f991 	bl	8004f9c <RCCEx_PLL2_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c7e:	e00c      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3324      	adds	r3, #36	; 0x24
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 fa3a 	bl	8005100 <RCCEx_PLL3_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
      break;
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ca0:	4b71      	ldr	r3, [pc, #452]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	496e      	ldr	r1, [pc, #440]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	650b      	str	r3, [r1, #80]	; 0x50
 8003cb2:	e001      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d042      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ccc:	d02b      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d825      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003cd4:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd6:	d028      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8003cda:	d821      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003cdc:	2b80      	cmp	r3, #128	; 0x80
 8003cde:	d016      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d81d      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d007      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003cec:	e018      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cee:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	4a5d      	ldr	r2, [pc, #372]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cfa:	e017      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f94a 	bl	8004f9c <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e00e      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 f9f3 	bl	8005100 <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d32:	4b4d      	ldr	r3, [pc, #308]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3e:	494a      	ldr	r1, [pc, #296]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	650b      	str	r3, [r1, #80]	; 0x50
 8003d44:	e001      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d049      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d60:	d030      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d66:	d82a      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d6c:	d02c      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003d6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d72:	d824      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d78:	d018      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7e:	d81e      	bhi.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d88:	d007      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003d8a:	e018      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8c:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d98:	e017      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 f8fb 	bl	8004f9c <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003daa:	e00e      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3324      	adds	r3, #36	; 0x24
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f9a4 	bl	8005100 <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dbc:	e005      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dde:	4922      	ldr	r1, [pc, #136]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	658b      	str	r3, [r1, #88]	; 0x58
 8003de4:	e001      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04b      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e00:	d030      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e06:	d82a      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e0c:	d02e      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003e0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e12:	d824      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e18:	d018      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e1e:	d81e      	bhi.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e28:	d007      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003e2a:	e018      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e38:	e019      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f8ab 	bl	8004f9c <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e4a:	e010      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3324      	adds	r3, #36	; 0x24
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f954 	bl	8005100 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e5c:	e007      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
      break;
 8003e62:	e004      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003e64:	bf00      	nop
 8003e66:	e002      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003e68:	58024400 	.word	0x58024400
      break;
 8003e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e74:	4b99      	ldr	r3, [pc, #612]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e82:	4996      	ldr	r1, [pc, #600]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	658b      	str	r3, [r1, #88]	; 0x58
 8003e88:	e001      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d032      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	2b30      	cmp	r3, #48	; 0x30
 8003ea0:	d01c      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d817      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d813      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb6:	4b89      	ldr	r3, [pc, #548]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4a88      	ldr	r2, [pc, #544]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ec2:	e00e      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 f866 	bl	8004f9c <RCCEx_PLL2_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ed4:	e005      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eda:	e002      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003edc:	bf00      	nop
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ee8:	4b7c      	ldr	r3, [pc, #496]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	4979      	ldr	r1, [pc, #484]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003efa:	e001      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d047      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f14:	d030      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f1a:	d82a      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f20:	d02c      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f26:	d824      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2c:	d018      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f32:	d81e      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d007      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003f3e:	e018      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f40:	4b66      	ldr	r3, [pc, #408]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f4c:	e017      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f821 	bl	8004f9c <RCCEx_PLL2_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e00e      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f8ca 	bl	8005100 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f70:	e005      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f84:	4b55      	ldr	r3, [pc, #340]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	4952      	ldr	r1, [pc, #328]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	650b      	str	r3, [r1, #80]	; 0x50
 8003f96:	e001      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d049      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb0:	d02e      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb6:	d828      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fbc:	d02a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003fbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fc2:	d822      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fc8:	d026      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003fca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fce:	d81c      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fda:	d816      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01d      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d111      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ffd5 	bl	8004f9c <RCCEx_PLL2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ff6:	e012      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3324      	adds	r3, #36	; 0x24
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 f87e 	bl	8005100 <RCCEx_PLL3_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004008:	e009      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
      break;
 800400e:	e006      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004010:	bf00      	nop
 8004012:	e004      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800401c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401e:	7dfb      	ldrb	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004030:	492a      	ldr	r1, [pc, #168]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004032:	4313      	orrs	r3, r2
 8004034:	650b      	str	r3, [r1, #80]	; 0x50
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d04d      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004052:	d02e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004058:	d828      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405e:	d02a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d822      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800406a:	d026      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x526>
 800406c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004070:	d81c      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004076:	d010      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407c:	d816      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01d      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004086:	d111      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff84 	bl	8004f9c <RCCEx_PLL2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004098:	e012      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3324      	adds	r3, #36	; 0x24
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f001 f82d 	bl	8005100 <RCCEx_PLL3_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040aa:	e009      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
      break;
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80040be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040d4:	4901      	ldr	r1, [pc, #4]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	658b      	str	r3, [r1, #88]	; 0x58
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80040dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02f      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f8:	d00e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fe:	d814      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004108:	d10f      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410a:	4baf      	ldr	r3, [pc, #700]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	4aae      	ldr	r2, [pc, #696]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 ff3c 	bl	8004f9c <RCCEx_PLL2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
      break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004138:	4ba3      	ldr	r3, [pc, #652]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004144:	49a0      	ldr	r1, [pc, #640]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004146:	4313      	orrs	r3, r2
 8004148:	650b      	str	r3, [r1, #80]	; 0x50
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d032      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	2b03      	cmp	r3, #3
 8004162:	d81b      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	080041a3 	.word	0x080041a3
 8004170:	0800417d 	.word	0x0800417d
 8004174:	0800418b 	.word	0x0800418b
 8004178:	080041a3 	.word	0x080041a3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4b92      	ldr	r3, [pc, #584]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4a91      	ldr	r2, [pc, #580]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004188:	e00c      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 ff03 	bl	8004f9c <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800419a:	e003      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
      break;
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80041a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041aa:	4b87      	ldr	r3, [pc, #540]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4984      	ldr	r1, [pc, #528]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041bc:	e001      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8086 	beq.w	80042dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d0:	4b7e      	ldr	r3, [pc, #504]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7d      	ldr	r2, [pc, #500]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041dc:	f7fd fc04 	bl	80019e8 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e4:	f7fd fc00 	bl	80019e8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d902      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	75fb      	strb	r3, [r7, #23]
        break;
 80041f6:	e005      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f8:	4b74      	ldr	r3, [pc, #464]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0ef      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d166      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800420a:	4b6f      	ldr	r3, [pc, #444]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800420c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004214:	4053      	eors	r3, r2
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	2b00      	cmp	r3, #0
 800421c:	d013      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800421e:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004226:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004228:	4b67      	ldr	r3, [pc, #412]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a66      	ldr	r2, [pc, #408]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004234:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a63      	ldr	r2, [pc, #396]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004240:	4a61      	ldr	r2, [pc, #388]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800424c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004250:	d115      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fd fbc9 	bl	80019e8 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004258:	e00b      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fd fbc5 	bl	80019e8 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d902      	bls.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	75fb      	strb	r3, [r7, #23]
            break;
 8004270:	e005      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004272:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ed      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d126      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800428a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004292:	d10d      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004294:	4b4c      	ldr	r3, [pc, #304]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042a2:	0919      	lsrs	r1, r3, #4
 80042a4:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80042a6:	400b      	ands	r3, r1
 80042a8:	4947      	ldr	r1, [pc, #284]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]
 80042ae:	e005      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80042b0:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	4a44      	ldr	r2, [pc, #272]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042ba:	6113      	str	r3, [r2, #16]
 80042bc:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	493f      	ldr	r1, [pc, #252]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	670b      	str	r3, [r1, #112]	; 0x70
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	75bb      	strb	r3, [r7, #22]
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8085 	beq.w	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ee:	2b28      	cmp	r3, #40	; 0x28
 80042f0:	d866      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	080043d5 	.word	0x080043d5
 80042fc:	080043c1 	.word	0x080043c1
 8004300:	080043c1 	.word	0x080043c1
 8004304:	080043c1 	.word	0x080043c1
 8004308:	080043c1 	.word	0x080043c1
 800430c:	080043c1 	.word	0x080043c1
 8004310:	080043c1 	.word	0x080043c1
 8004314:	080043c1 	.word	0x080043c1
 8004318:	0800439d 	.word	0x0800439d
 800431c:	080043c1 	.word	0x080043c1
 8004320:	080043c1 	.word	0x080043c1
 8004324:	080043c1 	.word	0x080043c1
 8004328:	080043c1 	.word	0x080043c1
 800432c:	080043c1 	.word	0x080043c1
 8004330:	080043c1 	.word	0x080043c1
 8004334:	080043c1 	.word	0x080043c1
 8004338:	080043af 	.word	0x080043af
 800433c:	080043c1 	.word	0x080043c1
 8004340:	080043c1 	.word	0x080043c1
 8004344:	080043c1 	.word	0x080043c1
 8004348:	080043c1 	.word	0x080043c1
 800434c:	080043c1 	.word	0x080043c1
 8004350:	080043c1 	.word	0x080043c1
 8004354:	080043c1 	.word	0x080043c1
 8004358:	080043d5 	.word	0x080043d5
 800435c:	080043c1 	.word	0x080043c1
 8004360:	080043c1 	.word	0x080043c1
 8004364:	080043c1 	.word	0x080043c1
 8004368:	080043c1 	.word	0x080043c1
 800436c:	080043c1 	.word	0x080043c1
 8004370:	080043c1 	.word	0x080043c1
 8004374:	080043c1 	.word	0x080043c1
 8004378:	080043d5 	.word	0x080043d5
 800437c:	080043c1 	.word	0x080043c1
 8004380:	080043c1 	.word	0x080043c1
 8004384:	080043c1 	.word	0x080043c1
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d5 	.word	0x080043d5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fdfa 	bl	8004f9c <RCCEx_PLL2_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043ac:	e013      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3324      	adds	r3, #36	; 0x24
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fea3 	bl	8005100 <RCCEx_PLL3_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043be:	e00a      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
      break;
 80043c4:	e007      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043c6:	bf00      	nop
 80043c8:	58024400 	.word	0x58024400
 80043cc:	58024800 	.word	0x58024800
 80043d0:	00ffffcf 	.word	0x00ffffcf
      break;
 80043d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043dc:	4b96      	ldr	r3, [pc, #600]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e8:	4993      	ldr	r1, [pc, #588]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	654b      	str	r3, [r1, #84]	; 0x54
 80043ee:	e001      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d038      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004404:	2b05      	cmp	r3, #5
 8004406:	d821      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004408:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004453 	.word	0x08004453
 8004414:	08004429 	.word	0x08004429
 8004418:	0800443b 	.word	0x0800443b
 800441c:	08004453 	.word	0x08004453
 8004420:	08004453 	.word	0x08004453
 8004424:	08004453 	.word	0x08004453
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fdb4 	bl	8004f9c <RCCEx_PLL2_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004438:	e00c      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3324      	adds	r3, #36	; 0x24
 800443e:	2101      	movs	r1, #1
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fe5d 	bl	8005100 <RCCEx_PLL3_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75fb      	strb	r3, [r7, #23]
      break;
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800445a:	4b77      	ldr	r3, [pc, #476]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	f023 0207 	bic.w	r2, r3, #7
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	4974      	ldr	r1, [pc, #464]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004468:	4313      	orrs	r3, r2
 800446a:	654b      	str	r3, [r1, #84]	; 0x54
 800446c:	e001      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	2b05      	cmp	r3, #5
 8004486:	d821      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044d3 	.word	0x080044d3
 8004494:	080044a9 	.word	0x080044a9
 8004498:	080044bb 	.word	0x080044bb
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044d3 	.word	0x080044d3
 80044a4:	080044d3 	.word	0x080044d3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fd74 	bl	8004f9c <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80044b8:	e00c      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	2101      	movs	r1, #1
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fe1d 	bl	8005100 <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80044d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044da:	4b57      	ldr	r3, [pc, #348]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	f023 0207 	bic.w	r2, r3, #7
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	4953      	ldr	r1, [pc, #332]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	658b      	str	r3, [r1, #88]	; 0x58
 80044ee:	e001      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d04b      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450a:	d02e      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800450c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004510:	d828      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d02a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d822      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800451e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004522:	d026      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004528:	d81c      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800452a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452e:	d010      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d816      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01d      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800453a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800453e:	d111      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fd28 	bl	8004f9c <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004550:	e012      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3324      	adds	r3, #36	; 0x24
 8004556:	2102      	movs	r1, #2
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fdd1 	bl	8005100 <RCCEx_PLL3_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004562:	e009      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]
      break;
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800456a:	bf00      	nop
 800456c:	e004      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800456e:	bf00      	nop
 8004570:	e002      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458c:	492a      	ldr	r1, [pc, #168]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	654b      	str	r3, [r1, #84]	; 0x54
 8004592:	e001      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d04d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ae:	d02e      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80045b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045b4:	d828      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d02a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d822      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c6:	d026      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80045c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045cc:	d81c      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	d010      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d8:	d816      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01d      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e2:	d111      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fcd6 	bl	8004f9c <RCCEx_PLL2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045f4:	e012      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	2102      	movs	r1, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fd7f 	bl	8005100 <RCCEx_PLL3_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800460e:	bf00      	nop
 8004610:	e004      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800461a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004630:	4901      	ldr	r1, [pc, #4]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	658b      	str	r3, [r1, #88]	; 0x58
 8004636:	e003      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d04b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004652:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004656:	d02e      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004658:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800465c:	d828      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004662:	d02a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004668:	d822      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800466a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800466e:	d026      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004670:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004674:	d81c      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467a:	d010      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800467c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004680:	d816      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01d      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468a:	d111      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fc82 	bl	8004f9c <RCCEx_PLL2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800469c:	e012      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fd2b 	bl	8005100 <RCCEx_PLL3_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046ae:	e009      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
      break;
 80046b4:	e006      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046b6:	bf00      	nop
 80046b8:	e004      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80046c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046ca:	4b9d      	ldr	r3, [pc, #628]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d8:	4999      	ldr	r1, [pc, #612]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	658b      	str	r3, [r1, #88]	; 0x58
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d10a      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	2102      	movs	r1, #2
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fcfc 	bl	8005100 <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004712:	4b8b      	ldr	r3, [pc, #556]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	4987      	ldr	r1, [pc, #540]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004722:	4313      	orrs	r3, r2
 8004724:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473c:	d10a      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3324      	adds	r3, #36	; 0x24
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fcdb 	bl	8005100 <RCCEx_PLL3_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004754:	4b7a      	ldr	r3, [pc, #488]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004762:	4977      	ldr	r1, [pc, #476]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004764:	4313      	orrs	r3, r2
 8004766:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d034      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800477a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477e:	d01d      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004784:	d817      	bhi.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d009      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004790:	e011      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fbff 	bl	8004f9c <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047a2:	e00c      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3324      	adds	r3, #36	; 0x24
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fca8 	bl	8005100 <RCCEx_PLL3_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047b4:	e003      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80047bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c4:	4b5e      	ldr	r3, [pc, #376]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047d2:	495b      	ldr	r1, [pc, #364]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	658b      	str	r3, [r1, #88]	; 0x58
 80047d8:	e001      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d033      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047f4:	d01c      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80047f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047fa:	d816      	bhi.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80047fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004800:	d003      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004806:	d007      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004808:	e00f      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800480a:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4a4c      	ldr	r2, [pc, #304]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004816:	e00c      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3324      	adds	r3, #36	; 0x24
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fc6e 	bl	8005100 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004828:	e003      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
      break;
 800482e:	e000      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004846:	493e      	ldr	r1, [pc, #248]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004848:	4313      	orrs	r3, r2
 800484a:	654b      	str	r3, [r1, #84]	; 0x54
 800484c:	e001      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d029      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d007      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800486c:	e00f      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4a33      	ldr	r2, [pc, #204]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800487a:	e00b      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2102      	movs	r1, #2
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fb8a 	bl	8004f9c <RCCEx_PLL2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      break;
 8004892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800489a:	4b29      	ldr	r3, [pc, #164]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	4926      	ldr	r1, [pc, #152]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048ac:	e001      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3324      	adds	r3, #36	; 0x24
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fc1b 	bl	8005100 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d033      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e8:	d017      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80048ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ee:	d811      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d013      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80048f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fa:	d80b      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004904:	d106      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004912:	e007      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	75fb      	strb	r3, [r7, #23]
      break;
 8004918:	e004      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004936:	4902      	ldr	r1, [pc, #8]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004938:	4313      	orrs	r3, r2
 800493a:	654b      	str	r3, [r1, #84]	; 0x54
 800493c:	e004      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	492e      	ldr	r1, [pc, #184]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004962:	4313      	orrs	r3, r2
 8004964:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004980:	4926      	ldr	r1, [pc, #152]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499e:	491f      	ldr	r1, [pc, #124]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049ba:	6113      	str	r3, [r2, #16]
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049c6:	4915      	ldr	r1, [pc, #84]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da08      	bge.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e0:	490e      	ldr	r1, [pc, #56]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	4906      	ldr	r1, [pc, #24]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a06:	7dbb      	ldrb	r3, [r7, #22]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	58024400 	.word	0x58024400

08004a20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a24:	f7ff f85a 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4904      	ldr	r1, [pc, #16]	; (8004a48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	58024400 	.word	0x58024400
 8004a48:	08007914 	.word	0x08007914

08004a4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a54:	4ba1      	ldr	r3, [pc, #644]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004a5e:	4b9f      	ldr	r3, [pc, #636]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	0b1b      	lsrs	r3, r3, #12
 8004a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a6a:	4b9c      	ldr	r3, [pc, #624]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004a76:	4b99      	ldr	r3, [pc, #612]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	08db      	lsrs	r3, r3, #3
 8004a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8111 	beq.w	8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	f000 8083 	beq.w	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	f200 80a1 	bhi.w	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d056      	beq.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ab6:	e099      	b.n	8004bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab8:	4b88      	ldr	r3, [pc, #544]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02d      	beq.n	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ac4:	4b85      	ldr	r3, [pc, #532]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	08db      	lsrs	r3, r3, #3
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	4a84      	ldr	r2, [pc, #528]	; (8004ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b7b      	ldr	r3, [pc, #492]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b1e:	e087      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b62:	e065      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ba6:	e043      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b48      	ldr	r3, [pc, #288]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bea:	e021      	b.n	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	0a5b      	lsrs	r3, r3, #9
 8004c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c56:	ee17 2a90 	vmov	r2, s15
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c84:	ee17 2a90 	vmov	r2, s15
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb2:	ee17 2a90 	vmov	r2, s15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cba:	e008      	b.n	8004cce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
}
 8004cce:	bf00      	nop
 8004cd0:	3724      	adds	r7, #36	; 0x24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	03d09000 	.word	0x03d09000
 8004ce4:	46000000 	.word	0x46000000
 8004ce8:	4c742400 	.word	0x4c742400
 8004cec:	4a742400 	.word	0x4a742400
 8004cf0:	4af42400 	.word	0x4af42400

08004cf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cfc:	4ba1      	ldr	r3, [pc, #644]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d06:	4b9f      	ldr	r3, [pc, #636]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	0d1b      	lsrs	r3, r3, #20
 8004d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d12:	4b9c      	ldr	r3, [pc, #624]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d1e:	4b99      	ldr	r3, [pc, #612]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8111 	beq.w	8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	f000 8083 	beq.w	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	f200 80a1 	bhi.w	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d056      	beq.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d5e:	e099      	b.n	8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d60:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d02d      	beq.n	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d6c:	4b85      	ldr	r3, [pc, #532]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	4a84      	ldr	r2, [pc, #528]	; (8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b7b      	ldr	r3, [pc, #492]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004dc6:	e087      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b6a      	ldr	r3, [pc, #424]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e0a:	e065      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b59      	ldr	r3, [pc, #356]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e4e:	e043      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e62:	4b48      	ldr	r3, [pc, #288]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e92:	e021      	b.n	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ed6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	0a5b      	lsrs	r3, r3, #9
 8004ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efe:	ee17 2a90 	vmov	r2, s15
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f06:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2c:	ee17 2a90 	vmov	r2, s15
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	0e1b      	lsrs	r3, r3, #24
 8004f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5a:	ee17 2a90 	vmov	r2, s15
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f62:	e008      	b.n	8004f76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	bf00      	nop
 8004f78:	3724      	adds	r7, #36	; 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
 8004f88:	03d09000 	.word	0x03d09000
 8004f8c:	46000000 	.word	0x46000000
 8004f90:	4c742400 	.word	0x4c742400
 8004f94:	4a742400 	.word	0x4a742400
 8004f98:	4af42400 	.word	0x4af42400

08004f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004faa:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d101      	bne.n	8004fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e099      	b.n	80050ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fba:	4b4f      	ldr	r3, [pc, #316]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4e      	ldr	r2, [pc, #312]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc6:	f7fc fd0f 	bl	80019e8 <HAL_GetTick>
 8004fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004fce:	f7fc fd0b 	bl	80019e8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e086      	b.n	80050ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fe0:	4b45      	ldr	r3, [pc, #276]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f0      	bne.n	8004fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fec:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	493f      	ldr	r1, [pc, #252]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	3b01      	subs	r3, #1
 8005006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	3b01      	subs	r3, #1
 8005010:	025b      	lsls	r3, r3, #9
 8005012:	b29b      	uxth	r3, r3
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	3b01      	subs	r3, #1
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005030:	4931      	ldr	r1, [pc, #196]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005032:	4313      	orrs	r3, r2
 8005034:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005036:	4b30      	ldr	r3, [pc, #192]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	492d      	ldr	r1, [pc, #180]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005044:	4313      	orrs	r3, r2
 8005046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005048:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	f023 0220 	bic.w	r2, r3, #32
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4928      	ldr	r1, [pc, #160]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800505a:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	4a26      	ldr	r2, [pc, #152]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005060:	f023 0310 	bic.w	r3, r3, #16
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <RCCEx_PLL2_Config+0x160>)
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	69d2      	ldr	r2, [r2, #28]
 8005072:	00d2      	lsls	r2, r2, #3
 8005074:	4920      	ldr	r1, [pc, #128]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800507a:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005080:	f043 0310 	orr.w	r3, r3, #16
 8005084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 8005092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005098:	e00f      	b.n	80050ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d106      	bne.n	80050ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050a0:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050ac:	e005      	b.n	80050ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	4a11      	ldr	r2, [pc, #68]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a0e      	ldr	r2, [pc, #56]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c6:	f7fc fc8f 	bl	80019e8 <HAL_GetTick>
 80050ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050cc:	e008      	b.n	80050e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050ce:	f7fc fc8b 	bl	80019e8 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e006      	b.n	80050ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <RCCEx_PLL2_Config+0x15c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
 80050fc:	ffff0007 	.word	0xffff0007

08005100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800510e:	4b53      	ldr	r3, [pc, #332]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b03      	cmp	r3, #3
 8005118:	d101      	bne.n	800511e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e099      	b.n	8005252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800511e:	4b4f      	ldr	r3, [pc, #316]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a4e      	ldr	r2, [pc, #312]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512a:	f7fc fc5d 	bl	80019e8 <HAL_GetTick>
 800512e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005130:	e008      	b.n	8005144 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005132:	f7fc fc59 	bl	80019e8 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e086      	b.n	8005252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005144:	4b45      	ldr	r3, [pc, #276]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f0      	bne.n	8005132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005150:	4b42      	ldr	r3, [pc, #264]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	051b      	lsls	r3, r3, #20
 800515e:	493f      	ldr	r1, [pc, #252]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005160:	4313      	orrs	r3, r2
 8005162:	628b      	str	r3, [r1, #40]	; 0x28
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	3b01      	subs	r3, #1
 800516a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	3b01      	subs	r3, #1
 8005174:	025b      	lsls	r3, r3, #9
 8005176:	b29b      	uxth	r3, r3
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	3b01      	subs	r3, #1
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005194:	4931      	ldr	r1, [pc, #196]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800519a:	4b30      	ldr	r3, [pc, #192]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	492d      	ldr	r1, [pc, #180]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	4928      	ldr	r1, [pc, #160]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051be:	4b27      	ldr	r3, [pc, #156]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	4a26      	ldr	r2, [pc, #152]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <RCCEx_PLL3_Config+0x160>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	69d2      	ldr	r2, [r2, #28]
 80051d6:	00d2      	lsls	r2, r2, #3
 80051d8:	4920      	ldr	r1, [pc, #128]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051f0:	4b1a      	ldr	r3, [pc, #104]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 80051f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051fc:	e00f      	b.n	800521e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 800520a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800520e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005210:	e005      	b.n	800521e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	4a11      	ldr	r2, [pc, #68]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800521c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a0e      	ldr	r2, [pc, #56]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522a:	f7fc fbdd 	bl	80019e8 <HAL_GetTick>
 800522e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005230:	e008      	b.n	8005244 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005232:	f7fc fbd9 	bl	80019e8 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <RCCEx_PLL3_Config+0x15c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	58024400 	.word	0x58024400
 8005260:	ffff0007 	.word	0xffff0007

08005264 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0f1      	b.n	800545a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a78      	ldr	r2, [pc, #480]	; (8005464 <HAL_SPI_Init+0x200>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00f      	beq.n	80052a6 <HAL_SPI_Init+0x42>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a77      	ldr	r2, [pc, #476]	; (8005468 <HAL_SPI_Init+0x204>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00a      	beq.n	80052a6 <HAL_SPI_Init+0x42>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a75      	ldr	r2, [pc, #468]	; (800546c <HAL_SPI_Init+0x208>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d005      	beq.n	80052a6 <HAL_SPI_Init+0x42>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b0f      	cmp	r3, #15
 80052a0:	d901      	bls.n	80052a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0d9      	b.n	800545a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 ff66 	bl	8006178 <SPI_GetPacketSize>
 80052ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6c      	ldr	r2, [pc, #432]	; (8005464 <HAL_SPI_Init+0x200>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00c      	beq.n	80052d2 <HAL_SPI_Init+0x6e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6a      	ldr	r2, [pc, #424]	; (8005468 <HAL_SPI_Init+0x204>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <HAL_SPI_Init+0x6e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a69      	ldr	r2, [pc, #420]	; (800546c <HAL_SPI_Init+0x208>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d002      	beq.n	80052d2 <HAL_SPI_Init+0x6e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d811      	bhi.n	80052f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052d6:	4a63      	ldr	r2, [pc, #396]	; (8005464 <HAL_SPI_Init+0x200>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a61      	ldr	r2, [pc, #388]	; (8005468 <HAL_SPI_Init+0x204>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_SPI_Init+0x8c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a60      	ldr	r2, [pc, #384]	; (800546c <HAL_SPI_Init+0x208>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d104      	bne.n	80052fa <HAL_SPI_Init+0x96>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d901      	bls.n	80052fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e0af      	b.n	800545a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc f90c 	bl	800152c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005336:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005340:	d119      	bne.n	8005376 <HAL_SPI_Init+0x112>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534a:	d103      	bne.n	8005354 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10c      	bne.n	8005376 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005364:	d107      	bne.n	8005376 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	431a      	orrs	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	ea42 0103 	orr.w	r1, r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d6:	ea42 0103 	orr.w	r1, r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d113      	bne.n	8005416 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005400:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005414:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40013000 	.word	0x40013000
 8005468:	40003800 	.word	0x40003800
 800546c:	40003c00 	.word	0x40003c00

08005470 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3320      	adds	r3, #32
 8005486:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_SPI_Transmit+0x2a>
 8005496:	2302      	movs	r3, #2
 8005498:	e1d7      	b.n	800584a <HAL_SPI_Transmit+0x3da>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054a2:	f7fc faa1 	bl	80019e8 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d007      	beq.n	80054c4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
 80054b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80054c0:	7efb      	ldrb	r3, [r7, #27]
 80054c2:	e1c2      	b.n	800584a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_SPI_Transmit+0x60>
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d107      	bne.n	80054e0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80054dc:	7efb      	ldrb	r3, [r7, #27]
 80054de:	e1b4      	b.n	800584a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2203      	movs	r2, #3
 80054e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	88fa      	ldrh	r2, [r7, #6]
 8005502:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005530:	d107      	bne.n	8005542 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	4b96      	ldr	r3, [pc, #600]	; (80057a4 <HAL_SPI_Transmit+0x334>)
 800554a:	4013      	ands	r3, r2
 800554c:	88f9      	ldrh	r1, [r7, #6]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	430b      	orrs	r3, r1
 8005554:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556e:	d107      	bne.n	8005580 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b0f      	cmp	r3, #15
 8005586:	d947      	bls.n	8005618 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005588:	e03f      	b.n	800560a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d114      	bne.n	80055c2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a8:	1d1a      	adds	r2, r3, #4
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80055c0:	e023      	b.n	800560a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c2:	f7fc fa11 	bl	80019e8 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d803      	bhi.n	80055da <HAL_SPI_Transmit+0x16a>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d102      	bne.n	80055e0 <HAL_SPI_Transmit+0x170>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d114      	bne.n	800560a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fcfb 	bl	8005fdc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e11f      	b.n	800584a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1b9      	bne.n	800558a <HAL_SPI_Transmit+0x11a>
 8005616:	e0f2      	b.n	80057fe <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b07      	cmp	r3, #7
 800561e:	f240 80e7 	bls.w	80057f0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005622:	e05d      	b.n	80056e0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d132      	bne.n	8005698 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d918      	bls.n	8005670 <HAL_SPI_Transmit+0x200>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b02      	subs	r3, #2
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800566e:	e037      	b.n	80056e0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	881a      	ldrh	r2, [r3, #0]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567e:	1c9a      	adds	r2, r3, #2
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005696:	e023      	b.n	80056e0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005698:	f7fc f9a6 	bl	80019e8 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d803      	bhi.n	80056b0 <HAL_SPI_Transmit+0x240>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d102      	bne.n	80056b6 <HAL_SPI_Transmit+0x246>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d114      	bne.n	80056e0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fc90 	bl	8005fdc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e0b4      	b.n	800584a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d19b      	bne.n	8005624 <HAL_SPI_Transmit+0x1b4>
 80056ec:	e087      	b.n	80057fe <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d155      	bne.n	80057a8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b03      	cmp	r3, #3
 8005706:	d918      	bls.n	800573a <HAL_SPI_Transmit+0x2ca>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d914      	bls.n	800573a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005720:	1d1a      	adds	r2, r3, #4
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b04      	subs	r3, #4
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005738:	e05a      	b.n	80057f0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d917      	bls.n	8005776 <HAL_SPI_Transmit+0x306>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d013      	beq.n	8005776 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005752:	881a      	ldrh	r2, [r3, #0]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575c:	1c9a      	adds	r2, r3, #2
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b02      	subs	r3, #2
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005774:	e03c      	b.n	80057f0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3320      	adds	r3, #32
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057a0:	e026      	b.n	80057f0 <HAL_SPI_Transmit+0x380>
 80057a2:	bf00      	nop
 80057a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a8:	f7fc f91e 	bl	80019e8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d803      	bhi.n	80057c0 <HAL_SPI_Transmit+0x350>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d102      	bne.n	80057c6 <HAL_SPI_Transmit+0x356>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d114      	bne.n	80057f0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fc08 	bl	8005fdc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e02c      	b.n	800584a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f47f af78 	bne.w	80056ee <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	2108      	movs	r1, #8
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fc87 	bl	800611c <SPI_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d007      	beq.n	8005824 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fbd9 	bl	8005fdc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005848:	7efb      	ldrb	r3, [r7, #27]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop

08005854 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3330      	adds	r3, #48	; 0x30
 800586e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005878:	d112      	bne.n	80058a0 <HAL_SPI_Receive+0x4c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10e      	bne.n	80058a0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2204      	movs	r2, #4
 8005886:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800588a:	88fa      	ldrh	r2, [r7, #6]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f978 	bl	8005b8c <HAL_SPI_TransmitReceive>
 800589c:	4603      	mov	r3, r0
 800589e:	e16f      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_SPI_Receive+0x5a>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e168      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058b6:	f7fc f897 	bl	80019e8 <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d007      	beq.n	80058d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
 80058ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80058d4:	7ffb      	ldrb	r3, [r7, #31]
 80058d6:	e153      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_Receive+0x90>
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d107      	bne.n	80058f4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80058f0:	7ffb      	ldrb	r3, [r7, #31]
 80058f2:	e145      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2204      	movs	r2, #4
 80058f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	88fa      	ldrh	r2, [r7, #6]
 800590e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	88fa      	ldrh	r2, [r7, #6]
 8005916:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005944:	d107      	bne.n	8005956 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005954:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	4b8a      	ldr	r3, [pc, #552]	; (8005b88 <HAL_SPI_Receive+0x334>)
 800595e:	4013      	ands	r3, r2
 8005960:	88f9      	ldrh	r1, [r7, #6]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	430b      	orrs	r3, r1
 8005968:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005982:	d107      	bne.n	8005994 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b0f      	cmp	r3, #15
 800599a:	d948      	bls.n	8005a2e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800599c:	e040      	b.n	8005a20 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	f248 0308 	movw	r3, #32776	; 0x8008
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d014      	beq.n	80059d8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059d6:	e023      	b.n	8005a20 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d8:	f7fc f806 	bl	80019e8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d803      	bhi.n	80059f0 <HAL_SPI_Receive+0x19c>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d102      	bne.n	80059f6 <HAL_SPI_Receive+0x1a2>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d114      	bne.n	8005a20 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 faf0 	bl	8005fdc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e0af      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1b8      	bne.n	800599e <HAL_SPI_Receive+0x14a>
 8005a2c:	e095      	b.n	8005b5a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b07      	cmp	r3, #7
 8005a34:	f240 808b 	bls.w	8005b4e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005a38:	e03f      	b.n	8005aba <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d114      	bne.n	8005a72 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	8812      	ldrh	r2, [r2, #0]
 8005a50:	b292      	uxth	r2, r2
 8005a52:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a58:	1c9a      	adds	r2, r3, #2
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a70:	e023      	b.n	8005aba <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a72:	f7fb ffb9 	bl	80019e8 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d803      	bhi.n	8005a8a <HAL_SPI_Receive+0x236>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d102      	bne.n	8005a90 <HAL_SPI_Receive+0x23c>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d114      	bne.n	8005aba <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 faa3 	bl	8005fdc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e062      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1b9      	bne.n	8005a3a <HAL_SPI_Receive+0x1e6>
 8005ac6:	e048      	b.n	8005b5a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d117      	bne.n	8005b06 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae2:	7812      	ldrb	r2, [r2, #0]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005b04:	e023      	b.n	8005b4e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b06:	f7fb ff6f 	bl	80019e8 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d803      	bhi.n	8005b1e <HAL_SPI_Receive+0x2ca>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d102      	bne.n	8005b24 <HAL_SPI_Receive+0x2d0>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d114      	bne.n	8005b4e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fa59 	bl	8005fdc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e018      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1b6      	bne.n	8005ac8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fa3e 	bl	8005fdc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005b7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	ffff0000 	.word	0xffff0000

08005b8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08e      	sub	sp, #56	; 0x38
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3320      	adds	r3, #32
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3330      	adds	r3, #48	; 0x30
 8005bae:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x32>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e209      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x446>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc6:	f7fb ff0f 	bl	80019e8 <HAL_GetTick>
 8005bca:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005bcc:	887b      	ldrh	r3, [r7, #2]
 8005bce:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005bda:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005be2:	7efb      	ldrb	r3, [r7, #27]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d014      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x86>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bee:	d106      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d102      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005bf8:	7efb      	ldrb	r3, [r7, #27]
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d009      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c10:	e1df      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x98>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x98>
 8005c1e:	887b      	ldrh	r3, [r7, #2]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c36:	e1cc      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d003      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2205      	movs	r2, #5
 8005c48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	887a      	ldrh	r2, [r7, #2]
 8005c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	887a      	ldrh	r2, [r7, #2]
 8005c74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	887a      	ldrh	r2, [r7, #2]
 8005c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	4b82      	ldr	r3, [pc, #520]	; (8005e9c <HAL_SPI_TransmitReceive+0x310>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	8879      	ldrh	r1, [r7, #2]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cb8:	d107      	bne.n	8005cca <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2b0f      	cmp	r3, #15
 8005cd0:	d970      	bls.n	8005db4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005cd2:	e068      	b.n	8005da6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d11a      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x18c>
 8005ce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d017      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf8:	1d1a      	adds	r2, r3, #4
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d16:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	f248 0308 	movw	r3, #32776	; 0x8008
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01a      	beq.n	8005d5e <HAL_SPI_TransmitReceive+0x1d2>
 8005d28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d5e:	f7fb fe43 	bl	80019e8 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d803      	bhi.n	8005d76 <HAL_SPI_TransmitReceive+0x1ea>
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d102      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x1f0>
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d114      	bne.n	8005da6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f92d 	bl	8005fdc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e115      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005da6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d193      	bne.n	8005cd4 <HAL_SPI_TransmitReceive+0x148>
 8005dac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d190      	bne.n	8005cd4 <HAL_SPI_TransmitReceive+0x148>
 8005db2:	e0e7      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	f240 80dd 	bls.w	8005f78 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dbe:	e066      	b.n	8005e8e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d119      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x276>
 8005dce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d016      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e00:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d11a      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x2ba>
 8005e10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d017      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	8812      	ldrh	r2, [r2, #0]
 8005e1e:	b292      	uxth	r2, r2
 8005e20:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e26:	1c9a      	adds	r2, r3, #2
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e44:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e46:	f7fb fdcf 	bl	80019e8 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d803      	bhi.n	8005e5e <HAL_SPI_TransmitReceive+0x2d2>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d102      	bne.n	8005e64 <HAL_SPI_TransmitReceive+0x2d8>
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d114      	bne.n	8005e8e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f8b9 	bl	8005fdc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e0a1      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d195      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x234>
 8005e94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d192      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x234>
 8005e9a:	e073      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x3f8>
 8005e9c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d11b      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x35a>
 8005eae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d018      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3320      	adds	r3, #32
 8005ebe:	7812      	ldrb	r2, [r2, #0]
 8005ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ee4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d11d      	bne.n	8005f30 <HAL_SPI_TransmitReceive+0x3a4>
 8005ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f06:	7812      	ldrb	r2, [r2, #0]
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f30:	f7fb fd5a 	bl	80019e8 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d803      	bhi.n	8005f48 <HAL_SPI_TransmitReceive+0x3bc>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d102      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x3c2>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d114      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f844 	bl	8005fdc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e02c      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d190      	bne.n	8005ea0 <HAL_SPI_TransmitReceive+0x314>
 8005f7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d18d      	bne.n	8005ea0 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2108      	movs	r1, #8
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f8c4 	bl	800611c <SPI_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f816 	bl	8005fdc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e001      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3730      	adds	r7, #48	; 0x30
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop

08005fdc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0210 	orr.w	r2, r2, #16
 800600a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6919      	ldr	r1, [r3, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b3c      	ldr	r3, [pc, #240]	; (8006118 <SPI_CloseTransfer+0x13c>)
 8006028:	400b      	ands	r3, r1
 800602a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800603a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b04      	cmp	r3, #4
 8006046:	d014      	beq.n	8006072 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00f      	beq.n	8006072 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006058:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699a      	ldr	r2, [r3, #24]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0220 	orr.w	r2, r2, #32
 8006070:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b03      	cmp	r3, #3
 800607c:	d014      	beq.n	80060a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00f      	beq.n	80060a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608e:	f043 0204 	orr.w	r2, r3, #4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00f      	beq.n	80060d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b8:	f043 0201 	orr.w	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00f      	beq.n	80060fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e2:	f043 0208 	orr.w	r2, r3, #8
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	fffffc90 	.word	0xfffffc90

0800611c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800612c:	e010      	b.n	8006150 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800612e:	f7fb fc5b 	bl	80019e8 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	429a      	cmp	r2, r3
 800613c:	d803      	bhi.n	8006146 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d102      	bne.n	800614c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e00f      	b.n	8006170 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4013      	ands	r3, r2
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	429a      	cmp	r2, r3
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	429a      	cmp	r2, r3
 800616c:	d0df      	beq.n	800612e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	3301      	adds	r3, #1
 8006190:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3307      	adds	r3, #7
 8006196:	08db      	lsrs	r3, r3, #3
 8006198:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	fb02 f303 	mul.w	r3, r2, r3
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e042      	b.n	8006246 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fb fa6e 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2224      	movs	r2, #36	; 0x24
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0201 	bic.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f82d 	bl	8006250 <UART_SetConfig>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e022      	b.n	8006246 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fd89 	bl	8006d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800621c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800622c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fe10 	bl	8006e64 <UART_CheckIdleState>
 8006244:	4603      	mov	r3, r0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006254:	b092      	sub	sp, #72	; 0x48
 8006256:	af00      	add	r7, sp, #0
 8006258:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	431a      	orrs	r2, r3
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	431a      	orrs	r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	4313      	orrs	r3, r2
 8006276:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4bbe      	ldr	r3, [pc, #760]	; (8006578 <UART_SetConfig+0x328>)
 8006280:	4013      	ands	r3, r2
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006288:	430b      	orrs	r3, r1
 800628a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4ab3      	ldr	r2, [pc, #716]	; (800657c <UART_SetConfig+0x32c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062b8:	4313      	orrs	r3, r2
 80062ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	4baf      	ldr	r3, [pc, #700]	; (8006580 <UART_SetConfig+0x330>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	f023 010f 	bic.w	r1, r3, #15
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4aa6      	ldr	r2, [pc, #664]	; (8006584 <UART_SetConfig+0x334>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d177      	bne.n	80063e0 <UART_SetConfig+0x190>
 80062f0:	4ba5      	ldr	r3, [pc, #660]	; (8006588 <UART_SetConfig+0x338>)
 80062f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f8:	2b28      	cmp	r3, #40	; 0x28
 80062fa:	d86d      	bhi.n	80063d8 <UART_SetConfig+0x188>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <UART_SetConfig+0xb4>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	080063a9 	.word	0x080063a9
 8006308:	080063d9 	.word	0x080063d9
 800630c:	080063d9 	.word	0x080063d9
 8006310:	080063d9 	.word	0x080063d9
 8006314:	080063d9 	.word	0x080063d9
 8006318:	080063d9 	.word	0x080063d9
 800631c:	080063d9 	.word	0x080063d9
 8006320:	080063d9 	.word	0x080063d9
 8006324:	080063b1 	.word	0x080063b1
 8006328:	080063d9 	.word	0x080063d9
 800632c:	080063d9 	.word	0x080063d9
 8006330:	080063d9 	.word	0x080063d9
 8006334:	080063d9 	.word	0x080063d9
 8006338:	080063d9 	.word	0x080063d9
 800633c:	080063d9 	.word	0x080063d9
 8006340:	080063d9 	.word	0x080063d9
 8006344:	080063b9 	.word	0x080063b9
 8006348:	080063d9 	.word	0x080063d9
 800634c:	080063d9 	.word	0x080063d9
 8006350:	080063d9 	.word	0x080063d9
 8006354:	080063d9 	.word	0x080063d9
 8006358:	080063d9 	.word	0x080063d9
 800635c:	080063d9 	.word	0x080063d9
 8006360:	080063d9 	.word	0x080063d9
 8006364:	080063c1 	.word	0x080063c1
 8006368:	080063d9 	.word	0x080063d9
 800636c:	080063d9 	.word	0x080063d9
 8006370:	080063d9 	.word	0x080063d9
 8006374:	080063d9 	.word	0x080063d9
 8006378:	080063d9 	.word	0x080063d9
 800637c:	080063d9 	.word	0x080063d9
 8006380:	080063d9 	.word	0x080063d9
 8006384:	080063c9 	.word	0x080063c9
 8006388:	080063d9 	.word	0x080063d9
 800638c:	080063d9 	.word	0x080063d9
 8006390:	080063d9 	.word	0x080063d9
 8006394:	080063d9 	.word	0x080063d9
 8006398:	080063d9 	.word	0x080063d9
 800639c:	080063d9 	.word	0x080063d9
 80063a0:	080063d9 	.word	0x080063d9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e222      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80063b0:	2304      	movs	r3, #4
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e21e      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80063b8:	2308      	movs	r3, #8
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e21a      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80063c0:	2310      	movs	r3, #16
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e216      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80063c8:	2320      	movs	r3, #32
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e212      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80063d0:	2340      	movs	r3, #64	; 0x40
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e20e      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e20a      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a69      	ldr	r2, [pc, #420]	; (800658c <UART_SetConfig+0x33c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d130      	bne.n	800644c <UART_SetConfig+0x1fc>
 80063ea:	4b67      	ldr	r3, [pc, #412]	; (8006588 <UART_SetConfig+0x338>)
 80063ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	d826      	bhi.n	8006444 <UART_SetConfig+0x1f4>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <UART_SetConfig+0x1ac>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006415 	.word	0x08006415
 8006400:	0800641d 	.word	0x0800641d
 8006404:	08006425 	.word	0x08006425
 8006408:	0800642d 	.word	0x0800642d
 800640c:	08006435 	.word	0x08006435
 8006410:	0800643d 	.word	0x0800643d
 8006414:	2300      	movs	r3, #0
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e1ec      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e1e8      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e1e4      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e1e0      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006434:	2320      	movs	r3, #32
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e1dc      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e1d8      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e1d4      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a4f      	ldr	r2, [pc, #316]	; (8006590 <UART_SetConfig+0x340>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d130      	bne.n	80064b8 <UART_SetConfig+0x268>
 8006456:	4b4c      	ldr	r3, [pc, #304]	; (8006588 <UART_SetConfig+0x338>)
 8006458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b05      	cmp	r3, #5
 8006460:	d826      	bhi.n	80064b0 <UART_SetConfig+0x260>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0x218>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	08006481 	.word	0x08006481
 800646c:	08006489 	.word	0x08006489
 8006470:	08006491 	.word	0x08006491
 8006474:	08006499 	.word	0x08006499
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	2300      	movs	r3, #0
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e1b6      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e1b2      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e1ae      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e1aa      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80064a0:	2320      	movs	r3, #32
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e1a6      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e1a2      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e19e      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a35      	ldr	r2, [pc, #212]	; (8006594 <UART_SetConfig+0x344>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d130      	bne.n	8006524 <UART_SetConfig+0x2d4>
 80064c2:	4b31      	ldr	r3, [pc, #196]	; (8006588 <UART_SetConfig+0x338>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d826      	bhi.n	800651c <UART_SetConfig+0x2cc>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <UART_SetConfig+0x284>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	080064f5 	.word	0x080064f5
 80064dc:	080064fd 	.word	0x080064fd
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006515 	.word	0x08006515
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e180      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80064f4:	2304      	movs	r3, #4
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e17c      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80064fc:	2308      	movs	r3, #8
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e178      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006504:	2310      	movs	r3, #16
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e174      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800650c:	2320      	movs	r3, #32
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e170      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e16c      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e168      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <UART_SetConfig+0x348>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d142      	bne.n	80065b4 <UART_SetConfig+0x364>
 800652e:	4b16      	ldr	r3, [pc, #88]	; (8006588 <UART_SetConfig+0x338>)
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b05      	cmp	r3, #5
 8006538:	d838      	bhi.n	80065ac <UART_SetConfig+0x35c>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <UART_SetConfig+0x2f0>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006559 	.word	0x08006559
 8006544:	08006561 	.word	0x08006561
 8006548:	08006569 	.word	0x08006569
 800654c:	08006571 	.word	0x08006571
 8006550:	0800659d 	.word	0x0800659d
 8006554:	080065a5 	.word	0x080065a5
 8006558:	2300      	movs	r3, #0
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655e:	e14a      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e146      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e142      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e13e      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006578:	cfff69f3 	.word	0xcfff69f3
 800657c:	58000c00 	.word	0x58000c00
 8006580:	11fff4ff 	.word	0x11fff4ff
 8006584:	40011000 	.word	0x40011000
 8006588:	58024400 	.word	0x58024400
 800658c:	40004400 	.word	0x40004400
 8006590:	40004800 	.word	0x40004800
 8006594:	40004c00 	.word	0x40004c00
 8006598:	40005000 	.word	0x40005000
 800659c:	2320      	movs	r3, #32
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a2:	e128      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e124      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e120      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4acb      	ldr	r2, [pc, #812]	; (80068e8 <UART_SetConfig+0x698>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d176      	bne.n	80066ac <UART_SetConfig+0x45c>
 80065be:	4bcb      	ldr	r3, [pc, #812]	; (80068ec <UART_SetConfig+0x69c>)
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065c6:	2b28      	cmp	r3, #40	; 0x28
 80065c8:	d86c      	bhi.n	80066a4 <UART_SetConfig+0x454>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <UART_SetConfig+0x380>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006675 	.word	0x08006675
 80065d4:	080066a5 	.word	0x080066a5
 80065d8:	080066a5 	.word	0x080066a5
 80065dc:	080066a5 	.word	0x080066a5
 80065e0:	080066a5 	.word	0x080066a5
 80065e4:	080066a5 	.word	0x080066a5
 80065e8:	080066a5 	.word	0x080066a5
 80065ec:	080066a5 	.word	0x080066a5
 80065f0:	0800667d 	.word	0x0800667d
 80065f4:	080066a5 	.word	0x080066a5
 80065f8:	080066a5 	.word	0x080066a5
 80065fc:	080066a5 	.word	0x080066a5
 8006600:	080066a5 	.word	0x080066a5
 8006604:	080066a5 	.word	0x080066a5
 8006608:	080066a5 	.word	0x080066a5
 800660c:	080066a5 	.word	0x080066a5
 8006610:	08006685 	.word	0x08006685
 8006614:	080066a5 	.word	0x080066a5
 8006618:	080066a5 	.word	0x080066a5
 800661c:	080066a5 	.word	0x080066a5
 8006620:	080066a5 	.word	0x080066a5
 8006624:	080066a5 	.word	0x080066a5
 8006628:	080066a5 	.word	0x080066a5
 800662c:	080066a5 	.word	0x080066a5
 8006630:	0800668d 	.word	0x0800668d
 8006634:	080066a5 	.word	0x080066a5
 8006638:	080066a5 	.word	0x080066a5
 800663c:	080066a5 	.word	0x080066a5
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080066a5 	.word	0x080066a5
 8006648:	080066a5 	.word	0x080066a5
 800664c:	080066a5 	.word	0x080066a5
 8006650:	08006695 	.word	0x08006695
 8006654:	080066a5 	.word	0x080066a5
 8006658:	080066a5 	.word	0x080066a5
 800665c:	080066a5 	.word	0x080066a5
 8006660:	080066a5 	.word	0x080066a5
 8006664:	080066a5 	.word	0x080066a5
 8006668:	080066a5 	.word	0x080066a5
 800666c:	080066a5 	.word	0x080066a5
 8006670:	0800669d 	.word	0x0800669d
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667a:	e0bc      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800667c:	2304      	movs	r3, #4
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e0b8      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006684:	2308      	movs	r3, #8
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e0b4      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800668c:	2310      	movs	r3, #16
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e0b0      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006694:	2320      	movs	r3, #32
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669a:	e0ac      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a2:	e0a8      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80066a4:	2380      	movs	r3, #128	; 0x80
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066aa:	e0a4      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a8f      	ldr	r2, [pc, #572]	; (80068f0 <UART_SetConfig+0x6a0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d130      	bne.n	8006718 <UART_SetConfig+0x4c8>
 80066b6:	4b8d      	ldr	r3, [pc, #564]	; (80068ec <UART_SetConfig+0x69c>)
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	2b05      	cmp	r3, #5
 80066c0:	d826      	bhi.n	8006710 <UART_SetConfig+0x4c0>
 80066c2:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x478>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066e1 	.word	0x080066e1
 80066cc:	080066e9 	.word	0x080066e9
 80066d0:	080066f1 	.word	0x080066f1
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006709 	.word	0x08006709
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e6:	e086      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80066e8:	2304      	movs	r3, #4
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ee:	e082      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80066f0:	2308      	movs	r3, #8
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f6:	e07e      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80066f8:	2310      	movs	r3, #16
 80066fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fe:	e07a      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006700:	2320      	movs	r3, #32
 8006702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006706:	e076      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670e:	e072      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006716:	e06e      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a75      	ldr	r2, [pc, #468]	; (80068f4 <UART_SetConfig+0x6a4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d130      	bne.n	8006784 <UART_SetConfig+0x534>
 8006722:	4b72      	ldr	r3, [pc, #456]	; (80068ec <UART_SetConfig+0x69c>)
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b05      	cmp	r3, #5
 800672c:	d826      	bhi.n	800677c <UART_SetConfig+0x52c>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <UART_SetConfig+0x4e4>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	0800674d 	.word	0x0800674d
 8006738:	08006755 	.word	0x08006755
 800673c:	0800675d 	.word	0x0800675d
 8006740:	08006765 	.word	0x08006765
 8006744:	0800676d 	.word	0x0800676d
 8006748:	08006775 	.word	0x08006775
 800674c:	2300      	movs	r3, #0
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006752:	e050      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675a:	e04c      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e048      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e044      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800676c:	2320      	movs	r3, #32
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e040      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006774:	2340      	movs	r3, #64	; 0x40
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e03c      	b.n	80067f6 <UART_SetConfig+0x5a6>
 800677c:	2380      	movs	r3, #128	; 0x80
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e038      	b.n	80067f6 <UART_SetConfig+0x5a6>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a5b      	ldr	r2, [pc, #364]	; (80068f8 <UART_SetConfig+0x6a8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d130      	bne.n	80067f0 <UART_SetConfig+0x5a0>
 800678e:	4b57      	ldr	r3, [pc, #348]	; (80068ec <UART_SetConfig+0x69c>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b05      	cmp	r3, #5
 8006798:	d826      	bhi.n	80067e8 <UART_SetConfig+0x598>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x550>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067b9 	.word	0x080067b9
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067c9 	.word	0x080067c9
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2302      	movs	r3, #2
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067be:	e01a      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c6:	e016      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ce:	e012      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d6:	e00e      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067de:	e00a      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e006      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e002      	b.n	80067f6 <UART_SetConfig+0x5a6>
 80067f0:	2380      	movs	r3, #128	; 0x80
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a3f      	ldr	r2, [pc, #252]	; (80068f8 <UART_SetConfig+0x6a8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	f040 80f8 	bne.w	80069f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006802:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006806:	2b20      	cmp	r3, #32
 8006808:	dc46      	bgt.n	8006898 <UART_SetConfig+0x648>
 800680a:	2b02      	cmp	r3, #2
 800680c:	f2c0 8082 	blt.w	8006914 <UART_SetConfig+0x6c4>
 8006810:	3b02      	subs	r3, #2
 8006812:	2b1e      	cmp	r3, #30
 8006814:	d87e      	bhi.n	8006914 <UART_SetConfig+0x6c4>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x5cc>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	0800689f 	.word	0x0800689f
 8006820:	08006915 	.word	0x08006915
 8006824:	080068a7 	.word	0x080068a7
 8006828:	08006915 	.word	0x08006915
 800682c:	08006915 	.word	0x08006915
 8006830:	08006915 	.word	0x08006915
 8006834:	080068b7 	.word	0x080068b7
 8006838:	08006915 	.word	0x08006915
 800683c:	08006915 	.word	0x08006915
 8006840:	08006915 	.word	0x08006915
 8006844:	08006915 	.word	0x08006915
 8006848:	08006915 	.word	0x08006915
 800684c:	08006915 	.word	0x08006915
 8006850:	08006915 	.word	0x08006915
 8006854:	080068c7 	.word	0x080068c7
 8006858:	08006915 	.word	0x08006915
 800685c:	08006915 	.word	0x08006915
 8006860:	08006915 	.word	0x08006915
 8006864:	08006915 	.word	0x08006915
 8006868:	08006915 	.word	0x08006915
 800686c:	08006915 	.word	0x08006915
 8006870:	08006915 	.word	0x08006915
 8006874:	08006915 	.word	0x08006915
 8006878:	08006915 	.word	0x08006915
 800687c:	08006915 	.word	0x08006915
 8006880:	08006915 	.word	0x08006915
 8006884:	08006915 	.word	0x08006915
 8006888:	08006915 	.word	0x08006915
 800688c:	08006915 	.word	0x08006915
 8006890:	08006915 	.word	0x08006915
 8006894:	08006907 	.word	0x08006907
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d037      	beq.n	800690c <UART_SetConfig+0x6bc>
 800689c:	e03a      	b.n	8006914 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800689e:	f7fe f8bf 	bl	8004a20 <HAL_RCCEx_GetD3PCLK1Freq>
 80068a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068a4:	e03c      	b.n	8006920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe f8ce 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b4:	e034      	b.n	8006920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068b6:	f107 0318 	add.w	r3, r7, #24
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fa1a 	bl	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c4:	e02c      	b.n	8006920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <UART_SetConfig+0x69c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <UART_SetConfig+0x69c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	08db      	lsrs	r3, r3, #3
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	4a07      	ldr	r2, [pc, #28]	; (80068fc <UART_SetConfig+0x6ac>)
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068e4:	e01c      	b.n	8006920 <UART_SetConfig+0x6d0>
 80068e6:	bf00      	nop
 80068e8:	40011400 	.word	0x40011400
 80068ec:	58024400 	.word	0x58024400
 80068f0:	40007800 	.word	0x40007800
 80068f4:	40007c00 	.word	0x40007c00
 80068f8:	58000c00 	.word	0x58000c00
 80068fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006900:	4b9d      	ldr	r3, [pc, #628]	; (8006b78 <UART_SetConfig+0x928>)
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006904:	e00c      	b.n	8006920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006906:	4b9d      	ldr	r3, [pc, #628]	; (8006b7c <UART_SetConfig+0x92c>)
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800690a:	e009      	b.n	8006920 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006912:	e005      	b.n	8006920 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800691e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 81de 	beq.w	8006ce4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	4a94      	ldr	r2, [pc, #592]	; (8006b80 <UART_SetConfig+0x930>)
 800692e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006932:	461a      	mov	r2, r3
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	fbb3 f3f2 	udiv	r3, r3, r2
 800693a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	4413      	add	r3, r2
 8006946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006948:	429a      	cmp	r2, r3
 800694a:	d305      	bcc.n	8006958 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006954:	429a      	cmp	r2, r3
 8006956:	d903      	bls.n	8006960 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800695e:	e1c1      	b.n	8006ce4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006962:	2200      	movs	r2, #0
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	60fa      	str	r2, [r7, #12]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	4a84      	ldr	r2, [pc, #528]	; (8006b80 <UART_SetConfig+0x930>)
 800696e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006972:	b29b      	uxth	r3, r3
 8006974:	2200      	movs	r2, #0
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006982:	f7f9 fca9 	bl	80002d8 <__aeabi_uldivmod>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4610      	mov	r0, r2
 800698c:	4619      	mov	r1, r3
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	020b      	lsls	r3, r1, #8
 8006998:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800699c:	0202      	lsls	r2, r0, #8
 800699e:	6979      	ldr	r1, [r7, #20]
 80069a0:	6849      	ldr	r1, [r1, #4]
 80069a2:	0849      	lsrs	r1, r1, #1
 80069a4:	2000      	movs	r0, #0
 80069a6:	460c      	mov	r4, r1
 80069a8:	4605      	mov	r5, r0
 80069aa:	eb12 0804 	adds.w	r8, r2, r4
 80069ae:	eb43 0905 	adc.w	r9, r3, r5
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	469a      	mov	sl, r3
 80069ba:	4693      	mov	fp, r2
 80069bc:	4652      	mov	r2, sl
 80069be:	465b      	mov	r3, fp
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	f7f9 fc88 	bl	80002d8 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4613      	mov	r3, r2
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069d6:	d308      	bcc.n	80069ea <UART_SetConfig+0x79a>
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069de:	d204      	bcs.n	80069ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e6:	60da      	str	r2, [r3, #12]
 80069e8:	e17c      	b.n	8006ce4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069f0:	e178      	b.n	8006ce4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fa:	f040 80c5 	bne.w	8006b88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80069fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a02:	2b20      	cmp	r3, #32
 8006a04:	dc48      	bgt.n	8006a98 <UART_SetConfig+0x848>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	db7b      	blt.n	8006b02 <UART_SetConfig+0x8b2>
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d879      	bhi.n	8006b02 <UART_SetConfig+0x8b2>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0x7c4>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a9f 	.word	0x08006a9f
 8006a18:	08006aa7 	.word	0x08006aa7
 8006a1c:	08006b03 	.word	0x08006b03
 8006a20:	08006b03 	.word	0x08006b03
 8006a24:	08006aaf 	.word	0x08006aaf
 8006a28:	08006b03 	.word	0x08006b03
 8006a2c:	08006b03 	.word	0x08006b03
 8006a30:	08006b03 	.word	0x08006b03
 8006a34:	08006abf 	.word	0x08006abf
 8006a38:	08006b03 	.word	0x08006b03
 8006a3c:	08006b03 	.word	0x08006b03
 8006a40:	08006b03 	.word	0x08006b03
 8006a44:	08006b03 	.word	0x08006b03
 8006a48:	08006b03 	.word	0x08006b03
 8006a4c:	08006b03 	.word	0x08006b03
 8006a50:	08006b03 	.word	0x08006b03
 8006a54:	08006acf 	.word	0x08006acf
 8006a58:	08006b03 	.word	0x08006b03
 8006a5c:	08006b03 	.word	0x08006b03
 8006a60:	08006b03 	.word	0x08006b03
 8006a64:	08006b03 	.word	0x08006b03
 8006a68:	08006b03 	.word	0x08006b03
 8006a6c:	08006b03 	.word	0x08006b03
 8006a70:	08006b03 	.word	0x08006b03
 8006a74:	08006b03 	.word	0x08006b03
 8006a78:	08006b03 	.word	0x08006b03
 8006a7c:	08006b03 	.word	0x08006b03
 8006a80:	08006b03 	.word	0x08006b03
 8006a84:	08006b03 	.word	0x08006b03
 8006a88:	08006b03 	.word	0x08006b03
 8006a8c:	08006b03 	.word	0x08006b03
 8006a90:	08006b03 	.word	0x08006b03
 8006a94:	08006af5 	.word	0x08006af5
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d02e      	beq.n	8006afa <UART_SetConfig+0x8aa>
 8006a9c:	e031      	b.n	8006b02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a9e:	f7fd f84d 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8006aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006aa4:	e033      	b.n	8006b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa6:	f7fd f85f 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8006aaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006aac:	e02f      	b.n	8006b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fd ffca 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006abc:	e027      	b.n	8006b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006abe:	f107 0318 	add.w	r3, r7, #24
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe f916 	bl	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006acc:	e01f      	b.n	8006b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ace:	4b2d      	ldr	r3, [pc, #180]	; (8006b84 <UART_SetConfig+0x934>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d009      	beq.n	8006aee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ada:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <UART_SetConfig+0x934>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	08db      	lsrs	r3, r3, #3
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	4a24      	ldr	r2, [pc, #144]	; (8006b78 <UART_SetConfig+0x928>)
 8006ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006aec:	e00f      	b.n	8006b0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006aee:	4b22      	ldr	r3, [pc, #136]	; (8006b78 <UART_SetConfig+0x928>)
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af2:	e00c      	b.n	8006b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006af4:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <UART_SetConfig+0x92c>)
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af8:	e009      	b.n	8006b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b00:	e005      	b.n	8006b0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80e7 	beq.w	8006ce4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	4a19      	ldr	r2, [pc, #100]	; (8006b80 <UART_SetConfig+0x930>)
 8006b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b20:	461a      	mov	r2, r3
 8006b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b28:	005a      	lsls	r2, r3, #1
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	441a      	add	r2, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	2b0f      	cmp	r3, #15
 8006b40:	d916      	bls.n	8006b70 <UART_SetConfig+0x920>
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b48:	d212      	bcs.n	8006b70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f023 030f 	bic.w	r3, r3, #15
 8006b52:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b62:	4313      	orrs	r3, r2
 8006b64:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b6c:	60da      	str	r2, [r3, #12]
 8006b6e:	e0b9      	b.n	8006ce4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b76:	e0b5      	b.n	8006ce4 <UART_SetConfig+0xa94>
 8006b78:	03d09000 	.word	0x03d09000
 8006b7c:	003d0900 	.word	0x003d0900
 8006b80:	08007924 	.word	0x08007924
 8006b84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	dc49      	bgt.n	8006c24 <UART_SetConfig+0x9d4>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db7c      	blt.n	8006c8e <UART_SetConfig+0xa3e>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d87a      	bhi.n	8006c8e <UART_SetConfig+0xa3e>
 8006b98:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <UART_SetConfig+0x950>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006c2b 	.word	0x08006c2b
 8006ba4:	08006c33 	.word	0x08006c33
 8006ba8:	08006c8f 	.word	0x08006c8f
 8006bac:	08006c8f 	.word	0x08006c8f
 8006bb0:	08006c3b 	.word	0x08006c3b
 8006bb4:	08006c8f 	.word	0x08006c8f
 8006bb8:	08006c8f 	.word	0x08006c8f
 8006bbc:	08006c8f 	.word	0x08006c8f
 8006bc0:	08006c4b 	.word	0x08006c4b
 8006bc4:	08006c8f 	.word	0x08006c8f
 8006bc8:	08006c8f 	.word	0x08006c8f
 8006bcc:	08006c8f 	.word	0x08006c8f
 8006bd0:	08006c8f 	.word	0x08006c8f
 8006bd4:	08006c8f 	.word	0x08006c8f
 8006bd8:	08006c8f 	.word	0x08006c8f
 8006bdc:	08006c8f 	.word	0x08006c8f
 8006be0:	08006c5b 	.word	0x08006c5b
 8006be4:	08006c8f 	.word	0x08006c8f
 8006be8:	08006c8f 	.word	0x08006c8f
 8006bec:	08006c8f 	.word	0x08006c8f
 8006bf0:	08006c8f 	.word	0x08006c8f
 8006bf4:	08006c8f 	.word	0x08006c8f
 8006bf8:	08006c8f 	.word	0x08006c8f
 8006bfc:	08006c8f 	.word	0x08006c8f
 8006c00:	08006c8f 	.word	0x08006c8f
 8006c04:	08006c8f 	.word	0x08006c8f
 8006c08:	08006c8f 	.word	0x08006c8f
 8006c0c:	08006c8f 	.word	0x08006c8f
 8006c10:	08006c8f 	.word	0x08006c8f
 8006c14:	08006c8f 	.word	0x08006c8f
 8006c18:	08006c8f 	.word	0x08006c8f
 8006c1c:	08006c8f 	.word	0x08006c8f
 8006c20:	08006c81 	.word	0x08006c81
 8006c24:	2b40      	cmp	r3, #64	; 0x40
 8006c26:	d02e      	beq.n	8006c86 <UART_SetConfig+0xa36>
 8006c28:	e031      	b.n	8006c8e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c2a:	f7fc ff87 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 8006c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c30:	e033      	b.n	8006c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c32:	f7fc ff99 	bl	8003b68 <HAL_RCC_GetPCLK2Freq>
 8006c36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c38:	e02f      	b.n	8006c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fd ff04 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c48:	e027      	b.n	8006c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c4a:	f107 0318 	add.w	r3, r7, #24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe f850 	bl	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c58:	e01f      	b.n	8006c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c5a:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <UART_SetConfig+0xac0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c66:	4b2a      	ldr	r3, [pc, #168]	; (8006d10 <UART_SetConfig+0xac0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	08db      	lsrs	r3, r3, #3
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	4a28      	ldr	r2, [pc, #160]	; (8006d14 <UART_SetConfig+0xac4>)
 8006c72:	fa22 f303 	lsr.w	r3, r2, r3
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c78:	e00f      	b.n	8006c9a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006c7a:	4b26      	ldr	r3, [pc, #152]	; (8006d14 <UART_SetConfig+0xac4>)
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c7e:	e00c      	b.n	8006c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c80:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <UART_SetConfig+0xac8>)
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c84:	e009      	b.n	8006c9a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8c:	e005      	b.n	8006c9a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c98:	bf00      	nop
    }

    if (pclk != 0U)
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d021      	beq.n	8006ce4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	; (8006d1c <UART_SetConfig+0xacc>)
 8006ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cae:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	441a      	add	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	2b0f      	cmp	r3, #15
 8006cc8:	d909      	bls.n	8006cde <UART_SetConfig+0xa8e>
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd0:	d205      	bcs.n	8006cde <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	e002      	b.n	8006ce4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006d00:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3748      	adds	r7, #72	; 0x48
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	003d0900 	.word	0x003d0900
 8006d1c:	08007924 	.word	0x08007924

08006d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01a      	beq.n	8006e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1e:	d10a      	bne.n	8006e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e74:	f7fa fdb8 	bl	80019e8 <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d10e      	bne.n	8006ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f82f 	bl	8006efa <UART_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e025      	b.n	8006ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d10e      	bne.n	8006ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f819 	bl	8006efa <UART_WaitOnFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e00f      	b.n	8006ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b09c      	sub	sp, #112	; 0x70
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	603b      	str	r3, [r7, #0]
 8006f06:	4613      	mov	r3, r2
 8006f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0a:	e0a9      	b.n	8007060 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f12:	f000 80a5 	beq.w	8007060 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f16:	f7fa fd67 	bl	80019e8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d302      	bcc.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x32>
 8006f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d140      	bne.n	8006fae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f40:	667b      	str	r3, [r7, #100]	; 0x64
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e6      	bne.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3308      	adds	r3, #8
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	663b      	str	r3, [r7, #96]	; 0x60
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e5      	bne.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e069      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d051      	beq.n	8007060 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fca:	d149      	bne.n	8007060 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	613b      	str	r3, [r7, #16]
   return(result);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3308      	adds	r3, #8
 8007026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007028:	623a      	str	r2, [r7, #32]
 800702a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	69f9      	ldr	r1, [r7, #28]
 800702e:	6a3a      	ldr	r2, [r7, #32]
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	61bb      	str	r3, [r7, #24]
   return(result);
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e010      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69da      	ldr	r2, [r3, #28]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4013      	ands	r3, r2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	bf0c      	ite	eq
 8007070:	2301      	moveq	r3, #1
 8007072:	2300      	movne	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	429a      	cmp	r2, r3
 800707c:	f43f af46 	beq.w	8006f0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3770      	adds	r7, #112	; 0x70
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800709c:	2302      	movs	r3, #2
 800709e:	e027      	b.n	80070f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2224      	movs	r2, #36	; 0x24
 80070ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0201 	bic.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007110:	2302      	movs	r3, #2
 8007112:	e02d      	b.n	8007170 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	; 0x24
 8007120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0201 	bic.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f84f 	bl	80071f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800718c:	2302      	movs	r3, #2
 800718e:	e02d      	b.n	80071ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2224      	movs	r2, #36	; 0x24
 800719c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f811 	bl	80071f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007200:	2b00      	cmp	r3, #0
 8007202:	d108      	bne.n	8007216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007214:	e031      	b.n	800727a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007216:	2310      	movs	r3, #16
 8007218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800721a:	2310      	movs	r3, #16
 800721c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	0e5b      	lsrs	r3, r3, #25
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	0f5b      	lsrs	r3, r3, #29
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	7b3a      	ldrb	r2, [r7, #12]
 8007242:	4911      	ldr	r1, [pc, #68]	; (8007288 <UARTEx_SetNbDataToProcess+0x94>)
 8007244:	5c8a      	ldrb	r2, [r1, r2]
 8007246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800724a:	7b3a      	ldrb	r2, [r7, #12]
 800724c:	490f      	ldr	r1, [pc, #60]	; (800728c <UARTEx_SetNbDataToProcess+0x98>)
 800724e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007250:	fb93 f3f2 	sdiv	r3, r3, r2
 8007254:	b29a      	uxth	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	7b7a      	ldrb	r2, [r7, #13]
 8007260:	4909      	ldr	r1, [pc, #36]	; (8007288 <UARTEx_SetNbDataToProcess+0x94>)
 8007262:	5c8a      	ldrb	r2, [r1, r2]
 8007264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007268:	7b7a      	ldrb	r2, [r7, #13]
 800726a:	4908      	ldr	r1, [pc, #32]	; (800728c <UARTEx_SetNbDataToProcess+0x98>)
 800726c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800726e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007272:	b29a      	uxth	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800727a:	bf00      	nop
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	0800793c 	.word	0x0800793c
 800728c:	08007944 	.word	0x08007944

08007290 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007290:	b084      	sub	sp, #16
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	f107 001c 	add.w	r0, r7, #28
 800729e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d120      	bne.n	80072ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <USB_CoreInit+0xd4>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d105      	bne.n	80072de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 faac 	bl	800783c <USB_CoreReset>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
 80072e8:	e01a      	b.n	8007320 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 faa0 	bl	800783c <USB_CoreReset>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
 8007312:	e005      	b.n	8007320 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	2b01      	cmp	r3, #1
 8007324:	d116      	bne.n	8007354 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	b29a      	uxth	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <USB_CoreInit+0xd8>)
 8007336:	4313      	orrs	r3, r2
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f043 0206 	orr.w	r2, r3, #6
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f043 0220 	orr.w	r2, r3, #32
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007360:	b004      	add	sp, #16
 8007362:	4770      	bx	lr
 8007364:	ffbdffbf 	.word	0xffbdffbf
 8007368:	03ee0000 	.word	0x03ee0000

0800736c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f023 0201 	bic.w	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d115      	bne.n	80073dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073bc:	2001      	movs	r0, #1
 80073be:	f7fa fb1f 	bl	8001a00 <HAL_Delay>
      ms++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa29 	bl	8007820 <USB_GetMode>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d01e      	beq.n	8007412 <USB_SetCurrentMode+0x84>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b31      	cmp	r3, #49	; 0x31
 80073d8:	d9f0      	bls.n	80073bc <USB_SetCurrentMode+0x2e>
 80073da:	e01a      	b.n	8007412 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d115      	bne.n	800740e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073ee:	2001      	movs	r0, #1
 80073f0:	f7fa fb06 	bl	8001a00 <HAL_Delay>
      ms++;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa10 	bl	8007820 <USB_GetMode>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <USB_SetCurrentMode+0x84>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b31      	cmp	r3, #49	; 0x31
 800740a:	d9f0      	bls.n	80073ee <USB_SetCurrentMode+0x60>
 800740c:	e001      	b.n	8007412 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e005      	b.n	800741e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b32      	cmp	r3, #50	; 0x32
 8007416:	d101      	bne.n	800741c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e000      	b.n	800741e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007428:	b084      	sub	sp, #16
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e009      	b.n	800745c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3340      	adds	r3, #64	; 0x40
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	2200      	movs	r2, #0
 8007454:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	3301      	adds	r3, #1
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b0e      	cmp	r3, #14
 8007460:	d9f2      	bls.n	8007448 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11c      	bne.n	80074a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007476:	f043 0302 	orr.w	r3, r3, #2
 800747a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	e005      	b.n	80074ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074b4:	461a      	mov	r2, r3
 80074b6:	2300      	movs	r3, #0
 80074b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c0:	4619      	mov	r1, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c8:	461a      	mov	r2, r3
 80074ca:	680b      	ldr	r3, [r1, #0]
 80074cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10c      	bne.n	80074ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074da:	2100      	movs	r1, #0
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f965 	bl	80077ac <USB_SetDevSpeed>
 80074e2:	e008      	b.n	80074f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074e4:	2101      	movs	r1, #1
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f960 	bl	80077ac <USB_SetDevSpeed>
 80074ec:	e003      	b.n	80074f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074ee:	2103      	movs	r1, #3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f95b 	bl	80077ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074f6:	2110      	movs	r1, #16
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f8f3 	bl	80076e4 <USB_FlushTxFifo>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f91f 	bl	800774c <USB_FlushRxFifo>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751e:	461a      	mov	r2, r3
 8007520:	2300      	movs	r3, #0
 8007522:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	461a      	mov	r2, r3
 800752c:	2300      	movs	r3, #0
 800752e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	461a      	mov	r2, r3
 8007538:	2300      	movs	r3, #0
 800753a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	e043      	b.n	80075ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007558:	d118      	bne.n	800758c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	461a      	mov	r2, r3
 800756e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	e013      	b.n	800759e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007582:	461a      	mov	r2, r3
 8007584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e008      	b.n	800759e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007598:	461a      	mov	r2, r3
 800759a:	2300      	movs	r3, #0
 800759c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075aa:	461a      	mov	r2, r3
 80075ac:	2300      	movs	r3, #0
 80075ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	461a      	mov	r2, r3
 80075be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	3301      	adds	r3, #1
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d3b7      	bcc.n	8007542 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e043      	b.n	8007660 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ee:	d118      	bne.n	8007622 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	461a      	mov	r2, r3
 8007604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e013      	b.n	8007634 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007618:	461a      	mov	r2, r3
 800761a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e008      	b.n	8007634 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	461a      	mov	r2, r3
 8007630:	2300      	movs	r3, #0
 8007632:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	461a      	mov	r2, r3
 8007642:	2300      	movs	r3, #0
 8007644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	461a      	mov	r2, r3
 8007654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007658:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3301      	adds	r3, #1
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d3b7      	bcc.n	80075d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800767a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007688:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f043 0210 	orr.w	r2, r3, #16
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <USB_DevInit+0x2b4>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f043 0208 	orr.w	r2, r3, #8
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d105      	bne.n	80076cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <USB_DevInit+0x2b8>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076d8:	b004      	add	sp, #16
 80076da:	4770      	bx	lr
 80076dc:	803c3800 	.word	0x803c3800
 80076e0:	40000004 	.word	0x40000004

080076e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4a13      	ldr	r2, [pc, #76]	; (8007748 <USB_FlushTxFifo+0x64>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d901      	bls.n	8007704 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e01b      	b.n	800773c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	daf2      	bge.n	80076f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	019b      	lsls	r3, r3, #6
 8007714:	f043 0220 	orr.w	r2, r3, #32
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a08      	ldr	r2, [pc, #32]	; (8007748 <USB_FlushTxFifo+0x64>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d901      	bls.n	800772e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e006      	b.n	800773c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b20      	cmp	r3, #32
 8007738:	d0f0      	beq.n	800771c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	00030d40 	.word	0x00030d40

0800774c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <USB_FlushRxFifo+0x5c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e018      	b.n	800779c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	daf2      	bge.n	8007758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2210      	movs	r2, #16
 800777a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3301      	adds	r3, #1
 8007780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <USB_FlushRxFifo+0x5c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d901      	bls.n	800778e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e006      	b.n	800779c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0310 	and.w	r3, r3, #16
 8007796:	2b10      	cmp	r3, #16
 8007798:	d0f0      	beq.n	800777c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	00030d40 	.word	0x00030d40

080077ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077cc:	4313      	orrs	r3, r2
 80077ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077f8:	f023 0303 	bic.w	r3, r3, #3
 80077fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f003 0301 	and.w	r3, r3, #1
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3301      	adds	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <USB_CoreReset+0x64>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d901      	bls.n	800785a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e01b      	b.n	8007892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	daf2      	bge.n	8007848 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f043 0201 	orr.w	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3301      	adds	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <USB_CoreReset+0x64>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d901      	bls.n	8007884 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e006      	b.n	8007892 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d0f0      	beq.n	8007872 <USB_CoreReset+0x36>

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	00030d40 	.word	0x00030d40

080078a4 <__libc_init_array>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4d0d      	ldr	r5, [pc, #52]	; (80078dc <__libc_init_array+0x38>)
 80078a8:	4c0d      	ldr	r4, [pc, #52]	; (80078e0 <__libc_init_array+0x3c>)
 80078aa:	1b64      	subs	r4, r4, r5
 80078ac:	10a4      	asrs	r4, r4, #2
 80078ae:	2600      	movs	r6, #0
 80078b0:	42a6      	cmp	r6, r4
 80078b2:	d109      	bne.n	80078c8 <__libc_init_array+0x24>
 80078b4:	4d0b      	ldr	r5, [pc, #44]	; (80078e4 <__libc_init_array+0x40>)
 80078b6:	4c0c      	ldr	r4, [pc, #48]	; (80078e8 <__libc_init_array+0x44>)
 80078b8:	f000 f820 	bl	80078fc <_init>
 80078bc:	1b64      	subs	r4, r4, r5
 80078be:	10a4      	asrs	r4, r4, #2
 80078c0:	2600      	movs	r6, #0
 80078c2:	42a6      	cmp	r6, r4
 80078c4:	d105      	bne.n	80078d2 <__libc_init_array+0x2e>
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078cc:	4798      	blx	r3
 80078ce:	3601      	adds	r6, #1
 80078d0:	e7ee      	b.n	80078b0 <__libc_init_array+0xc>
 80078d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d6:	4798      	blx	r3
 80078d8:	3601      	adds	r6, #1
 80078da:	e7f2      	b.n	80078c2 <__libc_init_array+0x1e>
 80078dc:	08007954 	.word	0x08007954
 80078e0:	08007954 	.word	0x08007954
 80078e4:	08007954 	.word	0x08007954
 80078e8:	08007958 	.word	0x08007958

080078ec <memset>:
 80078ec:	4402      	add	r2, r0
 80078ee:	4603      	mov	r3, r0
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d100      	bne.n	80078f6 <memset+0xa>
 80078f4:	4770      	bx	lr
 80078f6:	f803 1b01 	strb.w	r1, [r3], #1
 80078fa:	e7f9      	b.n	80078f0 <memset+0x4>

080078fc <_init>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr

08007908 <_fini>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	bf00      	nop
 800790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790e:	bc08      	pop	{r3}
 8007910:	469e      	mov	lr, r3
 8007912:	4770      	bx	lr
