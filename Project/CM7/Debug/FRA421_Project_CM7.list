
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3c0  0800d3c0  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3c0  0800d3c0  0001d3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3c8  0800d3c8  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3c8  0800d3c8  0001d3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3cc  0800d3cc  0001d3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800d3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800d454  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800d4b4  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b78  24000144  0800d514  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000cbc  0800d514  00020cbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f8d1  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036e4  00000000  00000000  0003fa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001450  00000000  00000000  00043128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001330  00000000  00000000  00044578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c561  00000000  00000000  000458a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bcb1  00000000  00000000  00081e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187249  00000000  00000000  0009daba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00224d03  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059c8  00000000  00000000  00224d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bd0c 	.word	0x0800bd0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800bd0c 	.word	0x0800bd0c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->actionPositon = src->actionPositon;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b088      	sub	sp, #32
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3314      	adds	r3, #20
 80006f2:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	76fb      	strb	r3, [r7, #27]
 80006f8:	e00b      	b.n	8000712 <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	69f9      	ldr	r1, [r7, #28]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffbf 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	330c      	adds	r3, #12
 800070a:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800070c:	7efb      	ldrb	r3, [r7, #27]
 800070e:	3301      	adds	r3, #1
 8000710:	76fb      	strb	r3, [r7, #27]
 8000712:	7efb      	ldrb	r3, [r7, #27]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d9f0      	bls.n	80006fa <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b088      	sub	sp, #32
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800073c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800073e:	2300      	movs	r3, #0
 8000740:	76fb      	strb	r3, [r7, #27]
 8000742:	e00b      	b.n	800075c <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	69f9      	ldr	r1, [r7, #28]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff9a 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	330c      	adds	r3, #12
 8000754:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000756:	7efb      	ldrb	r3, [r7, #27]
 8000758:	3301      	adds	r3, #1
 800075a:	76fb      	strb	r3, [r7, #27]
 800075c:	7efb      	ldrb	r3, [r7, #27]
 800075e:	2b05      	cmp	r3, #5
 8000760:	d9f0      	bls.n	8000744 <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800077a:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000782:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800078a:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000792:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000794:	2306      	movs	r3, #6
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	e00c      	b.n	80007b4 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800079a:	6939      	ldr	r1, [r7, #16]
 800079c:	6978      	ldr	r0, [r7, #20]
 800079e:	f7ff ff71 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3b0c      	subs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3b0c      	subs	r3, #12
 80007ac:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dcef      	bgt.n	800079a <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	3304      	adds	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	3304      	adds	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007e6:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007ee:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	f000 820b 	beq.w	8000c0e <GAME_PLAY_Management+0x44a>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	f300 8238 	bgt.w	8000c6e <GAME_PLAY_Management+0x4aa>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <GAME_PLAY_Management+0x46>
 8000802:	2b01      	cmp	r3, #1
 8000804:	f000 81d3 	beq.w	8000bae <GAME_PLAY_Management+0x3ea>
			state_game->F_flag = 0;
		}
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 8000808:	e231      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800080a:	4baa      	ldr	r3, [pc, #680]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 800080c:	2200      	movs	r2, #0
 800080e:	9202      	str	r2, [sp, #8]
 8000810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000814:	9201      	str	r2, [sp, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4aa6      	ldr	r2, [pc, #664]	; (8000ab8 <GAME_PLAY_Management+0x2f4>)
 800081e:	2105      	movs	r1, #5
 8000820:	2005      	movs	r0, #5
 8000822:	f001 fdfe 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000826:	4ba3      	ldr	r3, [pc, #652]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000828:	2200      	movs	r2, #0
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	9200      	str	r2, [sp, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4aa0      	ldr	r2, [pc, #640]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 800083a:	210f      	movs	r1, #15
 800083c:	2000      	movs	r0, #0
 800083e:	f001 fdf0 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000842:	4b9f      	ldr	r3, [pc, #636]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000844:	2200      	movs	r2, #0
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a9b      	ldr	r2, [pc, #620]	; (8000ac4 <GAME_PLAY_Management+0x300>)
 8000856:	2123      	movs	r1, #35	; 0x23
 8000858:	2008      	movs	r0, #8
 800085a:	f001 fde2 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800085e:	4b98      	ldr	r3, [pc, #608]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000860:	2200      	movs	r2, #0
 8000862:	9202      	str	r2, [sp, #8]
 8000864:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000868:	9201      	str	r2, [sp, #4]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	9200      	str	r2, [sp, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a95      	ldr	r2, [pc, #596]	; (8000ac8 <GAME_PLAY_Management+0x304>)
 8000872:	213c      	movs	r1, #60	; 0x3c
 8000874:	2019      	movs	r0, #25
 8000876:	f001 fdd4 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800087a:	4b8e      	ldr	r3, [pc, #568]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 800087c:	2200      	movs	r2, #0
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a8b      	ldr	r2, [pc, #556]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 800088e:	214b      	movs	r1, #75	; 0x4b
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fdc6 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000896:	4b87      	ldr	r3, [pc, #540]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000898:	2200      	movs	r2, #0
 800089a:	9202      	str	r2, [sp, #8]
 800089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a88      	ldr	r2, [pc, #544]	; (8000acc <GAME_PLAY_Management+0x308>)
 80008aa:	215a      	movs	r1, #90	; 0x5a
 80008ac:	2000      	movs	r0, #0
 80008ae:	f001 fdb8 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008b2:	4b80      	ldr	r3, [pc, #512]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	9202      	str	r2, [sp, #8]
 80008b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a82      	ldr	r2, [pc, #520]	; (8000ad0 <GAME_PLAY_Management+0x30c>)
 80008c6:	215a      	movs	r1, #90	; 0x5a
 80008c8:	205d      	movs	r0, #93	; 0x5d
 80008ca:	f001 fdaa 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008ce:	4b79      	ldr	r3, [pc, #484]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a7c      	ldr	r2, [pc, #496]	; (8000ad4 <GAME_PLAY_Management+0x310>)
 80008e2:	2169      	movs	r1, #105	; 0x69
 80008e4:	2000      	movs	r0, #0
 80008e6:	f001 fd9c 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008ea:	4b72      	ldr	r3, [pc, #456]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	9202      	str	r2, [sp, #8]
 80008f0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a76      	ldr	r2, [pc, #472]	; (8000ad8 <GAME_PLAY_Management+0x314>)
 80008fe:	2169      	movs	r1, #105	; 0x69
 8000900:	2064      	movs	r0, #100	; 0x64
 8000902:	f001 fd8e 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000908:	2200      	movs	r2, #0
 800090a:	9202      	str	r2, [sp, #8]
 800090c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a70      	ldr	r2, [pc, #448]	; (8000adc <GAME_PLAY_Management+0x318>)
 800091a:	2105      	movs	r1, #5
 800091c:	2005      	movs	r0, #5
 800091e:	f001 fdca 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000924:	2200      	movs	r2, #0
 8000926:	9202      	str	r2, [sp, #8]
 8000928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a61      	ldr	r2, [pc, #388]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 8000936:	210f      	movs	r1, #15
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fdbc 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000940:	2200      	movs	r2, #0
 8000942:	9202      	str	r2, [sp, #8]
 8000944:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000948:	9201      	str	r2, [sp, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	9200      	str	r2, [sp, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a5c      	ldr	r2, [pc, #368]	; (8000ac4 <GAME_PLAY_Management+0x300>)
 8000952:	2123      	movs	r1, #35	; 0x23
 8000954:	2008      	movs	r0, #8
 8000956:	f001 fdae 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800095a:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 800095c:	2200      	movs	r2, #0
 800095e:	9202      	str	r2, [sp, #8]
 8000960:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000964:	9201      	str	r2, [sp, #4]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	9200      	str	r2, [sp, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a56      	ldr	r2, [pc, #344]	; (8000ac8 <GAME_PLAY_Management+0x304>)
 800096e:	213c      	movs	r1, #60	; 0x3c
 8000970:	2014      	movs	r0, #20
 8000972:	f001 fda0 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000978:	2200      	movs	r2, #0
 800097a:	9202      	str	r2, [sp, #8]
 800097c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000980:	9201      	str	r2, [sp, #4]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a4c      	ldr	r2, [pc, #304]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 800098a:	214b      	movs	r1, #75	; 0x4b
 800098c:	2000      	movs	r0, #0
 800098e:	f001 fd92 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000992:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000994:	2200      	movs	r2, #0
 8000996:	9202      	str	r2, [sp, #8]
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	9201      	str	r2, [sp, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	9200      	str	r2, [sp, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a49      	ldr	r2, [pc, #292]	; (8000acc <GAME_PLAY_Management+0x308>)
 80009a6:	215a      	movs	r1, #90	; 0x5a
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fd84 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009ae:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	9202      	str	r2, [sp, #8]
 80009b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a43      	ldr	r2, [pc, #268]	; (8000ad0 <GAME_PLAY_Management+0x30c>)
 80009c2:	215a      	movs	r1, #90	; 0x5a
 80009c4:	205d      	movs	r0, #93	; 0x5d
 80009c6:	f001 fd76 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	9202      	str	r2, [sp, #8]
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	9200      	str	r2, [sp, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a3d      	ldr	r2, [pc, #244]	; (8000ad4 <GAME_PLAY_Management+0x310>)
 80009de:	2169      	movs	r1, #105	; 0x69
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fd68 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009e6:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	9202      	str	r2, [sp, #8]
 80009ec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	9200      	str	r2, [sp, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <GAME_PLAY_Management+0x314>)
 80009fa:	2169      	movs	r1, #105	; 0x69
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f001 fd5a 	bl	80024b6 <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000a02:	2108      	movs	r1, #8
 8000a04:	4836      	ldr	r0, [pc, #216]	; (8000ae0 <GAME_PLAY_Management+0x31c>)
 8000a06:	f005 fbb3 	bl	8006170 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f040 80c9 	bne.w	8000ba4 <GAME_PLAY_Management+0x3e0>
			ptrPlayer1->life_point = 4000;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a18:	801a      	strh	r2, [r3, #0]
			ptrPlayer2->life_point = 4000;
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a20:	801a      	strh	r2, [r3, #0]
			ST7735_FillScreen(ST7735_BLACK);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f001 fe7a 	bl	800271c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fe88 	bl	800273e <ST7735_FillScreen1>
			ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	9202      	str	r2, [sp, #8]
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <GAME_PLAY_Management+0x2f4>)
 8000a42:	2105      	movs	r1, #5
 8000a44:	2005      	movs	r0, #5
 8000a46:	f001 fcec 	bl	8002422 <ST7735_WriteString>
			ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	9202      	str	r2, [sp, #8]
 8000a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 8000a5e:	210f      	movs	r1, #15
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 fcde 	bl	8002422 <ST7735_WriteString>
			ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	9202      	str	r2, [sp, #8]
 8000a6c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000a70:	9201      	str	r2, [sp, #4]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <GAME_PLAY_Management+0x320>)
 8000a7a:	2123      	movs	r1, #35	; 0x23
 8000a7c:	2019      	movs	r0, #25
 8000a7e:	f001 fcd0 	bl	8002422 <ST7735_WriteString>
			ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	9202      	str	r2, [sp, #8]
 8000a88:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a8c:	9201      	str	r2, [sp, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <GAME_PLAY_Management+0x324>)
 8000a96:	213c      	movs	r1, #60	; 0x3c
 8000a98:	2021      	movs	r0, #33	; 0x21
 8000a9a:	f001 fcc2 	bl	8002422 <ST7735_WriteString>
			ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	9202      	str	r2, [sp, #8]
 8000aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa8:	9201      	str	r2, [sp, #4]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	9200      	str	r2, [sp, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	e01c      	b.n	8000aec <GAME_PLAY_Management+0x328>
 8000ab2:	bf00      	nop
 8000ab4:	24000008 	.word	0x24000008
 8000ab8:	0800bd24 	.word	0x0800bd24
 8000abc:	0800bd30 	.word	0x0800bd30
 8000ac0:	24000010 	.word	0x24000010
 8000ac4:	0800bd44 	.word	0x0800bd44
 8000ac8:	0800bd50 	.word	0x0800bd50
 8000acc:	0800bd58 	.word	0x0800bd58
 8000ad0:	0800bd68 	.word	0x0800bd68
 8000ad4:	0800bd70 	.word	0x0800bd70
 8000ad8:	0800bd80 	.word	0x0800bd80
 8000adc:	0800bd84 	.word	0x0800bd84
 8000ae0:	58020000 	.word	0x58020000
 8000ae4:	0800bd90 	.word	0x0800bd90
 8000ae8:	0800bd98 	.word	0x0800bd98
 8000aec:	4a62      	ldr	r2, [pc, #392]	; (8000c78 <GAME_PLAY_Management+0x4b4>)
 8000aee:	214b      	movs	r1, #75	; 0x4b
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 fc96 	bl	8002422 <ST7735_WriteString>
			ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000af6:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <GAME_PLAY_Management+0x4b8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	9202      	str	r2, [sp, #8]
 8000afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a5d      	ldr	r2, [pc, #372]	; (8000c80 <GAME_PLAY_Management+0x4bc>)
 8000b0a:	2105      	movs	r1, #5
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f001 fcd2 	bl	80024b6 <ST7735_WriteString1>
			ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b12:	4b5a      	ldr	r3, [pc, #360]	; (8000c7c <GAME_PLAY_Management+0x4b8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a54      	ldr	r2, [pc, #336]	; (8000c78 <GAME_PLAY_Management+0x4b4>)
 8000b26:	210f      	movs	r1, #15
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f001 fcc4 	bl	80024b6 <ST7735_WriteString1>
			ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b2e:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	9202      	str	r2, [sp, #8]
 8000b34:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	9200      	str	r2, [sp, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a51      	ldr	r2, [pc, #324]	; (8000c88 <GAME_PLAY_Management+0x4c4>)
 8000b42:	2123      	movs	r1, #35	; 0x23
 8000b44:	2019      	movs	r0, #25
 8000b46:	f001 fcb6 	bl	80024b6 <ST7735_WriteString1>
			ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b4a:	4b4e      	ldr	r3, [pc, #312]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	9202      	str	r2, [sp, #8]
 8000b50:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	9200      	str	r2, [sp, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a4b      	ldr	r2, [pc, #300]	; (8000c8c <GAME_PLAY_Management+0x4c8>)
 8000b5e:	213c      	movs	r1, #60	; 0x3c
 8000b60:	2025      	movs	r0, #37	; 0x25
 8000b62:	f001 fca8 	bl	80024b6 <ST7735_WriteString1>
			ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b66:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <GAME_PLAY_Management+0x4b8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	9202      	str	r2, [sp, #8]
 8000b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	9200      	str	r2, [sp, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a3f      	ldr	r2, [pc, #252]	; (8000c78 <GAME_PLAY_Management+0x4b4>)
 8000b7a:	214b      	movs	r1, #75	; 0x4b
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f001 fc9a 	bl	80024b6 <ST7735_WriteString1>
			HAL_Delay(3000);
 8000b82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b86:	f002 f9a5 	bl	8002ed4 <HAL_Delay>
			ST7735_FillScreen(ST7735_BLACK);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f001 fdc6 	bl	800271c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f001 fdd4 	bl	800273e <ST7735_FillScreen1>
			MainGUI();
 8000b96:	f000 fdc3 	bl	8001720 <MainGUI>
			state_game->player_state = first_player;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000ba2:	e064      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
			state_game->test = 98;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2262      	movs	r2, #98	; 0x62
 8000ba8:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 8000bac:	e05f      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
		if (state_game -> F_flag == 0){
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d125      	bne.n	8000c04 <GAME_PLAY_Management+0x440>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	9202      	str	r2, [sp, #8]
 8000bbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000bc2:	9201      	str	r2, [sp, #4]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	9200      	str	r2, [sp, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <GAME_PLAY_Management+0x4cc>)
 8000bcc:	215a      	movs	r1, #90	; 0x5a
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f001 fc71 	bl	80024b6 <ST7735_WriteString1>
			HAL_Delay(2000);
 8000bd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bd8:	f002 f97c 	bl	8002ed4 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2326      	movs	r3, #38	; 0x26
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	215a      	movs	r1, #90	; 0x5a
 8000be6:	2000      	movs	r0, #0
 8000be8:	f001 fd24 	bl	8002634 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
			state_game->S_flag = 0;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f844 	bl	8000c94 <GAME_PLAY_Phase_Management>
		break;
 8000c0c:	e02f      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
		if (state_game -> S_flag == 0){
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d125      	bne.n	8000c64 <GAME_PLAY_Management+0x4a0>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	9202      	str	r2, [sp, #8]
 8000c1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <GAME_PLAY_Management+0x4cc>)
 8000c2c:	215a      	movs	r1, #90	; 0x5a
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f001 fbf7 	bl	8002422 <ST7735_WriteString>
			HAL_Delay(2000);
 8000c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c38:	f002 f94c 	bl	8002ed4 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2326      	movs	r3, #38	; 0x26
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	215a      	movs	r1, #90	; 0x5a
 8000c46:	2000      	movs	r0, #0
 8000c48:	f001 fc80 	bl	800254c <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
			state_game->F_flag = 0;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000c64:	6839      	ldr	r1, [r7, #0]
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 f814 	bl	8000c94 <GAME_PLAY_Phase_Management>
		break;
 8000c6c:	bf00      	nop
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	0800bd30 	.word	0x0800bd30
 8000c7c:	24000008 	.word	0x24000008
 8000c80:	0800bd84 	.word	0x0800bd84
 8000c84:	24000010 	.word	0x24000010
 8000c88:	0800bd90 	.word	0x0800bd90
 8000c8c:	0800bda0 	.word	0x0800bda0
 8000c90:	0800bda8 	.word	0x0800bda8

08000c94 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b090      	sub	sp, #64	; 0x40
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Chain_Phase
	} STATE;
	STATE = state_game->STATE;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 8000ca4:	76bb      	strb	r3, [r7, #26]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8000cac:	767b      	strb	r3, [r7, #25]

    enum _BATTLE {
    	selection, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
    } BATTLE;
    BATTLE = state_game->BATTLE;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 8000cb4:	763b      	strb	r3, [r7, #24]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	Player *ptrPlayerDef = state_game->player;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (state_game->player_state == first_player) {
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d107      	bne.n	8000cdc <GAME_PLAY_Phase_Management+0x48>
		ptrPlayerAtk = &state_game->player[0];
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[1];
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	e00b      	b.n	8000cf4 <GAME_PLAY_Phase_Management+0x60>
	} else if (state_game->player_state == first_player) {
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d106      	bne.n	8000cf4 <GAME_PLAY_Phase_Management+0x60>
		ptrPlayerAtk = &state_game->player[1];
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[0];
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000cf4:	7ebb      	ldrb	r3, [r7, #26]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	f200 843c 	bhi.w	8001574 <GAME_PLAY_Phase_Management+0x8e0>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <GAME_PLAY_Phase_Management+0x70>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000e41 	.word	0x08000e41
 8000d0c:	08001401 	.word	0x08001401
 8000d10:	0800156b 	.word	0x0800156b
	case Drawn_Phase:
		//		ST7735_FillScreen(ST7735_BLACK);
		//		ST7735_FillScreen1(ST7735_BLACK);
		//		// MAIN display for draw phase state
		sprintf(C_LP2, "%d",ptrPlayerDef -> life_point);
 8000d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	49a3      	ldr	r1, [pc, #652]	; (8000fa8 <GAME_PLAY_Phase_Management+0x314>)
 8000d1c:	48a3      	ldr	r0, [pc, #652]	; (8000fac <GAME_PLAY_Phase_Management+0x318>)
 8000d1e:	f00a fc77 	bl	800b610 <siprintf>
		ST7735_WriteString( 90, 20, C_LP2, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d22:	4ba3      	ldr	r3, [pc, #652]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	9202      	str	r2, [sp, #8]
 8000d28:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d2c:	9201      	str	r2, [sp, #4]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	9200      	str	r2, [sp, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a9d      	ldr	r2, [pc, #628]	; (8000fac <GAME_PLAY_Phase_Management+0x318>)
 8000d36:	2114      	movs	r1, #20
 8000d38:	205a      	movs	r0, #90	; 0x5a
 8000d3a:	f001 fb72 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000d3e:	4b9c      	ldr	r3, [pc, #624]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	9202      	str	r2, [sp, #8]
 8000d44:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000d48:	9201      	str	r2, [sp, #4]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	9200      	str	r2, [sp, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a98      	ldr	r2, [pc, #608]	; (8000fb4 <GAME_PLAY_Phase_Management+0x320>)
 8000d52:	2123      	movs	r1, #35	; 0x23
 8000d54:	203c      	movs	r0, #60	; 0x3c
 8000d56:	f001 fb64 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d5a:	4b95      	ldr	r3, [pc, #596]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	9202      	str	r2, [sp, #8]
 8000d60:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d64:	9201      	str	r2, [sp, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	9200      	str	r2, [sp, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a92      	ldr	r2, [pc, #584]	; (8000fb8 <GAME_PLAY_Phase_Management+0x324>)
 8000d6e:	2132      	movs	r1, #50	; 0x32
 8000d70:	2069      	movs	r0, #105	; 0x69
 8000d72:	f001 fb56 	bl	8002422 <ST7735_WriteString>
		ST7735_WriteString(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d76:	4b8e      	ldr	r3, [pc, #568]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	9202      	str	r2, [sp, #8]
 8000d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d80:	9201      	str	r2, [sp, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	9200      	str	r2, [sp, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a8c      	ldr	r2, [pc, #560]	; (8000fbc <GAME_PLAY_Phase_Management+0x328>)
 8000d8a:	215a      	movs	r1, #90	; 0x5a
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f001 fb48 	bl	8002422 <ST7735_WriteString>
		sprintf(C_LP1, "%d",ptrPlayerAtk -> life_point);
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4983      	ldr	r1, [pc, #524]	; (8000fa8 <GAME_PLAY_Phase_Management+0x314>)
 8000d9a:	4889      	ldr	r0, [pc, #548]	; (8000fc0 <GAME_PLAY_Phase_Management+0x32c>)
 8000d9c:	f00a fc38 	bl	800b610 <siprintf>
		ST7735_WriteString1( 90, 20, C_LP1, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000da0:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	9202      	str	r2, [sp, #8]
 8000da6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000daa:	9201      	str	r2, [sp, #4]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	9200      	str	r2, [sp, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a83      	ldr	r2, [pc, #524]	; (8000fc0 <GAME_PLAY_Phase_Management+0x32c>)
 8000db4:	2114      	movs	r1, #20
 8000db6:	205a      	movs	r0, #90	; 0x5a
 8000db8:	f001 fb7d 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000dbc:	4b7c      	ldr	r3, [pc, #496]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	9202      	str	r2, [sp, #8]
 8000dc2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	9200      	str	r2, [sp, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a79      	ldr	r2, [pc, #484]	; (8000fb4 <GAME_PLAY_Phase_Management+0x320>)
 8000dd0:	2123      	movs	r1, #35	; 0x23
 8000dd2:	203c      	movs	r0, #60	; 0x3c
 8000dd4:	f001 fb6f 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000dd8:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	9202      	str	r2, [sp, #8]
 8000dde:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000de2:	9201      	str	r2, [sp, #4]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	9200      	str	r2, [sp, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a73      	ldr	r2, [pc, #460]	; (8000fb8 <GAME_PLAY_Phase_Management+0x324>)
 8000dec:	2132      	movs	r1, #50	; 0x32
 8000dee:	2069      	movs	r0, #105	; 0x69
 8000df0:	f001 fb61 	bl	80024b6 <ST7735_WriteString1>
		ST7735_WriteString1(5, 90, "Draw a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000df4:	4b6e      	ldr	r3, [pc, #440]	; (8000fb0 <GAME_PLAY_Phase_Management+0x31c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	9202      	str	r2, [sp, #8]
 8000dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfe:	9201      	str	r2, [sp, #4]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	9200      	str	r2, [sp, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6f      	ldr	r2, [pc, #444]	; (8000fc4 <GAME_PLAY_Phase_Management+0x330>)
 8000e08:	215a      	movs	r1, #90	; 0x5a
 8000e0a:	2005      	movs	r0, #5
 8000e0c:	f001 fb53 	bl	80024b6 <ST7735_WriteString1>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000e10:	2101      	movs	r1, #1
 8000e12:	486d      	ldr	r0, [pc, #436]	; (8000fc8 <GAME_PLAY_Phase_Management+0x334>)
 8000e14:	f005 f9ac 	bl	8006170 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 83a7 	bne.w	800156e <GAME_PLAY_Phase_Management+0x8da>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000e36:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e3a:	f002 f84b 	bl	8002ed4 <HAL_Delay>
		}
		break;
 8000e3e:	e396      	b.n	800156e <GAME_PLAY_Phase_Management+0x8da>
	case Main_Phase:

		switch (MAIN)
 8000e40:	7e7b      	ldrb	r3, [r7, #25]
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	f200 8395 	bhi.w	8001572 <GAME_PLAY_Phase_Management+0x8de>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <GAME_PLAY_Phase_Management+0x1bc>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e6d 	.word	0x08000e6d
 8000e54:	08000eb1 	.word	0x08000eb1
 8000e58:	08000fd5 	.word	0x08000fd5
 8000e5c:	0800119b 	.word	0x0800119b
 8000e60:	0800135b 	.word	0x0800135b
 8000e64:	0800130d 	.word	0x0800130d
 8000e68:	080012a9 	.word	0x080012a9
		{
		case await:
			if (state_game->action == 0)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d113      	bne.n	8000e9c <GAME_PLAY_Phase_Management+0x208>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000e74:	2101      	movs	r1, #1
 8000e76:	4854      	ldr	r0, [pc, #336]	; (8000fc8 <GAME_PLAY_Phase_Management+0x334>)
 8000e78:	f005 f97a 	bl	8006170 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <GAME_PLAY_Phase_Management+0x1fc>
						== GPIO_PIN_RESET){
					state_game->action =50;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2232      	movs	r2, #50	; 0x32
 8000e86:	701a      	strb	r2, [r3, #0]
					state_game->STATE = Battle_Phase;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
				}
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 fb71 	bl	800157c <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000e9a:	e2a3      	b.n	80013e4 <GAME_PLAY_Phase_Management+0x750>
			else if (state_game->action == 1)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	f040 829f 	bne.w	80013e4 <GAME_PLAY_Phase_Management+0x750>
				state_game->MAIN = select_position;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000eae:	e299      	b.n	80013e4 <GAME_PLAY_Phase_Management+0x750>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000eb6:	617b      	str	r3, [r7, #20]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24

			if (state_game->action == 1)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d15e      	bne.n	8000f86 <GAME_PLAY_Phase_Management+0x2f2>
			{
				if (state_game->player_state == first_player)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d135      	bne.n	8000f3e <GAME_PLAY_Phase_Management+0x2aa>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	483c      	ldr	r0, [pc, #240]	; (8000fc8 <GAME_PLAY_Phase_Management+0x334>)
 8000ed6:	f005 f94b 	bl	8006170 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d106      	bne.n	8000eee <GAME_PLAY_Phase_Management+0x25a>
					{
						ptrYugiohCard_src->cardState = 1;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000eec:	e27c      	b.n	80013e8 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4836      	ldr	r0, [pc, #216]	; (8000fcc <GAME_PLAY_Phase_Management+0x338>)
 8000ef2:	f005 f93d 	bl	8006170 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <GAME_PLAY_Phase_Management+0x276>
						ptrYugiohCard_src->cardState = 0;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2200      	movs	r2, #0
 8000f00:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2202      	movs	r2, #2
 8000f06:	701a      	strb	r2, [r3, #0]
			break;
 8000f08:	e26e      	b.n	80013e8 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0e:	4830      	ldr	r0, [pc, #192]	; (8000fd0 <GAME_PLAY_Phase_Management+0x33c>)
 8000f10:	f005 f92e 	bl	8006170 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d104      	bne.n	8000f24 <GAME_PLAY_Phase_Management+0x290>
						state_game->test = 22;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2216      	movs	r2, #22
 8000f1e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000f22:	e261      	b.n	80013e8 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000f24:	2104      	movs	r1, #4
 8000f26:	4828      	ldr	r0, [pc, #160]	; (8000fc8 <GAME_PLAY_Phase_Management+0x334>)
 8000f28:	f005 f922 	bl	8006170 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f040 825a 	bne.w	80013e8 <GAME_PLAY_Phase_Management+0x754>
						state_game->test = 33;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2221      	movs	r2, #33	; 0x21
 8000f38:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000f3c:	e254      	b.n	80013e8 <GAME_PLAY_Phase_Management+0x754>
				else if (state_game->player_state == second_player)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	f040 824f 	bne.w	80013e8 <GAME_PLAY_Phase_Management+0x754>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <GAME_PLAY_Phase_Management+0x334>)
 8000f4e:	f005 f90f 	bl	8006170 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <GAME_PLAY_Phase_Management+0x2d2>
						ptrYugiohCard_src->cardState = 1;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2202      	movs	r2, #2
 8000f62:	701a      	strb	r2, [r3, #0]
			break;
 8000f64:	e240      	b.n	80013e8 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6a:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <GAME_PLAY_Phase_Management+0x33c>)
 8000f6c:	f005 f900 	bl	8006170 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f040 8238 	bne.w	80013e8 <GAME_PLAY_Phase_Management+0x754>
						ptrYugiohCard_src->cardState = 0;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2202      	movs	r2, #2
 8000f82:	701a      	strb	r2, [r3, #0]
			break;
 8000f84:	e230      	b.n	80013e8 <GAME_PLAY_Phase_Management+0x754>
			else if (state_game->action == 2)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	f040 822c 	bne.w	80013e8 <GAME_PLAY_Phase_Management+0x754>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff fb76 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000fa6:	e21f      	b.n	80013e8 <GAME_PLAY_Phase_Management+0x754>
 8000fa8:	0800bdb4 	.word	0x0800bdb4
 8000fac:	24000164 	.word	0x24000164
 8000fb0:	24000008 	.word	0x24000008
 8000fb4:	0800bdb8 	.word	0x0800bdb8
 8000fb8:	0800bd80 	.word	0x0800bd80
 8000fbc:	0800bdc4 	.word	0x0800bdc4
 8000fc0:	24000160 	.word	0x24000160
 8000fc4:	0800bdd4 	.word	0x0800bdd4
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58021400 	.word	0x58021400
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000fda:	617b      	str	r3, [r7, #20]

			if (state_game->action == 3)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	f040 8203 	bne.w	80013ec <GAME_PLAY_Phase_Management+0x758>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d12a      	bne.n	8001044 <GAME_PLAY_Phase_Management+0x3b0>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	799a      	ldrb	r2, [r3, #6]
 8000ff2:	4bac      	ldr	r3, [pc, #688]	; (80012a4 <GAME_PLAY_Phase_Management+0x610>)
 8000ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff8:	0899      	lsrs	r1, r3, #2
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	440b      	add	r3, r1
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	73fb      	strb	r3, [r7, #15]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001012:	4413      	add	r3, r2
 8001014:	3304      	adds	r3, #4
 8001016:	627b      	str	r3, [r7, #36]	; 0x24

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff fb32 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001022:	f7ff fb7e 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001028:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800102c:	6979      	ldr	r1, [r7, #20]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fb28 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 8001042:	e1d3      	b.n	80013ec <GAME_PLAY_Phase_Management+0x758>
				else if (ptrYugiohCard_src->cardType == 2)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d144      	bne.n	80010d6 <GAME_PLAY_Phase_Management+0x442>
					state_game->count_chain = 1;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2201      	movs	r2, #1
 8001050:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->actionPositon == 1){
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	799b      	ldrb	r3, [r3, #6]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d112      	bne.n	8001080 <GAME_PLAY_Phase_Management+0x3ec>
						state_game->test = 33;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2221      	movs	r2, #33	; 0x21
 800105e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001064:	f7ff fb5d 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2204      	movs	r2, #4
 800106c:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 800106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001070:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
						state_game->MAIN = chaining_main_DEF;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2206      	movs	r2, #6
 800107a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800107e:	e1b5      	b.n	80013ec <GAME_PLAY_Phase_Management+0x758>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	799a      	ldrb	r2, [r3, #6]
 8001084:	4b87      	ldr	r3, [pc, #540]	; (80012a4 <GAME_PLAY_Phase_Management+0x610>)
 8001086:	fba3 1302 	umull	r1, r3, r3, r2
 800108a:	0899      	lsrs	r1, r3, #2
 800108c:	460b      	mov	r3, r1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	440b      	add	r3, r1
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	743b      	strb	r3, [r7, #16]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80010aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ac:	6978      	ldr	r0, [r7, #20]
 80010ae:	f7ff fae9 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80010b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010b4:	f7ff fb35 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80010b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80010be:	6979      	ldr	r1, [r7, #20]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fadf 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 80010d4:	e18a      	b.n	80013ec <GAME_PLAY_Phase_Management+0x758>
				else if (ptrYugiohCard_src->cardType == 1)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	f040 8186 	bne.w	80013ec <GAME_PLAY_Phase_Management+0x758>
					state_game->test = 2;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2202      	movs	r2, #2
 80010e4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if (ptrYugiohCard_src->cardLevel < 7)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	d849      	bhi.n	8001184 <GAME_PLAY_Phase_Management+0x4f0>
						state_game->test = 1;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	799a      	ldrb	r2, [r3, #6]
 80010fc:	4b69      	ldr	r3, [pc, #420]	; (80012a4 <GAME_PLAY_Phase_Management+0x610>)
 80010fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001102:	0899      	lsrs	r1, r3, #2
 8001104:	460b      	mov	r3, r1
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	440b      	add	r3, r1
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	747b      	strb	r3, [r7, #17]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001110:	7c7a      	ldrb	r2, [r7, #17]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800111c:	4413      	add	r3, r2
 800111e:	3304      	adds	r3, #4
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff faad 	bl	8000684 <YUGIOH_card_copy>
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[4];
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112c:	3334      	adds	r3, #52	; 0x34
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff faa6 	bl	8000684 <YUGIOH_card_copy>
						ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[idx];
 8001138:	7c7a      	ldrb	r2, [r7, #17]
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800114a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800114c:	6978      	ldr	r0, [r7, #20]
 800114e:	f7ff fa99 	bl	8000684 <YUGIOH_card_copy>
						ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[4];
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	3334      	adds	r3, #52	; 0x34
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff fa92 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001162:	f7ff fade 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001168:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800116c:	6979      	ldr	r1, [r7, #20]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fa88 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001182:	e133      	b.n	80013ec <GAME_PLAY_Phase_Management+0x758>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001186:	f7ff facc 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2204      	movs	r2, #4
 800118e:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2203      	movs	r2, #3
 8001194:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001198:	e128      	b.n	80013ec <GAME_PLAY_Phase_Management+0x758>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 800119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80011a0:	617b      	str	r3, [r7, #20]

			if (state_game->action == 4)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d105      	bne.n	80011b6 <GAME_PLAY_Phase_Management+0x522>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80011aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f9e4 	bl	800157c <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
				}
			}
				break;
 80011b4:	e11c      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x75c>
			else if (state_game->action == 5)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d105      	bne.n	80011ca <GAME_PLAY_Phase_Management+0x536>
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80011be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f9da 	bl	800157c <Player_Reading_Card>
				break;
 80011c8:	e112      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x75c>
			else if (state_game->action == 6)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	f040 810e 	bne.w	80013f0 <GAME_PLAY_Phase_Management+0x75c>
				uint8_t monsterflag = 0 ;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	78db      	ldrb	r3, [r3, #3]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d804      	bhi.n	80011f4 <GAME_PLAY_Phase_Management+0x560>
					monsterflag += 1;
 80011ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ee:	3301      	adds	r3, #1
 80011f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst++;
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	330c      	adds	r3, #12
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d804      	bhi.n	800120c <GAME_PLAY_Phase_Management+0x578>
					monsterflag += 1;
 8001202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001206:	3301      	adds	r3, #1
 8001208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (monsterflag == 2)
 800120c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001210:	2b02      	cmp	r3, #2
 8001212:	d138      	bne.n	8001286 <GAME_PLAY_Phase_Management+0x5f2>
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	799a      	ldrb	r2, [r3, #6]
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <GAME_PLAY_Phase_Management+0x610>)
 800121a:	fba3 1302 	umull	r1, r3, r3, r2
 800121e:	0899      	lsrs	r1, r3, #2
 8001220:	460b      	mov	r3, r1
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	440b      	add	r3, r1
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	74bb      	strb	r3, [r7, #18]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 800122c:	7cba      	ldrb	r2, [r7, #18]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001238:	4413      	add	r3, r2
 800123a:	3304      	adds	r3, #4
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800123e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f7ff fa1f 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[0]);
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800124c:	4619      	mov	r1, r3
 800124e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001250:	f000 fa25 	bl	800169e <YUGIOH_To_GY>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[1]);
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800125a:	4619      	mov	r1, r3
 800125c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800125e:	f000 fa1e 	bl	800169e <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001264:	f7ff fa5d 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800126e:	6979      	ldr	r1, [r7, #20]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fa07 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				break;
 8001284:	e0b4      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x75c>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001288:	f7ff fa4b 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f7ff f9f2 	bl	8000684 <YUGIOH_card_copy>
				break;
 80012a0:	e0a6      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x75c>
 80012a2:	bf00      	nop
 80012a4:	aaaaaaab 	.word	0xaaaaaaab
		case chaining_main_DEF:
			state_game->test = 34;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2222      	movs	r2, #34	; 0x22
 80012ac:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(state_game->action == 4)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d116      	bne.n	80012e6 <GAME_PLAY_Phase_Management+0x652>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80012b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f95d 	bl	800157c <Player_Reading_Card>
				state_game->test = 35;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2223      	movs	r2, #35	; 0x23
 80012c6:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 80012ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ce:	48a4      	ldr	r0, [pc, #656]	; (8001560 <GAME_PLAY_Phase_Management+0x8cc>)
 80012d0:	f004 ff4e 	bl	8006170 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 808c 	bne.w	80013f4 <GAME_PLAY_Phase_Management+0x760>
					state_game->MAIN = activate_effect;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2204      	movs	r2, #4
 80012e0:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				//				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 80012e4:	e086      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x760>
			else if ((state_game->action == 5 )){
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	f040 8082 	bne.w	80013f4 <GAME_PLAY_Phase_Management+0x760>
				state_game->count_chain += 1;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2205      	movs	r2, #5
 8001300:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2204      	movs	r2, #4
 8001308:	701a      	strb	r2, [r3, #0]
			break;
 800130a:	e073      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x760>
		case chaining_main_ATK:
			if(state_game->action == 4)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d110      	bne.n	8001336 <GAME_PLAY_Phase_Management+0x6a2>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001316:	6839      	ldr	r1, [r7, #0]
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f92f 	bl	800157c <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 800131e:	2102      	movs	r1, #2
 8001320:	4890      	ldr	r0, [pc, #576]	; (8001564 <GAME_PLAY_Phase_Management+0x8d0>)
 8001322:	f004 ff25 	bl	8006170 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d165      	bne.n	80013f8 <GAME_PLAY_Phase_Management+0x764>
					state_game->MAIN = activate_effect;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2204      	movs	r2, #4
 8001330:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 8001334:	e060      	b.n	80013f8 <GAME_PLAY_Phase_Management+0x764>
			else if ((state_game->action == 5 )){
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b05      	cmp	r3, #5
 800133c:	d15c      	bne.n	80013f8 <GAME_PLAY_Phase_Management+0x764>
				state_game->count_chain += 1;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2206      	movs	r2, #6
 800134e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2204      	movs	r2, #4
 8001356:	701a      	strb	r2, [r3, #0]
			break;
 8001358:	e04e      	b.n	80013f8 <GAME_PLAY_Phase_Management+0x764>
		case activate_effect:
			ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
			if(state_game->count_chain%2 == 0){
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d145      	bne.n	80013fc <GAME_PLAY_Phase_Management+0x768>
				uint8_t counthing = state_game->count_chain;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	785b      	ldrb	r3, [r3, #1]
 8001374:	74fb      	strb	r3, [r7, #19]
				for (int i = 0; i <= counthing; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e01d      	b.n	80013b8 <GAME_PLAY_Phase_Management+0x724>
					if(ptrYugiohCard_dst->cardSignature == 11){
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b0b      	cmp	r3, #11
 8001382:	d107      	bne.n	8001394 <GAME_PLAY_Phase_Management+0x700>
						state_game->test = 11;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	220b      	movs	r2, #11
 8001388:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(ptrPlayerAtk);
 800138c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800138e:	f000 f92b 	bl	80015e8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
 8001392:	e00b      	b.n	80013ac <GAME_PLAY_Phase_Management+0x718>
					}
					else if(ptrYugiohCard_dst->cardSignature == 12){
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b0c      	cmp	r3, #12
 800139a:	d107      	bne.n	80013ac <GAME_PLAY_Phase_Management+0x718>
						state_game->test = 12;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	220c      	movs	r2, #12
 80013a0:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(ptrPlayerAtk,ptrPlayerDef);
 80013a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013a8:	f000 f942 	bl	8001630 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
					}
					//					else if()
					ptrYugiohCard_dst++;
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	330c      	adds	r3, #12
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i <= counthing; i++) {
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dddd      	ble.n	800137c <GAME_PLAY_Phase_Management+0x6e8>
				}
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80013c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013c2:	f7ff f9ae 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80013cc:	6979      	ldr	r1, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f958 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 0;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = await;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			}
			break;
 80013e2:	e00b      	b.n	80013fc <GAME_PLAY_Phase_Management+0x768>
			break;
 80013e4:	bf00      	nop
 80013e6:	e0c4      	b.n	8001572 <GAME_PLAY_Phase_Management+0x8de>
			break;
 80013e8:	bf00      	nop
 80013ea:	e0c2      	b.n	8001572 <GAME_PLAY_Phase_Management+0x8de>
			break;
 80013ec:	bf00      	nop
 80013ee:	e0c0      	b.n	8001572 <GAME_PLAY_Phase_Management+0x8de>
				break;
 80013f0:	bf00      	nop
 80013f2:	e0be      	b.n	8001572 <GAME_PLAY_Phase_Management+0x8de>
			break;
 80013f4:	bf00      	nop
 80013f6:	e0bc      	b.n	8001572 <GAME_PLAY_Phase_Management+0x8de>
			break;
 80013f8:	bf00      	nop
 80013fa:	e0ba      	b.n	8001572 <GAME_PLAY_Phase_Management+0x8de>
			break;
 80013fc:	bf00      	nop
		}
		break;
 80013fe:	e0b8      	b.n	8001572 <GAME_PLAY_Phase_Management+0x8de>
		case Battle_Phase:

			switch(BATTLE){
 8001400:	7e3b      	ldrb	r3, [r7, #24]
 8001402:	2b04      	cmp	r3, #4
 8001404:	f200 80b1 	bhi.w	800156a <GAME_PLAY_Phase_Management+0x8d6>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <GAME_PLAY_Phase_Management+0x77c>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	08001425 	.word	0x08001425
 8001414:	08001507 	.word	0x08001507
 8001418:	080014b7 	.word	0x080014b7
 800141c:	08001555 	.word	0x08001555
 8001420:	08001555 	.word	0x08001555
			case selection:
				//ATK action 50
				if(state_game->action == 50){
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b32      	cmp	r3, #50	; 0x32
 800142a:	d105      	bne.n	8001438 <GAME_PLAY_Phase_Management+0x7a4>
					Player_Reading_Card(RFIDmain, state_game, ptrPlayerDef);
 800142c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f8a3 	bl	800157c <Player_Reading_Card>
							break;
						}
						ptrYugiohCard_dst++;
					}
					}
			break;
 8001436:	e08f      	b.n	8001558 <GAME_PLAY_Phase_Management+0x8c4>
				else if(state_game->action == 51){
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b33      	cmp	r3, #51	; 0x33
 800143e:	f040 808b 	bne.w	8001558 <GAME_PLAY_Phase_Management+0x8c4>
					ptrYugiohCard_src = &ptrPlayerDef->ChainBuffer[0];
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001448:	617b      	str	r3, [r7, #20]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[3];
 800144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144c:	3328      	adds	r3, #40	; 0x28
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 8001450:	2300      	movs	r3, #0
 8001452:	76fb      	strb	r3, [r7, #27]
 8001454:	e029      	b.n	80014aa <GAME_PLAY_Phase_Management+0x816>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d11d      	bne.n	800149e <GAME_PLAY_Phase_Management+0x80a>
							if(ptrYugiohCard_dst->cardState == 1){
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	789b      	ldrb	r3, [r3, #2]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d123      	bne.n	80014b2 <GAME_PLAY_Phase_Management+0x81e>
								YUGIOH_card_copy(ptrYugiohCard_dst, &ptrPlayerAtk->CardInPlayed);
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001470:	4619      	mov	r1, r3
 8001472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001474:	f7ff f906 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
								ptrYugiohCard_dst->actionPositon = ptrYugiohCard_src->actionPositon;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	799a      	ldrb	r2, [r3, #6]
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	719a      	strb	r2, [r3, #6]
								YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerDef);
 8001488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800148a:	f7ff f94a 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2234      	movs	r2, #52	; 0x34
 8001492:	701a      	strb	r2, [r3, #0]
								state_game->BATTLE = counter_DEF;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
							break;
 800149c:	e009      	b.n	80014b2 <GAME_PLAY_Phase_Management+0x81e>
						ptrYugiohCard_dst++;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	330c      	adds	r3, #12
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 80014a4:	7efb      	ldrb	r3, [r7, #27]
 80014a6:	3301      	adds	r3, #1
 80014a8:	76fb      	strb	r3, [r7, #27]
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d9d2      	bls.n	8001456 <GAME_PLAY_Phase_Management+0x7c2>
			break;
 80014b0:	e052      	b.n	8001558 <GAME_PLAY_Phase_Management+0x8c4>
							break;
 80014b2:	bf00      	nop
			break;
 80014b4:	e050      	b.n	8001558 <GAME_PLAY_Phase_Management+0x8c4>
			case counter_DEF:
				//action 52
//				state_game->test = 34;
				if(state_game->action == 52)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b34      	cmp	r3, #52	; 0x34
 80014bc:	d111      	bne.n	80014e2 <GAME_PLAY_Phase_Management+0x84e>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80014be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f85a 	bl	800157c <Player_Reading_Card>
//					state_game->test = 35;
					if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 80014c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014cc:	4824      	ldr	r0, [pc, #144]	; (8001560 <GAME_PLAY_Phase_Management+0x8cc>)
 80014ce:	f004 fe4f 	bl	8006170 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d141      	bne.n	800155c <GAME_PLAY_Phase_Management+0x8c8>
						state_game->BATTLE = calculate_damage;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2204      	movs	r2, #4
 80014dc:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->BATTLE = counter_ATK;
					state_game->action = 54;
				}
				break;
 80014e0:	e03c      	b.n	800155c <GAME_PLAY_Phase_Management+0x8c8>
				else if ((state_game->action == 53 )){
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b35      	cmp	r3, #53	; 0x35
 80014e8:	d138      	bne.n	800155c <GAME_PLAY_Phase_Management+0x8c8>
					state_game->count_chain += 1;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_ATK;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 54;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2236      	movs	r2, #54	; 0x36
 8001502:	701a      	strb	r2, [r3, #0]
				break;
 8001504:	e02a      	b.n	800155c <GAME_PLAY_Phase_Management+0x8c8>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b36      	cmp	r3, #54	; 0x36
 800150c:	d110      	bne.n	8001530 <GAME_PLAY_Phase_Management+0x89c>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 800150e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f832 	bl	800157c <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 8001518:	2102      	movs	r1, #2
 800151a:	4812      	ldr	r0, [pc, #72]	; (8001564 <GAME_PLAY_Phase_Management+0x8d0>)
 800151c:	f004 fe28 	bl	8006170 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d120      	bne.n	8001568 <GAME_PLAY_Phase_Management+0x8d4>
						state_game->BATTLE = calculate_damage;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2204      	movs	r2, #4
 800152a:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->BATTLE = counter_DEF;
					state_game->action = 52;
				}
				break;
 800152e:	e01b      	b.n	8001568 <GAME_PLAY_Phase_Management+0x8d4>
				else if ((state_game->action == 55 )){
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b37      	cmp	r3, #55	; 0x37
 8001536:	d117      	bne.n	8001568 <GAME_PLAY_Phase_Management+0x8d4>
					state_game->count_chain += 1;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_DEF;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 52;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2234      	movs	r2, #52	; 0x34
 8001550:	701a      	strb	r2, [r3, #0]
				break;
 8001552:	e009      	b.n	8001568 <GAME_PLAY_Phase_Management+0x8d4>
			case chain_effect:

				break;
 8001554:	bf00      	nop
 8001556:	e008      	b.n	800156a <GAME_PLAY_Phase_Management+0x8d6>
			break;
 8001558:	bf00      	nop
 800155a:	e006      	b.n	800156a <GAME_PLAY_Phase_Management+0x8d6>
				break;
 800155c:	bf00      	nop
 800155e:	e004      	b.n	800156a <GAME_PLAY_Phase_Management+0x8d6>
 8001560:	58021400 	.word	0x58021400
 8001564:	58020400 	.word	0x58020400
				break;
 8001568:	bf00      	nop
			case  calculate_damage:
				break;
			}
		case Chain_Phase:
			break;
 800156a:	bf00      	nop
 800156c:	e002      	b.n	8001574 <GAME_PLAY_Phase_Management+0x8e0>
		break;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <GAME_PLAY_Phase_Management+0x8e0>
		break;
 8001572:	bf00      	nop

	}
}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	; 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3328      	adds	r3, #40	; 0x28
 800158c:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4613      	mov	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3328      	adds	r3, #40	; 0x28
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	3314      	adds	r3, #20
 80015a8:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80015b0:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d112      	bne.n	80015e0 <Player_Reading_Card+0x64>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff f8d6 	bl	800076c <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80015c0:	6979      	ldr	r1, [r7, #20]
 80015c2:	69b8      	ldr	r0, [r7, #24]
 80015c4:	f7ff f85e 	bl	8000684 <YUGIOH_card_copy>

		RFID_Clear_Card_Bufffer(ptrRFID);
 80015c8:	69f8      	ldr	r0, [r7, #28]
 80015ca:	f7ff f886 	bl	80006da <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	2200      	movs	r2, #0
 80015d2:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	701a      	strb	r2, [r3, #0]
	}
}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3328      	adds	r3, #40	; 0x28
 8001600:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001602:	2300      	movs	r3, #0
 8001604:	76fb      	strb	r3, [r7, #27]
 8001606:	e00b      	b.n	8001620 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	69f9      	ldr	r1, [r7, #28]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff f838 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	330c      	adds	r3, #12
 8001618:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800161a:	7efb      	ldrb	r3, [r7, #27]
 800161c:	3301      	adds	r3, #1
 800161e:	76fb      	strb	r3, [r7, #27]
 8001620:	7efb      	ldrb	r3, [r7, #27]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d9f0      	bls.n	8001608 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x20>
	}
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3304      	adds	r3, #4
 800164a:	61fb      	str	r3, [r7, #28]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3328      	adds	r3, #40	; 0x28
 8001650:	61fb      	str	r3, [r7, #28]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3304      	adds	r3, #4
 8001656:	61bb      	str	r3, [r7, #24]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3328      	adds	r3, #40	; 0x28
 800165c:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
 8001662:	e014      	b.n	800168e <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x5e>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player1);
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	69f9      	ldr	r1, [r7, #28]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f80a 	bl	8000684 <YUGIOH_card_copy>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player2);
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	69b9      	ldr	r1, [r7, #24]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f804 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard_player1++;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	330c      	adds	r3, #12
 8001680:	61fb      	str	r3, [r7, #28]
		ptrYUGIOHCard_player2++;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	330c      	adds	r3, #12
 8001686:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	3301      	adds	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d9e7      	bls.n	8001664 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x34>
	}
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <YUGIOH_To_GY>:



void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 800169e:	b580      	push	{r7, lr}
 80016a0:	b088      	sub	sp, #32
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	334c      	adds	r3, #76	; 0x4c
 80016b8:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80016c0:	61fb      	str	r3, [r7, #28]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	334c      	adds	r3, #76	; 0x4c
 80016c6:	61bb      	str	r3, [r7, #24]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80016ce:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80016d0:	2314      	movs	r3, #20
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00c      	b.n	80016f0 <YUGIOH_To_GY+0x52>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	69f8      	ldr	r0, [r7, #28]
 80016da:	f7fe ffd3 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b0c      	subs	r3, #12
 80016e2:	61fb      	str	r3, [r7, #28]
		ptrYugiohCard_Buffer_dst--;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	3b0c      	subs	r3, #12
 80016e8:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	dcef      	bgt.n	80016d6 <YUGIOH_To_GY+0x38>
	}

	ptrYugiohCard_Buffer_src = card;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	334c      	adds	r3, #76	; 0x4c
 80016fe:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001700:	69b9      	ldr	r1, [r7, #24]
 8001702:	69f8      	ldr	r0, [r7, #28]
 8001704:	f7fe ffbe 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 800170e:	69f9      	ldr	r1, [r7, #28]
 8001710:	69b8      	ldr	r0, [r7, #24]
 8001712:	f7fe ffb7 	bl	8000684 <YUGIOH_card_copy>

}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <MainGUI>:

void MainGUI(){
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <MainGUI+0x124>)
 8001728:	2200      	movs	r2, #0
 800172a:	9202      	str	r2, [sp, #8]
 800172c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	9200      	str	r2, [sp, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a43      	ldr	r2, [pc, #268]	; (8001848 <MainGUI+0x128>)
 800173a:	2105      	movs	r1, #5
 800173c:	2005      	movs	r0, #5
 800173e:	f000 feba 	bl	80024b6 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <MainGUI+0x124>)
 8001744:	2200      	movs	r2, #0
 8001746:	9202      	str	r2, [sp, #8]
 8001748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174c:	9201      	str	r2, [sp, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	9200      	str	r2, [sp, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a3d      	ldr	r2, [pc, #244]	; (800184c <MainGUI+0x12c>)
 8001756:	2114      	movs	r1, #20
 8001758:	2005      	movs	r0, #5
 800175a:	f000 feac 	bl	80024b6 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <MainGUI+0x124>)
 8001760:	2200      	movs	r2, #0
 8001762:	9202      	str	r2, [sp, #8]
 8001764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a37      	ldr	r2, [pc, #220]	; (8001850 <MainGUI+0x130>)
 8001772:	2123      	movs	r1, #35	; 0x23
 8001774:	2005      	movs	r0, #5
 8001776:	f000 fe9e 	bl	80024b6 <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800177a:	4b32      	ldr	r3, [pc, #200]	; (8001844 <MainGUI+0x124>)
 800177c:	2200      	movs	r2, #0
 800177e:	9202      	str	r2, [sp, #8]
 8001780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a31      	ldr	r2, [pc, #196]	; (8001854 <MainGUI+0x134>)
 800178e:	2132      	movs	r1, #50	; 0x32
 8001790:	2000      	movs	r0, #0
 8001792:	f000 fe90 	bl	80024b6 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <MainGUI+0x124>)
 8001798:	2200      	movs	r2, #0
 800179a:	9202      	str	r2, [sp, #8]
 800179c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a0:	9201      	str	r2, [sp, #4]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	9200      	str	r2, [sp, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2b      	ldr	r2, [pc, #172]	; (8001858 <MainGUI+0x138>)
 80017aa:	213c      	movs	r1, #60	; 0x3c
 80017ac:	2000      	movs	r0, #0
 80017ae:	f000 fe82 	bl	80024b6 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <MainGUI+0x124>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	9202      	str	r2, [sp, #8]
 80017b8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	9200      	str	r2, [sp, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a25      	ldr	r2, [pc, #148]	; (800185c <MainGUI+0x13c>)
 80017c6:	2105      	movs	r1, #5
 80017c8:	2005      	movs	r0, #5
 80017ca:	f000 fe2a 	bl	8002422 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MainGUI+0x124>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	9202      	str	r2, [sp, #8]
 80017d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d8:	9201      	str	r2, [sp, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1a      	ldr	r2, [pc, #104]	; (800184c <MainGUI+0x12c>)
 80017e2:	2114      	movs	r1, #20
 80017e4:	2005      	movs	r0, #5
 80017e6:	f000 fe1c 	bl	8002422 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MainGUI+0x124>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f4:	9201      	str	r2, [sp, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <MainGUI+0x130>)
 80017fe:	2123      	movs	r1, #35	; 0x23
 8001800:	2005      	movs	r0, #5
 8001802:	f000 fe0e 	bl	8002422 <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MainGUI+0x124>)
 8001808:	2200      	movs	r2, #0
 800180a:	9202      	str	r2, [sp, #8]
 800180c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001810:	9201      	str	r2, [sp, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	9200      	str	r2, [sp, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <MainGUI+0x134>)
 800181a:	2132      	movs	r1, #50	; 0x32
 800181c:	2000      	movs	r0, #0
 800181e:	f000 fe00 	bl	8002422 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MainGUI+0x124>)
 8001824:	2200      	movs	r2, #0
 8001826:	9202      	str	r2, [sp, #8]
 8001828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182c:	9201      	str	r2, [sp, #4]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a08      	ldr	r2, [pc, #32]	; (8001858 <MainGUI+0x138>)
 8001836:	213c      	movs	r1, #60	; 0x3c
 8001838:	2000      	movs	r0, #0
 800183a:	f000 fdf2 	bl	8002422 <ST7735_WriteString>
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	24000008 	.word	0x24000008
 8001848:	0800bd84 	.word	0x0800bd84
 800184c:	0800bde0 	.word	0x0800bde0
 8001850:	0800bdf0 	.word	0x0800bdf0
 8001854:	0800bdf8 	.word	0x0800bdf8
 8001858:	0800bd30 	.word	0x0800bd30
 800185c:	0800bd24 	.word	0x0800bd24

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <SystemInit+0xfc>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <SystemInit+0xfc>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <SystemInit+0xfc>)
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <SystemInit+0xfc>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001880:	4b37      	ldr	r3, [pc, #220]	; (8001960 <SystemInit+0x100>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	2b06      	cmp	r3, #6
 800188a:	d807      	bhi.n	800189c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <SystemInit+0x100>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 030f 	bic.w	r3, r3, #15
 8001894:	4a32      	ldr	r2, [pc, #200]	; (8001960 <SystemInit+0x100>)
 8001896:	f043 0307 	orr.w	r3, r3, #7
 800189a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <SystemInit+0x104>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <SystemInit+0x104>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <SystemInit+0x104>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <SystemInit+0x104>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	492c      	ldr	r1, [pc, #176]	; (8001964 <SystemInit+0x104>)
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <SystemInit+0x108>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <SystemInit+0x100>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <SystemInit+0x100>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 030f 	bic.w	r3, r3, #15
 80018ce:	4a24      	ldr	r2, [pc, #144]	; (8001960 <SystemInit+0x100>)
 80018d0:	f043 0307 	orr.w	r3, r3, #7
 80018d4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <SystemInit+0x104>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <SystemInit+0x104>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <SystemInit+0x104>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <SystemInit+0x104>)
 80018ea:	4a20      	ldr	r2, [pc, #128]	; (800196c <SystemInit+0x10c>)
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <SystemInit+0x104>)
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <SystemInit+0x110>)
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <SystemInit+0x104>)
 80018f6:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <SystemInit+0x114>)
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <SystemInit+0x104>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <SystemInit+0x104>)
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <SystemInit+0x114>)
 8001904:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <SystemInit+0x104>)
 8001908:	2200      	movs	r2, #0
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <SystemInit+0x104>)
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <SystemInit+0x114>)
 8001910:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <SystemInit+0x104>)
 8001914:	2200      	movs	r2, #0
 8001916:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <SystemInit+0x104>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <SystemInit+0x104>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <SystemInit+0x104>)
 8001926:	2200      	movs	r2, #0
 8001928:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <SystemInit+0x118>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <SystemInit+0x118>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <SystemInit+0x11c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <SystemInit+0x120>)
 800193c:	4013      	ands	r3, r2
 800193e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001942:	d202      	bcs.n	800194a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <SystemInit+0x124>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <SystemInit+0x128>)
 800194c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001950:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	52002000 	.word	0x52002000
 8001964:	58024400 	.word	0x58024400
 8001968:	eaf6ed7f 	.word	0xeaf6ed7f
 800196c:	02020200 	.word	0x02020200
 8001970:	01ff0000 	.word	0x01ff0000
 8001974:	01010280 	.word	0x01010280
 8001978:	580000c0 	.word	0x580000c0
 800197c:	5c001000 	.word	0x5c001000
 8001980:	ffff0000 	.word	0xffff0000
 8001984:	51008108 	.word	0x51008108
 8001988:	52004000 	.word	0x52004000

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001996:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001998:	bf00      	nop
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <main+0xe8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <main+0x24>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dcf4      	bgt.n	800199a <main+0xe>
	if ( timeout < 0 )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da01      	bge.n	80019ba <main+0x2e>
	{
		Error_Handler();
 80019b6:	f000 fb97 	bl	80020e8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f001 f9f9 	bl	8002db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f861 	bl	8001a84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019c2:	f000 f8e3 	bl	8001b8c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <main+0xe8>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <main+0xe8>)
 80019ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <main+0xe8>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f004 fc0f 	bl	8006208 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80019ea:	2100      	movs	r1, #0
 80019ec:	2000      	movs	r0, #0
 80019ee:	f004 fc25 	bl	800623c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80019f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80019f8:	bf00      	nop
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <main+0xe8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <main+0x84>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	1e5a      	subs	r2, r3, #1
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dcf4      	bgt.n	80019fa <main+0x6e>
	if ( timeout < 0 )
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da01      	bge.n	8001a1a <main+0x8e>
	{
		Error_Handler();
 8001a16:	f000 fb67 	bl	80020e8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1a:	f000 fa35 	bl	8001e88 <MX_GPIO_Init>
  MX_ETH_Init();
 8001a1e:	f000 f8e7 	bl	8001bf0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001a22:	f000 f989 	bl	8001d38 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001a26:	f000 fa07 	bl	8001e38 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a2a:	f000 f9d3 	bl	8001dd4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001a2e:	f000 f92b 	bl	8001c88 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8001a32:	f000 fc61 	bl	80022f8 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 fe81 	bl	800273e <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 fe6d 	bl	800271c <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8001a42:	f001 fa3b 	bl	8002ebc <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <main+0xec>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2bc8      	cmp	r3, #200	; 0xc8
 8001a50:	d9f7      	bls.n	8001a42 <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 8001a52:	f001 fa33 	bl	8002ebc <HAL_GetTick>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <main+0xec>)
 8001a5a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a60:	4806      	ldr	r0, [pc, #24]	; (8001a7c <main+0xf0>)
 8001a62:	f004 fbb6 	bl	80061d2 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8001a66:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001a6a:	4905      	ldr	r1, [pc, #20]	; (8001a80 <main+0xf4>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fea9 	bl	80007c4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8001a72:	e7e6      	b.n	8001a42 <main+0xb6>
 8001a74:	58024400 	.word	0x58024400
 8001a78:	24000c98 	.word	0x24000c98
 8001a7c:	58020400 	.word	0x58020400
 8001a80:	24000964 	.word	0x24000964

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09c      	sub	sp, #112	; 0x70
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	224c      	movs	r2, #76	; 0x4c
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f009 fcc4 	bl	800b420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f009 fcbe 	bl	800b420 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f004 fd25 	bl	80064f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <SystemClock_Config+0xfc>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a33      	ldr	r2, [pc, #204]	; (8001b80 <SystemClock_Config+0xfc>)
 8001ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <SystemClock_Config+0xfc>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <SystemClock_Config+0x100>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	4a2e      	ldr	r2, [pc, #184]	; (8001b84 <SystemClock_Config+0x100>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <SystemClock_Config+0x100>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001adc:	bf00      	nop
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <SystemClock_Config+0xfc>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aea:	d1f8      	bne.n	8001ade <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <SystemClock_Config+0x104>)
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	4a24      	ldr	r2, [pc, #144]	; (8001b88 <SystemClock_Config+0x104>)
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001b12:	2378      	movs	r3, #120	; 0x78
 8001b14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b22:	230c      	movs	r3, #12
 8001b24:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fd48 	bl	80065c8 <HAL_RCC_OscConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001b3e:	f000 fad3 	bl	80020e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	233f      	movs	r3, #63	; 0x3f
 8001b44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b46:	2303      	movs	r3, #3
 8001b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b52:	2340      	movs	r3, #64	; 0x40
 8001b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b56:	2340      	movs	r3, #64	; 0x40
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2104      	movs	r1, #4
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 f95b 	bl	8006e24 <HAL_RCC_ClockConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001b74:	f000 fab8 	bl	80020e8 <Error_Handler>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3770      	adds	r7, #112	; 0x70
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	58024800 	.word	0x58024800
 8001b84:	58000400 	.word	0x58000400
 8001b88:	58024400 	.word	0x58024400

08001b8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0b0      	sub	sp, #192	; 0xc0
 8001b90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	22bc      	movs	r2, #188	; 0xbc
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f009 fc41 	bl	800b420 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001b9e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8001ba2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001ba8:	2318      	movs	r3, #24
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001bb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bca:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 fcb0 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001be2:	f000 fa81 	bl	80020e8 <Error_Handler>
  }
}
 8001be6:	bf00      	nop
 8001be8:	37c0      	adds	r7, #192	; 0xc0
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <MX_ETH_Init+0x80>)
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <MX_ETH_Init+0x84>)
 8001bf8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_ETH_Init+0x88>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_ETH_Init+0x88>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_ETH_Init+0x88>)
 8001c08:	22e1      	movs	r2, #225	; 0xe1
 8001c0a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_ETH_Init+0x88>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_ETH_Init+0x88>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_ETH_Init+0x88>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_ETH_Init+0x80>)
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <MX_ETH_Init+0x88>)
 8001c22:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_ETH_Init+0x80>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_ETH_Init+0x80>)
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <MX_ETH_Init+0x8c>)
 8001c2e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_ETH_Init+0x80>)
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <MX_ETH_Init+0x90>)
 8001c34:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_ETH_Init+0x80>)
 8001c38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c3c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_ETH_Init+0x80>)
 8001c40:	f003 fcc2 	bl	80055c8 <HAL_ETH_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001c4a:	f000 fa4d 	bl	80020e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001c4e:	2238      	movs	r2, #56	; 0x38
 8001c50:	2100      	movs	r1, #0
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <MX_ETH_Init+0x94>)
 8001c54:	f009 fbe4 	bl	800b420 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_ETH_Init+0x94>)
 8001c5a:	2221      	movs	r2, #33	; 0x21
 8001c5c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_ETH_Init+0x94>)
 8001c60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c64:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <MX_ETH_Init+0x94>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	240001a0 	.word	0x240001a0
 8001c74:	40028000 	.word	0x40028000
 8001c78:	24000c9c 	.word	0x24000c9c
 8001c7c:	240000e4 	.word	0x240000e4
 8001c80:	24000084 	.word	0x24000084
 8001c84:	24000168 	.word	0x24000168

08001c88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001c8e:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <MX_SPI3_Init+0xac>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001c94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001c9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cb6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_SPI3_Init+0xa8>)
 8001d1c:	f006 ff76 	bl	8008c0c <HAL_SPI_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001d26:	f000 f9df 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	24000250 	.word	0x24000250
 8001d34:	40003c00 	.word	0x40003c00

08001d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d3e:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <MX_USART3_UART_Init+0x94>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <MX_USART3_UART_Init+0x98>)
 8001d46:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7e:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d80:	f007 fb25 	bl	80093ce <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001d8a:	f000 f9ad 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001d92:	f008 ff47 	bl	800ac24 <HAL_UARTEx_SetTxFifoThreshold>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001d9c:	f000 f9a4 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da0:	2100      	movs	r1, #0
 8001da2:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001da4:	f008 ff7c 	bl	800aca0 <HAL_UARTEx_SetRxFifoThreshold>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001dae:	f000 f99b 	bl	80020e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_USART3_UART_Init+0x90>)
 8001db4:	f008 fefd 	bl	800abb2 <HAL_UARTEx_DisableFifoMode>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001dbe:	f000 f993 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	240002d8 	.word	0x240002d8
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	0005dc00 	.word	0x0005dc00

08001dd4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001de0:	2209      	movs	r2, #9
 8001de2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001de6:	2202      	movs	r2, #2
 8001de8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e1c:	f004 fa22 	bl	8006264 <HAL_PCD_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001e26:	f000 f95f 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	24000458 	.word	0x24000458
 8001e34:	40080000 	.word	0x40080000

08001e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_DMA_Init+0x4c>)
 8001e40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <MX_DMA_Init+0x4c>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <MX_DMA_Init+0x4c>)
 8001e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	200c      	movs	r0, #12
 8001e62:	f001 f956 	bl	8003112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e66:	200c      	movs	r0, #12
 8001e68:	f001 f96d 	bl	8003146 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	200f      	movs	r0, #15
 8001e72:	f001 f94e 	bl	8003112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f001 f965 	bl	8003146 <HAL_NVIC_EnableIRQ>

}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58024400 	.word	0x58024400

08001e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	; 0x38
 8001e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b8a      	ldr	r3, [pc, #552]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	4a88      	ldr	r2, [pc, #544]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eae:	4b86      	ldr	r3, [pc, #536]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	623b      	str	r3, [r7, #32]
 8001eba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ebc:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec2:	4a81      	ldr	r2, [pc, #516]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ecc:	4b7e      	ldr	r3, [pc, #504]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	4a79      	ldr	r2, [pc, #484]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eea:	4b77      	ldr	r3, [pc, #476]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f16:	4b6c      	ldr	r3, [pc, #432]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f26:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3a:	4a63      	ldr	r2, [pc, #396]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f44:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f58:	4a5b      	ldr	r2, [pc, #364]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f62:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f70:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	4a54      	ldr	r2, [pc, #336]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f80:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <MX_GPIO_Init+0x240>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001f94:	484d      	ldr	r0, [pc, #308]	; (80020cc <MX_GPIO_Init+0x244>)
 8001f96:	f004 f903 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa0:	484a      	ldr	r0, [pc, #296]	; (80020cc <MX_GPIO_Init+0x244>)
 8001fa2:	f004 f8fd 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fac:	4848      	ldr	r0, [pc, #288]	; (80020d0 <MX_GPIO_Init+0x248>)
 8001fae:	f004 f8f7 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb8:	4846      	ldr	r0, [pc, #280]	; (80020d4 <MX_GPIO_Init+0x24c>)
 8001fba:	f004 f8f1 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	4844      	ldr	r0, [pc, #272]	; (80020d8 <MX_GPIO_Init+0x250>)
 8001fc6:	f004 f8eb 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8001fca:	230d      	movs	r3, #13
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	483f      	ldr	r0, [pc, #252]	; (80020dc <MX_GPIO_Init+0x254>)
 8001fde:	f003 ff17 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	483a      	ldr	r0, [pc, #232]	; (80020e0 <MX_GPIO_Init+0x258>)
 8001ff6:	f003 ff0b 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	4830      	ldr	r0, [pc, #192]	; (80020d0 <MX_GPIO_Init+0x248>)
 800200e:	f003 feff 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8002012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	4619      	mov	r1, r3
 8002026:	482f      	ldr	r0, [pc, #188]	; (80020e4 <MX_GPIO_Init+0x25c>)
 8002028:	f003 fef2 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 800202c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4821      	ldr	r0, [pc, #132]	; (80020cc <MX_GPIO_Init+0x244>)
 8002046:	f003 fee3 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800204a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	481b      	ldr	r0, [pc, #108]	; (80020d0 <MX_GPIO_Init+0x248>)
 8002064:	f003 fed4 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	4814      	ldr	r0, [pc, #80]	; (80020d4 <MX_GPIO_Init+0x24c>)
 8002082:	f003 fec5 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800208a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <MX_GPIO_Init+0x250>)
 800209c:	f003 feb8 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	4807      	ldr	r0, [pc, #28]	; (80020d8 <MX_GPIO_Init+0x250>)
 80020ba:	f003 fea9 	bl	8005e10 <HAL_GPIO_Init>

}
 80020be:	bf00      	nop
 80020c0:	3738      	adds	r7, #56	; 0x38
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	58024400 	.word	0x58024400
 80020cc:	58021000 	.word	0x58021000
 80020d0:	58020400 	.word	0x58020400
 80020d4:	58020c00 	.word	0x58020c00
 80020d8:	58021800 	.word	0x58021800
 80020dc:	58020800 	.word	0x58020800
 80020e0:	58020000 	.word	0x58020000
 80020e4:	58021400 	.word	0x58021400

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020f0:	e7fe      	b.n	80020f0 <Error_Handler+0x8>
	...

080020f4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020fe:	4802      	ldr	r0, [pc, #8]	; (8002108 <ST7735_Select+0x14>)
 8002100:	f004 f84e 	bl	80061a0 <HAL_GPIO_WritePin>
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	58021000 	.word	0x58021000

0800210c <ST7735_Unselect>:

void ST7735_Unselect() {
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002116:	4802      	ldr	r0, [pc, #8]	; (8002120 <ST7735_Unselect+0x14>)
 8002118:	f004 f842 	bl	80061a0 <HAL_GPIO_WritePin>
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	58021000 	.word	0x58021000

08002124 <ST7735_Select1>:
static void ST7735_Select1() {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800212e:	4802      	ldr	r0, [pc, #8]	; (8002138 <ST7735_Select1+0x14>)
 8002130:	f004 f836 	bl	80061a0 <HAL_GPIO_WritePin>
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	58021000 	.word	0x58021000

0800213c <ST7735_Unselect1>:

void ST7735_Unselect1() {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002146:	4802      	ldr	r0, [pc, #8]	; (8002150 <ST7735_Unselect1+0x14>)
 8002148:	f004 f82a 	bl	80061a0 <HAL_GPIO_WritePin>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	58021000 	.word	0x58021000

08002154 <ST7735_Reset>:

static void ST7735_Reset() {
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <ST7735_Reset+0x28>)
 8002160:	f004 f81e 	bl	80061a0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002164:	2005      	movs	r0, #5
 8002166:	f000 feb5 	bl	8002ed4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <ST7735_Reset+0x28>)
 8002172:	f004 f815 	bl	80061a0 <HAL_GPIO_WritePin>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	58021000 	.word	0x58021000

08002180 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002190:	4806      	ldr	r0, [pc, #24]	; (80021ac <ST7735_WriteCommand+0x2c>)
 8002192:	f004 f805 	bl	80061a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002196:	1df9      	adds	r1, r7, #7
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	2201      	movs	r2, #1
 800219e:	4804      	ldr	r0, [pc, #16]	; (80021b0 <ST7735_WriteCommand+0x30>)
 80021a0:	f006 fe3a 	bl	8008e18 <HAL_SPI_Transmit>
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	58021800 	.word	0x58021800
 80021b0:	24000250 	.word	0x24000250

080021b4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	4807      	ldr	r0, [pc, #28]	; (80021e4 <ST7735_WriteData+0x30>)
 80021c6:	f003 ffeb 	bl	80061a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <ST7735_WriteData+0x34>)
 80021d6:	f006 fe1f 	bl	8008e18 <HAL_SPI_Transmit>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	58021800 	.word	0x58021800
 80021e8:	24000250 	.word	0x24000250

080021ec <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80021fe:	e034      	b.n	800226a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ffb7 	bl	8002180 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800221c:	7abb      	ldrb	r3, [r7, #10]
 800221e:	b29b      	uxth	r3, r3
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002226:	7abb      	ldrb	r3, [r7, #10]
 8002228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800222c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800222e:	7abb      	ldrb	r3, [r7, #10]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002234:	7abb      	ldrb	r3, [r7, #10]
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffbb 	bl	80021b4 <ST7735_WriteData>
            addr += numArgs;
 800223e:	7abb      	ldrb	r3, [r7, #10]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002246:	89bb      	ldrh	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00e      	beq.n	800226a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002256:	89bb      	ldrh	r3, [r7, #12]
 8002258:	2bff      	cmp	r3, #255	; 0xff
 800225a:	d102      	bne.n	8002262 <ST7735_ExecuteCommandList+0x76>
 800225c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002260:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002262:	89bb      	ldrh	r3, [r7, #12]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fe35 	bl	8002ed4 <HAL_Delay>
    while(numCommands--) {
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	73fa      	strb	r2, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1c5      	bne.n	8002200 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800227e:	b590      	push	{r4, r7, lr}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	4604      	mov	r4, r0
 8002286:	4608      	mov	r0, r1
 8002288:	4611      	mov	r1, r2
 800228a:	461a      	mov	r2, r3
 800228c:	4623      	mov	r3, r4
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	4603      	mov	r3, r0
 8002292:	71bb      	strb	r3, [r7, #6]
 8002294:	460b      	mov	r3, r1
 8002296:	717b      	strb	r3, [r7, #5]
 8002298:	4613      	mov	r3, r2
 800229a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800229c:	202a      	movs	r0, #42	; 0x2a
 800229e:	f7ff ff6f 	bl	8002180 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80022a2:	2300      	movs	r3, #0
 80022a4:	733b      	strb	r3, [r7, #12]
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	3302      	adds	r3, #2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	737b      	strb	r3, [r7, #13]
 80022ae:	2300      	movs	r3, #0
 80022b0:	73bb      	strb	r3, [r7, #14]
 80022b2:	797b      	ldrb	r3, [r7, #5]
 80022b4:	3302      	adds	r3, #2
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2104      	movs	r1, #4
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff77 	bl	80021b4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80022c6:	202b      	movs	r0, #43	; 0x2b
 80022c8:	f7ff ff5a 	bl	8002180 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80022cc:	79bb      	ldrb	r3, [r7, #6]
 80022ce:	3301      	adds	r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80022d4:	793b      	ldrb	r3, [r7, #4]
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	2104      	movs	r1, #4
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff66 	bl	80021b4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80022e8:	202c      	movs	r0, #44	; 0x2c
 80022ea:	f7ff ff49 	bl	8002180 <ST7735_WriteCommand>
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
	...

080022f8 <ST7735_Init>:

void ST7735_Init() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
    ST7735_Select();
 80022fc:	f7ff fefa 	bl	80020f4 <ST7735_Select>
    ST7735_Select1();
 8002300:	f7ff ff10 	bl	8002124 <ST7735_Select1>
    ST7735_Reset();
 8002304:	f7ff ff26 	bl	8002154 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002308:	4807      	ldr	r0, [pc, #28]	; (8002328 <ST7735_Init+0x30>)
 800230a:	f7ff ff6f 	bl	80021ec <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800230e:	4807      	ldr	r0, [pc, #28]	; (800232c <ST7735_Init+0x34>)
 8002310:	f7ff ff6c 	bl	80021ec <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <ST7735_Init+0x38>)
 8002316:	f7ff ff69 	bl	80021ec <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800231a:	f7ff fef7 	bl	800210c <ST7735_Unselect>
    ST7735_Unselect1();
 800231e:	f7ff ff0d 	bl	800213c <ST7735_Unselect1>
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	0800d2e4 	.word	0x0800d2e4
 800232c:	0800d320 	.word	0x0800d320
 8002330:	0800d330 	.word	0x0800d330

08002334 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002334:	b082      	sub	sp, #8
 8002336:	b590      	push	{r4, r7, lr}
 8002338:	b089      	sub	sp, #36	; 0x24
 800233a:	af00      	add	r7, sp, #0
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
 8002342:	460b      	mov	r3, r1
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2d8      	uxtb	r0, r3
 800234e:	88bb      	ldrh	r3, [r7, #4]
 8002350:	b2d9      	uxtb	r1, r3
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800235a:	4413      	add	r3, r2
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b2dc      	uxtb	r4, r3
 8002362:	88bb      	ldrh	r3, [r7, #4]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800236a:	4413      	add	r3, r2
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4622      	mov	r2, r4
 8002374:	f7ff ff83 	bl	800227e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	e043      	b.n	8002406 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800237e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	3b20      	subs	r3, #32
 8002384:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4619      	mov	r1, r3
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	440b      	add	r3, r1
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e029      	b.n	80023f4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80023b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	743b      	strb	r3, [r7, #16]
 80023ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	2102      	movs	r1, #2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fef4 	bl	80021b4 <ST7735_WriteData>
 80023cc:	e00f      	b.n	80023ee <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80023ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	733b      	strb	r3, [r7, #12]
 80023da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fee3 	bl	80021b4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023f8:	461a      	mov	r2, r3
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d3cf      	bcc.n	80023a0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	3301      	adds	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800240a:	461a      	mov	r2, r3
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4293      	cmp	r3, r2
 8002410:	d3b5      	bcc.n	800237e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	3724      	adds	r7, #36	; 0x24
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800241e:	b002      	add	sp, #8
 8002420:	4770      	bx	lr

08002422 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002422:	b082      	sub	sp, #8
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af04      	add	r7, sp, #16
 800242a:	603a      	str	r2, [r7, #0]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	4603      	mov	r3, r0
 8002430:	80fb      	strh	r3, [r7, #6]
 8002432:	460b      	mov	r3, r1
 8002434:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002436:	f7ff fe5d 	bl	80020f4 <ST7735_Select>

    while(*str) {
 800243a:	e02d      	b.n	8002498 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	7d3a      	ldrb	r2, [r7, #20]
 8002440:	4413      	add	r3, r2
 8002442:	2b7f      	cmp	r3, #127	; 0x7f
 8002444:	dd13      	ble.n	800246e <ST7735_WriteString+0x4c>
            x = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800244a:	7d7b      	ldrb	r3, [r7, #21]
 800244c:	b29a      	uxth	r2, r3
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	7d7a      	ldrb	r2, [r7, #21]
 8002458:	4413      	add	r3, r2
 800245a:	2b7f      	cmp	r3, #127	; 0x7f
 800245c:	dc21      	bgt.n	80024a2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b20      	cmp	r3, #32
 8002464:	d103      	bne.n	800246e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	603b      	str	r3, [r7, #0]
                continue;
 800246c:	e014      	b.n	8002498 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	88b9      	ldrh	r1, [r7, #4]
 8002474:	88f8      	ldrh	r0, [r7, #6]
 8002476:	8c3b      	ldrh	r3, [r7, #32]
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	8bbb      	ldrh	r3, [r7, #28]
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f7ff ff56 	bl	8002334 <ST7735_WriteChar>
        x += font.width;
 8002488:	7d3b      	ldrb	r3, [r7, #20]
 800248a:	b29a      	uxth	r2, r3
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	4413      	add	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
        str++;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1cd      	bne.n	800243c <ST7735_WriteString+0x1a>
 80024a0:	e000      	b.n	80024a4 <ST7735_WriteString+0x82>
                break;
 80024a2:	bf00      	nop
    }

    ST7735_Unselect();
 80024a4:	f7ff fe32 	bl	800210c <ST7735_Unselect>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024b2:	b002      	add	sp, #8
 80024b4:	4770      	bx	lr

080024b6 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80024b6:	b082      	sub	sp, #8
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af04      	add	r7, sp, #16
 80024be:	603a      	str	r2, [r7, #0]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
 80024c6:	460b      	mov	r3, r1
 80024c8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 80024ca:	f7ff fe2b 	bl	8002124 <ST7735_Select1>

    while(*str) {
 80024ce:	e02d      	b.n	800252c <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	7d3a      	ldrb	r2, [r7, #20]
 80024d4:	4413      	add	r3, r2
 80024d6:	2b7f      	cmp	r3, #127	; 0x7f
 80024d8:	dd13      	ble.n	8002502 <ST7735_WriteString1+0x4c>
            x = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80024de:	7d7b      	ldrb	r3, [r7, #21]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80024e8:	88bb      	ldrh	r3, [r7, #4]
 80024ea:	7d7a      	ldrb	r2, [r7, #21]
 80024ec:	4413      	add	r3, r2
 80024ee:	2b7f      	cmp	r3, #127	; 0x7f
 80024f0:	dc21      	bgt.n	8002536 <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d103      	bne.n	8002502 <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	603b      	str	r3, [r7, #0]
                continue;
 8002500:	e014      	b.n	800252c <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	88b9      	ldrh	r1, [r7, #4]
 8002508:	88f8      	ldrh	r0, [r7, #6]
 800250a:	8c3b      	ldrh	r3, [r7, #32]
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	8bbb      	ldrh	r3, [r7, #28]
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f7ff ff0c 	bl	8002334 <ST7735_WriteChar>
        x += font.width;
 800251c:	7d3b      	ldrb	r3, [r7, #20]
 800251e:	b29a      	uxth	r2, r3
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	4413      	add	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
        str++;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1cd      	bne.n	80024d0 <ST7735_WriteString1+0x1a>
 8002534:	e000      	b.n	8002538 <ST7735_WriteString1+0x82>
                break;
 8002536:	bf00      	nop
    }

    ST7735_Unselect1();
 8002538:	f7ff fe00 	bl	800213c <ST7735_Unselect1>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002546:	b002      	add	sp, #8
 8002548:	4770      	bx	lr
	...

0800254c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	4604      	mov	r4, r0
 8002554:	4608      	mov	r0, r1
 8002556:	4611      	mov	r1, r2
 8002558:	461a      	mov	r2, r3
 800255a:	4623      	mov	r3, r4
 800255c:	80fb      	strh	r3, [r7, #6]
 800255e:	4603      	mov	r3, r0
 8002560:	80bb      	strh	r3, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]
 8002566:	4613      	mov	r3, r2
 8002568:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	2b7f      	cmp	r3, #127	; 0x7f
 800256e:	d858      	bhi.n	8002622 <ST7735_FillRectangle+0xd6>
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	2b7f      	cmp	r3, #127	; 0x7f
 8002574:	d855      	bhi.n	8002622 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	4413      	add	r3, r2
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	dd03      	ble.n	8002588 <ST7735_FillRectangle+0x3c>
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002586:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002588:	88ba      	ldrh	r2, [r7, #4]
 800258a:	883b      	ldrh	r3, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	dd03      	ble.n	800259a <ST7735_FillRectangle+0x4e>
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002598:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800259a:	f7ff fdab 	bl	80020f4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	b2d8      	uxtb	r0, r3
 80025a2:	88bb      	ldrh	r3, [r7, #4]
 80025a4:	b2d9      	uxtb	r1, r3
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b2dc      	uxtb	r4, r3
 80025b6:	88bb      	ldrh	r3, [r7, #4]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	883b      	ldrh	r3, [r7, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4413      	add	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	4622      	mov	r2, r4
 80025c8:	f7ff fe59 	bl	800227e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80025cc:	8c3b      	ldrh	r3, [r7, #32]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	733b      	strb	r3, [r7, #12]
 80025d6:	8c3b      	ldrh	r3, [r7, #32]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80025dc:	2201      	movs	r2, #1
 80025de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e2:	4812      	ldr	r0, [pc, #72]	; (800262c <ST7735_FillRectangle+0xe0>)
 80025e4:	f003 fddc 	bl	80061a0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80025e8:	883b      	ldrh	r3, [r7, #0]
 80025ea:	80bb      	strh	r3, [r7, #4]
 80025ec:	e013      	b.n	8002616 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	80fb      	strh	r3, [r7, #6]
 80025f2:	e00a      	b.n	800260a <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80025f4:	f107 010c 	add.w	r1, r7, #12
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	2202      	movs	r2, #2
 80025fe:	480c      	ldr	r0, [pc, #48]	; (8002630 <ST7735_FillRectangle+0xe4>)
 8002600:	f006 fc0a 	bl	8008e18 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	3b01      	subs	r3, #1
 8002608:	80fb      	strh	r3, [r7, #6]
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f1      	bne.n	80025f4 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002610:	88bb      	ldrh	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	80bb      	strh	r3, [r7, #4]
 8002616:	88bb      	ldrh	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e8      	bne.n	80025ee <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 800261c:	f7ff fd76 	bl	800210c <ST7735_Unselect>
 8002620:	e000      	b.n	8002624 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002622:	bf00      	nop
}
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	bf00      	nop
 800262c:	58021800 	.word	0x58021800
 8002630:	24000250 	.word	0x24000250

08002634 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	80fb      	strh	r3, [r7, #6]
 8002646:	4603      	mov	r3, r0
 8002648:	80bb      	strh	r3, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	807b      	strh	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	2b7f      	cmp	r3, #127	; 0x7f
 8002656:	d858      	bhi.n	800270a <ST7735_FillRectangle1+0xd6>
 8002658:	88bb      	ldrh	r3, [r7, #4]
 800265a:	2b7f      	cmp	r3, #127	; 0x7f
 800265c:	d855      	bhi.n	800270a <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4413      	add	r3, r2
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	dd03      	ble.n	8002670 <ST7735_FillRectangle1+0x3c>
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800266e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002670:	88ba      	ldrh	r2, [r7, #4]
 8002672:	883b      	ldrh	r3, [r7, #0]
 8002674:	4413      	add	r3, r2
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	dd03      	ble.n	8002682 <ST7735_FillRectangle1+0x4e>
 800267a:	88bb      	ldrh	r3, [r7, #4]
 800267c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002680:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 8002682:	f7ff fd4f 	bl	8002124 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	b2d8      	uxtb	r0, r3
 800268a:	88bb      	ldrh	r3, [r7, #4]
 800268c:	b2d9      	uxtb	r1, r3
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4413      	add	r3, r2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b2dc      	uxtb	r4, r3
 800269e:	88bb      	ldrh	r3, [r7, #4]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4622      	mov	r2, r4
 80026b0:	f7ff fde5 	bl	800227e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80026b4:	8c3b      	ldrh	r3, [r7, #32]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	733b      	strb	r3, [r7, #12]
 80026be:	8c3b      	ldrh	r3, [r7, #32]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80026c4:	2201      	movs	r2, #1
 80026c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ca:	4812      	ldr	r0, [pc, #72]	; (8002714 <ST7735_FillRectangle1+0xe0>)
 80026cc:	f003 fd68 	bl	80061a0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80026d0:	883b      	ldrh	r3, [r7, #0]
 80026d2:	80bb      	strh	r3, [r7, #4]
 80026d4:	e013      	b.n	80026fe <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	80fb      	strh	r3, [r7, #6]
 80026da:	e00a      	b.n	80026f2 <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80026dc:	f107 010c 	add.w	r1, r7, #12
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	2202      	movs	r2, #2
 80026e6:	480c      	ldr	r0, [pc, #48]	; (8002718 <ST7735_FillRectangle1+0xe4>)
 80026e8:	f006 fb96 	bl	8008e18 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	80fb      	strh	r3, [r7, #6]
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f1      	bne.n	80026dc <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80026f8:	88bb      	ldrh	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	80bb      	strh	r3, [r7, #4]
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e8      	bne.n	80026d6 <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 8002704:	f7ff fd1a 	bl	800213c <ST7735_Unselect1>
 8002708:	e000      	b.n	800270c <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800270a:	bf00      	nop
}
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	bf00      	nop
 8002714:	58021800 	.word	0x58021800
 8002718:	24000250 	.word	0x24000250

0800271c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af02      	add	r7, sp, #8
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	2100      	movs	r1, #0
 8002730:	2000      	movs	r0, #0
 8002732:	f7ff ff0b 	bl	800254c <ST7735_FillRectangle>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af02      	add	r7, sp, #8
 8002744:	4603      	mov	r3, r0
 8002746:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	2100      	movs	r1, #0
 8002752:	2000      	movs	r0, #0
 8002754:	f7ff ff6e 	bl	8002634 <ST7735_FillRectangle1>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_MspInit+0x30>)
 8002768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800276c:	4a08      	ldr	r2, [pc, #32]	; (8002790 <HAL_MspInit+0x30>)
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_MspInit+0x30>)
 8002778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	58024400 	.word	0x58024400

08002794 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a59      	ldr	r2, [pc, #356]	; (8002918 <HAL_ETH_MspInit+0x184>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f040 80ab 	bne.w	800290e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80027b8:	4b58      	ldr	r3, [pc, #352]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027be:	4a57      	ldr	r2, [pc, #348]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027c8:	4b54      	ldr	r3, [pc, #336]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027dc:	4a4f      	ldr	r2, [pc, #316]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80027f4:	4b49      	ldr	r3, [pc, #292]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027fa:	4a48      	ldr	r2, [pc, #288]	; (800291c <HAL_ETH_MspInit+0x188>)
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002804:	4b45      	ldr	r3, [pc, #276]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	4b42      	ldr	r3, [pc, #264]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002818:	4a40      	ldr	r2, [pc, #256]	; (800291c <HAL_ETH_MspInit+0x188>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002822:	4b3e      	ldr	r3, [pc, #248]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4b3a      	ldr	r3, [pc, #232]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002840:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	4a31      	ldr	r2, [pc, #196]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_ETH_MspInit+0x188>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	4a2a      	ldr	r2, [pc, #168]	; (800291c <HAL_ETH_MspInit+0x188>)
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_ETH_MspInit+0x188>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800288a:	2332      	movs	r3, #50	; 0x32
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800289a:	230b      	movs	r3, #11
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	481e      	ldr	r0, [pc, #120]	; (8002920 <HAL_ETH_MspInit+0x18c>)
 80028a6:	f003 fab3 	bl	8005e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80028aa:	2386      	movs	r3, #134	; 0x86
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028ba:	230b      	movs	r3, #11
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	4817      	ldr	r0, [pc, #92]	; (8002924 <HAL_ETH_MspInit+0x190>)
 80028c6:	f003 faa3 	bl	8005e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028dc:	230b      	movs	r3, #11
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e4:	4619      	mov	r1, r3
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <HAL_ETH_MspInit+0x194>)
 80028e8:	f003 fa92 	bl	8005e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80028ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028fe:	230b      	movs	r3, #11
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002906:	4619      	mov	r1, r3
 8002908:	4808      	ldr	r0, [pc, #32]	; (800292c <HAL_ETH_MspInit+0x198>)
 800290a:	f003 fa81 	bl	8005e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3738      	adds	r7, #56	; 0x38
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40028000 	.word	0x40028000
 800291c:	58024400 	.word	0x58024400
 8002920:	58020800 	.word	0x58020800
 8002924:	58020000 	.word	0x58020000
 8002928:	58020400 	.word	0x58020400
 800292c:	58021800 	.word	0x58021800

08002930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_SPI_MspInit+0xc8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d14d      	bne.n	80029ee <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 8002954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002958:	4a28      	ldr	r2, [pc, #160]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 800295a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 8002964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002976:	4a21      	ldr	r2, [pc, #132]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 8002982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 8002990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_SPI_MspInit+0xcc>)
 80029a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029ac:	2304      	movs	r3, #4
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80029bc:	2307      	movs	r3, #7
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	480e      	ldr	r0, [pc, #56]	; (8002a00 <HAL_SPI_MspInit+0xd0>)
 80029c8:	f003 fa22 	bl	8005e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d6:	2302      	movs	r3, #2
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029de:	2306      	movs	r3, #6
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4806      	ldr	r0, [pc, #24]	; (8002a04 <HAL_SPI_MspInit+0xd4>)
 80029ea:	f003 fa11 	bl	8005e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40003c00 	.word	0x40003c00
 80029fc:	58024400 	.word	0x58024400
 8002a00:	58020400 	.word	0x58020400
 8002a04:	58020800 	.word	0x58020800

08002a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0b8      	sub	sp, #224	; 0xe0
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	22bc      	movs	r2, #188	; 0xbc
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f008 fcf9 	bl	800b420 <memset>
  if(huart->Instance==USART3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a57      	ldr	r2, [pc, #348]	; (8002b90 <HAL_UART_MspInit+0x188>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	f040 80a6 	bne.w	8002b86 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fd77 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002a54:	f7ff fb48 	bl	80020e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a58:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <HAL_UART_MspInit+0x18c>)
 8002a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a5e:	4a4d      	ldr	r2, [pc, #308]	; (8002b94 <HAL_UART_MspInit+0x18c>)
 8002a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_UART_MspInit+0x18c>)
 8002a6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a76:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_UART_MspInit+0x18c>)
 8002a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7c:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <HAL_UART_MspInit+0x18c>)
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_UART_MspInit+0x18c>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aae:	2307      	movs	r3, #7
 8002ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ab4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4837      	ldr	r0, [pc, #220]	; (8002b98 <HAL_UART_MspInit+0x190>)
 8002abc:	f003 f9a8 	bl	8005e10 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002ac2:	4a37      	ldr	r2, [pc, #220]	; (8002ba0 <HAL_UART_MspInit+0x198>)
 8002ac4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002ac8:	222d      	movs	r2, #45	; 0x2d
 8002aca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad2:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ade:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b00:	4826      	ldr	r0, [pc, #152]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002b02:	f000 fb3b 	bl	800317c <HAL_DMA_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002b0c:	f7ff faec 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002b14:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_UART_MspInit+0x194>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b1e:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <HAL_UART_MspInit+0x1a0>)
 8002b20:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b24:	222e      	movs	r2, #46	; 0x2e
 8002b26:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b2a:	2240      	movs	r2, #64	; 0x40
 8002b2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b5a:	4812      	ldr	r0, [pc, #72]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b5c:	f000 fb0e 	bl	800317c <HAL_DMA_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002b66:	f7ff fabf 	bl	80020e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b6e:	679a      	str	r2, [r3, #120]	; 0x78
 8002b70:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <HAL_UART_MspInit+0x19c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2027      	movs	r0, #39	; 0x27
 8002b7c:	f000 fac9 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b80:	2027      	movs	r0, #39	; 0x27
 8002b82:	f000 fae0 	bl	8003146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b86:	bf00      	nop
 8002b88:	37e0      	adds	r7, #224	; 0xe0
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40004800 	.word	0x40004800
 8002b94:	58024400 	.word	0x58024400
 8002b98:	58020c00 	.word	0x58020c00
 8002b9c:	24000368 	.word	0x24000368
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	240003e0 	.word	0x240003e0
 8002ba8:	40020070 	.word	0x40020070

08002bac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_PCD_MspInit+0xa8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d13d      	bne.n	8002c4a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002bce:	f003 fceb 	bl	80065a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_PCD_MspInit+0xac>)
 8002bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_PCD_MspInit+0xac>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_PCD_MspInit+0xac>)
 8002be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002bf0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002c02:	230a      	movs	r3, #10
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4813      	ldr	r0, [pc, #76]	; (8002c5c <HAL_PCD_MspInit+0xb0>)
 8002c0e:	f003 f8ff 	bl	8005e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <HAL_PCD_MspInit+0xb0>)
 8002c28:	f003 f8f2 	bl	8005e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_PCD_MspInit+0xac>)
 8002c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c32:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <HAL_PCD_MspInit+0xac>)
 8002c34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_PCD_MspInit+0xac>)
 8002c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40080000 	.word	0x40080000
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	58020000 	.word	0x58020000

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <NMI_Handler+0x4>

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler+0x4>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cac:	f000 f8f2 	bl	8002e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <DMA1_Stream1_IRQHandler+0x10>)
 8002cba:	f001 fb1f 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	24000368 	.word	0x24000368

08002cc8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <DMA1_Stream4_IRQHandler+0x10>)
 8002cce:	f001 fb15 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	240003e0 	.word	0x240003e0

08002cdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <USART3_IRQHandler+0x10>)
 8002ce2:	f006 fbc5 	bl	8009470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	240002d8 	.word	0x240002d8

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f008 fb54 	bl	800b3cc <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	24080000 	.word	0x24080000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	24000ca4 	.word	0x24000ca4
 8002d58:	24000cc0 	.word	0x24000cc0

08002d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d60:	f7fe fd7e 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d64:	480c      	ldr	r0, [pc, #48]	; (8002d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d66:	490d      	ldr	r1, [pc, #52]	; (8002d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	; (8002da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f008 fb25 	bl	800b3d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8e:	f7fe fdfd 	bl	800198c <main>
  bx  lr
 8002d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002d98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d9c:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002da0:	0800d3d0 	.word	0x0800d3d0
  ldr r2, =_sbss
 8002da4:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8002da8:	24000cbc 	.word	0x24000cbc

08002dac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC3_IRQHandler>
	...

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db6:	2003      	movs	r0, #3
 8002db8:	f000 f9a0 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dbc:	f004 f9e8 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_Init+0x68>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	4913      	ldr	r1, [pc, #76]	; (8002e1c <HAL_Init+0x6c>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_Init+0x68>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_Init+0x6c>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <HAL_Init+0x70>)
 8002df2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002df4:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_Init+0x74>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f000 f814 	bl	8002e28 <HAL_InitTick>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e002      	b.n	8002e10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0a:	f7ff fca9 	bl	8002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	0800be0c 	.word	0x0800be0c
 8002e20:	24000004 	.word	0x24000004
 8002e24:	24000000 	.word	0x24000000

08002e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_InitTick+0x60>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e021      	b.n	8002e80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_InitTick+0x64>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_InitTick+0x60>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f985 	bl	8003162 <HAL_SYSTICK_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00e      	b.n	8002e80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b0f      	cmp	r3, #15
 8002e66:	d80a      	bhi.n	8002e7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f000 f94f 	bl	8003112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e74:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <HAL_InitTick+0x68>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	2400001c 	.word	0x2400001c
 8002e8c:	24000000 	.word	0x24000000
 8002e90:	24000018 	.word	0x24000018

08002e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_IncTick+0x20>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_IncTick+0x24>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <HAL_IncTick+0x24>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	2400001c 	.word	0x2400001c
 8002eb8:	24000ca8 	.word	0x24000ca8

08002ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_GetTick+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	24000ca8 	.word	0x24000ca8

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff ffee 	bl	8002ebc <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffde 	bl	8002ebc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	2400001c 	.word	0x2400001c

08002f1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_GetREVID+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0c1b      	lsrs	r3, r3, #16
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	5c001000 	.word	0x5c001000

08002f34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f44:	4904      	ldr	r1, [pc, #16]	; (8002f58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	58000400 	.word	0x58000400

08002f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <__NVIC_SetPriorityGrouping+0x40>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8a:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <__NVIC_SetPriorityGrouping+0x40>)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	60d3      	str	r3, [r2, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00
 8002fa0:	05fa0000 	.word	0x05fa0000

08002fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <__NVIC_GetPriorityGrouping+0x18>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f003 0307 	and.w	r3, r3, #7
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db0b      	blt.n	8002fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4907      	ldr	r1, [pc, #28]	; (8002ff8 <__NVIC_EnableIRQ+0x38>)
 8002fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e100 	.word	0xe000e100

08002ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db0a      	blt.n	8003026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <__NVIC_SetPriority+0x4c>)
 8003016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	440b      	add	r3, r1
 8003020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003024:	e00a      	b.n	800303c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <__NVIC_SetPriority+0x50>)
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	3b04      	subs	r3, #4
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	440b      	add	r3, r1
 800303a:	761a      	strb	r2, [r3, #24]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000e100 	.word	0xe000e100
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f1c3 0307 	rsb	r3, r3, #7
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf28      	it	cs
 800306e:	2304      	movcs	r3, #4
 8003070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3304      	adds	r3, #4
 8003076:	2b06      	cmp	r3, #6
 8003078:	d902      	bls.n	8003080 <NVIC_EncodePriority+0x30>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3b03      	subs	r3, #3
 800307e:	e000      	b.n	8003082 <NVIC_EncodePriority+0x32>
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	401a      	ands	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003098:	f04f 31ff 	mov.w	r1, #4294967295
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43d9      	mvns	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	4313      	orrs	r3, r2
         );
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d301      	bcc.n	80030ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00f      	b.n	80030ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <SysTick_Config+0x40>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d6:	210f      	movs	r1, #15
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	f7ff ff8e 	bl	8002ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <SysTick_Config+0x40>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <SysTick_Config+0x40>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff29 	bl	8002f5c <__NVIC_SetPriorityGrouping>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003120:	f7ff ff40 	bl	8002fa4 <__NVIC_GetPriorityGrouping>
 8003124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	6978      	ldr	r0, [r7, #20]
 800312c:	f7ff ff90 	bl	8003050 <NVIC_EncodePriority>
 8003130:	4602      	mov	r2, r0
 8003132:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff5f 	bl	8002ffc <__NVIC_SetPriority>
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff33 	bl	8002fc0 <__NVIC_EnableIRQ>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffa4 	bl	80030b8 <SysTick_Config>
 8003170:	4603      	mov	r3, r0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fe9a 	bl	8002ebc <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e316      	b.n	80037c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a66      	ldr	r2, [pc, #408]	; (8003334 <HAL_DMA_Init+0x1b8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04a      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a65      	ldr	r2, [pc, #404]	; (8003338 <HAL_DMA_Init+0x1bc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d045      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a63      	ldr	r2, [pc, #396]	; (800333c <HAL_DMA_Init+0x1c0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d040      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a62      	ldr	r2, [pc, #392]	; (8003340 <HAL_DMA_Init+0x1c4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d03b      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a60      	ldr	r2, [pc, #384]	; (8003344 <HAL_DMA_Init+0x1c8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d036      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5f      	ldr	r2, [pc, #380]	; (8003348 <HAL_DMA_Init+0x1cc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d031      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a5d      	ldr	r2, [pc, #372]	; (800334c <HAL_DMA_Init+0x1d0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02c      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_DMA_Init+0x1d4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d027      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5a      	ldr	r2, [pc, #360]	; (8003354 <HAL_DMA_Init+0x1d8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a59      	ldr	r2, [pc, #356]	; (8003358 <HAL_DMA_Init+0x1dc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d01d      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a57      	ldr	r2, [pc, #348]	; (800335c <HAL_DMA_Init+0x1e0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a56      	ldr	r2, [pc, #344]	; (8003360 <HAL_DMA_Init+0x1e4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a54      	ldr	r2, [pc, #336]	; (8003364 <HAL_DMA_Init+0x1e8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a53      	ldr	r2, [pc, #332]	; (8003368 <HAL_DMA_Init+0x1ec>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a51      	ldr	r2, [pc, #324]	; (800336c <HAL_DMA_Init+0x1f0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_DMA_Init+0xb8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a50      	ldr	r2, [pc, #320]	; (8003370 <HAL_DMA_Init+0x1f4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d101      	bne.n	8003238 <HAL_DMA_Init+0xbc>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_DMA_Init+0xbe>
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 813b 	beq.w	80034b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_DMA_Init+0x1b8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d04a      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a36      	ldr	r2, [pc, #216]	; (8003338 <HAL_DMA_Init+0x1bc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d045      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a34      	ldr	r2, [pc, #208]	; (800333c <HAL_DMA_Init+0x1c0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d040      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a33      	ldr	r2, [pc, #204]	; (8003340 <HAL_DMA_Init+0x1c4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d03b      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_DMA_Init+0x1c8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d036      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a30      	ldr	r2, [pc, #192]	; (8003348 <HAL_DMA_Init+0x1cc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d031      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2e      	ldr	r2, [pc, #184]	; (800334c <HAL_DMA_Init+0x1d0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02c      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <HAL_DMA_Init+0x1d4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d027      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_DMA_Init+0x1d8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <HAL_DMA_Init+0x1dc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01d      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_DMA_Init+0x1e0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a27      	ldr	r2, [pc, #156]	; (8003360 <HAL_DMA_Init+0x1e4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_DMA_Init+0x1e8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a24      	ldr	r2, [pc, #144]	; (8003368 <HAL_DMA_Init+0x1ec>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a22      	ldr	r2, [pc, #136]	; (800336c <HAL_DMA_Init+0x1f0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_Init+0x174>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <HAL_DMA_Init+0x1f4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d108      	bne.n	8003302 <HAL_DMA_Init+0x186>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e007      	b.n	8003312 <HAL_DMA_Init+0x196>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003312:	e02f      	b.n	8003374 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003314:	f7ff fdd2 	bl	8002ebc <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b05      	cmp	r3, #5
 8003320:	d928      	bls.n	8003374 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2203      	movs	r2, #3
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e246      	b.n	80037c2 <HAL_DMA_Init+0x646>
 8003334:	40020010 	.word	0x40020010
 8003338:	40020028 	.word	0x40020028
 800333c:	40020040 	.word	0x40020040
 8003340:	40020058 	.word	0x40020058
 8003344:	40020070 	.word	0x40020070
 8003348:	40020088 	.word	0x40020088
 800334c:	400200a0 	.word	0x400200a0
 8003350:	400200b8 	.word	0x400200b8
 8003354:	40020410 	.word	0x40020410
 8003358:	40020428 	.word	0x40020428
 800335c:	40020440 	.word	0x40020440
 8003360:	40020458 	.word	0x40020458
 8003364:	40020470 	.word	0x40020470
 8003368:	40020488 	.word	0x40020488
 800336c:	400204a0 	.word	0x400204a0
 8003370:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1c8      	bne.n	8003314 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4b83      	ldr	r3, [pc, #524]	; (800359c <HAL_DMA_Init+0x420>)
 800338e:	4013      	ands	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800339a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d107      	bne.n	80033d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4313      	orrs	r3, r2
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033d8:	4b71      	ldr	r3, [pc, #452]	; (80035a0 <HAL_DMA_Init+0x424>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b71      	ldr	r3, [pc, #452]	; (80035a4 <HAL_DMA_Init+0x428>)
 80033de:	4013      	ands	r3, r2
 80033e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e4:	d328      	bcc.n	8003438 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b28      	cmp	r3, #40	; 0x28
 80033ec:	d903      	bls.n	80033f6 <HAL_DMA_Init+0x27a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b2e      	cmp	r3, #46	; 0x2e
 80033f4:	d917      	bls.n	8003426 <HAL_DMA_Init+0x2aa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b3e      	cmp	r3, #62	; 0x3e
 80033fc:	d903      	bls.n	8003406 <HAL_DMA_Init+0x28a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b42      	cmp	r3, #66	; 0x42
 8003404:	d90f      	bls.n	8003426 <HAL_DMA_Init+0x2aa>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b46      	cmp	r3, #70	; 0x46
 800340c:	d903      	bls.n	8003416 <HAL_DMA_Init+0x29a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b48      	cmp	r3, #72	; 0x48
 8003414:	d907      	bls.n	8003426 <HAL_DMA_Init+0x2aa>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b4e      	cmp	r3, #78	; 0x4e
 800341c:	d905      	bls.n	800342a <HAL_DMA_Init+0x2ae>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b52      	cmp	r3, #82	; 0x52
 8003424:	d801      	bhi.n	800342a <HAL_DMA_Init+0x2ae>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_DMA_Init+0x2b0>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003436:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0307 	bic.w	r3, r3, #7
 800344e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b04      	cmp	r3, #4
 8003460:	d117      	bne.n	8003492 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f001 ff1d 	bl	80052b4 <DMA_CheckFifoParam>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2240      	movs	r2, #64	; 0x40
 8003484:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e197      	b.n	80037c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 fe58 	bl	8005150 <DMA_CalcBaseAndBitshift>
 80034a0:	4603      	mov	r3, r0
 80034a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	223f      	movs	r2, #63	; 0x3f
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e0cd      	b.n	8003652 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a3b      	ldr	r2, [pc, #236]	; (80035a8 <HAL_DMA_Init+0x42c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d022      	beq.n	8003506 <HAL_DMA_Init+0x38a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a39      	ldr	r2, [pc, #228]	; (80035ac <HAL_DMA_Init+0x430>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01d      	beq.n	8003506 <HAL_DMA_Init+0x38a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a38      	ldr	r2, [pc, #224]	; (80035b0 <HAL_DMA_Init+0x434>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d018      	beq.n	8003506 <HAL_DMA_Init+0x38a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a36      	ldr	r2, [pc, #216]	; (80035b4 <HAL_DMA_Init+0x438>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_DMA_Init+0x38a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a35      	ldr	r2, [pc, #212]	; (80035b8 <HAL_DMA_Init+0x43c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_DMA_Init+0x38a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a33      	ldr	r2, [pc, #204]	; (80035bc <HAL_DMA_Init+0x440>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_DMA_Init+0x38a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a32      	ldr	r2, [pc, #200]	; (80035c0 <HAL_DMA_Init+0x444>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_DMA_Init+0x38a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <HAL_DMA_Init+0x448>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_DMA_Init+0x38e>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_DMA_Init+0x390>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8097 	beq.w	8003640 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <HAL_DMA_Init+0x42c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d021      	beq.n	8003560 <HAL_DMA_Init+0x3e4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_DMA_Init+0x430>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01c      	beq.n	8003560 <HAL_DMA_Init+0x3e4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <HAL_DMA_Init+0x434>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d017      	beq.n	8003560 <HAL_DMA_Init+0x3e4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_DMA_Init+0x438>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d012      	beq.n	8003560 <HAL_DMA_Init+0x3e4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_DMA_Init+0x43c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00d      	beq.n	8003560 <HAL_DMA_Init+0x3e4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_DMA_Init+0x440>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d008      	beq.n	8003560 <HAL_DMA_Init+0x3e4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_DMA_Init+0x444>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <HAL_DMA_Init+0x3e4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_DMA_Init+0x448>)
 800355e:	4293      	cmp	r3, r2
 8003560:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_DMA_Init+0x44c>)
 800357e:	4013      	ands	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d020      	beq.n	80035cc <HAL_DMA_Init+0x450>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d102      	bne.n	8003598 <HAL_DMA_Init+0x41c>
 8003592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003596:	e01a      	b.n	80035ce <HAL_DMA_Init+0x452>
 8003598:	2300      	movs	r3, #0
 800359a:	e018      	b.n	80035ce <HAL_DMA_Init+0x452>
 800359c:	fe10803f 	.word	0xfe10803f
 80035a0:	5c001000 	.word	0x5c001000
 80035a4:	ffff0000 	.word	0xffff0000
 80035a8:	58025408 	.word	0x58025408
 80035ac:	5802541c 	.word	0x5802541c
 80035b0:	58025430 	.word	0x58025430
 80035b4:	58025444 	.word	0x58025444
 80035b8:	58025458 	.word	0x58025458
 80035bc:	5802546c 	.word	0x5802546c
 80035c0:	58025480 	.word	0x58025480
 80035c4:	58025494 	.word	0x58025494
 80035c8:	fffe000f 	.word	0xfffe000f
 80035cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68d2      	ldr	r2, [r2, #12]
 80035d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <HAL_DMA_Init+0x650>)
 8003614:	4413      	add	r3, r2
 8003616:	4a6e      	ldr	r2, [pc, #440]	; (80037d0 <HAL_DMA_Init+0x654>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	009a      	lsls	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f001 fd93 	bl	8005150 <DMA_CalcBaseAndBitshift>
 800362a:	4603      	mov	r3, r0
 800362c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2201      	movs	r2, #1
 8003638:	409a      	lsls	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e008      	b.n	8003652 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2203      	movs	r2, #3
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0b7      	b.n	80037c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5f      	ldr	r2, [pc, #380]	; (80037d4 <HAL_DMA_Init+0x658>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d072      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5d      	ldr	r2, [pc, #372]	; (80037d8 <HAL_DMA_Init+0x65c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d06d      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	; (80037dc <HAL_DMA_Init+0x660>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d068      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <HAL_DMA_Init+0x664>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d063      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a59      	ldr	r2, [pc, #356]	; (80037e4 <HAL_DMA_Init+0x668>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d05e      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a57      	ldr	r2, [pc, #348]	; (80037e8 <HAL_DMA_Init+0x66c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d059      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a56      	ldr	r2, [pc, #344]	; (80037ec <HAL_DMA_Init+0x670>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d054      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a54      	ldr	r2, [pc, #336]	; (80037f0 <HAL_DMA_Init+0x674>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04f      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a53      	ldr	r2, [pc, #332]	; (80037f4 <HAL_DMA_Init+0x678>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04a      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a51      	ldr	r2, [pc, #324]	; (80037f8 <HAL_DMA_Init+0x67c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d045      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_DMA_Init+0x680>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d040      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a4e      	ldr	r2, [pc, #312]	; (8003800 <HAL_DMA_Init+0x684>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03b      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a4d      	ldr	r2, [pc, #308]	; (8003804 <HAL_DMA_Init+0x688>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d036      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_DMA_Init+0x68c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_DMA_Init+0x690>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d02c      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a48      	ldr	r2, [pc, #288]	; (8003810 <HAL_DMA_Init+0x694>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d027      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a47      	ldr	r2, [pc, #284]	; (8003814 <HAL_DMA_Init+0x698>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a45      	ldr	r2, [pc, #276]	; (8003818 <HAL_DMA_Init+0x69c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a44      	ldr	r2, [pc, #272]	; (800381c <HAL_DMA_Init+0x6a0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a42      	ldr	r2, [pc, #264]	; (8003820 <HAL_DMA_Init+0x6a4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a41      	ldr	r2, [pc, #260]	; (8003824 <HAL_DMA_Init+0x6a8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3f      	ldr	r2, [pc, #252]	; (8003828 <HAL_DMA_Init+0x6ac>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3e      	ldr	r2, [pc, #248]	; (800382c <HAL_DMA_Init+0x6b0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_Init+0x5c6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3c      	ldr	r2, [pc, #240]	; (8003830 <HAL_DMA_Init+0x6b4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_DMA_Init+0x5ca>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_DMA_Init+0x5cc>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d032      	beq.n	80037b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f001 fe2d 	bl	80053ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d102      	bne.n	8003760 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003774:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_DMA_Init+0x624>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b08      	cmp	r3, #8
 8003784:	d80c      	bhi.n	80037a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 feaa 	bl	80054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e008      	b.n	80037b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	a7fdabf8 	.word	0xa7fdabf8
 80037d0:	cccccccd 	.word	0xcccccccd
 80037d4:	40020010 	.word	0x40020010
 80037d8:	40020028 	.word	0x40020028
 80037dc:	40020040 	.word	0x40020040
 80037e0:	40020058 	.word	0x40020058
 80037e4:	40020070 	.word	0x40020070
 80037e8:	40020088 	.word	0x40020088
 80037ec:	400200a0 	.word	0x400200a0
 80037f0:	400200b8 	.word	0x400200b8
 80037f4:	40020410 	.word	0x40020410
 80037f8:	40020428 	.word	0x40020428
 80037fc:	40020440 	.word	0x40020440
 8003800:	40020458 	.word	0x40020458
 8003804:	40020470 	.word	0x40020470
 8003808:	40020488 	.word	0x40020488
 800380c:	400204a0 	.word	0x400204a0
 8003810:	400204b8 	.word	0x400204b8
 8003814:	58025408 	.word	0x58025408
 8003818:	5802541c 	.word	0x5802541c
 800381c:	58025430 	.word	0x58025430
 8003820:	58025444 	.word	0x58025444
 8003824:	58025458 	.word	0x58025458
 8003828:	5802546c 	.word	0x5802546c
 800382c:	58025480 	.word	0x58025480
 8003830:	58025494 	.word	0x58025494

08003834 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff fb3e 	bl	8002ebc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e2dc      	b.n	8003e06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d008      	beq.n	800386a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e2cd      	b.n	8003e06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a76      	ldr	r2, [pc, #472]	; (8003a48 <HAL_DMA_Abort+0x214>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d04a      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a74      	ldr	r2, [pc, #464]	; (8003a4c <HAL_DMA_Abort+0x218>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d045      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a73      	ldr	r2, [pc, #460]	; (8003a50 <HAL_DMA_Abort+0x21c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d040      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a71      	ldr	r2, [pc, #452]	; (8003a54 <HAL_DMA_Abort+0x220>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d03b      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a70      	ldr	r2, [pc, #448]	; (8003a58 <HAL_DMA_Abort+0x224>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d036      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6e      	ldr	r2, [pc, #440]	; (8003a5c <HAL_DMA_Abort+0x228>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d031      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6d      	ldr	r2, [pc, #436]	; (8003a60 <HAL_DMA_Abort+0x22c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d02c      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6b      	ldr	r2, [pc, #428]	; (8003a64 <HAL_DMA_Abort+0x230>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d027      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6a      	ldr	r2, [pc, #424]	; (8003a68 <HAL_DMA_Abort+0x234>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d022      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a68      	ldr	r2, [pc, #416]	; (8003a6c <HAL_DMA_Abort+0x238>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01d      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a67      	ldr	r2, [pc, #412]	; (8003a70 <HAL_DMA_Abort+0x23c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d018      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <HAL_DMA_Abort+0x240>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a64      	ldr	r2, [pc, #400]	; (8003a78 <HAL_DMA_Abort+0x244>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00e      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a62      	ldr	r2, [pc, #392]	; (8003a7c <HAL_DMA_Abort+0x248>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a61      	ldr	r2, [pc, #388]	; (8003a80 <HAL_DMA_Abort+0x24c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_DMA_Abort+0xd6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <HAL_DMA_Abort+0x250>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_DMA_Abort+0xda>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_DMA_Abort+0xdc>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 021e 	bic.w	r2, r2, #30
 8003922:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003932:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e00a      	b.n	8003952 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 020e 	bic.w	r2, r2, #14
 800394a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <HAL_DMA_Abort+0x214>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d072      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3a      	ldr	r2, [pc, #232]	; (8003a4c <HAL_DMA_Abort+0x218>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d06d      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <HAL_DMA_Abort+0x21c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d068      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a37      	ldr	r2, [pc, #220]	; (8003a54 <HAL_DMA_Abort+0x220>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d063      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a36      	ldr	r2, [pc, #216]	; (8003a58 <HAL_DMA_Abort+0x224>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d05e      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a34      	ldr	r2, [pc, #208]	; (8003a5c <HAL_DMA_Abort+0x228>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d059      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a33      	ldr	r2, [pc, #204]	; (8003a60 <HAL_DMA_Abort+0x22c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d054      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a31      	ldr	r2, [pc, #196]	; (8003a64 <HAL_DMA_Abort+0x230>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d04f      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a30      	ldr	r2, [pc, #192]	; (8003a68 <HAL_DMA_Abort+0x234>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d04a      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <HAL_DMA_Abort+0x238>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d045      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <HAL_DMA_Abort+0x23c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d040      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <HAL_DMA_Abort+0x240>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d03b      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <HAL_DMA_Abort+0x244>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d036      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a28      	ldr	r2, [pc, #160]	; (8003a7c <HAL_DMA_Abort+0x248>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a27      	ldr	r2, [pc, #156]	; (8003a80 <HAL_DMA_Abort+0x24c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d02c      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <HAL_DMA_Abort+0x250>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a24      	ldr	r2, [pc, #144]	; (8003a88 <HAL_DMA_Abort+0x254>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <HAL_DMA_Abort+0x258>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01d      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a21      	ldr	r2, [pc, #132]	; (8003a90 <HAL_DMA_Abort+0x25c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <HAL_DMA_Abort+0x260>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <HAL_DMA_Abort+0x264>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <HAL_DMA_Abort+0x268>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_DMA_Abort+0x26c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_Abort+0x20e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_DMA_Abort+0x270>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d132      	bne.n	8003aa8 <HAL_DMA_Abort+0x274>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e031      	b.n	8003aaa <HAL_DMA_Abort+0x276>
 8003a46:	bf00      	nop
 8003a48:	40020010 	.word	0x40020010
 8003a4c:	40020028 	.word	0x40020028
 8003a50:	40020040 	.word	0x40020040
 8003a54:	40020058 	.word	0x40020058
 8003a58:	40020070 	.word	0x40020070
 8003a5c:	40020088 	.word	0x40020088
 8003a60:	400200a0 	.word	0x400200a0
 8003a64:	400200b8 	.word	0x400200b8
 8003a68:	40020410 	.word	0x40020410
 8003a6c:	40020428 	.word	0x40020428
 8003a70:	40020440 	.word	0x40020440
 8003a74:	40020458 	.word	0x40020458
 8003a78:	40020470 	.word	0x40020470
 8003a7c:	40020488 	.word	0x40020488
 8003a80:	400204a0 	.word	0x400204a0
 8003a84:	400204b8 	.word	0x400204b8
 8003a88:	58025408 	.word	0x58025408
 8003a8c:	5802541c 	.word	0x5802541c
 8003a90:	58025430 	.word	0x58025430
 8003a94:	58025444 	.word	0x58025444
 8003a98:	58025458 	.word	0x58025458
 8003a9c:	5802546c 	.word	0x5802546c
 8003aa0:	58025480 	.word	0x58025480
 8003aa4:	58025494 	.word	0x58025494
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003abc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6d      	ldr	r2, [pc, #436]	; (8003c78 <HAL_DMA_Abort+0x444>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6b      	ldr	r2, [pc, #428]	; (8003c7c <HAL_DMA_Abort+0x448>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_DMA_Abort+0x44c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_DMA_Abort+0x450>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a67      	ldr	r2, [pc, #412]	; (8003c88 <HAL_DMA_Abort+0x454>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a65      	ldr	r2, [pc, #404]	; (8003c8c <HAL_DMA_Abort+0x458>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a64      	ldr	r2, [pc, #400]	; (8003c90 <HAL_DMA_Abort+0x45c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a62      	ldr	r2, [pc, #392]	; (8003c94 <HAL_DMA_Abort+0x460>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a61      	ldr	r2, [pc, #388]	; (8003c98 <HAL_DMA_Abort+0x464>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a5f      	ldr	r2, [pc, #380]	; (8003c9c <HAL_DMA_Abort+0x468>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a5e      	ldr	r2, [pc, #376]	; (8003ca0 <HAL_DMA_Abort+0x46c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a5c      	ldr	r2, [pc, #368]	; (8003ca4 <HAL_DMA_Abort+0x470>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ca8 <HAL_DMA_Abort+0x474>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a59      	ldr	r2, [pc, #356]	; (8003cac <HAL_DMA_Abort+0x478>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_DMA_Abort+0x47c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_Abort+0x32a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a56      	ldr	r2, [pc, #344]	; (8003cb4 <HAL_DMA_Abort+0x480>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <HAL_DMA_Abort+0x33c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <HAL_DMA_Abort+0x34c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b80:	e013      	b.n	8003baa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b82:	f7ff f99b 	bl	8002ebc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b05      	cmp	r3, #5
 8003b8e:	d90c      	bls.n	8003baa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e12d      	b.n	8003e06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <HAL_DMA_Abort+0x444>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04a      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <HAL_DMA_Abort+0x448>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d045      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2c      	ldr	r2, [pc, #176]	; (8003c80 <HAL_DMA_Abort+0x44c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d040      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <HAL_DMA_Abort+0x450>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d03b      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <HAL_DMA_Abort+0x454>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d036      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_DMA_Abort+0x458>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d031      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_DMA_Abort+0x45c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d02c      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <HAL_DMA_Abort+0x460>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d027      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <HAL_DMA_Abort+0x464>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <HAL_DMA_Abort+0x468>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01d      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <HAL_DMA_Abort+0x46c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_DMA_Abort+0x470>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <HAL_DMA_Abort+0x474>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <HAL_DMA_Abort+0x478>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_DMA_Abort+0x47c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_DMA_Abort+0x422>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <HAL_DMA_Abort+0x480>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_DMA_Abort+0x426>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_DMA_Abort+0x428>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d02b      	beq.n	8003cb8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	223f      	movs	r2, #63	; 0x3f
 8003c70:	409a      	lsls	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	e02a      	b.n	8003cce <HAL_DMA_Abort+0x49a>
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4f      	ldr	r2, [pc, #316]	; (8003e10 <HAL_DMA_Abort+0x5dc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d072      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4d      	ldr	r2, [pc, #308]	; (8003e14 <HAL_DMA_Abort+0x5e0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d06d      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4c      	ldr	r2, [pc, #304]	; (8003e18 <HAL_DMA_Abort+0x5e4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d068      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4a      	ldr	r2, [pc, #296]	; (8003e1c <HAL_DMA_Abort+0x5e8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d063      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a49      	ldr	r2, [pc, #292]	; (8003e20 <HAL_DMA_Abort+0x5ec>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d05e      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a47      	ldr	r2, [pc, #284]	; (8003e24 <HAL_DMA_Abort+0x5f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d059      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a46      	ldr	r2, [pc, #280]	; (8003e28 <HAL_DMA_Abort+0x5f4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d054      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a44      	ldr	r2, [pc, #272]	; (8003e2c <HAL_DMA_Abort+0x5f8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d04f      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a43      	ldr	r2, [pc, #268]	; (8003e30 <HAL_DMA_Abort+0x5fc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d04a      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a41      	ldr	r2, [pc, #260]	; (8003e34 <HAL_DMA_Abort+0x600>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d045      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <HAL_DMA_Abort+0x604>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d040      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3e      	ldr	r2, [pc, #248]	; (8003e3c <HAL_DMA_Abort+0x608>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d03b      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3d      	ldr	r2, [pc, #244]	; (8003e40 <HAL_DMA_Abort+0x60c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d036      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <HAL_DMA_Abort+0x610>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d031      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	; (8003e48 <HAL_DMA_Abort+0x614>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d02c      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <HAL_DMA_Abort+0x618>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d027      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a37      	ldr	r2, [pc, #220]	; (8003e50 <HAL_DMA_Abort+0x61c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a35      	ldr	r2, [pc, #212]	; (8003e54 <HAL_DMA_Abort+0x620>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a34      	ldr	r2, [pc, #208]	; (8003e58 <HAL_DMA_Abort+0x624>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a32      	ldr	r2, [pc, #200]	; (8003e5c <HAL_DMA_Abort+0x628>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a31      	ldr	r2, [pc, #196]	; (8003e60 <HAL_DMA_Abort+0x62c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <HAL_DMA_Abort+0x630>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2e      	ldr	r2, [pc, #184]	; (8003e68 <HAL_DMA_Abort+0x634>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_DMA_Abort+0x58a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <HAL_DMA_Abort+0x638>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_DMA_Abort+0x58e>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_DMA_Abort+0x590>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d015      	beq.n	8003df4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dd0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003df2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	58025408 	.word	0x58025408
 8003e54:	5802541c 	.word	0x5802541c
 8003e58:	58025430 	.word	0x58025430
 8003e5c:	58025444 	.word	0x58025444
 8003e60:	58025458 	.word	0x58025458
 8003e64:	5802546c 	.word	0x5802546c
 8003e68:	58025480 	.word	0x58025480
 8003e6c:	58025494 	.word	0x58025494

08003e70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e237      	b.n	80042f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d004      	beq.n	8003e98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e22c      	b.n	80042f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5c      	ldr	r2, [pc, #368]	; (8004010 <HAL_DMA_Abort_IT+0x1a0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d04a      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5b      	ldr	r2, [pc, #364]	; (8004014 <HAL_DMA_Abort_IT+0x1a4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d045      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a59      	ldr	r2, [pc, #356]	; (8004018 <HAL_DMA_Abort_IT+0x1a8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d040      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a58      	ldr	r2, [pc, #352]	; (800401c <HAL_DMA_Abort_IT+0x1ac>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d03b      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a56      	ldr	r2, [pc, #344]	; (8004020 <HAL_DMA_Abort_IT+0x1b0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d036      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a55      	ldr	r2, [pc, #340]	; (8004024 <HAL_DMA_Abort_IT+0x1b4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d031      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a53      	ldr	r2, [pc, #332]	; (8004028 <HAL_DMA_Abort_IT+0x1b8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02c      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_DMA_Abort_IT+0x1bc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d027      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a50      	ldr	r2, [pc, #320]	; (8004030 <HAL_DMA_Abort_IT+0x1c0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d022      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a4f      	ldr	r2, [pc, #316]	; (8004034 <HAL_DMA_Abort_IT+0x1c4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d01d      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4d      	ldr	r2, [pc, #308]	; (8004038 <HAL_DMA_Abort_IT+0x1c8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d018      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4c      	ldr	r2, [pc, #304]	; (800403c <HAL_DMA_Abort_IT+0x1cc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <HAL_DMA_Abort_IT+0x1d0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00e      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a49      	ldr	r2, [pc, #292]	; (8004044 <HAL_DMA_Abort_IT+0x1d4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d009      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a47      	ldr	r2, [pc, #284]	; (8004048 <HAL_DMA_Abort_IT+0x1d8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_DMA_Abort_IT+0xc8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a46      	ldr	r2, [pc, #280]	; (800404c <HAL_DMA_Abort_IT+0x1dc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_DMA_Abort_IT+0xcc>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_DMA_Abort_IT+0xce>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8086 	beq.w	8004050 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2204      	movs	r2, #4
 8003f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <HAL_DMA_Abort_IT+0x1a0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d04a      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2e      	ldr	r2, [pc, #184]	; (8004014 <HAL_DMA_Abort_IT+0x1a4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d045      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2c      	ldr	r2, [pc, #176]	; (8004018 <HAL_DMA_Abort_IT+0x1a8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d040      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2b      	ldr	r2, [pc, #172]	; (800401c <HAL_DMA_Abort_IT+0x1ac>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d03b      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a29      	ldr	r2, [pc, #164]	; (8004020 <HAL_DMA_Abort_IT+0x1b0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d036      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a28      	ldr	r2, [pc, #160]	; (8004024 <HAL_DMA_Abort_IT+0x1b4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <HAL_DMA_Abort_IT+0x1b8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d02c      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a25      	ldr	r2, [pc, #148]	; (800402c <HAL_DMA_Abort_IT+0x1bc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d027      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a23      	ldr	r2, [pc, #140]	; (8004030 <HAL_DMA_Abort_IT+0x1c0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a22      	ldr	r2, [pc, #136]	; (8004034 <HAL_DMA_Abort_IT+0x1c4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d01d      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a20      	ldr	r2, [pc, #128]	; (8004038 <HAL_DMA_Abort_IT+0x1c8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	; (800403c <HAL_DMA_Abort_IT+0x1cc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <HAL_DMA_Abort_IT+0x1d0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <HAL_DMA_Abort_IT+0x1d4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1a      	ldr	r2, [pc, #104]	; (8004048 <HAL_DMA_Abort_IT+0x1d8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_DMA_Abort_IT+0x17c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_DMA_Abort_IT+0x1dc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d108      	bne.n	8003ffe <HAL_DMA_Abort_IT+0x18e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e178      	b.n	80042f0 <HAL_DMA_Abort_IT+0x480>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e16f      	b.n	80042f0 <HAL_DMA_Abort_IT+0x480>
 8004010:	40020010 	.word	0x40020010
 8004014:	40020028 	.word	0x40020028
 8004018:	40020040 	.word	0x40020040
 800401c:	40020058 	.word	0x40020058
 8004020:	40020070 	.word	0x40020070
 8004024:	40020088 	.word	0x40020088
 8004028:	400200a0 	.word	0x400200a0
 800402c:	400200b8 	.word	0x400200b8
 8004030:	40020410 	.word	0x40020410
 8004034:	40020428 	.word	0x40020428
 8004038:	40020440 	.word	0x40020440
 800403c:	40020458 	.word	0x40020458
 8004040:	40020470 	.word	0x40020470
 8004044:	40020488 	.word	0x40020488
 8004048:	400204a0 	.word	0x400204a0
 800404c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 020e 	bic.w	r2, r2, #14
 800405e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6c      	ldr	r2, [pc, #432]	; (8004218 <HAL_DMA_Abort_IT+0x3a8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d04a      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6b      	ldr	r2, [pc, #428]	; (800421c <HAL_DMA_Abort_IT+0x3ac>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d045      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a69      	ldr	r2, [pc, #420]	; (8004220 <HAL_DMA_Abort_IT+0x3b0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d040      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a68      	ldr	r2, [pc, #416]	; (8004224 <HAL_DMA_Abort_IT+0x3b4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d03b      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a66      	ldr	r2, [pc, #408]	; (8004228 <HAL_DMA_Abort_IT+0x3b8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d036      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a65      	ldr	r2, [pc, #404]	; (800422c <HAL_DMA_Abort_IT+0x3bc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d031      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a63      	ldr	r2, [pc, #396]	; (8004230 <HAL_DMA_Abort_IT+0x3c0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02c      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a62      	ldr	r2, [pc, #392]	; (8004234 <HAL_DMA_Abort_IT+0x3c4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d027      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a60      	ldr	r2, [pc, #384]	; (8004238 <HAL_DMA_Abort_IT+0x3c8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a5f      	ldr	r2, [pc, #380]	; (800423c <HAL_DMA_Abort_IT+0x3cc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d01d      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a5d      	ldr	r2, [pc, #372]	; (8004240 <HAL_DMA_Abort_IT+0x3d0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5c      	ldr	r2, [pc, #368]	; (8004244 <HAL_DMA_Abort_IT+0x3d4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5a      	ldr	r2, [pc, #360]	; (8004248 <HAL_DMA_Abort_IT+0x3d8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a59      	ldr	r2, [pc, #356]	; (800424c <HAL_DMA_Abort_IT+0x3dc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a57      	ldr	r2, [pc, #348]	; (8004250 <HAL_DMA_Abort_IT+0x3e0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_DMA_Abort_IT+0x290>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a56      	ldr	r2, [pc, #344]	; (8004254 <HAL_DMA_Abort_IT+0x3e4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d108      	bne.n	8004112 <HAL_DMA_Abort_IT+0x2a2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e007      	b.n	8004122 <HAL_DMA_Abort_IT+0x2b2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3c      	ldr	r2, [pc, #240]	; (8004218 <HAL_DMA_Abort_IT+0x3a8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d072      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a3a      	ldr	r2, [pc, #232]	; (800421c <HAL_DMA_Abort_IT+0x3ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d06d      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a39      	ldr	r2, [pc, #228]	; (8004220 <HAL_DMA_Abort_IT+0x3b0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d068      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a37      	ldr	r2, [pc, #220]	; (8004224 <HAL_DMA_Abort_IT+0x3b4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d063      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a36      	ldr	r2, [pc, #216]	; (8004228 <HAL_DMA_Abort_IT+0x3b8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d05e      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a34      	ldr	r2, [pc, #208]	; (800422c <HAL_DMA_Abort_IT+0x3bc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d059      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a33      	ldr	r2, [pc, #204]	; (8004230 <HAL_DMA_Abort_IT+0x3c0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d054      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a31      	ldr	r2, [pc, #196]	; (8004234 <HAL_DMA_Abort_IT+0x3c4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d04f      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a30      	ldr	r2, [pc, #192]	; (8004238 <HAL_DMA_Abort_IT+0x3c8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d04a      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2e      	ldr	r2, [pc, #184]	; (800423c <HAL_DMA_Abort_IT+0x3cc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d045      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2d      	ldr	r2, [pc, #180]	; (8004240 <HAL_DMA_Abort_IT+0x3d0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d040      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2b      	ldr	r2, [pc, #172]	; (8004244 <HAL_DMA_Abort_IT+0x3d4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d03b      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <HAL_DMA_Abort_IT+0x3d8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d036      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a28      	ldr	r2, [pc, #160]	; (800424c <HAL_DMA_Abort_IT+0x3dc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d031      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a27      	ldr	r2, [pc, #156]	; (8004250 <HAL_DMA_Abort_IT+0x3e0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d02c      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a25      	ldr	r2, [pc, #148]	; (8004254 <HAL_DMA_Abort_IT+0x3e4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d027      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_DMA_Abort_IT+0x3e8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <HAL_DMA_Abort_IT+0x3ec>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01d      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_DMA_Abort_IT+0x3f0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <HAL_DMA_Abort_IT+0x3f4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_DMA_Abort_IT+0x3f8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_DMA_Abort_IT+0x3fc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_DMA_Abort_IT+0x400>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_DMA_Abort_IT+0x3a2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_DMA_Abort_IT+0x404>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d132      	bne.n	8004278 <HAL_DMA_Abort_IT+0x408>
 8004212:	2301      	movs	r3, #1
 8004214:	e031      	b.n	800427a <HAL_DMA_Abort_IT+0x40a>
 8004216:	bf00      	nop
 8004218:	40020010 	.word	0x40020010
 800421c:	40020028 	.word	0x40020028
 8004220:	40020040 	.word	0x40020040
 8004224:	40020058 	.word	0x40020058
 8004228:	40020070 	.word	0x40020070
 800422c:	40020088 	.word	0x40020088
 8004230:	400200a0 	.word	0x400200a0
 8004234:	400200b8 	.word	0x400200b8
 8004238:	40020410 	.word	0x40020410
 800423c:	40020428 	.word	0x40020428
 8004240:	40020440 	.word	0x40020440
 8004244:	40020458 	.word	0x40020458
 8004248:	40020470 	.word	0x40020470
 800424c:	40020488 	.word	0x40020488
 8004250:	400204a0 	.word	0x400204a0
 8004254:	400204b8 	.word	0x400204b8
 8004258:	58025408 	.word	0x58025408
 800425c:	5802541c 	.word	0x5802541c
 8004260:	58025430 	.word	0x58025430
 8004264:	58025444 	.word	0x58025444
 8004268:	58025458 	.word	0x58025458
 800426c:	5802546c 	.word	0x5802546c
 8004270:	58025480 	.word	0x58025480
 8004274:	58025494 	.word	0x58025494
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d028      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800428c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2201      	movs	r2, #1
 800429e:	409a      	lsls	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop

080042fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004308:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <HAL_DMA_IRQHandler+0x1ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a67      	ldr	r2, [pc, #412]	; (80044ac <HAL_DMA_IRQHandler+0x1b0>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a5f      	ldr	r2, [pc, #380]	; (80044b0 <HAL_DMA_IRQHandler+0x1b4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d04a      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5d      	ldr	r2, [pc, #372]	; (80044b4 <HAL_DMA_IRQHandler+0x1b8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d045      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5c      	ldr	r2, [pc, #368]	; (80044b8 <HAL_DMA_IRQHandler+0x1bc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d040      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5a      	ldr	r2, [pc, #360]	; (80044bc <HAL_DMA_IRQHandler+0x1c0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d03b      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a59      	ldr	r2, [pc, #356]	; (80044c0 <HAL_DMA_IRQHandler+0x1c4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d036      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a57      	ldr	r2, [pc, #348]	; (80044c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d031      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a56      	ldr	r2, [pc, #344]	; (80044c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d02c      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a54      	ldr	r2, [pc, #336]	; (80044cc <HAL_DMA_IRQHandler+0x1d0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d027      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a53      	ldr	r2, [pc, #332]	; (80044d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a51      	ldr	r2, [pc, #324]	; (80044d4 <HAL_DMA_IRQHandler+0x1d8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01d      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a50      	ldr	r2, [pc, #320]	; (80044d8 <HAL_DMA_IRQHandler+0x1dc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d018      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a4e      	ldr	r2, [pc, #312]	; (80044dc <HAL_DMA_IRQHandler+0x1e0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <HAL_DMA_IRQHandler+0x1e4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a4b      	ldr	r2, [pc, #300]	; (80044e4 <HAL_DMA_IRQHandler+0x1e8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_DMA_IRQHandler+0x1ec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_DMA_IRQHandler+0xd2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a48      	ldr	r2, [pc, #288]	; (80044ec <HAL_DMA_IRQHandler+0x1f0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_DMA_IRQHandler+0xd6>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 842b 	beq.w	8004c30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	2208      	movs	r2, #8
 80043e4:	409a      	lsls	r2, r3
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80a2 	beq.w	8004534 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2e      	ldr	r2, [pc, #184]	; (80044b0 <HAL_DMA_IRQHandler+0x1b4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2d      	ldr	r2, [pc, #180]	; (80044b4 <HAL_DMA_IRQHandler+0x1b8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <HAL_DMA_IRQHandler+0x1bc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d040      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <HAL_DMA_IRQHandler+0x1c0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d03b      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a28      	ldr	r2, [pc, #160]	; (80044c0 <HAL_DMA_IRQHandler+0x1c4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a24      	ldr	r2, [pc, #144]	; (80044cc <HAL_DMA_IRQHandler+0x1d0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <HAL_DMA_IRQHandler+0x1d8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <HAL_DMA_IRQHandler+0x1dc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <HAL_DMA_IRQHandler+0x1e0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <HAL_DMA_IRQHandler+0x1e4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <HAL_DMA_IRQHandler+0x1e8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <HAL_DMA_IRQHandler+0x1ec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_DMA_IRQHandler+0x194>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_DMA_IRQHandler+0x1f0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d12f      	bne.n	80044f0 <HAL_DMA_IRQHandler+0x1f4>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	bf14      	ite	ne
 800449e:	2301      	movne	r3, #1
 80044a0:	2300      	moveq	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	e02e      	b.n	8004504 <HAL_DMA_IRQHandler+0x208>
 80044a6:	bf00      	nop
 80044a8:	24000000 	.word	0x24000000
 80044ac:	1b4e81b5 	.word	0x1b4e81b5
 80044b0:	40020010 	.word	0x40020010
 80044b4:	40020028 	.word	0x40020028
 80044b8:	40020040 	.word	0x40020040
 80044bc:	40020058 	.word	0x40020058
 80044c0:	40020070 	.word	0x40020070
 80044c4:	40020088 	.word	0x40020088
 80044c8:	400200a0 	.word	0x400200a0
 80044cc:	400200b8 	.word	0x400200b8
 80044d0:	40020410 	.word	0x40020410
 80044d4:	40020428 	.word	0x40020428
 80044d8:	40020440 	.word	0x40020440
 80044dc:	40020458 	.word	0x40020458
 80044e0:	40020470 	.word	0x40020470
 80044e4:	40020488 	.word	0x40020488
 80044e8:	400204a0 	.word	0x400204a0
 80044ec:	400204b8 	.word	0x400204b8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d015      	beq.n	8004534 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0204 	bic.w	r2, r2, #4
 8004516:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2208      	movs	r2, #8
 8004522:	409a      	lsls	r2, r3
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	fa22 f303 	lsr.w	r3, r2, r3
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d06e      	beq.n	8004628 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a69      	ldr	r2, [pc, #420]	; (80046f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <HAL_DMA_IRQHandler+0x3fc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a66      	ldr	r2, [pc, #408]	; (80046fc <HAL_DMA_IRQHandler+0x400>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a64      	ldr	r2, [pc, #400]	; (8004700 <HAL_DMA_IRQHandler+0x404>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a63      	ldr	r2, [pc, #396]	; (8004704 <HAL_DMA_IRQHandler+0x408>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a61      	ldr	r2, [pc, #388]	; (8004708 <HAL_DMA_IRQHandler+0x40c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a60      	ldr	r2, [pc, #384]	; (800470c <HAL_DMA_IRQHandler+0x410>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a5e      	ldr	r2, [pc, #376]	; (8004710 <HAL_DMA_IRQHandler+0x414>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a5d      	ldr	r2, [pc, #372]	; (8004714 <HAL_DMA_IRQHandler+0x418>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a5b      	ldr	r2, [pc, #364]	; (8004718 <HAL_DMA_IRQHandler+0x41c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a5a      	ldr	r2, [pc, #360]	; (800471c <HAL_DMA_IRQHandler+0x420>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a58      	ldr	r2, [pc, #352]	; (8004720 <HAL_DMA_IRQHandler+0x424>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_DMA_IRQHandler+0x428>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a55      	ldr	r2, [pc, #340]	; (8004728 <HAL_DMA_IRQHandler+0x42c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_DMA_IRQHandler+0x430>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_IRQHandler+0x2ee>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_DMA_IRQHandler+0x434>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10a      	bne.n	8004600 <HAL_DMA_IRQHandler+0x304>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e003      	b.n	8004608 <HAL_DMA_IRQHandler+0x30c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2201      	movs	r2, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	f043 0202 	orr.w	r2, r3, #2
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2204      	movs	r2, #4
 8004632:	409a      	lsls	r2, r3
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 808f 	beq.w	800475c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a2c      	ldr	r2, [pc, #176]	; (80046f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d04a      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <HAL_DMA_IRQHandler+0x3fc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d045      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <HAL_DMA_IRQHandler+0x400>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d040      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <HAL_DMA_IRQHandler+0x404>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d03b      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a26      	ldr	r2, [pc, #152]	; (8004704 <HAL_DMA_IRQHandler+0x408>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d036      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a24      	ldr	r2, [pc, #144]	; (8004708 <HAL_DMA_IRQHandler+0x40c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a23      	ldr	r2, [pc, #140]	; (800470c <HAL_DMA_IRQHandler+0x410>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d02c      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a21      	ldr	r2, [pc, #132]	; (8004710 <HAL_DMA_IRQHandler+0x414>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d027      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a20      	ldr	r2, [pc, #128]	; (8004714 <HAL_DMA_IRQHandler+0x418>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <HAL_DMA_IRQHandler+0x41c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_DMA_IRQHandler+0x420>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_DMA_IRQHandler+0x424>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <HAL_DMA_IRQHandler+0x428>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_DMA_IRQHandler+0x42c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <HAL_DMA_IRQHandler+0x430>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_DMA_IRQHandler+0x3e2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_DMA_IRQHandler+0x434>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d12a      	bne.n	8004734 <HAL_DMA_IRQHandler+0x438>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e023      	b.n	800473c <HAL_DMA_IRQHandler+0x440>
 80046f4:	40020010 	.word	0x40020010
 80046f8:	40020028 	.word	0x40020028
 80046fc:	40020040 	.word	0x40020040
 8004700:	40020058 	.word	0x40020058
 8004704:	40020070 	.word	0x40020070
 8004708:	40020088 	.word	0x40020088
 800470c:	400200a0 	.word	0x400200a0
 8004710:	400200b8 	.word	0x400200b8
 8004714:	40020410 	.word	0x40020410
 8004718:	40020428 	.word	0x40020428
 800471c:	40020440 	.word	0x40020440
 8004720:	40020458 	.word	0x40020458
 8004724:	40020470 	.word	0x40020470
 8004728:	40020488 	.word	0x40020488
 800472c:	400204a0 	.word	0x400204a0
 8004730:	400204b8 	.word	0x400204b8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2204      	movs	r2, #4
 800474a:	409a      	lsls	r2, r3
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	f043 0204 	orr.w	r2, r3, #4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2210      	movs	r2, #16
 8004766:	409a      	lsls	r2, r3
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a6 	beq.w	80048be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a85      	ldr	r2, [pc, #532]	; (800498c <HAL_DMA_IRQHandler+0x690>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d04a      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a83      	ldr	r2, [pc, #524]	; (8004990 <HAL_DMA_IRQHandler+0x694>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d045      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a82      	ldr	r2, [pc, #520]	; (8004994 <HAL_DMA_IRQHandler+0x698>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d040      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a80      	ldr	r2, [pc, #512]	; (8004998 <HAL_DMA_IRQHandler+0x69c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d03b      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a7f      	ldr	r2, [pc, #508]	; (800499c <HAL_DMA_IRQHandler+0x6a0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d036      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7d      	ldr	r2, [pc, #500]	; (80049a0 <HAL_DMA_IRQHandler+0x6a4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d031      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7c      	ldr	r2, [pc, #496]	; (80049a4 <HAL_DMA_IRQHandler+0x6a8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d02c      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a7a      	ldr	r2, [pc, #488]	; (80049a8 <HAL_DMA_IRQHandler+0x6ac>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d027      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a79      	ldr	r2, [pc, #484]	; (80049ac <HAL_DMA_IRQHandler+0x6b0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d022      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a77      	ldr	r2, [pc, #476]	; (80049b0 <HAL_DMA_IRQHandler+0x6b4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01d      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a76      	ldr	r2, [pc, #472]	; (80049b4 <HAL_DMA_IRQHandler+0x6b8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d018      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a74      	ldr	r2, [pc, #464]	; (80049b8 <HAL_DMA_IRQHandler+0x6bc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a73      	ldr	r2, [pc, #460]	; (80049bc <HAL_DMA_IRQHandler+0x6c0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a71      	ldr	r2, [pc, #452]	; (80049c0 <HAL_DMA_IRQHandler+0x6c4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a70      	ldr	r2, [pc, #448]	; (80049c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_DMA_IRQHandler+0x516>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_DMA_IRQHandler+0x6cc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10a      	bne.n	8004828 <HAL_DMA_IRQHandler+0x52c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e009      	b.n	800483c <HAL_DMA_IRQHandler+0x540>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d03e      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2210      	movs	r2, #16
 800484a:	409a      	lsls	r2, r3
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d108      	bne.n	800487e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d024      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
 800487c:	e01f      	b.n	80048be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01b      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
 800488e:	e016      	b.n	80048be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0208 	bic.w	r2, r2, #8
 80048ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2220      	movs	r2, #32
 80048c8:	409a      	lsls	r2, r3
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8110 	beq.w	8004af4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	; (800498c <HAL_DMA_IRQHandler+0x690>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d04a      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HAL_DMA_IRQHandler+0x694>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d045      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a29      	ldr	r2, [pc, #164]	; (8004994 <HAL_DMA_IRQHandler+0x698>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d040      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a28      	ldr	r2, [pc, #160]	; (8004998 <HAL_DMA_IRQHandler+0x69c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d03b      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a26      	ldr	r2, [pc, #152]	; (800499c <HAL_DMA_IRQHandler+0x6a0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d036      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <HAL_DMA_IRQHandler+0x6a4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d031      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <HAL_DMA_IRQHandler+0x6a8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d02c      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_DMA_IRQHandler+0x6ac>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d027      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_DMA_IRQHandler+0x6b0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d022      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_DMA_IRQHandler+0x6b4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d01d      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_DMA_IRQHandler+0x6b8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_DMA_IRQHandler+0x6bc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_DMA_IRQHandler+0x6c0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_DMA_IRQHandler+0x6c4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_DMA_IRQHandler+0x6c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_DMA_IRQHandler+0x678>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_DMA_IRQHandler+0x6cc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d12b      	bne.n	80049cc <HAL_DMA_IRQHandler+0x6d0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e02a      	b.n	80049e0 <HAL_DMA_IRQHandler+0x6e4>
 800498a:	bf00      	nop
 800498c:	40020010 	.word	0x40020010
 8004990:	40020028 	.word	0x40020028
 8004994:	40020040 	.word	0x40020040
 8004998:	40020058 	.word	0x40020058
 800499c:	40020070 	.word	0x40020070
 80049a0:	40020088 	.word	0x40020088
 80049a4:	400200a0 	.word	0x400200a0
 80049a8:	400200b8 	.word	0x400200b8
 80049ac:	40020410 	.word	0x40020410
 80049b0:	40020428 	.word	0x40020428
 80049b4:	40020440 	.word	0x40020440
 80049b8:	40020458 	.word	0x40020458
 80049bc:	40020470 	.word	0x40020470
 80049c0:	40020488 	.word	0x40020488
 80049c4:	400204a0 	.word	0x400204a0
 80049c8:	400204b8 	.word	0x400204b8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8087 	beq.w	8004af4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2220      	movs	r2, #32
 80049f0:	409a      	lsls	r2, r3
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d139      	bne.n	8004a76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0216 	bic.w	r2, r2, #22
 8004a10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <HAL_DMA_IRQHandler+0x736>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0208 	bic.w	r2, r2, #8
 8004a40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	223f      	movs	r2, #63	; 0x3f
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 834a 	beq.w	8005100 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
          }
          return;
 8004a74:	e344      	b.n	8005100 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02c      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
 8004aa2:	e027      	b.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e01e      	b.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0210 	bic.w	r2, r2, #16
 8004ad2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8306 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8088 	beq.w	8004c1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a7a      	ldr	r2, [pc, #488]	; (8004d04 <HAL_DMA_IRQHandler+0xa08>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04a      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a79      	ldr	r2, [pc, #484]	; (8004d08 <HAL_DMA_IRQHandler+0xa0c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d045      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a77      	ldr	r2, [pc, #476]	; (8004d0c <HAL_DMA_IRQHandler+0xa10>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d040      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a76      	ldr	r2, [pc, #472]	; (8004d10 <HAL_DMA_IRQHandler+0xa14>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d03b      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a74      	ldr	r2, [pc, #464]	; (8004d14 <HAL_DMA_IRQHandler+0xa18>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d036      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a73      	ldr	r2, [pc, #460]	; (8004d18 <HAL_DMA_IRQHandler+0xa1c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d031      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a71      	ldr	r2, [pc, #452]	; (8004d1c <HAL_DMA_IRQHandler+0xa20>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d02c      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a70      	ldr	r2, [pc, #448]	; (8004d20 <HAL_DMA_IRQHandler+0xa24>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d027      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a6e      	ldr	r2, [pc, #440]	; (8004d24 <HAL_DMA_IRQHandler+0xa28>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d022      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6d      	ldr	r2, [pc, #436]	; (8004d28 <HAL_DMA_IRQHandler+0xa2c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01d      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6b      	ldr	r2, [pc, #428]	; (8004d2c <HAL_DMA_IRQHandler+0xa30>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6a      	ldr	r2, [pc, #424]	; (8004d30 <HAL_DMA_IRQHandler+0xa34>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a68      	ldr	r2, [pc, #416]	; (8004d34 <HAL_DMA_IRQHandler+0xa38>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a67      	ldr	r2, [pc, #412]	; (8004d38 <HAL_DMA_IRQHandler+0xa3c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <HAL_DMA_IRQHandler+0xa40>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x8b8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a64      	ldr	r2, [pc, #400]	; (8004d40 <HAL_DMA_IRQHandler+0xa44>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <HAL_DMA_IRQHandler+0x8ca>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e007      	b.n	8004bd6 <HAL_DMA_IRQHandler+0x8da>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d307      	bcc.n	8004bf2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f2      	bne.n	8004bd6 <HAL_DMA_IRQHandler+0x8da>
 8004bf0:	e000      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bf2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2203      	movs	r2, #3
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c0a:	e003      	b.n	8004c14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8272 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
 8004c2e:	e26c      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a43      	ldr	r2, [pc, #268]	; (8004d44 <HAL_DMA_IRQHandler+0xa48>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d022      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a42      	ldr	r2, [pc, #264]	; (8004d48 <HAL_DMA_IRQHandler+0xa4c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01d      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a40      	ldr	r2, [pc, #256]	; (8004d4c <HAL_DMA_IRQHandler+0xa50>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d018      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3f      	ldr	r2, [pc, #252]	; (8004d50 <HAL_DMA_IRQHandler+0xa54>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3d      	ldr	r2, [pc, #244]	; (8004d54 <HAL_DMA_IRQHandler+0xa58>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3c      	ldr	r2, [pc, #240]	; (8004d58 <HAL_DMA_IRQHandler+0xa5c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3a      	ldr	r2, [pc, #232]	; (8004d5c <HAL_DMA_IRQHandler+0xa60>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x984>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a39      	ldr	r2, [pc, #228]	; (8004d60 <HAL_DMA_IRQHandler+0xa64>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d101      	bne.n	8004c84 <HAL_DMA_IRQHandler+0x988>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_DMA_IRQHandler+0x98a>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 823f 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80cd 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xb48>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80c7 	beq.w	8004e44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d049      	beq.n	8004d64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8210 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cec:	e20a      	b.n	8005104 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8206 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d00:	e200      	b.n	8005104 <HAL_DMA_IRQHandler+0xe08>
 8004d02:	bf00      	nop
 8004d04:	40020010 	.word	0x40020010
 8004d08:	40020028 	.word	0x40020028
 8004d0c:	40020040 	.word	0x40020040
 8004d10:	40020058 	.word	0x40020058
 8004d14:	40020070 	.word	0x40020070
 8004d18:	40020088 	.word	0x40020088
 8004d1c:	400200a0 	.word	0x400200a0
 8004d20:	400200b8 	.word	0x400200b8
 8004d24:	40020410 	.word	0x40020410
 8004d28:	40020428 	.word	0x40020428
 8004d2c:	40020440 	.word	0x40020440
 8004d30:	40020458 	.word	0x40020458
 8004d34:	40020470 	.word	0x40020470
 8004d38:	40020488 	.word	0x40020488
 8004d3c:	400204a0 	.word	0x400204a0
 8004d40:	400204b8 	.word	0x400204b8
 8004d44:	58025408 	.word	0x58025408
 8004d48:	5802541c 	.word	0x5802541c
 8004d4c:	58025430 	.word	0x58025430
 8004d50:	58025444 	.word	0x58025444
 8004d54:	58025458 	.word	0x58025458
 8004d58:	5802546c 	.word	0x5802546c
 8004d5c:	58025480 	.word	0x58025480
 8004d60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d160      	bne.n	8004e30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7f      	ldr	r2, [pc, #508]	; (8004f70 <HAL_DMA_IRQHandler+0xc74>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d04a      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a7d      	ldr	r2, [pc, #500]	; (8004f74 <HAL_DMA_IRQHandler+0xc78>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d045      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a7c      	ldr	r2, [pc, #496]	; (8004f78 <HAL_DMA_IRQHandler+0xc7c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d040      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a7a      	ldr	r2, [pc, #488]	; (8004f7c <HAL_DMA_IRQHandler+0xc80>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d03b      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a79      	ldr	r2, [pc, #484]	; (8004f80 <HAL_DMA_IRQHandler+0xc84>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d036      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a77      	ldr	r2, [pc, #476]	; (8004f84 <HAL_DMA_IRQHandler+0xc88>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d031      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a76      	ldr	r2, [pc, #472]	; (8004f88 <HAL_DMA_IRQHandler+0xc8c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d02c      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a74      	ldr	r2, [pc, #464]	; (8004f8c <HAL_DMA_IRQHandler+0xc90>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d027      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a73      	ldr	r2, [pc, #460]	; (8004f90 <HAL_DMA_IRQHandler+0xc94>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a71      	ldr	r2, [pc, #452]	; (8004f94 <HAL_DMA_IRQHandler+0xc98>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a70      	ldr	r2, [pc, #448]	; (8004f98 <HAL_DMA_IRQHandler+0xc9c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6e      	ldr	r2, [pc, #440]	; (8004f9c <HAL_DMA_IRQHandler+0xca0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6d      	ldr	r2, [pc, #436]	; (8004fa0 <HAL_DMA_IRQHandler+0xca4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a6b      	ldr	r2, [pc, #428]	; (8004fa4 <HAL_DMA_IRQHandler+0xca8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6a      	ldr	r2, [pc, #424]	; (8004fa8 <HAL_DMA_IRQHandler+0xcac>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xb12>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a68      	ldr	r2, [pc, #416]	; (8004fac <HAL_DMA_IRQHandler+0xcb0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d108      	bne.n	8004e20 <HAL_DMA_IRQHandler+0xb24>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0208 	bic.w	r2, r2, #8
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e007      	b.n	8004e30 <HAL_DMA_IRQHandler+0xb34>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8165 	beq.w	8005104 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e42:	e15f      	b.n	8005104 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80c5 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0xce8>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80bf 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2202      	movs	r2, #2
 8004e70:	409a      	lsls	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d018      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 813a 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9c:	e134      	b.n	8005108 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8130 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb0:	e12a      	b.n	8005108 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8089 	bne.w	8004fd0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2b      	ldr	r2, [pc, #172]	; (8004f70 <HAL_DMA_IRQHandler+0xc74>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <HAL_DMA_IRQHandler+0xc78>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <HAL_DMA_IRQHandler+0xc7c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <HAL_DMA_IRQHandler+0xc80>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HAL_DMA_IRQHandler+0xc84>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <HAL_DMA_IRQHandler+0xc88>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <HAL_DMA_IRQHandler+0xc8c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a20      	ldr	r2, [pc, #128]	; (8004f8c <HAL_DMA_IRQHandler+0xc90>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <HAL_DMA_IRQHandler+0xc94>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <HAL_DMA_IRQHandler+0xc98>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <HAL_DMA_IRQHandler+0xc9c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <HAL_DMA_IRQHandler+0xca0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <HAL_DMA_IRQHandler+0xca4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <HAL_DMA_IRQHandler+0xca8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a16      	ldr	r2, [pc, #88]	; (8004fa8 <HAL_DMA_IRQHandler+0xcac>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xc62>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a14      	ldr	r2, [pc, #80]	; (8004fac <HAL_DMA_IRQHandler+0xcb0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d128      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0xcb4>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0214 	bic.w	r2, r2, #20
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e027      	b.n	8004fc0 <HAL_DMA_IRQHandler+0xcc4>
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 020a 	bic.w	r2, r2, #10
 8004fbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8097 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe2:	e091      	b.n	8005108 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	2208      	movs	r2, #8
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8088 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8082 	beq.w	800510a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a41      	ldr	r2, [pc, #260]	; (8005110 <HAL_DMA_IRQHandler+0xe14>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d04a      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a3f      	ldr	r2, [pc, #252]	; (8005114 <HAL_DMA_IRQHandler+0xe18>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d045      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a3e      	ldr	r2, [pc, #248]	; (8005118 <HAL_DMA_IRQHandler+0xe1c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d040      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3c      	ldr	r2, [pc, #240]	; (800511c <HAL_DMA_IRQHandler+0xe20>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d03b      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <HAL_DMA_IRQHandler+0xe24>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d036      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a39      	ldr	r2, [pc, #228]	; (8005124 <HAL_DMA_IRQHandler+0xe28>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d031      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <HAL_DMA_IRQHandler+0xe2c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d02c      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a36      	ldr	r2, [pc, #216]	; (800512c <HAL_DMA_IRQHandler+0xe30>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d027      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a35      	ldr	r2, [pc, #212]	; (8005130 <HAL_DMA_IRQHandler+0xe34>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d022      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a33      	ldr	r2, [pc, #204]	; (8005134 <HAL_DMA_IRQHandler+0xe38>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01d      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a32      	ldr	r2, [pc, #200]	; (8005138 <HAL_DMA_IRQHandler+0xe3c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a30      	ldr	r2, [pc, #192]	; (800513c <HAL_DMA_IRQHandler+0xe40>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2f      	ldr	r2, [pc, #188]	; (8005140 <HAL_DMA_IRQHandler+0xe44>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <HAL_DMA_IRQHandler+0xe48>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <HAL_DMA_IRQHandler+0xe4c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xdaa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2a      	ldr	r2, [pc, #168]	; (800514c <HAL_DMA_IRQHandler+0xe50>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <HAL_DMA_IRQHandler+0xdbc>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 021c 	bic.w	r2, r2, #28
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e007      	b.n	80050c8 <HAL_DMA_IRQHandler+0xdcc>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020e 	bic.w	r2, r2, #14
 80050c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	2201      	movs	r2, #1
 80050d2:	409a      	lsls	r2, r3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
 80050fe:	e004      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005100:	bf00      	nop
 8005102:	e002      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005104:	bf00      	nop
 8005106:	e000      	b.n	800510a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005108:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40020010 	.word	0x40020010
 8005114:	40020028 	.word	0x40020028
 8005118:	40020040 	.word	0x40020040
 800511c:	40020058 	.word	0x40020058
 8005120:	40020070 	.word	0x40020070
 8005124:	40020088 	.word	0x40020088
 8005128:	400200a0 	.word	0x400200a0
 800512c:	400200b8 	.word	0x400200b8
 8005130:	40020410 	.word	0x40020410
 8005134:	40020428 	.word	0x40020428
 8005138:	40020440 	.word	0x40020440
 800513c:	40020458 	.word	0x40020458
 8005140:	40020470 	.word	0x40020470
 8005144:	40020488 	.word	0x40020488
 8005148:	400204a0 	.word	0x400204a0
 800514c:	400204b8 	.word	0x400204b8

08005150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a42      	ldr	r2, [pc, #264]	; (8005268 <DMA_CalcBaseAndBitshift+0x118>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d04a      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a41      	ldr	r2, [pc, #260]	; (800526c <DMA_CalcBaseAndBitshift+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d045      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3f      	ldr	r2, [pc, #252]	; (8005270 <DMA_CalcBaseAndBitshift+0x120>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d040      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3e      	ldr	r2, [pc, #248]	; (8005274 <DMA_CalcBaseAndBitshift+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d03b      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a3c      	ldr	r2, [pc, #240]	; (8005278 <DMA_CalcBaseAndBitshift+0x128>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d036      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a3b      	ldr	r2, [pc, #236]	; (800527c <DMA_CalcBaseAndBitshift+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d031      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a39      	ldr	r2, [pc, #228]	; (8005280 <DMA_CalcBaseAndBitshift+0x130>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d02c      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a38      	ldr	r2, [pc, #224]	; (8005284 <DMA_CalcBaseAndBitshift+0x134>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d027      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a36      	ldr	r2, [pc, #216]	; (8005288 <DMA_CalcBaseAndBitshift+0x138>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a35      	ldr	r2, [pc, #212]	; (800528c <DMA_CalcBaseAndBitshift+0x13c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d01d      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a33      	ldr	r2, [pc, #204]	; (8005290 <DMA_CalcBaseAndBitshift+0x140>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a32      	ldr	r2, [pc, #200]	; (8005294 <DMA_CalcBaseAndBitshift+0x144>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a30      	ldr	r2, [pc, #192]	; (8005298 <DMA_CalcBaseAndBitshift+0x148>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2f      	ldr	r2, [pc, #188]	; (800529c <DMA_CalcBaseAndBitshift+0x14c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2d      	ldr	r2, [pc, #180]	; (80052a0 <DMA_CalcBaseAndBitshift+0x150>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <DMA_CalcBaseAndBitshift+0x154>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <DMA_CalcBaseAndBitshift+0xac>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <DMA_CalcBaseAndBitshift+0xae>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d024      	beq.n	800524c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3b10      	subs	r3, #16
 800520a:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <DMA_CalcBaseAndBitshift+0x158>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	4a24      	ldr	r2, [pc, #144]	; (80052ac <DMA_CalcBaseAndBitshift+0x15c>)
 800521c:	5cd3      	ldrb	r3, [r2, r3]
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d908      	bls.n	800523c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	4b1f      	ldr	r3, [pc, #124]	; (80052b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005232:	4013      	ands	r3, r2
 8005234:	1d1a      	adds	r2, r3, #4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	659a      	str	r2, [r3, #88]	; 0x58
 800523a:	e00d      	b.n	8005258 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6593      	str	r3, [r2, #88]	; 0x58
 800524a:	e005      	b.n	8005258 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
 80052a8:	aaaaaaab 	.word	0xaaaaaaab
 80052ac:	0800d35c 	.word	0x0800d35c
 80052b0:	fffffc00 	.word	0xfffffc00

080052b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d120      	bne.n	800530a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d858      	bhi.n	8005382 <DMA_CheckFifoParam+0xce>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <DMA_CheckFifoParam+0x24>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052e9 	.word	0x080052e9
 80052dc:	080052fb 	.word	0x080052fb
 80052e0:	080052e9 	.word	0x080052e9
 80052e4:	08005383 	.word	0x08005383
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d048      	beq.n	8005386 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052f8:	e045      	b.n	8005386 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005302:	d142      	bne.n	800538a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005308:	e03f      	b.n	800538a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005312:	d123      	bne.n	800535c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	2b03      	cmp	r3, #3
 800531a:	d838      	bhi.n	800538e <DMA_CheckFifoParam+0xda>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <DMA_CheckFifoParam+0x70>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005335 	.word	0x08005335
 8005328:	0800533b 	.word	0x0800533b
 800532c:	08005335 	.word	0x08005335
 8005330:	0800534d 	.word	0x0800534d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
        break;
 8005338:	e030      	b.n	800539c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d025      	beq.n	8005392 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800534a:	e022      	b.n	8005392 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005354:	d11f      	bne.n	8005396 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800535a:	e01c      	b.n	8005396 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	2b02      	cmp	r3, #2
 8005362:	d902      	bls.n	800536a <DMA_CheckFifoParam+0xb6>
 8005364:	2b03      	cmp	r3, #3
 8005366:	d003      	beq.n	8005370 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005368:	e018      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
        break;
 800536e:	e015      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00e      	beq.n	800539a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
    break;
 8005380:	e00b      	b.n	800539a <DMA_CheckFifoParam+0xe6>
        break;
 8005382:	bf00      	nop
 8005384:	e00a      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 8005386:	bf00      	nop
 8005388:	e008      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 800538a:	bf00      	nop
 800538c:	e006      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 800538e:	bf00      	nop
 8005390:	e004      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <DMA_CheckFifoParam+0xe8>
        break;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <DMA_CheckFifoParam+0xe8>
    break;
 800539a:	bf00      	nop
    }
  }

  return status;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop

080053ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a38      	ldr	r2, [pc, #224]	; (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a36      	ldr	r2, [pc, #216]	; (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a35      	ldr	r2, [pc, #212]	; (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a33      	ldr	r2, [pc, #204]	; (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a32      	ldr	r2, [pc, #200]	; (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a30      	ldr	r2, [pc, #192]	; (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2f      	ldr	r2, [pc, #188]	; (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2d      	ldr	r2, [pc, #180]	; (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	3b08      	subs	r3, #8
 800541c:	4a28      	ldr	r2, [pc, #160]	; (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a24      	ldr	r2, [pc, #144]	; (80054c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005438:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2201      	movs	r2, #1
 8005442:	409a      	lsls	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005448:	e024      	b.n	8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	3b10      	subs	r3, #16
 8005452:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4a1c      	ldr	r2, [pc, #112]	; (80054d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d806      	bhi.n	8005472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a1b      	ldr	r2, [pc, #108]	; (80054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d902      	bls.n	8005472 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3308      	adds	r3, #8
 8005470:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a16      	ldr	r2, [pc, #88]	; (80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005484:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2201      	movs	r2, #1
 800548e:	409a      	lsls	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	58025408 	.word	0x58025408
 80054a4:	5802541c 	.word	0x5802541c
 80054a8:	58025430 	.word	0x58025430
 80054ac:	58025444 	.word	0x58025444
 80054b0:	58025458 	.word	0x58025458
 80054b4:	5802546c 	.word	0x5802546c
 80054b8:	58025480 	.word	0x58025480
 80054bc:	58025494 	.word	0x58025494
 80054c0:	cccccccd 	.word	0xcccccccd
 80054c4:	16009600 	.word	0x16009600
 80054c8:	58025880 	.word	0x58025880
 80054cc:	aaaaaaab 	.word	0xaaaaaaab
 80054d0:	400204b8 	.word	0x400204b8
 80054d4:	4002040f 	.word	0x4002040f
 80054d8:	10008200 	.word	0x10008200
 80054dc:	40020880 	.word	0x40020880

080054e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04a      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d847      	bhi.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a25      	ldr	r2, [pc, #148]	; (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a24      	ldr	r2, [pc, #144]	; (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d01d      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a15      	ldr	r2, [pc, #84]	; (80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005568:	671a      	str	r2, [r3, #112]	; 0x70
 800556a:	e009      	b.n	8005580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800557e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	2201      	movs	r2, #1
 8005586:	409a      	lsls	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	58025408 	.word	0x58025408
 800559c:	5802541c 	.word	0x5802541c
 80055a0:	58025430 	.word	0x58025430
 80055a4:	58025444 	.word	0x58025444
 80055a8:	58025458 	.word	0x58025458
 80055ac:	5802546c 	.word	0x5802546c
 80055b0:	58025480 	.word	0x58025480
 80055b4:	58025494 	.word	0x58025494
 80055b8:	1600963f 	.word	0x1600963f
 80055bc:	58025940 	.word	0x58025940
 80055c0:	1000823f 	.word	0x1000823f
 80055c4:	40020940 	.word	0x40020940

080055c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0cf      	b.n	800577a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2223      	movs	r2, #35	; 0x23
 80055e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fd f8d1 	bl	8002794 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f2:	4b64      	ldr	r3, [pc, #400]	; (8005784 <HAL_ETH_Init+0x1bc>)
 80055f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055f8:	4a62      	ldr	r2, [pc, #392]	; (8005784 <HAL_ETH_Init+0x1bc>)
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005602:	4b60      	ldr	r3, [pc, #384]	; (8005784 <HAL_ETH_Init+0x1bc>)
 8005604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	7a1b      	ldrb	r3, [r3, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005618:	2000      	movs	r0, #0
 800561a:	f7fd fc8b 	bl	8002f34 <HAL_SYSCFG_ETHInterfaceSelect>
 800561e:	e003      	b.n	8005628 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005620:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005624:	f7fd fc86 	bl	8002f34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005628:	4b57      	ldr	r3, [pc, #348]	; (8005788 <HAL_ETH_Init+0x1c0>)
 800562a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005642:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005644:	f7fd fc3a 	bl	8002ebc <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800564a:	e011      	b.n	8005670 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800564c:	f7fd fc36 	bl	8002ebc <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800565a:	d909      	bls.n	8005670 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2204      	movs	r2, #4
 8005660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	22e0      	movs	r2, #224	; 0xe0
 8005668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e084      	b.n	800577a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e4      	bne.n	800564c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f886 	bl	8005794 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005688:	f001 fefc 	bl	8007484 <HAL_RCC_GetHCLKFreq>
 800568c:	4603      	mov	r3, r0
 800568e:	4a3f      	ldr	r2, [pc, #252]	; (800578c <HAL_ETH_Init+0x1c4>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	0c9a      	lsrs	r2, r3, #18
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3a01      	subs	r2, #1
 800569c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa71 	bl	8005b88 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80056b2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	22e0      	movs	r2, #224	; 0xe0
 80056de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e049      	b.n	800577a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_ETH_Init+0x1c8>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6952      	ldr	r2, [r2, #20]
 80056fa:	0051      	lsls	r1, r2, #1
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	430b      	orrs	r3, r1
 8005702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005706:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fad9 	bl	8005cc2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb1f 	bl	8005d54 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	3305      	adds	r3, #5
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	3304      	adds	r3, #4
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	4619      	mov	r1, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	3303      	adds	r3, #3
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	061a      	lsls	r2, r3, #24
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	3302      	adds	r3, #2
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	3301      	adds	r3, #1
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005754:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005762:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005764:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2210      	movs	r2, #16
 8005774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
 8005788:	58000400 	.word	0x58000400
 800578c:	431bde83 	.word	0x431bde83
 8005790:	ffff8001 	.word	0xffff8001

08005794 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80057ae:	f001 fe69 	bl	8007484 <HAL_RCC_GetHCLKFreq>
 80057b2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d908      	bls.n	80057ce <HAL_ETH_SetMDIOClockRange+0x3a>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d804      	bhi.n	80057ce <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e027      	b.n	800581e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d908      	bls.n	80057e8 <HAL_ETH_SetMDIOClockRange+0x54>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a17      	ldr	r2, [pc, #92]	; (8005838 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d204      	bcs.n	80057e8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e01a      	b.n	800581e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d303      	bcc.n	80057f8 <HAL_ETH_SetMDIOClockRange+0x64>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a12      	ldr	r2, [pc, #72]	; (800583c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d911      	bls.n	800581c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4a10      	ldr	r2, [pc, #64]	; (800583c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d908      	bls.n	8005812 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d804      	bhi.n	8005812 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	e005      	b.n	800581e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e000      	b.n	800581e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800581c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	01312cff 	.word	0x01312cff
 8005834:	02160ebf 	.word	0x02160ebf
 8005838:	03938700 	.word	0x03938700
 800583c:	05f5e0ff 	.word	0x05f5e0ff
 8005840:	08f0d17f 	.word	0x08f0d17f

08005844 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800585e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	7b1b      	ldrb	r3, [r3, #12]
 8005864:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	7b5b      	ldrb	r3, [r3, #13]
 800586c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800586e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	7b9b      	ldrb	r3, [r3, #14]
 8005874:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005876:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	7bdb      	ldrb	r3, [r3, #15]
 800587c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800587e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	7c12      	ldrb	r2, [r2, #16]
 8005884:	2a00      	cmp	r2, #0
 8005886:	d102      	bne.n	800588e <ETH_SetMACConfig+0x4a>
 8005888:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800588c:	e000      	b.n	8005890 <ETH_SetMACConfig+0x4c>
 800588e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005890:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	7c52      	ldrb	r2, [r2, #17]
 8005896:	2a00      	cmp	r2, #0
 8005898:	d102      	bne.n	80058a0 <ETH_SetMACConfig+0x5c>
 800589a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800589e:	e000      	b.n	80058a2 <ETH_SetMACConfig+0x5e>
 80058a0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80058a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	7c9b      	ldrb	r3, [r3, #18]
 80058a8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80058aa:	431a      	orrs	r2, r3
               macconf->Speed |
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80058b0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80058b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	7f1b      	ldrb	r3, [r3, #28]
 80058bc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80058be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	7f5b      	ldrb	r3, [r3, #29]
 80058c4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80058c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	7f92      	ldrb	r2, [r2, #30]
 80058cc:	2a00      	cmp	r2, #0
 80058ce:	d102      	bne.n	80058d6 <ETH_SetMACConfig+0x92>
 80058d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058d4:	e000      	b.n	80058d8 <ETH_SetMACConfig+0x94>
 80058d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80058d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	7fdb      	ldrb	r3, [r3, #31]
 80058de:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80058e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	d102      	bne.n	80058f2 <ETH_SetMACConfig+0xae>
 80058ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f0:	e000      	b.n	80058f4 <ETH_SetMACConfig+0xb0>
 80058f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80058f4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80058fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005902:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005904:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <ETH_SetMACConfig+0x22c>)
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	430b      	orrs	r3, r1
 8005920:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800592e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005930:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005938:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800593a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005942:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005944:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800594c:	2a00      	cmp	r2, #0
 800594e:	d102      	bne.n	8005956 <ETH_SetMACConfig+0x112>
 8005950:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005954:	e000      	b.n	8005958 <ETH_SetMACConfig+0x114>
 8005956:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005958:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4b42      	ldr	r3, [pc, #264]	; (8005a74 <ETH_SetMACConfig+0x230>)
 800596a:	4013      	ands	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	68f9      	ldr	r1, [r7, #12]
 8005972:	430b      	orrs	r3, r1
 8005974:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800597c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	4b3a      	ldr	r3, [pc, #232]	; (8005a78 <ETH_SetMACConfig+0x234>)
 800598e:	4013      	ands	r3, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	430b      	orrs	r3, r1
 8005998:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80059a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80059a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	d101      	bne.n	80059b6 <ETH_SetMACConfig+0x172>
 80059b2:	2280      	movs	r2, #128	; 0x80
 80059b4:	e000      	b.n	80059b8 <ETH_SetMACConfig+0x174>
 80059b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80059b8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059ca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80059ce:	4013      	ands	r3, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	68f9      	ldr	r1, [r7, #12]
 80059d6:	430b      	orrs	r3, r1
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80059e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80059e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f6:	f023 0103 	bic.w	r1, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005a0e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	d101      	bne.n	8005a32 <ETH_SetMACConfig+0x1ee>
 8005a2e:	2240      	movs	r2, #64	; 0x40
 8005a30:	e000      	b.n	8005a34 <ETH_SetMACConfig+0x1f0>
 8005a32:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005a34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005a3c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005a46:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005a54:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	00048083 	.word	0x00048083
 8005a74:	c0f88000 	.word	0xc0f88000
 8005a78:	fffffef0 	.word	0xfffffef0

08005a7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <ETH_SetDMAConfig+0xf8>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	6811      	ldr	r1, [r2, #0]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005aa2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	791b      	ldrb	r3, [r3, #4]
 8005aa8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005aae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	7b1b      	ldrb	r3, [r3, #12]
 8005ab4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	4b2c      	ldr	r3, [pc, #176]	; (8005b78 <ETH_SetDMAConfig+0xfc>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ad4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	7b5b      	ldrb	r3, [r3, #13]
 8005ada:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005af0:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <ETH_SetDMAConfig+0x100>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	430b      	orrs	r3, r1
 8005afc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b00:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	7d1b      	ldrb	r3, [r3, #20]
 8005b0c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005b0e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	7f5b      	ldrb	r3, [r3, #29]
 8005b14:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b22:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005b26:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <ETH_SetDMAConfig+0x104>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b36:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	7f1b      	ldrb	r3, [r3, #28]
 8005b3e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b50:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <ETH_SetDMAConfig+0x108>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b64:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	ffff87fd 	.word	0xffff87fd
 8005b78:	ffff2ffe 	.word	0xffff2ffe
 8005b7c:	fffec000 	.word	0xfffec000
 8005b80:	ffc0efef 	.word	0xffc0efef
 8005b84:	7fc0ffff 	.word	0x7fc0ffff

08005b88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b0a4      	sub	sp, #144	; 0x90
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005b96:	2300      	movs	r3, #0
 8005b98:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bc8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005be0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005be4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005bec:	2300      	movs	r3, #0
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005c02:	2300      	movs	r3, #0
 8005c04:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005c20:	2320      	movs	r3, #32
 8005c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005c32:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005c38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c3c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005c44:	2302      	movs	r3, #2
 8005c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005c62:	2300      	movs	r3, #0
 8005c64:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff fde6 	bl	8005844 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005c92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c96:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005c9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ca0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005ca8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fee1 	bl	8005a7c <ETH_SetDMAConfig>
}
 8005cba:	bf00      	nop
 8005cbc:	3790      	adds	r7, #144	; 0x90
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e01d      	b.n	8005d0c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68d9      	ldr	r1, [r3, #12]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	440b      	add	r3, r1
 8005ce0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	3206      	adds	r2, #6
 8005d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d9de      	bls.n	8005cd0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d20:	461a      	mov	r2, r3
 8005d22:	2303      	movs	r3, #3
 8005d24:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d34:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e023      	b.n	8005daa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6919      	ldr	r1, [r3, #16]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	440b      	add	r3, r1
 8005d72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2200      	movs	r2, #0
 8005d96:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	3212      	adds	r2, #18
 8005da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d9d8      	bls.n	8005d62 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2303      	movs	r3, #3
 8005dda:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b089      	sub	sp, #36	; 0x24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e1e:	4b89      	ldr	r3, [pc, #548]	; (8006044 <HAL_GPIO_Init+0x234>)
 8005e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e22:	e194      	b.n	800614e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	2101      	movs	r1, #1
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e30:	4013      	ands	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8186 	beq.w	8006148 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d005      	beq.n	8005e54 <HAL_GPIO_Init+0x44>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d130      	bne.n	8005eb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	2203      	movs	r2, #3
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43db      	mvns	r3, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4013      	ands	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 0201 	and.w	r2, r3, #1
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d017      	beq.n	8005ef2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	2203      	movs	r2, #3
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d123      	bne.n	8005f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	08da      	lsrs	r2, r3, #3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3208      	adds	r2, #8
 8005f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	220f      	movs	r2, #15
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	08da      	lsrs	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3208      	adds	r2, #8
 8005f40:	69b9      	ldr	r1, [r7, #24]
 8005f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	2203      	movs	r2, #3
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0203 	and.w	r2, r3, #3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 80e0 	beq.w	8006148 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f88:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <HAL_GPIO_Init+0x238>)
 8005f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f8e:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <HAL_GPIO_Init+0x238>)
 8005f90:	f043 0302 	orr.w	r3, r3, #2
 8005f94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f98:	4b2b      	ldr	r3, [pc, #172]	; (8006048 <HAL_GPIO_Init+0x238>)
 8005f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fa6:	4a29      	ldr	r2, [pc, #164]	; (800604c <HAL_GPIO_Init+0x23c>)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	3302      	adds	r3, #2
 8005fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	220f      	movs	r2, #15
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a20      	ldr	r2, [pc, #128]	; (8006050 <HAL_GPIO_Init+0x240>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d052      	beq.n	8006078 <HAL_GPIO_Init+0x268>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1f      	ldr	r2, [pc, #124]	; (8006054 <HAL_GPIO_Init+0x244>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d031      	beq.n	800603e <HAL_GPIO_Init+0x22e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <HAL_GPIO_Init+0x248>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d02b      	beq.n	800603a <HAL_GPIO_Init+0x22a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1d      	ldr	r2, [pc, #116]	; (800605c <HAL_GPIO_Init+0x24c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d025      	beq.n	8006036 <HAL_GPIO_Init+0x226>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <HAL_GPIO_Init+0x250>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d01f      	beq.n	8006032 <HAL_GPIO_Init+0x222>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <HAL_GPIO_Init+0x254>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d019      	beq.n	800602e <HAL_GPIO_Init+0x21e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1a      	ldr	r2, [pc, #104]	; (8006068 <HAL_GPIO_Init+0x258>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <HAL_GPIO_Init+0x21a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a19      	ldr	r2, [pc, #100]	; (800606c <HAL_GPIO_Init+0x25c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00d      	beq.n	8006026 <HAL_GPIO_Init+0x216>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_GPIO_Init+0x260>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <HAL_GPIO_Init+0x212>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a17      	ldr	r2, [pc, #92]	; (8006074 <HAL_GPIO_Init+0x264>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d101      	bne.n	800601e <HAL_GPIO_Init+0x20e>
 800601a:	2309      	movs	r3, #9
 800601c:	e02d      	b.n	800607a <HAL_GPIO_Init+0x26a>
 800601e:	230a      	movs	r3, #10
 8006020:	e02b      	b.n	800607a <HAL_GPIO_Init+0x26a>
 8006022:	2308      	movs	r3, #8
 8006024:	e029      	b.n	800607a <HAL_GPIO_Init+0x26a>
 8006026:	2307      	movs	r3, #7
 8006028:	e027      	b.n	800607a <HAL_GPIO_Init+0x26a>
 800602a:	2306      	movs	r3, #6
 800602c:	e025      	b.n	800607a <HAL_GPIO_Init+0x26a>
 800602e:	2305      	movs	r3, #5
 8006030:	e023      	b.n	800607a <HAL_GPIO_Init+0x26a>
 8006032:	2304      	movs	r3, #4
 8006034:	e021      	b.n	800607a <HAL_GPIO_Init+0x26a>
 8006036:	2303      	movs	r3, #3
 8006038:	e01f      	b.n	800607a <HAL_GPIO_Init+0x26a>
 800603a:	2302      	movs	r3, #2
 800603c:	e01d      	b.n	800607a <HAL_GPIO_Init+0x26a>
 800603e:	2301      	movs	r3, #1
 8006040:	e01b      	b.n	800607a <HAL_GPIO_Init+0x26a>
 8006042:	bf00      	nop
 8006044:	58000080 	.word	0x58000080
 8006048:	58024400 	.word	0x58024400
 800604c:	58000400 	.word	0x58000400
 8006050:	58020000 	.word	0x58020000
 8006054:	58020400 	.word	0x58020400
 8006058:	58020800 	.word	0x58020800
 800605c:	58020c00 	.word	0x58020c00
 8006060:	58021000 	.word	0x58021000
 8006064:	58021400 	.word	0x58021400
 8006068:	58021800 	.word	0x58021800
 800606c:	58021c00 	.word	0x58021c00
 8006070:	58022000 	.word	0x58022000
 8006074:	58022400 	.word	0x58022400
 8006078:	2300      	movs	r3, #0
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	f002 0203 	and.w	r2, r2, #3
 8006080:	0092      	lsls	r2, r2, #2
 8006082:	4093      	lsls	r3, r2
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800608a:	4938      	ldr	r1, [pc, #224]	; (800616c <HAL_GPIO_Init+0x35c>)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	089b      	lsrs	r3, r3, #2
 8006090:	3302      	adds	r3, #2
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4013      	ands	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	fa22 f303 	lsr.w	r3, r2, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	f47f ae63 	bne.w	8005e24 <HAL_GPIO_Init+0x14>
  }
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	3724      	adds	r7, #36	; 0x24
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	58000400 	.word	0x58000400

08006170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e001      	b.n	8006192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
 80061ac:	4613      	mov	r3, r2
 80061ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061bc:	e003      	b.n	80061c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061be:	887b      	ldrh	r3, [r7, #2]
 80061c0:	041a      	lsls	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	619a      	str	r2, [r3, #24]
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061e4:	887a      	ldrh	r2, [r7, #2]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4013      	ands	r3, r2
 80061ea:	041a      	lsls	r2, r3, #16
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	43d9      	mvns	r1, r3
 80061f0:	887b      	ldrh	r3, [r7, #2]
 80061f2:	400b      	ands	r3, r1
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	619a      	str	r2, [r3, #24]
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006210:	4a08      	ldr	r2, [pc, #32]	; (8006234 <HAL_HSEM_FastTake+0x2c>)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3320      	adds	r3, #32
 8006216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800621a:	4a07      	ldr	r2, [pc, #28]	; (8006238 <HAL_HSEM_FastTake+0x30>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d101      	bne.n	8006224 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	58026400 	.word	0x58026400
 8006238:	80000300 	.word	0x80000300

0800623c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006246:	4906      	ldr	r1, [pc, #24]	; (8006260 <HAL_HSEM_Release+0x24>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	58026400 	.word	0x58026400

08006264 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006266:	b08f      	sub	sp, #60	; 0x3c
 8006268:	af0a      	add	r7, sp, #40	; 0x28
 800626a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e116      	b.n	80064a4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fc fc8b 	bl	8002bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2203      	movs	r2, #3
 800629a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f004 fded 	bl	800ae94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	687e      	ldr	r6, [r7, #4]
 80062c2:	466d      	mov	r5, sp
 80062c4:	f106 0410 	add.w	r4, r6, #16
 80062c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80062d8:	1d33      	adds	r3, r6, #4
 80062da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062dc:	6838      	ldr	r0, [r7, #0]
 80062de:	f004 fd6b 	bl	800adb8 <USB_CoreInit>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0d7      	b.n	80064a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f004 fddb 	bl	800aeb6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
 8006304:	e04a      	b.n	800639c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006306:	7bfa      	ldrb	r2, [r7, #15]
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	333d      	adds	r3, #61	; 0x3d
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800631a:	7bfa      	ldrb	r2, [r7, #15]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	333c      	adds	r3, #60	; 0x3c
 800632a:	7bfa      	ldrb	r2, [r7, #15]
 800632c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800632e:	7bfa      	ldrb	r2, [r7, #15]
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	b298      	uxth	r0, r3
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	3344      	adds	r3, #68	; 0x44
 8006342:	4602      	mov	r2, r0
 8006344:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006346:	7bfa      	ldrb	r2, [r7, #15]
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	3340      	adds	r3, #64	; 0x40
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800635a:	7bfa      	ldrb	r2, [r7, #15]
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	3348      	adds	r3, #72	; 0x48
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800636e:	7bfa      	ldrb	r2, [r7, #15]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	334c      	adds	r3, #76	; 0x4c
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006382:	7bfa      	ldrb	r2, [r7, #15]
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	440b      	add	r3, r1
 8006390:	3354      	adds	r3, #84	; 0x54
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	3301      	adds	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	7bfa      	ldrb	r2, [r7, #15]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d3af      	bcc.n	8006306 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063a6:	2300      	movs	r3, #0
 80063a8:	73fb      	strb	r3, [r7, #15]
 80063aa:	e044      	b.n	8006436 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80063d4:	7bfa      	ldrb	r2, [r7, #15]
 80063d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063d8:	7bfa      	ldrb	r2, [r7, #15]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063ee:	7bfa      	ldrb	r2, [r7, #15]
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006404:	7bfa      	ldrb	r2, [r7, #15]
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	4613      	mov	r3, r2
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	440b      	add	r3, r1
 8006412:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800641a:	7bfa      	ldrb	r2, [r7, #15]
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	3301      	adds	r3, #1
 8006434:	73fb      	strb	r3, [r7, #15]
 8006436:	7bfa      	ldrb	r2, [r7, #15]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d3b5      	bcc.n	80063ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	687e      	ldr	r6, [r7, #4]
 8006448:	466d      	mov	r5, sp
 800644a:	f106 0410 	add.w	r4, r6, #16
 800644e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800645a:	e885 0003 	stmia.w	r5, {r0, r1}
 800645e:	1d33      	adds	r3, r6, #4
 8006460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006462:	6838      	ldr	r0, [r7, #0]
 8006464:	f004 fd74 	bl	800af50 <USB_DevInit>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e014      	b.n	80064a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b01      	cmp	r3, #1
 8006490:	d102      	bne.n	8006498 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f80a 	bl	80064ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f004 ff32 	bl	800b306 <USB_DevDisconnect>

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	10000003 	.word	0x10000003

080064f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80064fc:	4b29      	ldr	r3, [pc, #164]	; (80065a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	2b06      	cmp	r3, #6
 8006506:	d00a      	beq.n	800651e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006508:	4b26      	ldr	r3, [pc, #152]	; (80065a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d001      	beq.n	800651a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e040      	b.n	800659c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	e03e      	b.n	800659c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800651e:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006526:	491f      	ldr	r1, [pc, #124]	; (80065a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4313      	orrs	r3, r2
 800652c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800652e:	f7fc fcc5 	bl	8002ebc <HAL_GetTick>
 8006532:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006534:	e009      	b.n	800654a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006536:	f7fc fcc1 	bl	8002ebc <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006544:	d901      	bls.n	800654a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e028      	b.n	800659c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800654a:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006556:	d1ee      	bne.n	8006536 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b1e      	cmp	r3, #30
 800655c:	d008      	beq.n	8006570 <HAL_PWREx_ConfigSupply+0x7c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b2e      	cmp	r3, #46	; 0x2e
 8006562:	d005      	beq.n	8006570 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b1d      	cmp	r3, #29
 8006568:	d002      	beq.n	8006570 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b2d      	cmp	r3, #45	; 0x2d
 800656e:	d114      	bne.n	800659a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006570:	f7fc fca4 	bl	8002ebc <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006576:	e009      	b.n	800658c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006578:	f7fc fca0 	bl	8002ebc <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006586:	d901      	bls.n	800658c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e007      	b.n	800659c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006598:	d1ee      	bne.n	8006578 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	58024800 	.word	0x58024800

080065a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80065b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b6:	60d3      	str	r3, [r2, #12]
}
 80065b8:	bf00      	nop
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	58024800 	.word	0x58024800

080065c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	; 0x30
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f000 bc1d 	b.w	8006e16 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8087 	beq.w	80066f8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ea:	4b99      	ldr	r3, [pc, #612]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065f4:	4b96      	ldr	r3, [pc, #600]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d007      	beq.n	8006610 <HAL_RCC_OscConfig+0x48>
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	2b18      	cmp	r3, #24
 8006604:	d110      	bne.n	8006628 <HAL_RCC_OscConfig+0x60>
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d10b      	bne.n	8006628 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006610:	4b8f      	ldr	r3, [pc, #572]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d06c      	beq.n	80066f6 <HAL_RCC_OscConfig+0x12e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d168      	bne.n	80066f6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e3f6      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006630:	d106      	bne.n	8006640 <HAL_RCC_OscConfig+0x78>
 8006632:	4b87      	ldr	r3, [pc, #540]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a86      	ldr	r2, [pc, #536]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	e02e      	b.n	800669e <HAL_RCC_OscConfig+0xd6>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10c      	bne.n	8006662 <HAL_RCC_OscConfig+0x9a>
 8006648:	4b81      	ldr	r3, [pc, #516]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a80      	ldr	r2, [pc, #512]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800664e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4b7e      	ldr	r3, [pc, #504]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a7d      	ldr	r2, [pc, #500]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800665a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e01d      	b.n	800669e <HAL_RCC_OscConfig+0xd6>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800666a:	d10c      	bne.n	8006686 <HAL_RCC_OscConfig+0xbe>
 800666c:	4b78      	ldr	r3, [pc, #480]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a77      	ldr	r2, [pc, #476]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	4b75      	ldr	r3, [pc, #468]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a74      	ldr	r2, [pc, #464]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800667e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	e00b      	b.n	800669e <HAL_RCC_OscConfig+0xd6>
 8006686:	4b72      	ldr	r3, [pc, #456]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a71      	ldr	r2, [pc, #452]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800668c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	4b6f      	ldr	r3, [pc, #444]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a6e      	ldr	r2, [pc, #440]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800669c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d013      	beq.n	80066ce <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a6:	f7fc fc09 	bl	8002ebc <HAL_GetTick>
 80066aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066ae:	f7fc fc05 	bl	8002ebc <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b64      	cmp	r3, #100	; 0x64
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e3aa      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066c0:	4b63      	ldr	r3, [pc, #396]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f0      	beq.n	80066ae <HAL_RCC_OscConfig+0xe6>
 80066cc:	e014      	b.n	80066f8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ce:	f7fc fbf5 	bl	8002ebc <HAL_GetTick>
 80066d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066d6:	f7fc fbf1 	bl	8002ebc <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b64      	cmp	r3, #100	; 0x64
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e396      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066e8:	4b59      	ldr	r3, [pc, #356]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <HAL_RCC_OscConfig+0x10e>
 80066f4:	e000      	b.n	80066f8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80cb 	beq.w	800689c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006706:	4b52      	ldr	r3, [pc, #328]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800670e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006710:	4b4f      	ldr	r3, [pc, #316]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_RCC_OscConfig+0x164>
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	2b18      	cmp	r3, #24
 8006720:	d156      	bne.n	80067d0 <HAL_RCC_OscConfig+0x208>
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d151      	bne.n	80067d0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800672c:	4b48      	ldr	r3, [pc, #288]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_OscConfig+0x17c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e368      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006744:	4b42      	ldr	r3, [pc, #264]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f023 0219 	bic.w	r2, r3, #25
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	493f      	ldr	r1, [pc, #252]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006752:	4313      	orrs	r3, r2
 8006754:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006756:	f7fc fbb1 	bl	8002ebc <HAL_GetTick>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800675e:	f7fc fbad 	bl	8002ebc <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e352      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006770:	4b37      	ldr	r3, [pc, #220]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677c:	f7fc fbce 	bl	8002f1c <HAL_GetREVID>
 8006780:	4603      	mov	r3, r0
 8006782:	f241 0203 	movw	r2, #4099	; 0x1003
 8006786:	4293      	cmp	r3, r2
 8006788:	d817      	bhi.n	80067ba <HAL_RCC_OscConfig+0x1f2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d108      	bne.n	80067a4 <HAL_RCC_OscConfig+0x1dc>
 8006792:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800679a:	4a2d      	ldr	r2, [pc, #180]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800679c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067a2:	e07b      	b.n	800689c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a4:	4b2a      	ldr	r3, [pc, #168]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	031b      	lsls	r3, r3, #12
 80067b2:	4927      	ldr	r1, [pc, #156]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067b8:	e070      	b.n	800689c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ba:	4b25      	ldr	r3, [pc, #148]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	061b      	lsls	r3, r3, #24
 80067c8:	4921      	ldr	r1, [pc, #132]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067ce:	e065      	b.n	800689c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d048      	beq.n	800686a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067d8:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f023 0219 	bic.w	r2, r3, #25
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	491a      	ldr	r1, [pc, #104]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ea:	f7fc fb67 	bl	8002ebc <HAL_GetTick>
 80067ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067f2:	f7fc fb63 	bl	8002ebc <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e308      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006804:	4b12      	ldr	r3, [pc, #72]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006810:	f7fc fb84 	bl	8002f1c <HAL_GetREVID>
 8006814:	4603      	mov	r3, r0
 8006816:	f241 0203 	movw	r2, #4099	; 0x1003
 800681a:	4293      	cmp	r3, r2
 800681c:	d81a      	bhi.n	8006854 <HAL_RCC_OscConfig+0x28c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d108      	bne.n	8006838 <HAL_RCC_OscConfig+0x270>
 8006826:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800682e:	4a08      	ldr	r2, [pc, #32]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006834:	6053      	str	r3, [r2, #4]
 8006836:	e031      	b.n	800689c <HAL_RCC_OscConfig+0x2d4>
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	4902      	ldr	r1, [pc, #8]	; (8006850 <HAL_RCC_OscConfig+0x288>)
 8006848:	4313      	orrs	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
 800684c:	e026      	b.n	800689c <HAL_RCC_OscConfig+0x2d4>
 800684e:	bf00      	nop
 8006850:	58024400 	.word	0x58024400
 8006854:	4b9a      	ldr	r3, [pc, #616]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	061b      	lsls	r3, r3, #24
 8006862:	4997      	ldr	r1, [pc, #604]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006864:	4313      	orrs	r3, r2
 8006866:	604b      	str	r3, [r1, #4]
 8006868:	e018      	b.n	800689c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686a:	4b95      	ldr	r3, [pc, #596]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a94      	ldr	r2, [pc, #592]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006876:	f7fc fb21 	bl	8002ebc <HAL_GetTick>
 800687a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800687e:	f7fc fb1d 	bl	8002ebc <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e2c2      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006890:	4b8b      	ldr	r3, [pc, #556]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f0      	bne.n	800687e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80a9 	beq.w	80069fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068aa:	4b85      	ldr	r3, [pc, #532]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068b4:	4b82      	ldr	r3, [pc, #520]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d007      	beq.n	80068d0 <HAL_RCC_OscConfig+0x308>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b18      	cmp	r3, #24
 80068c4:	d13a      	bne.n	800693c <HAL_RCC_OscConfig+0x374>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0303 	and.w	r3, r3, #3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d135      	bne.n	800693c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068d0:	4b7b      	ldr	r3, [pc, #492]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_RCC_OscConfig+0x320>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	2b80      	cmp	r3, #128	; 0x80
 80068e2:	d001      	beq.n	80068e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e296      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068e8:	f7fc fb18 	bl	8002f1c <HAL_GetREVID>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d817      	bhi.n	8006926 <HAL_RCC_OscConfig+0x35e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d108      	bne.n	8006910 <HAL_RCC_OscConfig+0x348>
 80068fe:	4b70      	ldr	r3, [pc, #448]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006906:	4a6e      	ldr	r2, [pc, #440]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800690c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800690e:	e075      	b.n	80069fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006910:	4b6b      	ldr	r3, [pc, #428]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	069b      	lsls	r3, r3, #26
 800691e:	4968      	ldr	r1, [pc, #416]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006920:	4313      	orrs	r3, r2
 8006922:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006924:	e06a      	b.n	80069fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006926:	4b66      	ldr	r3, [pc, #408]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	061b      	lsls	r3, r3, #24
 8006934:	4962      	ldr	r1, [pc, #392]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006936:	4313      	orrs	r3, r2
 8006938:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800693a:	e05f      	b.n	80069fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d042      	beq.n	80069ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006944:	4b5e      	ldr	r3, [pc, #376]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a5d      	ldr	r2, [pc, #372]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fc fab4 	bl	8002ebc <HAL_GetTick>
 8006954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006958:	f7fc fab0 	bl	8002ebc <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e255      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800696a:	4b55      	ldr	r3, [pc, #340]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006976:	f7fc fad1 	bl	8002f1c <HAL_GetREVID>
 800697a:	4603      	mov	r3, r0
 800697c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006980:	4293      	cmp	r3, r2
 8006982:	d817      	bhi.n	80069b4 <HAL_RCC_OscConfig+0x3ec>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	2b20      	cmp	r3, #32
 800698a:	d108      	bne.n	800699e <HAL_RCC_OscConfig+0x3d6>
 800698c:	4b4c      	ldr	r3, [pc, #304]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006994:	4a4a      	ldr	r2, [pc, #296]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699a:	6053      	str	r3, [r2, #4]
 800699c:	e02e      	b.n	80069fc <HAL_RCC_OscConfig+0x434>
 800699e:	4b48      	ldr	r3, [pc, #288]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	069b      	lsls	r3, r3, #26
 80069ac:	4944      	ldr	r1, [pc, #272]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	604b      	str	r3, [r1, #4]
 80069b2:	e023      	b.n	80069fc <HAL_RCC_OscConfig+0x434>
 80069b4:	4b42      	ldr	r3, [pc, #264]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	061b      	lsls	r3, r3, #24
 80069c2:	493f      	ldr	r1, [pc, #252]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60cb      	str	r3, [r1, #12]
 80069c8:	e018      	b.n	80069fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80069ca:	4b3d      	ldr	r3, [pc, #244]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a3c      	ldr	r2, [pc, #240]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80069d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d6:	f7fc fa71 	bl	8002ebc <HAL_GetTick>
 80069da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80069de:	f7fc fa6d 	bl	8002ebc <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e212      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069f0:	4b33      	ldr	r3, [pc, #204]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1f0      	bne.n	80069de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d036      	beq.n	8006a76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d019      	beq.n	8006a44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a10:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a14:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7fc fa4e 	bl	8002ebc <HAL_GetTick>
 8006a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a24:	f7fc fa4a 	bl	8002ebc <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e1ef      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a36:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCC_OscConfig+0x45c>
 8006a42:	e018      	b.n	8006a76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a44:	4b1e      	ldr	r3, [pc, #120]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a48:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a50:	f7fc fa34 	bl	8002ebc <HAL_GetTick>
 8006a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a58:	f7fc fa30 	bl	8002ebc <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e1d5      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a6a:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d039      	beq.n	8006af6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01c      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a96:	f7fc fa11 	bl	8002ebc <HAL_GetTick>
 8006a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a9e:	f7fc fa0d 	bl	8002ebc <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e1b2      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <HAL_RCC_OscConfig+0x4f8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCC_OscConfig+0x4d6>
 8006abc:	e01b      	b.n	8006af6 <HAL_RCC_OscConfig+0x52e>
 8006abe:	bf00      	nop
 8006ac0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ac4:	4b9b      	ldr	r3, [pc, #620]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a9a      	ldr	r2, [pc, #616]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ace:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ad0:	f7fc f9f4 	bl	8002ebc <HAL_GetTick>
 8006ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ad8:	f7fc f9f0 	bl	8002ebc <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e195      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006aea:	4b92      	ldr	r3, [pc, #584]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8081 	beq.w	8006c06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b04:	4b8c      	ldr	r3, [pc, #560]	; (8006d38 <HAL_RCC_OscConfig+0x770>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a8b      	ldr	r2, [pc, #556]	; (8006d38 <HAL_RCC_OscConfig+0x770>)
 8006b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b10:	f7fc f9d4 	bl	8002ebc <HAL_GetTick>
 8006b14:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b18:	f7fc f9d0 	bl	8002ebc <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	; 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e175      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b2a:	4b83      	ldr	r3, [pc, #524]	; (8006d38 <HAL_RCC_OscConfig+0x770>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d106      	bne.n	8006b4c <HAL_RCC_OscConfig+0x584>
 8006b3e:	4b7d      	ldr	r3, [pc, #500]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	4a7c      	ldr	r2, [pc, #496]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	6713      	str	r3, [r2, #112]	; 0x70
 8006b4a:	e02d      	b.n	8006ba8 <HAL_RCC_OscConfig+0x5e0>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10c      	bne.n	8006b6e <HAL_RCC_OscConfig+0x5a6>
 8006b54:	4b77      	ldr	r3, [pc, #476]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b58:	4a76      	ldr	r2, [pc, #472]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b5a:	f023 0301 	bic.w	r3, r3, #1
 8006b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b60:	4b74      	ldr	r3, [pc, #464]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	4a73      	ldr	r2, [pc, #460]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b66:	f023 0304 	bic.w	r3, r3, #4
 8006b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b6c:	e01c      	b.n	8006ba8 <HAL_RCC_OscConfig+0x5e0>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCC_OscConfig+0x5c8>
 8006b76:	4b6f      	ldr	r3, [pc, #444]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	4a6e      	ldr	r2, [pc, #440]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b7c:	f043 0304 	orr.w	r3, r3, #4
 8006b80:	6713      	str	r3, [r2, #112]	; 0x70
 8006b82:	4b6c      	ldr	r3, [pc, #432]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b86:	4a6b      	ldr	r2, [pc, #428]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8e:	e00b      	b.n	8006ba8 <HAL_RCC_OscConfig+0x5e0>
 8006b90:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	4a67      	ldr	r2, [pc, #412]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b96:	f023 0301 	bic.w	r3, r3, #1
 8006b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9c:	4b65      	ldr	r3, [pc, #404]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba0:	4a64      	ldr	r2, [pc, #400]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006ba2:	f023 0304 	bic.w	r3, r3, #4
 8006ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d015      	beq.n	8006bdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb0:	f7fc f984 	bl	8002ebc <HAL_GetTick>
 8006bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bb6:	e00a      	b.n	8006bce <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb8:	f7fc f980 	bl	8002ebc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e123      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bce:	4b59      	ldr	r3, [pc, #356]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0ee      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x5f0>
 8006bda:	e014      	b.n	8006c06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bdc:	f7fc f96e 	bl	8002ebc <HAL_GetTick>
 8006be0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006be2:	e00a      	b.n	8006bfa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be4:	f7fc f96a 	bl	8002ebc <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e10d      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bfa:	4b4e      	ldr	r3, [pc, #312]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1ee      	bne.n	8006be4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8102 	beq.w	8006e14 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c10:	4b48      	ldr	r3, [pc, #288]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c18:	2b18      	cmp	r3, #24
 8006c1a:	f000 80bd 	beq.w	8006d98 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	f040 809e 	bne.w	8006d64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c28:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a41      	ldr	r2, [pc, #260]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fc f942 	bl	8002ebc <HAL_GetTick>
 8006c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c3c:	f7fc f93e 	bl	8002ebc <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e0e3      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c4e:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c5a:	4b36      	ldr	r3, [pc, #216]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c5e:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <HAL_RCC_OscConfig+0x774>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c6a:	0112      	lsls	r2, r2, #4
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	4931      	ldr	r1, [pc, #196]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	628b      	str	r3, [r1, #40]	; 0x28
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	3b01      	subs	r3, #1
 8006c84:	025b      	lsls	r3, r3, #9
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	061b      	lsls	r3, r3, #24
 8006ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ca4:	4923      	ldr	r1, [pc, #140]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006caa:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cb6:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cba:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <HAL_RCC_OscConfig+0x778>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006cc2:	00d2      	lsls	r2, r2, #3
 8006cc4:	491b      	ldr	r1, [pc, #108]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006cca:	4b1a      	ldr	r3, [pc, #104]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	f023 020c 	bic.w	r2, r3, #12
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	4917      	ldr	r1, [pc, #92]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006cdc:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	f023 0202 	bic.w	r2, r3, #2
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce8:	4912      	ldr	r1, [pc, #72]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	4a10      	ldr	r2, [pc, #64]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfa:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	4a0d      	ldr	r2, [pc, #52]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a04      	ldr	r2, [pc, #16]	; (8006d34 <HAL_RCC_OscConfig+0x76c>)
 8006d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2a:	f7fc f8c7 	bl	8002ebc <HAL_GetTick>
 8006d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d30:	e011      	b.n	8006d56 <HAL_RCC_OscConfig+0x78e>
 8006d32:	bf00      	nop
 8006d34:	58024400 	.word	0x58024400
 8006d38:	58024800 	.word	0x58024800
 8006d3c:	fffffc0c 	.word	0xfffffc0c
 8006d40:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d44:	f7fc f8ba 	bl	8002ebc <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e05f      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d56:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <HAL_RCC_OscConfig+0x858>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0f0      	beq.n	8006d44 <HAL_RCC_OscConfig+0x77c>
 8006d62:	e057      	b.n	8006e14 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d64:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <HAL_RCC_OscConfig+0x858>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a2d      	ldr	r2, [pc, #180]	; (8006e20 <HAL_RCC_OscConfig+0x858>)
 8006d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fc f8a4 	bl	8002ebc <HAL_GetTick>
 8006d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d78:	f7fc f8a0 	bl	8002ebc <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e045      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d8a:	4b25      	ldr	r3, [pc, #148]	; (8006e20 <HAL_RCC_OscConfig+0x858>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f0      	bne.n	8006d78 <HAL_RCC_OscConfig+0x7b0>
 8006d96:	e03d      	b.n	8006e14 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d98:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <HAL_RCC_OscConfig+0x858>)
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <HAL_RCC_OscConfig+0x858>)
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d031      	beq.n	8006e10 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f003 0203 	and.w	r2, r3, #3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d12a      	bne.n	8006e10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	091b      	lsrs	r3, r3, #4
 8006dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d122      	bne.n	8006e10 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d11a      	bne.n	8006e10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	0a5b      	lsrs	r3, r3, #9
 8006dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d111      	bne.n	8006e10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d108      	bne.n	8006e10 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	0e1b      	lsrs	r3, r3, #24
 8006e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3730      	adds	r7, #48	; 0x30
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	58024400 	.word	0x58024400

08006e24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e19c      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e38:	4b8a      	ldr	r3, [pc, #552]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d910      	bls.n	8006e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b87      	ldr	r3, [pc, #540]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	4985      	ldr	r1, [pc, #532]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b83      	ldr	r3, [pc, #524]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d001      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e184      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d010      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	4b7b      	ldr	r3, [pc, #492]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d908      	bls.n	8006e96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e84:	4b78      	ldr	r3, [pc, #480]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	4975      	ldr	r1, [pc, #468]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d010      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	4b70      	ldr	r3, [pc, #448]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d908      	bls.n	8006ec4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eb2:	4b6d      	ldr	r3, [pc, #436]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	496a      	ldr	r1, [pc, #424]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d010      	beq.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	4b64      	ldr	r3, [pc, #400]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d908      	bls.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ee0:	4b61      	ldr	r3, [pc, #388]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	495e      	ldr	r1, [pc, #376]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d010      	beq.n	8006f20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69da      	ldr	r2, [r3, #28]
 8006f02:	4b59      	ldr	r3, [pc, #356]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d908      	bls.n	8006f20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f0e:	4b56      	ldr	r3, [pc, #344]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	4953      	ldr	r1, [pc, #332]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d010      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	4b4d      	ldr	r3, [pc, #308]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d908      	bls.n	8006f4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f3c:	4b4a      	ldr	r3, [pc, #296]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f023 020f 	bic.w	r2, r3, #15
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4947      	ldr	r1, [pc, #284]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d055      	beq.n	8007006 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f5a:	4b43      	ldr	r3, [pc, #268]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	4940      	ldr	r1, [pc, #256]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d107      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f74:	4b3c      	ldr	r3, [pc, #240]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d121      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0f6      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f8c:	4b36      	ldr	r3, [pc, #216]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d115      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0ea      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d107      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fa4:	4b30      	ldr	r3, [pc, #192]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e0de      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fb4:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0d6      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f023 0207 	bic.w	r2, r3, #7
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	4925      	ldr	r1, [pc, #148]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd6:	f7fb ff71 	bl	8002ebc <HAL_GetTick>
 8006fda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fdc:	e00a      	b.n	8006ff4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fde:	f7fb ff6d 	bl	8002ebc <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e0be      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff4:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	429a      	cmp	r2, r3
 8007004:	d1eb      	bne.n	8006fde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d010      	beq.n	8007034 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	429a      	cmp	r2, r3
 8007020:	d208      	bcs.n	8007034 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	f023 020f 	bic.w	r2, r3, #15
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	490e      	ldr	r1, [pc, #56]	; (8007068 <HAL_RCC_ClockConfig+0x244>)
 8007030:	4313      	orrs	r3, r2
 8007032:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007034:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d214      	bcs.n	800706c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007042:	4b08      	ldr	r3, [pc, #32]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f023 020f 	bic.w	r2, r3, #15
 800704a:	4906      	ldr	r1, [pc, #24]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	4313      	orrs	r3, r2
 8007050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <HAL_RCC_ClockConfig+0x240>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d005      	beq.n	800706c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e086      	b.n	8007172 <HAL_RCC_ClockConfig+0x34e>
 8007064:	52002000 	.word	0x52002000
 8007068:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d010      	beq.n	800709a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	4b3f      	ldr	r3, [pc, #252]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007084:	429a      	cmp	r2, r3
 8007086:	d208      	bcs.n	800709a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007088:	4b3c      	ldr	r3, [pc, #240]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	4939      	ldr	r1, [pc, #228]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 8007096:	4313      	orrs	r3, r2
 8007098:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d010      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	4b34      	ldr	r3, [pc, #208]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d208      	bcs.n	80070c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070b6:	4b31      	ldr	r3, [pc, #196]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	492e      	ldr	r1, [pc, #184]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d010      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699a      	ldr	r2, [r3, #24]
 80070d8:	4b28      	ldr	r3, [pc, #160]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d208      	bcs.n	80070f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070e4:	4b25      	ldr	r3, [pc, #148]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	4922      	ldr	r1, [pc, #136]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d010      	beq.n	8007124 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69da      	ldr	r2, [r3, #28]
 8007106:	4b1d      	ldr	r3, [pc, #116]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800710e:	429a      	cmp	r2, r3
 8007110:	d208      	bcs.n	8007124 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007112:	4b1a      	ldr	r3, [pc, #104]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	4917      	ldr	r1, [pc, #92]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 8007120:	4313      	orrs	r3, r2
 8007122:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007124:	f000 f834 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 8007128:	4602      	mov	r2, r0
 800712a:	4b14      	ldr	r3, [pc, #80]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	f003 030f 	and.w	r3, r3, #15
 8007134:	4912      	ldr	r1, [pc, #72]	; (8007180 <HAL_RCC_ClockConfig+0x35c>)
 8007136:	5ccb      	ldrb	r3, [r1, r3]
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	fa22 f303 	lsr.w	r3, r2, r3
 8007140:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <HAL_RCC_ClockConfig+0x358>)
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	4a0d      	ldr	r2, [pc, #52]	; (8007180 <HAL_RCC_ClockConfig+0x35c>)
 800714c:	5cd3      	ldrb	r3, [r2, r3]
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <HAL_RCC_ClockConfig+0x360>)
 800715a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800715c:	4a0a      	ldr	r2, [pc, #40]	; (8007188 <HAL_RCC_ClockConfig+0x364>)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007162:	4b0a      	ldr	r3, [pc, #40]	; (800718c <HAL_RCC_ClockConfig+0x368>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fb fe5e 	bl	8002e28 <HAL_InitTick>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	58024400 	.word	0x58024400
 8007180:	0800be0c 	.word	0x0800be0c
 8007184:	24000004 	.word	0x24000004
 8007188:	24000000 	.word	0x24000000
 800718c:	24000018 	.word	0x24000018

08007190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007190:	b480      	push	{r7}
 8007192:	b089      	sub	sp, #36	; 0x24
 8007194:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007196:	4bb3      	ldr	r3, [pc, #716]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800719e:	2b18      	cmp	r3, #24
 80071a0:	f200 8155 	bhi.w	800744e <HAL_RCC_GetSysClockFreq+0x2be>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	08007211 	.word	0x08007211
 80071b0:	0800744f 	.word	0x0800744f
 80071b4:	0800744f 	.word	0x0800744f
 80071b8:	0800744f 	.word	0x0800744f
 80071bc:	0800744f 	.word	0x0800744f
 80071c0:	0800744f 	.word	0x0800744f
 80071c4:	0800744f 	.word	0x0800744f
 80071c8:	0800744f 	.word	0x0800744f
 80071cc:	08007237 	.word	0x08007237
 80071d0:	0800744f 	.word	0x0800744f
 80071d4:	0800744f 	.word	0x0800744f
 80071d8:	0800744f 	.word	0x0800744f
 80071dc:	0800744f 	.word	0x0800744f
 80071e0:	0800744f 	.word	0x0800744f
 80071e4:	0800744f 	.word	0x0800744f
 80071e8:	0800744f 	.word	0x0800744f
 80071ec:	0800723d 	.word	0x0800723d
 80071f0:	0800744f 	.word	0x0800744f
 80071f4:	0800744f 	.word	0x0800744f
 80071f8:	0800744f 	.word	0x0800744f
 80071fc:	0800744f 	.word	0x0800744f
 8007200:	0800744f 	.word	0x0800744f
 8007204:	0800744f 	.word	0x0800744f
 8007208:	0800744f 	.word	0x0800744f
 800720c:	08007243 	.word	0x08007243
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007210:	4b94      	ldr	r3, [pc, #592]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d009      	beq.n	8007230 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800721c:	4b91      	ldr	r3, [pc, #580]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	08db      	lsrs	r3, r3, #3
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	4a90      	ldr	r2, [pc, #576]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007228:	fa22 f303 	lsr.w	r3, r2, r3
 800722c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800722e:	e111      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007230:	4b8d      	ldr	r3, [pc, #564]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007232:	61bb      	str	r3, [r7, #24]
    break;
 8007234:	e10e      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007236:	4b8d      	ldr	r3, [pc, #564]	; (800746c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007238:	61bb      	str	r3, [r7, #24]
    break;
 800723a:	e10b      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800723c:	4b8c      	ldr	r3, [pc, #560]	; (8007470 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800723e:	61bb      	str	r3, [r7, #24]
    break;
 8007240:	e108      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007242:	4b88      	ldr	r3, [pc, #544]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800724c:	4b85      	ldr	r3, [pc, #532]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007256:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007258:	4b82      	ldr	r3, [pc, #520]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007262:	4b80      	ldr	r3, [pc, #512]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	08db      	lsrs	r3, r3, #3
 8007268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80e1 	beq.w	8007448 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b02      	cmp	r3, #2
 800728a:	f000 8083 	beq.w	8007394 <HAL_RCC_GetSysClockFreq+0x204>
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b02      	cmp	r3, #2
 8007292:	f200 80a1 	bhi.w	80073d8 <HAL_RCC_GetSysClockFreq+0x248>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <HAL_RCC_GetSysClockFreq+0x114>
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d056      	beq.n	8007350 <HAL_RCC_GetSysClockFreq+0x1c0>
 80072a2:	e099      	b.n	80073d8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072a4:	4b6f      	ldr	r3, [pc, #444]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d02d      	beq.n	800730c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072b0:	4b6c      	ldr	r3, [pc, #432]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	08db      	lsrs	r3, r3, #3
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	4a6b      	ldr	r2, [pc, #428]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
 80072c0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b62      	ldr	r3, [pc, #392]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800730a:	e087      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007478 <HAL_RCC_GetSysClockFreq+0x2e8>
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b51      	ldr	r3, [pc, #324]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007332:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800734e:	e065      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800747c <HAL_RCC_GetSysClockFreq+0x2ec>
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b40      	ldr	r3, [pc, #256]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a02 	vldr	s12, [r7, #8]
 8007376:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007474 <HAL_RCC_GetSysClockFreq+0x2e4>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007392:	e043      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007480 <HAL_RCC_GetSysClockFreq+0x2f0>
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b2f      	ldr	r3, [pc, #188]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d6:	e021      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800747c <HAL_RCC_GetSysClockFreq+0x2ec>
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80073fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800741c:	4b11      	ldr	r3, [pc, #68]	; (8007464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	0a5b      	lsrs	r3, r3, #9
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	3301      	adds	r3, #1
 8007428:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007434:	edd7 6a07 	vldr	s13, [r7, #28]
 8007438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007440:	ee17 3a90 	vmov	r3, s15
 8007444:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007446:	e005      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
    break;
 800744c:	e002      	b.n	8007454 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007450:	61bb      	str	r3, [r7, #24]
    break;
 8007452:	bf00      	nop
  }

  return sysclockfreq;
 8007454:	69bb      	ldr	r3, [r7, #24]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3724      	adds	r7, #36	; 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
 8007468:	03d09000 	.word	0x03d09000
 800746c:	003d0900 	.word	0x003d0900
 8007470:	007a1200 	.word	0x007a1200
 8007474:	46000000 	.word	0x46000000
 8007478:	4c742400 	.word	0x4c742400
 800747c:	4a742400 	.word	0x4a742400
 8007480:	4af42400 	.word	0x4af42400

08007484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800748a:	f7ff fe81 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 800748e:	4602      	mov	r2, r0
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	0a1b      	lsrs	r3, r3, #8
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	490f      	ldr	r1, [pc, #60]	; (80074d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800749c:	5ccb      	ldrb	r3, [r1, r3]
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	fa22 f303 	lsr.w	r3, r2, r3
 80074a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80074b2:	5cd3      	ldrb	r3, [r2, r3]
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	fa22 f303 	lsr.w	r3, r2, r3
 80074be:	4a07      	ldr	r2, [pc, #28]	; (80074dc <HAL_RCC_GetHCLKFreq+0x58>)
 80074c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074c2:	4a07      	ldr	r2, [pc, #28]	; (80074e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80074c8:	4b04      	ldr	r3, [pc, #16]	; (80074dc <HAL_RCC_GetHCLKFreq+0x58>)
 80074ca:	681b      	ldr	r3, [r3, #0]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	58024400 	.word	0x58024400
 80074d8:	0800be0c 	.word	0x0800be0c
 80074dc:	24000004 	.word	0x24000004
 80074e0:	24000000 	.word	0x24000000

080074e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074e8:	f7ff ffcc 	bl	8007484 <HAL_RCC_GetHCLKFreq>
 80074ec:	4602      	mov	r2, r0
 80074ee:	4b06      	ldr	r3, [pc, #24]	; (8007508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	091b      	lsrs	r3, r3, #4
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	4904      	ldr	r1, [pc, #16]	; (800750c <HAL_RCC_GetPCLK1Freq+0x28>)
 80074fa:	5ccb      	ldrb	r3, [r1, r3]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007504:	4618      	mov	r0, r3
 8007506:	bd80      	pop	{r7, pc}
 8007508:	58024400 	.word	0x58024400
 800750c:	0800be0c 	.word	0x0800be0c

08007510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007514:	f7ff ffb6 	bl	8007484 <HAL_RCC_GetHCLKFreq>
 8007518:	4602      	mov	r2, r0
 800751a:	4b06      	ldr	r3, [pc, #24]	; (8007534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	4904      	ldr	r1, [pc, #16]	; (8007538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007526:	5ccb      	ldrb	r3, [r1, r3]
 8007528:	f003 031f 	and.w	r3, r3, #31
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007530:	4618      	mov	r0, r3
 8007532:	bd80      	pop	{r7, pc}
 8007534:	58024400 	.word	0x58024400
 8007538:	0800be0c 	.word	0x0800be0c

0800753c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007544:	2300      	movs	r3, #0
 8007546:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007548:	2300      	movs	r3, #0
 800754a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d03f      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800755c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007560:	d02a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007566:	d824      	bhi.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800756c:	d018      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800756e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007572:	d81e      	bhi.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757c:	d007      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800757e:	e018      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007580:	4ba3      	ldr	r3, [pc, #652]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4aa2      	ldr	r2, [pc, #648]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800758a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800758c:	e015      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3304      	adds	r3, #4
 8007592:	2102      	movs	r1, #2
 8007594:	4618      	mov	r0, r3
 8007596:	f001 f9d5 	bl	8008944 <RCCEx_PLL2_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800759e:	e00c      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3324      	adds	r3, #36	; 0x24
 80075a4:	2102      	movs	r1, #2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fa7e 	bl	8008aa8 <RCCEx_PLL3_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80075b0:	e003      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
      break;
 80075b6:	e000      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80075b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075c0:	4b93      	ldr	r3, [pc, #588]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075cc:	4990      	ldr	r1, [pc, #576]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	650b      	str	r3, [r1, #80]	; 0x50
 80075d2:	e001      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d03d      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d826      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007609 	.word	0x08007609
 80075f8:	08007617 	.word	0x08007617
 80075fc:	08007629 	.word	0x08007629
 8007600:	08007641 	.word	0x08007641
 8007604:	08007641 	.word	0x08007641
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007608:	4b81      	ldr	r3, [pc, #516]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	4a80      	ldr	r2, [pc, #512]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800760e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007614:	e015      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3304      	adds	r3, #4
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f991 	bl	8008944 <RCCEx_PLL2_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007626:	e00c      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3324      	adds	r3, #36	; 0x24
 800762c:	2100      	movs	r1, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fa3a 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007638:	e003      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	75fb      	strb	r3, [r7, #23]
      break;
 800763e:	e000      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d109      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007648:	4b71      	ldr	r3, [pc, #452]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	f023 0207 	bic.w	r2, r3, #7
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007654:	496e      	ldr	r1, [pc, #440]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007656:	4313      	orrs	r3, r2
 8007658:	650b      	str	r3, [r1, #80]	; 0x50
 800765a:	e001      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007668:	2b00      	cmp	r3, #0
 800766a:	d042      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007674:	d02b      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767a:	d825      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800767c:	2bc0      	cmp	r3, #192	; 0xc0
 800767e:	d028      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007680:	2bc0      	cmp	r3, #192	; 0xc0
 8007682:	d821      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d016      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007688:	2b80      	cmp	r3, #128	; 0x80
 800768a:	d81d      	bhi.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d007      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007694:	e018      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007696:	4b5e      	ldr	r3, [pc, #376]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	4a5d      	ldr	r2, [pc, #372]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800769c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80076a2:	e017      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3304      	adds	r3, #4
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 f94a 	bl	8008944 <RCCEx_PLL2_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80076b4:	e00e      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3324      	adds	r3, #36	; 0x24
 80076ba:	2100      	movs	r1, #0
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 f9f3 	bl	8008aa8 <RCCEx_PLL3_Config>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80076c6:	e005      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	75fb      	strb	r3, [r7, #23]
      break;
 80076cc:	e002      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80076d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80076da:	4b4d      	ldr	r3, [pc, #308]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e6:	494a      	ldr	r1, [pc, #296]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	650b      	str	r3, [r1, #80]	; 0x50
 80076ec:	e001      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d049      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007704:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007708:	d030      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800770a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800770e:	d82a      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007710:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007714:	d02c      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007716:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800771a:	d824      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800771c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007720:	d018      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007726:	d81e      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800772c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007730:	d007      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007732:	e018      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007734:	4b36      	ldr	r3, [pc, #216]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	4a35      	ldr	r2, [pc, #212]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800773a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007740:	e017      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3304      	adds	r3, #4
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f001 f8fb 	bl	8008944 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007752:	e00e      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3324      	adds	r3, #36	; 0x24
 8007758:	2100      	movs	r1, #0
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f9a4 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007764:	e005      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
      break;
 800776a:	e002      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800776c:	bf00      	nop
 800776e:	e000      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800777a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007786:	4922      	ldr	r1, [pc, #136]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007788:	4313      	orrs	r3, r2
 800778a:	658b      	str	r3, [r1, #88]	; 0x58
 800778c:	e001      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779a:	2b00      	cmp	r3, #0
 800779c:	d04b      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077a8:	d030      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80077aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077ae:	d82a      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80077b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077b4:	d02e      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80077b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077ba:	d824      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80077bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077c0:	d018      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80077c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077c6:	d81e      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80077cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077d0:	d007      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80077d2:	e018      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d4:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	4a0d      	ldr	r2, [pc, #52]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077e0:	e019      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3304      	adds	r3, #4
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 f8ab 	bl	8008944 <RCCEx_PLL2_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80077f2:	e010      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3324      	adds	r3, #36	; 0x24
 80077f8:	2100      	movs	r1, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 f954 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007804:	e007      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
      break;
 800780a:	e004      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800780c:	bf00      	nop
 800780e:	e002      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007810:	58024400 	.word	0x58024400
      break;
 8007814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800781c:	4b99      	ldr	r3, [pc, #612]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800782a:	4996      	ldr	r1, [pc, #600]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800782c:	4313      	orrs	r3, r2
 800782e:	658b      	str	r3, [r1, #88]	; 0x58
 8007830:	e001      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d032      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	2b30      	cmp	r3, #48	; 0x30
 8007848:	d01c      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800784a:	2b30      	cmp	r3, #48	; 0x30
 800784c:	d817      	bhi.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d00c      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007852:	2b20      	cmp	r3, #32
 8007854:	d813      	bhi.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d016      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800785a:	2b10      	cmp	r3, #16
 800785c:	d10f      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785e:	4b89      	ldr	r3, [pc, #548]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007862:	4a88      	ldr	r2, [pc, #544]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800786a:	e00e      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2102      	movs	r1, #2
 8007872:	4618      	mov	r0, r3
 8007874:	f001 f866 	bl	8008944 <RCCEx_PLL2_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800787c:	e005      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	75fb      	strb	r3, [r7, #23]
      break;
 8007882:	e002      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007884:	bf00      	nop
 8007886:	e000      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007890:	4b7c      	ldr	r3, [pc, #496]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789c:	4979      	ldr	r1, [pc, #484]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078a2:	e001      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d047      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078bc:	d030      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80078be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078c2:	d82a      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80078c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078c8:	d02c      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80078ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078ce:	d824      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80078d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d4:	d018      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80078d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078da:	d81e      	bhi.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e4:	d007      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80078e6:	e018      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e8:	4b66      	ldr	r3, [pc, #408]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	4a65      	ldr	r2, [pc, #404]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078f4:	e017      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3304      	adds	r3, #4
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f821 	bl	8008944 <RCCEx_PLL2_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007906:	e00e      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3324      	adds	r3, #36	; 0x24
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f001 f8ca 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007918:	e005      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
      break;
 800791e:	e002      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007920:	bf00      	nop
 8007922:	e000      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800792c:	4b55      	ldr	r3, [pc, #340]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800792e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007930:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007938:	4952      	ldr	r1, [pc, #328]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800793a:	4313      	orrs	r3, r2
 800793c:	650b      	str	r3, [r1, #80]	; 0x50
 800793e:	e001      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d049      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007958:	d02e      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800795a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800795e:	d828      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007960:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007964:	d02a      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007966:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800796a:	d822      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800796c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007970:	d026      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007972:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007976:	d81c      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800797c:	d010      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800797e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007982:	d816      	bhi.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01d      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798c:	d111      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	2101      	movs	r1, #1
 8007994:	4618      	mov	r0, r3
 8007996:	f000 ffd5 	bl	8008944 <RCCEx_PLL2_Config>
 800799a:	4603      	mov	r3, r0
 800799c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800799e:	e012      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3324      	adds	r3, #36	; 0x24
 80079a4:	2101      	movs	r1, #1
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 f87e 	bl	8008aa8 <RCCEx_PLL3_Config>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80079b0:	e009      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
      break;
 80079b6:	e006      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80079b8:	bf00      	nop
 80079ba:	e004      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80079bc:	bf00      	nop
 80079be:	e002      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80079c0:	bf00      	nop
 80079c2:	e000      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80079c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80079cc:	4b2d      	ldr	r3, [pc, #180]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d8:	492a      	ldr	r1, [pc, #168]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	650b      	str	r3, [r1, #80]	; 0x50
 80079de:	e001      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d04d      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079fa:	d02e      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80079fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a00:	d828      	bhi.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a06:	d02a      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0c:	d822      	bhi.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a12:	d026      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007a14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a18:	d81c      	bhi.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1e:	d010      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a24:	d816      	bhi.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d01d      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a2e:	d111      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3304      	adds	r3, #4
 8007a34:	2101      	movs	r1, #1
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 ff84 	bl	8008944 <RCCEx_PLL2_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007a40:	e012      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3324      	adds	r3, #36	; 0x24
 8007a46:	2101      	movs	r1, #1
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 f82d 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007a52:	e009      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	75fb      	strb	r3, [r7, #23]
      break;
 8007a58:	e006      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a5a:	bf00      	nop
 8007a5c:	e004      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10c      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a6e:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a7c:	4901      	ldr	r1, [pc, #4]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	658b      	str	r3, [r1, #88]	; 0x58
 8007a82:	e003      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02f      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa0:	d00e      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa6:	d814      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d015      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab0:	d10f      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab2:	4baf      	ldr	r3, [pc, #700]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	4aae      	ldr	r2, [pc, #696]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007abe:	e00c      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 ff3c 	bl	8008944 <RCCEx_PLL2_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ad0:	e003      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad6:	e000      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ae0:	4ba3      	ldr	r3, [pc, #652]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aec:	49a0      	ldr	r1, [pc, #640]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	650b      	str	r3, [r1, #80]	; 0x50
 8007af2:	e001      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d032      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d81b      	bhi.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b4b 	.word	0x08007b4b
 8007b18:	08007b25 	.word	0x08007b25
 8007b1c:	08007b33 	.word	0x08007b33
 8007b20:	08007b4b 	.word	0x08007b4b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b24:	4b92      	ldr	r3, [pc, #584]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	4a91      	ldr	r2, [pc, #580]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007b30:	e00c      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3304      	adds	r3, #4
 8007b36:	2102      	movs	r1, #2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 ff03 	bl	8008944 <RCCEx_PLL2_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007b42:	e003      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
      break;
 8007b48:	e000      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b52:	4b87      	ldr	r3, [pc, #540]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b56:	f023 0203 	bic.w	r2, r3, #3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	4984      	ldr	r1, [pc, #528]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b64:	e001      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8086 	beq.w	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b78:	4b7e      	ldr	r3, [pc, #504]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7d      	ldr	r2, [pc, #500]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b84:	f7fb f99a 	bl	8002ebc <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b8a:	e009      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b8c:	f7fb f996 	bl	8002ebc <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	; 0x64
 8007b98:	d902      	bls.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	75fb      	strb	r3, [r7, #23]
        break;
 8007b9e:	e005      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ba0:	4b74      	ldr	r3, [pc, #464]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0ef      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d166      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007bb2:	4b6f      	ldr	r3, [pc, #444]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bbc:	4053      	eors	r3, r2
 8007bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bc6:	4b6a      	ldr	r3, [pc, #424]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bd0:	4b67      	ldr	r3, [pc, #412]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd4:	4a66      	ldr	r2, [pc, #408]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bda:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bdc:	4b64      	ldr	r3, [pc, #400]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	4a63      	ldr	r2, [pc, #396]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007be8:	4a61      	ldr	r2, [pc, #388]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf8:	d115      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfa:	f7fb f95f 	bl	8002ebc <HAL_GetTick>
 8007bfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c00:	e00b      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c02:	f7fb f95b 	bl	8002ebc <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d902      	bls.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	75fb      	strb	r3, [r7, #23]
            break;
 8007c18:	e005      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c1a:	4b55      	ldr	r3, [pc, #340]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0ed      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d126      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c3a:	d10d      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007c3c:	4b4c      	ldr	r3, [pc, #304]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c4a:	0919      	lsrs	r1, r3, #4
 8007c4c:	4b4a      	ldr	r3, [pc, #296]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007c4e:	400b      	ands	r3, r1
 8007c50:	4947      	ldr	r1, [pc, #284]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	610b      	str	r3, [r1, #16]
 8007c56:	e005      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007c58:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	4a44      	ldr	r2, [pc, #272]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c62:	6113      	str	r3, [r2, #16]
 8007c64:	4b42      	ldr	r3, [pc, #264]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c72:	493f      	ldr	r1, [pc, #252]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	670b      	str	r3, [r1, #112]	; 0x70
 8007c78:	e004      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	75bb      	strb	r3, [r7, #22]
 8007c7e:	e001      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8085 	beq.w	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c96:	2b28      	cmp	r3, #40	; 0x28
 8007c98:	d866      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007d7d 	.word	0x08007d7d
 8007ca4:	08007d69 	.word	0x08007d69
 8007ca8:	08007d69 	.word	0x08007d69
 8007cac:	08007d69 	.word	0x08007d69
 8007cb0:	08007d69 	.word	0x08007d69
 8007cb4:	08007d69 	.word	0x08007d69
 8007cb8:	08007d69 	.word	0x08007d69
 8007cbc:	08007d69 	.word	0x08007d69
 8007cc0:	08007d45 	.word	0x08007d45
 8007cc4:	08007d69 	.word	0x08007d69
 8007cc8:	08007d69 	.word	0x08007d69
 8007ccc:	08007d69 	.word	0x08007d69
 8007cd0:	08007d69 	.word	0x08007d69
 8007cd4:	08007d69 	.word	0x08007d69
 8007cd8:	08007d69 	.word	0x08007d69
 8007cdc:	08007d69 	.word	0x08007d69
 8007ce0:	08007d57 	.word	0x08007d57
 8007ce4:	08007d69 	.word	0x08007d69
 8007ce8:	08007d69 	.word	0x08007d69
 8007cec:	08007d69 	.word	0x08007d69
 8007cf0:	08007d69 	.word	0x08007d69
 8007cf4:	08007d69 	.word	0x08007d69
 8007cf8:	08007d69 	.word	0x08007d69
 8007cfc:	08007d69 	.word	0x08007d69
 8007d00:	08007d7d 	.word	0x08007d7d
 8007d04:	08007d69 	.word	0x08007d69
 8007d08:	08007d69 	.word	0x08007d69
 8007d0c:	08007d69 	.word	0x08007d69
 8007d10:	08007d69 	.word	0x08007d69
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007d69 	.word	0x08007d69
 8007d1c:	08007d69 	.word	0x08007d69
 8007d20:	08007d7d 	.word	0x08007d7d
 8007d24:	08007d69 	.word	0x08007d69
 8007d28:	08007d69 	.word	0x08007d69
 8007d2c:	08007d69 	.word	0x08007d69
 8007d30:	08007d69 	.word	0x08007d69
 8007d34:	08007d69 	.word	0x08007d69
 8007d38:	08007d69 	.word	0x08007d69
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	08007d7d 	.word	0x08007d7d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fdfa 	bl	8008944 <RCCEx_PLL2_Config>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007d54:	e013      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3324      	adds	r3, #36	; 0x24
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fea3 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007d66:	e00a      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6c:	e007      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
 8007d74:	58024800 	.word	0x58024800
 8007d78:	00ffffcf 	.word	0x00ffffcf
      break;
 8007d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d84:	4b96      	ldr	r3, [pc, #600]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d88:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d90:	4993      	ldr	r1, [pc, #588]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	654b      	str	r3, [r1, #84]	; 0x54
 8007d96:	e001      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d038      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dac:	2b05      	cmp	r3, #5
 8007dae:	d821      	bhi.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007db0:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db6:	bf00      	nop
 8007db8:	08007dfb 	.word	0x08007dfb
 8007dbc:	08007dd1 	.word	0x08007dd1
 8007dc0:	08007de3 	.word	0x08007de3
 8007dc4:	08007dfb 	.word	0x08007dfb
 8007dc8:	08007dfb 	.word	0x08007dfb
 8007dcc:	08007dfb 	.word	0x08007dfb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fdb4 	bl	8008944 <RCCEx_PLL2_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007de0:	e00c      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3324      	adds	r3, #36	; 0x24
 8007de6:	2101      	movs	r1, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fe5d 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007df2:	e003      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	75fb      	strb	r3, [r7, #23]
      break;
 8007df8:	e000      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e02:	4b77      	ldr	r3, [pc, #476]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e06:	f023 0207 	bic.w	r2, r3, #7
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0e:	4974      	ldr	r1, [pc, #464]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	654b      	str	r3, [r1, #84]	; 0x54
 8007e14:	e001      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d03a      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	d821      	bhi.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007e30:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e7b 	.word	0x08007e7b
 8007e3c:	08007e51 	.word	0x08007e51
 8007e40:	08007e63 	.word	0x08007e63
 8007e44:	08007e7b 	.word	0x08007e7b
 8007e48:	08007e7b 	.word	0x08007e7b
 8007e4c:	08007e7b 	.word	0x08007e7b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3304      	adds	r3, #4
 8007e54:	2101      	movs	r1, #1
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fd74 	bl	8008944 <RCCEx_PLL2_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007e60:	e00c      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3324      	adds	r3, #36	; 0x24
 8007e66:	2101      	movs	r1, #1
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fe1d 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007e72:	e003      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	75fb      	strb	r3, [r7, #23]
      break;
 8007e78:	e000      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e82:	4b57      	ldr	r3, [pc, #348]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e86:	f023 0207 	bic.w	r2, r3, #7
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e90:	4953      	ldr	r1, [pc, #332]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	658b      	str	r3, [r1, #88]	; 0x58
 8007e96:	e001      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d04b      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eb2:	d02e      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eb8:	d828      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ebe:	d02a      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec4:	d822      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eca:	d026      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ed0:	d81c      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed6:	d010      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007edc:	d816      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01d      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee6:	d111      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	2100      	movs	r1, #0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fd28 	bl	8008944 <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ef8:	e012      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3324      	adds	r3, #36	; 0x24
 8007efe:	2102      	movs	r1, #2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fdd1 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007f0a:	e009      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f10:	e006      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007f12:	bf00      	nop
 8007f14:	e004      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007f16:	bf00      	nop
 8007f18:	e002      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f26:	4b2e      	ldr	r3, [pc, #184]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f34:	492a      	ldr	r1, [pc, #168]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	654b      	str	r3, [r1, #84]	; 0x54
 8007f3a:	e001      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d04d      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f56:	d02e      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007f58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f5c:	d828      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f62:	d02a      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f68:	d822      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f6e:	d026      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f74:	d81c      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f7a:	d010      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f80:	d816      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01d      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f8a:	d111      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	2100      	movs	r1, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fcd6 	bl	8008944 <RCCEx_PLL2_Config>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f9c:	e012      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3324      	adds	r3, #36	; 0x24
 8007fa2:	2102      	movs	r1, #2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fd7f 	bl	8008aa8 <RCCEx_PLL3_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007fae:	e009      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb4:	e006      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007fb6:	bf00      	nop
 8007fb8:	e004      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007fba:	bf00      	nop
 8007fbc:	e002      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007fbe:	bf00      	nop
 8007fc0:	e000      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10c      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fca:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fd8:	4901      	ldr	r1, [pc, #4]	; (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	658b      	str	r3, [r1, #88]	; 0x58
 8007fde:	e003      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d04b      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ffa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ffe:	d02e      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008000:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008004:	d828      	bhi.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800800a:	d02a      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800800c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008010:	d822      	bhi.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008012:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008016:	d026      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008018:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800801c:	d81c      	bhi.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800801e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008022:	d010      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008028:	d816      	bhi.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d01d      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800802e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008032:	d111      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3304      	adds	r3, #4
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fc82 	bl	8008944 <RCCEx_PLL2_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008044:	e012      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3324      	adds	r3, #36	; 0x24
 800804a:	2102      	movs	r1, #2
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fd2b 	bl	8008aa8 <RCCEx_PLL3_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008056:	e009      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
      break;
 800805c:	e006      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800805e:	bf00      	nop
 8008060:	e004      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008062:	bf00      	nop
 8008064:	e002      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008066:	bf00      	nop
 8008068:	e000      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800806a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008072:	4b9d      	ldr	r3, [pc, #628]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008080:	4999      	ldr	r1, [pc, #612]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008082:	4313      	orrs	r3, r2
 8008084:	658b      	str	r3, [r1, #88]	; 0x58
 8008086:	e001      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01a      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	d10a      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3324      	adds	r3, #36	; 0x24
 80080a8:	2102      	movs	r1, #2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fcfc 	bl	8008aa8 <RCCEx_PLL3_Config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80080ba:	4b8b      	ldr	r3, [pc, #556]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080c8:	4987      	ldr	r1, [pc, #540]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e4:	d10a      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3324      	adds	r3, #36	; 0x24
 80080ea:	2102      	movs	r1, #2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fcdb 	bl	8008aa8 <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080fc:	4b7a      	ldr	r3, [pc, #488]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800810a:	4977      	ldr	r1, [pc, #476]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800810c:	4313      	orrs	r3, r2
 800810e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d034      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008126:	d01d      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800812c:	d817      	bhi.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008136:	d009      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008138:	e011      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3304      	adds	r3, #4
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f000 fbff 	bl	8008944 <RCCEx_PLL2_Config>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800814a:	e00c      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3324      	adds	r3, #36	; 0x24
 8008150:	2102      	movs	r1, #2
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fca8 	bl	8008aa8 <RCCEx_PLL3_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800815c:	e003      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	75fb      	strb	r3, [r7, #23]
      break;
 8008162:	e000      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008166:	7dfb      	ldrb	r3, [r7, #23]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800816c:	4b5e      	ldr	r3, [pc, #376]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800816e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800817a:	495b      	ldr	r1, [pc, #364]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800817c:	4313      	orrs	r3, r2
 800817e:	658b      	str	r3, [r1, #88]	; 0x58
 8008180:	e001      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d033      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800819c:	d01c      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800819e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081a2:	d816      	bhi.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80081a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081a8:	d003      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80081aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ae:	d007      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80081b0:	e00f      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b2:	4b4d      	ldr	r3, [pc, #308]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	4a4c      	ldr	r2, [pc, #304]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80081be:	e00c      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3324      	adds	r3, #36	; 0x24
 80081c4:	2101      	movs	r1, #1
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fc6e 	bl	8008aa8 <RCCEx_PLL3_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80081d0:	e003      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	75fb      	strb	r3, [r7, #23]
      break;
 80081d6:	e000      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80081d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081e0:	4b41      	ldr	r3, [pc, #260]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ee:	493e      	ldr	r1, [pc, #248]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	654b      	str	r3, [r1, #84]	; 0x54
 80081f4:	e001      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d029      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800820e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008212:	d007      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008214:	e00f      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008216:	4b34      	ldr	r3, [pc, #208]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	4a33      	ldr	r2, [pc, #204]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800821c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008220:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008222:	e00b      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3304      	adds	r3, #4
 8008228:	2102      	movs	r1, #2
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fb8a 	bl	8008944 <RCCEx_PLL2_Config>
 8008230:	4603      	mov	r3, r0
 8008232:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008234:	e002      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]
      break;
 800823a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008242:	4b29      	ldr	r3, [pc, #164]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824e:	4926      	ldr	r1, [pc, #152]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008250:	4313      	orrs	r3, r2
 8008252:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008254:	e001      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3324      	adds	r3, #36	; 0x24
 800826a:	2102      	movs	r1, #2
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fc1b 	bl	8008aa8 <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d033      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800828c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008290:	d017      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008296:	d811      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829c:	d013      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800829e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a2:	d80b      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d010      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80082a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ac:	d106      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	4a0d      	ldr	r2, [pc, #52]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80082ba:	e007      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	75fb      	strb	r3, [r7, #23]
      break;
 80082c0:	e004      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80082c2:	bf00      	nop
 80082c4:	e002      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80082c6:	bf00      	nop
 80082c8:	e000      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80082ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10c      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082de:	4902      	ldr	r1, [pc, #8]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	654b      	str	r3, [r1, #84]	; 0x54
 80082e4:	e004      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80082e6:	bf00      	nop
 80082e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082fc:	4b31      	ldr	r3, [pc, #196]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80082fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008300:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008308:	492e      	ldr	r1, [pc, #184]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800830a:	4313      	orrs	r3, r2
 800830c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800831a:	4b2a      	ldr	r3, [pc, #168]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008328:	4926      	ldr	r1, [pc, #152]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800832a:	4313      	orrs	r3, r2
 800832c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d008      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800833a:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008346:	491f      	ldr	r1, [pc, #124]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008348:	4313      	orrs	r3, r2
 800834a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00d      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008358:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	4a19      	ldr	r2, [pc, #100]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800835e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008362:	6113      	str	r3, [r2, #16]
 8008364:	4b17      	ldr	r3, [pc, #92]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800836e:	4915      	ldr	r1, [pc, #84]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008370:	4313      	orrs	r3, r2
 8008372:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	da08      	bge.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800837e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008380:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008388:	490e      	ldr	r1, [pc, #56]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800838a:	4313      	orrs	r3, r2
 800838c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800839a:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800839c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a8:	4906      	ldr	r1, [pc, #24]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80083ae:	7dbb      	ldrb	r3, [r7, #22]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	e000      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	58024400 	.word	0x58024400

080083c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80083cc:	f7ff f85a 	bl	8007484 <HAL_RCC_GetHCLKFreq>
 80083d0:	4602      	mov	r2, r0
 80083d2:	4b06      	ldr	r3, [pc, #24]	; (80083ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	091b      	lsrs	r3, r3, #4
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	4904      	ldr	r1, [pc, #16]	; (80083f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80083de:	5ccb      	ldrb	r3, [r1, r3]
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	58024400 	.word	0x58024400
 80083f0:	0800be0c 	.word	0x0800be0c

080083f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b089      	sub	sp, #36	; 0x24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083fc:	4ba1      	ldr	r3, [pc, #644]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008406:	4b9f      	ldr	r3, [pc, #636]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	0b1b      	lsrs	r3, r3, #12
 800840c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008410:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008412:	4b9c      	ldr	r3, [pc, #624]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	091b      	lsrs	r3, r3, #4
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800841e:	4b99      	ldr	r3, [pc, #612]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008422:	08db      	lsrs	r3, r3, #3
 8008424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	fb02 f303 	mul.w	r3, r2, r3
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008436:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 8111 	beq.w	8008664 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	2b02      	cmp	r3, #2
 8008446:	f000 8083 	beq.w	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b02      	cmp	r3, #2
 800844e:	f200 80a1 	bhi.w	8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d003      	beq.n	8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d056      	beq.n	800850c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800845e:	e099      	b.n	8008594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008460:	4b88      	ldr	r3, [pc, #544]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0320 	and.w	r3, r3, #32
 8008468:	2b00      	cmp	r3, #0
 800846a:	d02d      	beq.n	80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800846c:	4b85      	ldr	r3, [pc, #532]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	08db      	lsrs	r3, r3, #3
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	4a84      	ldr	r2, [pc, #528]	; (8008688 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
 800847c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b7b      	ldr	r3, [pc, #492]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800868c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084c6:	e087      	b.n	80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008690 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80084d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084da:	4b6a      	ldr	r3, [pc, #424]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800868c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800850a:	e065      	b.n	80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800851a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851e:	4b59      	ldr	r3, [pc, #356]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008532:	eddf 5a56 	vldr	s11, [pc, #344]	; 800868c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800854e:	e043      	b.n	80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800855e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008562:	4b48      	ldr	r3, [pc, #288]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	ed97 6a03 	vldr	s12, [r7, #12]
 8008576:	eddf 5a45 	vldr	s11, [pc, #276]	; 800868c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800857a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008592:	e021      	b.n	80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80085a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a6:	4b37      	ldr	r3, [pc, #220]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800868c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80085d8:	4b2a      	ldr	r3, [pc, #168]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	0a5b      	lsrs	r3, r3, #9
 80085de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80085f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085fe:	ee17 2a90 	vmov	r2, s15
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008606:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008610:	ee07 3a90 	vmov	s15, r3
 8008614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800861c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008620:	edd7 6a07 	vldr	s13, [r7, #28]
 8008624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800862c:	ee17 2a90 	vmov	r2, s15
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008634:	4b13      	ldr	r3, [pc, #76]	; (8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	0e1b      	lsrs	r3, r3, #24
 800863a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800864a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800864e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800865a:	ee17 2a90 	vmov	r2, s15
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008662:	e008      	b.n	8008676 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	609a      	str	r2, [r3, #8]
}
 8008676:	bf00      	nop
 8008678:	3724      	adds	r7, #36	; 0x24
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	58024400 	.word	0x58024400
 8008688:	03d09000 	.word	0x03d09000
 800868c:	46000000 	.word	0x46000000
 8008690:	4c742400 	.word	0x4c742400
 8008694:	4a742400 	.word	0x4a742400
 8008698:	4af42400 	.word	0x4af42400

0800869c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	; 0x24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086a4:	4ba1      	ldr	r3, [pc, #644]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	f003 0303 	and.w	r3, r3, #3
 80086ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80086ae:	4b9f      	ldr	r3, [pc, #636]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	0d1b      	lsrs	r3, r3, #20
 80086b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80086ba:	4b9c      	ldr	r3, [pc, #624]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80086c6:	4b99      	ldr	r3, [pc, #612]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ca:	08db      	lsrs	r3, r3, #3
 80086cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8111 	beq.w	800890c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	f000 8083 	beq.w	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	f200 80a1 	bhi.w	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d056      	beq.n	80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008706:	e099      	b.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008708:	4b88      	ldr	r3, [pc, #544]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d02d      	beq.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008714:	4b85      	ldr	r3, [pc, #532]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	08db      	lsrs	r3, r3, #3
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	4a84      	ldr	r2, [pc, #528]	; (8008930 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008720:	fa22 f303 	lsr.w	r3, r2, r3
 8008724:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b7b      	ldr	r3, [pc, #492]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008752:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800876e:	e087      	b.n	8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008938 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b6a      	ldr	r3, [pc, #424]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a03 	vldr	s12, [r7, #12]
 8008796:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087b2:	e065      	b.n	8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800893c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b59      	ldr	r3, [pc, #356]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087f6:	e043      	b.n	8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b48      	ldr	r3, [pc, #288]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a03 	vldr	s12, [r7, #12]
 800881e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800883a:	e021      	b.n	8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800893c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b37      	ldr	r3, [pc, #220]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008862:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800887e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008880:	4b2a      	ldr	r3, [pc, #168]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	0a5b      	lsrs	r3, r3, #9
 8008886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800889a:	edd7 6a07 	vldr	s13, [r7, #28]
 800889e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a6:	ee17 2a90 	vmov	r2, s15
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80088ae:	4b1f      	ldr	r3, [pc, #124]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	0c1b      	lsrs	r3, r3, #16
 80088b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d4:	ee17 2a90 	vmov	r2, s15
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80088dc:	4b13      	ldr	r3, [pc, #76]	; (800892c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e0:	0e1b      	lsrs	r3, r3, #24
 80088e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008902:	ee17 2a90 	vmov	r2, s15
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800890a:	e008      	b.n	800891e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	609a      	str	r2, [r3, #8]
}
 800891e:	bf00      	nop
 8008920:	3724      	adds	r7, #36	; 0x24
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	58024400 	.word	0x58024400
 8008930:	03d09000 	.word	0x03d09000
 8008934:	46000000 	.word	0x46000000
 8008938:	4c742400 	.word	0x4c742400
 800893c:	4a742400 	.word	0x4a742400
 8008940:	4af42400 	.word	0x4af42400

08008944 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008952:	4b53      	ldr	r3, [pc, #332]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	2b03      	cmp	r3, #3
 800895c:	d101      	bne.n	8008962 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e099      	b.n	8008a96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008962:	4b4f      	ldr	r3, [pc, #316]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a4e      	ldr	r2, [pc, #312]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008968:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800896c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896e:	f7fa faa5 	bl	8002ebc <HAL_GetTick>
 8008972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008974:	e008      	b.n	8008988 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008976:	f7fa faa1 	bl	8002ebc <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e086      	b.n	8008a96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008988:	4b45      	ldr	r3, [pc, #276]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1f0      	bne.n	8008976 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008994:	4b42      	ldr	r3, [pc, #264]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	031b      	lsls	r3, r3, #12
 80089a2:	493f      	ldr	r1, [pc, #252]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	628b      	str	r3, [r1, #40]	; 0x28
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	025b      	lsls	r3, r3, #9
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	041b      	lsls	r3, r3, #16
 80089c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	061b      	lsls	r3, r3, #24
 80089d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089d8:	4931      	ldr	r1, [pc, #196]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80089de:	4b30      	ldr	r3, [pc, #192]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	492d      	ldr	r1, [pc, #180]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80089f0:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	f023 0220 	bic.w	r2, r3, #32
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	4928      	ldr	r1, [pc, #160]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a02:	4b27      	ldr	r3, [pc, #156]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	4a26      	ldr	r2, [pc, #152]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a08:	f023 0310 	bic.w	r3, r3, #16
 8008a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a0e:	4b24      	ldr	r3, [pc, #144]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a12:	4b24      	ldr	r3, [pc, #144]	; (8008aa4 <RCCEx_PLL2_Config+0x160>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	69d2      	ldr	r2, [r2, #28]
 8008a1a:	00d2      	lsls	r2, r2, #3
 8008a1c:	4920      	ldr	r1, [pc, #128]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a22:	4b1f      	ldr	r3, [pc, #124]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a28:	f043 0310 	orr.w	r3, r3, #16
 8008a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a34:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a40:	e00f      	b.n	8008a62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d106      	bne.n	8008a56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a48:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	4a14      	ldr	r2, [pc, #80]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a54:	e005      	b.n	8008a62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a56:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	4a11      	ldr	r2, [pc, #68]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a62:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a0e      	ldr	r2, [pc, #56]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a6e:	f7fa fa25 	bl	8002ebc <HAL_GetTick>
 8008a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a74:	e008      	b.n	8008a88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a76:	f7fa fa21 	bl	8002ebc <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d901      	bls.n	8008a88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e006      	b.n	8008a96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <RCCEx_PLL2_Config+0x15c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0f0      	beq.n	8008a76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	ffff0007 	.word	0xffff0007

08008aa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ab6:	4b53      	ldr	r3, [pc, #332]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d101      	bne.n	8008ac6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e099      	b.n	8008bfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ac6:	4b4f      	ldr	r3, [pc, #316]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a4e      	ldr	r2, [pc, #312]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad2:	f7fa f9f3 	bl	8002ebc <HAL_GetTick>
 8008ad6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ad8:	e008      	b.n	8008aec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ada:	f7fa f9ef 	bl	8002ebc <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e086      	b.n	8008bfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aec:	4b45      	ldr	r3, [pc, #276]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1f0      	bne.n	8008ada <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008af8:	4b42      	ldr	r3, [pc, #264]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	051b      	lsls	r3, r3, #20
 8008b06:	493f      	ldr	r1, [pc, #252]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	628b      	str	r3, [r1, #40]	; 0x28
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	025b      	lsls	r3, r3, #9
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	041b      	lsls	r3, r3, #16
 8008b2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	061b      	lsls	r3, r3, #24
 8008b38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b3c:	4931      	ldr	r1, [pc, #196]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b42:	4b30      	ldr	r3, [pc, #192]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	492d      	ldr	r1, [pc, #180]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b54:	4b2b      	ldr	r3, [pc, #172]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	4928      	ldr	r1, [pc, #160]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b66:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	4a26      	ldr	r2, [pc, #152]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b72:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b76:	4b24      	ldr	r3, [pc, #144]	; (8008c08 <RCCEx_PLL3_Config+0x160>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	69d2      	ldr	r2, [r2, #28]
 8008b7e:	00d2      	lsls	r2, r2, #3
 8008b80:	4920      	ldr	r1, [pc, #128]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b86:	4b1f      	ldr	r3, [pc, #124]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	4a1e      	ldr	r2, [pc, #120]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b98:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	4a19      	ldr	r2, [pc, #100]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008b9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ba4:	e00f      	b.n	8008bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d106      	bne.n	8008bba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008bac:	4b15      	ldr	r3, [pc, #84]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	4a14      	ldr	r2, [pc, #80]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008bb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bb8:	e005      	b.n	8008bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008bba:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	4a11      	ldr	r2, [pc, #68]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a0e      	ldr	r2, [pc, #56]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd2:	f7fa f973 	bl	8002ebc <HAL_GetTick>
 8008bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bd8:	e008      	b.n	8008bec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bda:	f7fa f96f 	bl	8002ebc <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e006      	b.n	8008bfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <RCCEx_PLL3_Config+0x15c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0f0      	beq.n	8008bda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	58024400 	.word	0x58024400
 8008c08:	ffff0007 	.word	0xffff0007

08008c0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e0f1      	b.n	8008e02 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a78      	ldr	r2, [pc, #480]	; (8008e0c <HAL_SPI_Init+0x200>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00f      	beq.n	8008c4e <HAL_SPI_Init+0x42>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a77      	ldr	r2, [pc, #476]	; (8008e10 <HAL_SPI_Init+0x204>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00a      	beq.n	8008c4e <HAL_SPI_Init+0x42>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a75      	ldr	r2, [pc, #468]	; (8008e14 <HAL_SPI_Init+0x208>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d005      	beq.n	8008c4e <HAL_SPI_Init+0x42>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d901      	bls.n	8008c4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e0d9      	b.n	8008e02 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fba2 	bl	8009398 <SPI_GetPacketSize>
 8008c54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a6c      	ldr	r2, [pc, #432]	; (8008e0c <HAL_SPI_Init+0x200>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d00c      	beq.n	8008c7a <HAL_SPI_Init+0x6e>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a6a      	ldr	r2, [pc, #424]	; (8008e10 <HAL_SPI_Init+0x204>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d007      	beq.n	8008c7a <HAL_SPI_Init+0x6e>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a69      	ldr	r2, [pc, #420]	; (8008e14 <HAL_SPI_Init+0x208>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d002      	beq.n	8008c7a <HAL_SPI_Init+0x6e>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d811      	bhi.n	8008c9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c7e:	4a63      	ldr	r2, [pc, #396]	; (8008e0c <HAL_SPI_Init+0x200>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d009      	beq.n	8008c98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a61      	ldr	r2, [pc, #388]	; (8008e10 <HAL_SPI_Init+0x204>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d004      	beq.n	8008c98 <HAL_SPI_Init+0x8c>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a60      	ldr	r2, [pc, #384]	; (8008e14 <HAL_SPI_Init+0x208>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d104      	bne.n	8008ca2 <HAL_SPI_Init+0x96>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b10      	cmp	r3, #16
 8008c9c:	d901      	bls.n	8008ca2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e0af      	b.n	8008e02 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7f9 fe3a 	bl	8002930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008cde:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ce8:	d119      	bne.n	8008d1e <HAL_SPI_Init+0x112>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf2:	d103      	bne.n	8008cfc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d008      	beq.n	8008d0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10c      	bne.n	8008d1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d0c:	d107      	bne.n	8008d1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69da      	ldr	r2, [r3, #28]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d26:	431a      	orrs	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d30:	ea42 0103 	orr.w	r1, r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	431a      	orrs	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7e:	ea42 0103 	orr.w	r1, r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d113      	bne.n	8008dbe <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008da8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dbc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0201 	bic.w	r2, r2, #1
 8008dcc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40013000 	.word	0x40013000
 8008e10:	40003800 	.word	0x40003800
 8008e14:	40003c00 	.word	0x40003c00

08008e18 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	; 0x28
 8008e1c:	af02      	add	r7, sp, #8
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	4613      	mov	r3, r2
 8008e26:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3320      	adds	r3, #32
 8008e2e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_SPI_Transmit+0x2a>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e1d7      	b.n	80091f2 <HAL_SPI_Transmit+0x3da>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e4a:	f7fa f837 	bl	8002ebc <HAL_GetTick>
 8008e4e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d007      	beq.n	8008e6c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008e68:	7efb      	ldrb	r3, [r7, #27]
 8008e6a:	e1c2      	b.n	80091f2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <HAL_SPI_Transmit+0x60>
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d107      	bne.n	8008e88 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008e84:	7efb      	ldrb	r3, [r7, #27]
 8008e86:	e1b4      	b.n	80091f2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	88fa      	ldrh	r2, [r7, #6]
 8008eaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008ed8:	d107      	bne.n	8008eea <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	4b96      	ldr	r3, [pc, #600]	; (800914c <HAL_SPI_Transmit+0x334>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	88f9      	ldrh	r1, [r7, #6]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	430b      	orrs	r3, r1
 8008efc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0201 	orr.w	r2, r2, #1
 8008f0c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f16:	d107      	bne.n	8008f28 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b0f      	cmp	r3, #15
 8008f2e:	d947      	bls.n	8008fc0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008f30:	e03f      	b.n	8008fb2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d114      	bne.n	8008f6a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6812      	ldr	r2, [r2, #0]
 8008f4a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f50:	1d1a      	adds	r2, r3, #4
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f68:	e023      	b.n	8008fb2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f6a:	f7f9 ffa7 	bl	8002ebc <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d803      	bhi.n	8008f82 <HAL_SPI_Transmit+0x16a>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d102      	bne.n	8008f88 <HAL_SPI_Transmit+0x170>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d114      	bne.n	8008fb2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f937 	bl	80091fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e11f      	b.n	80091f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1b9      	bne.n	8008f32 <HAL_SPI_Transmit+0x11a>
 8008fbe:	e0f2      	b.n	80091a6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	2b07      	cmp	r3, #7
 8008fc6:	f240 80e7 	bls.w	8009198 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008fca:	e05d      	b.n	8009088 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d132      	bne.n	8009040 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d918      	bls.n	8009018 <HAL_SPI_Transmit+0x200>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d014      	beq.n	8009018 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6812      	ldr	r2, [r2, #0]
 8008ff8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800900a:	b29b      	uxth	r3, r3
 800900c:	3b02      	subs	r3, #2
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009016:	e037      	b.n	8009088 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901c:	881a      	ldrh	r2, [r3, #0]
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009026:	1c9a      	adds	r2, r3, #2
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800903e:	e023      	b.n	8009088 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009040:	f7f9 ff3c 	bl	8002ebc <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	429a      	cmp	r2, r3
 800904e:	d803      	bhi.n	8009058 <HAL_SPI_Transmit+0x240>
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009056:	d102      	bne.n	800905e <HAL_SPI_Transmit+0x246>
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d114      	bne.n	8009088 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f8cc 	bl	80091fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e0b4      	b.n	80091f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800908e:	b29b      	uxth	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d19b      	bne.n	8008fcc <HAL_SPI_Transmit+0x1b4>
 8009094:	e087      	b.n	80091a6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d155      	bne.n	8009150 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d918      	bls.n	80090e2 <HAL_SPI_Transmit+0x2ca>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b4:	2b40      	cmp	r3, #64	; 0x40
 80090b6:	d914      	bls.n	80090e2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6812      	ldr	r2, [r2, #0]
 80090c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c8:	1d1a      	adds	r2, r3, #4
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	3b04      	subs	r3, #4
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80090e0:	e05a      	b.n	8009198 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d917      	bls.n	800911e <HAL_SPI_Transmit+0x306>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d013      	beq.n	800911e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090fa:	881a      	ldrh	r2, [r3, #0]
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009104:	1c9a      	adds	r2, r3, #2
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b02      	subs	r3, #2
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800911c:	e03c      	b.n	8009198 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3320      	adds	r3, #32
 8009128:	7812      	ldrb	r2, [r2, #0]
 800912a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	b29a      	uxth	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009148:	e026      	b.n	8009198 <HAL_SPI_Transmit+0x380>
 800914a:	bf00      	nop
 800914c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009150:	f7f9 feb4 	bl	8002ebc <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d803      	bhi.n	8009168 <HAL_SPI_Transmit+0x350>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009166:	d102      	bne.n	800916e <HAL_SPI_Transmit+0x356>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d114      	bne.n	8009198 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 f844 	bl	80091fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009182:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e02c      	b.n	80091f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800919e:	b29b      	uxth	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f47f af78 	bne.w	8009096 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2108      	movs	r1, #8
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f8c3 	bl	800933c <SPI_WaitOnFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c2:	f043 0220 	orr.w	r2, r3, #32
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f815 	bl	80091fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80091f0:	7efb      	ldrb	r3, [r7, #27]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3720      	adds	r7, #32
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop

080091fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	699a      	ldr	r2, [r3, #24]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f042 0208 	orr.w	r2, r2, #8
 800921a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699a      	ldr	r2, [r3, #24]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0210 	orr.w	r2, r2, #16
 800922a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0201 	bic.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6919      	ldr	r1, [r3, #16]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b3c      	ldr	r3, [pc, #240]	; (8009338 <SPI_CloseTransfer+0x13c>)
 8009248:	400b      	ands	r3, r1
 800924a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800925a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b04      	cmp	r3, #4
 8009266:	d014      	beq.n	8009292 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00f      	beq.n	8009292 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0220 	orr.w	r2, r2, #32
 8009290:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b03      	cmp	r3, #3
 800929c:	d014      	beq.n	80092c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00f      	beq.n	80092c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ae:	f043 0204 	orr.w	r2, r3, #4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699a      	ldr	r2, [r3, #24]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00f      	beq.n	80092f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d8:	f043 0201 	orr.w	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00f      	beq.n	800931c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009302:	f043 0208 	orr.w	r2, r3, #8
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800931a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800932c:	bf00      	nop
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	fffffc90 	.word	0xfffffc90

0800933c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	4613      	mov	r3, r2
 800934a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800934c:	e010      	b.n	8009370 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800934e:	f7f9 fdb5 	bl	8002ebc <HAL_GetTick>
 8009352:	4602      	mov	r2, r0
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	429a      	cmp	r2, r3
 800935c:	d803      	bhi.n	8009366 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d102      	bne.n	800936c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e00f      	b.n	8009390 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	695a      	ldr	r2, [r3, #20]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	4013      	ands	r3, r2
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	429a      	cmp	r2, r3
 800937e:	bf0c      	ite	eq
 8009380:	2301      	moveq	r3, #1
 8009382:	2300      	movne	r3, #0
 8009384:	b2db      	uxtb	r3, r3
 8009386:	461a      	mov	r2, r3
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	429a      	cmp	r2, r3
 800938c:	d0df      	beq.n	800934e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a4:	095b      	lsrs	r3, r3, #5
 80093a6:	3301      	adds	r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	3307      	adds	r3, #7
 80093b6:	08db      	lsrs	r3, r3, #3
 80093b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	fb02 f303 	mul.w	r3, r2, r3
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e042      	b.n	8009466 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7f9 fb08 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2224      	movs	r2, #36	; 0x24
 80093fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 0201 	bic.w	r2, r2, #1
 800940e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fbeb 	bl	8009bec <UART_SetConfig>
 8009416:	4603      	mov	r3, r0
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e022      	b.n	8009466 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 f947 	bl	800a6bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800943c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800944c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f001 f9ce 	bl	800a800 <UART_CheckIdleState>
 8009464:	4603      	mov	r3, r0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b0ba      	sub	sp, #232	; 0xe8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800949a:	f640 030f 	movw	r3, #2063	; 0x80f
 800949e:	4013      	ands	r3, r2
 80094a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80094a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d11b      	bne.n	80094e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d015      	beq.n	80094e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094bc:	f003 0320 	and.w	r3, r3, #32
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d009      	beq.n	80094e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 835a 	beq.w	8009b8e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	4798      	blx	r3
      }
      return;
 80094e2:	e354      	b.n	8009b8e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 811f 	beq.w	800972c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80094f2:	4b8b      	ldr	r3, [pc, #556]	; (8009720 <HAL_UART_IRQHandler+0x2b0>)
 80094f4:	4013      	ands	r3, r2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d106      	bne.n	8009508 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80094fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80094fe:	4b89      	ldr	r3, [pc, #548]	; (8009724 <HAL_UART_IRQHandler+0x2b4>)
 8009500:	4013      	ands	r3, r2
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8112 	beq.w	800972c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d011      	beq.n	8009538 <HAL_UART_IRQHandler+0xc8>
 8009514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2201      	movs	r2, #1
 8009526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800952e:	f043 0201 	orr.w	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d011      	beq.n	8009568 <HAL_UART_IRQHandler+0xf8>
 8009544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2202      	movs	r2, #2
 8009556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800955e:	f043 0204 	orr.w	r2, r3, #4
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	d011      	beq.n	8009598 <HAL_UART_IRQHandler+0x128>
 8009574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00b      	beq.n	8009598 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2204      	movs	r2, #4
 8009586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800958e:	f043 0202 	orr.w	r2, r3, #2
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959c:	f003 0308 	and.w	r3, r3, #8
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d017      	beq.n	80095d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d105      	bne.n	80095bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095b4:	4b5a      	ldr	r3, [pc, #360]	; (8009720 <HAL_UART_IRQHandler+0x2b0>)
 80095b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2208      	movs	r2, #8
 80095c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ca:	f043 0208 	orr.w	r2, r3, #8
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d012      	beq.n	8009606 <HAL_UART_IRQHandler+0x196>
 80095e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00c      	beq.n	8009606 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095fc:	f043 0220 	orr.w	r2, r3, #32
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 82c0 	beq.w	8009b92 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009616:	f003 0320 	and.w	r3, r3, #32
 800961a:	2b00      	cmp	r3, #0
 800961c:	d013      	beq.n	8009646 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800961e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	d105      	bne.n	8009636 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800962a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d007      	beq.n	8009646 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800964c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965a:	2b40      	cmp	r3, #64	; 0x40
 800965c:	d005      	beq.n	800966a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800965e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009662:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009666:	2b00      	cmp	r3, #0
 8009668:	d04f      	beq.n	800970a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 f9dc 	bl	800aa28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	d141      	bne.n	8009702 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3308      	adds	r3, #8
 8009684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3308      	adds	r3, #8
 80096a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1d9      	bne.n	800967e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d013      	beq.n	80096fa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096d6:	4a14      	ldr	r2, [pc, #80]	; (8009728 <HAL_UART_IRQHandler+0x2b8>)
 80096d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fa fbc6 	bl	8003e70 <HAL_DMA_Abort_IT>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d017      	beq.n	800971a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f8:	e00f      	b.n	800971a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa60 	bl	8009bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009700:	e00b      	b.n	800971a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa5c 	bl	8009bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009708:	e007      	b.n	800971a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa58 	bl	8009bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009718:	e23b      	b.n	8009b92 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800971a:	bf00      	nop
    return;
 800971c:	e239      	b.n	8009b92 <HAL_UART_IRQHandler+0x722>
 800971e:	bf00      	nop
 8009720:	10000001 	.word	0x10000001
 8009724:	04000120 	.word	0x04000120
 8009728:	0800aaf5 	.word	0x0800aaf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009730:	2b01      	cmp	r3, #1
 8009732:	f040 81ce 	bne.w	8009ad2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800973a:	f003 0310 	and.w	r3, r3, #16
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 81c7 	beq.w	8009ad2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 81c0 	beq.w	8009ad2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2210      	movs	r2, #16
 8009758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009764:	2b40      	cmp	r3, #64	; 0x40
 8009766:	f040 813b 	bne.w	80099e0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a8b      	ldr	r2, [pc, #556]	; (80099a0 <HAL_UART_IRQHandler+0x530>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d059      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a89      	ldr	r2, [pc, #548]	; (80099a4 <HAL_UART_IRQHandler+0x534>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d053      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a87      	ldr	r2, [pc, #540]	; (80099a8 <HAL_UART_IRQHandler+0x538>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d04d      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a85      	ldr	r2, [pc, #532]	; (80099ac <HAL_UART_IRQHandler+0x53c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d047      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a83      	ldr	r2, [pc, #524]	; (80099b0 <HAL_UART_IRQHandler+0x540>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d041      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a81      	ldr	r2, [pc, #516]	; (80099b4 <HAL_UART_IRQHandler+0x544>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d03b      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a7f      	ldr	r2, [pc, #508]	; (80099b8 <HAL_UART_IRQHandler+0x548>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d035      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a7d      	ldr	r2, [pc, #500]	; (80099bc <HAL_UART_IRQHandler+0x54c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d02f      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a7b      	ldr	r2, [pc, #492]	; (80099c0 <HAL_UART_IRQHandler+0x550>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d029      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a79      	ldr	r2, [pc, #484]	; (80099c4 <HAL_UART_IRQHandler+0x554>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d023      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a77      	ldr	r2, [pc, #476]	; (80099c8 <HAL_UART_IRQHandler+0x558>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d01d      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a75      	ldr	r2, [pc, #468]	; (80099cc <HAL_UART_IRQHandler+0x55c>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d017      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a73      	ldr	r2, [pc, #460]	; (80099d0 <HAL_UART_IRQHandler+0x560>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d011      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a71      	ldr	r2, [pc, #452]	; (80099d4 <HAL_UART_IRQHandler+0x564>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00b      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a6f      	ldr	r2, [pc, #444]	; (80099d8 <HAL_UART_IRQHandler+0x568>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d005      	beq.n	800982a <HAL_UART_IRQHandler+0x3ba>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a6d      	ldr	r2, [pc, #436]	; (80099dc <HAL_UART_IRQHandler+0x56c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d105      	bne.n	8009836 <HAL_UART_IRQHandler+0x3c6>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	b29b      	uxth	r3, r3
 8009834:	e004      	b.n	8009840 <HAL_UART_IRQHandler+0x3d0>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	b29b      	uxth	r3, r3
 8009840:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 81a4 	beq.w	8009b96 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009854:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009858:	429a      	cmp	r2, r3
 800985a:	f080 819c 	bcs.w	8009b96 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009864:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009872:	f000 8086 	beq.w	8009982 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800988a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800988e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	461a      	mov	r2, r3
 800989c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80098ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1da      	bne.n	8009876 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3308      	adds	r3, #8
 80098c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ca:	e853 3f00 	ldrex	r3, [r3]
 80098ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e1      	bne.n	80098c0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3308      	adds	r3, #8
 8009902:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800990c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800990e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009920:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009922:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009926:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800992e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e3      	bne.n	80098fc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009952:	f023 0310 	bic.w	r3, r3, #16
 8009956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009964:	65bb      	str	r3, [r7, #88]	; 0x58
 8009966:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800996a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e4      	bne.n	8009942 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800997c:	4618      	mov	r0, r3
 800997e:	f7f9 ff59 	bl	8003834 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800998e:	b29b      	uxth	r3, r3
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	b29b      	uxth	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f91c 	bl	8009bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800999c:	e0fb      	b.n	8009b96 <HAL_UART_IRQHandler+0x726>
 800999e:	bf00      	nop
 80099a0:	40020010 	.word	0x40020010
 80099a4:	40020028 	.word	0x40020028
 80099a8:	40020040 	.word	0x40020040
 80099ac:	40020058 	.word	0x40020058
 80099b0:	40020070 	.word	0x40020070
 80099b4:	40020088 	.word	0x40020088
 80099b8:	400200a0 	.word	0x400200a0
 80099bc:	400200b8 	.word	0x400200b8
 80099c0:	40020410 	.word	0x40020410
 80099c4:	40020428 	.word	0x40020428
 80099c8:	40020440 	.word	0x40020440
 80099cc:	40020458 	.word	0x40020458
 80099d0:	40020470 	.word	0x40020470
 80099d4:	40020488 	.word	0x40020488
 80099d8:	400204a0 	.word	0x400204a0
 80099dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 80cc 	beq.w	8009b9a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009a02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 80c7 	beq.w	8009b9a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	e853 3f00 	ldrex	r3, [r3]
 8009a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e4      	bne.n	8009a0c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3308      	adds	r3, #8
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	e853 3f00 	ldrex	r3, [r3]
 8009a50:	623b      	str	r3, [r7, #32]
   return(result);
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	4b54      	ldr	r3, [pc, #336]	; (8009ba8 <HAL_UART_IRQHandler+0x738>)
 8009a56:	4013      	ands	r3, r2
 8009a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a66:	633a      	str	r2, [r7, #48]	; 0x30
 8009a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e3      	bne.n	8009a42 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f023 0310 	bic.w	r3, r3, #16
 8009aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ab0:	61fb      	str	r3, [r7, #28]
 8009ab2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	69b9      	ldr	r1, [r7, #24]
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	617b      	str	r3, [r7, #20]
   return(result);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e4      	bne.n	8009a8e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f882 	bl	8009bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ad0:	e063      	b.n	8009b9a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00e      	beq.n	8009afc <HAL_UART_IRQHandler+0x68c>
 8009ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009af2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 f83e 	bl	800ab76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009afa:	e051      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d014      	beq.n	8009b32 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d008      	beq.n	8009b32 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d03a      	beq.n	8009b9e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	4798      	blx	r3
    }
    return;
 8009b30:	e035      	b.n	8009b9e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d009      	beq.n	8009b52 <HAL_UART_IRQHandler+0x6e2>
 8009b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 ffe8 	bl	800ab20 <UART_EndTransmit_IT>
    return;
 8009b50:	e026      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <HAL_UART_IRQHandler+0x702>
 8009b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 f817 	bl	800ab9e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b70:	e016      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d010      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x730>
 8009b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	da0c      	bge.n	8009ba0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 ffff 	bl	800ab8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b8c:	e008      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
      return;
 8009b8e:	bf00      	nop
 8009b90:	e006      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
    return;
 8009b92:	bf00      	nop
 8009b94:	e004      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
      return;
 8009b96:	bf00      	nop
 8009b98:	e002      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
      return;
 8009b9a:	bf00      	nop
 8009b9c:	e000      	b.n	8009ba0 <HAL_UART_IRQHandler+0x730>
    return;
 8009b9e:	bf00      	nop
  }
}
 8009ba0:	37e8      	adds	r7, #232	; 0xe8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	effffffe 	.word	0xeffffffe

08009bac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bf0:	b092      	sub	sp, #72	; 0x48
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	431a      	orrs	r2, r3
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4bbe      	ldr	r3, [pc, #760]	; (8009f14 <UART_SetConfig+0x328>)
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	6812      	ldr	r2, [r2, #0]
 8009c22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c24:	430b      	orrs	r3, r1
 8009c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4ab3      	ldr	r2, [pc, #716]	; (8009f18 <UART_SetConfig+0x32c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d004      	beq.n	8009c58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c54:	4313      	orrs	r3, r2
 8009c56:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	4baf      	ldr	r3, [pc, #700]	; (8009f1c <UART_SetConfig+0x330>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c68:	430b      	orrs	r3, r1
 8009c6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c72:	f023 010f 	bic.w	r1, r3, #15
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4aa6      	ldr	r2, [pc, #664]	; (8009f20 <UART_SetConfig+0x334>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d177      	bne.n	8009d7c <UART_SetConfig+0x190>
 8009c8c:	4ba5      	ldr	r3, [pc, #660]	; (8009f24 <UART_SetConfig+0x338>)
 8009c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c94:	2b28      	cmp	r3, #40	; 0x28
 8009c96:	d86d      	bhi.n	8009d74 <UART_SetConfig+0x188>
 8009c98:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0xb4>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009d45 	.word	0x08009d45
 8009ca4:	08009d75 	.word	0x08009d75
 8009ca8:	08009d75 	.word	0x08009d75
 8009cac:	08009d75 	.word	0x08009d75
 8009cb0:	08009d75 	.word	0x08009d75
 8009cb4:	08009d75 	.word	0x08009d75
 8009cb8:	08009d75 	.word	0x08009d75
 8009cbc:	08009d75 	.word	0x08009d75
 8009cc0:	08009d4d 	.word	0x08009d4d
 8009cc4:	08009d75 	.word	0x08009d75
 8009cc8:	08009d75 	.word	0x08009d75
 8009ccc:	08009d75 	.word	0x08009d75
 8009cd0:	08009d75 	.word	0x08009d75
 8009cd4:	08009d75 	.word	0x08009d75
 8009cd8:	08009d75 	.word	0x08009d75
 8009cdc:	08009d75 	.word	0x08009d75
 8009ce0:	08009d55 	.word	0x08009d55
 8009ce4:	08009d75 	.word	0x08009d75
 8009ce8:	08009d75 	.word	0x08009d75
 8009cec:	08009d75 	.word	0x08009d75
 8009cf0:	08009d75 	.word	0x08009d75
 8009cf4:	08009d75 	.word	0x08009d75
 8009cf8:	08009d75 	.word	0x08009d75
 8009cfc:	08009d75 	.word	0x08009d75
 8009d00:	08009d5d 	.word	0x08009d5d
 8009d04:	08009d75 	.word	0x08009d75
 8009d08:	08009d75 	.word	0x08009d75
 8009d0c:	08009d75 	.word	0x08009d75
 8009d10:	08009d75 	.word	0x08009d75
 8009d14:	08009d75 	.word	0x08009d75
 8009d18:	08009d75 	.word	0x08009d75
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d65 	.word	0x08009d65
 8009d24:	08009d75 	.word	0x08009d75
 8009d28:	08009d75 	.word	0x08009d75
 8009d2c:	08009d75 	.word	0x08009d75
 8009d30:	08009d75 	.word	0x08009d75
 8009d34:	08009d75 	.word	0x08009d75
 8009d38:	08009d75 	.word	0x08009d75
 8009d3c:	08009d75 	.word	0x08009d75
 8009d40:	08009d6d 	.word	0x08009d6d
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e222      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e21e      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009d54:	2308      	movs	r3, #8
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e21a      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e216      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009d64:	2320      	movs	r3, #32
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e212      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009d6c:	2340      	movs	r3, #64	; 0x40
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d72:	e20e      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009d74:	2380      	movs	r3, #128	; 0x80
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7a:	e20a      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a69      	ldr	r2, [pc, #420]	; (8009f28 <UART_SetConfig+0x33c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d130      	bne.n	8009de8 <UART_SetConfig+0x1fc>
 8009d86:	4b67      	ldr	r3, [pc, #412]	; (8009f24 <UART_SetConfig+0x338>)
 8009d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	d826      	bhi.n	8009de0 <UART_SetConfig+0x1f4>
 8009d92:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <UART_SetConfig+0x1ac>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009db1 	.word	0x08009db1
 8009d9c:	08009db9 	.word	0x08009db9
 8009da0:	08009dc1 	.word	0x08009dc1
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd9 	.word	0x08009dd9
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e1ec      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e1e8      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e1e4      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e1e0      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e1dc      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e1d8      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de6:	e1d4      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a4f      	ldr	r2, [pc, #316]	; (8009f2c <UART_SetConfig+0x340>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d130      	bne.n	8009e54 <UART_SetConfig+0x268>
 8009df2:	4b4c      	ldr	r3, [pc, #304]	; (8009f24 <UART_SetConfig+0x338>)
 8009df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d826      	bhi.n	8009e4c <UART_SetConfig+0x260>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <UART_SetConfig+0x218>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e1d 	.word	0x08009e1d
 8009e08:	08009e25 	.word	0x08009e25
 8009e0c:	08009e2d 	.word	0x08009e2d
 8009e10:	08009e35 	.word	0x08009e35
 8009e14:	08009e3d 	.word	0x08009e3d
 8009e18:	08009e45 	.word	0x08009e45
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e1b6      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e24:	2304      	movs	r3, #4
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e1b2      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e1ae      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e34:	2310      	movs	r3, #16
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e1aa      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e3c:	2320      	movs	r3, #32
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e1a6      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e44:	2340      	movs	r3, #64	; 0x40
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e1a2      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e4c:	2380      	movs	r3, #128	; 0x80
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e19e      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a35      	ldr	r2, [pc, #212]	; (8009f30 <UART_SetConfig+0x344>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d130      	bne.n	8009ec0 <UART_SetConfig+0x2d4>
 8009e5e:	4b31      	ldr	r3, [pc, #196]	; (8009f24 <UART_SetConfig+0x338>)
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d826      	bhi.n	8009eb8 <UART_SetConfig+0x2cc>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <UART_SetConfig+0x284>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009e91 	.word	0x08009e91
 8009e78:	08009e99 	.word	0x08009e99
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8e:	e180      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e90:	2304      	movs	r3, #4
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e17c      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e178      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e174      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e170      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e16c      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e168      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1b      	ldr	r2, [pc, #108]	; (8009f34 <UART_SetConfig+0x348>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d142      	bne.n	8009f50 <UART_SetConfig+0x364>
 8009eca:	4b16      	ldr	r3, [pc, #88]	; (8009f24 <UART_SetConfig+0x338>)
 8009ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d838      	bhi.n	8009f48 <UART_SetConfig+0x35c>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0x2f0>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009ef5 	.word	0x08009ef5
 8009ee0:	08009efd 	.word	0x08009efd
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f0d 	.word	0x08009f0d
 8009eec:	08009f39 	.word	0x08009f39
 8009ef0:	08009f41 	.word	0x08009f41
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e14a      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e146      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e142      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e13e      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009f14:	cfff69f3 	.word	0xcfff69f3
 8009f18:	58000c00 	.word	0x58000c00
 8009f1c:	11fff4ff 	.word	0x11fff4ff
 8009f20:	40011000 	.word	0x40011000
 8009f24:	58024400 	.word	0x58024400
 8009f28:	40004400 	.word	0x40004400
 8009f2c:	40004800 	.word	0x40004800
 8009f30:	40004c00 	.word	0x40004c00
 8009f34:	40005000 	.word	0x40005000
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e128      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e124      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e120      	b.n	800a192 <UART_SetConfig+0x5a6>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4acb      	ldr	r2, [pc, #812]	; (800a284 <UART_SetConfig+0x698>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d176      	bne.n	800a048 <UART_SetConfig+0x45c>
 8009f5a:	4bcb      	ldr	r3, [pc, #812]	; (800a288 <UART_SetConfig+0x69c>)
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f62:	2b28      	cmp	r3, #40	; 0x28
 8009f64:	d86c      	bhi.n	800a040 <UART_SetConfig+0x454>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <UART_SetConfig+0x380>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	0800a011 	.word	0x0800a011
 8009f70:	0800a041 	.word	0x0800a041
 8009f74:	0800a041 	.word	0x0800a041
 8009f78:	0800a041 	.word	0x0800a041
 8009f7c:	0800a041 	.word	0x0800a041
 8009f80:	0800a041 	.word	0x0800a041
 8009f84:	0800a041 	.word	0x0800a041
 8009f88:	0800a041 	.word	0x0800a041
 8009f8c:	0800a019 	.word	0x0800a019
 8009f90:	0800a041 	.word	0x0800a041
 8009f94:	0800a041 	.word	0x0800a041
 8009f98:	0800a041 	.word	0x0800a041
 8009f9c:	0800a041 	.word	0x0800a041
 8009fa0:	0800a041 	.word	0x0800a041
 8009fa4:	0800a041 	.word	0x0800a041
 8009fa8:	0800a041 	.word	0x0800a041
 8009fac:	0800a021 	.word	0x0800a021
 8009fb0:	0800a041 	.word	0x0800a041
 8009fb4:	0800a041 	.word	0x0800a041
 8009fb8:	0800a041 	.word	0x0800a041
 8009fbc:	0800a041 	.word	0x0800a041
 8009fc0:	0800a041 	.word	0x0800a041
 8009fc4:	0800a041 	.word	0x0800a041
 8009fc8:	0800a041 	.word	0x0800a041
 8009fcc:	0800a029 	.word	0x0800a029
 8009fd0:	0800a041 	.word	0x0800a041
 8009fd4:	0800a041 	.word	0x0800a041
 8009fd8:	0800a041 	.word	0x0800a041
 8009fdc:	0800a041 	.word	0x0800a041
 8009fe0:	0800a041 	.word	0x0800a041
 8009fe4:	0800a041 	.word	0x0800a041
 8009fe8:	0800a041 	.word	0x0800a041
 8009fec:	0800a031 	.word	0x0800a031
 8009ff0:	0800a041 	.word	0x0800a041
 8009ff4:	0800a041 	.word	0x0800a041
 8009ff8:	0800a041 	.word	0x0800a041
 8009ffc:	0800a041 	.word	0x0800a041
 800a000:	0800a041 	.word	0x0800a041
 800a004:	0800a041 	.word	0x0800a041
 800a008:	0800a041 	.word	0x0800a041
 800a00c:	0800a039 	.word	0x0800a039
 800a010:	2301      	movs	r3, #1
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a016:	e0bc      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a018:	2304      	movs	r3, #4
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e0b8      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a020:	2308      	movs	r3, #8
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e0b4      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a028:	2310      	movs	r3, #16
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02e:	e0b0      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a030:	2320      	movs	r3, #32
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a036:	e0ac      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a038:	2340      	movs	r3, #64	; 0x40
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03e:	e0a8      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a040:	2380      	movs	r3, #128	; 0x80
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a046:	e0a4      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a8f      	ldr	r2, [pc, #572]	; (800a28c <UART_SetConfig+0x6a0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d130      	bne.n	800a0b4 <UART_SetConfig+0x4c8>
 800a052:	4b8d      	ldr	r3, [pc, #564]	; (800a288 <UART_SetConfig+0x69c>)
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	d826      	bhi.n	800a0ac <UART_SetConfig+0x4c0>
 800a05e:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <UART_SetConfig+0x478>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a07d 	.word	0x0800a07d
 800a068:	0800a085 	.word	0x0800a085
 800a06c:	0800a08d 	.word	0x0800a08d
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a082:	e086      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a084:	2304      	movs	r3, #4
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08a:	e082      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a08c:	2308      	movs	r3, #8
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a092:	e07e      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a094:	2310      	movs	r3, #16
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a09a:	e07a      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a09c:	2320      	movs	r3, #32
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0a2:	e076      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a0a4:	2340      	movs	r3, #64	; 0x40
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0aa:	e072      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a0ac:	2380      	movs	r3, #128	; 0x80
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b2:	e06e      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a75      	ldr	r2, [pc, #468]	; (800a290 <UART_SetConfig+0x6a4>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d130      	bne.n	800a120 <UART_SetConfig+0x534>
 800a0be:	4b72      	ldr	r3, [pc, #456]	; (800a288 <UART_SetConfig+0x69c>)
 800a0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	d826      	bhi.n	800a118 <UART_SetConfig+0x52c>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <UART_SetConfig+0x4e4>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0e9 	.word	0x0800a0e9
 800a0d4:	0800a0f1 	.word	0x0800a0f1
 800a0d8:	0800a0f9 	.word	0x0800a0f9
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a109 	.word	0x0800a109
 800a0e4:	0800a111 	.word	0x0800a111
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e050      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e04c      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a0f8:	2308      	movs	r3, #8
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e048      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a100:	2310      	movs	r3, #16
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e044      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a108:	2320      	movs	r3, #32
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10e:	e040      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a110:	2340      	movs	r3, #64	; 0x40
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a116:	e03c      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a11e:	e038      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a5b      	ldr	r2, [pc, #364]	; (800a294 <UART_SetConfig+0x6a8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d130      	bne.n	800a18c <UART_SetConfig+0x5a0>
 800a12a:	4b57      	ldr	r3, [pc, #348]	; (800a288 <UART_SetConfig+0x69c>)
 800a12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	2b05      	cmp	r3, #5
 800a134:	d826      	bhi.n	800a184 <UART_SetConfig+0x598>
 800a136:	a201      	add	r2, pc, #4	; (adr r2, 800a13c <UART_SetConfig+0x550>)
 800a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13c:	0800a155 	.word	0x0800a155
 800a140:	0800a15d 	.word	0x0800a15d
 800a144:	0800a165 	.word	0x0800a165
 800a148:	0800a16d 	.word	0x0800a16d
 800a14c:	0800a175 	.word	0x0800a175
 800a150:	0800a17d 	.word	0x0800a17d
 800a154:	2302      	movs	r3, #2
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15a:	e01a      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a15c:	2304      	movs	r3, #4
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e016      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a164:	2308      	movs	r3, #8
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e012      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a16c:	2310      	movs	r3, #16
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e00e      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a174:	2320      	movs	r3, #32
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17a:	e00a      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a17c:	2340      	movs	r3, #64	; 0x40
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a182:	e006      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a184:	2380      	movs	r3, #128	; 0x80
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18a:	e002      	b.n	800a192 <UART_SetConfig+0x5a6>
 800a18c:	2380      	movs	r3, #128	; 0x80
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a3f      	ldr	r2, [pc, #252]	; (800a294 <UART_SetConfig+0x6a8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	f040 80f8 	bne.w	800a38e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a19e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	dc46      	bgt.n	800a234 <UART_SetConfig+0x648>
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	f2c0 8082 	blt.w	800a2b0 <UART_SetConfig+0x6c4>
 800a1ac:	3b02      	subs	r3, #2
 800a1ae:	2b1e      	cmp	r3, #30
 800a1b0:	d87e      	bhi.n	800a2b0 <UART_SetConfig+0x6c4>
 800a1b2:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <UART_SetConfig+0x5cc>)
 800a1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b8:	0800a23b 	.word	0x0800a23b
 800a1bc:	0800a2b1 	.word	0x0800a2b1
 800a1c0:	0800a243 	.word	0x0800a243
 800a1c4:	0800a2b1 	.word	0x0800a2b1
 800a1c8:	0800a2b1 	.word	0x0800a2b1
 800a1cc:	0800a2b1 	.word	0x0800a2b1
 800a1d0:	0800a253 	.word	0x0800a253
 800a1d4:	0800a2b1 	.word	0x0800a2b1
 800a1d8:	0800a2b1 	.word	0x0800a2b1
 800a1dc:	0800a2b1 	.word	0x0800a2b1
 800a1e0:	0800a2b1 	.word	0x0800a2b1
 800a1e4:	0800a2b1 	.word	0x0800a2b1
 800a1e8:	0800a2b1 	.word	0x0800a2b1
 800a1ec:	0800a2b1 	.word	0x0800a2b1
 800a1f0:	0800a263 	.word	0x0800a263
 800a1f4:	0800a2b1 	.word	0x0800a2b1
 800a1f8:	0800a2b1 	.word	0x0800a2b1
 800a1fc:	0800a2b1 	.word	0x0800a2b1
 800a200:	0800a2b1 	.word	0x0800a2b1
 800a204:	0800a2b1 	.word	0x0800a2b1
 800a208:	0800a2b1 	.word	0x0800a2b1
 800a20c:	0800a2b1 	.word	0x0800a2b1
 800a210:	0800a2b1 	.word	0x0800a2b1
 800a214:	0800a2b1 	.word	0x0800a2b1
 800a218:	0800a2b1 	.word	0x0800a2b1
 800a21c:	0800a2b1 	.word	0x0800a2b1
 800a220:	0800a2b1 	.word	0x0800a2b1
 800a224:	0800a2b1 	.word	0x0800a2b1
 800a228:	0800a2b1 	.word	0x0800a2b1
 800a22c:	0800a2b1 	.word	0x0800a2b1
 800a230:	0800a2a3 	.word	0x0800a2a3
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d037      	beq.n	800a2a8 <UART_SetConfig+0x6bc>
 800a238:	e03a      	b.n	800a2b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a23a:	f7fe f8c5 	bl	80083c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a23e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a240:	e03c      	b.n	800a2bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe f8d4 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a250:	e034      	b.n	800a2bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a252:	f107 0318 	add.w	r3, r7, #24
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fa20 	bl	800869c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a260:	e02c      	b.n	800a2bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <UART_SetConfig+0x69c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d016      	beq.n	800a29c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a26e:	4b06      	ldr	r3, [pc, #24]	; (800a288 <UART_SetConfig+0x69c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	08db      	lsrs	r3, r3, #3
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	4a07      	ldr	r2, [pc, #28]	; (800a298 <UART_SetConfig+0x6ac>)
 800a27a:	fa22 f303 	lsr.w	r3, r2, r3
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a280:	e01c      	b.n	800a2bc <UART_SetConfig+0x6d0>
 800a282:	bf00      	nop
 800a284:	40011400 	.word	0x40011400
 800a288:	58024400 	.word	0x58024400
 800a28c:	40007800 	.word	0x40007800
 800a290:	40007c00 	.word	0x40007c00
 800a294:	58000c00 	.word	0x58000c00
 800a298:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a29c:	4b9d      	ldr	r3, [pc, #628]	; (800a514 <UART_SetConfig+0x928>)
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a0:	e00c      	b.n	800a2bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2a2:	4b9d      	ldr	r3, [pc, #628]	; (800a518 <UART_SetConfig+0x92c>)
 800a2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a6:	e009      	b.n	800a2bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ae:	e005      	b.n	800a2bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 81de 	beq.w	800a680 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	4a94      	ldr	r2, [pc, #592]	; (800a51c <UART_SetConfig+0x930>)
 800a2ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	4413      	add	r3, r2
 800a2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d305      	bcc.n	800a2f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d903      	bls.n	800a2fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2fa:	e1c1      	b.n	800a680 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fe:	2200      	movs	r2, #0
 800a300:	60bb      	str	r3, [r7, #8]
 800a302:	60fa      	str	r2, [r7, #12]
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	4a84      	ldr	r2, [pc, #528]	; (800a51c <UART_SetConfig+0x930>)
 800a30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	2200      	movs	r2, #0
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	607a      	str	r2, [r7, #4]
 800a316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a31a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a31e:	f7f6 f82f 	bl	8000380 <__aeabi_uldivmod>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4610      	mov	r0, r2
 800a328:	4619      	mov	r1, r3
 800a32a:	f04f 0200 	mov.w	r2, #0
 800a32e:	f04f 0300 	mov.w	r3, #0
 800a332:	020b      	lsls	r3, r1, #8
 800a334:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a338:	0202      	lsls	r2, r0, #8
 800a33a:	6979      	ldr	r1, [r7, #20]
 800a33c:	6849      	ldr	r1, [r1, #4]
 800a33e:	0849      	lsrs	r1, r1, #1
 800a340:	2000      	movs	r0, #0
 800a342:	460c      	mov	r4, r1
 800a344:	4605      	mov	r5, r0
 800a346:	eb12 0804 	adds.w	r8, r2, r4
 800a34a:	eb43 0905 	adc.w	r9, r3, r5
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	469a      	mov	sl, r3
 800a356:	4693      	mov	fp, r2
 800a358:	4652      	mov	r2, sl
 800a35a:	465b      	mov	r3, fp
 800a35c:	4640      	mov	r0, r8
 800a35e:	4649      	mov	r1, r9
 800a360:	f7f6 f80e 	bl	8000380 <__aeabi_uldivmod>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4613      	mov	r3, r2
 800a36a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a372:	d308      	bcc.n	800a386 <UART_SetConfig+0x79a>
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a37a:	d204      	bcs.n	800a386 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a382:	60da      	str	r2, [r3, #12]
 800a384:	e17c      	b.n	800a680 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a38c:	e178      	b.n	800a680 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a396:	f040 80c5 	bne.w	800a524 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a39a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	dc48      	bgt.n	800a434 <UART_SetConfig+0x848>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	db7b      	blt.n	800a49e <UART_SetConfig+0x8b2>
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d879      	bhi.n	800a49e <UART_SetConfig+0x8b2>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <UART_SetConfig+0x7c4>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a43b 	.word	0x0800a43b
 800a3b4:	0800a443 	.word	0x0800a443
 800a3b8:	0800a49f 	.word	0x0800a49f
 800a3bc:	0800a49f 	.word	0x0800a49f
 800a3c0:	0800a44b 	.word	0x0800a44b
 800a3c4:	0800a49f 	.word	0x0800a49f
 800a3c8:	0800a49f 	.word	0x0800a49f
 800a3cc:	0800a49f 	.word	0x0800a49f
 800a3d0:	0800a45b 	.word	0x0800a45b
 800a3d4:	0800a49f 	.word	0x0800a49f
 800a3d8:	0800a49f 	.word	0x0800a49f
 800a3dc:	0800a49f 	.word	0x0800a49f
 800a3e0:	0800a49f 	.word	0x0800a49f
 800a3e4:	0800a49f 	.word	0x0800a49f
 800a3e8:	0800a49f 	.word	0x0800a49f
 800a3ec:	0800a49f 	.word	0x0800a49f
 800a3f0:	0800a46b 	.word	0x0800a46b
 800a3f4:	0800a49f 	.word	0x0800a49f
 800a3f8:	0800a49f 	.word	0x0800a49f
 800a3fc:	0800a49f 	.word	0x0800a49f
 800a400:	0800a49f 	.word	0x0800a49f
 800a404:	0800a49f 	.word	0x0800a49f
 800a408:	0800a49f 	.word	0x0800a49f
 800a40c:	0800a49f 	.word	0x0800a49f
 800a410:	0800a49f 	.word	0x0800a49f
 800a414:	0800a49f 	.word	0x0800a49f
 800a418:	0800a49f 	.word	0x0800a49f
 800a41c:	0800a49f 	.word	0x0800a49f
 800a420:	0800a49f 	.word	0x0800a49f
 800a424:	0800a49f 	.word	0x0800a49f
 800a428:	0800a49f 	.word	0x0800a49f
 800a42c:	0800a49f 	.word	0x0800a49f
 800a430:	0800a491 	.word	0x0800a491
 800a434:	2b40      	cmp	r3, #64	; 0x40
 800a436:	d02e      	beq.n	800a496 <UART_SetConfig+0x8aa>
 800a438:	e031      	b.n	800a49e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a43a:	f7fd f853 	bl	80074e4 <HAL_RCC_GetPCLK1Freq>
 800a43e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a440:	e033      	b.n	800a4aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a442:	f7fd f865 	bl	8007510 <HAL_RCC_GetPCLK2Freq>
 800a446:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a448:	e02f      	b.n	800a4aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a44a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fd ffd0 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a458:	e027      	b.n	800a4aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45a:	f107 0318 	add.w	r3, r7, #24
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe f91c 	bl	800869c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a468:	e01f      	b.n	800a4aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46a:	4b2d      	ldr	r3, [pc, #180]	; (800a520 <UART_SetConfig+0x934>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a476:	4b2a      	ldr	r3, [pc, #168]	; (800a520 <UART_SetConfig+0x934>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	08db      	lsrs	r3, r3, #3
 800a47c:	f003 0303 	and.w	r3, r3, #3
 800a480:	4a24      	ldr	r2, [pc, #144]	; (800a514 <UART_SetConfig+0x928>)
 800a482:	fa22 f303 	lsr.w	r3, r2, r3
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a488:	e00f      	b.n	800a4aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a48a:	4b22      	ldr	r3, [pc, #136]	; (800a514 <UART_SetConfig+0x928>)
 800a48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a48e:	e00c      	b.n	800a4aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a490:	4b21      	ldr	r3, [pc, #132]	; (800a518 <UART_SetConfig+0x92c>)
 800a492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a494:	e009      	b.n	800a4aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a49c:	e005      	b.n	800a4aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a4a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80e7 	beq.w	800a680 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	4a19      	ldr	r2, [pc, #100]	; (800a51c <UART_SetConfig+0x930>)
 800a4b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4c4:	005a      	lsls	r2, r3, #1
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	085b      	lsrs	r3, r3, #1
 800a4cc:	441a      	add	r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	2b0f      	cmp	r3, #15
 800a4dc:	d916      	bls.n	800a50c <UART_SetConfig+0x920>
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e4:	d212      	bcs.n	800a50c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	f023 030f 	bic.w	r3, r3, #15
 800a4ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4fe:	4313      	orrs	r3, r2
 800a500:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a508:	60da      	str	r2, [r3, #12]
 800a50a:	e0b9      	b.n	800a680 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a512:	e0b5      	b.n	800a680 <UART_SetConfig+0xa94>
 800a514:	03d09000 	.word	0x03d09000
 800a518:	003d0900 	.word	0x003d0900
 800a51c:	0800d364 	.word	0x0800d364
 800a520:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a524:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a528:	2b20      	cmp	r3, #32
 800a52a:	dc49      	bgt.n	800a5c0 <UART_SetConfig+0x9d4>
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	db7c      	blt.n	800a62a <UART_SetConfig+0xa3e>
 800a530:	2b20      	cmp	r3, #32
 800a532:	d87a      	bhi.n	800a62a <UART_SetConfig+0xa3e>
 800a534:	a201      	add	r2, pc, #4	; (adr r2, 800a53c <UART_SetConfig+0x950>)
 800a536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53a:	bf00      	nop
 800a53c:	0800a5c7 	.word	0x0800a5c7
 800a540:	0800a5cf 	.word	0x0800a5cf
 800a544:	0800a62b 	.word	0x0800a62b
 800a548:	0800a62b 	.word	0x0800a62b
 800a54c:	0800a5d7 	.word	0x0800a5d7
 800a550:	0800a62b 	.word	0x0800a62b
 800a554:	0800a62b 	.word	0x0800a62b
 800a558:	0800a62b 	.word	0x0800a62b
 800a55c:	0800a5e7 	.word	0x0800a5e7
 800a560:	0800a62b 	.word	0x0800a62b
 800a564:	0800a62b 	.word	0x0800a62b
 800a568:	0800a62b 	.word	0x0800a62b
 800a56c:	0800a62b 	.word	0x0800a62b
 800a570:	0800a62b 	.word	0x0800a62b
 800a574:	0800a62b 	.word	0x0800a62b
 800a578:	0800a62b 	.word	0x0800a62b
 800a57c:	0800a5f7 	.word	0x0800a5f7
 800a580:	0800a62b 	.word	0x0800a62b
 800a584:	0800a62b 	.word	0x0800a62b
 800a588:	0800a62b 	.word	0x0800a62b
 800a58c:	0800a62b 	.word	0x0800a62b
 800a590:	0800a62b 	.word	0x0800a62b
 800a594:	0800a62b 	.word	0x0800a62b
 800a598:	0800a62b 	.word	0x0800a62b
 800a59c:	0800a62b 	.word	0x0800a62b
 800a5a0:	0800a62b 	.word	0x0800a62b
 800a5a4:	0800a62b 	.word	0x0800a62b
 800a5a8:	0800a62b 	.word	0x0800a62b
 800a5ac:	0800a62b 	.word	0x0800a62b
 800a5b0:	0800a62b 	.word	0x0800a62b
 800a5b4:	0800a62b 	.word	0x0800a62b
 800a5b8:	0800a62b 	.word	0x0800a62b
 800a5bc:	0800a61d 	.word	0x0800a61d
 800a5c0:	2b40      	cmp	r3, #64	; 0x40
 800a5c2:	d02e      	beq.n	800a622 <UART_SetConfig+0xa36>
 800a5c4:	e031      	b.n	800a62a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5c6:	f7fc ff8d 	bl	80074e4 <HAL_RCC_GetPCLK1Freq>
 800a5ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5cc:	e033      	b.n	800a636 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5ce:	f7fc ff9f 	bl	8007510 <HAL_RCC_GetPCLK2Freq>
 800a5d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a5d4:	e02f      	b.n	800a636 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fd ff0a 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5e4:	e027      	b.n	800a636 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5e6:	f107 0318 	add.w	r3, r7, #24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe f856 	bl	800869c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5f4:	e01f      	b.n	800a636 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5f6:	4b2d      	ldr	r3, [pc, #180]	; (800a6ac <UART_SetConfig+0xac0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0320 	and.w	r3, r3, #32
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d009      	beq.n	800a616 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a602:	4b2a      	ldr	r3, [pc, #168]	; (800a6ac <UART_SetConfig+0xac0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	08db      	lsrs	r3, r3, #3
 800a608:	f003 0303 	and.w	r3, r3, #3
 800a60c:	4a28      	ldr	r2, [pc, #160]	; (800a6b0 <UART_SetConfig+0xac4>)
 800a60e:	fa22 f303 	lsr.w	r3, r2, r3
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a614:	e00f      	b.n	800a636 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a616:	4b26      	ldr	r3, [pc, #152]	; (800a6b0 <UART_SetConfig+0xac4>)
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a61a:	e00c      	b.n	800a636 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a61c:	4b25      	ldr	r3, [pc, #148]	; (800a6b4 <UART_SetConfig+0xac8>)
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a620:	e009      	b.n	800a636 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a628:	e005      	b.n	800a636 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a634:	bf00      	nop
    }

    if (pclk != 0U)
 800a636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d021      	beq.n	800a680 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	4a1d      	ldr	r2, [pc, #116]	; (800a6b8 <UART_SetConfig+0xacc>)
 800a642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a646:	461a      	mov	r2, r3
 800a648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a64a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	085b      	lsrs	r3, r3, #1
 800a654:	441a      	add	r2, r3
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	2b0f      	cmp	r3, #15
 800a664:	d909      	bls.n	800a67a <UART_SetConfig+0xa8e>
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a66c:	d205      	bcs.n	800a67a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a670:	b29a      	uxth	r2, r3
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60da      	str	r2, [r3, #12]
 800a678:	e002      	b.n	800a680 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2201      	movs	r2, #1
 800a684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2200      	movs	r2, #0
 800a694:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2200      	movs	r2, #0
 800a69a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a69c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3748      	adds	r7, #72	; 0x48
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6aa:	bf00      	nop
 800a6ac:	58024400 	.word	0x58024400
 800a6b0:	03d09000 	.word	0x03d09000
 800a6b4:	003d0900 	.word	0x003d0900
 800a6b8:	0800d364 	.word	0x0800d364

0800a6bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00a      	beq.n	800a6e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	430a      	orrs	r2, r1
 800a706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00a      	beq.n	800a72a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72e:	f003 0308 	and.w	r3, r3, #8
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a772:	f003 0320 	and.w	r3, r3, #32
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	430a      	orrs	r2, r1
 800a78e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01a      	beq.n	800a7d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ba:	d10a      	bne.n	800a7d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	605a      	str	r2, [r3, #4]
  }
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af02      	add	r7, sp, #8
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a810:	f7f8 fb54 	bl	8002ebc <HAL_GetTick>
 800a814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0308 	and.w	r3, r3, #8
 800a820:	2b08      	cmp	r3, #8
 800a822:	d10e      	bne.n	800a842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f82f 	bl	800a896 <UART_WaitOnFlagUntilTimeout>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e025      	b.n	800a88e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d10e      	bne.n	800a86e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f819 	bl	800a896 <UART_WaitOnFlagUntilTimeout>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e00f      	b.n	800a88e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b09c      	sub	sp, #112	; 0x70
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	603b      	str	r3, [r7, #0]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8a6:	e0a9      	b.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ae:	f000 80a5 	beq.w	800a9fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8b2:	f7f8 fb03 	bl	8002ebc <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d302      	bcc.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a8c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d140      	bne.n	800a94a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8d0:	e853 3f00 	ldrex	r3, [r3]
 800a8d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e6      	bne.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3308      	adds	r3, #8
 800a900:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a904:	e853 3f00 	ldrex	r3, [r3]
 800a908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	f023 0301 	bic.w	r3, r3, #1
 800a910:	663b      	str	r3, [r7, #96]	; 0x60
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3308      	adds	r3, #8
 800a918:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a91a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a91c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a922:	e841 2300 	strex	r3, r2, [r1]
 800a926:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1e5      	bne.n	800a8fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2220      	movs	r2, #32
 800a932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2220      	movs	r2, #32
 800a93a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e069      	b.n	800aa1e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d051      	beq.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a966:	d149      	bne.n	800a9fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a970:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a986:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	461a      	mov	r2, r3
 800a98e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a990:	637b      	str	r3, [r7, #52]	; 0x34
 800a992:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e6      	bne.n	800a972 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	e853 3f00 	ldrex	r3, [r3]
 800a9b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f023 0301 	bic.w	r3, r3, #1
 800a9ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9c4:	623a      	str	r2, [r7, #32]
 800a9c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	69f9      	ldr	r1, [r7, #28]
 800a9ca:	6a3a      	ldr	r2, [r7, #32]
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e5      	bne.n	800a9a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2220      	movs	r2, #32
 800a9e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e010      	b.n	800aa1e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	69da      	ldr	r2, [r3, #28]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	4013      	ands	r3, r2
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2301      	moveq	r3, #1
 800aa0e:	2300      	movne	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	461a      	mov	r2, r3
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	f43f af46 	beq.w	800a8a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3770      	adds	r7, #112	; 0x70
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b095      	sub	sp, #84	; 0x54
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa38:	e853 3f00 	ldrex	r3, [r3]
 800aa3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa4e:	643b      	str	r3, [r7, #64]	; 0x40
 800aa50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa56:	e841 2300 	strex	r3, r2, [r1]
 800aa5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e6      	bne.n	800aa30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3308      	adds	r3, #8
 800aa68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	e853 3f00 	ldrex	r3, [r3]
 800aa70:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	4b1e      	ldr	r3, [pc, #120]	; (800aaf0 <UART_EndRxTransfer+0xc8>)
 800aa76:	4013      	ands	r3, r2
 800aa78:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3308      	adds	r3, #8
 800aa80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e5      	bne.n	800aa62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d118      	bne.n	800aad0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	e853 3f00 	ldrex	r3, [r3]
 800aaaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f023 0310 	bic.w	r3, r3, #16
 800aab2:	647b      	str	r3, [r7, #68]	; 0x44
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aabc:	61bb      	str	r3, [r7, #24]
 800aabe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac0:	6979      	ldr	r1, [r7, #20]
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	e841 2300 	strex	r3, r2, [r1]
 800aac8:	613b      	str	r3, [r7, #16]
   return(result);
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e6      	bne.n	800aa9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2220      	movs	r2, #32
 800aad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aae4:	bf00      	nop
 800aae6:	3754      	adds	r7, #84	; 0x54
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	effffffe 	.word	0xeffffffe

0800aaf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7ff f854 	bl	8009bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab18:	bf00      	nop
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab3c:	61fb      	str	r3, [r7, #28]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	61bb      	str	r3, [r7, #24]
 800ab48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6979      	ldr	r1, [r7, #20]
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	613b      	str	r3, [r7, #16]
   return(result);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e6      	bne.n	800ab28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2220      	movs	r2, #32
 800ab5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff f81f 	bl	8009bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab6e:	bf00      	nop
 800ab70:	3720      	adds	r7, #32
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab7e:	bf00      	nop
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab92:	bf00      	nop
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b083      	sub	sp, #12
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aba6:	bf00      	nop
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d101      	bne.n	800abc8 <HAL_UARTEx_DisableFifoMode+0x16>
 800abc4:	2302      	movs	r3, #2
 800abc6:	e027      	b.n	800ac18 <HAL_UARTEx_DisableFifoMode+0x66>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2224      	movs	r2, #36	; 0x24
 800abd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0201 	bic.w	r2, r2, #1
 800abee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800abf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d101      	bne.n	800ac3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac38:	2302      	movs	r3, #2
 800ac3a:	e02d      	b.n	800ac98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2224      	movs	r2, #36	; 0x24
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0201 	bic.w	r2, r2, #1
 800ac62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f84f 	bl	800ad1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d101      	bne.n	800acb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e02d      	b.n	800ad14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2224      	movs	r2, #36	; 0x24
 800acc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f022 0201 	bic.w	r2, r2, #1
 800acde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f811 	bl	800ad1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2220      	movs	r2, #32
 800ad06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d108      	bne.n	800ad3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad3c:	e031      	b.n	800ada2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad3e:	2310      	movs	r3, #16
 800ad40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad42:	2310      	movs	r3, #16
 800ad44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	0e5b      	lsrs	r3, r3, #25
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	0f5b      	lsrs	r3, r3, #29
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	f003 0307 	and.w	r3, r3, #7
 800ad64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
 800ad68:	7b3a      	ldrb	r2, [r7, #12]
 800ad6a:	4911      	ldr	r1, [pc, #68]	; (800adb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ad6c:	5c8a      	ldrb	r2, [r1, r2]
 800ad6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad72:	7b3a      	ldrb	r2, [r7, #12]
 800ad74:	490f      	ldr	r1, [pc, #60]	; (800adb4 <UARTEx_SetNbDataToProcess+0x98>)
 800ad76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	7b7a      	ldrb	r2, [r7, #13]
 800ad88:	4909      	ldr	r1, [pc, #36]	; (800adb0 <UARTEx_SetNbDataToProcess+0x94>)
 800ad8a:	5c8a      	ldrb	r2, [r1, r2]
 800ad8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad90:	7b7a      	ldrb	r2, [r7, #13]
 800ad92:	4908      	ldr	r1, [pc, #32]	; (800adb4 <UARTEx_SetNbDataToProcess+0x98>)
 800ad94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad96:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ada2:	bf00      	nop
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	0800d37c 	.word	0x0800d37c
 800adb4:	0800d384 	.word	0x0800d384

0800adb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adb8:	b084      	sub	sp, #16
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	f107 001c 	add.w	r0, r7, #28
 800adc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d120      	bne.n	800ae12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68da      	ldr	r2, [r3, #12]
 800ade0:	4b2a      	ldr	r3, [pc, #168]	; (800ae8c <USB_CoreInit+0xd4>)
 800ade2:	4013      	ands	r3, r2
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800adf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d105      	bne.n	800ae06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 faac 	bl	800b364 <USB_CoreReset>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]
 800ae10:	e01a      	b.n	800ae48 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 faa0 	bl	800b364 <USB_CoreReset>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38
 800ae3a:	e005      	b.n	800ae48 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d116      	bne.n	800ae7c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae5c:	4b0c      	ldr	r3, [pc, #48]	; (800ae90 <USB_CoreInit+0xd8>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f043 0206 	orr.w	r2, r3, #6
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	f043 0220 	orr.w	r2, r3, #32
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae88:	b004      	add	sp, #16
 800ae8a:	4770      	bx	lr
 800ae8c:	ffbdffbf 	.word	0xffbdffbf
 800ae90:	03ee0000 	.word	0x03ee0000

0800ae94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f023 0201 	bic.w	r2, r3, #1
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aed2:	78fb      	ldrb	r3, [r7, #3]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d115      	bne.n	800af04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aee4:	2001      	movs	r0, #1
 800aee6:	f7f7 fff5 	bl	8002ed4 <HAL_Delay>
      ms++;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3301      	adds	r3, #1
 800aeee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fa29 	bl	800b348 <USB_GetMode>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d01e      	beq.n	800af3a <USB_SetCurrentMode+0x84>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b31      	cmp	r3, #49	; 0x31
 800af00:	d9f0      	bls.n	800aee4 <USB_SetCurrentMode+0x2e>
 800af02:	e01a      	b.n	800af3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d115      	bne.n	800af36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af16:	2001      	movs	r0, #1
 800af18:	f7f7 ffdc 	bl	8002ed4 <HAL_Delay>
      ms++;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3301      	adds	r3, #1
 800af20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa10 	bl	800b348 <USB_GetMode>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d005      	beq.n	800af3a <USB_SetCurrentMode+0x84>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b31      	cmp	r3, #49	; 0x31
 800af32:	d9f0      	bls.n	800af16 <USB_SetCurrentMode+0x60>
 800af34:	e001      	b.n	800af3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e005      	b.n	800af46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b32      	cmp	r3, #50	; 0x32
 800af3e:	d101      	bne.n	800af44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
	...

0800af50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af50:	b084      	sub	sp, #16
 800af52:	b580      	push	{r7, lr}
 800af54:	b086      	sub	sp, #24
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800af5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af6a:	2300      	movs	r3, #0
 800af6c:	613b      	str	r3, [r7, #16]
 800af6e:	e009      	b.n	800af84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	3340      	adds	r3, #64	; 0x40
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	2200      	movs	r2, #0
 800af7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	3301      	adds	r3, #1
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2b0e      	cmp	r3, #14
 800af88:	d9f2      	bls.n	800af70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800af8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d11c      	bne.n	800afca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af9e:	f043 0302 	orr.w	r3, r3, #2
 800afa2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	601a      	str	r2, [r3, #0]
 800afc8:	e005      	b.n	800afd6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afdc:	461a      	mov	r2, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe8:	4619      	mov	r1, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff0:	461a      	mov	r2, r3
 800aff2:	680b      	ldr	r3, [r1, #0]
 800aff4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d10c      	bne.n	800b016 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800affc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d104      	bne.n	800b00c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b002:	2100      	movs	r1, #0
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f965 	bl	800b2d4 <USB_SetDevSpeed>
 800b00a:	e008      	b.n	800b01e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b00c:	2101      	movs	r1, #1
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f960 	bl	800b2d4 <USB_SetDevSpeed>
 800b014:	e003      	b.n	800b01e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b016:	2103      	movs	r1, #3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f95b 	bl	800b2d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b01e:	2110      	movs	r1, #16
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f8f3 	bl	800b20c <USB_FlushTxFifo>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f91f 	bl	800b274 <USB_FlushRxFifo>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b046:	461a      	mov	r2, r3
 800b048:	2300      	movs	r3, #0
 800b04a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b052:	461a      	mov	r2, r3
 800b054:	2300      	movs	r3, #0
 800b056:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05e:	461a      	mov	r2, r3
 800b060:	2300      	movs	r3, #0
 800b062:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b064:	2300      	movs	r3, #0
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	e043      	b.n	800b0f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	015a      	lsls	r2, r3, #5
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4413      	add	r3, r2
 800b072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b07c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b080:	d118      	bne.n	800b0b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b094:	461a      	mov	r2, r3
 800b096:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	e013      	b.n	800b0c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	e008      	b.n	800b0c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	015a      	lsls	r2, r3, #5
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	015a      	lsls	r2, r3, #5
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4413      	add	r3, r2
 800b0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	613b      	str	r3, [r7, #16]
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d3b7      	bcc.n	800b06a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	613b      	str	r3, [r7, #16]
 800b0fe:	e043      	b.n	800b188 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b116:	d118      	bne.n	800b14a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10a      	bne.n	800b134 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	015a      	lsls	r2, r3, #5
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	4413      	add	r3, r2
 800b126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12a:	461a      	mov	r2, r3
 800b12c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	e013      	b.n	800b15c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b140:	461a      	mov	r2, r3
 800b142:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	e008      	b.n	800b15c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b156:	461a      	mov	r2, r3
 800b158:	2300      	movs	r3, #0
 800b15a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b168:	461a      	mov	r2, r3
 800b16a:	2300      	movs	r3, #0
 800b16c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17a:	461a      	mov	r2, r3
 800b17c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b180:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	3301      	adds	r3, #1
 800b186:	613b      	str	r3, [r7, #16]
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d3b7      	bcc.n	800b100 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b19e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b1b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d105      	bne.n	800b1c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	f043 0210 	orr.w	r2, r3, #16
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699a      	ldr	r2, [r3, #24]
 800b1c8:	4b0e      	ldr	r3, [pc, #56]	; (800b204 <USB_DevInit+0x2b4>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d005      	beq.n	800b1e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	f043 0208 	orr.w	r2, r3, #8
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d105      	bne.n	800b1f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	699a      	ldr	r2, [r3, #24]
 800b1ec:	4b06      	ldr	r3, [pc, #24]	; (800b208 <USB_DevInit+0x2b8>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b200:	b004      	add	sp, #16
 800b202:	4770      	bx	lr
 800b204:	803c3800 	.word	0x803c3800
 800b208:	40000004 	.word	0x40000004

0800b20c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3301      	adds	r3, #1
 800b21e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a13      	ldr	r2, [pc, #76]	; (800b270 <USB_FlushTxFifo+0x64>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d901      	bls.n	800b22c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e01b      	b.n	800b264 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	daf2      	bge.n	800b21a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	019b      	lsls	r3, r3, #6
 800b23c:	f043 0220 	orr.w	r2, r3, #32
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	4a08      	ldr	r2, [pc, #32]	; (800b270 <USB_FlushTxFifo+0x64>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d901      	bls.n	800b256 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e006      	b.n	800b264 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	f003 0320 	and.w	r3, r3, #32
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d0f0      	beq.n	800b244 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	00030d40 	.word	0x00030d40

0800b274 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3301      	adds	r3, #1
 800b284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4a11      	ldr	r2, [pc, #68]	; (800b2d0 <USB_FlushRxFifo+0x5c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d901      	bls.n	800b292 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e018      	b.n	800b2c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	daf2      	bge.n	800b280 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2210      	movs	r2, #16
 800b2a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <USB_FlushRxFifo+0x5c>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d901      	bls.n	800b2b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e006      	b.n	800b2c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	f003 0310 	and.w	r3, r3, #16
 800b2be:	2b10      	cmp	r3, #16
 800b2c0:	d0f0      	beq.n	800b2a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	00030d40 	.word	0x00030d40

0800b2d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	78fb      	ldrb	r3, [r7, #3]
 800b2ee:	68f9      	ldr	r1, [r7, #12]
 800b2f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3714      	adds	r7, #20
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b306:	b480      	push	{r7}
 800b308:	b085      	sub	sp, #20
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b320:	f023 0303 	bic.w	r3, r3, #3
 800b324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b334:	f043 0302 	orr.w	r3, r3, #2
 800b338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f003 0301 	and.w	r3, r3, #1
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3301      	adds	r3, #1
 800b374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	4a13      	ldr	r2, [pc, #76]	; (800b3c8 <USB_CoreReset+0x64>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d901      	bls.n	800b382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b37e:	2303      	movs	r3, #3
 800b380:	e01b      	b.n	800b3ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	daf2      	bge.n	800b370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	f043 0201 	orr.w	r2, r3, #1
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4a09      	ldr	r2, [pc, #36]	; (800b3c8 <USB_CoreReset+0x64>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d901      	bls.n	800b3ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	e006      	b.n	800b3ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d0f0      	beq.n	800b39a <USB_CoreReset+0x36>

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	00030d40 	.word	0x00030d40

0800b3cc <__errno>:
 800b3cc:	4b01      	ldr	r3, [pc, #4]	; (800b3d4 <__errno+0x8>)
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	24000020 	.word	0x24000020

0800b3d8 <__libc_init_array>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	4d0d      	ldr	r5, [pc, #52]	; (800b410 <__libc_init_array+0x38>)
 800b3dc:	4c0d      	ldr	r4, [pc, #52]	; (800b414 <__libc_init_array+0x3c>)
 800b3de:	1b64      	subs	r4, r4, r5
 800b3e0:	10a4      	asrs	r4, r4, #2
 800b3e2:	2600      	movs	r6, #0
 800b3e4:	42a6      	cmp	r6, r4
 800b3e6:	d109      	bne.n	800b3fc <__libc_init_array+0x24>
 800b3e8:	4d0b      	ldr	r5, [pc, #44]	; (800b418 <__libc_init_array+0x40>)
 800b3ea:	4c0c      	ldr	r4, [pc, #48]	; (800b41c <__libc_init_array+0x44>)
 800b3ec:	f000 fc8e 	bl	800bd0c <_init>
 800b3f0:	1b64      	subs	r4, r4, r5
 800b3f2:	10a4      	asrs	r4, r4, #2
 800b3f4:	2600      	movs	r6, #0
 800b3f6:	42a6      	cmp	r6, r4
 800b3f8:	d105      	bne.n	800b406 <__libc_init_array+0x2e>
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}
 800b3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b400:	4798      	blx	r3
 800b402:	3601      	adds	r6, #1
 800b404:	e7ee      	b.n	800b3e4 <__libc_init_array+0xc>
 800b406:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40a:	4798      	blx	r3
 800b40c:	3601      	adds	r6, #1
 800b40e:	e7f2      	b.n	800b3f6 <__libc_init_array+0x1e>
 800b410:	0800d3c8 	.word	0x0800d3c8
 800b414:	0800d3c8 	.word	0x0800d3c8
 800b418:	0800d3c8 	.word	0x0800d3c8
 800b41c:	0800d3cc 	.word	0x0800d3cc

0800b420 <memset>:
 800b420:	4402      	add	r2, r0
 800b422:	4603      	mov	r3, r0
 800b424:	4293      	cmp	r3, r2
 800b426:	d100      	bne.n	800b42a <memset+0xa>
 800b428:	4770      	bx	lr
 800b42a:	f803 1b01 	strb.w	r1, [r3], #1
 800b42e:	e7f9      	b.n	800b424 <memset+0x4>

0800b430 <_free_r>:
 800b430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b432:	2900      	cmp	r1, #0
 800b434:	d044      	beq.n	800b4c0 <_free_r+0x90>
 800b436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b43a:	9001      	str	r0, [sp, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f1a1 0404 	sub.w	r4, r1, #4
 800b442:	bfb8      	it	lt
 800b444:	18e4      	addlt	r4, r4, r3
 800b446:	f000 f903 	bl	800b650 <__malloc_lock>
 800b44a:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <_free_r+0x94>)
 800b44c:	9801      	ldr	r0, [sp, #4]
 800b44e:	6813      	ldr	r3, [r2, #0]
 800b450:	b933      	cbnz	r3, 800b460 <_free_r+0x30>
 800b452:	6063      	str	r3, [r4, #4]
 800b454:	6014      	str	r4, [r2, #0]
 800b456:	b003      	add	sp, #12
 800b458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b45c:	f000 b8fe 	b.w	800b65c <__malloc_unlock>
 800b460:	42a3      	cmp	r3, r4
 800b462:	d908      	bls.n	800b476 <_free_r+0x46>
 800b464:	6825      	ldr	r5, [r4, #0]
 800b466:	1961      	adds	r1, r4, r5
 800b468:	428b      	cmp	r3, r1
 800b46a:	bf01      	itttt	eq
 800b46c:	6819      	ldreq	r1, [r3, #0]
 800b46e:	685b      	ldreq	r3, [r3, #4]
 800b470:	1949      	addeq	r1, r1, r5
 800b472:	6021      	streq	r1, [r4, #0]
 800b474:	e7ed      	b.n	800b452 <_free_r+0x22>
 800b476:	461a      	mov	r2, r3
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	b10b      	cbz	r3, 800b480 <_free_r+0x50>
 800b47c:	42a3      	cmp	r3, r4
 800b47e:	d9fa      	bls.n	800b476 <_free_r+0x46>
 800b480:	6811      	ldr	r1, [r2, #0]
 800b482:	1855      	adds	r5, r2, r1
 800b484:	42a5      	cmp	r5, r4
 800b486:	d10b      	bne.n	800b4a0 <_free_r+0x70>
 800b488:	6824      	ldr	r4, [r4, #0]
 800b48a:	4421      	add	r1, r4
 800b48c:	1854      	adds	r4, r2, r1
 800b48e:	42a3      	cmp	r3, r4
 800b490:	6011      	str	r1, [r2, #0]
 800b492:	d1e0      	bne.n	800b456 <_free_r+0x26>
 800b494:	681c      	ldr	r4, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	6053      	str	r3, [r2, #4]
 800b49a:	4421      	add	r1, r4
 800b49c:	6011      	str	r1, [r2, #0]
 800b49e:	e7da      	b.n	800b456 <_free_r+0x26>
 800b4a0:	d902      	bls.n	800b4a8 <_free_r+0x78>
 800b4a2:	230c      	movs	r3, #12
 800b4a4:	6003      	str	r3, [r0, #0]
 800b4a6:	e7d6      	b.n	800b456 <_free_r+0x26>
 800b4a8:	6825      	ldr	r5, [r4, #0]
 800b4aa:	1961      	adds	r1, r4, r5
 800b4ac:	428b      	cmp	r3, r1
 800b4ae:	bf04      	itt	eq
 800b4b0:	6819      	ldreq	r1, [r3, #0]
 800b4b2:	685b      	ldreq	r3, [r3, #4]
 800b4b4:	6063      	str	r3, [r4, #4]
 800b4b6:	bf04      	itt	eq
 800b4b8:	1949      	addeq	r1, r1, r5
 800b4ba:	6021      	streq	r1, [r4, #0]
 800b4bc:	6054      	str	r4, [r2, #4]
 800b4be:	e7ca      	b.n	800b456 <_free_r+0x26>
 800b4c0:	b003      	add	sp, #12
 800b4c2:	bd30      	pop	{r4, r5, pc}
 800b4c4:	24000cac 	.word	0x24000cac

0800b4c8 <sbrk_aligned>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	4e0e      	ldr	r6, [pc, #56]	; (800b504 <sbrk_aligned+0x3c>)
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	6831      	ldr	r1, [r6, #0]
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	b911      	cbnz	r1, 800b4da <sbrk_aligned+0x12>
 800b4d4:	f000 f88c 	bl	800b5f0 <_sbrk_r>
 800b4d8:	6030      	str	r0, [r6, #0]
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f000 f887 	bl	800b5f0 <_sbrk_r>
 800b4e2:	1c43      	adds	r3, r0, #1
 800b4e4:	d00a      	beq.n	800b4fc <sbrk_aligned+0x34>
 800b4e6:	1cc4      	adds	r4, r0, #3
 800b4e8:	f024 0403 	bic.w	r4, r4, #3
 800b4ec:	42a0      	cmp	r0, r4
 800b4ee:	d007      	beq.n	800b500 <sbrk_aligned+0x38>
 800b4f0:	1a21      	subs	r1, r4, r0
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f000 f87c 	bl	800b5f0 <_sbrk_r>
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	d101      	bne.n	800b500 <sbrk_aligned+0x38>
 800b4fc:	f04f 34ff 	mov.w	r4, #4294967295
 800b500:	4620      	mov	r0, r4
 800b502:	bd70      	pop	{r4, r5, r6, pc}
 800b504:	24000cb0 	.word	0x24000cb0

0800b508 <_malloc_r>:
 800b508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b50c:	1ccd      	adds	r5, r1, #3
 800b50e:	f025 0503 	bic.w	r5, r5, #3
 800b512:	3508      	adds	r5, #8
 800b514:	2d0c      	cmp	r5, #12
 800b516:	bf38      	it	cc
 800b518:	250c      	movcc	r5, #12
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	4607      	mov	r7, r0
 800b51e:	db01      	blt.n	800b524 <_malloc_r+0x1c>
 800b520:	42a9      	cmp	r1, r5
 800b522:	d905      	bls.n	800b530 <_malloc_r+0x28>
 800b524:	230c      	movs	r3, #12
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	2600      	movs	r6, #0
 800b52a:	4630      	mov	r0, r6
 800b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b530:	4e2e      	ldr	r6, [pc, #184]	; (800b5ec <_malloc_r+0xe4>)
 800b532:	f000 f88d 	bl	800b650 <__malloc_lock>
 800b536:	6833      	ldr	r3, [r6, #0]
 800b538:	461c      	mov	r4, r3
 800b53a:	bb34      	cbnz	r4, 800b58a <_malloc_r+0x82>
 800b53c:	4629      	mov	r1, r5
 800b53e:	4638      	mov	r0, r7
 800b540:	f7ff ffc2 	bl	800b4c8 <sbrk_aligned>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	4604      	mov	r4, r0
 800b548:	d14d      	bne.n	800b5e6 <_malloc_r+0xde>
 800b54a:	6834      	ldr	r4, [r6, #0]
 800b54c:	4626      	mov	r6, r4
 800b54e:	2e00      	cmp	r6, #0
 800b550:	d140      	bne.n	800b5d4 <_malloc_r+0xcc>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	4631      	mov	r1, r6
 800b556:	4638      	mov	r0, r7
 800b558:	eb04 0803 	add.w	r8, r4, r3
 800b55c:	f000 f848 	bl	800b5f0 <_sbrk_r>
 800b560:	4580      	cmp	r8, r0
 800b562:	d13a      	bne.n	800b5da <_malloc_r+0xd2>
 800b564:	6821      	ldr	r1, [r4, #0]
 800b566:	3503      	adds	r5, #3
 800b568:	1a6d      	subs	r5, r5, r1
 800b56a:	f025 0503 	bic.w	r5, r5, #3
 800b56e:	3508      	adds	r5, #8
 800b570:	2d0c      	cmp	r5, #12
 800b572:	bf38      	it	cc
 800b574:	250c      	movcc	r5, #12
 800b576:	4629      	mov	r1, r5
 800b578:	4638      	mov	r0, r7
 800b57a:	f7ff ffa5 	bl	800b4c8 <sbrk_aligned>
 800b57e:	3001      	adds	r0, #1
 800b580:	d02b      	beq.n	800b5da <_malloc_r+0xd2>
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	442b      	add	r3, r5
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	e00e      	b.n	800b5a8 <_malloc_r+0xa0>
 800b58a:	6822      	ldr	r2, [r4, #0]
 800b58c:	1b52      	subs	r2, r2, r5
 800b58e:	d41e      	bmi.n	800b5ce <_malloc_r+0xc6>
 800b590:	2a0b      	cmp	r2, #11
 800b592:	d916      	bls.n	800b5c2 <_malloc_r+0xba>
 800b594:	1961      	adds	r1, r4, r5
 800b596:	42a3      	cmp	r3, r4
 800b598:	6025      	str	r5, [r4, #0]
 800b59a:	bf18      	it	ne
 800b59c:	6059      	strne	r1, [r3, #4]
 800b59e:	6863      	ldr	r3, [r4, #4]
 800b5a0:	bf08      	it	eq
 800b5a2:	6031      	streq	r1, [r6, #0]
 800b5a4:	5162      	str	r2, [r4, r5]
 800b5a6:	604b      	str	r3, [r1, #4]
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f104 060b 	add.w	r6, r4, #11
 800b5ae:	f000 f855 	bl	800b65c <__malloc_unlock>
 800b5b2:	f026 0607 	bic.w	r6, r6, #7
 800b5b6:	1d23      	adds	r3, r4, #4
 800b5b8:	1af2      	subs	r2, r6, r3
 800b5ba:	d0b6      	beq.n	800b52a <_malloc_r+0x22>
 800b5bc:	1b9b      	subs	r3, r3, r6
 800b5be:	50a3      	str	r3, [r4, r2]
 800b5c0:	e7b3      	b.n	800b52a <_malloc_r+0x22>
 800b5c2:	6862      	ldr	r2, [r4, #4]
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	bf0c      	ite	eq
 800b5c8:	6032      	streq	r2, [r6, #0]
 800b5ca:	605a      	strne	r2, [r3, #4]
 800b5cc:	e7ec      	b.n	800b5a8 <_malloc_r+0xa0>
 800b5ce:	4623      	mov	r3, r4
 800b5d0:	6864      	ldr	r4, [r4, #4]
 800b5d2:	e7b2      	b.n	800b53a <_malloc_r+0x32>
 800b5d4:	4634      	mov	r4, r6
 800b5d6:	6876      	ldr	r6, [r6, #4]
 800b5d8:	e7b9      	b.n	800b54e <_malloc_r+0x46>
 800b5da:	230c      	movs	r3, #12
 800b5dc:	603b      	str	r3, [r7, #0]
 800b5de:	4638      	mov	r0, r7
 800b5e0:	f000 f83c 	bl	800b65c <__malloc_unlock>
 800b5e4:	e7a1      	b.n	800b52a <_malloc_r+0x22>
 800b5e6:	6025      	str	r5, [r4, #0]
 800b5e8:	e7de      	b.n	800b5a8 <_malloc_r+0xa0>
 800b5ea:	bf00      	nop
 800b5ec:	24000cac 	.word	0x24000cac

0800b5f0 <_sbrk_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d06      	ldr	r5, [pc, #24]	; (800b60c <_sbrk_r+0x1c>)
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	f7f7 fb78 	bl	8002cf0 <_sbrk>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_sbrk_r+0x1a>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_sbrk_r+0x1a>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	24000cb4 	.word	0x24000cb4

0800b610 <siprintf>:
 800b610:	b40e      	push	{r1, r2, r3}
 800b612:	b500      	push	{lr}
 800b614:	b09c      	sub	sp, #112	; 0x70
 800b616:	ab1d      	add	r3, sp, #116	; 0x74
 800b618:	9002      	str	r0, [sp, #8]
 800b61a:	9006      	str	r0, [sp, #24]
 800b61c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b620:	4809      	ldr	r0, [pc, #36]	; (800b648 <siprintf+0x38>)
 800b622:	9107      	str	r1, [sp, #28]
 800b624:	9104      	str	r1, [sp, #16]
 800b626:	4909      	ldr	r1, [pc, #36]	; (800b64c <siprintf+0x3c>)
 800b628:	f853 2b04 	ldr.w	r2, [r3], #4
 800b62c:	9105      	str	r1, [sp, #20]
 800b62e:	6800      	ldr	r0, [r0, #0]
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	a902      	add	r1, sp, #8
 800b634:	f000 f874 	bl	800b720 <_svfiprintf_r>
 800b638:	9b02      	ldr	r3, [sp, #8]
 800b63a:	2200      	movs	r2, #0
 800b63c:	701a      	strb	r2, [r3, #0]
 800b63e:	b01c      	add	sp, #112	; 0x70
 800b640:	f85d eb04 	ldr.w	lr, [sp], #4
 800b644:	b003      	add	sp, #12
 800b646:	4770      	bx	lr
 800b648:	24000020 	.word	0x24000020
 800b64c:	ffff0208 	.word	0xffff0208

0800b650 <__malloc_lock>:
 800b650:	4801      	ldr	r0, [pc, #4]	; (800b658 <__malloc_lock+0x8>)
 800b652:	f000 baf9 	b.w	800bc48 <__retarget_lock_acquire_recursive>
 800b656:	bf00      	nop
 800b658:	24000cb8 	.word	0x24000cb8

0800b65c <__malloc_unlock>:
 800b65c:	4801      	ldr	r0, [pc, #4]	; (800b664 <__malloc_unlock+0x8>)
 800b65e:	f000 baf4 	b.w	800bc4a <__retarget_lock_release_recursive>
 800b662:	bf00      	nop
 800b664:	24000cb8 	.word	0x24000cb8

0800b668 <__ssputs_r>:
 800b668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	688e      	ldr	r6, [r1, #8]
 800b66e:	429e      	cmp	r6, r3
 800b670:	4682      	mov	sl, r0
 800b672:	460c      	mov	r4, r1
 800b674:	4690      	mov	r8, r2
 800b676:	461f      	mov	r7, r3
 800b678:	d838      	bhi.n	800b6ec <__ssputs_r+0x84>
 800b67a:	898a      	ldrh	r2, [r1, #12]
 800b67c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b680:	d032      	beq.n	800b6e8 <__ssputs_r+0x80>
 800b682:	6825      	ldr	r5, [r4, #0]
 800b684:	6909      	ldr	r1, [r1, #16]
 800b686:	eba5 0901 	sub.w	r9, r5, r1
 800b68a:	6965      	ldr	r5, [r4, #20]
 800b68c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b694:	3301      	adds	r3, #1
 800b696:	444b      	add	r3, r9
 800b698:	106d      	asrs	r5, r5, #1
 800b69a:	429d      	cmp	r5, r3
 800b69c:	bf38      	it	cc
 800b69e:	461d      	movcc	r5, r3
 800b6a0:	0553      	lsls	r3, r2, #21
 800b6a2:	d531      	bpl.n	800b708 <__ssputs_r+0xa0>
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	f7ff ff2f 	bl	800b508 <_malloc_r>
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	b950      	cbnz	r0, 800b6c4 <__ssputs_r+0x5c>
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	f8ca 3000 	str.w	r3, [sl]
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c4:	6921      	ldr	r1, [r4, #16]
 800b6c6:	464a      	mov	r2, r9
 800b6c8:	f000 fac0 	bl	800bc4c <memcpy>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	6126      	str	r6, [r4, #16]
 800b6da:	6165      	str	r5, [r4, #20]
 800b6dc:	444e      	add	r6, r9
 800b6de:	eba5 0509 	sub.w	r5, r5, r9
 800b6e2:	6026      	str	r6, [r4, #0]
 800b6e4:	60a5      	str	r5, [r4, #8]
 800b6e6:	463e      	mov	r6, r7
 800b6e8:	42be      	cmp	r6, r7
 800b6ea:	d900      	bls.n	800b6ee <__ssputs_r+0x86>
 800b6ec:	463e      	mov	r6, r7
 800b6ee:	6820      	ldr	r0, [r4, #0]
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	4641      	mov	r1, r8
 800b6f4:	f000 fab8 	bl	800bc68 <memmove>
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	1b9b      	subs	r3, r3, r6
 800b6fc:	60a3      	str	r3, [r4, #8]
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	4433      	add	r3, r6
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	2000      	movs	r0, #0
 800b706:	e7db      	b.n	800b6c0 <__ssputs_r+0x58>
 800b708:	462a      	mov	r2, r5
 800b70a:	f000 fac7 	bl	800bc9c <_realloc_r>
 800b70e:	4606      	mov	r6, r0
 800b710:	2800      	cmp	r0, #0
 800b712:	d1e1      	bne.n	800b6d8 <__ssputs_r+0x70>
 800b714:	6921      	ldr	r1, [r4, #16]
 800b716:	4650      	mov	r0, sl
 800b718:	f7ff fe8a 	bl	800b430 <_free_r>
 800b71c:	e7c7      	b.n	800b6ae <__ssputs_r+0x46>
	...

0800b720 <_svfiprintf_r>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	4698      	mov	r8, r3
 800b726:	898b      	ldrh	r3, [r1, #12]
 800b728:	061b      	lsls	r3, r3, #24
 800b72a:	b09d      	sub	sp, #116	; 0x74
 800b72c:	4607      	mov	r7, r0
 800b72e:	460d      	mov	r5, r1
 800b730:	4614      	mov	r4, r2
 800b732:	d50e      	bpl.n	800b752 <_svfiprintf_r+0x32>
 800b734:	690b      	ldr	r3, [r1, #16]
 800b736:	b963      	cbnz	r3, 800b752 <_svfiprintf_r+0x32>
 800b738:	2140      	movs	r1, #64	; 0x40
 800b73a:	f7ff fee5 	bl	800b508 <_malloc_r>
 800b73e:	6028      	str	r0, [r5, #0]
 800b740:	6128      	str	r0, [r5, #16]
 800b742:	b920      	cbnz	r0, 800b74e <_svfiprintf_r+0x2e>
 800b744:	230c      	movs	r3, #12
 800b746:	603b      	str	r3, [r7, #0]
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
 800b74c:	e0d1      	b.n	800b8f2 <_svfiprintf_r+0x1d2>
 800b74e:	2340      	movs	r3, #64	; 0x40
 800b750:	616b      	str	r3, [r5, #20]
 800b752:	2300      	movs	r3, #0
 800b754:	9309      	str	r3, [sp, #36]	; 0x24
 800b756:	2320      	movs	r3, #32
 800b758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b760:	2330      	movs	r3, #48	; 0x30
 800b762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b90c <_svfiprintf_r+0x1ec>
 800b766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b76a:	f04f 0901 	mov.w	r9, #1
 800b76e:	4623      	mov	r3, r4
 800b770:	469a      	mov	sl, r3
 800b772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b776:	b10a      	cbz	r2, 800b77c <_svfiprintf_r+0x5c>
 800b778:	2a25      	cmp	r2, #37	; 0x25
 800b77a:	d1f9      	bne.n	800b770 <_svfiprintf_r+0x50>
 800b77c:	ebba 0b04 	subs.w	fp, sl, r4
 800b780:	d00b      	beq.n	800b79a <_svfiprintf_r+0x7a>
 800b782:	465b      	mov	r3, fp
 800b784:	4622      	mov	r2, r4
 800b786:	4629      	mov	r1, r5
 800b788:	4638      	mov	r0, r7
 800b78a:	f7ff ff6d 	bl	800b668 <__ssputs_r>
 800b78e:	3001      	adds	r0, #1
 800b790:	f000 80aa 	beq.w	800b8e8 <_svfiprintf_r+0x1c8>
 800b794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b796:	445a      	add	r2, fp
 800b798:	9209      	str	r2, [sp, #36]	; 0x24
 800b79a:	f89a 3000 	ldrb.w	r3, [sl]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 80a2 	beq.w	800b8e8 <_svfiprintf_r+0x1c8>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ae:	f10a 0a01 	add.w	sl, sl, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	9307      	str	r3, [sp, #28]
 800b7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b7bc:	4654      	mov	r4, sl
 800b7be:	2205      	movs	r2, #5
 800b7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c4:	4851      	ldr	r0, [pc, #324]	; (800b90c <_svfiprintf_r+0x1ec>)
 800b7c6:	f7f4 fd8b 	bl	80002e0 <memchr>
 800b7ca:	9a04      	ldr	r2, [sp, #16]
 800b7cc:	b9d8      	cbnz	r0, 800b806 <_svfiprintf_r+0xe6>
 800b7ce:	06d0      	lsls	r0, r2, #27
 800b7d0:	bf44      	itt	mi
 800b7d2:	2320      	movmi	r3, #32
 800b7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d8:	0711      	lsls	r1, r2, #28
 800b7da:	bf44      	itt	mi
 800b7dc:	232b      	movmi	r3, #43	; 0x2b
 800b7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e8:	d015      	beq.n	800b816 <_svfiprintf_r+0xf6>
 800b7ea:	9a07      	ldr	r2, [sp, #28]
 800b7ec:	4654      	mov	r4, sl
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f04f 0c0a 	mov.w	ip, #10
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7fa:	3b30      	subs	r3, #48	; 0x30
 800b7fc:	2b09      	cmp	r3, #9
 800b7fe:	d94e      	bls.n	800b89e <_svfiprintf_r+0x17e>
 800b800:	b1b0      	cbz	r0, 800b830 <_svfiprintf_r+0x110>
 800b802:	9207      	str	r2, [sp, #28]
 800b804:	e014      	b.n	800b830 <_svfiprintf_r+0x110>
 800b806:	eba0 0308 	sub.w	r3, r0, r8
 800b80a:	fa09 f303 	lsl.w	r3, r9, r3
 800b80e:	4313      	orrs	r3, r2
 800b810:	9304      	str	r3, [sp, #16]
 800b812:	46a2      	mov	sl, r4
 800b814:	e7d2      	b.n	800b7bc <_svfiprintf_r+0x9c>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	1d19      	adds	r1, r3, #4
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	9103      	str	r1, [sp, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bfbb      	ittet	lt
 800b822:	425b      	neglt	r3, r3
 800b824:	f042 0202 	orrlt.w	r2, r2, #2
 800b828:	9307      	strge	r3, [sp, #28]
 800b82a:	9307      	strlt	r3, [sp, #28]
 800b82c:	bfb8      	it	lt
 800b82e:	9204      	strlt	r2, [sp, #16]
 800b830:	7823      	ldrb	r3, [r4, #0]
 800b832:	2b2e      	cmp	r3, #46	; 0x2e
 800b834:	d10c      	bne.n	800b850 <_svfiprintf_r+0x130>
 800b836:	7863      	ldrb	r3, [r4, #1]
 800b838:	2b2a      	cmp	r3, #42	; 0x2a
 800b83a:	d135      	bne.n	800b8a8 <_svfiprintf_r+0x188>
 800b83c:	9b03      	ldr	r3, [sp, #12]
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	9203      	str	r2, [sp, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	bfb8      	it	lt
 800b848:	f04f 33ff 	movlt.w	r3, #4294967295
 800b84c:	3402      	adds	r4, #2
 800b84e:	9305      	str	r3, [sp, #20]
 800b850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b91c <_svfiprintf_r+0x1fc>
 800b854:	7821      	ldrb	r1, [r4, #0]
 800b856:	2203      	movs	r2, #3
 800b858:	4650      	mov	r0, sl
 800b85a:	f7f4 fd41 	bl	80002e0 <memchr>
 800b85e:	b140      	cbz	r0, 800b872 <_svfiprintf_r+0x152>
 800b860:	2340      	movs	r3, #64	; 0x40
 800b862:	eba0 000a 	sub.w	r0, r0, sl
 800b866:	fa03 f000 	lsl.w	r0, r3, r0
 800b86a:	9b04      	ldr	r3, [sp, #16]
 800b86c:	4303      	orrs	r3, r0
 800b86e:	3401      	adds	r4, #1
 800b870:	9304      	str	r3, [sp, #16]
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4826      	ldr	r0, [pc, #152]	; (800b910 <_svfiprintf_r+0x1f0>)
 800b878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b87c:	2206      	movs	r2, #6
 800b87e:	f7f4 fd2f 	bl	80002e0 <memchr>
 800b882:	2800      	cmp	r0, #0
 800b884:	d038      	beq.n	800b8f8 <_svfiprintf_r+0x1d8>
 800b886:	4b23      	ldr	r3, [pc, #140]	; (800b914 <_svfiprintf_r+0x1f4>)
 800b888:	bb1b      	cbnz	r3, 800b8d2 <_svfiprintf_r+0x1b2>
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	3307      	adds	r3, #7
 800b88e:	f023 0307 	bic.w	r3, r3, #7
 800b892:	3308      	adds	r3, #8
 800b894:	9303      	str	r3, [sp, #12]
 800b896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b898:	4433      	add	r3, r6
 800b89a:	9309      	str	r3, [sp, #36]	; 0x24
 800b89c:	e767      	b.n	800b76e <_svfiprintf_r+0x4e>
 800b89e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	e7a5      	b.n	800b7f4 <_svfiprintf_r+0xd4>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	3401      	adds	r4, #1
 800b8ac:	9305      	str	r3, [sp, #20]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	f04f 0c0a 	mov.w	ip, #10
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ba:	3a30      	subs	r2, #48	; 0x30
 800b8bc:	2a09      	cmp	r2, #9
 800b8be:	d903      	bls.n	800b8c8 <_svfiprintf_r+0x1a8>
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0c5      	beq.n	800b850 <_svfiprintf_r+0x130>
 800b8c4:	9105      	str	r1, [sp, #20]
 800b8c6:	e7c3      	b.n	800b850 <_svfiprintf_r+0x130>
 800b8c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e7f0      	b.n	800b8b4 <_svfiprintf_r+0x194>
 800b8d2:	ab03      	add	r3, sp, #12
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	4b0f      	ldr	r3, [pc, #60]	; (800b918 <_svfiprintf_r+0x1f8>)
 800b8da:	a904      	add	r1, sp, #16
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f3af 8000 	nop.w
 800b8e2:	1c42      	adds	r2, r0, #1
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	d1d6      	bne.n	800b896 <_svfiprintf_r+0x176>
 800b8e8:	89ab      	ldrh	r3, [r5, #12]
 800b8ea:	065b      	lsls	r3, r3, #25
 800b8ec:	f53f af2c 	bmi.w	800b748 <_svfiprintf_r+0x28>
 800b8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8f2:	b01d      	add	sp, #116	; 0x74
 800b8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f8:	ab03      	add	r3, sp, #12
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	4b06      	ldr	r3, [pc, #24]	; (800b918 <_svfiprintf_r+0x1f8>)
 800b900:	a904      	add	r1, sp, #16
 800b902:	4638      	mov	r0, r7
 800b904:	f000 f87a 	bl	800b9fc <_printf_i>
 800b908:	e7eb      	b.n	800b8e2 <_svfiprintf_r+0x1c2>
 800b90a:	bf00      	nop
 800b90c:	0800d38c 	.word	0x0800d38c
 800b910:	0800d396 	.word	0x0800d396
 800b914:	00000000 	.word	0x00000000
 800b918:	0800b669 	.word	0x0800b669
 800b91c:	0800d392 	.word	0x0800d392

0800b920 <_printf_common>:
 800b920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b924:	4616      	mov	r6, r2
 800b926:	4699      	mov	r9, r3
 800b928:	688a      	ldr	r2, [r1, #8]
 800b92a:	690b      	ldr	r3, [r1, #16]
 800b92c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b930:	4293      	cmp	r3, r2
 800b932:	bfb8      	it	lt
 800b934:	4613      	movlt	r3, r2
 800b936:	6033      	str	r3, [r6, #0]
 800b938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b93c:	4607      	mov	r7, r0
 800b93e:	460c      	mov	r4, r1
 800b940:	b10a      	cbz	r2, 800b946 <_printf_common+0x26>
 800b942:	3301      	adds	r3, #1
 800b944:	6033      	str	r3, [r6, #0]
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	0699      	lsls	r1, r3, #26
 800b94a:	bf42      	ittt	mi
 800b94c:	6833      	ldrmi	r3, [r6, #0]
 800b94e:	3302      	addmi	r3, #2
 800b950:	6033      	strmi	r3, [r6, #0]
 800b952:	6825      	ldr	r5, [r4, #0]
 800b954:	f015 0506 	ands.w	r5, r5, #6
 800b958:	d106      	bne.n	800b968 <_printf_common+0x48>
 800b95a:	f104 0a19 	add.w	sl, r4, #25
 800b95e:	68e3      	ldr	r3, [r4, #12]
 800b960:	6832      	ldr	r2, [r6, #0]
 800b962:	1a9b      	subs	r3, r3, r2
 800b964:	42ab      	cmp	r3, r5
 800b966:	dc26      	bgt.n	800b9b6 <_printf_common+0x96>
 800b968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b96c:	1e13      	subs	r3, r2, #0
 800b96e:	6822      	ldr	r2, [r4, #0]
 800b970:	bf18      	it	ne
 800b972:	2301      	movne	r3, #1
 800b974:	0692      	lsls	r2, r2, #26
 800b976:	d42b      	bmi.n	800b9d0 <_printf_common+0xb0>
 800b978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b97c:	4649      	mov	r1, r9
 800b97e:	4638      	mov	r0, r7
 800b980:	47c0      	blx	r8
 800b982:	3001      	adds	r0, #1
 800b984:	d01e      	beq.n	800b9c4 <_printf_common+0xa4>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	68e5      	ldr	r5, [r4, #12]
 800b98a:	6832      	ldr	r2, [r6, #0]
 800b98c:	f003 0306 	and.w	r3, r3, #6
 800b990:	2b04      	cmp	r3, #4
 800b992:	bf08      	it	eq
 800b994:	1aad      	subeq	r5, r5, r2
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	6922      	ldr	r2, [r4, #16]
 800b99a:	bf0c      	ite	eq
 800b99c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9a0:	2500      	movne	r5, #0
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	bfc4      	itt	gt
 800b9a6:	1a9b      	subgt	r3, r3, r2
 800b9a8:	18ed      	addgt	r5, r5, r3
 800b9aa:	2600      	movs	r6, #0
 800b9ac:	341a      	adds	r4, #26
 800b9ae:	42b5      	cmp	r5, r6
 800b9b0:	d11a      	bne.n	800b9e8 <_printf_common+0xc8>
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	e008      	b.n	800b9c8 <_printf_common+0xa8>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	4652      	mov	r2, sl
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	4638      	mov	r0, r7
 800b9be:	47c0      	blx	r8
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	d103      	bne.n	800b9cc <_printf_common+0xac>
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9cc:	3501      	adds	r5, #1
 800b9ce:	e7c6      	b.n	800b95e <_printf_common+0x3e>
 800b9d0:	18e1      	adds	r1, r4, r3
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	2030      	movs	r0, #48	; 0x30
 800b9d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9da:	4422      	add	r2, r4
 800b9dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9e4:	3302      	adds	r3, #2
 800b9e6:	e7c7      	b.n	800b978 <_printf_common+0x58>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	47c0      	blx	r8
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	d0e6      	beq.n	800b9c4 <_printf_common+0xa4>
 800b9f6:	3601      	adds	r6, #1
 800b9f8:	e7d9      	b.n	800b9ae <_printf_common+0x8e>
	...

0800b9fc <_printf_i>:
 800b9fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba00:	7e0f      	ldrb	r7, [r1, #24]
 800ba02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba04:	2f78      	cmp	r7, #120	; 0x78
 800ba06:	4691      	mov	r9, r2
 800ba08:	4680      	mov	r8, r0
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	469a      	mov	sl, r3
 800ba0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba12:	d807      	bhi.n	800ba24 <_printf_i+0x28>
 800ba14:	2f62      	cmp	r7, #98	; 0x62
 800ba16:	d80a      	bhi.n	800ba2e <_printf_i+0x32>
 800ba18:	2f00      	cmp	r7, #0
 800ba1a:	f000 80d8 	beq.w	800bbce <_printf_i+0x1d2>
 800ba1e:	2f58      	cmp	r7, #88	; 0x58
 800ba20:	f000 80a3 	beq.w	800bb6a <_printf_i+0x16e>
 800ba24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba2c:	e03a      	b.n	800baa4 <_printf_i+0xa8>
 800ba2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba32:	2b15      	cmp	r3, #21
 800ba34:	d8f6      	bhi.n	800ba24 <_printf_i+0x28>
 800ba36:	a101      	add	r1, pc, #4	; (adr r1, 800ba3c <_printf_i+0x40>)
 800ba38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba3c:	0800ba95 	.word	0x0800ba95
 800ba40:	0800baa9 	.word	0x0800baa9
 800ba44:	0800ba25 	.word	0x0800ba25
 800ba48:	0800ba25 	.word	0x0800ba25
 800ba4c:	0800ba25 	.word	0x0800ba25
 800ba50:	0800ba25 	.word	0x0800ba25
 800ba54:	0800baa9 	.word	0x0800baa9
 800ba58:	0800ba25 	.word	0x0800ba25
 800ba5c:	0800ba25 	.word	0x0800ba25
 800ba60:	0800ba25 	.word	0x0800ba25
 800ba64:	0800ba25 	.word	0x0800ba25
 800ba68:	0800bbb5 	.word	0x0800bbb5
 800ba6c:	0800bad9 	.word	0x0800bad9
 800ba70:	0800bb97 	.word	0x0800bb97
 800ba74:	0800ba25 	.word	0x0800ba25
 800ba78:	0800ba25 	.word	0x0800ba25
 800ba7c:	0800bbd7 	.word	0x0800bbd7
 800ba80:	0800ba25 	.word	0x0800ba25
 800ba84:	0800bad9 	.word	0x0800bad9
 800ba88:	0800ba25 	.word	0x0800ba25
 800ba8c:	0800ba25 	.word	0x0800ba25
 800ba90:	0800bb9f 	.word	0x0800bb9f
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	1d1a      	adds	r2, r3, #4
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	602a      	str	r2, [r5, #0]
 800ba9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800baa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800baa4:	2301      	movs	r3, #1
 800baa6:	e0a3      	b.n	800bbf0 <_printf_i+0x1f4>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	6829      	ldr	r1, [r5, #0]
 800baac:	0606      	lsls	r6, r0, #24
 800baae:	f101 0304 	add.w	r3, r1, #4
 800bab2:	d50a      	bpl.n	800baca <_printf_i+0xce>
 800bab4:	680e      	ldr	r6, [r1, #0]
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	2e00      	cmp	r6, #0
 800baba:	da03      	bge.n	800bac4 <_printf_i+0xc8>
 800babc:	232d      	movs	r3, #45	; 0x2d
 800babe:	4276      	negs	r6, r6
 800bac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bac4:	485e      	ldr	r0, [pc, #376]	; (800bc40 <_printf_i+0x244>)
 800bac6:	230a      	movs	r3, #10
 800bac8:	e019      	b.n	800bafe <_printf_i+0x102>
 800baca:	680e      	ldr	r6, [r1, #0]
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bad2:	bf18      	it	ne
 800bad4:	b236      	sxthne	r6, r6
 800bad6:	e7ef      	b.n	800bab8 <_printf_i+0xbc>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	6820      	ldr	r0, [r4, #0]
 800badc:	1d19      	adds	r1, r3, #4
 800bade:	6029      	str	r1, [r5, #0]
 800bae0:	0601      	lsls	r1, r0, #24
 800bae2:	d501      	bpl.n	800bae8 <_printf_i+0xec>
 800bae4:	681e      	ldr	r6, [r3, #0]
 800bae6:	e002      	b.n	800baee <_printf_i+0xf2>
 800bae8:	0646      	lsls	r6, r0, #25
 800baea:	d5fb      	bpl.n	800bae4 <_printf_i+0xe8>
 800baec:	881e      	ldrh	r6, [r3, #0]
 800baee:	4854      	ldr	r0, [pc, #336]	; (800bc40 <_printf_i+0x244>)
 800baf0:	2f6f      	cmp	r7, #111	; 0x6f
 800baf2:	bf0c      	ite	eq
 800baf4:	2308      	moveq	r3, #8
 800baf6:	230a      	movne	r3, #10
 800baf8:	2100      	movs	r1, #0
 800bafa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bafe:	6865      	ldr	r5, [r4, #4]
 800bb00:	60a5      	str	r5, [r4, #8]
 800bb02:	2d00      	cmp	r5, #0
 800bb04:	bfa2      	ittt	ge
 800bb06:	6821      	ldrge	r1, [r4, #0]
 800bb08:	f021 0104 	bicge.w	r1, r1, #4
 800bb0c:	6021      	strge	r1, [r4, #0]
 800bb0e:	b90e      	cbnz	r6, 800bb14 <_printf_i+0x118>
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	d04d      	beq.n	800bbb0 <_printf_i+0x1b4>
 800bb14:	4615      	mov	r5, r2
 800bb16:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb1a:	fb03 6711 	mls	r7, r3, r1, r6
 800bb1e:	5dc7      	ldrb	r7, [r0, r7]
 800bb20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb24:	4637      	mov	r7, r6
 800bb26:	42bb      	cmp	r3, r7
 800bb28:	460e      	mov	r6, r1
 800bb2a:	d9f4      	bls.n	800bb16 <_printf_i+0x11a>
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d10b      	bne.n	800bb48 <_printf_i+0x14c>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	07de      	lsls	r6, r3, #31
 800bb34:	d508      	bpl.n	800bb48 <_printf_i+0x14c>
 800bb36:	6923      	ldr	r3, [r4, #16]
 800bb38:	6861      	ldr	r1, [r4, #4]
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	bfde      	ittt	le
 800bb3e:	2330      	movle	r3, #48	; 0x30
 800bb40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb48:	1b52      	subs	r2, r2, r5
 800bb4a:	6122      	str	r2, [r4, #16]
 800bb4c:	f8cd a000 	str.w	sl, [sp]
 800bb50:	464b      	mov	r3, r9
 800bb52:	aa03      	add	r2, sp, #12
 800bb54:	4621      	mov	r1, r4
 800bb56:	4640      	mov	r0, r8
 800bb58:	f7ff fee2 	bl	800b920 <_printf_common>
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	d14c      	bne.n	800bbfa <_printf_i+0x1fe>
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295
 800bb64:	b004      	add	sp, #16
 800bb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6a:	4835      	ldr	r0, [pc, #212]	; (800bc40 <_printf_i+0x244>)
 800bb6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb70:	6829      	ldr	r1, [r5, #0]
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb78:	6029      	str	r1, [r5, #0]
 800bb7a:	061d      	lsls	r5, r3, #24
 800bb7c:	d514      	bpl.n	800bba8 <_printf_i+0x1ac>
 800bb7e:	07df      	lsls	r7, r3, #31
 800bb80:	bf44      	itt	mi
 800bb82:	f043 0320 	orrmi.w	r3, r3, #32
 800bb86:	6023      	strmi	r3, [r4, #0]
 800bb88:	b91e      	cbnz	r6, 800bb92 <_printf_i+0x196>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	f023 0320 	bic.w	r3, r3, #32
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	2310      	movs	r3, #16
 800bb94:	e7b0      	b.n	800baf8 <_printf_i+0xfc>
 800bb96:	6823      	ldr	r3, [r4, #0]
 800bb98:	f043 0320 	orr.w	r3, r3, #32
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	2378      	movs	r3, #120	; 0x78
 800bba0:	4828      	ldr	r0, [pc, #160]	; (800bc44 <_printf_i+0x248>)
 800bba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bba6:	e7e3      	b.n	800bb70 <_printf_i+0x174>
 800bba8:	0659      	lsls	r1, r3, #25
 800bbaa:	bf48      	it	mi
 800bbac:	b2b6      	uxthmi	r6, r6
 800bbae:	e7e6      	b.n	800bb7e <_printf_i+0x182>
 800bbb0:	4615      	mov	r5, r2
 800bbb2:	e7bb      	b.n	800bb2c <_printf_i+0x130>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	6826      	ldr	r6, [r4, #0]
 800bbb8:	6961      	ldr	r1, [r4, #20]
 800bbba:	1d18      	adds	r0, r3, #4
 800bbbc:	6028      	str	r0, [r5, #0]
 800bbbe:	0635      	lsls	r5, r6, #24
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	d501      	bpl.n	800bbc8 <_printf_i+0x1cc>
 800bbc4:	6019      	str	r1, [r3, #0]
 800bbc6:	e002      	b.n	800bbce <_printf_i+0x1d2>
 800bbc8:	0670      	lsls	r0, r6, #25
 800bbca:	d5fb      	bpl.n	800bbc4 <_printf_i+0x1c8>
 800bbcc:	8019      	strh	r1, [r3, #0]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	6123      	str	r3, [r4, #16]
 800bbd2:	4615      	mov	r5, r2
 800bbd4:	e7ba      	b.n	800bb4c <_printf_i+0x150>
 800bbd6:	682b      	ldr	r3, [r5, #0]
 800bbd8:	1d1a      	adds	r2, r3, #4
 800bbda:	602a      	str	r2, [r5, #0]
 800bbdc:	681d      	ldr	r5, [r3, #0]
 800bbde:	6862      	ldr	r2, [r4, #4]
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	f7f4 fb7c 	bl	80002e0 <memchr>
 800bbe8:	b108      	cbz	r0, 800bbee <_printf_i+0x1f2>
 800bbea:	1b40      	subs	r0, r0, r5
 800bbec:	6060      	str	r0, [r4, #4]
 800bbee:	6863      	ldr	r3, [r4, #4]
 800bbf0:	6123      	str	r3, [r4, #16]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbf8:	e7a8      	b.n	800bb4c <_printf_i+0x150>
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	462a      	mov	r2, r5
 800bbfe:	4649      	mov	r1, r9
 800bc00:	4640      	mov	r0, r8
 800bc02:	47d0      	blx	sl
 800bc04:	3001      	adds	r0, #1
 800bc06:	d0ab      	beq.n	800bb60 <_printf_i+0x164>
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	079b      	lsls	r3, r3, #30
 800bc0c:	d413      	bmi.n	800bc36 <_printf_i+0x23a>
 800bc0e:	68e0      	ldr	r0, [r4, #12]
 800bc10:	9b03      	ldr	r3, [sp, #12]
 800bc12:	4298      	cmp	r0, r3
 800bc14:	bfb8      	it	lt
 800bc16:	4618      	movlt	r0, r3
 800bc18:	e7a4      	b.n	800bb64 <_printf_i+0x168>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	4632      	mov	r2, r6
 800bc1e:	4649      	mov	r1, r9
 800bc20:	4640      	mov	r0, r8
 800bc22:	47d0      	blx	sl
 800bc24:	3001      	adds	r0, #1
 800bc26:	d09b      	beq.n	800bb60 <_printf_i+0x164>
 800bc28:	3501      	adds	r5, #1
 800bc2a:	68e3      	ldr	r3, [r4, #12]
 800bc2c:	9903      	ldr	r1, [sp, #12]
 800bc2e:	1a5b      	subs	r3, r3, r1
 800bc30:	42ab      	cmp	r3, r5
 800bc32:	dcf2      	bgt.n	800bc1a <_printf_i+0x21e>
 800bc34:	e7eb      	b.n	800bc0e <_printf_i+0x212>
 800bc36:	2500      	movs	r5, #0
 800bc38:	f104 0619 	add.w	r6, r4, #25
 800bc3c:	e7f5      	b.n	800bc2a <_printf_i+0x22e>
 800bc3e:	bf00      	nop
 800bc40:	0800d39d 	.word	0x0800d39d
 800bc44:	0800d3ae 	.word	0x0800d3ae

0800bc48 <__retarget_lock_acquire_recursive>:
 800bc48:	4770      	bx	lr

0800bc4a <__retarget_lock_release_recursive>:
 800bc4a:	4770      	bx	lr

0800bc4c <memcpy>:
 800bc4c:	440a      	add	r2, r1
 800bc4e:	4291      	cmp	r1, r2
 800bc50:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc54:	d100      	bne.n	800bc58 <memcpy+0xc>
 800bc56:	4770      	bx	lr
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc62:	4291      	cmp	r1, r2
 800bc64:	d1f9      	bne.n	800bc5a <memcpy+0xe>
 800bc66:	bd10      	pop	{r4, pc}

0800bc68 <memmove>:
 800bc68:	4288      	cmp	r0, r1
 800bc6a:	b510      	push	{r4, lr}
 800bc6c:	eb01 0402 	add.w	r4, r1, r2
 800bc70:	d902      	bls.n	800bc78 <memmove+0x10>
 800bc72:	4284      	cmp	r4, r0
 800bc74:	4623      	mov	r3, r4
 800bc76:	d807      	bhi.n	800bc88 <memmove+0x20>
 800bc78:	1e43      	subs	r3, r0, #1
 800bc7a:	42a1      	cmp	r1, r4
 800bc7c:	d008      	beq.n	800bc90 <memmove+0x28>
 800bc7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc86:	e7f8      	b.n	800bc7a <memmove+0x12>
 800bc88:	4402      	add	r2, r0
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	428a      	cmp	r2, r1
 800bc8e:	d100      	bne.n	800bc92 <memmove+0x2a>
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc9a:	e7f7      	b.n	800bc8c <memmove+0x24>

0800bc9c <_realloc_r>:
 800bc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca0:	4680      	mov	r8, r0
 800bca2:	4614      	mov	r4, r2
 800bca4:	460e      	mov	r6, r1
 800bca6:	b921      	cbnz	r1, 800bcb2 <_realloc_r+0x16>
 800bca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcac:	4611      	mov	r1, r2
 800bcae:	f7ff bc2b 	b.w	800b508 <_malloc_r>
 800bcb2:	b92a      	cbnz	r2, 800bcc0 <_realloc_r+0x24>
 800bcb4:	f7ff fbbc 	bl	800b430 <_free_r>
 800bcb8:	4625      	mov	r5, r4
 800bcba:	4628      	mov	r0, r5
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	f000 f81b 	bl	800bcfa <_malloc_usable_size_r>
 800bcc4:	4284      	cmp	r4, r0
 800bcc6:	4607      	mov	r7, r0
 800bcc8:	d802      	bhi.n	800bcd0 <_realloc_r+0x34>
 800bcca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bcce:	d812      	bhi.n	800bcf6 <_realloc_r+0x5a>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	f7ff fc18 	bl	800b508 <_malloc_r>
 800bcd8:	4605      	mov	r5, r0
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d0ed      	beq.n	800bcba <_realloc_r+0x1e>
 800bcde:	42bc      	cmp	r4, r7
 800bce0:	4622      	mov	r2, r4
 800bce2:	4631      	mov	r1, r6
 800bce4:	bf28      	it	cs
 800bce6:	463a      	movcs	r2, r7
 800bce8:	f7ff ffb0 	bl	800bc4c <memcpy>
 800bcec:	4631      	mov	r1, r6
 800bcee:	4640      	mov	r0, r8
 800bcf0:	f7ff fb9e 	bl	800b430 <_free_r>
 800bcf4:	e7e1      	b.n	800bcba <_realloc_r+0x1e>
 800bcf6:	4635      	mov	r5, r6
 800bcf8:	e7df      	b.n	800bcba <_realloc_r+0x1e>

0800bcfa <_malloc_usable_size_r>:
 800bcfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcfe:	1f18      	subs	r0, r3, #4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	bfbc      	itt	lt
 800bd04:	580b      	ldrlt	r3, [r1, r0]
 800bd06:	18c0      	addlt	r0, r0, r3
 800bd08:	4770      	bx	lr
	...

0800bd0c <_init>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr

0800bd18 <_fini>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	bf00      	nop
 800bd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1e:	bc08      	pop	{r3}
 800bd20:	469e      	mov	lr, r3
 800bd22:	4770      	bx	lr
