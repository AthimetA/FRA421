
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efc0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c0  0800f260  0800f260  0001f260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c20  08010c20  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08010c20  08010c20  00020c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c28  08010c28  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c28  08010c28  00020c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c2c  08010c2c  00020c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08010c30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  08010cb8  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  08010d18  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  08010d78  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  08010d78  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002611a  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a78  00000000  00000000  00059e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019b8  00000000  00000000  0005b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000230a5  00000000  00000000  0009acf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937a7  00000000  00000000  000bdd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0025153f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007650  00000000  00000000  00251590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f248 	.word	0x0800f248

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800f248 	.word	0x0800f248

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	3318      	adds	r3, #24
 800077e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80c4 	bne.w	8000926 <Player_Reading_Card+0x1d2>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	3310      	adds	r3, #16
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	3301      	adds	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080e:	3310      	adds	r3, #16
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	3301      	adds	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	3310      	adds	r3, #16
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3301      	adds	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		if (player->turn == first && flag_played == 0) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000858:	2b00      	cmp	r3, #0
 800085a:	d12f      	bne.n	80008bc <Player_Reading_Card+0x168>
 800085c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000860:	2b00      	cmp	r3, #0
 8000862:	d12b      	bne.n	80008bc <Player_Reading_Card+0x168>

			if (ptrYugiohCard_src->standPosition < 6)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	799b      	ldrb	r3, [r3, #6]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d85c      	bhi.n	8000926 <Player_Reading_Card+0x1d2>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 fb76 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	6978      	ldr	r0, [r7, #20]
 8000876:	f7ff ff05 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	799a      	ldrb	r2, [r3, #6]
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <Player_Reading_Card+0x1dc>)
 8000880:	fba3 1302 	umull	r1, r3, r3, r2
 8000884:	0899      	lsrs	r1, r3, #2
 8000886:	460b      	mov	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	440b      	add	r3, r1
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	2200      	movs	r2, #0
 800089a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2201      	movs	r2, #1
 80008a0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80008a2:	69b8      	ldr	r0, [r7, #24]
 80008a4:	f7ff ff3a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	2200      	movs	r2, #0
 80008ac:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80008ba:	e034      	b.n	8000926 <Player_Reading_Card+0x1d2>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d12f      	bne.n	8000926 <Player_Reading_Card+0x1d2>
 80008c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d12b      	bne.n	8000926 <Player_Reading_Card+0x1d2>
			if (ptrYugiohCard_src->standPosition >= 6)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	d927      	bls.n	8000926 <Player_Reading_Card+0x1d2>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 fb41 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff fed0 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	799a      	ldrb	r2, [r3, #6]
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <Player_Reading_Card+0x1dc>)
 80008ea:	fba3 1302 	umull	r1, r3, r3, r2
 80008ee:	0899      	lsrs	r1, r3, #2
 80008f0:	460b      	mov	r3, r1
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2200      	movs	r2, #0
 8000904:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2201      	movs	r2, #1
 800090a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800090c:	69b8      	ldr	r0, [r7, #24]
 800090e:	f7ff ff05 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	2200      	movs	r2, #0
 8000916:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000924:	e7ff      	b.n	8000926 <Player_Reading_Card+0x1d2>
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	aaaaaaab 	.word	0xaaaaaaab

08000934 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3328      	adds	r3, #40	; 0x28
 8000944:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	2358      	movs	r3, #88	; 0x58
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	3328      	adds	r3, #40	; 0x28
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	3318      	adds	r3, #24
 800095e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000966:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3308      	adds	r3, #8
 800096c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	78db      	ldrb	r3, [r3, #3]
 8000978:	2b01      	cmp	r3, #1
 800097a:	f040 8083 	bne.w	8000a84 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3368      	adds	r3, #104	; 0x68
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	e00f      	b.n	80009aa <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	68da      	ldr	r2, [r3, #12]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	429a      	cmp	r2, r3
 8000994:	d103      	bne.n	800099e <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 800099c:	e008      	b.n	80009b0 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	3310      	adds	r3, #16
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	2b13      	cmp	r3, #19
 80009ae:	ddec      	ble.n	800098a <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d12f      	bne.n	8000a1a <Player_Reading_Card_Reborn+0xe6>
 80009ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d12b      	bne.n	8000a1a <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	799b      	ldrb	r3, [r3, #6]
 80009c6:	2b05      	cmp	r3, #5
 80009c8:	d85c      	bhi.n	8000a84 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 fac7 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80009d0:	6939      	ldr	r1, [r7, #16]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff fe56 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	799a      	ldrb	r2, [r3, #6]
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <Player_Reading_Card_Reborn+0x158>)
 80009de:	fba3 1302 	umull	r1, r3, r3, r2
 80009e2:	0899      	lsrs	r1, r3, #2
 80009e4:	460b      	mov	r3, r1
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	440b      	add	r3, r1
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2200      	movs	r2, #0
 80009f8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	2201      	movs	r2, #1
 80009fe:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a00:	69b8      	ldr	r0, [r7, #24]
 8000a02:	f7ff fe8b 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a18:	e034      	b.n	8000a84 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Reborn+0x150>
 8000a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d927      	bls.n	8000a84 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fa92 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6939      	ldr	r1, [r7, #16]
 8000a3c:	6978      	ldr	r0, [r7, #20]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <Player_Reading_Card_Reborn+0x158>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	2201      	movs	r2, #1
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69b8      	ldr	r0, [r7, #24]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000a82:	e7ff      	b.n	8000a84 <Player_Reading_Card_Reborn+0x150>
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	aaaaaaab 	.word	0xaaaaaaab

08000a90 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3328      	adds	r3, #40	; 0x28
 8000aa0:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2358      	movs	r3, #88	; 0x58
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	3328      	adds	r3, #40	; 0x28
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ac2:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3308      	adds	r3, #8
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	78db      	ldrb	r3, [r3, #3]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	f040 80cb 	bne.w	8000c70 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ade:	e013      	b.n	8000b08 <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d107      	bne.n	8000afc <Player_Reading_Card_Ancient_Rule+0x6c>
 8000aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aee:	785b      	ldrb	r3, [r3, #1]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d103      	bne.n	8000afc <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000afa:	e008      	b.n	8000b0e <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 8000afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afe:	3310      	adds	r3, #16
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	3301      	adds	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	dde8      	ble.n	8000ae0 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d102      	bne.n	8000b28 <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3368      	adds	r3, #104	; 0x68
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	e00f      	b.n	8000b54 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d103      	bne.n	8000b48 <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000b46:	e008      	b.n	8000b5a <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	3301      	adds	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	2b13      	cmp	r3, #19
 8000b58:	ddec      	ble.n	8000b34 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	e00f      	b.n	8000b88 <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d103      	bne.n	8000b7c <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000b7a:	e008      	b.n	8000b8e <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8000b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7e:	3310      	adds	r3, #16
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	ddec      	ble.n	8000b68 <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	78db      	ldrb	r3, [r3, #3]
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	d902      	bls.n	8000b9c <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d12f      	bne.n	8000c06 <Player_Reading_Card_Ancient_Rule+0x176>
 8000ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d12b      	bne.n	8000c06 <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	799b      	ldrb	r3, [r3, #6]
 8000bb2:	2b05      	cmp	r3, #5
 8000bb4:	d85c      	bhi.n	8000c70 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f9d1 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff fd60 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	799a      	ldrb	r2, [r3, #6]
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000bca:	fba3 1302 	umull	r1, r3, r3, r2
 8000bce:	0899      	lsrs	r1, r3, #2
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	440b      	add	r3, r1
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	2200      	movs	r2, #0
 8000be4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2201      	movs	r2, #1
 8000bea:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bec:	69b8      	ldr	r0, [r7, #24]
 8000bee:	f7ff fd95 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000c04:	e034      	b.n	8000c70 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d12f      	bne.n	8000c70 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000c10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d12b      	bne.n	8000c70 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	799b      	ldrb	r3, [r3, #6]
 8000c1c:	2b05      	cmp	r3, #5
 8000c1e:	d927      	bls.n	8000c70 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f99c 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000c26:	6939      	ldr	r1, [r7, #16]
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f7ff fd2b 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	799a      	ldrb	r2, [r3, #6]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000c34:	fba3 1302 	umull	r1, r3, r3, r2
 8000c38:	0899      	lsrs	r1, r3, #2
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	440b      	add	r3, r1
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2201      	movs	r2, #1
 8000c54:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c56:	69b8      	ldr	r0, [r7, #24]
 8000c58:	f7ff fd60 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000c6e:	e7ff      	b.n	8000c70 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	aaaaaaab 	.word	0xaaaaaaab

08000c7c <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3328      	adds	r3, #40	; 0x28
 8000c8c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	2358      	movs	r3, #88	; 0x58
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	3328      	adds	r3, #40	; 0x28
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	3318      	adds	r3, #24
 8000ca6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000cae:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	78db      	ldrb	r3, [r3, #3]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	f040 80c7 	bne.w	8000e54 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	e00f      	b.n	8000cec <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d103      	bne.n	8000ce0 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000cde:	e008      	b.n	8000cf2 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 8000ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3301      	adds	r3, #1
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	ddec      	ble.n	8000ccc <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d102      	bne.n	8000d00 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d102      	bne.n	8000d1a <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3368      	adds	r3, #104	; 0x68
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	e00f      	b.n	8000d46 <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d103      	bne.n	8000d3a <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000d38:	e008      	b.n	8000d4c <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 8000d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	3301      	adds	r3, #1
 8000d44:	623b      	str	r3, [r7, #32]
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	2b13      	cmp	r3, #19
 8000d4a:	ddec      	ble.n	8000d26 <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	e00f      	b.n	8000d7a <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d103      	bne.n	8000d6e <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000d6c:	e008      	b.n	8000d80 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	3310      	adds	r3, #16
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	3301      	adds	r3, #1
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	ddec      	ble.n	8000d5a <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d12f      	bne.n	8000dea <Player_Reading_Card_Monster_Effect+0x16e>
 8000d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d12b      	bne.n	8000dea <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	799b      	ldrb	r3, [r3, #6]
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d85c      	bhi.n	8000e54 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 f8df 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000da0:	6939      	ldr	r1, [r7, #16]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff fc6e 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	799a      	ldrb	r2, [r3, #6]
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <Player_Reading_Card_Monster_Effect+0x1e0>)
 8000dae:	fba3 1302 	umull	r1, r3, r3, r2
 8000db2:	0899      	lsrs	r1, r3, #2
 8000db4:	460b      	mov	r3, r1
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	440b      	add	r3, r1
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000dd0:	69b8      	ldr	r0, [r7, #24]
 8000dd2:	f7ff fca3 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000de8:	e034      	b.n	8000e54 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d12f      	bne.n	8000e54 <Player_Reading_Card_Monster_Effect+0x1d8>
 8000df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d12b      	bne.n	8000e54 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	799b      	ldrb	r3, [r3, #6]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d927      	bls.n	8000e54 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f8aa 	bl	8000f5e <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e0a:	6939      	ldr	r1, [r7, #16]
 8000e0c:	6978      	ldr	r0, [r7, #20]
 8000e0e:	f7ff fc39 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	799a      	ldrb	r2, [r3, #6]
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <Player_Reading_Card_Monster_Effect+0x1e0>)
 8000e18:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1c:	0899      	lsrs	r1, r3, #2
 8000e1e:	460b      	mov	r3, r1
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	2200      	movs	r2, #0
 8000e32:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	2201      	movs	r2, #1
 8000e38:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e3a:	69b8      	ldr	r0, [r7, #24]
 8000e3c:	f7ff fc6e 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2200      	movs	r2, #0
 8000e44:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000e52:	e7ff      	b.n	8000e54 <Player_Reading_Card_Monster_Effect+0x1d8>
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	; 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	aaaaaaab 	.word	0xaaaaaaab

08000e60 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e7c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	76fb      	strb	r3, [r7, #27]
 8000e82:	e00b      	b.n	8000e9c <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	69f9      	ldr	r1, [r7, #28]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fbfa 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3310      	adds	r3, #16
 8000e94:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000e96:	7efb      	ldrb	r3, [r7, #27]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	76fb      	strb	r3, [r7, #27]
 8000e9c:	7efb      	ldrb	r3, [r7, #27]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d9f0      	bls.n	8000e84 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ec8:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	76fb      	strb	r3, [r7, #27]
 8000ece:	e00b      	b.n	8000ee8 <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	69f9      	ldr	r1, [r7, #28]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fbd4 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3310      	adds	r3, #16
 8000ee0:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000ee2:	7efb      	ldrb	r3, [r7, #27]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	76fb      	strb	r3, [r7, #27]
 8000ee8:	7efb      	ldrb	r3, [r7, #27]
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	d9f0      	bls.n	8000ed0 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3368      	adds	r3, #104	; 0x68
 8000ef2:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	76bb      	strb	r3, [r7, #26]
 8000ef8:	e00b      	b.n	8000f12 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	69f9      	ldr	r1, [r7, #28]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fbbf 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3310      	adds	r3, #16
 8000f0a:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000f0c:	7ebb      	ldrb	r3, [r7, #26]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	76bb      	strb	r3, [r7, #26]
 8000f12:	7ebb      	ldrb	r3, [r7, #26]
 8000f14:	2b13      	cmp	r3, #19
 8000f16:	d9f0      	bls.n	8000efa <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000f1e:	2300      	movs	r3, #0
 8000f20:	767b      	strb	r3, [r7, #25]
 8000f22:	e00b      	b.n	8000f3c <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	69f9      	ldr	r1, [r7, #28]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fbaa 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3310      	adds	r3, #16
 8000f34:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000f36:	7e7b      	ldrb	r3, [r7, #25]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	767b      	strb	r3, [r7, #25]
 8000f3c:	7e7b      	ldrb	r3, [r7, #25]
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	d9f0      	bls.n	8000f24 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f48:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	69f9      	ldr	r1, [r7, #28]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fb97 	bl	8000684 <YUGIOH_card_copy>
}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f6c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000f74:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f7c:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f84:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000f86:	2306      	movs	r3, #6
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e00c      	b.n	8000fa6 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff fb78 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3b10      	subs	r3, #16
 8000f98:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3b10      	subs	r3, #16
 8000f9e:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dcef      	bgt.n	8000f8c <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000fc4:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000fcc:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8000fd4:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000fdc:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000fde:	2306      	movs	r3, #6
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e02c      	b.n	800103e <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff fb4c 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3b02      	subs	r3, #2
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	1e50      	subs	r0, r2, #1
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3b02      	subs	r3, #2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	1e50      	subs	r0, r2, #1
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3b10      	subs	r3, #16
 8001030:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	3b10      	subs	r3, #16
 8001036:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3b01      	subs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dccf      	bgt.n	8000fe4 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 800104e:	b580      	push	{r7, lr}
 8001050:	b08a      	sub	sp, #40	; 0x28
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3368      	adds	r3, #104	; 0x68
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3368      	adds	r3, #104	; 0x68
 8001078:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001080:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001082:	2314      	movs	r3, #20
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e00c      	b.n	80010a2 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001088:	6a39      	ldr	r1, [r7, #32]
 800108a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800108c:	f7ff fafa 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	3b10      	subs	r3, #16
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	3b10      	subs	r3, #16
 800109a:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	3b01      	subs	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dcef      	bgt.n	8001088 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3368      	adds	r3, #104	; 0x68
 80010b0:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80010b2:	6a39      	ldr	r1, [r7, #32]
 80010b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010b6:	f7ff fae5 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 80010c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010c2:	6a38      	ldr	r0, [r7, #32]
 80010c4:	f7ff fade 	bl	8000684 <YUGIOH_card_copy>

}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	; 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3304      	adds	r3, #4
 80010de:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	3304      	adds	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3304      	adds	r3, #4
 80010ea:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80010f2:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8001110:	2108      	movs	r1, #8
 8001112:	48ad      	ldr	r0, [pc, #692]	; (80013c8 <GAME_PLAY_Management+0x2f8>)
 8001114:	f007 ff40 	bl	8008f98 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8001120:	2102      	movs	r1, #2
 8001122:	48aa      	ldr	r0, [pc, #680]	; (80013cc <GAME_PLAY_Management+0x2fc>)
 8001124:	f007 ff38 	bl	8008f98 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8001130:	2104      	movs	r1, #4
 8001132:	48a5      	ldr	r0, [pc, #660]	; (80013c8 <GAME_PLAY_Management+0x2f8>)
 8001134:	f007 ff30 	bl	8008f98 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8001140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001144:	48a2      	ldr	r0, [pc, #648]	; (80013d0 <GAME_PLAY_Management+0x300>)
 8001146:	f007 ff27 	bl	8008f98 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001158:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3304      	adds	r3, #4
 800115e:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3304      	adds	r3, #4
 8001164:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	2b04      	cmp	r3, #4
 800116a:	f200 82c7 	bhi.w	80016fc <GAME_PLAY_Management+0x62c>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <GAME_PLAY_Management+0xa4>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	08001189 	.word	0x08001189
 8001178:	08001405 	.word	0x08001405
 800117c:	08001563 	.word	0x08001563
 8001180:	080015e1 	.word	0x080015e1
 8001184:	08001689 	.word	0x08001689
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001188:	4b92      	ldr	r3, [pc, #584]	; (80013d4 <GAME_PLAY_Management+0x304>)
 800118a:	2200      	movs	r2, #0
 800118c:	9202      	str	r2, [sp, #8]
 800118e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001192:	9201      	str	r2, [sp, #4]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a8f      	ldr	r2, [pc, #572]	; (80013d8 <GAME_PLAY_Management+0x308>)
 800119c:	2105      	movs	r1, #5
 800119e:	2005      	movs	r0, #5
 80011a0:	f003 ff37 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80011a4:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <GAME_PLAY_Management+0x304>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	9202      	str	r2, [sp, #8]
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a89      	ldr	r2, [pc, #548]	; (80013dc <GAME_PLAY_Management+0x30c>)
 80011b8:	210f      	movs	r1, #15
 80011ba:	2000      	movs	r0, #0
 80011bc:	f003 ff29 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80011c0:	4b87      	ldr	r3, [pc, #540]	; (80013e0 <GAME_PLAY_Management+0x310>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	9202      	str	r2, [sp, #8]
 80011c6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80011ca:	9201      	str	r2, [sp, #4]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	9200      	str	r2, [sp, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a84      	ldr	r2, [pc, #528]	; (80013e4 <GAME_PLAY_Management+0x314>)
 80011d4:	2123      	movs	r1, #35	; 0x23
 80011d6:	2008      	movs	r0, #8
 80011d8:	f003 ff1b 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80011dc:	4b80      	ldr	r3, [pc, #512]	; (80013e0 <GAME_PLAY_Management+0x310>)
 80011de:	2200      	movs	r2, #0
 80011e0:	9202      	str	r2, [sp, #8]
 80011e2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011e6:	9201      	str	r2, [sp, #4]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7e      	ldr	r2, [pc, #504]	; (80013e8 <GAME_PLAY_Management+0x318>)
 80011f0:	213c      	movs	r1, #60	; 0x3c
 80011f2:	2019      	movs	r0, #25
 80011f4:	f003 ff0d 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80011f8:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <GAME_PLAY_Management+0x304>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	9202      	str	r2, [sp, #8]
 80011fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001202:	9201      	str	r2, [sp, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a74      	ldr	r2, [pc, #464]	; (80013dc <GAME_PLAY_Management+0x30c>)
 800120c:	214b      	movs	r1, #75	; 0x4b
 800120e:	2000      	movs	r0, #0
 8001210:	f003 feff 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <GAME_PLAY_Management+0x304>)
 8001216:	2200      	movs	r2, #0
 8001218:	9202      	str	r2, [sp, #8]
 800121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	9200      	str	r2, [sp, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a71      	ldr	r2, [pc, #452]	; (80013ec <GAME_PLAY_Management+0x31c>)
 8001228:	215a      	movs	r1, #90	; 0x5a
 800122a:	2000      	movs	r0, #0
 800122c:	f003 fef1 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001230:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <GAME_PLAY_Management+0x304>)
 8001232:	2200      	movs	r2, #0
 8001234:	9202      	str	r2, [sp, #8]
 8001236:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6b      	ldr	r2, [pc, #428]	; (80013f0 <GAME_PLAY_Management+0x320>)
 8001244:	215a      	movs	r1, #90	; 0x5a
 8001246:	205d      	movs	r0, #93	; 0x5d
 8001248:	f003 fee3 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800124c:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <GAME_PLAY_Management+0x304>)
 800124e:	2200      	movs	r2, #0
 8001250:	9202      	str	r2, [sp, #8]
 8001252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <GAME_PLAY_Management+0x324>)
 8001260:	2169      	movs	r1, #105	; 0x69
 8001262:	2000      	movs	r0, #0
 8001264:	f003 fed5 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001268:	4b5a      	ldr	r3, [pc, #360]	; (80013d4 <GAME_PLAY_Management+0x304>)
 800126a:	2200      	movs	r2, #0
 800126c:	9202      	str	r2, [sp, #8]
 800126e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001272:	9201      	str	r2, [sp, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	9200      	str	r2, [sp, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a5f      	ldr	r2, [pc, #380]	; (80013f8 <GAME_PLAY_Management+0x328>)
 800127c:	2169      	movs	r1, #105	; 0x69
 800127e:	2064      	movs	r0, #100	; 0x64
 8001280:	f003 fec7 	bl	8005012 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <GAME_PLAY_Management+0x304>)
 8001286:	2200      	movs	r2, #0
 8001288:	9202      	str	r2, [sp, #8]
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	9201      	str	r2, [sp, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a59      	ldr	r2, [pc, #356]	; (80013fc <GAME_PLAY_Management+0x32c>)
 8001298:	2105      	movs	r1, #5
 800129a:	2005      	movs	r0, #5
 800129c:	f003 ff03 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80012a0:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <GAME_PLAY_Management+0x304>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	9202      	str	r2, [sp, #8]
 80012a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012aa:	9201      	str	r2, [sp, #4]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a4a      	ldr	r2, [pc, #296]	; (80013dc <GAME_PLAY_Management+0x30c>)
 80012b4:	210f      	movs	r1, #15
 80012b6:	2000      	movs	r0, #0
 80012b8:	f003 fef5 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80012bc:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <GAME_PLAY_Management+0x310>)
 80012be:	2200      	movs	r2, #0
 80012c0:	9202      	str	r2, [sp, #8]
 80012c2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80012c6:	9201      	str	r2, [sp, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <GAME_PLAY_Management+0x314>)
 80012d0:	2123      	movs	r1, #35	; 0x23
 80012d2:	2008      	movs	r0, #8
 80012d4:	f003 fee7 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <GAME_PLAY_Management+0x310>)
 80012da:	2200      	movs	r2, #0
 80012dc:	9202      	str	r2, [sp, #8]
 80012de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3f      	ldr	r2, [pc, #252]	; (80013e8 <GAME_PLAY_Management+0x318>)
 80012ec:	213c      	movs	r1, #60	; 0x3c
 80012ee:	2014      	movs	r0, #20
 80012f0:	f003 fed9 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <GAME_PLAY_Management+0x304>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	9202      	str	r2, [sp, #8]
 80012fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	9200      	str	r2, [sp, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a35      	ldr	r2, [pc, #212]	; (80013dc <GAME_PLAY_Management+0x30c>)
 8001308:	214b      	movs	r1, #75	; 0x4b
 800130a:	2000      	movs	r0, #0
 800130c:	f003 fecb 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <GAME_PLAY_Management+0x304>)
 8001312:	2200      	movs	r2, #0
 8001314:	9202      	str	r2, [sp, #8]
 8001316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a32      	ldr	r2, [pc, #200]	; (80013ec <GAME_PLAY_Management+0x31c>)
 8001324:	215a      	movs	r1, #90	; 0x5a
 8001326:	2000      	movs	r0, #0
 8001328:	f003 febd 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <GAME_PLAY_Management+0x304>)
 800132e:	2200      	movs	r2, #0
 8001330:	9202      	str	r2, [sp, #8]
 8001332:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <GAME_PLAY_Management+0x320>)
 8001340:	215a      	movs	r1, #90	; 0x5a
 8001342:	205d      	movs	r0, #93	; 0x5d
 8001344:	f003 feaf 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <GAME_PLAY_Management+0x304>)
 800134a:	2200      	movs	r2, #0
 800134c:	9202      	str	r2, [sp, #8]
 800134e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001352:	9201      	str	r2, [sp, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	9200      	str	r2, [sp, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a26      	ldr	r2, [pc, #152]	; (80013f4 <GAME_PLAY_Management+0x324>)
 800135c:	2169      	movs	r1, #105	; 0x69
 800135e:	2000      	movs	r0, #0
 8001360:	f003 fea1 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <GAME_PLAY_Management+0x304>)
 8001366:	2200      	movs	r2, #0
 8001368:	9202      	str	r2, [sp, #8]
 800136a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	9200      	str	r2, [sp, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <GAME_PLAY_Management+0x328>)
 8001378:	2169      	movs	r1, #105	; 0x69
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	f003 fe93 	bl	80050a6 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8001380:	2108      	movs	r1, #8
 8001382:	481f      	ldr	r0, [pc, #124]	; (8001400 <GAME_PLAY_Management+0x330>)
 8001384:	f007 fe08 	bl	8008f98 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800138e:	2000      	movs	r0, #0
 8001390:	f004 f8a6 	bl	80054e0 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001394:	2000      	movs	r0, #0
 8001396:	f004 f8b4 	bl	8005502 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80013a2:	e1ab      	b.n	80016fc <GAME_PLAY_Management+0x62c>
			state_game->PlyerAction_State = PS_AFK;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80013c4:	e19a      	b.n	80016fc <GAME_PLAY_Management+0x62c>
 80013c6:	bf00      	nop
 80013c8:	58020800 	.word	0x58020800
 80013cc:	58020400 	.word	0x58020400
 80013d0:	58021400 	.word	0x58021400
 80013d4:	2400000c 	.word	0x2400000c
 80013d8:	0800f260 	.word	0x0800f260
 80013dc:	0800f26c 	.word	0x0800f26c
 80013e0:	24000014 	.word	0x24000014
 80013e4:	0800f280 	.word	0x0800f280
 80013e8:	0800f28c 	.word	0x0800f28c
 80013ec:	0800f294 	.word	0x0800f294
 80013f0:	0800f2a4 	.word	0x0800f2a4
 80013f4:	0800f2ac 	.word	0x0800f2ac
 80013f8:	0800f2bc 	.word	0x0800f2bc
 80013fc:	0800f2c0 	.word	0x0800f2c0
 8001400:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <GAME_PLAY_Management+0x590>)
 8001406:	2200      	movs	r2, #0
 8001408:	9202      	str	r2, [sp, #8]
 800140a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	9200      	str	r2, [sp, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a93      	ldr	r2, [pc, #588]	; (8001664 <GAME_PLAY_Management+0x594>)
 8001418:	2105      	movs	r1, #5
 800141a:	2005      	movs	r0, #5
 800141c:	f003 fdf9 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001420:	4b8f      	ldr	r3, [pc, #572]	; (8001660 <GAME_PLAY_Management+0x590>)
 8001422:	2200      	movs	r2, #0
 8001424:	9202      	str	r2, [sp, #8]
 8001426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	9200      	str	r2, [sp, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a8d      	ldr	r2, [pc, #564]	; (8001668 <GAME_PLAY_Management+0x598>)
 8001434:	210f      	movs	r1, #15
 8001436:	2000      	movs	r0, #0
 8001438:	f003 fdeb 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800143c:	4b8b      	ldr	r3, [pc, #556]	; (800166c <GAME_PLAY_Management+0x59c>)
 800143e:	2200      	movs	r2, #0
 8001440:	9202      	str	r2, [sp, #8]
 8001442:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001446:	9201      	str	r2, [sp, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	9200      	str	r2, [sp, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a88      	ldr	r2, [pc, #544]	; (8001670 <GAME_PLAY_Management+0x5a0>)
 8001450:	2123      	movs	r1, #35	; 0x23
 8001452:	2019      	movs	r0, #25
 8001454:	f003 fddd 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001458:	4b84      	ldr	r3, [pc, #528]	; (800166c <GAME_PLAY_Management+0x59c>)
 800145a:	2200      	movs	r2, #0
 800145c:	9202      	str	r2, [sp, #8]
 800145e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a82      	ldr	r2, [pc, #520]	; (8001674 <GAME_PLAY_Management+0x5a4>)
 800146c:	213c      	movs	r1, #60	; 0x3c
 800146e:	2021      	movs	r0, #33	; 0x21
 8001470:	f003 fdcf 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001474:	4b7a      	ldr	r3, [pc, #488]	; (8001660 <GAME_PLAY_Management+0x590>)
 8001476:	2200      	movs	r2, #0
 8001478:	9202      	str	r2, [sp, #8]
 800147a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147e:	9201      	str	r2, [sp, #4]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	9200      	str	r2, [sp, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a78      	ldr	r2, [pc, #480]	; (8001668 <GAME_PLAY_Management+0x598>)
 8001488:	214b      	movs	r1, #75	; 0x4b
 800148a:	2000      	movs	r0, #0
 800148c:	f003 fdc1 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001490:	4b73      	ldr	r3, [pc, #460]	; (8001660 <GAME_PLAY_Management+0x590>)
 8001492:	2200      	movs	r2, #0
 8001494:	9202      	str	r2, [sp, #8]
 8001496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149a:	9201      	str	r2, [sp, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	9200      	str	r2, [sp, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a75      	ldr	r2, [pc, #468]	; (8001678 <GAME_PLAY_Management+0x5a8>)
 80014a4:	2105      	movs	r1, #5
 80014a6:	2005      	movs	r0, #5
 80014a8:	f003 fdfd 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80014ac:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <GAME_PLAY_Management+0x590>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	9202      	str	r2, [sp, #8]
 80014b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b6:	9201      	str	r2, [sp, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	9200      	str	r2, [sp, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <GAME_PLAY_Management+0x598>)
 80014c0:	210f      	movs	r1, #15
 80014c2:	2000      	movs	r0, #0
 80014c4:	f003 fdef 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <GAME_PLAY_Management+0x59c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	9202      	str	r2, [sp, #8]
 80014ce:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80014d2:	9201      	str	r2, [sp, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a65      	ldr	r2, [pc, #404]	; (8001670 <GAME_PLAY_Management+0x5a0>)
 80014dc:	2123      	movs	r1, #35	; 0x23
 80014de:	2019      	movs	r0, #25
 80014e0:	f003 fde1 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80014e4:	4b61      	ldr	r3, [pc, #388]	; (800166c <GAME_PLAY_Management+0x59c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	9202      	str	r2, [sp, #8]
 80014ea:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80014ee:	9201      	str	r2, [sp, #4]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a61      	ldr	r2, [pc, #388]	; (800167c <GAME_PLAY_Management+0x5ac>)
 80014f8:	213c      	movs	r1, #60	; 0x3c
 80014fa:	2025      	movs	r0, #37	; 0x25
 80014fc:	f003 fdd3 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001500:	4b57      	ldr	r3, [pc, #348]	; (8001660 <GAME_PLAY_Management+0x590>)
 8001502:	2200      	movs	r2, #0
 8001504:	9202      	str	r2, [sp, #8]
 8001506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150a:	9201      	str	r2, [sp, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	9200      	str	r2, [sp, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a55      	ldr	r2, [pc, #340]	; (8001668 <GAME_PLAY_Management+0x598>)
 8001514:	214b      	movs	r1, #75	; 0x4b
 8001516:	2000      	movs	r0, #0
 8001518:	f003 fdc5 	bl	80050a6 <ST7735_WriteString1>
		HAL_Delay(3000);
 800151c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001520:	f004 fbec 	bl	8005cfc <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8001524:	2000      	movs	r0, #0
 8001526:	f003 ffdb 	bl	80054e0 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 800152a:	2000      	movs	r0, #0
 800152c:	f003 ffe9 	bl	8005502 <ST7735_FillScreen1>
		MainGUI();
 8001530:	f002 fc50 	bl	8003dd4 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800153a:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001542:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8001544:	69f8      	ldr	r0, [r7, #28]
 8001546:	f7ff fcb1 	bl	8000eac <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800154a:	69b8      	ldr	r0, [r7, #24]
 800154c:	f7ff fcae 	bl	8000eac <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8001560:	e0cc      	b.n	80016fc <GAME_PLAY_Management+0x62c>
	case first_player:
		if (state_game -> F_flag == 0){
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8001568:	2b00      	cmp	r3, #0
 800156a:	d12b      	bne.n	80015c4 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800156c:	4b3f      	ldr	r3, [pc, #252]	; (800166c <GAME_PLAY_Management+0x59c>)
 800156e:	2200      	movs	r2, #0
 8001570:	9202      	str	r2, [sp, #8]
 8001572:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001576:	9201      	str	r2, [sp, #4]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a40      	ldr	r2, [pc, #256]	; (8001680 <GAME_PLAY_Management+0x5b0>)
 8001580:	215a      	movs	r1, #90	; 0x5a
 8001582:	200f      	movs	r0, #15
 8001584:	f003 fd8f 	bl	80050a6 <ST7735_WriteString1>
			HAL_Delay(2000);
 8001588:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800158c:	f004 fbb6 	bl	8005cfc <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2326      	movs	r3, #38	; 0x26
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	215a      	movs	r1, #90	; 0x5a
 800159a:	2000      	movs	r0, #0
 800159c:	f003 fea2 	bl	80052e4 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <GAME_PLAY_Management+0x5b4>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b30      	ldr	r3, [pc, #192]	; (8001684 <GAME_PLAY_Management+0x5b4>)
 80015c2:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3304      	adds	r3, #4
 80015c8:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80015d0:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	6839      	ldr	r1, [r7, #0]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f899 	bl	8001710 <GAME_PLAY_Phase_Management>
		break;
 80015de:	e08d      	b.n	80016fc <GAME_PLAY_Management+0x62c>
	case second_player:
		if (state_game -> S_flag == 0){
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d12b      	bne.n	8001642 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <GAME_PLAY_Management+0x59c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	9202      	str	r2, [sp, #8]
 80015f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015f4:	9201      	str	r2, [sp, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a20      	ldr	r2, [pc, #128]	; (8001680 <GAME_PLAY_Management+0x5b0>)
 80015fe:	215a      	movs	r1, #90	; 0x5a
 8001600:	200f      	movs	r0, #15
 8001602:	f003 fd06 	bl	8005012 <ST7735_WriteString>
			HAL_Delay(2000);
 8001606:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800160a:	f004 fb77 	bl	8005cfc <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 800160e:	2300      	movs	r3, #0
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2326      	movs	r3, #38	; 0x26
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	215a      	movs	r1, #90	; 0x5a
 8001618:	2000      	movs	r0, #0
 800161a:	f003 fdef 	bl	80051fc <ST7735_FillRectangle>
			state_game->S_flag += 1;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8001624:	3301      	adds	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <GAME_PLAY_Management+0x5b4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <GAME_PLAY_Management+0x5b4>)
 8001640:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001648:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3304      	adds	r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f85a 	bl	8001710 <GAME_PLAY_Phase_Management>
		break;
 800165c:	e04e      	b.n	80016fc <GAME_PLAY_Management+0x62c>
 800165e:	bf00      	nop
 8001660:	2400000c 	.word	0x2400000c
 8001664:	0800f260 	.word	0x0800f260
 8001668:	0800f26c 	.word	0x0800f26c
 800166c:	24000014 	.word	0x24000014
 8001670:	0800f2cc 	.word	0x0800f2cc
 8001674:	0800f2d4 	.word	0x0800f2d4
 8001678:	0800f2c0 	.word	0x0800f2c0
 800167c:	0800f2dc 	.word	0x0800f2dc
 8001680:	0800f2e4 	.word	0x0800f2e4
 8001684:	24000176 	.word	0x24000176
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8001688:	2301      	movs	r3, #1
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2326      	movs	r3, #38	; 0x26
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	215a      	movs	r1, #90	; 0x5a
 8001696:	2000      	movs	r0, #0
 8001698:	f003 fe98 	bl	80053cc <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 800169c:	2300      	movs	r3, #0
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2300      	movs	r3, #0
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2326      	movs	r3, #38	; 0x26
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	215a      	movs	r1, #90	; 0x5a
 80016aa:	2000      	movs	r0, #0
 80016ac:	f003 fe8e 	bl	80053cc <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 80016b0:	20c8      	movs	r0, #200	; 0xc8
 80016b2:	f004 fb23 	bl	8005cfc <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <GAME_PLAY_Management+0x634>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	9203      	str	r2, [sp, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	9202      	str	r2, [sp, #8]
 80016c0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <GAME_PLAY_Management+0x638>)
 80016ce:	215a      	movs	r1, #90	; 0x5a
 80016d0:	2014      	movs	r0, #20
 80016d2:	f003 fd32 	bl	800513a <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <GAME_PLAY_Management+0x634>)
 80016d8:	2200      	movs	r2, #0
 80016da:	9203      	str	r2, [sp, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	9202      	str	r2, [sp, #8]
 80016e0:	221f      	movs	r2, #31
 80016e2:	9201      	str	r2, [sp, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	9200      	str	r2, [sp, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <GAME_PLAY_Management+0x63c>)
 80016ec:	215a      	movs	r1, #90	; 0x5a
 80016ee:	200f      	movs	r0, #15
 80016f0:	f003 fd23 	bl	800513a <ST7735_WriteStringNSS>
		HAL_Delay(200);
 80016f4:	20c8      	movs	r0, #200	; 0xc8
 80016f6:	f004 fb01 	bl	8005cfc <HAL_Delay>
		break;
 80016fa:	bf00      	nop
	}
}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24000014 	.word	0x24000014
 8001708:	0800f2f0 	.word	0x0800f2f0
 800170c:	0800f2f8 	.word	0x0800f2f8

08001710 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b092      	sub	sp, #72	; 0x48
 8001714:	af04      	add	r7, sp, #16
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001724:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 800172e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001738:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 800173c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001740:	2b03      	cmp	r3, #3
 8001742:	f202 8111 	bhi.w	8003968 <GAME_PLAY_Phase_Management+0x2258>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <GAME_PLAY_Phase_Management+0x3c>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800395b 	.word	0x0800395b
 8001750:	0800175d 	.word	0x0800175d
 8001754:	0800186d 	.word	0x0800186d
 8001758:	08002ca9 	.word	0x08002ca9
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 800175c:	48aa      	ldr	r0, [pc, #680]	; (8001a08 <GAME_PLAY_Phase_Management+0x2f8>)
 800175e:	f00a fda1 	bl	800c2a4 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 8001762:	6839      	ldr	r1, [r7, #0]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f002 fbf5 	bl	8003f54 <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800176a:	4ba8      	ldr	r3, [pc, #672]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 800176c:	2200      	movs	r2, #0
 800176e:	9202      	str	r2, [sp, #8]
 8001770:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001774:	9201      	str	r2, [sp, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	9200      	str	r2, [sp, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4aa4      	ldr	r2, [pc, #656]	; (8001a10 <GAME_PLAY_Phase_Management+0x300>)
 800177e:	2123      	movs	r1, #35	; 0x23
 8001780:	206e      	movs	r0, #110	; 0x6e
 8001782:	f003 fc46 	bl	8005012 <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001786:	4ba1      	ldr	r3, [pc, #644]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 8001788:	2200      	movs	r2, #0
 800178a:	9202      	str	r2, [sp, #8]
 800178c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001790:	9201      	str	r2, [sp, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a9d      	ldr	r2, [pc, #628]	; (8001a10 <GAME_PLAY_Phase_Management+0x300>)
 800179a:	2123      	movs	r1, #35	; 0x23
 800179c:	206e      	movs	r0, #110	; 0x6e
 800179e:	f003 fc82 	bl	80050a6 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	4b99      	ldr	r3, [pc, #612]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 80017a8:	9203      	str	r2, [sp, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	9202      	str	r2, [sp, #8]
 80017ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	9200      	str	r2, [sp, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a96      	ldr	r2, [pc, #600]	; (8001a14 <GAME_PLAY_Phase_Management+0x304>)
 80017bc:	215a      	movs	r1, #90	; 0x5a
 80017be:	2005      	movs	r0, #5
 80017c0:	f003 fcbb 	bl	800513a <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b90      	ldr	r3, [pc, #576]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 80017ca:	9203      	str	r2, [sp, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	9202      	str	r2, [sp, #8]
 80017d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a8e      	ldr	r2, [pc, #568]	; (8001a18 <GAME_PLAY_Phase_Management+0x308>)
 80017de:	215a      	movs	r1, #90	; 0x5a
 80017e0:	2005      	movs	r0, #5
 80017e2:	f003 fcaa 	bl	800513a <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80017e6:	2101      	movs	r1, #1
 80017e8:	488c      	ldr	r0, [pc, #560]	; (8001a1c <GAME_PLAY_Phase_Management+0x30c>)
 80017ea:	f007 fbd5 	bl	8008f98 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f042 80b4 	bne.w	800395e <GAME_PLAY_Phase_Management+0x224e>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f003 fe72 	bl	80054e0 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f003 fe80 	bl	8005502 <ST7735_FillScreen1>
			MainGUI();
 8001802:	f002 fae7 	bl	8003dd4 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800181c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001820:	f004 fa6c 	bl	8005cfc <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 800182a:	9203      	str	r2, [sp, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	9202      	str	r2, [sp, #8]
 8001830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001834:	9201      	str	r2, [sp, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	9200      	str	r2, [sp, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <GAME_PLAY_Phase_Management+0x304>)
 800183e:	215a      	movs	r1, #90	; 0x5a
 8001840:	2005      	movs	r0, #5
 8001842:	f003 fc7a 	bl	800513a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 800184c:	9203      	str	r2, [sp, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	9202      	str	r2, [sp, #8]
 8001852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a70      	ldr	r2, [pc, #448]	; (8001a20 <GAME_PLAY_Phase_Management+0x310>)
 8001860:	215a      	movs	r1, #90	; 0x5a
 8001862:	2005      	movs	r0, #5
 8001864:	f003 fc69 	bl	800513a <ST7735_WriteStringNSS>
		}
		break;
 8001868:	f002 b879 	b.w	800395e <GAME_PLAY_Phase_Management+0x224e>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f002 fb70 	bl	8003f54 <LCDvalue>

		switch (PMS)
 8001874:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001878:	2b07      	cmp	r3, #7
 800187a:	f202 8072 	bhi.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <GAME_PLAY_Phase_Management+0x174>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08002c7f 	.word	0x08002c7f
 8001888:	080018a5 	.word	0x080018a5
 800188c:	080019b5 	.word	0x080019b5
 8001890:	08001ac1 	.word	0x08001ac1
 8001894:	08001e4d 	.word	0x08001e4d
 8001898:	080021f9 	.word	0x080021f9
 800189c:	080020ed 	.word	0x080020ed
 80018a0:	08001fed 	.word	0x08001fed
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d169      	bne.n	8001980 <GAME_PLAY_Phase_Management+0x270>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	9202      	str	r2, [sp, #8]
 80018b2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	9200      	str	r2, [sp, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a59      	ldr	r2, [pc, #356]	; (8001a24 <GAME_PLAY_Phase_Management+0x314>)
 80018c0:	2123      	movs	r1, #35	; 0x23
 80018c2:	206e      	movs	r0, #110	; 0x6e
 80018c4:	f003 fba5 	bl	8005012 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	9202      	str	r2, [sp, #8]
 80018ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <GAME_PLAY_Phase_Management+0x314>)
 80018dc:	2123      	movs	r1, #35	; 0x23
 80018de:	206e      	movs	r0, #110	; 0x6e
 80018e0:	f003 fbe1 	bl	80050a6 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80018e4:	2101      	movs	r1, #1
 80018e6:	484d      	ldr	r0, [pc, #308]	; (8001a1c <GAME_PLAY_Phase_Management+0x30c>)
 80018e8:	f007 fb56 	bl	8008f98 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d13f      	bne.n	8001972 <GAME_PLAY_Phase_Management+0x262>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f003 fdf4 	bl	80054e0 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f003 fe02 	bl	8005502 <ST7735_FillScreen1>
					MainGUI();
 80018fe:	f002 fa69 	bl	8003dd4 <MainGUI>
					state_game->action = 50;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2232      	movs	r2, #50	; 0x32
 8001906:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f002 fa3e 	bl	8003d92 <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2203      	movs	r2, #3
 800191a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 8001926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192a:	f004 f9e7 	bl	8005cfc <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 8001934:	9203      	str	r2, [sp, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	9202      	str	r2, [sp, #8]
 800193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	9200      	str	r2, [sp, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a38      	ldr	r2, [pc, #224]	; (8001a28 <GAME_PLAY_Phase_Management+0x318>)
 8001948:	215a      	movs	r1, #90	; 0x5a
 800194a:	2005      	movs	r0, #5
 800194c:	f003 fbf5 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 8001956:	9203      	str	r2, [sp, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	9202      	str	r2, [sp, #8]
 800195c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	9200      	str	r2, [sp, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <GAME_PLAY_Phase_Management+0x31c>)
 800196a:	215a      	movs	r1, #90	; 0x5a
 800196c:	2005      	movs	r0, #5
 800196e:	f003 fbe4 	bl	800513a <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f7fe feec 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 800197c:	f001 b982 	b.w	8002c84 <GAME_PLAY_Phase_Management+0x1574>
			else if (state_game->action == 1)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	f041 817d 	bne.w	8002c84 <GAME_PLAY_Phase_Management+0x1574>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2326      	movs	r3, #38	; 0x26
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	215a      	movs	r1, #90	; 0x5a
 800199a:	2000      	movs	r0, #0
 800199c:	f003 fd16 	bl	80053cc <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80019b0:	f001 b968 	b.w	8002c84 <GAME_PLAY_Phase_Management+0x1574>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <GAME_PLAY_Phase_Management+0x2fc>)
 80019ba:	9203      	str	r2, [sp, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	9202      	str	r2, [sp, #8]
 80019c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c4:	9201      	str	r2, [sp, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	9200      	str	r2, [sp, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <GAME_PLAY_Phase_Management+0x320>)
 80019ce:	215a      	movs	r1, #90	; 0x5a
 80019d0:	2005      	movs	r0, #5
 80019d2:	f003 fbb2 	bl	800513a <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34

			if (state_game->action == 1)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d140      	bne.n	8001a70 <GAME_PLAY_Phase_Management+0x360>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	789b      	ldrb	r3, [r3, #2]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d11e      	bne.n	8001a34 <GAME_PLAY_Phase_Management+0x324>
					ptrYugiohCard_src->cardState = 0;
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	2200      	movs	r2, #0
 80019fa:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2202      	movs	r2, #2
 8001a00:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001a02:	f001 b942 	b.w	8002c8a <GAME_PLAY_Phase_Management+0x157a>
 8001a06:	bf00      	nop
 8001a08:	240002e8 	.word	0x240002e8
 8001a0c:	2400000c 	.word	0x2400000c
 8001a10:	0800f304 	.word	0x0800f304
 8001a14:	0800f308 	.word	0x0800f308
 8001a18:	0800f318 	.word	0x0800f318
 8001a1c:	58020800 	.word	0x58020800
 8001a20:	0800f324 	.word	0x0800f324
 8001a24:	0800f334 	.word	0x0800f334
 8001a28:	0800f338 	.word	0x0800f338
 8001a2c:	0800f348 	.word	0x0800f348
 8001a30:	0800f358 	.word	0x0800f358
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f041 8126 	bne.w	8002c8a <GAME_PLAY_Phase_Management+0x157a>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8001a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f002 f959 	bl	8003cf8 <YUGIOH_Check_Spell_On_board>
 8001a46:	4603      	mov	r3, r0
 8001a48:	74bb      	strb	r3, [r7, #18]
					if (idxC != 255) {
 8001a4a:	7cbb      	ldrb	r3, [r7, #18]
 8001a4c:	2bff      	cmp	r3, #255	; 0xff
 8001a4e:	d007      	beq.n	8001a60 <GAME_PLAY_Phase_Management+0x350>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8001a50:	7cbb      	ldrb	r3, [r7, #18]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	3308      	adds	r3, #8
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fe49 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	2201      	movs	r2, #1
 8001a64:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	701a      	strb	r2, [r3, #0]
			break;
 8001a6c:	f001 b90d 	b.w	8002c8a <GAME_PLAY_Phase_Management+0x157a>
			else if (state_game->action == 2)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	f041 8108 	bne.w	8002c8a <GAME_PLAY_Phase_Management+0x157a>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2300      	movs	r3, #0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2326      	movs	r3, #38	; 0x26
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	215a      	movs	r1, #90	; 0x5a
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f003 fc9e 	bl	80053cc <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2326      	movs	r3, #38	; 0x26
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	215a      	movs	r1, #90	; 0x5a
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f003 fc93 	bl	80053cc <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001aa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001aaa:	f7fe fdeb 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001abc:	f001 b8e5 	b.w	8002c8a <GAME_PLAY_Phase_Management+0x157a>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 3)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	f041 80df 	bne.w	8002c90 <GAME_PLAY_Phase_Management+0x1580>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d15e      	bne.n	8001b98 <GAME_PLAY_Phase_Management+0x488>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b8f      	ldr	r3, [pc, #572]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001ae0:	9203      	str	r2, [sp, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	9202      	str	r2, [sp, #8]
 8001ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aea:	9201      	str	r2, [sp, #4]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	9200      	str	r2, [sp, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a8b      	ldr	r2, [pc, #556]	; (8001d20 <GAME_PLAY_Phase_Management+0x610>)
 8001af4:	215a      	movs	r1, #90	; 0x5a
 8001af6:	2005      	movs	r0, #5
 8001af8:	f003 fb1f 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	4b86      	ldr	r3, [pc, #536]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001b02:	9203      	str	r2, [sp, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	9202      	str	r2, [sp, #8]
 8001b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0c:	9201      	str	r2, [sp, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	9200      	str	r2, [sp, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a83      	ldr	r2, [pc, #524]	; (8001d24 <GAME_PLAY_Phase_Management+0x614>)
 8001b16:	215a      	movs	r1, #90	; 0x5a
 8001b18:	2005      	movs	r0, #5
 8001b1a:	f003 fb0e 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b7e      	ldr	r3, [pc, #504]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001b24:	9203      	str	r2, [sp, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	9202      	str	r2, [sp, #8]
 8001b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	9200      	str	r2, [sp, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7c      	ldr	r2, [pc, #496]	; (8001d28 <GAME_PLAY_Phase_Management+0x618>)
 8001b38:	2169      	movs	r1, #105	; 0x69
 8001b3a:	2005      	movs	r0, #5
 8001b3c:	f003 fafd 	bl	800513a <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	2200      	movs	r2, #0
 8001b44:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b48:	799a      	ldrb	r2, [r3, #6]
 8001b4a:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <GAME_PLAY_Phase_Management+0x61c>)
 8001b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b50:	0899      	lsrs	r1, r3, #2
 8001b52:	460b      	mov	r3, r1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	440b      	add	r3, r1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	74fb      	strb	r3, [r7, #19]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001b5e:	7cfb      	ldrb	r3, [r7, #19]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	3308      	adds	r3, #8
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001b6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b6e:	f7fe fd89 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff f974 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fd7f 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8001b94:	f001 b87c 	b.w	8002c90 <GAME_PLAY_Phase_Management+0x1580>
				else if (ptrYugiohCard_src->cardType == 2)
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	f040 80cb 	bne.w	8001d38 <GAME_PLAY_Phase_Management+0x628>
					state_game->count_chain = 1;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8001ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d159      	bne.n	8001c64 <GAME_PLAY_Phase_Management+0x554>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001bb6:	9203      	str	r2, [sp, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	9202      	str	r2, [sp, #8]
 8001bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc0:	9201      	str	r2, [sp, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a59      	ldr	r2, [pc, #356]	; (8001d30 <GAME_PLAY_Phase_Management+0x620>)
 8001bca:	215a      	movs	r1, #90	; 0x5a
 8001bcc:	2005      	movs	r0, #5
 8001bce:	f003 fab4 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	4b51      	ldr	r3, [pc, #324]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001bd8:	9203      	str	r2, [sp, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	9202      	str	r2, [sp, #8]
 8001bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <GAME_PLAY_Phase_Management+0x624>)
 8001bec:	215a      	movs	r1, #90	; 0x5a
 8001bee:	2005      	movs	r0, #5
 8001bf0:	f003 faa3 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2326      	movs	r3, #38	; 0x26
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	215a      	movs	r1, #90	; 0x5a
 8001c04:	2000      	movs	r0, #0
 8001c06:	f003 fbe1 	bl	80053cc <ST7735_FillRectangleNSS>
						state_game->action = 4;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8001c10:	68b8      	ldr	r0, [r7, #8]
 8001c12:	f7ff f9d0 	bl	8000fb6 <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c20:	f7fe fd30 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff f90b 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fd16 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001c60:	f001 b816 	b.w	8002c90 <GAME_PLAY_Phase_Management+0x1580>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001c6a:	9203      	str	r2, [sp, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	9202      	str	r2, [sp, #8]
 8001c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c74:	9201      	str	r2, [sp, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	9200      	str	r2, [sp, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <GAME_PLAY_Phase_Management+0x610>)
 8001c7e:	215a      	movs	r1, #90	; 0x5a
 8001c80:	2005      	movs	r0, #5
 8001c82:	f003 fa5a 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001c8c:	9203      	str	r2, [sp, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	9202      	str	r2, [sp, #8]
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	9201      	str	r2, [sp, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	9200      	str	r2, [sp, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <GAME_PLAY_Phase_Management+0x614>)
 8001ca0:	215a      	movs	r1, #90	; 0x5a
 8001ca2:	2005      	movs	r0, #5
 8001ca4:	f003 fa49 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <GAME_PLAY_Phase_Management+0x60c>)
 8001cae:	9203      	str	r2, [sp, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb8:	9201      	str	r2, [sp, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <GAME_PLAY_Phase_Management+0x618>)
 8001cc2:	2169      	movs	r1, #105	; 0x69
 8001cc4:	2005      	movs	r0, #5
 8001cc6:	f003 fa38 	bl	800513a <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	799a      	ldrb	r2, [r3, #6]
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <GAME_PLAY_Phase_Management+0x61c>)
 8001cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd4:	0899      	lsrs	r1, r3, #2
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	753b      	strb	r3, [r7, #20]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001ce2:	7d3b      	ldrb	r3, [r7, #20]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001cee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cf2:	f7fe fcc7 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff f8b2 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fcbd 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001d18:	f000 bfba 	b.w	8002c90 <GAME_PLAY_Phase_Management+0x1580>
 8001d1c:	2400000c 	.word	0x2400000c
 8001d20:	0800f368 	.word	0x0800f368
 8001d24:	0800f378 	.word	0x0800f378
 8001d28:	0800f388 	.word	0x0800f388
 8001d2c:	aaaaaaab 	.word	0xaaaaaaab
 8001d30:	0800f390 	.word	0x0800f390
 8001d34:	0800f3a8 	.word	0x0800f3a8
				else if (ptrYugiohCard_src->cardType == 1)
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	f040 87a7 	bne.w	8002c90 <GAME_PLAY_Phase_Management+0x1580>
					state_game->test = 2;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2202      	movs	r2, #2
 8001d46:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	78db      	ldrb	r3, [r3, #3]
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d870      	bhi.n	8001e34 <GAME_PLAY_Phase_Management+0x724>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	4ba0      	ldr	r3, [pc, #640]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001d58:	9203      	str	r2, [sp, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	9202      	str	r2, [sp, #8]
 8001d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d62:	9201      	str	r2, [sp, #4]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	9200      	str	r2, [sp, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a9c      	ldr	r2, [pc, #624]	; (8001fdc <GAME_PLAY_Phase_Management+0x8cc>)
 8001d6c:	215a      	movs	r1, #90	; 0x5a
 8001d6e:	2005      	movs	r0, #5
 8001d70:	f003 f9e3 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	4b97      	ldr	r3, [pc, #604]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001d7a:	9203      	str	r2, [sp, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	9202      	str	r2, [sp, #8]
 8001d80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d84:	9201      	str	r2, [sp, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	9200      	str	r2, [sp, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a94      	ldr	r2, [pc, #592]	; (8001fe0 <GAME_PLAY_Phase_Management+0x8d0>)
 8001d8e:	2169      	movs	r1, #105	; 0x69
 8001d90:	2005      	movs	r0, #5
 8001d92:	f003 f9d2 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	4b8f      	ldr	r3, [pc, #572]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001d9c:	9203      	str	r2, [sp, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	9202      	str	r2, [sp, #8]
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	9201      	str	r2, [sp, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	9200      	str	r2, [sp, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a8d      	ldr	r2, [pc, #564]	; (8001fe4 <GAME_PLAY_Phase_Management+0x8d4>)
 8001db0:	215a      	movs	r1, #90	; 0x5a
 8001db2:	2005      	movs	r0, #5
 8001db4:	f003 f9c1 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b86      	ldr	r3, [pc, #536]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001dbe:	9203      	str	r2, [sp, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	9202      	str	r2, [sp, #8]
 8001dc4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dc8:	9201      	str	r2, [sp, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	9200      	str	r2, [sp, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a83      	ldr	r2, [pc, #524]	; (8001fe0 <GAME_PLAY_Phase_Management+0x8d0>)
 8001dd2:	2169      	movs	r1, #105	; 0x69
 8001dd4:	2005      	movs	r0, #5
 8001dd6:	f003 f9b0 	bl	800513a <ST7735_WriteStringNSS>
						state_game->test = 1;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	799a      	ldrb	r2, [r3, #6]
 8001de6:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <GAME_PLAY_Phase_Management+0x8d8>)
 8001de8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dec:	0899      	lsrs	r1, r3, #2
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	757b      	strb	r3, [r7, #21]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001dfa:	7d7b      	ldrb	r3, [r7, #21]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	3308      	adds	r3, #8
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001e06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e0a:	f7fe fc3b 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff f826 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fc31 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001e30:	f000 bf2e 	b.w	8002c90 <GAME_PLAY_Phase_Management+0x1580>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff f813 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2204      	movs	r2, #4
 8001e44:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001e48:	f000 bf22 	b.w	8002c90 <GAME_PLAY_Phase_Management+0x1580>
		case advance_summon:
			// Current state_game->action = 4



			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 4)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d105      	bne.n	8001e68 <GAME_PLAY_Phase_Management+0x758>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7fe fc77 	bl	8000754 <Player_Reading_Card>
 8001e66:	e070      	b.n	8001f4a <GAME_PLAY_Phase_Management+0x83a>
			}
			else if (state_game->action == 5)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d105      	bne.n	8001e7c <GAME_PLAY_Phase_Management+0x76c>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7fe fc6d 	bl	8000754 <Player_Reading_Card>
 8001e7a:	e066      	b.n	8001f4a <GAME_PLAY_Phase_Management+0x83a>
			}
			else if (state_game->action == 6)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d162      	bne.n	8001f4a <GAME_PLAY_Phase_Management+0x83a>
			{
				uint8_t monsterflag = 0 ;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	78db      	ldrb	r3, [r3, #3]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d804      	bhi.n	8001ea4 <GAME_PLAY_Phase_Management+0x794>
				{
					monsterflag += 1;
 8001e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				}
				ptrYugiohCard_dst++;
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	78db      	ldrb	r3, [r3, #3]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d804      	bhi.n	8001ebc <GAME_PLAY_Phase_Management+0x7ac>
				{
					monsterflag += 1;
 8001eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				}

				if (monsterflag == 2)
 8001ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d135      	bne.n	8001f30 <GAME_PLAY_Phase_Management+0x820>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	799a      	ldrb	r2, [r3, #6]
 8001ec8:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <GAME_PLAY_Phase_Management+0x8d8>)
 8001eca:	fba3 1302 	umull	r1, r3, r3, r2
 8001ece:	0899      	lsrs	r1, r3, #2
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	75bb      	strb	r3, [r7, #22]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001edc:	7dbb      	ldrb	r3, [r7, #22]
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001ee8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eec:	f7fe fbca 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff f8a8 	bl	800104e <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff f8a1 	bl	800104e <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe ffa7 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fbb2 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8001f2e:	e00c      	b.n	8001f4a <GAME_PLAY_Phase_Management+0x83a>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe ff95 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f7fe fb9d 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001f50:	9203      	str	r2, [sp, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	9202      	str	r2, [sp, #8]
 8001f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5a:	9201      	str	r2, [sp, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <GAME_PLAY_Phase_Management+0x8cc>)
 8001f64:	215a      	movs	r1, #90	; 0x5a
 8001f66:	2005      	movs	r0, #5
 8001f68:	f003 f8e7 	bl	800513a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001f72:	9203      	str	r2, [sp, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	9202      	str	r2, [sp, #8]
 8001f78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f7c:	9201      	str	r2, [sp, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	9200      	str	r2, [sp, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <GAME_PLAY_Phase_Management+0x8d0>)
 8001f86:	2169      	movs	r1, #105	; 0x69
 8001f88:	2005      	movs	r0, #5
 8001f8a:	f003 f8d6 	bl	800513a <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001f94:	9203      	str	r2, [sp, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	9202      	str	r2, [sp, #8]
 8001f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9e:	9201      	str	r2, [sp, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <GAME_PLAY_Phase_Management+0x8d4>)
 8001fa8:	215a      	movs	r1, #90	; 0x5a
 8001faa:	2005      	movs	r0, #5
 8001fac:	f003 f8c5 	bl	800513a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <GAME_PLAY_Phase_Management+0x8c8>)
 8001fb6:	9203      	str	r2, [sp, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	9202      	str	r2, [sp, #8]
 8001fbc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001fc0:	9201      	str	r2, [sp, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <GAME_PLAY_Phase_Management+0x8d0>)
 8001fca:	2169      	movs	r1, #105	; 0x69
 8001fcc:	2005      	movs	r0, #5
 8001fce:	f003 f8b4 	bl	800513a <ST7735_WriteStringNSS>
			break;
 8001fd2:	f000 be67 	b.w	8002ca4 <GAME_PLAY_Phase_Management+0x1594>
 8001fd6:	bf00      	nop
 8001fd8:	2400000c 	.word	0x2400000c
 8001fdc:	0800f3bc 	.word	0x0800f3bc
 8001fe0:	0800f3c8 	.word	0x0800f3c8
 8001fe4:	0800f3d4 	.word	0x0800f3d4
 8001fe8:	aaaaaaab 	.word	0xaaaaaaab
		case chaining_main_DEF:

			// Current state_game->action = 4

			//    ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b7f      	ldr	r3, [pc, #508]	; (80021f0 <GAME_PLAY_Phase_Management+0xae0>)
 8001ff2:	9203      	str	r2, [sp, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	9202      	str	r2, [sp, #8]
 8001ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffc:	9201      	str	r2, [sp, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	9200      	str	r2, [sp, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a7b      	ldr	r2, [pc, #492]	; (80021f4 <GAME_PLAY_Phase_Management+0xae4>)
 8002006:	215a      	movs	r1, #90	; 0x5a
 8002008:	2005      	movs	r0, #5
 800200a:	f003 f896 	bl	800513a <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d11c      	bne.n	8002050 <GAME_PLAY_Phase_Management+0x940>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d111      	bne.n	8002042 <GAME_PLAY_Phase_Management+0x932>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2326      	movs	r3, #38	; 0x26
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	215a      	movs	r1, #90	; 0x5a
 800202e:	2000      	movs	r0, #0
 8002030:	f003 f9cc 	bl	80053cc <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2205      	movs	r2, #5
 8002038:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7fe fb84 	bl	8000754 <Player_Reading_Card>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 800204c:	f000 be23 	b.w	8002c96 <GAME_PLAY_Phase_Management+0x1586>
			else if ((state_game->action == 5 )){
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b05      	cmp	r3, #5
 8002056:	f040 861e 	bne.w	8002c96 <GAME_PLAY_Phase_Management+0x1586>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2326      	movs	r3, #38	; 0x26
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	215a      	movs	r1, #90	; 0x5a
 800206a:	2000      	movs	r0, #0
 800206c:	f003 f9ae 	bl	80053cc <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8002078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800207a:	6838      	ldr	r0, [r7, #0]
 800207c:	f001 fe10 	bl	8003ca0 <YUGIOH_Check_Trap_On_board>
 8002080:	4603      	mov	r3, r0
 8002082:	763b      	strb	r3, [r7, #24]
				if (idx != 255)
 8002084:	7e3b      	ldrb	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d02b      	beq.n	80020e2 <GAME_PLAY_Phase_Management+0x9d2>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800208a:	68b8      	ldr	r0, [r7, #8]
 800208c:	f7fe ff93 	bl	8000fb6 <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8002090:	7e3b      	ldrb	r3, [r7, #24]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	3308      	adds	r3, #8
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	4413      	add	r3, r2
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	2200      	movs	r2, #0
 80020a0:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80020a8:	4619      	mov	r1, r3
 80020aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020ac:	f7fe faea 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2206      	movs	r2, #6
 80020d4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2204      	movs	r2, #4
 80020dc:	701a      	strb	r2, [r3, #0]
			break;
 80020de:	f000 bdda 	b.w	8002c96 <GAME_PLAY_Phase_Management+0x1586>
					state_game->action = 4;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2204      	movs	r2, #4
 80020e6:	701a      	strb	r2, [r3, #0]
			break;
 80020e8:	f000 bdd5 	b.w	8002c96 <GAME_PLAY_Phase_Management+0x1586>
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <GAME_PLAY_Phase_Management+0xae0>)
 80020f2:	9203      	str	r2, [sp, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	9202      	str	r2, [sp, #8]
 80020f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fc:	9201      	str	r2, [sp, #4]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	9200      	str	r2, [sp, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a3b      	ldr	r2, [pc, #236]	; (80021f4 <GAME_PLAY_Phase_Management+0xae4>)
 8002106:	215a      	movs	r1, #90	; 0x5a
 8002108:	2005      	movs	r0, #5
 800210a:	f003 f816 	bl	800513a <ST7735_WriteStringNSS>
			//ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
			if(state_game->action == 4)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d128      	bne.n	8002168 <GAME_PLAY_Phase_Management+0xa58>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7fe fb1a 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 85b9 	bne.w	8002c9c <GAME_PLAY_Phase_Management+0x158c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2300      	movs	r3, #0
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2326      	movs	r3, #38	; 0x26
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	215a      	movs	r1, #90	; 0x5a
 800213a:	2000      	movs	r0, #0
 800213c:	f003 f946 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2326      	movs	r3, #38	; 0x26
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	215a      	movs	r1, #90	; 0x5a
 8002150:	2000      	movs	r0, #0
 8002152:	f003 f93b 	bl	80053cc <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2205      	movs	r2, #5
 800215a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	705a      	strb	r2, [r3, #1]
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002164:	f000 bd9a 	b.w	8002c9c <GAME_PLAY_Phase_Management+0x158c>
			else if ((state_game->action == 5 )){
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b05      	cmp	r3, #5
 800216e:	f040 8595 	bne.w	8002c9c <GAME_PLAY_Phase_Management+0x158c>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 800217a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f001 fd8f 	bl	8003ca0 <YUGIOH_Check_Trap_On_board>
 8002182:	4603      	mov	r3, r0
 8002184:	75fb      	strb	r3, [r7, #23]
				if (idx != 255)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	2bff      	cmp	r3, #255	; 0xff
 800218a:	d02b      	beq.n	80021e4 <GAME_PLAY_Phase_Management+0xad4>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800218c:	68b8      	ldr	r0, [r7, #8]
 800218e:	f7fe ff12 	bl	8000fb6 <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	3308      	adds	r3, #8
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a0:	2200      	movs	r2, #0
 80021a2:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80021aa:	4619      	mov	r1, r3
 80021ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021ae:	f7fe fa69 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2206      	movs	r2, #6
 80021d6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2204      	movs	r2, #4
 80021de:	701a      	strb	r2, [r3, #0]
			break;
 80021e0:	f000 bd5c 	b.w	8002c9c <GAME_PLAY_Phase_Management+0x158c>
					state_game->action = 4;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2204      	movs	r2, #4
 80021e8:	701a      	strb	r2, [r3, #0]
			break;
 80021ea:	f000 bd57 	b.w	8002c9c <GAME_PLAY_Phase_Management+0x158c>
 80021ee:	bf00      	nop
 80021f0:	2400000c 	.word	0x2400000c
 80021f4:	0800f3e4 	.word	0x0800f3e4
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	4b74      	ldr	r3, [pc, #464]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 80021fe:	9203      	str	r2, [sp, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	9202      	str	r2, [sp, #8]
 8002204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	9200      	str	r2, [sp, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <GAME_PLAY_Phase_Management+0xcc4>)
 8002212:	215a      	movs	r1, #90	; 0x5a
 8002214:	2005      	movs	r0, #5
 8002216:	f002 ff90 	bl	800513a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	4b6c      	ldr	r3, [pc, #432]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 8002220:	9203      	str	r2, [sp, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	9202      	str	r2, [sp, #8]
 8002226:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800222a:	9201      	str	r2, [sp, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	9200      	str	r2, [sp, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a69      	ldr	r2, [pc, #420]	; (80023d8 <GAME_PLAY_Phase_Management+0xcc8>)
 8002234:	2169      	movs	r1, #105	; 0x69
 8002236:	2005      	movs	r0, #5
 8002238:	f002 ff7f 	bl	800513a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 8002242:	9203      	str	r2, [sp, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	9202      	str	r2, [sp, #8]
 8002248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224c:	9201      	str	r2, [sp, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	9200      	str	r2, [sp, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a61      	ldr	r2, [pc, #388]	; (80023dc <GAME_PLAY_Phase_Management+0xccc>)
 8002256:	215a      	movs	r1, #90	; 0x5a
 8002258:	2005      	movs	r0, #5
 800225a:	f002 ff6e 	bl	800513a <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 8002264:	9203      	str	r2, [sp, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	9202      	str	r2, [sp, #8]
 800226a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800226e:	9201      	str	r2, [sp, #4]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	9200      	str	r2, [sp, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <GAME_PLAY_Phase_Management+0xcc8>)
 8002278:	2169      	movs	r1, #105	; 0x69
 800227a:	2005      	movs	r0, #5
 800227c:	f002 ff5d 	bl	800513a <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	623b      	str	r3, [r7, #32]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	61fb      	str	r3, [r7, #28]

			if(state_game->action == 4)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	f040 820b 	bne.w	80026c4 <GAME_PLAY_Phase_Management+0xfb4>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	785a      	ldrb	r2, [r3, #1]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f080 81d5 	bcs.w	8002668 <GAME_PLAY_Phase_Management+0xf58>
				{
					state_game->test = 165;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	22a5      	movs	r2, #165	; 0xa5
 80022c2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	3344      	adds	r3, #68	; 0x44
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4413      	add	r3, r2
 80022d2:	3304      	adds	r3, #4
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28

					if (ptrYugiohCard_src->cardSignature == 11)
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b0b      	cmp	r3, #11
 80022dc:	f040 8086 	bne.w	80023ec <GAME_PLAY_Phase_Management+0xcdc>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 fb61 	bl	80039ac <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe feac 	bl	800104e <YUGIOH_To_GY>
						state_game->count_chain++;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 800230a:	9203      	str	r2, [sp, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	9202      	str	r2, [sp, #8]
 8002310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	9200      	str	r2, [sp, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a30      	ldr	r2, [pc, #192]	; (80023e0 <GAME_PLAY_Phase_Management+0xcd0>)
 800231e:	215a      	movs	r1, #90	; 0x5a
 8002320:	2005      	movs	r0, #5
 8002322:	f002 ff0a 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 800232e:	9203      	str	r2, [sp, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	9202      	str	r2, [sp, #8]
 8002334:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002338:	9201      	str	r2, [sp, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	9200      	str	r2, [sp, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <GAME_PLAY_Phase_Management+0xcd4>)
 8002342:	2169      	movs	r1, #105	; 0x69
 8002344:	2005      	movs	r0, #5
 8002346:	f002 fef8 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 8002352:	9203      	str	r2, [sp, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	9202      	str	r2, [sp, #8]
 8002358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235c:	9201      	str	r2, [sp, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	9200      	str	r2, [sp, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <GAME_PLAY_Phase_Management+0xcd8>)
 8002366:	215a      	movs	r1, #90	; 0x5a
 8002368:	2005      	movs	r0, #5
 800236a:	f002 fee6 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <GAME_PLAY_Phase_Management+0xcc0>)
 8002376:	9203      	str	r2, [sp, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	9202      	str	r2, [sp, #8]
 800237c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002380:	9201      	str	r2, [sp, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	9200      	str	r2, [sp, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <GAME_PLAY_Phase_Management+0xcc8>)
 800238a:	2169      	movs	r1, #105	; 0x69
 800238c:	2005      	movs	r0, #5
 800238e:	f002 fed4 	bl	800513a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002396:	f003 fcb1 	bl	8005cfc <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	2300      	movs	r3, #0
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2326      	movs	r3, #38	; 0x26
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	215a      	movs	r1, #90	; 0x5a
 80023ac:	2000      	movs	r0, #0
 80023ae:	f003 f80d 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2326      	movs	r3, #38	; 0x26
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	215a      	movs	r1, #90	; 0x5a
 80023c4:	2000      	movs	r0, #0
 80023c6:	f003 f801 	bl	80053cc <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 80023ca:	f000 bc6a 	b.w	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
 80023ce:	bf00      	nop
 80023d0:	2400000c 	.word	0x2400000c
 80023d4:	0800f400 	.word	0x0800f400
 80023d8:	0800f410 	.word	0x0800f410
 80023dc:	0800f420 	.word	0x0800f420
 80023e0:	0800f434 	.word	0x0800f434
 80023e4:	0800f444 	.word	0x0800f444
 80023e8:	0800f44c 	.word	0x0800f44c
					else if (ptrYugiohCard_src->cardSignature == 12)
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d178      	bne.n	80024e6 <GAME_PLAY_Phase_Management+0xdd6>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f001 faf4 	bl	80039ec <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fe1f 	bl	800104e <YUGIOH_To_GY>
						state_game->count_chain++;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	3301      	adds	r3, #1
 8002416:	b2da      	uxtb	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	4ba0      	ldr	r3, [pc, #640]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 8002424:	9203      	str	r2, [sp, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	9202      	str	r2, [sp, #8]
 800242a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800242e:	9201      	str	r2, [sp, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	9200      	str	r2, [sp, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a9c      	ldr	r2, [pc, #624]	; (80026a8 <GAME_PLAY_Phase_Management+0xf98>)
 8002438:	215a      	movs	r1, #90	; 0x5a
 800243a:	2005      	movs	r0, #5
 800243c:	f002 fe7d 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b97      	ldr	r3, [pc, #604]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 8002448:	9203      	str	r2, [sp, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	9202      	str	r2, [sp, #8]
 800244e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002452:	9201      	str	r2, [sp, #4]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	9200      	str	r2, [sp, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a94      	ldr	r2, [pc, #592]	; (80026ac <GAME_PLAY_Phase_Management+0xf9c>)
 800245c:	2169      	movs	r1, #105	; 0x69
 800245e:	2005      	movs	r0, #5
 8002460:	f002 fe6b 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	4b8e      	ldr	r3, [pc, #568]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 800246c:	9203      	str	r2, [sp, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a8c      	ldr	r2, [pc, #560]	; (80026b0 <GAME_PLAY_Phase_Management+0xfa0>)
 8002480:	215a      	movs	r1, #90	; 0x5a
 8002482:	2005      	movs	r0, #5
 8002484:	f002 fe59 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 8002490:	9203      	str	r2, [sp, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	9202      	str	r2, [sp, #8]
 8002496:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800249a:	9201      	str	r2, [sp, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	9200      	str	r2, [sp, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a84      	ldr	r2, [pc, #528]	; (80026b4 <GAME_PLAY_Phase_Management+0xfa4>)
 80024a4:	2169      	movs	r1, #105	; 0x69
 80024a6:	2005      	movs	r0, #5
 80024a8:	f002 fe47 	bl	800513a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80024ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b0:	f003 fc24 	bl	8005cfc <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2326      	movs	r3, #38	; 0x26
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	215a      	movs	r1, #90	; 0x5a
 80024c6:	2000      	movs	r0, #0
 80024c8:	f002 ff80 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2326      	movs	r3, #38	; 0x26
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	215a      	movs	r1, #90	; 0x5a
 80024de:	2000      	movs	r0, #0
 80024e0:	f002 ff74 	bl	80053cc <ST7735_FillRectangleNSS>
			break;
 80024e4:	e3dd      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					else if (ptrYugiohCard_src->cardSignature == 13)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d107      	bne.n	80024fe <GAME_PLAY_Phase_Management+0xdee>
						state_game->test = 166;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	22a6      	movs	r2, #166	; 0xa6
 80024f2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2205      	movs	r2, #5
 80024fa:	701a      	strb	r2, [r3, #0]
			break;
 80024fc:	e3d1      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b0e      	cmp	r3, #14
 8002504:	d003      	beq.n	800250e <GAME_PLAY_Phase_Management+0xdfe>
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	d17c      	bne.n	8002608 <GAME_PLAY_Phase_Management+0xef8>
						state_game->test = 133;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2285      	movs	r2, #133	; 0x85
 8002512:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f001 fb37 	bl	8003b94 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fd8e 	bl	800104e <YUGIOH_To_GY>
						state_game->count_chain++;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	3301      	adds	r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 8002546:	9203      	str	r2, [sp, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	9202      	str	r2, [sp, #8]
 800254c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002550:	9201      	str	r2, [sp, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	9200      	str	r2, [sp, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a57      	ldr	r2, [pc, #348]	; (80026b8 <GAME_PLAY_Phase_Management+0xfa8>)
 800255a:	215a      	movs	r1, #90	; 0x5a
 800255c:	2005      	movs	r0, #5
 800255e:	f002 fdec 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	4b4e      	ldr	r3, [pc, #312]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 800256a:	9203      	str	r2, [sp, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002574:	9201      	str	r2, [sp, #4]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a4f      	ldr	r2, [pc, #316]	; (80026bc <GAME_PLAY_Phase_Management+0xfac>)
 800257e:	2169      	movs	r1, #105	; 0x69
 8002580:	2005      	movs	r0, #5
 8002582:	f002 fdda 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	781a      	ldrb	r2, [r3, #0]
 800258c:	4b45      	ldr	r3, [pc, #276]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 800258e:	9203      	str	r2, [sp, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	9202      	str	r2, [sp, #8]
 8002594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	9200      	str	r2, [sp, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a43      	ldr	r2, [pc, #268]	; (80026b0 <GAME_PLAY_Phase_Management+0xfa0>)
 80025a2:	215a      	movs	r1, #90	; 0x5a
 80025a4:	2005      	movs	r0, #5
 80025a6:	f002 fdc8 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <GAME_PLAY_Phase_Management+0xf94>)
 80025b2:	9203      	str	r2, [sp, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80025bc:	9201      	str	r2, [sp, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a3e      	ldr	r2, [pc, #248]	; (80026c0 <GAME_PLAY_Phase_Management+0xfb0>)
 80025c6:	2169      	movs	r1, #105	; 0x69
 80025c8:	2005      	movs	r0, #5
 80025ca:	f002 fdb6 	bl	800513a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80025ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d2:	f003 fb93 	bl	8005cfc <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2326      	movs	r3, #38	; 0x26
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	215a      	movs	r1, #90	; 0x5a
 80025e8:	2000      	movs	r0, #0
 80025ea:	f002 feef 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2300      	movs	r3, #0
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2326      	movs	r3, #38	; 0x26
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	215a      	movs	r1, #90	; 0x5a
 8002600:	2000      	movs	r0, #0
 8002602:	f002 fee3 	bl	80053cc <ST7735_FillRectangleNSS>
			break;
 8002606:	e34c      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b10      	cmp	r3, #16
 800260e:	d107      	bne.n	8002620 <GAME_PLAY_Phase_Management+0xf10>
						state_game->test = 124;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	227c      	movs	r2, #124	; 0x7c
 8002614:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2205      	movs	r2, #5
 800261c:	701a      	strb	r2, [r3, #0]
			break;
 800261e:	e340      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b11      	cmp	r3, #17
 8002626:	d103      	bne.n	8002630 <GAME_PLAY_Phase_Management+0xf20>
						state_game->action = 5;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2205      	movs	r2, #5
 800262c:	701a      	strb	r2, [r3, #0]
			break;
 800262e:	e338      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b12      	cmp	r3, #18
 8002636:	d004      	beq.n	8002642 <GAME_PLAY_Phase_Management+0xf32>
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b13      	cmp	r3, #19
 800263e:	f040 8330 	bne.w	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 832a 	bne.w	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fcfa 	bl	800104e <YUGIOH_To_GY>
							state_game->count_chain++;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	785b      	ldrb	r3, [r3, #1]
 800265e:	3301      	adds	r3, #1
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	705a      	strb	r2, [r3, #1]
			break;
 8002666:	e31c      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2326      	movs	r3, #38	; 0x26
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	215a      	movs	r1, #90	; 0x5a
 8002678:	2000      	movs	r0, #0
 800267a:	f002 fea7 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2300      	movs	r3, #0
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2326      	movs	r3, #38	; 0x26
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	215a      	movs	r1, #90	; 0x5a
 800268e:	2000      	movs	r0, #0
 8002690:	f002 fe9c 	bl	80053cc <ST7735_FillRectangleNSS>
					state_game->action = 0;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80026a2:	e2fe      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
 80026a4:	2400000c 	.word	0x2400000c
 80026a8:	0800f434 	.word	0x0800f434
 80026ac:	0800f45c 	.word	0x0800f45c
 80026b0:	0800f44c 	.word	0x0800f44c
 80026b4:	0800f410 	.word	0x0800f410
 80026b8:	0800f468 	.word	0x0800f468
 80026bc:	0800f478 	.word	0x0800f478
 80026c0:	0800f488 	.word	0x0800f488
			else if (state_game->action == 5)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d14a      	bne.n	8002762 <GAME_PLAY_Phase_Management+0x1052>
				state_game->test = 167;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	22a7      	movs	r2, #167	; 0xa7
 80026d0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	785b      	ldrb	r3, [r3, #1]
 80026d8:	3344      	adds	r3, #68	; 0x44
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
				if((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	789b      	ldrb	r3, [r3, #2]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d119      	bne.n	8002722 <GAME_PLAY_Phase_Management+0x1012>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fbb4 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&(*ptrUser)->ActtionBuffer[0],&(*ptrUser)->CardInPlayed);
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7fd ffba 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 4;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2204      	movs	r2, #4
 8002714:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	3301      	adds	r3, #1
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b0d      	cmp	r3, #13
 8002728:	d107      	bne.n	800273a <GAME_PLAY_Phase_Management+0x102a>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7fe f8fe 	bl	8000934 <Player_Reading_Card_Reborn>
			break;
 8002738:	e2b3      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
				else if(ptrYugiohCard_src->cardSignature == 16){
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d107      	bne.n	8002752 <GAME_PLAY_Phase_Management+0x1042>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7fe f9a0 	bl	8000a90 <Player_Reading_Card_Ancient_Rule>
			break;
 8002750:	e2a7      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					Player_Reading_Card(RFIDmain, state_game, *ptrUser);
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7fd fffa 	bl	8000754 <Player_Reading_Card>
			break;
 8002760:	e29f      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
			else if (state_game->action == 6)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b06      	cmp	r3, #6
 8002768:	f040 829b 	bne.w	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
				state_game->test = 169;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	22a9      	movs	r2, #169	; 0xa9
 8002770:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	3344      	adds	r3, #68	; 0x44
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ptrYugiohCard_src->cardSignature == 13){
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b0d      	cmp	r3, #13
 800278a:	f040 816c 	bne.w	8002a66 <GAME_PLAY_Phase_Management+0x1356>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <GAME_PLAY_Phase_Management+0x11f0>)
 8002796:	9203      	str	r2, [sp, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	9202      	str	r2, [sp, #8]
 800279c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	9200      	str	r2, [sp, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a56      	ldr	r2, [pc, #344]	; (8002904 <GAME_PLAY_Phase_Management+0x11f4>)
 80027aa:	215a      	movs	r1, #90	; 0x5a
 80027ac:	2005      	movs	r0, #5
 80027ae:	f002 fcc4 	bl	800513a <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 80ad 	bne.w	8002918 <GAME_PLAY_Phase_Management+0x1208>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	2300      	movs	r3, #0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2326      	movs	r3, #38	; 0x26
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	215a      	movs	r1, #90	; 0x5a
 80027d0:	2000      	movs	r0, #0
 80027d2:	f002 fdfb 	bl	80053cc <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	22aa      	movs	r2, #170	; 0xaa
 80027da:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 0;
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	2200      	movs	r2, #0
 80027ec:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027f6:	4619      	mov	r1, r3
 80027f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027fa:	f7fd ff43 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f001 f930 	bl	8003a68 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f001 f8b2 	bl	800397c <Test_EFF>
						state_game->action = 4;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2204      	movs	r2, #4
 800281c:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fc12 	bl	800104e <YUGIOH_To_GY>
						state_game->count_chain++;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	3301      	adds	r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <GAME_PLAY_Phase_Management+0x11f0>)
 800283e:	9203      	str	r2, [sp, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	9202      	str	r2, [sp, #8]
 8002844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002848:	9201      	str	r2, [sp, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	9200      	str	r2, [sp, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2d      	ldr	r2, [pc, #180]	; (8002908 <GAME_PLAY_Phase_Management+0x11f8>)
 8002852:	215a      	movs	r1, #90	; 0x5a
 8002854:	2005      	movs	r0, #5
 8002856:	f002 fc70 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <GAME_PLAY_Phase_Management+0x11f0>)
 8002862:	9203      	str	r2, [sp, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	9202      	str	r2, [sp, #8]
 8002868:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a25      	ldr	r2, [pc, #148]	; (800290c <GAME_PLAY_Phase_Management+0x11fc>)
 8002876:	2169      	movs	r1, #105	; 0x69
 8002878:	2005      	movs	r0, #5
 800287a:	f002 fc5e 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <GAME_PLAY_Phase_Management+0x11f0>)
 8002886:	9203      	str	r2, [sp, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	9202      	str	r2, [sp, #8]
 800288c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002890:	9201      	str	r2, [sp, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	9200      	str	r2, [sp, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <GAME_PLAY_Phase_Management+0x1200>)
 800289a:	215a      	movs	r1, #90	; 0x5a
 800289c:	2005      	movs	r0, #5
 800289e:	f002 fc4c 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	781a      	ldrb	r2, [r3, #0]
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <GAME_PLAY_Phase_Management+0x11f0>)
 80028aa:	9203      	str	r2, [sp, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	9202      	str	r2, [sp, #8]
 80028b0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028b4:	9201      	str	r2, [sp, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	9200      	str	r2, [sp, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <GAME_PLAY_Phase_Management+0x1204>)
 80028be:	2169      	movs	r1, #105	; 0x69
 80028c0:	2005      	movs	r0, #5
 80028c2:	f002 fc3a 	bl	800513a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80028c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ca:	f003 fa17 	bl	8005cfc <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2326      	movs	r3, #38	; 0x26
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	215a      	movs	r1, #90	; 0x5a
 80028e0:	2000      	movs	r0, #0
 80028e2:	f002 fd73 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2326      	movs	r3, #38	; 0x26
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	215a      	movs	r1, #90	; 0x5a
 80028f8:	2000      	movs	r0, #0
 80028fa:	f002 fd67 	bl	80053cc <ST7735_FillRectangleNSS>
			break;
 80028fe:	e1d0      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
 8002900:	2400000c 	.word	0x2400000c
 8002904:	0800f358 	.word	0x0800f358
 8002908:	0800f434 	.word	0x0800f434
 800290c:	0800f494 	.word	0x0800f494
 8002910:	0800f44c 	.word	0x0800f44c
 8002914:	0800f410 	.word	0x0800f410
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 81bf 	bne.w	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2326      	movs	r3, #38	; 0x26
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	215a      	movs	r1, #90	; 0x5a
 8002936:	2000      	movs	r0, #0
 8002938:	f002 fd48 	bl	80053cc <ST7735_FillRectangleNSS>
						state_game->test = 171;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	22ab      	movs	r2, #171	; 0xab
 8002940:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 1;
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2201      	movs	r2, #1
 8002952:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800295c:	4619      	mov	r1, r3
 800295e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002960:	f7fd fe90 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f87d 	bl	8003a68 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f000 ffff 	bl	800397c <Test_EFF>
						state_game->action = 4;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2204      	movs	r2, #4
 8002982:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fb5f 	bl	800104e <YUGIOH_To_GY>
						state_game->count_chain++;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	3301      	adds	r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 80029a4:	9203      	str	r2, [sp, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	9202      	str	r2, [sp, #8]
 80029aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ae:	9201      	str	r2, [sp, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	9200      	str	r2, [sp, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6c      	ldr	r2, [pc, #432]	; (8002b68 <GAME_PLAY_Phase_Management+0x1458>)
 80029b8:	215a      	movs	r1, #90	; 0x5a
 80029ba:	2005      	movs	r0, #5
 80029bc:	f002 fbbd 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 80029c8:	9203      	str	r2, [sp, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	9202      	str	r2, [sp, #8]
 80029ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80029d2:	9201      	str	r2, [sp, #4]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	9200      	str	r2, [sp, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a64      	ldr	r2, [pc, #400]	; (8002b6c <GAME_PLAY_Phase_Management+0x145c>)
 80029dc:	2169      	movs	r1, #105	; 0x69
 80029de:	2005      	movs	r0, #5
 80029e0:	f002 fbab 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 80029ec:	9203      	str	r2, [sp, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	9202      	str	r2, [sp, #8]
 80029f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f6:	9201      	str	r2, [sp, #4]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	9200      	str	r2, [sp, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5c      	ldr	r2, [pc, #368]	; (8002b70 <GAME_PLAY_Phase_Management+0x1460>)
 8002a00:	215a      	movs	r1, #90	; 0x5a
 8002a02:	2005      	movs	r0, #5
 8002a04:	f002 fb99 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 8002a10:	9203      	str	r2, [sp, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	9202      	str	r2, [sp, #8]
 8002a16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a1a:	9201      	str	r2, [sp, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	9200      	str	r2, [sp, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a54      	ldr	r2, [pc, #336]	; (8002b74 <GAME_PLAY_Phase_Management+0x1464>)
 8002a24:	2169      	movs	r1, #105	; 0x69
 8002a26:	2005      	movs	r0, #5
 8002a28:	f002 fb87 	bl	800513a <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a30:	f003 f964 	bl	8005cfc <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2326      	movs	r3, #38	; 0x26
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	215a      	movs	r1, #90	; 0x5a
 8002a46:	2000      	movs	r0, #0
 8002a48:	f002 fcc0 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2300      	movs	r3, #0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2326      	movs	r3, #38	; 0x26
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	215a      	movs	r1, #90	; 0x5a
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f002 fcb4 	bl	80053cc <ST7735_FillRectangleNSS>
			break;
 8002a64:	e11d      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	f040 8086 	bne.w	8002b7c <GAME_PLAY_Phase_Management+0x146c>
					YUGIOH_Ancient_Rules(*ptrUser);
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f861 	bl	8003b3c <YUGIOH_Ancient_Rules>
					state_game->action = 4;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fae1 	bl	800104e <YUGIOH_To_GY>
					state_game->count_chain++;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	3301      	adds	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 8002aa0:	9203      	str	r2, [sp, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	9202      	str	r2, [sp, #8]
 8002aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aaa:	9201      	str	r2, [sp, #4]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	9200      	str	r2, [sp, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	; (8002b68 <GAME_PLAY_Phase_Management+0x1458>)
 8002ab4:	215a      	movs	r1, #90	; 0x5a
 8002ab6:	2005      	movs	r0, #5
 8002ab8:	f002 fb3f 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Ancient Rules", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 8002ac4:	9203      	str	r2, [sp, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	9202      	str	r2, [sp, #8]
 8002aca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ace:	9201      	str	r2, [sp, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	9200      	str	r2, [sp, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <GAME_PLAY_Phase_Management+0x1468>)
 8002ad8:	2169      	movs	r1, #105	; 0x69
 8002ada:	2005      	movs	r0, #5
 8002adc:	f002 fb2d 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 8002ae8:	9203      	str	r2, [sp, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	9202      	str	r2, [sp, #8]
 8002aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af2:	9201      	str	r2, [sp, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	9200      	str	r2, [sp, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <GAME_PLAY_Phase_Management+0x1460>)
 8002afc:	215a      	movs	r1, #90	; 0x5a
 8002afe:	2005      	movs	r0, #5
 8002b00:	f002 fb1b 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <GAME_PLAY_Phase_Management+0x1454>)
 8002b0c:	9203      	str	r2, [sp, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	9202      	str	r2, [sp, #8]
 8002b12:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b16:	9201      	str	r2, [sp, #4]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <GAME_PLAY_Phase_Management+0x1464>)
 8002b20:	2169      	movs	r1, #105	; 0x69
 8002b22:	2005      	movs	r0, #5
 8002b24:	f002 fb09 	bl	800513a <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8002b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b2c:	f003 f8e6 	bl	8005cfc <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2326      	movs	r3, #38	; 0x26
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	215a      	movs	r1, #90	; 0x5a
 8002b42:	2000      	movs	r0, #0
 8002b44:	f002 fc42 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	2300      	movs	r3, #0
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2326      	movs	r3, #38	; 0x26
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	215a      	movs	r1, #90	; 0x5a
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f002 fc36 	bl	80053cc <ST7735_FillRectangleNSS>
			break;
 8002b60:	e09f      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
 8002b62:	bf00      	nop
 8002b64:	2400000c 	.word	0x2400000c
 8002b68:	0800f434 	.word	0x0800f434
 8002b6c:	0800f494 	.word	0x0800f494
 8002b70:	0800f44c 	.word	0x0800f44c
 8002b74:	0800f410 	.word	0x0800f410
 8002b78:	0800f4a4 	.word	0x0800f4a4
				else if(ptrYugiohCard_src->cardSignature == 17){
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	f040 808e 	bne.w	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f001 f84f 	bl	8003c34 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2204      	movs	r2, #4
 8002b9a:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fa53 	bl	800104e <YUGIOH_To_GY>
					state_game->count_chain++;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	3301      	adds	r3, #1
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4bb3      	ldr	r3, [pc, #716]	; (8002e88 <GAME_PLAY_Phase_Management+0x1778>)
 8002bbc:	9203      	str	r2, [sp, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	9202      	str	r2, [sp, #8]
 8002bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4aaf      	ldr	r2, [pc, #700]	; (8002e8c <GAME_PLAY_Phase_Management+0x177c>)
 8002bd0:	215a      	movs	r1, #90	; 0x5a
 8002bd2:	2005      	movs	r0, #5
 8002bd4:	f002 fab1 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4baa      	ldr	r3, [pc, #680]	; (8002e88 <GAME_PLAY_Phase_Management+0x1778>)
 8002be0:	9203      	str	r2, [sp, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	9202      	str	r2, [sp, #8]
 8002be6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002bea:	9201      	str	r2, [sp, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	9200      	str	r2, [sp, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4aa7      	ldr	r2, [pc, #668]	; (8002e90 <GAME_PLAY_Phase_Management+0x1780>)
 8002bf4:	2169      	movs	r1, #105	; 0x69
 8002bf6:	2005      	movs	r0, #5
 8002bf8:	f002 fa9f 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	4ba1      	ldr	r3, [pc, #644]	; (8002e88 <GAME_PLAY_Phase_Management+0x1778>)
 8002c04:	9203      	str	r2, [sp, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	9202      	str	r2, [sp, #8]
 8002c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0e:	9201      	str	r2, [sp, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a9f      	ldr	r2, [pc, #636]	; (8002e94 <GAME_PLAY_Phase_Management+0x1784>)
 8002c18:	215a      	movs	r1, #90	; 0x5a
 8002c1a:	2005      	movs	r0, #5
 8002c1c:	f002 fa8d 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	4b98      	ldr	r3, [pc, #608]	; (8002e88 <GAME_PLAY_Phase_Management+0x1778>)
 8002c28:	9203      	str	r2, [sp, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	9202      	str	r2, [sp, #8]
 8002c2e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c32:	9201      	str	r2, [sp, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	9200      	str	r2, [sp, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a97      	ldr	r2, [pc, #604]	; (8002e98 <GAME_PLAY_Phase_Management+0x1788>)
 8002c3c:	2169      	movs	r1, #105	; 0x69
 8002c3e:	2005      	movs	r0, #5
 8002c40:	f002 fa7b 	bl	800513a <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8002c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c48:	f003 f858 	bl	8005cfc <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2326      	movs	r3, #38	; 0x26
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	215a      	movs	r1, #90	; 0x5a
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f002 fbb4 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2326      	movs	r3, #38	; 0x26
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	215a      	movs	r1, #90	; 0x5a
 8002c76:	2000      	movs	r0, #0
 8002c78:	f002 fba8 	bl	80053cc <ST7735_FillRectangleNSS>
			break;
 8002c7c:	e011      	b.n	8002ca2 <GAME_PLAY_Phase_Management+0x1592>
			break;
 8002c7e:	bf00      	nop
 8002c80:	f000 be6f 	b.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
			break;
 8002c84:	bf00      	nop
 8002c86:	f000 be6c 	b.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
			break;
 8002c8a:	bf00      	nop
 8002c8c:	f000 be69 	b.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
			break;
 8002c90:	bf00      	nop
 8002c92:	f000 be66 	b.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
			break;
 8002c96:	bf00      	nop
 8002c98:	f000 be63 	b.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
			break;
 8002c9c:	bf00      	nop
 8002c9e:	f000 be60 	b.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
			break;
 8002ca2:	bf00      	nop
		}
		break;
 8002ca4:	f000 be5d 	b.w	8003962 <GAME_PLAY_Phase_Management+0x2252>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f001 f952 	bl	8003f54 <LCDvalue>
			switch(PBS){
 8002cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002cb4:	2b06      	cmp	r3, #6
 8002cb6:	f200 8656 	bhi.w	8003966 <GAME_PLAY_Phase_Management+0x2256>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <GAME_PLAY_Phase_Management+0x15b0>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08003943 	.word	0x08003943
 8002cc4:	08002cdd 	.word	0x08002cdd
 8002cc8:	0800316b 	.word	0x0800316b
 8002ccc:	08002fab 	.word	0x08002fab
 8002cd0:	0800333f 	.word	0x0800333f
 8002cd4:	080034a1 	.word	0x080034a1
 8002cd8:	08003853 	.word	0x08003853
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <GAME_PLAY_Phase_Management+0x1778>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	9202      	str	r2, [sp, #8]
 8002ce2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	9200      	str	r2, [sp, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6b      	ldr	r2, [pc, #428]	; (8002e9c <GAME_PLAY_Phase_Management+0x178c>)
 8002cf0:	2123      	movs	r1, #35	; 0x23
 8002cf2:	206e      	movs	r0, #110	; 0x6e
 8002cf4:	f002 f98d 	bl	8005012 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8002cf8:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <GAME_PLAY_Phase_Management+0x1778>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	9202      	str	r2, [sp, #8]
 8002cfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d02:	9201      	str	r2, [sp, #4]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	9200      	str	r2, [sp, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a64      	ldr	r2, [pc, #400]	; (8002e9c <GAME_PLAY_Phase_Management+0x178c>)
 8002d0c:	2123      	movs	r1, #35	; 0x23
 8002d0e:	206e      	movs	r0, #110	; 0x6e
 8002d10:	f002 f9c9 	bl	80050a6 <ST7735_WriteString1>
				if(state_game->action == 50){
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b32      	cmp	r3, #50	; 0x32
 8002d1a:	d166      	bne.n	8002dea <GAME_PLAY_Phase_Management+0x16da>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7fd fd17 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8002d26:	2101      	movs	r1, #1
 8002d28:	485d      	ldr	r0, [pc, #372]	; (8002ea0 <GAME_PLAY_Phase_Management+0x1790>)
 8002d2a:	f006 f935 	bl	8008f98 <HAL_GPIO_ReadPin>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 8608 	bne.w	8003946 <GAME_PLAY_Phase_Management+0x2236>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8002d36:	485b      	ldr	r0, [pc, #364]	; (8002ea4 <GAME_PLAY_Phase_Management+0x1794>)
 8002d38:	f009 fb2c 	bl	800c394 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8002d3c:	495a      	ldr	r1, [pc, #360]	; (8002ea8 <GAME_PLAY_Phase_Management+0x1798>)
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2326      	movs	r3, #38	; 0x26
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	215a      	movs	r1, #90	; 0x5a
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f002 fb36 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	4b51      	ldr	r3, [pc, #324]	; (8002eac <GAME_PLAY_Phase_Management+0x179c>)
 8002d66:	9203      	str	r2, [sp, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	9202      	str	r2, [sp, #8]
 8002d6c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d70:	9201      	str	r2, [sp, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	9200      	str	r2, [sp, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <GAME_PLAY_Phase_Management+0x17a0>)
 8002d7a:	215a      	movs	r1, #90	; 0x5a
 8002d7c:	200f      	movs	r0, #15
 8002d7e:	f002 f9dc 	bl	800513a <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8002d82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d86:	f002 ffb9 	bl	8005cfc <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2300      	movs	r3, #0
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2326      	movs	r3, #38	; 0x26
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	215a      	movs	r1, #90	; 0x5a
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f002 fb16 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2326      	movs	r3, #38	; 0x26
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	215a      	movs	r1, #90	; 0x5a
 8002db0:	2000      	movs	r0, #0
 8002db2:	f002 fb0b 	bl	80053cc <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 ffc7 	bl	8003d50 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d104      	bne.n	8002dd6 <GAME_PLAY_Phase_Management+0x16c6>
							state_game->MainGame_State = second_player;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8002dd4:	e003      	b.n	8002dde <GAME_PLAY_Phase_Management+0x16ce>
						}
						else{
							state_game->MainGame_State = first_player;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8002de6:	f000 bdae 	b.w	8003946 <GAME_PLAY_Phase_Management+0x2236>
				else if(state_game->action == 51){
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b33      	cmp	r3, #51	; 0x33
 8002df0:	f040 85a9 	bne.w	8003946 <GAME_PLAY_Phase_Management+0x2236>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2326      	movs	r3, #38	; 0x26
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	215a      	movs	r1, #90	; 0x5a
 8002e04:	2000      	movs	r0, #0
 8002e06:	f002 fae1 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2300      	movs	r3, #0
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2326      	movs	r3, #38	; 0x26
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	215a      	movs	r1, #90	; 0x5a
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f002 fad6 	bl	80053cc <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	799b      	ldrb	r3, [r3, #6]
 8002e32:	767b      	strb	r3, [r7, #25]
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3338      	adds	r3, #56	; 0x38
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002e40:	e010      	b.n	8002e64 <GAME_PLAY_Phase_Management+0x1754>
						if(ptrYugiohCard_dst->cardData == 0){
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d104      	bne.n	8002e54 <GAME_PLAY_Phase_Management+0x1744>
							check_def_mon++;
 8002e4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						ptrYugiohCard_dst++;
 8002e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e56:	3310      	adds	r3, #16
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 8002e5a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002e64:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d9ea      	bls.n	8002e42 <GAME_PLAY_Phase_Management+0x1732>
					uint8_t flag_can_atk = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3338      	adds	r3, #56	; 0x38
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002e86:	e02e      	b.n	8002ee6 <GAME_PLAY_Phase_Management+0x17d6>
 8002e88:	2400000c 	.word	0x2400000c
 8002e8c:	0800f434 	.word	0x0800f434
 8002e90:	0800f4b4 	.word	0x0800f4b4
 8002e94:	0800f44c 	.word	0x0800f44c
 8002e98:	0800f410 	.word	0x0800f410
 8002e9c:	0800f4c4 	.word	0x0800f4c4
 8002ea0:	58020800 	.word	0x58020800
 8002ea4:	240002e8 	.word	0x240002e8
 8002ea8:	24000ea0 	.word	0x24000ea0
 8002eac:	24000014 	.word	0x24000014
 8002eb0:	0800f4c8 	.word	0x0800f4c8
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d10a      	bne.n	8002ed6 <GAME_PLAY_Phase_Management+0x17c6>
							if(ptrYugiohCard_dst->cardState == 1){
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	789b      	ldrb	r3, [r3, #2]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d103      	bne.n	8002ed0 <GAME_PLAY_Phase_Management+0x17c0>
								flag_can_atk = 2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
								break;
 8002ece:	e00e      	b.n	8002eee <GAME_PLAY_Phase_Management+0x17de>
								flag_can_atk = 1;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						ptrYugiohCard_dst++;
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	3310      	adds	r3, #16
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8002edc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d9e2      	bls.n	8002eb4 <GAME_PLAY_Phase_Management+0x17a4>
					if (check_def_mon < 3)
 8002eee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d80b      	bhi.n	8002f0e <GAME_PLAY_Phase_Management+0x17fe>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8002ef6:	7e7b      	ldrb	r3, [r7, #25]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	4413      	add	r3, r2
 8002f00:	3304      	adds	r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <GAME_PLAY_Phase_Management+0x17fe>
							flag_can_atk = 1;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					if (flag_can_atk == 2) {
 8002f0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d13c      	bne.n	8002f90 <GAME_PLAY_Phase_Management+0x1880>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	7a1b      	ldrb	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d02b      	beq.n	8002f76 <GAME_PLAY_Phase_Management+0x1866>
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	789b      	ldrb	r3, [r3, #2]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d127      	bne.n	8002f76 <GAME_PLAY_Phase_Management+0x1866>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	7a1b      	ldrb	r3, [r3, #8]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f3c:	f7fd fba2 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
							if(check_def_mon == 3){
 8002f48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d103      	bne.n	8002f58 <GAME_PLAY_Phase_Management+0x1848>
								ptrYugiohCard_dst->targetPosition = 99;
 8002f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f52:	2263      	movs	r2, #99	; 0x63
 8002f54:	71da      	strb	r2, [r3, #7]
 8002f56:	e002      	b.n	8002f5e <GAME_PLAY_Phase_Management+0x184e>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	7e7a      	ldrb	r2, [r7, #25]
 8002f5c:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f7fd ff7e 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2234      	movs	r2, #52	; 0x34
 8002f68:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002f72:	f000 bce8 	b.w	8003946 <GAME_PLAY_Phase_Management+0x2236>
							state_game->test = 222;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	22de      	movs	r2, #222	; 0xde
 8002f7a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2232      	movs	r2, #50	; 0x32
 8002f82:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002f8c:	f000 bcdb 	b.w	8003946 <GAME_PLAY_Phase_Management+0x2236>
						state_game->test = 223;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	22df      	movs	r2, #223	; 0xdf
 8002f94:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2232      	movs	r2, #50	; 0x32
 8002f9c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002fa6:	f000 bcce 	b.w	8003946 <GAME_PLAY_Phase_Management+0x2236>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	4b9d      	ldr	r3, [pc, #628]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 8002fb0:	9203      	str	r2, [sp, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	9202      	str	r2, [sp, #8]
 8002fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fba:	9201      	str	r2, [sp, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	9200      	str	r2, [sp, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a99      	ldr	r2, [pc, #612]	; (8003228 <GAME_PLAY_Phase_Management+0x1b18>)
 8002fc4:	215a      	movs	r1, #90	; 0x5a
 8002fc6:	2005      	movs	r0, #5
 8002fc8:	f002 f8b7 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	4b94      	ldr	r3, [pc, #592]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 8002fd2:	9203      	str	r2, [sp, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	9202      	str	r2, [sp, #8]
 8002fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fdc:	9201      	str	r2, [sp, #4]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	9200      	str	r2, [sp, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a91      	ldr	r2, [pc, #580]	; (800322c <GAME_PLAY_Phase_Management+0x1b1c>)
 8002fe6:	2169      	movs	r1, #105	; 0x69
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f002 f8a6 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	4b8c      	ldr	r3, [pc, #560]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 8002ff4:	9203      	str	r2, [sp, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	9202      	str	r2, [sp, #8]
 8002ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffe:	9201      	str	r2, [sp, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	9200      	str	r2, [sp, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a8a      	ldr	r2, [pc, #552]	; (8003230 <GAME_PLAY_Phase_Management+0x1b20>)
 8003008:	215a      	movs	r1, #90	; 0x5a
 800300a:	2005      	movs	r0, #5
 800300c:	f002 f895 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	4b83      	ldr	r3, [pc, #524]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 8003016:	9203      	str	r2, [sp, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	9202      	str	r2, [sp, #8]
 800301c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003020:	9201      	str	r2, [sp, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a82      	ldr	r2, [pc, #520]	; (8003234 <GAME_PLAY_Phase_Management+0x1b24>)
 800302a:	2169      	movs	r1, #105	; 0x69
 800302c:	2005      	movs	r0, #5
 800302e:	f002 f884 	bl	800513a <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b34      	cmp	r3, #52	; 0x34
 8003038:	d119      	bne.n	800306e <GAME_PLAY_Phase_Management+0x195e>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	789b      	ldrb	r3, [r3, #2]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <GAME_PLAY_Phase_Management+0x1946>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2204      	movs	r2, #4
 8003046:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2236      	movs	r2, #54	; 0x36
 800304e:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2200      	movs	r2, #0
 8003054:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7fd fb7a 	bl	8000754 <Player_Reading_Card>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7fd fe09 	bl	8000c7c <Player_Reading_Card_Monster_Effect>





				break;
 800306a:	f000 bc6e 	b.w	800394a <GAME_PLAY_Phase_Management+0x223a>
				else if ((state_game->action == 53 ))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b35      	cmp	r3, #53	; 0x35
 8003074:	f040 8469 	bne.w	800394a <GAME_PLAY_Phase_Management+0x223a>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2300      	movs	r3, #0
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2326      	movs	r3, #38	; 0x26
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	215a      	movs	r1, #90	; 0x5a
 8003088:	2000      	movs	r0, #0
 800308a:	f002 f99f 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2326      	movs	r3, #38	; 0x26
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	215a      	movs	r1, #90	; 0x5a
 800309e:	2000      	movs	r0, #0
 80030a0:	f002 f994 	bl	80053cc <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 80030ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ae:	6838      	ldr	r0, [r7, #0]
 80030b0:	f000 fdf6 	bl	8003ca0 <YUGIOH_Check_Trap_On_board>
 80030b4:	4603      	mov	r3, r0
 80030b6:	76fb      	strb	r3, [r7, #27]
					if(ptrYugiohCard_src->cardSignature == 3){
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d125      	bne.n	800310c <GAME_PLAY_Phase_Management+0x19fc>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	f7fd ff78 	bl	8000fb6 <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	2200      	movs	r2, #0
 80030ca:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80030d2:	4619      	mov	r1, r3
 80030d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d6:	f7fd fad5 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2234      	movs	r2, #52	; 0x34
 8003106:	701a      	strb	r2, [r3, #0]
				break;
 8003108:	f000 bc1f 	b.w	800394a <GAME_PLAY_Phase_Management+0x223a>
						if (idx != 255)
 800310c:	7efb      	ldrb	r3, [r7, #27]
 800310e:	2bff      	cmp	r3, #255	; 0xff
 8003110:	f000 841b 	beq.w	800394a <GAME_PLAY_Phase_Management+0x223a>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8003114:	68b8      	ldr	r0, [r7, #8]
 8003116:	f7fd ff4e 	bl	8000fb6 <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 800311a:	7efb      	ldrb	r3, [r7, #27]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3308      	adds	r3, #8
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	4413      	add	r3, r2
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	2200      	movs	r2, #0
 800312a:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003132:	4619      	mov	r1, r3
 8003134:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003136:	f7fd faa5 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003150:	3301      	adds	r3, #1
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2234      	movs	r2, #52	; 0x34
 8003166:	701a      	strb	r2, [r3, #0]
				break;
 8003168:	e3ef      	b.n	800394a <GAME_PLAY_Phase_Management+0x223a>
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 8003170:	9203      	str	r2, [sp, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	9202      	str	r2, [sp, #8]
 8003176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317a:	9201      	str	r2, [sp, #4]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	9200      	str	r2, [sp, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2b      	ldr	r2, [pc, #172]	; (8003230 <GAME_PLAY_Phase_Management+0x1b20>)
 8003184:	215a      	movs	r1, #90	; 0x5a
 8003186:	2005      	movs	r0, #5
 8003188:	f001 ffd7 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	4b24      	ldr	r3, [pc, #144]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 8003192:	9203      	str	r2, [sp, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	9202      	str	r2, [sp, #8]
 8003198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800319c:	9201      	str	r2, [sp, #4]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	9200      	str	r2, [sp, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a24      	ldr	r2, [pc, #144]	; (8003238 <GAME_PLAY_Phase_Management+0x1b28>)
 80031a6:	2169      	movs	r1, #105	; 0x69
 80031a8:	2005      	movs	r0, #5
 80031aa:	f001 ffc6 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 80031b4:	9203      	str	r2, [sp, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	9202      	str	r2, [sp, #8]
 80031ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031be:	9201      	str	r2, [sp, #4]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	9200      	str	r2, [sp, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <GAME_PLAY_Phase_Management+0x1b2c>)
 80031c8:	215a      	movs	r1, #90	; 0x5a
 80031ca:	2005      	movs	r0, #5
 80031cc:	f001 ffb5 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <GAME_PLAY_Phase_Management+0x1b14>)
 80031d6:	9203      	str	r2, [sp, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	9202      	str	r2, [sp, #8]
 80031dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e0:	9201      	str	r2, [sp, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	9200      	str	r2, [sp, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a15      	ldr	r2, [pc, #84]	; (8003240 <GAME_PLAY_Phase_Management+0x1b30>)
 80031ea:	2169      	movs	r1, #105	; 0x69
 80031ec:	2005      	movs	r0, #5
 80031ee:	f001 ffa4 	bl	800513a <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b34      	cmp	r3, #52	; 0x34
 80031f8:	d124      	bne.n	8003244 <GAME_PLAY_Phase_Management+0x1b34>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	789b      	ldrb	r3, [r3, #2]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <GAME_PLAY_Phase_Management+0x1b06>
						//affect
						state_game->action = 54;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2236      	movs	r2, #54	; 0x36
 8003206:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2204      	movs	r2, #4
 800320c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7fd fa9a 	bl	8000754 <Player_Reading_Card>
							state_game->action = 52;
						}
					}
				}

				break;
 8003220:	e395      	b.n	800394e <GAME_PLAY_Phase_Management+0x223e>
 8003222:	bf00      	nop
 8003224:	2400000c 	.word	0x2400000c
 8003228:	0800f4d4 	.word	0x0800f4d4
 800322c:	0800f4e4 	.word	0x0800f4e4
 8003230:	0800f4f0 	.word	0x0800f4f0
 8003234:	0800f500 	.word	0x0800f500
 8003238:	0800f50c 	.word	0x0800f50c
 800323c:	0800f514 	.word	0x0800f514
 8003240:	0800f524 	.word	0x0800f524
				else if ((state_game->action == 53 )){
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b35      	cmp	r3, #53	; 0x35
 800324a:	f040 8380 	bne.w	800394e <GAME_PLAY_Phase_Management+0x223e>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2326      	movs	r3, #38	; 0x26
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	215a      	movs	r1, #90	; 0x5a
 800325e:	2000      	movs	r0, #0
 8003260:	f002 f8b4 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2326      	movs	r3, #38	; 0x26
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	215a      	movs	r1, #90	; 0x5a
 8003274:	2000      	movs	r0, #0
 8003276:	f002 f8a9 	bl	80053cc <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8003282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003284:	6838      	ldr	r0, [r7, #0]
 8003286:	f000 fd0b 	bl	8003ca0 <YUGIOH_Check_Trap_On_board>
 800328a:	4603      	mov	r3, r0
 800328c:	76bb      	strb	r3, [r7, #26]
					if(ptrYugiohCard_src->cardSignature == 3){
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d124      	bne.n	80032e0 <GAME_PLAY_Phase_Management+0x1bd0>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f7fd fe8d 	bl	8000fb6 <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	2200      	movs	r2, #0
 80032a0:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80032a8:	4619      	mov	r1, r3
 80032aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ac:	f7fd f9ea 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80032c6:	3301      	adds	r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2203      	movs	r2, #3
 80032d4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2234      	movs	r2, #52	; 0x34
 80032dc:	701a      	strb	r2, [r3, #0]
				break;
 80032de:	e336      	b.n	800394e <GAME_PLAY_Phase_Management+0x223e>
						if (idx != 255)
 80032e0:	7ebb      	ldrb	r3, [r7, #26]
 80032e2:	2bff      	cmp	r3, #255	; 0xff
 80032e4:	f000 8333 	beq.w	800394e <GAME_PLAY_Phase_Management+0x223e>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80032e8:	68b8      	ldr	r0, [r7, #8]
 80032ea:	f7fd fe64 	bl	8000fb6 <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80032ee:	7ebb      	ldrb	r3, [r7, #26]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3308      	adds	r3, #8
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	2200      	movs	r2, #0
 80032fe:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003306:	4619      	mov	r1, r3
 8003308:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800330a:	f7fd f9bb 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2234      	movs	r2, #52	; 0x34
 800333a:	701a      	strb	r2, [r3, #0]
				break;
 800333c:	e307      	b.n	800394e <GAME_PLAY_Phase_Management+0x223e>
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	4b6d      	ldr	r3, [pc, #436]	; (80034f8 <GAME_PLAY_Phase_Management+0x1de8>)
 8003344:	9203      	str	r2, [sp, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	9202      	str	r2, [sp, #8]
 800334a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334e:	9201      	str	r2, [sp, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	9200      	str	r2, [sp, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a69      	ldr	r2, [pc, #420]	; (80034fc <GAME_PLAY_Phase_Management+0x1dec>)
 8003358:	215a      	movs	r1, #90	; 0x5a
 800335a:	2005      	movs	r0, #5
 800335c:	f001 feed 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <GAME_PLAY_Phase_Management+0x1de8>)
 8003366:	9203      	str	r2, [sp, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	9202      	str	r2, [sp, #8]
 800336c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003370:	9201      	str	r2, [sp, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	9200      	str	r2, [sp, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a60      	ldr	r2, [pc, #384]	; (80034fc <GAME_PLAY_Phase_Management+0x1dec>)
 800337a:	215a      	movs	r1, #90	; 0x5a
 800337c:	2005      	movs	r0, #5
 800337e:	f001 fedc 	bl	800513a <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	623b      	str	r3, [r7, #32]
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	3304      	adds	r3, #4
 80033a4:	61fb      	str	r3, [r7, #28]

				if(state_game->action == 54)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b36      	cmp	r3, #54	; 0x36
 80033ac:	f040 82d1 	bne.w	8003952 <GAME_PLAY_Phase_Management+0x2242>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	785a      	ldrb	r2, [r3, #1]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d252      	bcs.n	8003464 <GAME_PLAY_Phase_Management+0x1d54>
					{
						state_game->test = 165;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	22a5      	movs	r2, #165	; 0xa5
 80033c2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	3344      	adds	r3, #68	; 0x44
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28

						if (ptrYugiohCard_src->cardSignature == 3)
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d111      	bne.n	8003402 <GAME_PLAY_Phase_Management+0x1cf2>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2262      	movs	r2, #98	; 0x62
 80033e4:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd fe2d 	bl	800104e <YUGIOH_To_GY>
							state_game->count_chain++;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	3301      	adds	r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8003400:	e2a7      	b.n	8003952 <GAME_PLAY_Phase_Management+0x2242>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b0e      	cmp	r3, #14
 8003408:	d003      	beq.n	8003412 <GAME_PLAY_Phase_Management+0x1d02>
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d118      	bne.n	8003444 <GAME_PLAY_Phase_Management+0x1d34>
							state_game->test = 133;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2285      	movs	r2, #133	; 0x85
 8003416:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 fbb5 	bl	8003b94 <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd fe0c 	bl	800104e <YUGIOH_To_GY>
							state_game->count_chain++;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	3301      	adds	r3, #1
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	705a      	strb	r2, [r3, #1]
				break;
 8003442:	e286      	b.n	8003952 <GAME_PLAY_Phase_Management+0x2242>
						else if(ptrYugiohCard_src->cardSignature == 20){
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b14      	cmp	r3, #20
 800344a:	f040 8282 	bne.w	8003952 <GAME_PLAY_Phase_Management+0x2242>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fdfa 	bl	800104e <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2206      	movs	r2, #6
 800345e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003462:	e276      	b.n	8003952 <GAME_PLAY_Phase_Management+0x2242>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2326      	movs	r3, #38	; 0x26
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	215a      	movs	r1, #90	; 0x5a
 8003474:	2000      	movs	r0, #0
 8003476:	f001 ffa9 	bl	80053cc <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2326      	movs	r3, #38	; 0x26
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	215a      	movs	r1, #90	; 0x5a
 800348a:	2000      	movs	r0, #0
 800348c:	f001 ff9e 	bl	80053cc <ST7735_FillRectangleNSS>
						state_game->action = 50;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2232      	movs	r2, #50	; 0x32
 8003494:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2205      	movs	r2, #5
 800349a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800349e:	e258      	b.n	8003952 <GAME_PLAY_Phase_Management+0x2242>
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	791b      	ldrb	r3, [r3, #4]
 80034ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				if(ptrYugiohCard_src->targetPosition == 99)
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	79db      	ldrb	r3, [r3, #7]
 80034b4:	2b63      	cmp	r3, #99	; 0x63
 80034b6:	d116      	bne.n	80034e6 <GAME_PLAY_Phase_Management+0x1dd6>
				{
					playerDef->life_point -= atk*100;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	889a      	ldrh	r2, [r3, #4]
 80034bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	0249      	lsls	r1, r1, #9
 80034c6:	1ac9      	subs	r1, r1, r3
 80034c8:	0089      	lsls	r1, r1, #2
 80034ca:	4419      	add	r1, r3
 80034cc:	00c9      	lsls	r1, r1, #3
 80034ce:	1acb      	subs	r3, r1, r3
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2206      	movs	r2, #6
 80034e0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 80034e4:	e237      	b.n	8003956 <GAME_PLAY_Phase_Management+0x2246>
				else if(ptrYugiohCard_src->targetPosition == 98)
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	79db      	ldrb	r3, [r3, #7]
 80034ea:	2b62      	cmp	r3, #98	; 0x62
 80034ec:	d108      	bne.n	8003500 <GAME_PLAY_Phase_Management+0x1df0>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2206      	movs	r2, #6
 80034f2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80034f6:	e22e      	b.n	8003956 <GAME_PLAY_Phase_Management+0x2246>
 80034f8:	2400000c 	.word	0x2400000c
 80034fc:	0800f534 	.word	0x0800f534
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	79db      	ldrb	r3, [r3, #7]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	3308      	adds	r3, #8
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4413      	add	r3, r2
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
					state_game->test = 54;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2236      	movs	r2, #54	; 0x36
 8003518:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	789b      	ldrb	r3, [r3, #2]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 80b1 	bne.w	8003688 <GAME_PLAY_Phase_Management+0x1f78>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	4ba3      	ldr	r3, [pc, #652]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 800352c:	9203      	str	r2, [sp, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	9202      	str	r2, [sp, #8]
 8003532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003536:	9201      	str	r2, [sp, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	9200      	str	r2, [sp, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a9f      	ldr	r2, [pc, #636]	; (80037bc <GAME_PLAY_Phase_Management+0x20ac>)
 8003540:	215a      	movs	r1, #90	; 0x5a
 8003542:	2005      	movs	r0, #5
 8003544:	f001 fdf9 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	4b9a      	ldr	r3, [pc, #616]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 800354e:	9203      	str	r2, [sp, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	9202      	str	r2, [sp, #8]
 8003554:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003558:	9201      	str	r2, [sp, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	9200      	str	r2, [sp, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a97      	ldr	r2, [pc, #604]	; (80037c0 <GAME_PLAY_Phase_Management+0x20b0>)
 8003562:	2169      	movs	r1, #105	; 0x69
 8003564:	2005      	movs	r0, #5
 8003566:	f001 fde8 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 8003570:	9203      	str	r2, [sp, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	9202      	str	r2, [sp, #8]
 8003576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800357a:	9201      	str	r2, [sp, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	9200      	str	r2, [sp, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a90      	ldr	r2, [pc, #576]	; (80037c4 <GAME_PLAY_Phase_Management+0x20b4>)
 8003584:	215a      	movs	r1, #90	; 0x5a
 8003586:	2005      	movs	r0, #5
 8003588:	f001 fdd7 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	4b89      	ldr	r3, [pc, #548]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 8003592:	9203      	str	r2, [sp, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	9202      	str	r2, [sp, #8]
 8003598:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	9200      	str	r2, [sp, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a88      	ldr	r2, [pc, #544]	; (80037c8 <GAME_PLAY_Phase_Management+0x20b8>)
 80035a6:	2169      	movs	r1, #105	; 0x69
 80035a8:	2005      	movs	r0, #5
 80035aa:	f001 fdc6 	bl	800513a <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	795b      	ldrb	r3, [r3, #5]
 80035b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						if(atk < def){
 80035b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80035ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035be:	429a      	cmp	r2, r3
 80035c0:	d23c      	bcs.n	800363c <GAME_PLAY_Phase_Management+0x1f2c>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2326      	movs	r3, #38	; 0x26
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	215a      	movs	r1, #90	; 0x5a
 80035d2:	2000      	movs	r0, #0
 80035d4:	f001 fefa 	bl	80053cc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2300      	movs	r3, #0
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2326      	movs	r3, #38	; 0x26
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	215a      	movs	r1, #90	; 0x5a
 80035e8:	2000      	movs	r0, #0
 80035ea:	f001 feef 	bl	80053cc <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	889a      	ldrh	r2, [r3, #4]
 80035f2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80035f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035fa:	1acb      	subs	r3, r1, r3
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4619      	mov	r1, r3
 8003600:	0249      	lsls	r1, r1, #9
 8003602:	1ac9      	subs	r1, r1, r3
 8003604:	0089      	lsls	r1, r1, #2
 8003606:	4419      	add	r1, r3
 8003608:	00c9      	lsls	r1, r1, #3
 800360a:	1acb      	subs	r3, r1, r3
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	b29b      	uxth	r3, r3
 8003610:	4413      	add	r3, r2
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	799b      	ldrb	r3, [r3, #6]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	3308      	adds	r3, #8
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fd11 	bl	800104e <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fd fc17 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2206      	movs	r2, #6
 8003636:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800363a:	e18c      	b.n	8003956 <GAME_PLAY_Phase_Management+0x2246>
						else if(atk > def){
 800363c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003640:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003644:	429a      	cmp	r2, r3
 8003646:	f240 8186 	bls.w	8003956 <GAME_PLAY_Phase_Management+0x2246>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	2300      	movs	r3, #0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2326      	movs	r3, #38	; 0x26
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	215a      	movs	r1, #90	; 0x5a
 800365a:	2000      	movs	r0, #0
 800365c:	f001 feb6 	bl	80053cc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	2300      	movs	r3, #0
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2326      	movs	r3, #38	; 0x26
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	215a      	movs	r1, #90	; 0x5a
 8003670:	2000      	movs	r0, #0
 8003672:	f001 feab 	bl	80053cc <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8003676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003678:	6838      	ldr	r0, [r7, #0]
 800367a:	f7fd fce8 	bl	800104e <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2206      	movs	r2, #6
 8003682:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003686:	e166      	b.n	8003956 <GAME_PLAY_Phase_Management+0x2246>
					else if(ptrYugiohCard_dst->cardState == 1){
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	789b      	ldrb	r3, [r3, #2]
 800368c:	2b01      	cmp	r3, #1
 800368e:	f040 8162 	bne.w	8003956 <GAME_PLAY_Phase_Management+0x2246>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 8003698:	9203      	str	r2, [sp, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	9202      	str	r2, [sp, #8]
 800369e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036a2:	9201      	str	r2, [sp, #4]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	9200      	str	r2, [sp, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a44      	ldr	r2, [pc, #272]	; (80037bc <GAME_PLAY_Phase_Management+0x20ac>)
 80036ac:	215a      	movs	r1, #90	; 0x5a
 80036ae:	2005      	movs	r0, #5
 80036b0:	f001 fd43 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 80036ba:	9203      	str	r2, [sp, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	9202      	str	r2, [sp, #8]
 80036c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80036c4:	9201      	str	r2, [sp, #4]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	9200      	str	r2, [sp, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3f      	ldr	r2, [pc, #252]	; (80037cc <GAME_PLAY_Phase_Management+0x20bc>)
 80036ce:	2169      	movs	r1, #105	; 0x69
 80036d0:	2005      	movs	r0, #5
 80036d2:	f001 fd32 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 80036dc:	9203      	str	r2, [sp, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	9202      	str	r2, [sp, #8]
 80036e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e6:	9201      	str	r2, [sp, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	9200      	str	r2, [sp, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a35      	ldr	r2, [pc, #212]	; (80037c4 <GAME_PLAY_Phase_Management+0x20b4>)
 80036f0:	215a      	movs	r1, #90	; 0x5a
 80036f2:	2005      	movs	r0, #5
 80036f4:	f001 fd21 	bl	800513a <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <GAME_PLAY_Phase_Management+0x20a8>)
 80036fe:	9203      	str	r2, [sp, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	9202      	str	r2, [sp, #8]
 8003704:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003708:	9201      	str	r2, [sp, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	9200      	str	r2, [sp, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <GAME_PLAY_Phase_Management+0x20c0>)
 8003712:	2169      	movs	r1, #105	; 0x69
 8003714:	2005      	movs	r0, #5
 8003716:	f001 fd10 	bl	800513a <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	791b      	ldrb	r3, [r3, #4]
 800371e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						state_game->test = 60;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	223c      	movs	r2, #60	; 0x3c
 8003726:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 800372a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800372e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003732:	429a      	cmp	r2, r3
 8003734:	d24e      	bcs.n	80037d4 <GAME_PLAY_Phase_Management+0x20c4>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	2300      	movs	r3, #0
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2326      	movs	r3, #38	; 0x26
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	215a      	movs	r1, #90	; 0x5a
 8003746:	2000      	movs	r0, #0
 8003748:	f001 fe40 	bl	80053cc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	2300      	movs	r3, #0
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2326      	movs	r3, #38	; 0x26
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	215a      	movs	r1, #90	; 0x5a
 800375c:	2000      	movs	r0, #0
 800375e:	f001 fe35 	bl	80053cc <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	223d      	movs	r2, #61	; 0x3d
 8003766:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	889a      	ldrh	r2, [r3, #4]
 800376e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003776:	1acb      	subs	r3, r1, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	0249      	lsls	r1, r1, #9
 800377e:	1ac9      	subs	r1, r1, r3
 8003780:	0089      	lsls	r1, r1, #2
 8003782:	4419      	add	r1, r3
 8003784:	00c9      	lsls	r1, r1, #3
 8003786:	1acb      	subs	r3, r1, r3
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	b29b      	uxth	r3, r3
 800378c:	4413      	add	r3, r2
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	799b      	ldrb	r3, [r3, #6]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	3308      	adds	r3, #8
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fc53 	bl	800104e <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fd fb59 	bl	8000e60 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2206      	movs	r2, #6
 80037b2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80037b6:	e0ce      	b.n	8003956 <GAME_PLAY_Phase_Management+0x2246>
 80037b8:	2400000c 	.word	0x2400000c
 80037bc:	0800f544 	.word	0x0800f544
 80037c0:	0800f554 	.word	0x0800f554
 80037c4:	0800f564 	.word	0x0800f564
 80037c8:	0800f574 	.word	0x0800f574
 80037cc:	0800f588 	.word	0x0800f588
 80037d0:	0800f598 	.word	0x0800f598
						else if(atk > atk2){
 80037d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037dc:	429a      	cmp	r2, r3
 80037de:	f240 80ba 	bls.w	8003956 <GAME_PLAY_Phase_Management+0x2246>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	2300      	movs	r3, #0
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2326      	movs	r3, #38	; 0x26
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	215a      	movs	r1, #90	; 0x5a
 80037f2:	2000      	movs	r0, #0
 80037f4:	f001 fdea 	bl	80053cc <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2300      	movs	r3, #0
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2326      	movs	r3, #38	; 0x26
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	215a      	movs	r1, #90	; 0x5a
 8003808:	2000      	movs	r0, #0
 800380a:	f001 fddf 	bl	80053cc <ST7735_FillRectangleNSS>
							state_game->test = 70;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2246      	movs	r2, #70	; 0x46
 8003812:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	889a      	ldrh	r2, [r3, #4]
 800381a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800381e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003822:	1acb      	subs	r3, r1, r3
 8003824:	b29b      	uxth	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	0249      	lsls	r1, r1, #9
 800382a:	1ac9      	subs	r1, r1, r3
 800382c:	0089      	lsls	r1, r1, #2
 800382e:	4419      	add	r1, r3
 8003830:	00c9      	lsls	r1, r1, #3
 8003832:	1acb      	subs	r3, r1, r3
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	b29b      	uxth	r3, r3
 8003838:	4413      	add	r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8003840:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	f7fd fc03 	bl	800104e <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2206      	movs	r2, #6
 800384c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003850:	e081      	b.n	8003956 <GAME_PLAY_Phase_Management+0x2246>
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <GAME_PLAY_Phase_Management+0x2260>)
 8003858:	9203      	str	r2, [sp, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	9202      	str	r2, [sp, #8]
 800385e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003862:	9201      	str	r2, [sp, #4]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	9200      	str	r2, [sp, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a42      	ldr	r2, [pc, #264]	; (8003974 <GAME_PLAY_Phase_Management+0x2264>)
 800386c:	215a      	movs	r1, #90	; 0x5a
 800386e:	2005      	movs	r0, #5
 8003870:	f001 fc63 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <GAME_PLAY_Phase_Management+0x2260>)
 800387a:	9203      	str	r2, [sp, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	9202      	str	r2, [sp, #8]
 8003880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003884:	9201      	str	r2, [sp, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	9200      	str	r2, [sp, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <GAME_PLAY_Phase_Management+0x2268>)
 800388e:	215a      	movs	r1, #90	; 0x5a
 8003890:	2005      	movs	r0, #5
 8003892:	f001 fc52 	bl	800513a <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
				YUGIOH_card_clear(ptrYugiohCard_src);
 800389e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a0:	f7fc ff27 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	889b      	ldrh	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <GAME_PLAY_Phase_Management+0x21a8>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	889b      	ldrh	r3, [r3, #4]
 80038b0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d904      	bls.n	80038c2 <GAME_PLAY_Phase_Management+0x21b2>
					state_game->MainGame_State = Game_Ended;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2204      	movs	r2, #4
 80038bc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 80038c0:	e04a      	b.n	8003958 <GAME_PLAY_Phase_Management+0x2248>
					state_game->action = 50;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2232      	movs	r2, #50	; 0x32
 80038c6:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	2300      	movs	r3, #0
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	2326      	movs	r3, #38	; 0x26
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	215a      	movs	r1, #90	; 0x5a
 80038d8:	2000      	movs	r0, #0
 80038da:	f001 fd77 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2326      	movs	r3, #38	; 0x26
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	215a      	movs	r1, #90	; 0x5a
 80038ee:	2000      	movs	r0, #0
 80038f0:	f001 fd6c 	bl	80053cc <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <GAME_PLAY_Phase_Management+0x2260>)
 80038fa:	9203      	str	r2, [sp, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003904:	9201      	str	r2, [sp, #4]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	9200      	str	r2, [sp, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a19      	ldr	r2, [pc, #100]	; (8003974 <GAME_PLAY_Phase_Management+0x2264>)
 800390e:	215a      	movs	r1, #90	; 0x5a
 8003910:	2005      	movs	r0, #5
 8003912:	f001 fc12 	bl	800513a <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <GAME_PLAY_Phase_Management+0x2260>)
 800391c:	9203      	str	r2, [sp, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	9202      	str	r2, [sp, #8]
 8003922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003926:	9201      	str	r2, [sp, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <GAME_PLAY_Phase_Management+0x2268>)
 8003930:	215a      	movs	r1, #90	; 0x5a
 8003932:	2005      	movs	r0, #5
 8003934:	f001 fc01 	bl	800513a <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003940:	e00a      	b.n	8003958 <GAME_PLAY_Phase_Management+0x2248>
				break;
 8003942:	bf00      	nop
 8003944:	e00f      	b.n	8003966 <GAME_PLAY_Phase_Management+0x2256>
				break;
 8003946:	bf00      	nop
 8003948:	e00d      	b.n	8003966 <GAME_PLAY_Phase_Management+0x2256>
				break;
 800394a:	bf00      	nop
 800394c:	e00b      	b.n	8003966 <GAME_PLAY_Phase_Management+0x2256>
				break;
 800394e:	bf00      	nop
 8003950:	e009      	b.n	8003966 <GAME_PLAY_Phase_Management+0x2256>
				break;
 8003952:	bf00      	nop
 8003954:	e007      	b.n	8003966 <GAME_PLAY_Phase_Management+0x2256>
				break;
 8003956:	bf00      	nop
			}
			break;
 8003958:	e005      	b.n	8003966 <GAME_PLAY_Phase_Management+0x2256>
		break;
 800395a:	bf00      	nop
 800395c:	e004      	b.n	8003968 <GAME_PLAY_Phase_Management+0x2258>
		break;
 800395e:	bf00      	nop
 8003960:	e002      	b.n	8003968 <GAME_PLAY_Phase_Management+0x2258>
		break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <GAME_PLAY_Phase_Management+0x2258>
			break;
 8003966:	bf00      	nop

	}
}
 8003968:	bf00      	nop
 800396a:	3738      	adds	r7, #56	; 0x38
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2400000c 	.word	0x2400000c
 8003974:	0800f5ac 	.word	0x0800f5ac
 8003978:	0800f5bc 	.word	0x0800f5bc

0800397c <Test_EFF>:

void Test_EFF(Player *playerUser,Player *playerOpponent)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	playerUser->life_point += 1000;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	809a      	strh	r2, [r3, #4]
	playerOpponent->life_point -=100;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	889b      	ldrh	r3, [r3, #4]
 8003998:	3b64      	subs	r3, #100	; 0x64
 800399a:	b29a      	uxth	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	809a      	strh	r2, [r3, #4]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3338      	adds	r3, #56	; 0x38
 80039b8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80039ba:	2300      	movs	r3, #0
 80039bc:	72fb      	strb	r3, [r7, #11]
 80039be:	e00d      	b.n	80039dc <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80039c8:	68f9      	ldr	r1, [r7, #12]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fb3f 	bl	800104e <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3310      	adds	r3, #16
 80039d4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	3301      	adds	r3, #1
 80039da:	72fb      	strb	r3, [r7, #11]
 80039dc:	7afb      	ldrb	r3, [r7, #11]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d9ee      	bls.n	80039c0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3308      	adds	r3, #8
 80039fa:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3338      	adds	r3, #56	; 0x38
 8003a00:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	3338      	adds	r3, #56	; 0x38
 8003a0c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e00d      	b.n	8003a30 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8003a1c:	6979      	ldr	r1, [r7, #20]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fb15 	bl	800104e <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3310      	adds	r3, #16
 8003a28:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d9ee      	bls.n	8003a14 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003a36:	2300      	movs	r3, #0
 8003a38:	73bb      	strb	r3, [r7, #14]
 8003a3a:	e00d      	b.n	8003a58 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	6838      	ldr	r0, [r7, #0]
 8003a48:	f7fd fb01 	bl	800104e <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3310      	adds	r3, #16
 8003a50:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003a52:	7bbb      	ldrb	r3, [r7, #14]
 8003a54:	3301      	adds	r3, #1
 8003a56:	73bb      	strb	r3, [r7, #14]
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d9ee      	bls.n	8003a3c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a7e:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3368      	adds	r3, #104	; 0x68
 8003a84:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3368      	adds	r3, #104	; 0x68
 8003a8a:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	74fb      	strb	r3, [r7, #19]
 8003a90:	e010      	b.n	8003ab4 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d104      	bne.n	8003aa8 <YUGIOH_Reborn+0x40>
			flag = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	77bb      	strb	r3, [r7, #30]
			break;
 8003aa6:	e008      	b.n	8003aba <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3310      	adds	r3, #16
 8003aac:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	74fb      	strb	r3, [r7, #19]
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	2b13      	cmp	r3, #19
 8003ab8:	d9eb      	bls.n	8003a92 <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3338      	adds	r3, #56	; 0x38
 8003abe:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 8003ac0:	7ffb      	ldrb	r3, [r7, #31]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d134      	bne.n	8003b30 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	799a      	ldrb	r2, [r3, #6]
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <YUGIOH_Reborn+0xd0>)
 8003acc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad0:	0899      	lsrs	r1, r3, #2
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	440b      	add	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 8003ade:	7afb      	ldrb	r3, [r7, #11]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	69b8      	ldr	r0, [r7, #24]
 8003aec:	f7fc fdca 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 8003af0:	7fbb      	ldrb	r3, [r7, #30]
 8003af2:	3301      	adds	r3, #1
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3368      	adds	r3, #104	; 0x68
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 8003afe:	7fbb      	ldrb	r3, [r7, #30]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	3368      	adds	r3, #104	; 0x68
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8003b0a:	7fbb      	ldrb	r3, [r7, #30]
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	e00c      	b.n	8003b2a <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8003b10:	6979      	ldr	r1, [r7, #20]
 8003b12:	69b8      	ldr	r0, [r7, #24]
 8003b14:	f7fc fdb6 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	3310      	adds	r3, #16
 8003b1c:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	3310      	adds	r3, #16
 8003b22:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b13      	cmp	r3, #19
 8003b2e:	ddef      	ble.n	8003b10 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8003b30:	bf00      	nop
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	aaaaaaab 	.word	0xaaaaaaab

08003b3c <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b4a:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b52:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	799a      	ldrb	r2, [r3, #6]
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <YUGIOH_Ancient_Rules+0x54>)
 8003b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5e:	0899      	lsrs	r1, r3, #2
 8003b60:	460b      	mov	r3, r1
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	440b      	add	r3, r1
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	3308      	adds	r3, #8
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	6978      	ldr	r0, [r7, #20]
 8003b82:	f7fc fd7f 	bl	8000684 <YUGIOH_card_copy>

}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	aaaaaaab 	.word	0xaaaaaaab

08003b94 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3338      	adds	r3, #56	; 0x38
 8003ba8:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	3308      	adds	r3, #8
 8003bae:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	3338      	adds	r3, #56	; 0x38
 8003bb4:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73bb      	strb	r3, [r7, #14]
 8003bbe:	e00c      	b.n	8003bda <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	785b      	ldrb	r3, [r3, #1]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d102      	bne.n	8003bce <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3310      	adds	r3, #16
 8003bd2:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003bd4:	7bbb      	ldrb	r3, [r7, #14]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	73bb      	strb	r3, [r7, #14]
 8003bda:	7bbb      	ldrb	r3, [r7, #14]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d9ef      	bls.n	8003bc0 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003be0:	2300      	movs	r3, #0
 8003be2:	737b      	strb	r3, [r7, #13]
 8003be4:	e00c      	b.n	8003c00 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003bfa:	7b7b      	ldrb	r3, [r7, #13]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	737b      	strb	r3, [r7, #13]
 8003c00:	7b7b      	ldrb	r3, [r7, #13]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d9ef      	bls.n	8003be6 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	889a      	ldrh	r2, [r3, #4]
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4619      	mov	r1, r3
 8003c10:	0089      	lsls	r1, r1, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	4619      	mov	r1, r3
 8003c16:	0109      	lsls	r1, r1, #4
 8003c18:	1acb      	subs	r3, r1, r3
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	809a      	strh	r2, [r3, #4]

}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c44:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c4c:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	799a      	ldrb	r2, [r3, #6]
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <YUGIOH_Stop_Defense+0x68>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	0899      	lsrs	r1, r3, #2
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	440b      	add	r3, r1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	3308      	adds	r3, #8
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	789b      	ldrb	r3, [r3, #2]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <YUGIOH_Stop_Defense+0x5a>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	709a      	strb	r2, [r3, #2]
	}

}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	aaaaaaab 	.word	0xaaaaaaab

08003ca0 <YUGIOH_Check_Trap_On_board>:
//
//}


uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3308      	adds	r3, #8
 8003cae:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	e016      	b.n	8003ce4 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10a      	bne.n	8003cd8 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	7a5b      	ldrb	r3, [r3, #9]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <YUGIOH_Check_Trap_On_board+0x38>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d102      	bne.n	8003cd8 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e009      	b.n	8003cec <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3310      	adds	r3, #16
 8003cdc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	dde5      	ble.n	8003cb6 <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 8003cea:	23ff      	movs	r3, #255	; 0xff
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3308      	adds	r3, #8
 8003d06:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	e016      	b.n	8003d3c <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10a      	bne.n	8003d30 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	7a5b      	ldrb	r3, [r3, #9]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d006      	beq.n	8003d30 <YUGIOH_Check_Spell_On_board+0x38>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d102      	bne.n	8003d30 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e009      	b.n	8003d44 <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3310      	adds	r3, #16
 8003d34:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	dde5      	ble.n	8003d0e <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8003d42:	23ff      	movs	r3, #255	; 0xff
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	e00c      	b.n	8003d7e <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3310      	adds	r3, #16
 8003d76:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	ddef      	ble.n	8003d64 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3338      	adds	r3, #56	; 0x38
 8003d9e:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8003da0:	2303      	movs	r3, #3
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	e00c      	b.n	8003dc0 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3310      	adds	r3, #16
 8003db8:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	ddef      	ble.n	8003da6 <YUGIOH_Monster_Activated+0x14>
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <MainGUI>:


void MainGUI(){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8003dda:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <MainGUI+0x15c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003de4:	9201      	str	r2, [sp, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	9200      	str	r2, [sp, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a51      	ldr	r2, [pc, #324]	; (8003f34 <MainGUI+0x160>)
 8003dee:	2105      	movs	r1, #5
 8003df0:	2005      	movs	r0, #5
 8003df2:	f001 f958 	bl	80050a6 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <MainGUI+0x15c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	9202      	str	r2, [sp, #8]
 8003dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e00:	9201      	str	r2, [sp, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	9200      	str	r2, [sp, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a4b      	ldr	r2, [pc, #300]	; (8003f38 <MainGUI+0x164>)
 8003e0a:	2114      	movs	r1, #20
 8003e0c:	2005      	movs	r0, #5
 8003e0e:	f001 f94a 	bl	80050a6 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <MainGUI+0x15c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	9202      	str	r2, [sp, #8]
 8003e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e1c:	9201      	str	r2, [sp, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	9200      	str	r2, [sp, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a45      	ldr	r2, [pc, #276]	; (8003f3c <MainGUI+0x168>)
 8003e26:	2123      	movs	r1, #35	; 0x23
 8003e28:	2005      	movs	r0, #5
 8003e2a:	f001 f93c 	bl	80050a6 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003e2e:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <MainGUI+0x15c>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	9202      	str	r2, [sp, #8]
 8003e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e38:	9201      	str	r2, [sp, #4]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	9200      	str	r2, [sp, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a3f      	ldr	r2, [pc, #252]	; (8003f40 <MainGUI+0x16c>)
 8003e42:	2123      	movs	r1, #35	; 0x23
 8003e44:	203c      	movs	r0, #60	; 0x3c
 8003e46:	f001 f8e4 	bl	8005012 <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <MainGUI+0x15c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	9202      	str	r2, [sp, #8]
 8003e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e54:	9201      	str	r2, [sp, #4]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	9200      	str	r2, [sp, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <MainGUI+0x170>)
 8003e5e:	2132      	movs	r1, #50	; 0x32
 8003e60:	2000      	movs	r0, #0
 8003e62:	f001 f920 	bl	80050a6 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <MainGUI+0x15c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	9202      	str	r2, [sp, #8]
 8003e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e70:	9201      	str	r2, [sp, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	9200      	str	r2, [sp, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a33      	ldr	r2, [pc, #204]	; (8003f48 <MainGUI+0x174>)
 8003e7a:	213c      	movs	r1, #60	; 0x3c
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f001 f912 	bl	80050a6 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8003e82:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <MainGUI+0x15c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	9202      	str	r2, [sp, #8]
 8003e88:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003e8c:	9201      	str	r2, [sp, #4]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	9200      	str	r2, [sp, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <MainGUI+0x178>)
 8003e96:	2105      	movs	r1, #5
 8003e98:	2005      	movs	r0, #5
 8003e9a:	f001 f8ba 	bl	8005012 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <MainGUI+0x15c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	9202      	str	r2, [sp, #8]
 8003ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea8:	9201      	str	r2, [sp, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	9200      	str	r2, [sp, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <MainGUI+0x164>)
 8003eb2:	2114      	movs	r1, #20
 8003eb4:	2005      	movs	r0, #5
 8003eb6:	f001 f8ac 	bl	8005012 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <MainGUI+0x15c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	9202      	str	r2, [sp, #8]
 8003ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ec4:	9201      	str	r2, [sp, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	9200      	str	r2, [sp, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <MainGUI+0x17c>)
 8003ece:	2123      	movs	r1, #35	; 0x23
 8003ed0:	2005      	movs	r0, #5
 8003ed2:	f001 f89e 	bl	8005012 <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <MainGUI+0x15c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	9202      	str	r2, [sp, #8]
 8003edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee0:	9201      	str	r2, [sp, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	9200      	str	r2, [sp, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <MainGUI+0x16c>)
 8003eea:	2123      	movs	r1, #35	; 0x23
 8003eec:	203c      	movs	r0, #60	; 0x3c
 8003eee:	f001 f8da 	bl	80050a6 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <MainGUI+0x15c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	9202      	str	r2, [sp, #8]
 8003ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efc:	9201      	str	r2, [sp, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	9200      	str	r2, [sp, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <MainGUI+0x170>)
 8003f06:	2132      	movs	r1, #50	; 0x32
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f001 f882 	bl	8005012 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <MainGUI+0x15c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	9202      	str	r2, [sp, #8]
 8003f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	9200      	str	r2, [sp, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <MainGUI+0x174>)
 8003f22:	213c      	movs	r1, #60	; 0x3c
 8003f24:	2000      	movs	r0, #0
 8003f26:	f001 f874 	bl	8005012 <ST7735_WriteString>
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	2400000c 	.word	0x2400000c
 8003f34:	0800f2c0 	.word	0x0800f2c0
 8003f38:	0800f5cc 	.word	0x0800f5cc
 8003f3c:	0800f5dc 	.word	0x0800f5dc
 8003f40:	0800f5e4 	.word	0x0800f5e4
 8003f44:	0800f5ec 	.word	0x0800f5ec
 8003f48:	0800f26c 	.word	0x0800f26c
 8003f4c:	0800f260 	.word	0x0800f260
 8003f50:	0800f600 	.word	0x0800f600

08003f54 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af04      	add	r7, sp, #16
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8003f62:	4b49      	ldr	r3, [pc, #292]	; (8004088 <LCDvalue+0x134>)
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	4b49      	ldr	r3, [pc, #292]	; (800408c <LCDvalue+0x138>)
 8003f68:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8003f6a:	4b49      	ldr	r3, [pc, #292]	; (8004090 <LCDvalue+0x13c>)
 8003f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f70:	4a48      	ldr	r2, [pc, #288]	; (8004094 <LCDvalue+0x140>)
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	f7fc fa03 	bl	8000380 <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4613      	mov	r3, r2
 8003f80:	817b      	strh	r3, [r7, #10]
	time -= a;
 8003f82:	4b42      	ldr	r3, [pc, #264]	; (800408c <LCDvalue+0x138>)
 8003f84:	881a      	ldrh	r2, [r3, #0]
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	; (800408c <LCDvalue+0x138>)
 8003f8e:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8003f90:	4b3e      	ldr	r3, [pc, #248]	; (800408c <LCDvalue+0x138>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	4940      	ldr	r1, [pc, #256]	; (8004098 <LCDvalue+0x144>)
 8003f98:	4840      	ldr	r0, [pc, #256]	; (800409c <LCDvalue+0x148>)
 8003f9a:	f00a fdd7 	bl	800eb4c <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e012      	b.n	8003fca <LCDvalue+0x76>
		if(t_c[i] == 0){
 8003fa4:	4a3d      	ldr	r2, [pc, #244]	; (800409c <LCDvalue+0x148>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <LCDvalue+0x70>
			t_c[i] = 32;
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	; (800409c <LCDvalue+0x148>)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	4a37      	ldr	r2, [pc, #220]	; (800409c <LCDvalue+0x148>)
 8003fc0:	2120      	movs	r1, #32
 8003fc2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	dde9      	ble.n	8003fa4 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	; (800408c <LCDvalue+0x138>)
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f040 811d 	bne.w	8004214 <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8003fda:	4831      	ldr	r0, [pc, #196]	; (80040a0 <LCDvalue+0x14c>)
 8003fdc:	f008 f9da 	bl	800c394 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8003fe0:	4b2a      	ldr	r3, [pc, #168]	; (800408c <LCDvalue+0x138>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f001 fa7a 	bl	80054e0 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f001 fa88 	bl	8005502 <ST7735_FillScreen1>
		while(time == 0){
 8003ff2:	e10a      	b.n	800420a <LCDvalue+0x2b6>
			uint8_t credit = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 8003ff8:	7a7b      	ldrb	r3, [r7, #9]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d15e      	bne.n	80040bc <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <LCDvalue+0x150>)
 8004004:	9203      	str	r2, [sp, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	9202      	str	r2, [sp, #8]
 800400a:	221f      	movs	r2, #31
 800400c:	9201      	str	r2, [sp, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	9200      	str	r2, [sp, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a24      	ldr	r2, [pc, #144]	; (80040a8 <LCDvalue+0x154>)
 8004016:	2123      	movs	r1, #35	; 0x23
 8004018:	200f      	movs	r0, #15
 800401a:	f001 f88e 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <LCDvalue+0x158>)
 8004024:	9203      	str	r2, [sp, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	9202      	str	r2, [sp, #8]
 800402a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402e:	9201      	str	r2, [sp, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	9200      	str	r2, [sp, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <LCDvalue+0x15c>)
 8004038:	213c      	movs	r1, #60	; 0x3c
 800403a:	2005      	movs	r0, #5
 800403c:	f001 f87d 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <LCDvalue+0x150>)
 8004046:	9203      	str	r2, [sp, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	9202      	str	r2, [sp, #8]
 800404c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004050:	9201      	str	r2, [sp, #4]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	9200      	str	r2, [sp, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <LCDvalue+0x160>)
 800405a:	2123      	movs	r1, #35	; 0x23
 800405c:	2014      	movs	r0, #20
 800405e:	f001 f86c 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <LCDvalue+0x158>)
 8004068:	9203      	str	r2, [sp, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	9202      	str	r2, [sp, #8]
 800406e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004072:	9201      	str	r2, [sp, #4]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	9200      	str	r2, [sp, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <LCDvalue+0x164>)
 800407c:	213c      	movs	r1, #60	; 0x3c
 800407e:	2000      	movs	r0, #0
 8004080:	f001 f85b 	bl	800513a <ST7735_WriteStringNSS>
 8004084:	e0c1      	b.n	800420a <LCDvalue+0x2b6>
 8004086:	bf00      	nop
 8004088:	24000000 	.word	0x24000000
 800408c:	24000174 	.word	0x24000174
 8004090:	24000ea0 	.word	0x24000ea0
 8004094:	000f4240 	.word	0x000f4240
 8004098:	0800f608 	.word	0x0800f608
 800409c:	24000170 	.word	0x24000170
 80040a0:	240002e8 	.word	0x240002e8
 80040a4:	24000014 	.word	0x24000014
 80040a8:	0800f2f8 	.word	0x0800f2f8
 80040ac:	2400000c 	.word	0x2400000c
 80040b0:	0800f60c 	.word	0x0800f60c
 80040b4:	0800f2f0 	.word	0x0800f2f0
 80040b8:	0800f620 	.word	0x0800f620
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 80040bc:	7a7b      	ldrb	r3, [r7, #9]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	f040 80a3 	bne.w	800420a <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	4ba1      	ldr	r3, [pc, #644]	; (8004350 <LCDvalue+0x3fc>)
 80040ca:	9203      	str	r2, [sp, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	221f      	movs	r2, #31
 80040d2:	9201      	str	r2, [sp, #4]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	9200      	str	r2, [sp, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a9e      	ldr	r2, [pc, #632]	; (8004354 <LCDvalue+0x400>)
 80040dc:	2119      	movs	r1, #25
 80040de:	200f      	movs	r0, #15
 80040e0:	f001 f82b 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	4b9b      	ldr	r3, [pc, #620]	; (8004358 <LCDvalue+0x404>)
 80040ea:	9203      	str	r2, [sp, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	9202      	str	r2, [sp, #8]
 80040f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f4:	9201      	str	r2, [sp, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	9200      	str	r2, [sp, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a97      	ldr	r2, [pc, #604]	; (800435c <LCDvalue+0x408>)
 80040fe:	2132      	movs	r1, #50	; 0x32
 8004100:	2005      	movs	r0, #5
 8004102:	f001 f81a 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	4b91      	ldr	r3, [pc, #580]	; (8004350 <LCDvalue+0x3fc>)
 800410c:	9203      	str	r2, [sp, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	9202      	str	r2, [sp, #8]
 8004112:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004116:	9201      	str	r2, [sp, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	9200      	str	r2, [sp, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a90      	ldr	r2, [pc, #576]	; (8004360 <LCDvalue+0x40c>)
 8004120:	2119      	movs	r1, #25
 8004122:	2014      	movs	r0, #20
 8004124:	f001 f809 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	4b8a      	ldr	r3, [pc, #552]	; (8004358 <LCDvalue+0x404>)
 800412e:	9203      	str	r2, [sp, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004138:	9201      	str	r2, [sp, #4]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	9200      	str	r2, [sp, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a88      	ldr	r2, [pc, #544]	; (8004364 <LCDvalue+0x410>)
 8004142:	2132      	movs	r1, #50	; 0x32
 8004144:	2000      	movs	r0, #0
 8004146:	f000 fff8 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 800414a:	4b83      	ldr	r3, [pc, #524]	; (8004358 <LCDvalue+0x404>)
 800414c:	2200      	movs	r2, #0
 800414e:	9203      	str	r2, [sp, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	9202      	str	r2, [sp, #8]
 8004154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004158:	9201      	str	r2, [sp, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	9200      	str	r2, [sp, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a81      	ldr	r2, [pc, #516]	; (8004368 <LCDvalue+0x414>)
 8004162:	2141      	movs	r1, #65	; 0x41
 8004164:	2000      	movs	r0, #0
 8004166:	f000 ffe8 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 800416a:	4b7b      	ldr	r3, [pc, #492]	; (8004358 <LCDvalue+0x404>)
 800416c:	2201      	movs	r2, #1
 800416e:	9203      	str	r2, [sp, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	9202      	str	r2, [sp, #8]
 8004174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004178:	9201      	str	r2, [sp, #4]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	9200      	str	r2, [sp, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a79      	ldr	r2, [pc, #484]	; (8004368 <LCDvalue+0x414>)
 8004182:	2141      	movs	r1, #65	; 0x41
 8004184:	2000      	movs	r0, #0
 8004186:	f000 ffd8 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 800418a:	4b73      	ldr	r3, [pc, #460]	; (8004358 <LCDvalue+0x404>)
 800418c:	2200      	movs	r2, #0
 800418e:	9203      	str	r2, [sp, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	9202      	str	r2, [sp, #8]
 8004194:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004198:	9201      	str	r2, [sp, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	9200      	str	r2, [sp, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a72      	ldr	r2, [pc, #456]	; (800436c <LCDvalue+0x418>)
 80041a2:	2164      	movs	r1, #100	; 0x64
 80041a4:	2000      	movs	r0, #0
 80041a6:	f000 ffc8 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 80041aa:	4b6b      	ldr	r3, [pc, #428]	; (8004358 <LCDvalue+0x404>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	9203      	str	r2, [sp, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	9202      	str	r2, [sp, #8]
 80041b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80041b8:	9201      	str	r2, [sp, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	9200      	str	r2, [sp, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6b      	ldr	r2, [pc, #428]	; (8004370 <LCDvalue+0x41c>)
 80041c2:	2173      	movs	r1, #115	; 0x73
 80041c4:	2000      	movs	r0, #0
 80041c6:	f000 ffb8 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 80041ca:	4b63      	ldr	r3, [pc, #396]	; (8004358 <LCDvalue+0x404>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	9203      	str	r2, [sp, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	9202      	str	r2, [sp, #8]
 80041d4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80041d8:	9201      	str	r2, [sp, #4]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	9200      	str	r2, [sp, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a64      	ldr	r2, [pc, #400]	; (8004374 <LCDvalue+0x420>)
 80041e2:	2173      	movs	r1, #115	; 0x73
 80041e4:	2000      	movs	r0, #0
 80041e6:	f000 ffa8 	bl	800513a <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 80041ea:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <LCDvalue+0x404>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	9203      	str	r2, [sp, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	9202      	str	r2, [sp, #8]
 80041f4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80041f8:	9201      	str	r2, [sp, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	9200      	str	r2, [sp, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a5d      	ldr	r2, [pc, #372]	; (8004378 <LCDvalue+0x424>)
 8004202:	215a      	movs	r1, #90	; 0x5a
 8004204:	2000      	movs	r0, #0
 8004206:	f000 ff98 	bl	800513a <ST7735_WriteStringNSS>
		while(time == 0){
 800420a:	4b5c      	ldr	r3, [pc, #368]	; (800437c <LCDvalue+0x428>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f43f aef0 	beq.w	8003ff4 <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	889b      	ldrh	r3, [r3, #4]
 8004218:	461a      	mov	r2, r3
 800421a:	4959      	ldr	r1, [pc, #356]	; (8004380 <LCDvalue+0x42c>)
 800421c:	4859      	ldr	r0, [pc, #356]	; (8004384 <LCDvalue+0x430>)
 800421e:	f00a fc95 	bl	800eb4c <siprintf>
	if(C_LP_ATK[3] == 0){
 8004222:	4b58      	ldr	r3, [pc, #352]	; (8004384 <LCDvalue+0x430>)
 8004224:	78db      	ldrb	r3, [r3, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10e      	bne.n	8004248 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 800422a:	4b56      	ldr	r3, [pc, #344]	; (8004384 <LCDvalue+0x430>)
 800422c:	789a      	ldrb	r2, [r3, #2]
 800422e:	4b55      	ldr	r3, [pc, #340]	; (8004384 <LCDvalue+0x430>)
 8004230:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8004232:	4b54      	ldr	r3, [pc, #336]	; (8004384 <LCDvalue+0x430>)
 8004234:	785a      	ldrb	r2, [r3, #1]
 8004236:	4b53      	ldr	r3, [pc, #332]	; (8004384 <LCDvalue+0x430>)
 8004238:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 800423a:	4b52      	ldr	r3, [pc, #328]	; (8004384 <LCDvalue+0x430>)
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	4b51      	ldr	r3, [pc, #324]	; (8004384 <LCDvalue+0x430>)
 8004240:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8004242:	4b50      	ldr	r3, [pc, #320]	; (8004384 <LCDvalue+0x430>)
 8004244:	2220      	movs	r2, #32
 8004246:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	781a      	ldrb	r2, [r3, #0]
 800424c:	4b42      	ldr	r3, [pc, #264]	; (8004358 <LCDvalue+0x404>)
 800424e:	9203      	str	r2, [sp, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	9202      	str	r2, [sp, #8]
 8004254:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004258:	9201      	str	r2, [sp, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	9200      	str	r2, [sp, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a48      	ldr	r2, [pc, #288]	; (8004384 <LCDvalue+0x430>)
 8004262:	2114      	movs	r1, #20
 8004264:	205a      	movs	r0, #90	; 0x5a
 8004266:	f000 ff68 	bl	800513a <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <LCDvalue+0x404>)
 8004270:	9203      	str	r2, [sp, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	9202      	str	r2, [sp, #8]
 8004276:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800427a:	9201      	str	r2, [sp, #4]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	9200      	str	r2, [sp, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a41      	ldr	r2, [pc, #260]	; (8004388 <LCDvalue+0x434>)
 8004284:	2132      	movs	r1, #50	; 0x32
 8004286:	2069      	movs	r0, #105	; 0x69
 8004288:	f000 ff57 	bl	800513a <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	889b      	ldrh	r3, [r3, #4]
 8004290:	461a      	mov	r2, r3
 8004292:	493b      	ldr	r1, [pc, #236]	; (8004380 <LCDvalue+0x42c>)
 8004294:	483d      	ldr	r0, [pc, #244]	; (800438c <LCDvalue+0x438>)
 8004296:	f00a fc59 	bl	800eb4c <siprintf>
	if(C_LP_DEF[3] == 0){
 800429a:	4b3c      	ldr	r3, [pc, #240]	; (800438c <LCDvalue+0x438>)
 800429c:	78db      	ldrb	r3, [r3, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10e      	bne.n	80042c0 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 80042a2:	4b3a      	ldr	r3, [pc, #232]	; (800438c <LCDvalue+0x438>)
 80042a4:	789a      	ldrb	r2, [r3, #2]
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <LCDvalue+0x438>)
 80042a8:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 80042aa:	4b38      	ldr	r3, [pc, #224]	; (800438c <LCDvalue+0x438>)
 80042ac:	785a      	ldrb	r2, [r3, #1]
 80042ae:	4b37      	ldr	r3, [pc, #220]	; (800438c <LCDvalue+0x438>)
 80042b0:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <LCDvalue+0x438>)
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	4b35      	ldr	r3, [pc, #212]	; (800438c <LCDvalue+0x438>)
 80042b8:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 80042ba:	4b34      	ldr	r3, [pc, #208]	; (800438c <LCDvalue+0x438>)
 80042bc:	2220      	movs	r2, #32
 80042be:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	4b24      	ldr	r3, [pc, #144]	; (8004358 <LCDvalue+0x404>)
 80042c6:	9203      	str	r2, [sp, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	9202      	str	r2, [sp, #8]
 80042cc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80042d0:	9201      	str	r2, [sp, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	9200      	str	r2, [sp, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <LCDvalue+0x438>)
 80042da:	2114      	movs	r1, #20
 80042dc:	205a      	movs	r0, #90	; 0x5a
 80042de:	f000 ff2c 	bl	800513a <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <LCDvalue+0x404>)
 80042e8:	9203      	str	r2, [sp, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	9202      	str	r2, [sp, #8]
 80042ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80042f2:	9201      	str	r2, [sp, #4]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	9200      	str	r2, [sp, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a25      	ldr	r2, [pc, #148]	; (8004390 <LCDvalue+0x43c>)
 80042fc:	2132      	movs	r1, #50	; 0x32
 80042fe:	2069      	movs	r0, #105	; 0x69
 8004300:	f000 ff1b 	bl	800513a <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <LCDvalue+0x440>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	491d      	ldr	r1, [pc, #116]	; (8004380 <LCDvalue+0x42c>)
 800430c:	4822      	ldr	r0, [pc, #136]	; (8004398 <LCDvalue+0x444>)
 800430e:	f00a fc1d 	bl	800eb4c <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <LCDvalue+0x404>)
 8004314:	2200      	movs	r2, #0
 8004316:	9203      	str	r2, [sp, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	9202      	str	r2, [sp, #8]
 800431c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004320:	9201      	str	r2, [sp, #4]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <LCDvalue+0x444>)
 800432a:	2123      	movs	r1, #35	; 0x23
 800432c:	2032      	movs	r0, #50	; 0x32
 800432e:	f000 ff04 	bl	800513a <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <LCDvalue+0x404>)
 8004334:	2201      	movs	r2, #1
 8004336:	9203      	str	r2, [sp, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004340:	9201      	str	r2, [sp, #4]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a13      	ldr	r2, [pc, #76]	; (8004398 <LCDvalue+0x444>)
 800434a:	2123      	movs	r1, #35	; 0x23
 800434c:	2032      	movs	r0, #50	; 0x32
 800434e:	e025      	b.n	800439c <LCDvalue+0x448>
 8004350:	24000014 	.word	0x24000014
 8004354:	0800f2f8 	.word	0x0800f2f8
 8004358:	2400000c 	.word	0x2400000c
 800435c:	0800f60c 	.word	0x0800f60c
 8004360:	0800f2f0 	.word	0x0800f2f0
 8004364:	0800f620 	.word	0x0800f620
 8004368:	0800f26c 	.word	0x0800f26c
 800436c:	0800f634 	.word	0x0800f634
 8004370:	0800f640 	.word	0x0800f640
 8004374:	0800f650 	.word	0x0800f650
 8004378:	0800f65c 	.word	0x0800f65c
 800437c:	24000174 	.word	0x24000174
 8004380:	0800f608 	.word	0x0800f608
 8004384:	24000164 	.word	0x24000164
 8004388:	24000170 	.word	0x24000170
 800438c:	24000168 	.word	0x24000168
 8004390:	0800f2bc 	.word	0x0800f2bc
 8004394:	24000176 	.word	0x24000176
 8004398:	2400016c 	.word	0x2400016c
 800439c:	f000 fecd 	bl	800513a <ST7735_WriteStringNSS>

}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043ac:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <SystemInit+0xfc>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	4a3c      	ldr	r2, [pc, #240]	; (80044a4 <SystemInit+0xfc>)
 80043b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80043bc:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <SystemInit+0xfc>)
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	4a38      	ldr	r2, [pc, #224]	; (80044a4 <SystemInit+0xfc>)
 80043c2:	f043 0310 	orr.w	r3, r3, #16
 80043c6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043c8:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <SystemInit+0x100>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	2b06      	cmp	r3, #6
 80043d2:	d807      	bhi.n	80043e4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043d4:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <SystemInit+0x100>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 030f 	bic.w	r3, r3, #15
 80043dc:	4a32      	ldr	r2, [pc, #200]	; (80044a8 <SystemInit+0x100>)
 80043de:	f043 0307 	orr.w	r3, r3, #7
 80043e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80043e4:	4b31      	ldr	r3, [pc, #196]	; (80044ac <SystemInit+0x104>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a30      	ldr	r2, [pc, #192]	; (80044ac <SystemInit+0x104>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043f0:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <SystemInit+0x104>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80043f6:	4b2d      	ldr	r3, [pc, #180]	; (80044ac <SystemInit+0x104>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	492c      	ldr	r1, [pc, #176]	; (80044ac <SystemInit+0x104>)
 80043fc:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <SystemInit+0x108>)
 80043fe:	4013      	ands	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004402:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <SystemInit+0x100>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <SystemInit+0x100>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 030f 	bic.w	r3, r3, #15
 8004416:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <SystemInit+0x100>)
 8004418:	f043 0307 	orr.w	r3, r3, #7
 800441c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <SystemInit+0x104>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <SystemInit+0x104>)
 8004426:	2200      	movs	r2, #0
 8004428:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <SystemInit+0x104>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004430:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <SystemInit+0x104>)
 8004432:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <SystemInit+0x10c>)
 8004434:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <SystemInit+0x104>)
 8004438:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <SystemInit+0x110>)
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <SystemInit+0x104>)
 800443e:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <SystemInit+0x114>)
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <SystemInit+0x104>)
 8004444:	2200      	movs	r2, #0
 8004446:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004448:	4b18      	ldr	r3, [pc, #96]	; (80044ac <SystemInit+0x104>)
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <SystemInit+0x114>)
 800444c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <SystemInit+0x104>)
 8004450:	2200      	movs	r2, #0
 8004452:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <SystemInit+0x104>)
 8004456:	4a19      	ldr	r2, [pc, #100]	; (80044bc <SystemInit+0x114>)
 8004458:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <SystemInit+0x104>)
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <SystemInit+0x104>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <SystemInit+0x104>)
 8004466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <SystemInit+0x104>)
 800446e:	2200      	movs	r2, #0
 8004470:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <SystemInit+0x118>)
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <SystemInit+0x118>)
 8004478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800447c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800447e:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <SystemInit+0x11c>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <SystemInit+0x120>)
 8004484:	4013      	ands	r3, r2
 8004486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448a:	d202      	bcs.n	8004492 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <SystemInit+0x124>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <SystemInit+0x128>)
 8004494:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004498:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00
 80044a8:	52002000 	.word	0x52002000
 80044ac:	58024400 	.word	0x58024400
 80044b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80044b4:	02020200 	.word	0x02020200
 80044b8:	01ff0000 	.word	0x01ff0000
 80044bc:	01010280 	.word	0x01010280
 80044c0:	580000c0 	.word	0x580000c0
 80044c4:	5c001000 	.word	0x5c001000
 80044c8:	ffff0000 	.word	0xffff0000
 80044cc:	51008108 	.word	0x51008108
 80044d0:	52004000 	.word	0x52004000

080044d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80044da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044de:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80044e0:	bf00      	nop
 80044e2:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <main+0xec>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d004      	beq.n	80044f8 <main+0x24>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	dcf4      	bgt.n	80044e2 <main+0xe>
	if ( timeout < 0 )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da01      	bge.n	8004502 <main+0x2e>
	{
		Error_Handler();
 80044fe:	f000 fbeb 	bl	8004cd8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004502:	f001 fb69 	bl	8005bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004506:	f000 f863 	bl	80045d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800450a:	f000 f8e5 	bl	80046d8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800450e:	4b2c      	ldr	r3, [pc, #176]	; (80045c0 <main+0xec>)
 8004510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <main+0xec>)
 8004516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800451a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800451e:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <main+0xec>)
 8004520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800452c:	2000      	movs	r0, #0
 800452e:	f004 fd7f 	bl	8009030 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8004532:	2100      	movs	r1, #0
 8004534:	2000      	movs	r0, #0
 8004536:	f004 fd95 	bl	8009064 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800453a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800453e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8004540:	bf00      	nop
 8004542:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <main+0xec>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <main+0x84>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	dcf4      	bgt.n	8004542 <main+0x6e>
	if ( timeout < 0 )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da01      	bge.n	8004562 <main+0x8e>
	{
		Error_Handler();
 800455e:	f000 fbbb 	bl	8004cd8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004562:	f000 fa6d 	bl	8004a40 <MX_GPIO_Init>
  MX_ETH_Init();
 8004566:	f000 f8e9 	bl	800473c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800456a:	f000 f9c1 	bl	80048f0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800456e:	f000 fa3f 	bl	80049f0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004572:	f000 fa0b 	bl	800498c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8004576:	f000 f92d 	bl	80047d4 <MX_SPI3_Init>
  MX_TIM7_Init();
 800457a:	f000 f983 	bl	8004884 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800457e:	f000 fcb3 	bl	8004ee8 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8004582:	2000      	movs	r0, #0
 8004584:	f000 ffbd 	bl	8005502 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8004588:	2000      	movs	r0, #0
 800458a:	f000 ffa9 	bl	80054e0 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 800458e:	f001 fba9 	bl	8005ce4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <main+0xf0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2bc8      	cmp	r3, #200	; 0xc8
 800459c:	d9f7      	bls.n	800458e <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 800459e:	f001 fba1 	bl	8005ce4 <HAL_GetTick>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <main+0xf0>)
 80045a6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80045a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045ac:	4806      	ldr	r0, [pc, #24]	; (80045c8 <main+0xf4>)
 80045ae:	f004 fd24 	bl	8008ffa <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 80045b2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80045b6:	4905      	ldr	r1, [pc, #20]	; (80045cc <main+0xf8>)
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fc fd89 	bl	80010d0 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 80045be:	e7e6      	b.n	800458e <main+0xba>
 80045c0:	58024400 	.word	0x58024400
 80045c4:	24000e98 	.word	0x24000e98
 80045c8:	58020400 	.word	0x58020400
 80045cc:	240009c0 	.word	0x240009c0

080045d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b09c      	sub	sp, #112	; 0x70
 80045d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045da:	224c      	movs	r2, #76	; 0x4c
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f00a f9bc 	bl	800e95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	2220      	movs	r2, #32
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f00a f9b6 	bl	800e95c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80045f0:	2004      	movs	r0, #4
 80045f2:	f004 fe93 	bl	800931c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80045f6:	2300      	movs	r3, #0
 80045f8:	603b      	str	r3, [r7, #0]
 80045fa:	4b34      	ldr	r3, [pc, #208]	; (80046cc <SystemClock_Config+0xfc>)
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	4a33      	ldr	r2, [pc, #204]	; (80046cc <SystemClock_Config+0xfc>)
 8004600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004604:	6193      	str	r3, [r2, #24]
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <SystemClock_Config+0xfc>)
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <SystemClock_Config+0x100>)
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4a2e      	ldr	r2, [pc, #184]	; (80046d0 <SystemClock_Config+0x100>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800461c:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <SystemClock_Config+0x100>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004628:	bf00      	nop
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <SystemClock_Config+0xfc>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004636:	d1f8      	bne.n	800462a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004638:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <SystemClock_Config+0x104>)
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	f023 0303 	bic.w	r3, r3, #3
 8004640:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <SystemClock_Config+0x104>)
 8004642:	f043 0302 	orr.w	r3, r3, #2
 8004646:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004648:	2301      	movs	r3, #1
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800464c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004652:	2302      	movs	r3, #2
 8004654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004656:	2302      	movs	r3, #2
 8004658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800465e:	2378      	movs	r3, #120	; 0x78
 8004660:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004662:	2302      	movs	r3, #2
 8004664:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004666:	2302      	movs	r3, #2
 8004668:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800466a:	2302      	movs	r3, #2
 800466c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800466e:	230c      	movs	r3, #12
 8004670:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004672:	2300      	movs	r3, #0
 8004674:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800467a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f004 feb6 	bl	80093f0 <HAL_RCC_OscConfig>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800468a:	f000 fb25 	bl	8004cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800468e:	233f      	movs	r3, #63	; 0x3f
 8004690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004692:	2303      	movs	r3, #3
 8004694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800469a:	2308      	movs	r3, #8
 800469c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800469e:	2340      	movs	r3, #64	; 0x40
 80046a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80046a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80046ac:	2340      	movs	r3, #64	; 0x40
 80046ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	2104      	movs	r1, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f005 fac9 	bl	8009c4c <HAL_RCC_ClockConfig>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80046c0:	f000 fb0a 	bl	8004cd8 <Error_Handler>
  }
}
 80046c4:	bf00      	nop
 80046c6:	3770      	adds	r7, #112	; 0x70
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	58024800 	.word	0x58024800
 80046d0:	58000400 	.word	0x58000400
 80046d4:	58024400 	.word	0x58024400

080046d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b0b0      	sub	sp, #192	; 0xc0
 80046dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	22bc      	movs	r2, #188	; 0xbc
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f00a f939 	bl	800e95c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80046ea:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80046ee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80046f4:	2318      	movs	r3, #24
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80046f8:	2302      	movs	r3, #2
 80046fa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80046fc:	2304      	movs	r3, #4
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8004700:	2302      	movs	r3, #2
 8004702:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8004704:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800470a:	2300      	movs	r3, #0
 800470c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8004712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004716:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8004718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800471c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f005 fe1e 	bl	800a364 <HAL_RCCEx_PeriphCLKConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800472e:	f000 fad3 	bl	8004cd8 <Error_Handler>
  }
}
 8004732:	bf00      	nop
 8004734:	37c0      	adds	r7, #192	; 0xc0
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8004740:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <MX_ETH_Init+0x80>)
 8004742:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <MX_ETH_Init+0x84>)
 8004744:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004746:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <MX_ETH_Init+0x88>)
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <MX_ETH_Init+0x88>)
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <MX_ETH_Init+0x88>)
 8004754:	22e1      	movs	r2, #225	; 0xe1
 8004756:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <MX_ETH_Init+0x88>)
 800475a:	2200      	movs	r2, #0
 800475c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800475e:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <MX_ETH_Init+0x88>)
 8004760:	2200      	movs	r2, #0
 8004762:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <MX_ETH_Init+0x88>)
 8004766:	2200      	movs	r2, #0
 8004768:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800476a:	4b14      	ldr	r3, [pc, #80]	; (80047bc <MX_ETH_Init+0x80>)
 800476c:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <MX_ETH_Init+0x88>)
 800476e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <MX_ETH_Init+0x80>)
 8004772:	2201      	movs	r2, #1
 8004774:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <MX_ETH_Init+0x80>)
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <MX_ETH_Init+0x8c>)
 800477a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800477c:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <MX_ETH_Init+0x80>)
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <MX_ETH_Init+0x90>)
 8004780:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <MX_ETH_Init+0x80>)
 8004784:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004788:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800478a:	480c      	ldr	r0, [pc, #48]	; (80047bc <MX_ETH_Init+0x80>)
 800478c:	f003 fe30 	bl	80083f0 <HAL_ETH_Init>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8004796:	f000 fa9f 	bl	8004cd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800479a:	2238      	movs	r2, #56	; 0x38
 800479c:	2100      	movs	r1, #0
 800479e:	480c      	ldr	r0, [pc, #48]	; (80047d0 <MX_ETH_Init+0x94>)
 80047a0:	f00a f8dc 	bl	800e95c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <MX_ETH_Init+0x94>)
 80047a6:	2221      	movs	r2, #33	; 0x21
 80047a8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <MX_ETH_Init+0x94>)
 80047ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047b0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <MX_ETH_Init+0x94>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80047b8:	bf00      	nop
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	240001b0 	.word	0x240001b0
 80047c0:	40028000 	.word	0x40028000
 80047c4:	24000ea8 	.word	0x24000ea8
 80047c8:	240000e8 	.word	0x240000e8
 80047cc:	24000088 	.word	0x24000088
 80047d0:	24000178 	.word	0x24000178

080047d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <MX_SPI3_Init+0xa8>)
 80047da:	4a29      	ldr	r2, [pc, #164]	; (8004880 <MX_SPI3_Init+0xac>)
 80047dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80047de:	4b27      	ldr	r3, [pc, #156]	; (800487c <MX_SPI3_Init+0xa8>)
 80047e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80047e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80047e6:	4b25      	ldr	r3, [pc, #148]	; (800487c <MX_SPI3_Init+0xa8>)
 80047e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047ec:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <MX_SPI3_Init+0xa8>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <MX_SPI3_Init+0xa8>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <MX_SPI3_Init+0xa8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <MX_SPI3_Init+0xa8>)
 8004802:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004806:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <MX_SPI3_Init+0xa8>)
 800480a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800480e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <MX_SPI3_Init+0xa8>)
 8004812:	2200      	movs	r2, #0
 8004814:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <MX_SPI3_Init+0xa8>)
 8004818:	2200      	movs	r2, #0
 800481a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <MX_SPI3_Init+0xa8>)
 800481e:	2200      	movs	r2, #0
 8004820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <MX_SPI3_Init+0xa8>)
 8004824:	2200      	movs	r2, #0
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <MX_SPI3_Init+0xa8>)
 800482a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800482e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004830:	4b12      	ldr	r3, [pc, #72]	; (800487c <MX_SPI3_Init+0xa8>)
 8004832:	2200      	movs	r2, #0
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004836:	4b11      	ldr	r3, [pc, #68]	; (800487c <MX_SPI3_Init+0xa8>)
 8004838:	2200      	movs	r2, #0
 800483a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <MX_SPI3_Init+0xa8>)
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <MX_SPI3_Init+0xa8>)
 8004844:	2200      	movs	r2, #0
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <MX_SPI3_Init+0xa8>)
 800484a:	2200      	movs	r2, #0
 800484c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <MX_SPI3_Init+0xa8>)
 8004850:	2200      	movs	r2, #0
 8004852:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <MX_SPI3_Init+0xa8>)
 8004856:	2200      	movs	r2, #0
 8004858:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <MX_SPI3_Init+0xa8>)
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <MX_SPI3_Init+0xa8>)
 8004862:	2200      	movs	r2, #0
 8004864:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004866:	4805      	ldr	r0, [pc, #20]	; (800487c <MX_SPI3_Init+0xa8>)
 8004868:	f007 f8e4 	bl	800ba34 <HAL_SPI_Init>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004872:	f000 fa31 	bl	8004cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	24000260 	.word	0x24000260
 8004880:	40003c00 	.word	0x40003c00

08004884 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004894:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <MX_TIM7_Init+0x64>)
 8004896:	4a15      	ldr	r2, [pc, #84]	; (80048ec <MX_TIM7_Init+0x68>)
 8004898:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <MX_TIM7_Init+0x64>)
 800489c:	22ef      	movs	r2, #239	; 0xef
 800489e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <MX_TIM7_Init+0x64>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <MX_TIM7_Init+0x64>)
 80048a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <MX_TIM7_Init+0x64>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80048b4:	480c      	ldr	r0, [pc, #48]	; (80048e8 <MX_TIM7_Init+0x64>)
 80048b6:	f007 fc9e 	bl	800c1f6 <HAL_TIM_Base_Init>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80048c0:	f000 fa0a 	bl	8004cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048c4:	2300      	movs	r3, #0
 80048c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80048cc:	1d3b      	adds	r3, r7, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4805      	ldr	r0, [pc, #20]	; (80048e8 <MX_TIM7_Init+0x64>)
 80048d2:	f007 ff6f 	bl	800c7b4 <HAL_TIMEx_MasterConfigSynchronization>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80048dc:	f000 f9fc 	bl	8004cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	240002e8 	.word	0x240002e8
 80048ec:	40001400 	.word	0x40001400

080048f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <MX_USART3_UART_Init+0x90>)
 80048f6:	4a23      	ldr	r2, [pc, #140]	; (8004984 <MX_USART3_UART_Init+0x94>)
 80048f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <MX_USART3_UART_Init+0x90>)
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <MX_USART3_UART_Init+0x98>)
 80048fe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <MX_USART3_UART_Init+0x90>)
 8004902:	2200      	movs	r2, #0
 8004904:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <MX_USART3_UART_Init+0x90>)
 8004908:	2200      	movs	r2, #0
 800490a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <MX_USART3_UART_Init+0x90>)
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004912:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <MX_USART3_UART_Init+0x90>)
 8004914:	220c      	movs	r2, #12
 8004916:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <MX_USART3_UART_Init+0x90>)
 800491a:	2200      	movs	r2, #0
 800491c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800491e:	4b18      	ldr	r3, [pc, #96]	; (8004980 <MX_USART3_UART_Init+0x90>)
 8004920:	2200      	movs	r2, #0
 8004922:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <MX_USART3_UART_Init+0x90>)
 8004926:	2200      	movs	r2, #0
 8004928:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <MX_USART3_UART_Init+0x90>)
 800492c:	2200      	movs	r2, #0
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <MX_USART3_UART_Init+0x90>)
 8004932:	2200      	movs	r2, #0
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004936:	4812      	ldr	r0, [pc, #72]	; (8004980 <MX_USART3_UART_Init+0x90>)
 8004938:	f007 ffe8 	bl	800c90c <HAL_UART_Init>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8004942:	f000 f9c9 	bl	8004cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004946:	2100      	movs	r1, #0
 8004948:	480d      	ldr	r0, [pc, #52]	; (8004980 <MX_USART3_UART_Init+0x90>)
 800494a:	f009 fc09 	bl	800e160 <HAL_UARTEx_SetTxFifoThreshold>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8004954:	f000 f9c0 	bl	8004cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004958:	2100      	movs	r1, #0
 800495a:	4809      	ldr	r0, [pc, #36]	; (8004980 <MX_USART3_UART_Init+0x90>)
 800495c:	f009 fc3e 	bl	800e1dc <HAL_UARTEx_SetRxFifoThreshold>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8004966:	f000 f9b7 	bl	8004cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800496a:	4805      	ldr	r0, [pc, #20]	; (8004980 <MX_USART3_UART_Init+0x90>)
 800496c:	f009 fbbf 	bl	800e0ee <HAL_UARTEx_DisableFifoMode>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8004976:	f000 f9af 	bl	8004cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	24000334 	.word	0x24000334
 8004984:	40004800 	.word	0x40004800
 8004988:	0005dc00 	.word	0x0005dc00

0800498c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8004994:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004998:	2209      	movs	r2, #9
 800499a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800499e:	2202      	movs	r2, #2
 80049a0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049aa:	2202      	movs	r2, #2
 80049ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80049ae:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049bc:	2200      	movs	r2, #0
 80049be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80049c6:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80049d2:	4805      	ldr	r0, [pc, #20]	; (80049e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80049d4:	f004 fb5a 	bl	800908c <HAL_PCD_Init>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80049de:	f000 f97b 	bl	8004cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	240004b4 	.word	0x240004b4
 80049ec:	40080000 	.word	0x40080000

080049f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <MX_DMA_Init+0x4c>)
 80049f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80049fc:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <MX_DMA_Init+0x4c>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <MX_DMA_Init+0x4c>)
 8004a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004a14:	2200      	movs	r2, #0
 8004a16:	2100      	movs	r1, #0
 8004a18:	200c      	movs	r0, #12
 8004a1a:	f001 fa8e 	bl	8005f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004a1e:	200c      	movs	r0, #12
 8004a20:	f001 faa5 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004a24:	2200      	movs	r2, #0
 8004a26:	2100      	movs	r1, #0
 8004a28:	200f      	movs	r0, #15
 8004a2a:	f001 fa86 	bl	8005f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004a2e:	200f      	movs	r0, #15
 8004a30:	f001 fa9d 	bl	8005f6e <HAL_NVIC_EnableIRQ>

}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58024400 	.word	0x58024400

08004a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08e      	sub	sp, #56	; 0x38
 8004a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a56:	4b8a      	ldr	r3, [pc, #552]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a5c:	4a88      	ldr	r2, [pc, #544]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a5e:	f043 0304 	orr.w	r3, r3, #4
 8004a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a66:	4b86      	ldr	r3, [pc, #536]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a74:	4b82      	ldr	r3, [pc, #520]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a7a:	4a81      	ldr	r2, [pc, #516]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a84:	4b7e      	ldr	r3, [pc, #504]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a98:	4a79      	ldr	r2, [pc, #484]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004aa2:	4b77      	ldr	r3, [pc, #476]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab0:	4b73      	ldr	r3, [pc, #460]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ab6:	4a72      	ldr	r2, [pc, #456]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004ab8:	f043 0302 	orr.w	r3, r3, #2
 8004abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ac0:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ace:	4b6c      	ldr	r3, [pc, #432]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ad4:	4a6a      	ldr	r2, [pc, #424]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004ad6:	f043 0320 	orr.w	r3, r3, #32
 8004ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ade:	4b68      	ldr	r3, [pc, #416]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004aec:	4b64      	ldr	r3, [pc, #400]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af2:	4a63      	ldr	r2, [pc, #396]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004af4:	f043 0310 	orr.w	r3, r3, #16
 8004af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004afc:	4b60      	ldr	r3, [pc, #384]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b10:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004b12:	f043 0308 	orr.w	r3, r3, #8
 8004b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b1a:	4b59      	ldr	r3, [pc, #356]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b28:	4b55      	ldr	r3, [pc, #340]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b2e:	4a54      	ldr	r2, [pc, #336]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b38:	4b51      	ldr	r3, [pc, #324]	; (8004c80 <MX_GPIO_Init+0x240>)
 8004b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8004b46:	2201      	movs	r2, #1
 8004b48:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8004b4c:	484d      	ldr	r0, [pc, #308]	; (8004c84 <MX_GPIO_Init+0x244>)
 8004b4e:	f004 fa3b 	bl	8008fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8004b52:	2200      	movs	r2, #0
 8004b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b58:	484a      	ldr	r0, [pc, #296]	; (8004c84 <MX_GPIO_Init+0x244>)
 8004b5a:	f004 fa35 	bl	8008fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b64:	4848      	ldr	r0, [pc, #288]	; (8004c88 <MX_GPIO_Init+0x248>)
 8004b66:	f004 fa2f 	bl	8008fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b70:	4846      	ldr	r0, [pc, #280]	; (8004c8c <MX_GPIO_Init+0x24c>)
 8004b72:	f004 fa29 	bl	8008fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004b76:	2201      	movs	r2, #1
 8004b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b7c:	4844      	ldr	r0, [pc, #272]	; (8004c90 <MX_GPIO_Init+0x250>)
 8004b7e:	f004 fa23 	bl	8008fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8004b82:	230d      	movs	r3, #13
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b86:	2300      	movs	r3, #0
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b92:	4619      	mov	r1, r3
 8004b94:	483f      	ldr	r0, [pc, #252]	; (8004c94 <MX_GPIO_Init+0x254>)
 8004b96:	f004 f84f 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004baa:	4619      	mov	r1, r3
 8004bac:	483a      	ldr	r0, [pc, #232]	; (8004c98 <MX_GPIO_Init+0x258>)
 8004bae:	f004 f843 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8004bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4830      	ldr	r0, [pc, #192]	; (8004c88 <MX_GPIO_Init+0x248>)
 8004bc6:	f004 f837 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8004bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8004bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	482f      	ldr	r0, [pc, #188]	; (8004c9c <MX_GPIO_Init+0x25c>)
 8004be0:	f004 f82a 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8004be4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bea:	2301      	movs	r3, #1
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4821      	ldr	r0, [pc, #132]	; (8004c84 <MX_GPIO_Init+0x244>)
 8004bfe:	f004 f81b 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c10:	2300      	movs	r3, #0
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c18:	4619      	mov	r1, r3
 8004c1a:	481b      	ldr	r0, [pc, #108]	; (8004c88 <MX_GPIO_Init+0x248>)
 8004c1c:	f004 f80c 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8004c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c26:	2301      	movs	r3, #1
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8004c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c36:	4619      	mov	r1, r3
 8004c38:	4814      	ldr	r0, [pc, #80]	; (8004c8c <MX_GPIO_Init+0x24c>)
 8004c3a:	f003 fffd 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8004c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c50:	4619      	mov	r1, r3
 8004c52:	480f      	ldr	r0, [pc, #60]	; (8004c90 <MX_GPIO_Init+0x250>)
 8004c54:	f003 fff0 	bl	8008c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8004c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c66:	2300      	movs	r3, #0
 8004c68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8004c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4807      	ldr	r0, [pc, #28]	; (8004c90 <MX_GPIO_Init+0x250>)
 8004c72:	f003 ffe1 	bl	8008c38 <HAL_GPIO_Init>

}
 8004c76:	bf00      	nop
 8004c78:	3738      	adds	r7, #56	; 0x38
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	58024400 	.word	0x58024400
 8004c84:	58021000 	.word	0x58021000
 8004c88:	58020400 	.word	0x58020400
 8004c8c:	58020c00 	.word	0x58020c00
 8004c90:	58021800 	.word	0x58021800
 8004c94:	58020800 	.word	0x58020800
 8004c98:	58020000 	.word	0x58020000
 8004c9c:	58021400 	.word	0x58021400

08004ca0 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004ca0:	b4b0      	push	{r4, r5, r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10a      	bne.n	8004cc6 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cba:	1854      	adds	r4, r2, r1
 8004cbc:	f143 0500 	adc.w	r5, r3, #0
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004cc2:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bcb0      	pop	{r4, r5, r7}
 8004cce:	4770      	bx	lr
 8004cd0:	240002e8 	.word	0x240002e8
 8004cd4:	24000ea0 	.word	0x24000ea0

08004cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cdc:	b672      	cpsid	i
}
 8004cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004ce0:	e7fe      	b.n	8004ce0 <Error_Handler+0x8>
	...

08004ce4 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cee:	4802      	ldr	r0, [pc, #8]	; (8004cf8 <ST7735_Select+0x14>)
 8004cf0:	f004 f96a 	bl	8008fc8 <HAL_GPIO_WritePin>
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	58021000 	.word	0x58021000

08004cfc <ST7735_Unselect>:

void ST7735_Unselect() {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8004d00:	2201      	movs	r2, #1
 8004d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d06:	4802      	ldr	r0, [pc, #8]	; (8004d10 <ST7735_Unselect+0x14>)
 8004d08:	f004 f95e 	bl	8008fc8 <HAL_GPIO_WritePin>
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	58021000 	.word	0x58021000

08004d14 <ST7735_Select1>:
static void ST7735_Select1() {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d1e:	4802      	ldr	r0, [pc, #8]	; (8004d28 <ST7735_Select1+0x14>)
 8004d20:	f004 f952 	bl	8008fc8 <HAL_GPIO_WritePin>
}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	58021000 	.word	0x58021000

08004d2c <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8004d30:	2201      	movs	r2, #1
 8004d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d36:	4802      	ldr	r0, [pc, #8]	; (8004d40 <ST7735_Unselect1+0x14>)
 8004d38:	f004 f946 	bl	8008fc8 <HAL_GPIO_WritePin>
}
 8004d3c:	bf00      	nop
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	58021000 	.word	0x58021000

08004d44 <ST7735_Reset>:

static void ST7735_Reset() {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d4e:	4807      	ldr	r0, [pc, #28]	; (8004d6c <ST7735_Reset+0x28>)
 8004d50:	f004 f93a 	bl	8008fc8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8004d54:	2005      	movs	r0, #5
 8004d56:	f000 ffd1 	bl	8005cfc <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d60:	4802      	ldr	r0, [pc, #8]	; (8004d6c <ST7735_Reset+0x28>)
 8004d62:	f004 f931 	bl	8008fc8 <HAL_GPIO_WritePin>
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	58021000 	.word	0x58021000

08004d70 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d80:	4806      	ldr	r0, [pc, #24]	; (8004d9c <ST7735_WriteCommand+0x2c>)
 8004d82:	f004 f921 	bl	8008fc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8004d86:	1df9      	adds	r1, r7, #7
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	4804      	ldr	r0, [pc, #16]	; (8004da0 <ST7735_WriteCommand+0x30>)
 8004d90:	f006 ff56 	bl	800bc40 <HAL_SPI_Transmit>
}
 8004d94:	bf00      	nop
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	58021800 	.word	0x58021800
 8004da0:	24000260 	.word	0x24000260

08004da4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004dae:	2201      	movs	r2, #1
 8004db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004db4:	4807      	ldr	r0, [pc, #28]	; (8004dd4 <ST7735_WriteData+0x30>)
 8004db6:	f004 f907 	bl	8008fc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4804      	ldr	r0, [pc, #16]	; (8004dd8 <ST7735_WriteData+0x34>)
 8004dc6:	f006 ff3b 	bl	800bc40 <HAL_SPI_Transmit>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	58021800 	.word	0x58021800
 8004dd8:	24000260 	.word	0x24000260

08004ddc <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8004dee:	e034      	b.n	8004e5a <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 8004dfa:	7afb      	ldrb	r3, [r7, #11]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff ffb7 	bl	8004d70 <ST7735_WriteCommand>

		numArgs = *addr++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8004e0c:	7abb      	ldrb	r3, [r7, #10]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8004e16:	7abb      	ldrb	r3, [r7, #10]
 8004e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1c:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 8004e1e:	7abb      	ldrb	r3, [r7, #10]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8004e24:	7abb      	ldrb	r3, [r7, #10]
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff ffbb 	bl	8004da4 <ST7735_WriteData>
			addr += numArgs;
 8004e2e:	7abb      	ldrb	r3, [r7, #10]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	4413      	add	r3, r2
 8004e34:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8004e36:	89bb      	ldrh	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00e      	beq.n	8004e5a <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8004e46:	89bb      	ldrh	r3, [r7, #12]
 8004e48:	2bff      	cmp	r3, #255	; 0xff
 8004e4a:	d102      	bne.n	8004e52 <ST7735_ExecuteCommandList+0x76>
 8004e4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004e50:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8004e52:	89bb      	ldrh	r3, [r7, #12]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 ff51 	bl	8005cfc <HAL_Delay>
	while(numCommands--) {
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	73fa      	strb	r2, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1c5      	bne.n	8004df0 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8004e6e:	b590      	push	{r4, r7, lr}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4604      	mov	r4, r0
 8004e76:	4608      	mov	r0, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	71fb      	strb	r3, [r7, #7]
 8004e80:	4603      	mov	r3, r0
 8004e82:	71bb      	strb	r3, [r7, #6]
 8004e84:	460b      	mov	r3, r1
 8004e86:	717b      	strb	r3, [r7, #5]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8004e8c:	202a      	movs	r0, #42	; 0x2a
 8004e8e:	f7ff ff6f 	bl	8004d70 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8004e92:	2300      	movs	r3, #0
 8004e94:	733b      	strb	r3, [r7, #12]
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	3302      	adds	r3, #2
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	737b      	strb	r3, [r7, #13]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73bb      	strb	r3, [r7, #14]
 8004ea2:	797b      	ldrb	r3, [r7, #5]
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8004eaa:	f107 030c 	add.w	r3, r7, #12
 8004eae:	2104      	movs	r1, #4
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff77 	bl	8004da4 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 8004eb6:	202b      	movs	r0, #43	; 0x2b
 8004eb8:	f7ff ff5a 	bl	8004d70 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8004ec4:	793b      	ldrb	r3, [r7, #4]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8004ecc:	f107 030c 	add.w	r3, r7, #12
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ff66 	bl	8004da4 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8004ed8:	202c      	movs	r0, #44	; 0x2c
 8004eda:	f7ff ff49 	bl	8004d70 <ST7735_WriteCommand>
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd90      	pop	{r4, r7, pc}
	...

08004ee8 <ST7735_Init>:

void ST7735_Init() {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
	ST7735_Select();
 8004eec:	f7ff fefa 	bl	8004ce4 <ST7735_Select>
	ST7735_Select1();
 8004ef0:	f7ff ff10 	bl	8004d14 <ST7735_Select1>
	ST7735_Reset();
 8004ef4:	f7ff ff26 	bl	8004d44 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8004ef8:	4807      	ldr	r0, [pc, #28]	; (8004f18 <ST7735_Init+0x30>)
 8004efa:	f7ff ff6f 	bl	8004ddc <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8004efe:	4807      	ldr	r0, [pc, #28]	; (8004f1c <ST7735_Init+0x34>)
 8004f00:	f7ff ff6c 	bl	8004ddc <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8004f04:	4806      	ldr	r0, [pc, #24]	; (8004f20 <ST7735_Init+0x38>)
 8004f06:	f7ff ff69 	bl	8004ddc <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8004f0a:	f7ff fef7 	bl	8004cfc <ST7735_Unselect>
	ST7735_Unselect1();
 8004f0e:	f7ff ff0d 	bl	8004d2c <ST7735_Unselect1>
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	08010b44 	.word	0x08010b44
 8004f1c:	08010b80 	.word	0x08010b80
 8004f20:	08010b90 	.word	0x08010b90

08004f24 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004f24:	b082      	sub	sp, #8
 8004f26:	b590      	push	{r4, r7, lr}
 8004f28:	b089      	sub	sp, #36	; 0x24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
 8004f32:	460b      	mov	r3, r1
 8004f34:	80bb      	strh	r3, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	b2d8      	uxtb	r0, r3
 8004f3e:	88bb      	ldrh	r3, [r7, #4]
 8004f40:	b2d9      	uxtb	r1, r3
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f4a:	4413      	add	r3, r2
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b2dc      	uxtb	r4, r3
 8004f52:	88bb      	ldrh	r3, [r7, #4]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f5a:	4413      	add	r3, r2
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4622      	mov	r2, r4
 8004f64:	f7ff ff83 	bl	8004e6e <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e043      	b.n	8004ff6 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8004f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	3b20      	subs	r3, #32
 8004f74:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	440b      	add	r3, r1
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e029      	b.n	8004fe4 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00e      	beq.n	8004fbe <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8004fa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	743b      	strb	r3, [r7, #16]
 8004faa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fef4 	bl	8004da4 <ST7735_WriteData>
 8004fbc:	e00f      	b.n	8004fde <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	733b      	strb	r3, [r7, #12]
 8004fca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8004fd2:	f107 030c 	add.w	r3, r7, #12
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fee3 	bl	8004da4 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004fe8:	461a      	mov	r2, r3
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d3cf      	bcc.n	8004f90 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d3b5      	bcc.n	8004f6e <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	3724      	adds	r7, #36	; 0x24
 8005008:	46bd      	mov	sp, r7
 800500a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800500e:	b002      	add	sp, #8
 8005010:	4770      	bx	lr

08005012 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005012:	b082      	sub	sp, #8
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af04      	add	r7, sp, #16
 800501a:	603a      	str	r2, [r7, #0]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	4603      	mov	r3, r0
 8005020:	80fb      	strh	r3, [r7, #6]
 8005022:	460b      	mov	r3, r1
 8005024:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8005026:	f7ff fe5d 	bl	8004ce4 <ST7735_Select>

	while(*str) {
 800502a:	e02d      	b.n	8005088 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	7d3a      	ldrb	r2, [r7, #20]
 8005030:	4413      	add	r3, r2
 8005032:	2b7f      	cmp	r3, #127	; 0x7f
 8005034:	dd13      	ble.n	800505e <ST7735_WriteString+0x4c>
			x = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800503a:	7d7b      	ldrb	r3, [r7, #21]
 800503c:	b29a      	uxth	r2, r3
 800503e:	88bb      	ldrh	r3, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8005044:	88bb      	ldrh	r3, [r7, #4]
 8005046:	7d7a      	ldrb	r2, [r7, #21]
 8005048:	4413      	add	r3, r2
 800504a:	2b7f      	cmp	r3, #127	; 0x7f
 800504c:	dc21      	bgt.n	8005092 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b20      	cmp	r3, #32
 8005054:	d103      	bne.n	800505e <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	603b      	str	r3, [r7, #0]
				continue;
 800505c:	e014      	b.n	8005088 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	88b9      	ldrh	r1, [r7, #4]
 8005064:	88f8      	ldrh	r0, [r7, #6]
 8005066:	8c3b      	ldrh	r3, [r7, #32]
 8005068:	9302      	str	r3, [sp, #8]
 800506a:	8bbb      	ldrh	r3, [r7, #28]
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f7ff ff56 	bl	8004f24 <ST7735_WriteChar>
		x += font.width;
 8005078:	7d3b      	ldrb	r3, [r7, #20]
 800507a:	b29a      	uxth	r2, r3
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	4413      	add	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
		str++;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	603b      	str	r3, [r7, #0]
	while(*str) {
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1cd      	bne.n	800502c <ST7735_WriteString+0x1a>
 8005090:	e000      	b.n	8005094 <ST7735_WriteString+0x82>
				break;
 8005092:	bf00      	nop
	}

	ST7735_Unselect();
 8005094:	f7ff fe32 	bl	8004cfc <ST7735_Unselect>
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050a2:	b002      	add	sp, #8
 80050a4:	4770      	bx	lr

080050a6 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80050a6:	b082      	sub	sp, #8
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af04      	add	r7, sp, #16
 80050ae:	603a      	str	r2, [r7, #0]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	4603      	mov	r3, r0
 80050b4:	80fb      	strh	r3, [r7, #6]
 80050b6:	460b      	mov	r3, r1
 80050b8:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 80050ba:	f7ff fe2b 	bl	8004d14 <ST7735_Select1>

	while(*str) {
 80050be:	e02d      	b.n	800511c <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	7d3a      	ldrb	r2, [r7, #20]
 80050c4:	4413      	add	r3, r2
 80050c6:	2b7f      	cmp	r3, #127	; 0x7f
 80050c8:	dd13      	ble.n	80050f2 <ST7735_WriteString1+0x4c>
			x = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80050ce:	7d7b      	ldrb	r3, [r7, #21]
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	88bb      	ldrh	r3, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80050d8:	88bb      	ldrh	r3, [r7, #4]
 80050da:	7d7a      	ldrb	r2, [r7, #21]
 80050dc:	4413      	add	r3, r2
 80050de:	2b7f      	cmp	r3, #127	; 0x7f
 80050e0:	dc21      	bgt.n	8005126 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d103      	bne.n	80050f2 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	603b      	str	r3, [r7, #0]
				continue;
 80050f0:	e014      	b.n	800511c <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	88b9      	ldrh	r1, [r7, #4]
 80050f8:	88f8      	ldrh	r0, [r7, #6]
 80050fa:	8c3b      	ldrh	r3, [r7, #32]
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	8bbb      	ldrh	r3, [r7, #28]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f7ff ff0c 	bl	8004f24 <ST7735_WriteChar>
		x += font.width;
 800510c:	7d3b      	ldrb	r3, [r7, #20]
 800510e:	b29a      	uxth	r2, r3
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	4413      	add	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
		str++;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	603b      	str	r3, [r7, #0]
	while(*str) {
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1cd      	bne.n	80050c0 <ST7735_WriteString1+0x1a>
 8005124:	e000      	b.n	8005128 <ST7735_WriteString1+0x82>
				break;
 8005126:	bf00      	nop
	}

	ST7735_Unselect1();
 8005128:	f7ff fe00 	bl	8004d2c <ST7735_Unselect1>
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005136:	b002      	add	sp, #8
 8005138:	4770      	bx	lr

0800513a <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 800513a:	b082      	sub	sp, #8
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af04      	add	r7, sp, #16
 8005142:	603a      	str	r2, [r7, #0]
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	4603      	mov	r3, r0
 8005148:	80fb      	strh	r3, [r7, #6]
 800514a:	460b      	mov	r3, r1
 800514c:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 800514e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8005156:	f7ff fdc5 	bl	8004ce4 <ST7735_Select>
 800515a:	e034      	b.n	80051c6 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 800515c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005160:	2b01      	cmp	r3, #1
 8005162:	d130      	bne.n	80051c6 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8005164:	f7ff fdd6 	bl	8004d14 <ST7735_Select1>

	}


	while(*str) {
 8005168:	e02d      	b.n	80051c6 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	7d3a      	ldrb	r2, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	2b7f      	cmp	r3, #127	; 0x7f
 8005172:	dd13      	ble.n	800519c <ST7735_WriteStringNSS+0x62>
			x = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8005178:	7d7b      	ldrb	r3, [r7, #21]
 800517a:	b29a      	uxth	r2, r3
 800517c:	88bb      	ldrh	r3, [r7, #4]
 800517e:	4413      	add	r3, r2
 8005180:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8005182:	88bb      	ldrh	r3, [r7, #4]
 8005184:	7d7a      	ldrb	r2, [r7, #21]
 8005186:	4413      	add	r3, r2
 8005188:	2b7f      	cmp	r3, #127	; 0x7f
 800518a:	dc21      	bgt.n	80051d0 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b20      	cmp	r3, #32
 8005192:	d103      	bne.n	800519c <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	603b      	str	r3, [r7, #0]
				continue;
 800519a:	e014      	b.n	80051c6 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	88b9      	ldrh	r1, [r7, #4]
 80051a2:	88f8      	ldrh	r0, [r7, #6]
 80051a4:	8c3b      	ldrh	r3, [r7, #32]
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	8bbb      	ldrh	r3, [r7, #28]
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f7ff feb7 	bl	8004f24 <ST7735_WriteChar>
		x += font.width;
 80051b6:	7d3b      	ldrb	r3, [r7, #20]
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	4413      	add	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
		str++;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	603b      	str	r3, [r7, #0]
	while(*str) {
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1cd      	bne.n	800516a <ST7735_WriteStringNSS+0x30>
 80051ce:	e000      	b.n	80051d2 <ST7735_WriteStringNSS+0x98>
				break;
 80051d0:	bf00      	nop
	}
	if(NSS == 0){
 80051d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 80051da:	f7ff fd8f 	bl	8004cfc <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 80051de:	e005      	b.n	80051ec <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 80051e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 80051e8:	f7ff fda0 	bl	8004d2c <ST7735_Unselect1>
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f6:	b002      	add	sp, #8
 80051f8:	4770      	bx	lr
	...

080051fc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	4604      	mov	r4, r0
 8005204:	4608      	mov	r0, r1
 8005206:	4611      	mov	r1, r2
 8005208:	461a      	mov	r2, r3
 800520a:	4623      	mov	r3, r4
 800520c:	80fb      	strh	r3, [r7, #6]
 800520e:	4603      	mov	r3, r0
 8005210:	80bb      	strh	r3, [r7, #4]
 8005212:	460b      	mov	r3, r1
 8005214:	807b      	strh	r3, [r7, #2]
 8005216:	4613      	mov	r3, r2
 8005218:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b7f      	cmp	r3, #127	; 0x7f
 800521e:	d858      	bhi.n	80052d2 <ST7735_FillRectangle+0xd6>
 8005220:	88bb      	ldrh	r3, [r7, #4]
 8005222:	2b7f      	cmp	r3, #127	; 0x7f
 8005224:	d855      	bhi.n	80052d2 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	887b      	ldrh	r3, [r7, #2]
 800522a:	4413      	add	r3, r2
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	dd03      	ble.n	8005238 <ST7735_FillRectangle+0x3c>
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005236:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8005238:	88ba      	ldrh	r2, [r7, #4]
 800523a:	883b      	ldrh	r3, [r7, #0]
 800523c:	4413      	add	r3, r2
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	dd03      	ble.n	800524a <ST7735_FillRectangle+0x4e>
 8005242:	88bb      	ldrh	r3, [r7, #4]
 8005244:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005248:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 800524a:	f7ff fd4b 	bl	8004ce4 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	b2d8      	uxtb	r0, r3
 8005252:	88bb      	ldrh	r3, [r7, #4]
 8005254:	b2d9      	uxtb	r1, r3
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	4413      	add	r3, r2
 8005260:	b2db      	uxtb	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b2dc      	uxtb	r4, r3
 8005266:	88bb      	ldrh	r3, [r7, #4]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	883b      	ldrh	r3, [r7, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	4413      	add	r3, r2
 8005270:	b2db      	uxtb	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4622      	mov	r2, r4
 8005278:	f7ff fdf9 	bl	8004e6e <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800527c:	8c3b      	ldrh	r3, [r7, #32]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	b29b      	uxth	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	733b      	strb	r3, [r7, #12]
 8005286:	8c3b      	ldrh	r3, [r7, #32]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800528c:	2201      	movs	r2, #1
 800528e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005292:	4812      	ldr	r0, [pc, #72]	; (80052dc <ST7735_FillRectangle+0xe0>)
 8005294:	f003 fe98 	bl	8008fc8 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8005298:	883b      	ldrh	r3, [r7, #0]
 800529a:	80bb      	strh	r3, [r7, #4]
 800529c:	e013      	b.n	80052c6 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 800529e:	887b      	ldrh	r3, [r7, #2]
 80052a0:	80fb      	strh	r3, [r7, #6]
 80052a2:	e00a      	b.n	80052ba <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80052a4:	f107 010c 	add.w	r1, r7, #12
 80052a8:	f04f 33ff 	mov.w	r3, #4294967295
 80052ac:	2202      	movs	r2, #2
 80052ae:	480c      	ldr	r0, [pc, #48]	; (80052e0 <ST7735_FillRectangle+0xe4>)
 80052b0:	f006 fcc6 	bl	800bc40 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	80fb      	strh	r3, [r7, #6]
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f1      	bne.n	80052a4 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 80052c0:	88bb      	ldrh	r3, [r7, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	80bb      	strh	r3, [r7, #4]
 80052c6:	88bb      	ldrh	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e8      	bne.n	800529e <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 80052cc:	f7ff fd16 	bl	8004cfc <ST7735_Unselect>
 80052d0:	e000      	b.n	80052d4 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80052d2:	bf00      	nop
}
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	58021800 	.word	0x58021800
 80052e0:	24000260 	.word	0x24000260

080052e4 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4604      	mov	r4, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	80fb      	strh	r3, [r7, #6]
 80052f6:	4603      	mov	r3, r0
 80052f8:	80bb      	strh	r3, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	807b      	strh	r3, [r7, #2]
 80052fe:	4613      	mov	r3, r2
 8005300:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b7f      	cmp	r3, #127	; 0x7f
 8005306:	d858      	bhi.n	80053ba <ST7735_FillRectangle1+0xd6>
 8005308:	88bb      	ldrh	r3, [r7, #4]
 800530a:	2b7f      	cmp	r3, #127	; 0x7f
 800530c:	d855      	bhi.n	80053ba <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	887b      	ldrh	r3, [r7, #2]
 8005312:	4413      	add	r3, r2
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	dd03      	ble.n	8005320 <ST7735_FillRectangle1+0x3c>
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800531e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8005320:	88ba      	ldrh	r2, [r7, #4]
 8005322:	883b      	ldrh	r3, [r7, #0]
 8005324:	4413      	add	r3, r2
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	dd03      	ble.n	8005332 <ST7735_FillRectangle1+0x4e>
 800532a:	88bb      	ldrh	r3, [r7, #4]
 800532c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005330:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8005332:	f7ff fcef 	bl	8004d14 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	b2d8      	uxtb	r0, r3
 800533a:	88bb      	ldrh	r3, [r7, #4]
 800533c:	b2d9      	uxtb	r1, r3
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	887b      	ldrh	r3, [r7, #2]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	4413      	add	r3, r2
 8005348:	b2db      	uxtb	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b2dc      	uxtb	r4, r3
 800534e:	88bb      	ldrh	r3, [r7, #4]
 8005350:	b2da      	uxtb	r2, r3
 8005352:	883b      	ldrh	r3, [r7, #0]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	4413      	add	r3, r2
 8005358:	b2db      	uxtb	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	4622      	mov	r2, r4
 8005360:	f7ff fd85 	bl	8004e6e <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8005364:	8c3b      	ldrh	r3, [r7, #32]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	b29b      	uxth	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	733b      	strb	r3, [r7, #12]
 800536e:	8c3b      	ldrh	r3, [r7, #32]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005374:	2201      	movs	r2, #1
 8005376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800537a:	4812      	ldr	r0, [pc, #72]	; (80053c4 <ST7735_FillRectangle1+0xe0>)
 800537c:	f003 fe24 	bl	8008fc8 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8005380:	883b      	ldrh	r3, [r7, #0]
 8005382:	80bb      	strh	r3, [r7, #4]
 8005384:	e013      	b.n	80053ae <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8005386:	887b      	ldrh	r3, [r7, #2]
 8005388:	80fb      	strh	r3, [r7, #6]
 800538a:	e00a      	b.n	80053a2 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800538c:	f107 010c 	add.w	r1, r7, #12
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
 8005394:	2202      	movs	r2, #2
 8005396:	480c      	ldr	r0, [pc, #48]	; (80053c8 <ST7735_FillRectangle1+0xe4>)
 8005398:	f006 fc52 	bl	800bc40 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	3b01      	subs	r3, #1
 80053a0:	80fb      	strh	r3, [r7, #6]
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f1      	bne.n	800538c <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 80053a8:	88bb      	ldrh	r3, [r7, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	80bb      	strh	r3, [r7, #4]
 80053ae:	88bb      	ldrh	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e8      	bne.n	8005386 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 80053b4:	f7ff fcba 	bl	8004d2c <ST7735_Unselect1>
 80053b8:	e000      	b.n	80053bc <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80053ba:	bf00      	nop
}
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd90      	pop	{r4, r7, pc}
 80053c2:	bf00      	nop
 80053c4:	58021800 	.word	0x58021800
 80053c8:	24000260 	.word	0x24000260

080053cc <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	461a      	mov	r2, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	80fb      	strh	r3, [r7, #6]
 80053de:	4603      	mov	r3, r0
 80053e0:	80bb      	strh	r3, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	807b      	strh	r3, [r7, #2]
 80053e6:	4613      	mov	r3, r2
 80053e8:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b7f      	cmp	r3, #127	; 0x7f
 80053ee:	d86e      	bhi.n	80054ce <ST7735_FillRectangleNSS+0x102>
 80053f0:	88bb      	ldrh	r3, [r7, #4]
 80053f2:	2b7f      	cmp	r3, #127	; 0x7f
 80053f4:	d86b      	bhi.n	80054ce <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	4413      	add	r3, r2
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	dd03      	ble.n	8005408 <ST7735_FillRectangleNSS+0x3c>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005406:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8005408:	88ba      	ldrh	r2, [r7, #4]
 800540a:	883b      	ldrh	r3, [r7, #0]
 800540c:	4413      	add	r3, r2
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	dd03      	ble.n	800541a <ST7735_FillRectangleNSS+0x4e>
 8005412:	88bb      	ldrh	r3, [r7, #4]
 8005414:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005418:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 800541a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8005422:	f7ff fc5f 	bl	8004ce4 <ST7735_Select>
 8005426:	e005      	b.n	8005434 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8005428:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8005430:	f7ff fc70 	bl	8004d14 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	b2d8      	uxtb	r0, r3
 8005438:	88bb      	ldrh	r3, [r7, #4]
 800543a:	b2d9      	uxtb	r1, r3
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	b2da      	uxtb	r2, r3
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	4413      	add	r3, r2
 8005446:	b2db      	uxtb	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b2dc      	uxtb	r4, r3
 800544c:	88bb      	ldrh	r3, [r7, #4]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	883b      	ldrh	r3, [r7, #0]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	4413      	add	r3, r2
 8005456:	b2db      	uxtb	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	4622      	mov	r2, r4
 800545e:	f7ff fd06 	bl	8004e6e <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8005462:	8c3b      	ldrh	r3, [r7, #32]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	b29b      	uxth	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	733b      	strb	r3, [r7, #12]
 800546c:	8c3b      	ldrh	r3, [r7, #32]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005472:	2201      	movs	r2, #1
 8005474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005478:	4817      	ldr	r0, [pc, #92]	; (80054d8 <ST7735_FillRectangleNSS+0x10c>)
 800547a:	f003 fda5 	bl	8008fc8 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800547e:	883b      	ldrh	r3, [r7, #0]
 8005480:	80bb      	strh	r3, [r7, #4]
 8005482:	e013      	b.n	80054ac <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	80fb      	strh	r3, [r7, #6]
 8005488:	e00a      	b.n	80054a0 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800548a:	f107 010c 	add.w	r1, r7, #12
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
 8005492:	2202      	movs	r2, #2
 8005494:	4811      	ldr	r0, [pc, #68]	; (80054dc <ST7735_FillRectangleNSS+0x110>)
 8005496:	f006 fbd3 	bl	800bc40 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	3b01      	subs	r3, #1
 800549e:	80fb      	strh	r3, [r7, #6]
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f1      	bne.n	800548a <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 80054a6:	88bb      	ldrh	r3, [r7, #4]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	80bb      	strh	r3, [r7, #4]
 80054ac:	88bb      	ldrh	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e8      	bne.n	8005484 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 80054b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 80054ba:	f7ff fc1f 	bl	8004cfc <ST7735_Unselect>
 80054be:	e007      	b.n	80054d0 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 80054c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d103      	bne.n	80054d0 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 80054c8:	f7ff fc30 	bl	8004d2c <ST7735_Unselect1>
 80054cc:	e000      	b.n	80054d0 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80054ce:	bf00      	nop
	}
}
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd90      	pop	{r4, r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58021800 	.word	0x58021800
 80054dc:	24000260 	.word	0x24000260

080054e0 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	2280      	movs	r2, #128	; 0x80
 80054f2:	2100      	movs	r1, #0
 80054f4:	2000      	movs	r0, #0
 80054f6:	f7ff fe81 	bl	80051fc <ST7735_FillRectangle>
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af02      	add	r7, sp, #8
 8005508:	4603      	mov	r3, r0
 800550a:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	2280      	movs	r2, #128	; 0x80
 8005514:	2100      	movs	r1, #0
 8005516:	2000      	movs	r0, #0
 8005518:	f7ff fee4 	bl	80052e4 <ST7735_FillRectangle1>
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_MspInit+0x30>)
 800552c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005530:	4a08      	ldr	r2, [pc, #32]	; (8005554 <HAL_MspInit+0x30>)
 8005532:	f043 0302 	orr.w	r3, r3, #2
 8005536:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_MspInit+0x30>)
 800553c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	607b      	str	r3, [r7, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	58024400 	.word	0x58024400

08005558 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08e      	sub	sp, #56	; 0x38
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a59      	ldr	r2, [pc, #356]	; (80056dc <HAL_ETH_MspInit+0x184>)
 8005576:	4293      	cmp	r3, r2
 8005578:	f040 80ab 	bne.w	80056d2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800557c:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 800557e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005582:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800558c:	4b54      	ldr	r3, [pc, #336]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 800558e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800559a:	4b51      	ldr	r3, [pc, #324]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 800559c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055a0:	4a4f      	ldr	r2, [pc, #316]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80055aa:	4b4d      	ldr	r3, [pc, #308]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80055b8:	4b49      	ldr	r3, [pc, #292]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055be:	4a48      	ldr	r2, [pc, #288]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80055c8:	4b45      	ldr	r3, [pc, #276]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055d6:	4b42      	ldr	r3, [pc, #264]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055dc:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055de:	f043 0304 	orr.w	r3, r3, #4
 80055e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f4:	4b3a      	ldr	r3, [pc, #232]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055fa:	4a39      	ldr	r2, [pc, #228]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005604:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 8005606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005612:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 8005614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005618:	4a31      	ldr	r2, [pc, #196]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005622:	4b2f      	ldr	r3, [pc, #188]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 8005624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 8005632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005636:	4a2a      	ldr	r2, [pc, #168]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 8005638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005640:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <HAL_ETH_MspInit+0x188>)
 8005642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800564e:	2332      	movs	r3, #50	; 0x32
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005652:	2302      	movs	r3, #2
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	2300      	movs	r3, #0
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565a:	2300      	movs	r3, #0
 800565c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800565e:	230b      	movs	r3, #11
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005666:	4619      	mov	r1, r3
 8005668:	481e      	ldr	r0, [pc, #120]	; (80056e4 <HAL_ETH_MspInit+0x18c>)
 800566a:	f003 fae5 	bl	8008c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800566e:	2386      	movs	r3, #134	; 0x86
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005672:	2302      	movs	r3, #2
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005676:	2300      	movs	r3, #0
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567a:	2300      	movs	r3, #0
 800567c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800567e:	230b      	movs	r3, #11
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005686:	4619      	mov	r1, r3
 8005688:	4817      	ldr	r0, [pc, #92]	; (80056e8 <HAL_ETH_MspInit+0x190>)
 800568a:	f003 fad5 	bl	8008c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800568e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005694:	2302      	movs	r3, #2
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005698:	2300      	movs	r3, #0
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569c:	2300      	movs	r3, #0
 800569e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056a0:	230b      	movs	r3, #11
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a8:	4619      	mov	r1, r3
 80056aa:	4810      	ldr	r0, [pc, #64]	; (80056ec <HAL_ETH_MspInit+0x194>)
 80056ac:	f003 fac4 	bl	8008c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80056b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b6:	2302      	movs	r3, #2
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056be:	2300      	movs	r3, #0
 80056c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056c2:	230b      	movs	r3, #11
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ca:	4619      	mov	r1, r3
 80056cc:	4808      	ldr	r0, [pc, #32]	; (80056f0 <HAL_ETH_MspInit+0x198>)
 80056ce:	f003 fab3 	bl	8008c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80056d2:	bf00      	nop
 80056d4:	3738      	adds	r7, #56	; 0x38
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40028000 	.word	0x40028000
 80056e0:	58024400 	.word	0x58024400
 80056e4:	58020800 	.word	0x58020800
 80056e8:	58020000 	.word	0x58020000
 80056ec:	58020400 	.word	0x58020400
 80056f0:	58021800 	.word	0x58021800

080056f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08a      	sub	sp, #40	; 0x28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056fc:	f107 0314 	add.w	r3, r7, #20
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2a      	ldr	r2, [pc, #168]	; (80057bc <HAL_SPI_MspInit+0xc8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d14d      	bne.n	80057b2 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005716:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 8005718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800571c:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 800571e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005722:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005726:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 8005728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800572c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005734:	4b22      	ldr	r3, [pc, #136]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 8005736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800573a:	4a21      	ldr	r2, [pc, #132]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005744:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 8005746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 8005754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005762:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <HAL_SPI_MspInit+0xcc>)
 8005764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005770:	2304      	movs	r3, #4
 8005772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005774:	2302      	movs	r3, #2
 8005776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005778:	2302      	movs	r3, #2
 800577a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577c:	2300      	movs	r3, #0
 800577e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005780:	2307      	movs	r3, #7
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4619      	mov	r1, r3
 800578a:	480e      	ldr	r0, [pc, #56]	; (80057c4 <HAL_SPI_MspInit+0xd0>)
 800578c:	f003 fa54 	bl	8008c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005796:	2302      	movs	r3, #2
 8005798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800579a:	2302      	movs	r3, #2
 800579c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579e:	2300      	movs	r3, #0
 80057a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057a2:	2306      	movs	r3, #6
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a6:	f107 0314 	add.w	r3, r7, #20
 80057aa:	4619      	mov	r1, r3
 80057ac:	4806      	ldr	r0, [pc, #24]	; (80057c8 <HAL_SPI_MspInit+0xd4>)
 80057ae:	f003 fa43 	bl	8008c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80057b2:	bf00      	nop
 80057b4:	3728      	adds	r7, #40	; 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40003c00 	.word	0x40003c00
 80057c0:	58024400 	.word	0x58024400
 80057c4:	58020400 	.word	0x58020400
 80057c8:	58020800 	.word	0x58020800

080057cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <HAL_TIM_Base_MspInit+0x48>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d116      	bne.n	800580c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <HAL_TIM_Base_MspInit+0x4c>)
 80057e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057e4:	4a0c      	ldr	r2, [pc, #48]	; (8005818 <HAL_TIM_Base_MspInit+0x4c>)
 80057e6:	f043 0320 	orr.w	r3, r3, #32
 80057ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <HAL_TIM_Base_MspInit+0x4c>)
 80057f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	2100      	movs	r1, #0
 8005800:	2037      	movs	r0, #55	; 0x37
 8005802:	f000 fb9a 	bl	8005f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005806:	2037      	movs	r0, #55	; 0x37
 8005808:	f000 fbb1 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40001400 	.word	0x40001400
 8005818:	58024400 	.word	0x58024400

0800581c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b0b8      	sub	sp, #224	; 0xe0
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005824:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005834:	f107 0310 	add.w	r3, r7, #16
 8005838:	22bc      	movs	r2, #188	; 0xbc
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f009 f88d 	bl	800e95c <memset>
  if(huart->Instance==USART3)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a57      	ldr	r2, [pc, #348]	; (80059a4 <HAL_UART_MspInit+0x188>)
 8005848:	4293      	cmp	r3, r2
 800584a:	f040 80a6 	bne.w	800599a <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800584e:	2302      	movs	r3, #2
 8005850:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005852:	2300      	movs	r3, #0
 8005854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005858:	f107 0310 	add.w	r3, r7, #16
 800585c:	4618      	mov	r0, r3
 800585e:	f004 fd81 	bl	800a364 <HAL_RCCEx_PeriphCLKConfig>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005868:	f7ff fa36 	bl	8004cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800586c:	4b4e      	ldr	r3, [pc, #312]	; (80059a8 <HAL_UART_MspInit+0x18c>)
 800586e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005872:	4a4d      	ldr	r2, [pc, #308]	; (80059a8 <HAL_UART_MspInit+0x18c>)
 8005874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005878:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800587c:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <HAL_UART_MspInit+0x18c>)
 800587e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_UART_MspInit+0x18c>)
 800588c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005890:	4a45      	ldr	r2, [pc, #276]	; (80059a8 <HAL_UART_MspInit+0x18c>)
 8005892:	f043 0308 	orr.w	r3, r3, #8
 8005896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800589a:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_UART_MspInit+0x18c>)
 800589c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80058a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b0:	2302      	movs	r3, #2
 80058b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058c2:	2307      	movs	r3, #7
 80058c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80058cc:	4619      	mov	r1, r3
 80058ce:	4837      	ldr	r0, [pc, #220]	; (80059ac <HAL_UART_MspInit+0x190>)
 80058d0:	f003 f9b2 	bl	8008c38 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <HAL_UART_MspInit+0x194>)
 80058d6:	4a37      	ldr	r2, [pc, #220]	; (80059b4 <HAL_UART_MspInit+0x198>)
 80058d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80058da:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <HAL_UART_MspInit+0x194>)
 80058dc:	222d      	movs	r2, #45	; 0x2d
 80058de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058e0:	4b33      	ldr	r3, [pc, #204]	; (80059b0 <HAL_UART_MspInit+0x194>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058e6:	4b32      	ldr	r3, [pc, #200]	; (80059b0 <HAL_UART_MspInit+0x194>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058ec:	4b30      	ldr	r3, [pc, #192]	; (80059b0 <HAL_UART_MspInit+0x194>)
 80058ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058f4:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <HAL_UART_MspInit+0x194>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058fa:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <HAL_UART_MspInit+0x194>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005900:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <HAL_UART_MspInit+0x194>)
 8005902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005906:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005908:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <HAL_UART_MspInit+0x194>)
 800590a:	2200      	movs	r2, #0
 800590c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800590e:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <HAL_UART_MspInit+0x194>)
 8005910:	2200      	movs	r2, #0
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005914:	4826      	ldr	r0, [pc, #152]	; (80059b0 <HAL_UART_MspInit+0x194>)
 8005916:	f000 fb45 	bl	8005fa4 <HAL_DMA_Init>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005920:	f7ff f9da 	bl	8004cd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <HAL_UART_MspInit+0x194>)
 8005928:	67da      	str	r2, [r3, #124]	; 0x7c
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <HAL_UART_MspInit+0x194>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8005930:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005932:	4a22      	ldr	r2, [pc, #136]	; (80059bc <HAL_UART_MspInit+0x1a0>)
 8005934:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005938:	222e      	movs	r2, #46	; 0x2e
 800593a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800593c:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 800593e:	2240      	movs	r2, #64	; 0x40
 8005940:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005944:	2200      	movs	r2, #0
 8005946:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 800594a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800594e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005950:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005952:	2200      	movs	r2, #0
 8005954:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005958:	2200      	movs	r2, #0
 800595a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 800595e:	2200      	movs	r2, #0
 8005960:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005964:	2200      	movs	r2, #0
 8005966:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 800596a:	2200      	movs	r2, #0
 800596c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800596e:	4812      	ldr	r0, [pc, #72]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005970:	f000 fb18 	bl	8005fa4 <HAL_DMA_Init>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800597a:	f7ff f9ad 	bl	8004cd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a0d      	ldr	r2, [pc, #52]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005982:	679a      	str	r2, [r3, #120]	; 0x78
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <HAL_UART_MspInit+0x19c>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800598a:	2200      	movs	r2, #0
 800598c:	2100      	movs	r1, #0
 800598e:	2027      	movs	r0, #39	; 0x27
 8005990:	f000 fad3 	bl	8005f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005994:	2027      	movs	r0, #39	; 0x27
 8005996:	f000 faea 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800599a:	bf00      	nop
 800599c:	37e0      	adds	r7, #224	; 0xe0
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40004800 	.word	0x40004800
 80059a8:	58024400 	.word	0x58024400
 80059ac:	58020c00 	.word	0x58020c00
 80059b0:	240003c4 	.word	0x240003c4
 80059b4:	40020028 	.word	0x40020028
 80059b8:	2400043c 	.word	0x2400043c
 80059bc:	40020070 	.word	0x40020070

080059c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	; 0x28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c8:	f107 0314 	add.w	r3, r7, #20
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_PCD_MspInit+0xa8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d13d      	bne.n	8005a5e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80059e2:	f003 fcf5 	bl	80093d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e6:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <HAL_PCD_MspInit+0xac>)
 80059e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ec:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <HAL_PCD_MspInit+0xac>)
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059f6:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_PCD_MspInit+0xac>)
 80059f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8005a04:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a12:	2300      	movs	r3, #0
 8005a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005a16:	230a      	movs	r3, #10
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4813      	ldr	r0, [pc, #76]	; (8005a70 <HAL_PCD_MspInit+0xb0>)
 8005a22:	f003 f909 	bl	8008c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	4619      	mov	r1, r3
 8005a3a:	480d      	ldr	r0, [pc, #52]	; (8005a70 <HAL_PCD_MspInit+0xb0>)
 8005a3c:	f003 f8fc 	bl	8008c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <HAL_PCD_MspInit+0xac>)
 8005a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <HAL_PCD_MspInit+0xac>)
 8005a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <HAL_PCD_MspInit+0xac>)
 8005a52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005a5e:	bf00      	nop
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40080000 	.word	0x40080000
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	58020000 	.word	0x58020000

08005a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a78:	e7fe      	b.n	8005a78 <NMI_Handler+0x4>

08005a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a7e:	e7fe      	b.n	8005a7e <HardFault_Handler+0x4>

08005a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a84:	e7fe      	b.n	8005a84 <MemManage_Handler+0x4>

08005a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a86:	b480      	push	{r7}
 8005a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a8a:	e7fe      	b.n	8005a8a <BusFault_Handler+0x4>

08005a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a90:	e7fe      	b.n	8005a90 <UsageFault_Handler+0x4>

08005a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ab2:	bf00      	nop
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ac0:	f000 f8fc 	bl	8005cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ac4:	bf00      	nop
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005acc:	4802      	ldr	r0, [pc, #8]	; (8005ad8 <DMA1_Stream1_IRQHandler+0x10>)
 8005ace:	f001 fb29 	bl	8007124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	240003c4 	.word	0x240003c4

08005adc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005ae0:	4802      	ldr	r0, [pc, #8]	; (8005aec <DMA1_Stream4_IRQHandler+0x10>)
 8005ae2:	f001 fb1f 	bl	8007124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	2400043c 	.word	0x2400043c

08005af0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005af4:	4802      	ldr	r0, [pc, #8]	; (8005b00 <USART3_IRQHandler+0x10>)
 8005af6:	f006 ff59 	bl	800c9ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	24000334 	.word	0x24000334

08005b04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005b08:	4802      	ldr	r0, [pc, #8]	; (8005b14 <TIM7_IRQHandler+0x10>)
 8005b0a:	f006 fc72 	bl	800c3f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	240002e8 	.word	0x240002e8

08005b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b20:	4a14      	ldr	r2, [pc, #80]	; (8005b74 <_sbrk+0x5c>)
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <_sbrk+0x60>)
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b2c:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <_sbrk+0x64>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <_sbrk+0x64>)
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <_sbrk+0x68>)
 8005b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b3a:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <_sbrk+0x64>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d207      	bcs.n	8005b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b48:	f008 fede 	bl	800e908 <__errno>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	220c      	movs	r2, #12
 8005b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	e009      	b.n	8005b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b58:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <_sbrk+0x64>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <_sbrk+0x64>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <_sbrk+0x64>)
 8005b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	24080000 	.word	0x24080000
 8005b78:	00000400 	.word	0x00000400
 8005b7c:	24000eb0 	.word	0x24000eb0
 8005b80:	24000ec8 	.word	0x24000ec8

08005b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b88:	f7fe fc0e 	bl	80043a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b8c:	480c      	ldr	r0, [pc, #48]	; (8005bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b8e:	490d      	ldr	r1, [pc, #52]	; (8005bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b90:	4a0d      	ldr	r2, [pc, #52]	; (8005bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b94:	e002      	b.n	8005b9c <LoopCopyDataInit>

08005b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b9a:	3304      	adds	r3, #4

08005b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ba0:	d3f9      	bcc.n	8005b96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ba4:	4c0a      	ldr	r4, [pc, #40]	; (8005bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ba8:	e001      	b.n	8005bae <LoopFillZerobss>

08005baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bac:	3204      	adds	r2, #4

08005bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bb0:	d3fb      	bcc.n	8005baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bb2:	f008 feaf 	bl	800e914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bb6:	f7fe fc8d 	bl	80044d4 <main>
  bx  lr
 8005bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005bbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005bc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005bc4:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8005bc8:	08010c30 	.word	0x08010c30
  ldr r2, =_sbss
 8005bcc:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8005bd0:	24000ec8 	.word	0x24000ec8

08005bd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bd4:	e7fe      	b.n	8005bd4 <ADC3_IRQHandler>
	...

08005bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bde:	2003      	movs	r0, #3
 8005be0:	f000 f9a0 	bl	8005f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005be4:	f004 f9e8 	bl	8009fb8 <HAL_RCC_GetSysClockFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_Init+0x68>)
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	4913      	ldr	r1, [pc, #76]	; (8005c44 <HAL_Init+0x6c>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <HAL_Init+0x68>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	4a0e      	ldr	r2, [pc, #56]	; (8005c44 <HAL_Init+0x6c>)
 8005c0c:	5cd3      	ldrb	r3, [r2, r3]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <HAL_Init+0x70>)
 8005c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c1c:	4a0b      	ldr	r2, [pc, #44]	; (8005c4c <HAL_Init+0x74>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c22:	2000      	movs	r0, #0
 8005c24:	f000 f814 	bl	8005c50 <HAL_InitTick>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e002      	b.n	8005c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005c32:	f7ff fc77 	bl	8005524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	0800f66c 	.word	0x0800f66c
 8005c48:	24000008 	.word	0x24000008
 8005c4c:	24000004 	.word	0x24000004

08005c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <HAL_InitTick+0x60>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e021      	b.n	8005ca8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <HAL_InitTick+0x64>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <HAL_InitTick+0x60>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f985 	bl	8005f8a <HAL_SYSTICK_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e00e      	b.n	8005ca8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d80a      	bhi.n	8005ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c90:	2200      	movs	r2, #0
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	f000 f94f 	bl	8005f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c9c:	4a06      	ldr	r2, [pc, #24]	; (8005cb8 <HAL_InitTick+0x68>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e000      	b.n	8005ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	24000020 	.word	0x24000020
 8005cb4:	24000004 	.word	0x24000004
 8005cb8:	2400001c 	.word	0x2400001c

08005cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_IncTick+0x20>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_IncTick+0x24>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4413      	add	r3, r2
 8005ccc:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <HAL_IncTick+0x24>)
 8005cce:	6013      	str	r3, [r2, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	24000020 	.word	0x24000020
 8005ce0:	24000eb4 	.word	0x24000eb4

08005ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_GetTick+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	24000eb4 	.word	0x24000eb4

08005cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d04:	f7ff ffee 	bl	8005ce4 <HAL_GetTick>
 8005d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d005      	beq.n	8005d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d16:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <HAL_Delay+0x44>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d22:	bf00      	nop
 8005d24:	f7ff ffde 	bl	8005ce4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d8f7      	bhi.n	8005d24 <HAL_Delay+0x28>
  {
  }
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	24000020 	.word	0x24000020

08005d44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <HAL_GetREVID+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0c1b      	lsrs	r3, r3, #16
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	5c001000 	.word	0x5c001000

08005d5c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005d6c:	4904      	ldr	r1, [pc, #16]	; (8005d80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	604b      	str	r3, [r1, #4]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	58000400 	.word	0x58000400

08005d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005da0:	4013      	ands	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005db2:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	60d3      	str	r3, [r2, #12]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000ed00 	.word	0xe000ed00
 8005dc8:	05fa0000 	.word	0x05fa0000

08005dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <__NVIC_GetPriorityGrouping+0x18>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	f003 0307 	and.w	r3, r3, #7
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	e000ed00 	.word	0xe000ed00

08005de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	db0b      	blt.n	8005e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	f003 021f 	and.w	r2, r3, #31
 8005e00:	4907      	ldr	r1, [pc, #28]	; (8005e20 <__NVIC_EnableIRQ+0x38>)
 8005e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	2001      	movs	r0, #1
 8005e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e100 	.word	0xe000e100

08005e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	6039      	str	r1, [r7, #0]
 8005e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	db0a      	blt.n	8005e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	490c      	ldr	r1, [pc, #48]	; (8005e70 <__NVIC_SetPriority+0x4c>)
 8005e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e42:	0112      	lsls	r2, r2, #4
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	440b      	add	r3, r1
 8005e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e4c:	e00a      	b.n	8005e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	4908      	ldr	r1, [pc, #32]	; (8005e74 <__NVIC_SetPriority+0x50>)
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	3b04      	subs	r3, #4
 8005e5c:	0112      	lsls	r2, r2, #4
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	440b      	add	r3, r1
 8005e62:	761a      	strb	r2, [r3, #24]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	e000e100 	.word	0xe000e100
 8005e74:	e000ed00 	.word	0xe000ed00

08005e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	; 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f1c3 0307 	rsb	r3, r3, #7
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	bf28      	it	cs
 8005e96:	2304      	movcs	r3, #4
 8005e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d902      	bls.n	8005ea8 <NVIC_EncodePriority+0x30>
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3b03      	subs	r3, #3
 8005ea6:	e000      	b.n	8005eaa <NVIC_EncodePriority+0x32>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eac:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43da      	mvns	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	401a      	ands	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eca:	43d9      	mvns	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed0:	4313      	orrs	r3, r2
         );
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3724      	adds	r7, #36	; 0x24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ef0:	d301      	bcc.n	8005ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e00f      	b.n	8005f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ef6:	4a0a      	ldr	r2, [pc, #40]	; (8005f20 <SysTick_Config+0x40>)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005efe:	210f      	movs	r1, #15
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	f7ff ff8e 	bl	8005e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <SysTick_Config+0x40>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f0e:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <SysTick_Config+0x40>)
 8005f10:	2207      	movs	r2, #7
 8005f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000e010 	.word	0xe000e010

08005f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff29 	bl	8005d84 <__NVIC_SetPriorityGrouping>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	4603      	mov	r3, r0
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f48:	f7ff ff40 	bl	8005dcc <__NVIC_GetPriorityGrouping>
 8005f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7ff ff90 	bl	8005e78 <NVIC_EncodePriority>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff ff5f 	bl	8005e24 <__NVIC_SetPriority>
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4603      	mov	r3, r0
 8005f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff33 	bl	8005de8 <__NVIC_EnableIRQ>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ffa4 	bl	8005ee0 <SysTick_Config>
 8005f98:	4603      	mov	r3, r0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005fac:	f7ff fe9a 	bl	8005ce4 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e316      	b.n	80065ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a66      	ldr	r2, [pc, #408]	; (800615c <HAL_DMA_Init+0x1b8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d04a      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a65      	ldr	r2, [pc, #404]	; (8006160 <HAL_DMA_Init+0x1bc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d045      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a63      	ldr	r2, [pc, #396]	; (8006164 <HAL_DMA_Init+0x1c0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d040      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a62      	ldr	r2, [pc, #392]	; (8006168 <HAL_DMA_Init+0x1c4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d03b      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a60      	ldr	r2, [pc, #384]	; (800616c <HAL_DMA_Init+0x1c8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d036      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a5f      	ldr	r2, [pc, #380]	; (8006170 <HAL_DMA_Init+0x1cc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d031      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5d      	ldr	r2, [pc, #372]	; (8006174 <HAL_DMA_Init+0x1d0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02c      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a5c      	ldr	r2, [pc, #368]	; (8006178 <HAL_DMA_Init+0x1d4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d027      	beq.n	800605c <HAL_DMA_Init+0xb8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a5a      	ldr	r2, [pc, #360]	; (800617c <HAL_DMA_Init+0x1d8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d022      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a59      	ldr	r2, [pc, #356]	; (8006180 <HAL_DMA_Init+0x1dc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d01d      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a57      	ldr	r2, [pc, #348]	; (8006184 <HAL_DMA_Init+0x1e0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d018      	beq.n	800605c <HAL_DMA_Init+0xb8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a56      	ldr	r2, [pc, #344]	; (8006188 <HAL_DMA_Init+0x1e4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <HAL_DMA_Init+0x1e8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00e      	beq.n	800605c <HAL_DMA_Init+0xb8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a53      	ldr	r2, [pc, #332]	; (8006190 <HAL_DMA_Init+0x1ec>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d009      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a51      	ldr	r2, [pc, #324]	; (8006194 <HAL_DMA_Init+0x1f0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_DMA_Init+0xb8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a50      	ldr	r2, [pc, #320]	; (8006198 <HAL_DMA_Init+0x1f4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d101      	bne.n	8006060 <HAL_DMA_Init+0xbc>
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <HAL_DMA_Init+0xbe>
 8006060:	2300      	movs	r3, #0
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 813b 	beq.w	80062de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a37      	ldr	r2, [pc, #220]	; (800615c <HAL_DMA_Init+0x1b8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d04a      	beq.n	8006118 <HAL_DMA_Init+0x174>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a36      	ldr	r2, [pc, #216]	; (8006160 <HAL_DMA_Init+0x1bc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d045      	beq.n	8006118 <HAL_DMA_Init+0x174>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a34      	ldr	r2, [pc, #208]	; (8006164 <HAL_DMA_Init+0x1c0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d040      	beq.n	8006118 <HAL_DMA_Init+0x174>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a33      	ldr	r2, [pc, #204]	; (8006168 <HAL_DMA_Init+0x1c4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d03b      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a31      	ldr	r2, [pc, #196]	; (800616c <HAL_DMA_Init+0x1c8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d036      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a30      	ldr	r2, [pc, #192]	; (8006170 <HAL_DMA_Init+0x1cc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d031      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2e      	ldr	r2, [pc, #184]	; (8006174 <HAL_DMA_Init+0x1d0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d02c      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2d      	ldr	r2, [pc, #180]	; (8006178 <HAL_DMA_Init+0x1d4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d027      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2b      	ldr	r2, [pc, #172]	; (800617c <HAL_DMA_Init+0x1d8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d022      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2a      	ldr	r2, [pc, #168]	; (8006180 <HAL_DMA_Init+0x1dc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d01d      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a28      	ldr	r2, [pc, #160]	; (8006184 <HAL_DMA_Init+0x1e0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d018      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a27      	ldr	r2, [pc, #156]	; (8006188 <HAL_DMA_Init+0x1e4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a25      	ldr	r2, [pc, #148]	; (800618c <HAL_DMA_Init+0x1e8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <HAL_DMA_Init+0x174>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a24      	ldr	r2, [pc, #144]	; (8006190 <HAL_DMA_Init+0x1ec>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <HAL_DMA_Init+0x174>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <HAL_DMA_Init+0x1f0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_DMA_Init+0x174>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a21      	ldr	r2, [pc, #132]	; (8006198 <HAL_DMA_Init+0x1f4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d108      	bne.n	800612a <HAL_DMA_Init+0x186>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	e007      	b.n	800613a <HAL_DMA_Init+0x196>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800613a:	e02f      	b.n	800619c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800613c:	f7ff fdd2 	bl	8005ce4 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b05      	cmp	r3, #5
 8006148:	d928      	bls.n	800619c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2203      	movs	r2, #3
 8006154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e246      	b.n	80065ea <HAL_DMA_Init+0x646>
 800615c:	40020010 	.word	0x40020010
 8006160:	40020028 	.word	0x40020028
 8006164:	40020040 	.word	0x40020040
 8006168:	40020058 	.word	0x40020058
 800616c:	40020070 	.word	0x40020070
 8006170:	40020088 	.word	0x40020088
 8006174:	400200a0 	.word	0x400200a0
 8006178:	400200b8 	.word	0x400200b8
 800617c:	40020410 	.word	0x40020410
 8006180:	40020428 	.word	0x40020428
 8006184:	40020440 	.word	0x40020440
 8006188:	40020458 	.word	0x40020458
 800618c:	40020470 	.word	0x40020470
 8006190:	40020488 	.word	0x40020488
 8006194:	400204a0 	.word	0x400204a0
 8006198:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1c8      	bne.n	800613c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4b83      	ldr	r3, [pc, #524]	; (80063c4 <HAL_DMA_Init+0x420>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80061c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d107      	bne.n	8006200 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	4313      	orrs	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006200:	4b71      	ldr	r3, [pc, #452]	; (80063c8 <HAL_DMA_Init+0x424>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4b71      	ldr	r3, [pc, #452]	; (80063cc <HAL_DMA_Init+0x428>)
 8006206:	4013      	ands	r3, r2
 8006208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800620c:	d328      	bcc.n	8006260 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b28      	cmp	r3, #40	; 0x28
 8006214:	d903      	bls.n	800621e <HAL_DMA_Init+0x27a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b2e      	cmp	r3, #46	; 0x2e
 800621c:	d917      	bls.n	800624e <HAL_DMA_Init+0x2aa>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b3e      	cmp	r3, #62	; 0x3e
 8006224:	d903      	bls.n	800622e <HAL_DMA_Init+0x28a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b42      	cmp	r3, #66	; 0x42
 800622c:	d90f      	bls.n	800624e <HAL_DMA_Init+0x2aa>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b46      	cmp	r3, #70	; 0x46
 8006234:	d903      	bls.n	800623e <HAL_DMA_Init+0x29a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b48      	cmp	r3, #72	; 0x48
 800623c:	d907      	bls.n	800624e <HAL_DMA_Init+0x2aa>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b4e      	cmp	r3, #78	; 0x4e
 8006244:	d905      	bls.n	8006252 <HAL_DMA_Init+0x2ae>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b52      	cmp	r3, #82	; 0x52
 800624c:	d801      	bhi.n	8006252 <HAL_DMA_Init+0x2ae>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <HAL_DMA_Init+0x2b0>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800625e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 0307 	bic.w	r3, r3, #7
 8006276:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b04      	cmp	r3, #4
 8006288:	d117      	bne.n	80062ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 ff1d 	bl	80080dc <DMA_CheckFifoParam>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2240      	movs	r2, #64	; 0x40
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e197      	b.n	80065ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f001 fe58 	bl	8007f78 <DMA_CalcBaseAndBitshift>
 80062c8:	4603      	mov	r3, r0
 80062ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	223f      	movs	r2, #63	; 0x3f
 80062d6:	409a      	lsls	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	e0cd      	b.n	800647a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a3b      	ldr	r2, [pc, #236]	; (80063d0 <HAL_DMA_Init+0x42c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d022      	beq.n	800632e <HAL_DMA_Init+0x38a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a39      	ldr	r2, [pc, #228]	; (80063d4 <HAL_DMA_Init+0x430>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01d      	beq.n	800632e <HAL_DMA_Init+0x38a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a38      	ldr	r2, [pc, #224]	; (80063d8 <HAL_DMA_Init+0x434>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d018      	beq.n	800632e <HAL_DMA_Init+0x38a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a36      	ldr	r2, [pc, #216]	; (80063dc <HAL_DMA_Init+0x438>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <HAL_DMA_Init+0x38a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a35      	ldr	r2, [pc, #212]	; (80063e0 <HAL_DMA_Init+0x43c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00e      	beq.n	800632e <HAL_DMA_Init+0x38a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a33      	ldr	r2, [pc, #204]	; (80063e4 <HAL_DMA_Init+0x440>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_DMA_Init+0x38a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a32      	ldr	r2, [pc, #200]	; (80063e8 <HAL_DMA_Init+0x444>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d004      	beq.n	800632e <HAL_DMA_Init+0x38a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a30      	ldr	r2, [pc, #192]	; (80063ec <HAL_DMA_Init+0x448>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d101      	bne.n	8006332 <HAL_DMA_Init+0x38e>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <HAL_DMA_Init+0x390>
 8006332:	2300      	movs	r3, #0
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8097 	beq.w	8006468 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a24      	ldr	r2, [pc, #144]	; (80063d0 <HAL_DMA_Init+0x42c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d021      	beq.n	8006388 <HAL_DMA_Init+0x3e4>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a22      	ldr	r2, [pc, #136]	; (80063d4 <HAL_DMA_Init+0x430>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01c      	beq.n	8006388 <HAL_DMA_Init+0x3e4>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <HAL_DMA_Init+0x434>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d017      	beq.n	8006388 <HAL_DMA_Init+0x3e4>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <HAL_DMA_Init+0x438>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d012      	beq.n	8006388 <HAL_DMA_Init+0x3e4>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1e      	ldr	r2, [pc, #120]	; (80063e0 <HAL_DMA_Init+0x43c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00d      	beq.n	8006388 <HAL_DMA_Init+0x3e4>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <HAL_DMA_Init+0x440>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d008      	beq.n	8006388 <HAL_DMA_Init+0x3e4>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <HAL_DMA_Init+0x444>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <HAL_DMA_Init+0x3e4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a19      	ldr	r2, [pc, #100]	; (80063ec <HAL_DMA_Init+0x448>)
 8006386:	4293      	cmp	r3, r2
 8006388:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <HAL_DMA_Init+0x44c>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d020      	beq.n	80063f4 <HAL_DMA_Init+0x450>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d102      	bne.n	80063c0 <HAL_DMA_Init+0x41c>
 80063ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063be:	e01a      	b.n	80063f6 <HAL_DMA_Init+0x452>
 80063c0:	2300      	movs	r3, #0
 80063c2:	e018      	b.n	80063f6 <HAL_DMA_Init+0x452>
 80063c4:	fe10803f 	.word	0xfe10803f
 80063c8:	5c001000 	.word	0x5c001000
 80063cc:	ffff0000 	.word	0xffff0000
 80063d0:	58025408 	.word	0x58025408
 80063d4:	5802541c 	.word	0x5802541c
 80063d8:	58025430 	.word	0x58025430
 80063dc:	58025444 	.word	0x58025444
 80063e0:	58025458 	.word	0x58025458
 80063e4:	5802546c 	.word	0x5802546c
 80063e8:	58025480 	.word	0x58025480
 80063ec:	58025494 	.word	0x58025494
 80063f0:	fffe000f 	.word	0xfffe000f
 80063f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68d2      	ldr	r2, [r2, #12]
 80063fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006404:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800640c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006414:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800641c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006424:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	4b6e      	ldr	r3, [pc, #440]	; (80065f4 <HAL_DMA_Init+0x650>)
 800643c:	4413      	add	r3, r2
 800643e:	4a6e      	ldr	r2, [pc, #440]	; (80065f8 <HAL_DMA_Init+0x654>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	091b      	lsrs	r3, r3, #4
 8006446:	009a      	lsls	r2, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fd93 	bl	8007f78 <DMA_CalcBaseAndBitshift>
 8006452:	4603      	mov	r3, r0
 8006454:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2201      	movs	r2, #1
 8006460:	409a      	lsls	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	e008      	b.n	800647a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2240      	movs	r2, #64	; 0x40
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2203      	movs	r2, #3
 8006472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e0b7      	b.n	80065ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a5f      	ldr	r2, [pc, #380]	; (80065fc <HAL_DMA_Init+0x658>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d072      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a5d      	ldr	r2, [pc, #372]	; (8006600 <HAL_DMA_Init+0x65c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d06d      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a5c      	ldr	r2, [pc, #368]	; (8006604 <HAL_DMA_Init+0x660>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d068      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a5a      	ldr	r2, [pc, #360]	; (8006608 <HAL_DMA_Init+0x664>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d063      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a59      	ldr	r2, [pc, #356]	; (800660c <HAL_DMA_Init+0x668>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d05e      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a57      	ldr	r2, [pc, #348]	; (8006610 <HAL_DMA_Init+0x66c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d059      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a56      	ldr	r2, [pc, #344]	; (8006614 <HAL_DMA_Init+0x670>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d054      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a54      	ldr	r2, [pc, #336]	; (8006618 <HAL_DMA_Init+0x674>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d04f      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a53      	ldr	r2, [pc, #332]	; (800661c <HAL_DMA_Init+0x678>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d04a      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a51      	ldr	r2, [pc, #324]	; (8006620 <HAL_DMA_Init+0x67c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d045      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a50      	ldr	r2, [pc, #320]	; (8006624 <HAL_DMA_Init+0x680>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d040      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a4e      	ldr	r2, [pc, #312]	; (8006628 <HAL_DMA_Init+0x684>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d03b      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a4d      	ldr	r2, [pc, #308]	; (800662c <HAL_DMA_Init+0x688>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d036      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a4b      	ldr	r2, [pc, #300]	; (8006630 <HAL_DMA_Init+0x68c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d031      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4a      	ldr	r2, [pc, #296]	; (8006634 <HAL_DMA_Init+0x690>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d02c      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a48      	ldr	r2, [pc, #288]	; (8006638 <HAL_DMA_Init+0x694>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d027      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a47      	ldr	r2, [pc, #284]	; (800663c <HAL_DMA_Init+0x698>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a45      	ldr	r2, [pc, #276]	; (8006640 <HAL_DMA_Init+0x69c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01d      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a44      	ldr	r2, [pc, #272]	; (8006644 <HAL_DMA_Init+0x6a0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a42      	ldr	r2, [pc, #264]	; (8006648 <HAL_DMA_Init+0x6a4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a41      	ldr	r2, [pc, #260]	; (800664c <HAL_DMA_Init+0x6a8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a3f      	ldr	r2, [pc, #252]	; (8006650 <HAL_DMA_Init+0x6ac>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3e      	ldr	r2, [pc, #248]	; (8006654 <HAL_DMA_Init+0x6b0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_DMA_Init+0x5c6>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a3c      	ldr	r2, [pc, #240]	; (8006658 <HAL_DMA_Init+0x6b4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <HAL_DMA_Init+0x5ca>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <HAL_DMA_Init+0x5cc>
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d032      	beq.n	80065da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fe2d 	bl	80081d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b80      	cmp	r3, #128	; 0x80
 8006580:	d102      	bne.n	8006588 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800659c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d010      	beq.n	80065c8 <HAL_DMA_Init+0x624>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d80c      	bhi.n	80065c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 feaa 	bl	8008308 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	e008      	b.n	80065da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	a7fdabf8 	.word	0xa7fdabf8
 80065f8:	cccccccd 	.word	0xcccccccd
 80065fc:	40020010 	.word	0x40020010
 8006600:	40020028 	.word	0x40020028
 8006604:	40020040 	.word	0x40020040
 8006608:	40020058 	.word	0x40020058
 800660c:	40020070 	.word	0x40020070
 8006610:	40020088 	.word	0x40020088
 8006614:	400200a0 	.word	0x400200a0
 8006618:	400200b8 	.word	0x400200b8
 800661c:	40020410 	.word	0x40020410
 8006620:	40020428 	.word	0x40020428
 8006624:	40020440 	.word	0x40020440
 8006628:	40020458 	.word	0x40020458
 800662c:	40020470 	.word	0x40020470
 8006630:	40020488 	.word	0x40020488
 8006634:	400204a0 	.word	0x400204a0
 8006638:	400204b8 	.word	0x400204b8
 800663c:	58025408 	.word	0x58025408
 8006640:	5802541c 	.word	0x5802541c
 8006644:	58025430 	.word	0x58025430
 8006648:	58025444 	.word	0x58025444
 800664c:	58025458 	.word	0x58025458
 8006650:	5802546c 	.word	0x5802546c
 8006654:	58025480 	.word	0x58025480
 8006658:	58025494 	.word	0x58025494

0800665c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006664:	f7ff fb3e 	bl	8005ce4 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e2dc      	b.n	8006c2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d008      	beq.n	8006692 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e2cd      	b.n	8006c2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a76      	ldr	r2, [pc, #472]	; (8006870 <HAL_DMA_Abort+0x214>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d04a      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a74      	ldr	r2, [pc, #464]	; (8006874 <HAL_DMA_Abort+0x218>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d045      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a73      	ldr	r2, [pc, #460]	; (8006878 <HAL_DMA_Abort+0x21c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d040      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a71      	ldr	r2, [pc, #452]	; (800687c <HAL_DMA_Abort+0x220>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d03b      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a70      	ldr	r2, [pc, #448]	; (8006880 <HAL_DMA_Abort+0x224>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d036      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a6e      	ldr	r2, [pc, #440]	; (8006884 <HAL_DMA_Abort+0x228>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d031      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6d      	ldr	r2, [pc, #436]	; (8006888 <HAL_DMA_Abort+0x22c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d02c      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a6b      	ldr	r2, [pc, #428]	; (800688c <HAL_DMA_Abort+0x230>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d027      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6a      	ldr	r2, [pc, #424]	; (8006890 <HAL_DMA_Abort+0x234>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a68      	ldr	r2, [pc, #416]	; (8006894 <HAL_DMA_Abort+0x238>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d01d      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a67      	ldr	r2, [pc, #412]	; (8006898 <HAL_DMA_Abort+0x23c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a65      	ldr	r2, [pc, #404]	; (800689c <HAL_DMA_Abort+0x240>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a64      	ldr	r2, [pc, #400]	; (80068a0 <HAL_DMA_Abort+0x244>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a62      	ldr	r2, [pc, #392]	; (80068a4 <HAL_DMA_Abort+0x248>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a61      	ldr	r2, [pc, #388]	; (80068a8 <HAL_DMA_Abort+0x24c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_DMA_Abort+0xd6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a5f      	ldr	r2, [pc, #380]	; (80068ac <HAL_DMA_Abort+0x250>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d101      	bne.n	8006736 <HAL_DMA_Abort+0xda>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <HAL_DMA_Abort+0xdc>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d013      	beq.n	8006764 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 021e 	bic.w	r2, r2, #30
 800674a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800675a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e00a      	b.n	800677a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 020e 	bic.w	r2, r2, #14
 8006772:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a3c      	ldr	r2, [pc, #240]	; (8006870 <HAL_DMA_Abort+0x214>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d072      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a3a      	ldr	r2, [pc, #232]	; (8006874 <HAL_DMA_Abort+0x218>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d06d      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a39      	ldr	r2, [pc, #228]	; (8006878 <HAL_DMA_Abort+0x21c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d068      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a37      	ldr	r2, [pc, #220]	; (800687c <HAL_DMA_Abort+0x220>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d063      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a36      	ldr	r2, [pc, #216]	; (8006880 <HAL_DMA_Abort+0x224>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d05e      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a34      	ldr	r2, [pc, #208]	; (8006884 <HAL_DMA_Abort+0x228>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d059      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a33      	ldr	r2, [pc, #204]	; (8006888 <HAL_DMA_Abort+0x22c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d054      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a31      	ldr	r2, [pc, #196]	; (800688c <HAL_DMA_Abort+0x230>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d04f      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a30      	ldr	r2, [pc, #192]	; (8006890 <HAL_DMA_Abort+0x234>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d04a      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <HAL_DMA_Abort+0x238>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d045      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2d      	ldr	r2, [pc, #180]	; (8006898 <HAL_DMA_Abort+0x23c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d040      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2b      	ldr	r2, [pc, #172]	; (800689c <HAL_DMA_Abort+0x240>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d03b      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <HAL_DMA_Abort+0x244>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d036      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a28      	ldr	r2, [pc, #160]	; (80068a4 <HAL_DMA_Abort+0x248>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d031      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <HAL_DMA_Abort+0x24c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d02c      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a25      	ldr	r2, [pc, #148]	; (80068ac <HAL_DMA_Abort+0x250>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d027      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a24      	ldr	r2, [pc, #144]	; (80068b0 <HAL_DMA_Abort+0x254>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <HAL_DMA_Abort+0x258>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01d      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <HAL_DMA_Abort+0x25c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <HAL_DMA_Abort+0x260>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <HAL_DMA_Abort+0x264>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1c      	ldr	r2, [pc, #112]	; (80068c4 <HAL_DMA_Abort+0x268>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_DMA_Abort+0x26c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_DMA_Abort+0x20e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a19      	ldr	r2, [pc, #100]	; (80068cc <HAL_DMA_Abort+0x270>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d132      	bne.n	80068d0 <HAL_DMA_Abort+0x274>
 800686a:	2301      	movs	r3, #1
 800686c:	e031      	b.n	80068d2 <HAL_DMA_Abort+0x276>
 800686e:	bf00      	nop
 8006870:	40020010 	.word	0x40020010
 8006874:	40020028 	.word	0x40020028
 8006878:	40020040 	.word	0x40020040
 800687c:	40020058 	.word	0x40020058
 8006880:	40020070 	.word	0x40020070
 8006884:	40020088 	.word	0x40020088
 8006888:	400200a0 	.word	0x400200a0
 800688c:	400200b8 	.word	0x400200b8
 8006890:	40020410 	.word	0x40020410
 8006894:	40020428 	.word	0x40020428
 8006898:	40020440 	.word	0x40020440
 800689c:	40020458 	.word	0x40020458
 80068a0:	40020470 	.word	0x40020470
 80068a4:	40020488 	.word	0x40020488
 80068a8:	400204a0 	.word	0x400204a0
 80068ac:	400204b8 	.word	0x400204b8
 80068b0:	58025408 	.word	0x58025408
 80068b4:	5802541c 	.word	0x5802541c
 80068b8:	58025430 	.word	0x58025430
 80068bc:	58025444 	.word	0x58025444
 80068c0:	58025458 	.word	0x58025458
 80068c4:	5802546c 	.word	0x5802546c
 80068c8:	58025480 	.word	0x58025480
 80068cc:	58025494 	.word	0x58025494
 80068d0:	2300      	movs	r3, #0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a6d      	ldr	r2, [pc, #436]	; (8006aa0 <HAL_DMA_Abort+0x444>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d04a      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a6b      	ldr	r2, [pc, #428]	; (8006aa4 <HAL_DMA_Abort+0x448>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d045      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a6a      	ldr	r2, [pc, #424]	; (8006aa8 <HAL_DMA_Abort+0x44c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d040      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a68      	ldr	r2, [pc, #416]	; (8006aac <HAL_DMA_Abort+0x450>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d03b      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a67      	ldr	r2, [pc, #412]	; (8006ab0 <HAL_DMA_Abort+0x454>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d036      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a65      	ldr	r2, [pc, #404]	; (8006ab4 <HAL_DMA_Abort+0x458>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d031      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a64      	ldr	r2, [pc, #400]	; (8006ab8 <HAL_DMA_Abort+0x45c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d02c      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a62      	ldr	r2, [pc, #392]	; (8006abc <HAL_DMA_Abort+0x460>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d027      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a61      	ldr	r2, [pc, #388]	; (8006ac0 <HAL_DMA_Abort+0x464>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d022      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a5f      	ldr	r2, [pc, #380]	; (8006ac4 <HAL_DMA_Abort+0x468>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01d      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a5e      	ldr	r2, [pc, #376]	; (8006ac8 <HAL_DMA_Abort+0x46c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d018      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a5c      	ldr	r2, [pc, #368]	; (8006acc <HAL_DMA_Abort+0x470>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a5b      	ldr	r2, [pc, #364]	; (8006ad0 <HAL_DMA_Abort+0x474>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00e      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a59      	ldr	r2, [pc, #356]	; (8006ad4 <HAL_DMA_Abort+0x478>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a58      	ldr	r2, [pc, #352]	; (8006ad8 <HAL_DMA_Abort+0x47c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d004      	beq.n	8006986 <HAL_DMA_Abort+0x32a>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a56      	ldr	r2, [pc, #344]	; (8006adc <HAL_DMA_Abort+0x480>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <HAL_DMA_Abort+0x33c>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e007      	b.n	80069a8 <HAL_DMA_Abort+0x34c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80069a8:	e013      	b.n	80069d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069aa:	f7ff f99b 	bl	8005ce4 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b05      	cmp	r3, #5
 80069b6:	d90c      	bls.n	80069d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2203      	movs	r2, #3
 80069c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e12d      	b.n	8006c2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e5      	bne.n	80069aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2f      	ldr	r2, [pc, #188]	; (8006aa0 <HAL_DMA_Abort+0x444>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d04a      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a2d      	ldr	r2, [pc, #180]	; (8006aa4 <HAL_DMA_Abort+0x448>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d045      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2c      	ldr	r2, [pc, #176]	; (8006aa8 <HAL_DMA_Abort+0x44c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d040      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a2a      	ldr	r2, [pc, #168]	; (8006aac <HAL_DMA_Abort+0x450>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d03b      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a29      	ldr	r2, [pc, #164]	; (8006ab0 <HAL_DMA_Abort+0x454>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d036      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a27      	ldr	r2, [pc, #156]	; (8006ab4 <HAL_DMA_Abort+0x458>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d031      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a26      	ldr	r2, [pc, #152]	; (8006ab8 <HAL_DMA_Abort+0x45c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d02c      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a24      	ldr	r2, [pc, #144]	; (8006abc <HAL_DMA_Abort+0x460>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d027      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a23      	ldr	r2, [pc, #140]	; (8006ac0 <HAL_DMA_Abort+0x464>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a21      	ldr	r2, [pc, #132]	; (8006ac4 <HAL_DMA_Abort+0x468>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01d      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <HAL_DMA_Abort+0x46c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1e      	ldr	r2, [pc, #120]	; (8006acc <HAL_DMA_Abort+0x470>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <HAL_DMA_Abort+0x474>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1b      	ldr	r2, [pc, #108]	; (8006ad4 <HAL_DMA_Abort+0x478>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1a      	ldr	r2, [pc, #104]	; (8006ad8 <HAL_DMA_Abort+0x47c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_DMA_Abort+0x422>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a18      	ldr	r2, [pc, #96]	; (8006adc <HAL_DMA_Abort+0x480>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d101      	bne.n	8006a82 <HAL_DMA_Abort+0x426>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <HAL_DMA_Abort+0x428>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d02b      	beq.n	8006ae0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	223f      	movs	r2, #63	; 0x3f
 8006a98:	409a      	lsls	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	609a      	str	r2, [r3, #8]
 8006a9e:	e02a      	b.n	8006af6 <HAL_DMA_Abort+0x49a>
 8006aa0:	40020010 	.word	0x40020010
 8006aa4:	40020028 	.word	0x40020028
 8006aa8:	40020040 	.word	0x40020040
 8006aac:	40020058 	.word	0x40020058
 8006ab0:	40020070 	.word	0x40020070
 8006ab4:	40020088 	.word	0x40020088
 8006ab8:	400200a0 	.word	0x400200a0
 8006abc:	400200b8 	.word	0x400200b8
 8006ac0:	40020410 	.word	0x40020410
 8006ac4:	40020428 	.word	0x40020428
 8006ac8:	40020440 	.word	0x40020440
 8006acc:	40020458 	.word	0x40020458
 8006ad0:	40020470 	.word	0x40020470
 8006ad4:	40020488 	.word	0x40020488
 8006ad8:	400204a0 	.word	0x400204a0
 8006adc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2201      	movs	r2, #1
 8006af0:	409a      	lsls	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a4f      	ldr	r2, [pc, #316]	; (8006c38 <HAL_DMA_Abort+0x5dc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d072      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a4d      	ldr	r2, [pc, #308]	; (8006c3c <HAL_DMA_Abort+0x5e0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d06d      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a4c      	ldr	r2, [pc, #304]	; (8006c40 <HAL_DMA_Abort+0x5e4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d068      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a4a      	ldr	r2, [pc, #296]	; (8006c44 <HAL_DMA_Abort+0x5e8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d063      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a49      	ldr	r2, [pc, #292]	; (8006c48 <HAL_DMA_Abort+0x5ec>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d05e      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a47      	ldr	r2, [pc, #284]	; (8006c4c <HAL_DMA_Abort+0x5f0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d059      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a46      	ldr	r2, [pc, #280]	; (8006c50 <HAL_DMA_Abort+0x5f4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d054      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a44      	ldr	r2, [pc, #272]	; (8006c54 <HAL_DMA_Abort+0x5f8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d04f      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a43      	ldr	r2, [pc, #268]	; (8006c58 <HAL_DMA_Abort+0x5fc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d04a      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a41      	ldr	r2, [pc, #260]	; (8006c5c <HAL_DMA_Abort+0x600>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d045      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a40      	ldr	r2, [pc, #256]	; (8006c60 <HAL_DMA_Abort+0x604>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d040      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a3e      	ldr	r2, [pc, #248]	; (8006c64 <HAL_DMA_Abort+0x608>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d03b      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a3d      	ldr	r2, [pc, #244]	; (8006c68 <HAL_DMA_Abort+0x60c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d036      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a3b      	ldr	r2, [pc, #236]	; (8006c6c <HAL_DMA_Abort+0x610>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d031      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a3a      	ldr	r2, [pc, #232]	; (8006c70 <HAL_DMA_Abort+0x614>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d02c      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a38      	ldr	r2, [pc, #224]	; (8006c74 <HAL_DMA_Abort+0x618>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d027      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a37      	ldr	r2, [pc, #220]	; (8006c78 <HAL_DMA_Abort+0x61c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d022      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a35      	ldr	r2, [pc, #212]	; (8006c7c <HAL_DMA_Abort+0x620>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01d      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a34      	ldr	r2, [pc, #208]	; (8006c80 <HAL_DMA_Abort+0x624>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d018      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a32      	ldr	r2, [pc, #200]	; (8006c84 <HAL_DMA_Abort+0x628>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a31      	ldr	r2, [pc, #196]	; (8006c88 <HAL_DMA_Abort+0x62c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2f      	ldr	r2, [pc, #188]	; (8006c8c <HAL_DMA_Abort+0x630>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a2e      	ldr	r2, [pc, #184]	; (8006c90 <HAL_DMA_Abort+0x634>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <HAL_DMA_Abort+0x58a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <HAL_DMA_Abort+0x638>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d101      	bne.n	8006bea <HAL_DMA_Abort+0x58e>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <HAL_DMA_Abort+0x590>
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d015      	beq.n	8006c1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006bf8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40020010 	.word	0x40020010
 8006c3c:	40020028 	.word	0x40020028
 8006c40:	40020040 	.word	0x40020040
 8006c44:	40020058 	.word	0x40020058
 8006c48:	40020070 	.word	0x40020070
 8006c4c:	40020088 	.word	0x40020088
 8006c50:	400200a0 	.word	0x400200a0
 8006c54:	400200b8 	.word	0x400200b8
 8006c58:	40020410 	.word	0x40020410
 8006c5c:	40020428 	.word	0x40020428
 8006c60:	40020440 	.word	0x40020440
 8006c64:	40020458 	.word	0x40020458
 8006c68:	40020470 	.word	0x40020470
 8006c6c:	40020488 	.word	0x40020488
 8006c70:	400204a0 	.word	0x400204a0
 8006c74:	400204b8 	.word	0x400204b8
 8006c78:	58025408 	.word	0x58025408
 8006c7c:	5802541c 	.word	0x5802541c
 8006c80:	58025430 	.word	0x58025430
 8006c84:	58025444 	.word	0x58025444
 8006c88:	58025458 	.word	0x58025458
 8006c8c:	5802546c 	.word	0x5802546c
 8006c90:	58025480 	.word	0x58025480
 8006c94:	58025494 	.word	0x58025494

08006c98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e237      	b.n	800711a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d004      	beq.n	8006cc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2280      	movs	r2, #128	; 0x80
 8006cba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e22c      	b.n	800711a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a5c      	ldr	r2, [pc, #368]	; (8006e38 <HAL_DMA_Abort_IT+0x1a0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d04a      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a5b      	ldr	r2, [pc, #364]	; (8006e3c <HAL_DMA_Abort_IT+0x1a4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d045      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a59      	ldr	r2, [pc, #356]	; (8006e40 <HAL_DMA_Abort_IT+0x1a8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d040      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a58      	ldr	r2, [pc, #352]	; (8006e44 <HAL_DMA_Abort_IT+0x1ac>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d03b      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a56      	ldr	r2, [pc, #344]	; (8006e48 <HAL_DMA_Abort_IT+0x1b0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d036      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a55      	ldr	r2, [pc, #340]	; (8006e4c <HAL_DMA_Abort_IT+0x1b4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d031      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a53      	ldr	r2, [pc, #332]	; (8006e50 <HAL_DMA_Abort_IT+0x1b8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d02c      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a52      	ldr	r2, [pc, #328]	; (8006e54 <HAL_DMA_Abort_IT+0x1bc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d027      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a50      	ldr	r2, [pc, #320]	; (8006e58 <HAL_DMA_Abort_IT+0x1c0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d022      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a4f      	ldr	r2, [pc, #316]	; (8006e5c <HAL_DMA_Abort_IT+0x1c4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d01d      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a4d      	ldr	r2, [pc, #308]	; (8006e60 <HAL_DMA_Abort_IT+0x1c8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d018      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a4c      	ldr	r2, [pc, #304]	; (8006e64 <HAL_DMA_Abort_IT+0x1cc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a4a      	ldr	r2, [pc, #296]	; (8006e68 <HAL_DMA_Abort_IT+0x1d0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00e      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a49      	ldr	r2, [pc, #292]	; (8006e6c <HAL_DMA_Abort_IT+0x1d4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a47      	ldr	r2, [pc, #284]	; (8006e70 <HAL_DMA_Abort_IT+0x1d8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_DMA_Abort_IT+0xc8>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a46      	ldr	r2, [pc, #280]	; (8006e74 <HAL_DMA_Abort_IT+0x1dc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d101      	bne.n	8006d64 <HAL_DMA_Abort_IT+0xcc>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <HAL_DMA_Abort_IT+0xce>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8086 	beq.w	8006e78 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2f      	ldr	r2, [pc, #188]	; (8006e38 <HAL_DMA_Abort_IT+0x1a0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d04a      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2e      	ldr	r2, [pc, #184]	; (8006e3c <HAL_DMA_Abort_IT+0x1a4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d045      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2c      	ldr	r2, [pc, #176]	; (8006e40 <HAL_DMA_Abort_IT+0x1a8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d040      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2b      	ldr	r2, [pc, #172]	; (8006e44 <HAL_DMA_Abort_IT+0x1ac>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d03b      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a29      	ldr	r2, [pc, #164]	; (8006e48 <HAL_DMA_Abort_IT+0x1b0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d036      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a28      	ldr	r2, [pc, #160]	; (8006e4c <HAL_DMA_Abort_IT+0x1b4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d031      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a26      	ldr	r2, [pc, #152]	; (8006e50 <HAL_DMA_Abort_IT+0x1b8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d02c      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <HAL_DMA_Abort_IT+0x1bc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d027      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a23      	ldr	r2, [pc, #140]	; (8006e58 <HAL_DMA_Abort_IT+0x1c0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d022      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a22      	ldr	r2, [pc, #136]	; (8006e5c <HAL_DMA_Abort_IT+0x1c4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d01d      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a20      	ldr	r2, [pc, #128]	; (8006e60 <HAL_DMA_Abort_IT+0x1c8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d018      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1f      	ldr	r2, [pc, #124]	; (8006e64 <HAL_DMA_Abort_IT+0x1cc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d013      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <HAL_DMA_Abort_IT+0x1d0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1c      	ldr	r2, [pc, #112]	; (8006e6c <HAL_DMA_Abort_IT+0x1d4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d009      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1a      	ldr	r2, [pc, #104]	; (8006e70 <HAL_DMA_Abort_IT+0x1d8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x17c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <HAL_DMA_Abort_IT+0x1dc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d108      	bne.n	8006e26 <HAL_DMA_Abort_IT+0x18e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	e178      	b.n	8007118 <HAL_DMA_Abort_IT+0x480>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e16f      	b.n	8007118 <HAL_DMA_Abort_IT+0x480>
 8006e38:	40020010 	.word	0x40020010
 8006e3c:	40020028 	.word	0x40020028
 8006e40:	40020040 	.word	0x40020040
 8006e44:	40020058 	.word	0x40020058
 8006e48:	40020070 	.word	0x40020070
 8006e4c:	40020088 	.word	0x40020088
 8006e50:	400200a0 	.word	0x400200a0
 8006e54:	400200b8 	.word	0x400200b8
 8006e58:	40020410 	.word	0x40020410
 8006e5c:	40020428 	.word	0x40020428
 8006e60:	40020440 	.word	0x40020440
 8006e64:	40020458 	.word	0x40020458
 8006e68:	40020470 	.word	0x40020470
 8006e6c:	40020488 	.word	0x40020488
 8006e70:	400204a0 	.word	0x400204a0
 8006e74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 020e 	bic.w	r2, r2, #14
 8006e86:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a6c      	ldr	r2, [pc, #432]	; (8007040 <HAL_DMA_Abort_IT+0x3a8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d04a      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a6b      	ldr	r2, [pc, #428]	; (8007044 <HAL_DMA_Abort_IT+0x3ac>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d045      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a69      	ldr	r2, [pc, #420]	; (8007048 <HAL_DMA_Abort_IT+0x3b0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d040      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a68      	ldr	r2, [pc, #416]	; (800704c <HAL_DMA_Abort_IT+0x3b4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d03b      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a66      	ldr	r2, [pc, #408]	; (8007050 <HAL_DMA_Abort_IT+0x3b8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d036      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a65      	ldr	r2, [pc, #404]	; (8007054 <HAL_DMA_Abort_IT+0x3bc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d031      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a63      	ldr	r2, [pc, #396]	; (8007058 <HAL_DMA_Abort_IT+0x3c0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d02c      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a62      	ldr	r2, [pc, #392]	; (800705c <HAL_DMA_Abort_IT+0x3c4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d027      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a60      	ldr	r2, [pc, #384]	; (8007060 <HAL_DMA_Abort_IT+0x3c8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d022      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a5f      	ldr	r2, [pc, #380]	; (8007064 <HAL_DMA_Abort_IT+0x3cc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d01d      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a5d      	ldr	r2, [pc, #372]	; (8007068 <HAL_DMA_Abort_IT+0x3d0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d018      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a5c      	ldr	r2, [pc, #368]	; (800706c <HAL_DMA_Abort_IT+0x3d4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d013      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a5a      	ldr	r2, [pc, #360]	; (8007070 <HAL_DMA_Abort_IT+0x3d8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00e      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a59      	ldr	r2, [pc, #356]	; (8007074 <HAL_DMA_Abort_IT+0x3dc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d009      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a57      	ldr	r2, [pc, #348]	; (8007078 <HAL_DMA_Abort_IT+0x3e0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_DMA_Abort_IT+0x290>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a56      	ldr	r2, [pc, #344]	; (800707c <HAL_DMA_Abort_IT+0x3e4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d108      	bne.n	8006f3a <HAL_DMA_Abort_IT+0x2a2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e007      	b.n	8006f4a <HAL_DMA_Abort_IT+0x2b2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a3c      	ldr	r2, [pc, #240]	; (8007040 <HAL_DMA_Abort_IT+0x3a8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d072      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a3a      	ldr	r2, [pc, #232]	; (8007044 <HAL_DMA_Abort_IT+0x3ac>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d06d      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a39      	ldr	r2, [pc, #228]	; (8007048 <HAL_DMA_Abort_IT+0x3b0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d068      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a37      	ldr	r2, [pc, #220]	; (800704c <HAL_DMA_Abort_IT+0x3b4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d063      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a36      	ldr	r2, [pc, #216]	; (8007050 <HAL_DMA_Abort_IT+0x3b8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d05e      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a34      	ldr	r2, [pc, #208]	; (8007054 <HAL_DMA_Abort_IT+0x3bc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d059      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a33      	ldr	r2, [pc, #204]	; (8007058 <HAL_DMA_Abort_IT+0x3c0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d054      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a31      	ldr	r2, [pc, #196]	; (800705c <HAL_DMA_Abort_IT+0x3c4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d04f      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a30      	ldr	r2, [pc, #192]	; (8007060 <HAL_DMA_Abort_IT+0x3c8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d04a      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a2e      	ldr	r2, [pc, #184]	; (8007064 <HAL_DMA_Abort_IT+0x3cc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d045      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <HAL_DMA_Abort_IT+0x3d0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d040      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2b      	ldr	r2, [pc, #172]	; (800706c <HAL_DMA_Abort_IT+0x3d4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d03b      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2a      	ldr	r2, [pc, #168]	; (8007070 <HAL_DMA_Abort_IT+0x3d8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d036      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a28      	ldr	r2, [pc, #160]	; (8007074 <HAL_DMA_Abort_IT+0x3dc>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d031      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a27      	ldr	r2, [pc, #156]	; (8007078 <HAL_DMA_Abort_IT+0x3e0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d02c      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a25      	ldr	r2, [pc, #148]	; (800707c <HAL_DMA_Abort_IT+0x3e4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d027      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a24      	ldr	r2, [pc, #144]	; (8007080 <HAL_DMA_Abort_IT+0x3e8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d022      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a22      	ldr	r2, [pc, #136]	; (8007084 <HAL_DMA_Abort_IT+0x3ec>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01d      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a21      	ldr	r2, [pc, #132]	; (8007088 <HAL_DMA_Abort_IT+0x3f0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d018      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1f      	ldr	r2, [pc, #124]	; (800708c <HAL_DMA_Abort_IT+0x3f4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <HAL_DMA_Abort_IT+0x3f8>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <HAL_DMA_Abort_IT+0x3fc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d009      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1b      	ldr	r2, [pc, #108]	; (8007098 <HAL_DMA_Abort_IT+0x400>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <HAL_DMA_Abort_IT+0x3a2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a19      	ldr	r2, [pc, #100]	; (800709c <HAL_DMA_Abort_IT+0x404>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d132      	bne.n	80070a0 <HAL_DMA_Abort_IT+0x408>
 800703a:	2301      	movs	r3, #1
 800703c:	e031      	b.n	80070a2 <HAL_DMA_Abort_IT+0x40a>
 800703e:	bf00      	nop
 8007040:	40020010 	.word	0x40020010
 8007044:	40020028 	.word	0x40020028
 8007048:	40020040 	.word	0x40020040
 800704c:	40020058 	.word	0x40020058
 8007050:	40020070 	.word	0x40020070
 8007054:	40020088 	.word	0x40020088
 8007058:	400200a0 	.word	0x400200a0
 800705c:	400200b8 	.word	0x400200b8
 8007060:	40020410 	.word	0x40020410
 8007064:	40020428 	.word	0x40020428
 8007068:	40020440 	.word	0x40020440
 800706c:	40020458 	.word	0x40020458
 8007070:	40020470 	.word	0x40020470
 8007074:	40020488 	.word	0x40020488
 8007078:	400204a0 	.word	0x400204a0
 800707c:	400204b8 	.word	0x400204b8
 8007080:	58025408 	.word	0x58025408
 8007084:	5802541c 	.word	0x5802541c
 8007088:	58025430 	.word	0x58025430
 800708c:	58025444 	.word	0x58025444
 8007090:	58025458 	.word	0x58025458
 8007094:	5802546c 	.word	0x5802546c
 8007098:	58025480 	.word	0x58025480
 800709c:	58025494 	.word	0x58025494
 80070a0:	2300      	movs	r3, #0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d028      	beq.n	80070f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2201      	movs	r2, #1
 80070c6:	409a      	lsls	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00c      	beq.n	80070f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007130:	4b67      	ldr	r3, [pc, #412]	; (80072d0 <HAL_DMA_IRQHandler+0x1ac>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a67      	ldr	r2, [pc, #412]	; (80072d4 <HAL_DMA_IRQHandler+0x1b0>)
 8007136:	fba2 2303 	umull	r2, r3, r2, r3
 800713a:	0a9b      	lsrs	r3, r3, #10
 800713c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007142:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007148:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a5f      	ldr	r2, [pc, #380]	; (80072d8 <HAL_DMA_IRQHandler+0x1b4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d04a      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5d      	ldr	r2, [pc, #372]	; (80072dc <HAL_DMA_IRQHandler+0x1b8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d045      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a5c      	ldr	r2, [pc, #368]	; (80072e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d040      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5a      	ldr	r2, [pc, #360]	; (80072e4 <HAL_DMA_IRQHandler+0x1c0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d03b      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a59      	ldr	r2, [pc, #356]	; (80072e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d036      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a57      	ldr	r2, [pc, #348]	; (80072ec <HAL_DMA_IRQHandler+0x1c8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d031      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a56      	ldr	r2, [pc, #344]	; (80072f0 <HAL_DMA_IRQHandler+0x1cc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d02c      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a54      	ldr	r2, [pc, #336]	; (80072f4 <HAL_DMA_IRQHandler+0x1d0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d027      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a53      	ldr	r2, [pc, #332]	; (80072f8 <HAL_DMA_IRQHandler+0x1d4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d022      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a51      	ldr	r2, [pc, #324]	; (80072fc <HAL_DMA_IRQHandler+0x1d8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01d      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a50      	ldr	r2, [pc, #320]	; (8007300 <HAL_DMA_IRQHandler+0x1dc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a4e      	ldr	r2, [pc, #312]	; (8007304 <HAL_DMA_IRQHandler+0x1e0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a4d      	ldr	r2, [pc, #308]	; (8007308 <HAL_DMA_IRQHandler+0x1e4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a4b      	ldr	r2, [pc, #300]	; (800730c <HAL_DMA_IRQHandler+0x1e8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a4a      	ldr	r2, [pc, #296]	; (8007310 <HAL_DMA_IRQHandler+0x1ec>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_IRQHandler+0xd2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a48      	ldr	r2, [pc, #288]	; (8007314 <HAL_DMA_IRQHandler+0x1f0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d101      	bne.n	80071fa <HAL_DMA_IRQHandler+0xd6>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <HAL_DMA_IRQHandler+0xd8>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 842b 	beq.w	8007a58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	2208      	movs	r2, #8
 800720c:	409a      	lsls	r2, r3
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	4013      	ands	r3, r2
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80a2 	beq.w	800735c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2e      	ldr	r2, [pc, #184]	; (80072d8 <HAL_DMA_IRQHandler+0x1b4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d04a      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_DMA_IRQHandler+0x1b8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d045      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d040      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <HAL_DMA_IRQHandler+0x1c0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d03b      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d036      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a27      	ldr	r2, [pc, #156]	; (80072ec <HAL_DMA_IRQHandler+0x1c8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d031      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a25      	ldr	r2, [pc, #148]	; (80072f0 <HAL_DMA_IRQHandler+0x1cc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d02c      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <HAL_DMA_IRQHandler+0x1d0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d027      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <HAL_DMA_IRQHandler+0x1d4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d022      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a21      	ldr	r2, [pc, #132]	; (80072fc <HAL_DMA_IRQHandler+0x1d8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d01d      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <HAL_DMA_IRQHandler+0x1dc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d018      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <HAL_DMA_IRQHandler+0x1e0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <HAL_DMA_IRQHandler+0x1e4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_DMA_IRQHandler+0x1e8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <HAL_DMA_IRQHandler+0x1ec>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x194>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a18      	ldr	r2, [pc, #96]	; (8007314 <HAL_DMA_IRQHandler+0x1f0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d12f      	bne.n	8007318 <HAL_DMA_IRQHandler+0x1f4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bf14      	ite	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	2300      	moveq	r3, #0
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	e02e      	b.n	800732c <HAL_DMA_IRQHandler+0x208>
 80072ce:	bf00      	nop
 80072d0:	24000004 	.word	0x24000004
 80072d4:	1b4e81b5 	.word	0x1b4e81b5
 80072d8:	40020010 	.word	0x40020010
 80072dc:	40020028 	.word	0x40020028
 80072e0:	40020040 	.word	0x40020040
 80072e4:	40020058 	.word	0x40020058
 80072e8:	40020070 	.word	0x40020070
 80072ec:	40020088 	.word	0x40020088
 80072f0:	400200a0 	.word	0x400200a0
 80072f4:	400200b8 	.word	0x400200b8
 80072f8:	40020410 	.word	0x40020410
 80072fc:	40020428 	.word	0x40020428
 8007300:	40020440 	.word	0x40020440
 8007304:	40020458 	.word	0x40020458
 8007308:	40020470 	.word	0x40020470
 800730c:	40020488 	.word	0x40020488
 8007310:	400204a0 	.word	0x400204a0
 8007314:	400204b8 	.word	0x400204b8
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0308 	and.w	r3, r3, #8
 8007322:	2b00      	cmp	r3, #0
 8007324:	bf14      	ite	ne
 8007326:	2301      	movne	r3, #1
 8007328:	2300      	moveq	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d015      	beq.n	800735c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0204 	bic.w	r2, r2, #4
 800733e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	2208      	movs	r2, #8
 800734a:	409a      	lsls	r2, r3
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007354:	f043 0201 	orr.w	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d06e      	beq.n	8007450 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a69      	ldr	r2, [pc, #420]	; (800751c <HAL_DMA_IRQHandler+0x3f8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d04a      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a67      	ldr	r2, [pc, #412]	; (8007520 <HAL_DMA_IRQHandler+0x3fc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d045      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a66      	ldr	r2, [pc, #408]	; (8007524 <HAL_DMA_IRQHandler+0x400>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d040      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a64      	ldr	r2, [pc, #400]	; (8007528 <HAL_DMA_IRQHandler+0x404>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d03b      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a63      	ldr	r2, [pc, #396]	; (800752c <HAL_DMA_IRQHandler+0x408>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d036      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a61      	ldr	r2, [pc, #388]	; (8007530 <HAL_DMA_IRQHandler+0x40c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d031      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a60      	ldr	r2, [pc, #384]	; (8007534 <HAL_DMA_IRQHandler+0x410>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d02c      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a5e      	ldr	r2, [pc, #376]	; (8007538 <HAL_DMA_IRQHandler+0x414>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d027      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a5d      	ldr	r2, [pc, #372]	; (800753c <HAL_DMA_IRQHandler+0x418>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a5b      	ldr	r2, [pc, #364]	; (8007540 <HAL_DMA_IRQHandler+0x41c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a5a      	ldr	r2, [pc, #360]	; (8007544 <HAL_DMA_IRQHandler+0x420>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a58      	ldr	r2, [pc, #352]	; (8007548 <HAL_DMA_IRQHandler+0x424>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a57      	ldr	r2, [pc, #348]	; (800754c <HAL_DMA_IRQHandler+0x428>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a55      	ldr	r2, [pc, #340]	; (8007550 <HAL_DMA_IRQHandler+0x42c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a54      	ldr	r2, [pc, #336]	; (8007554 <HAL_DMA_IRQHandler+0x430>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_DMA_IRQHandler+0x2ee>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a52      	ldr	r2, [pc, #328]	; (8007558 <HAL_DMA_IRQHandler+0x434>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10a      	bne.n	8007428 <HAL_DMA_IRQHandler+0x304>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741c:	2b00      	cmp	r3, #0
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	e003      	b.n	8007430 <HAL_DMA_IRQHandler+0x30c>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00d      	beq.n	8007450 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2201      	movs	r2, #1
 800743e:	409a      	lsls	r2, r3
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007448:	f043 0202 	orr.w	r2, r3, #2
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2204      	movs	r2, #4
 800745a:	409a      	lsls	r2, r3
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	4013      	ands	r3, r2
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 808f 	beq.w	8007584 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2c      	ldr	r2, [pc, #176]	; (800751c <HAL_DMA_IRQHandler+0x3f8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d04a      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <HAL_DMA_IRQHandler+0x3fc>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d045      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a29      	ldr	r2, [pc, #164]	; (8007524 <HAL_DMA_IRQHandler+0x400>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d040      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a27      	ldr	r2, [pc, #156]	; (8007528 <HAL_DMA_IRQHandler+0x404>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d03b      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a26      	ldr	r2, [pc, #152]	; (800752c <HAL_DMA_IRQHandler+0x408>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d036      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a24      	ldr	r2, [pc, #144]	; (8007530 <HAL_DMA_IRQHandler+0x40c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d031      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a23      	ldr	r2, [pc, #140]	; (8007534 <HAL_DMA_IRQHandler+0x410>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d02c      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a21      	ldr	r2, [pc, #132]	; (8007538 <HAL_DMA_IRQHandler+0x414>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d027      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a20      	ldr	r2, [pc, #128]	; (800753c <HAL_DMA_IRQHandler+0x418>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <HAL_DMA_IRQHandler+0x41c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01d      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1d      	ldr	r2, [pc, #116]	; (8007544 <HAL_DMA_IRQHandler+0x420>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_DMA_IRQHandler+0x424>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1a      	ldr	r2, [pc, #104]	; (800754c <HAL_DMA_IRQHandler+0x428>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_DMA_IRQHandler+0x42c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a17      	ldr	r2, [pc, #92]	; (8007554 <HAL_DMA_IRQHandler+0x430>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_DMA_IRQHandler+0x3e2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a15      	ldr	r2, [pc, #84]	; (8007558 <HAL_DMA_IRQHandler+0x434>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d12a      	bne.n	800755c <HAL_DMA_IRQHandler+0x438>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	e023      	b.n	8007564 <HAL_DMA_IRQHandler+0x440>
 800751c:	40020010 	.word	0x40020010
 8007520:	40020028 	.word	0x40020028
 8007524:	40020040 	.word	0x40020040
 8007528:	40020058 	.word	0x40020058
 800752c:	40020070 	.word	0x40020070
 8007530:	40020088 	.word	0x40020088
 8007534:	400200a0 	.word	0x400200a0
 8007538:	400200b8 	.word	0x400200b8
 800753c:	40020410 	.word	0x40020410
 8007540:	40020428 	.word	0x40020428
 8007544:	40020440 	.word	0x40020440
 8007548:	40020458 	.word	0x40020458
 800754c:	40020470 	.word	0x40020470
 8007550:	40020488 	.word	0x40020488
 8007554:	400204a0 	.word	0x400204a0
 8007558:	400204b8 	.word	0x400204b8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00d      	beq.n	8007584 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2204      	movs	r2, #4
 8007572:	409a      	lsls	r2, r3
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757c:	f043 0204 	orr.w	r2, r3, #4
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	2210      	movs	r2, #16
 800758e:	409a      	lsls	r2, r3
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80a6 	beq.w	80076e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a85      	ldr	r2, [pc, #532]	; (80077b4 <HAL_DMA_IRQHandler+0x690>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d04a      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a83      	ldr	r2, [pc, #524]	; (80077b8 <HAL_DMA_IRQHandler+0x694>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d045      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a82      	ldr	r2, [pc, #520]	; (80077bc <HAL_DMA_IRQHandler+0x698>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d040      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a80      	ldr	r2, [pc, #512]	; (80077c0 <HAL_DMA_IRQHandler+0x69c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d03b      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a7f      	ldr	r2, [pc, #508]	; (80077c4 <HAL_DMA_IRQHandler+0x6a0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d036      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a7d      	ldr	r2, [pc, #500]	; (80077c8 <HAL_DMA_IRQHandler+0x6a4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d031      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a7c      	ldr	r2, [pc, #496]	; (80077cc <HAL_DMA_IRQHandler+0x6a8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d02c      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a7a      	ldr	r2, [pc, #488]	; (80077d0 <HAL_DMA_IRQHandler+0x6ac>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d027      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a79      	ldr	r2, [pc, #484]	; (80077d4 <HAL_DMA_IRQHandler+0x6b0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d022      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a77      	ldr	r2, [pc, #476]	; (80077d8 <HAL_DMA_IRQHandler+0x6b4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d01d      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a76      	ldr	r2, [pc, #472]	; (80077dc <HAL_DMA_IRQHandler+0x6b8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d018      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a74      	ldr	r2, [pc, #464]	; (80077e0 <HAL_DMA_IRQHandler+0x6bc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a73      	ldr	r2, [pc, #460]	; (80077e4 <HAL_DMA_IRQHandler+0x6c0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00e      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a71      	ldr	r2, [pc, #452]	; (80077e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d009      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a70      	ldr	r2, [pc, #448]	; (80077ec <HAL_DMA_IRQHandler+0x6c8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d004      	beq.n	800763a <HAL_DMA_IRQHandler+0x516>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6e      	ldr	r2, [pc, #440]	; (80077f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d10a      	bne.n	8007650 <HAL_DMA_IRQHandler+0x52c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	bf14      	ite	ne
 8007648:	2301      	movne	r3, #1
 800764a:	2300      	moveq	r3, #0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	e009      	b.n	8007664 <HAL_DMA_IRQHandler+0x540>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d03e      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2210      	movs	r2, #16
 8007672:	409a      	lsls	r2, r3
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d108      	bne.n	80076a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d024      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
 80076a4:	e01f      	b.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01b      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	e016      	b.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d107      	bne.n	80076d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0208 	bic.w	r2, r2, #8
 80076d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	2220      	movs	r2, #32
 80076f0:	409a      	lsls	r2, r3
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8110 	beq.w	800791c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a2c      	ldr	r2, [pc, #176]	; (80077b4 <HAL_DMA_IRQHandler+0x690>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d04a      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2b      	ldr	r2, [pc, #172]	; (80077b8 <HAL_DMA_IRQHandler+0x694>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d045      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a29      	ldr	r2, [pc, #164]	; (80077bc <HAL_DMA_IRQHandler+0x698>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d040      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a28      	ldr	r2, [pc, #160]	; (80077c0 <HAL_DMA_IRQHandler+0x69c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d03b      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a26      	ldr	r2, [pc, #152]	; (80077c4 <HAL_DMA_IRQHandler+0x6a0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d036      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a25      	ldr	r2, [pc, #148]	; (80077c8 <HAL_DMA_IRQHandler+0x6a4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d031      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a23      	ldr	r2, [pc, #140]	; (80077cc <HAL_DMA_IRQHandler+0x6a8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d02c      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a22      	ldr	r2, [pc, #136]	; (80077d0 <HAL_DMA_IRQHandler+0x6ac>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d027      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <HAL_DMA_IRQHandler+0x6b0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d022      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1f      	ldr	r2, [pc, #124]	; (80077d8 <HAL_DMA_IRQHandler+0x6b4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d01d      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <HAL_DMA_IRQHandler+0x6b8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d018      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <HAL_DMA_IRQHandler+0x6bc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <HAL_DMA_IRQHandler+0x6c0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00e      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a17      	ldr	r2, [pc, #92]	; (80077ec <HAL_DMA_IRQHandler+0x6c8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <HAL_DMA_IRQHandler+0x678>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d12b      	bne.n	80077f4 <HAL_DMA_IRQHandler+0x6d0>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bf14      	ite	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	2300      	moveq	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	e02a      	b.n	8007808 <HAL_DMA_IRQHandler+0x6e4>
 80077b2:	bf00      	nop
 80077b4:	40020010 	.word	0x40020010
 80077b8:	40020028 	.word	0x40020028
 80077bc:	40020040 	.word	0x40020040
 80077c0:	40020058 	.word	0x40020058
 80077c4:	40020070 	.word	0x40020070
 80077c8:	40020088 	.word	0x40020088
 80077cc:	400200a0 	.word	0x400200a0
 80077d0:	400200b8 	.word	0x400200b8
 80077d4:	40020410 	.word	0x40020410
 80077d8:	40020428 	.word	0x40020428
 80077dc:	40020440 	.word	0x40020440
 80077e0:	40020458 	.word	0x40020458
 80077e4:	40020470 	.word	0x40020470
 80077e8:	40020488 	.word	0x40020488
 80077ec:	400204a0 	.word	0x400204a0
 80077f0:	400204b8 	.word	0x400204b8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bf14      	ite	ne
 8007802:	2301      	movne	r3, #1
 8007804:	2300      	moveq	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8087 	beq.w	800791c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	2220      	movs	r2, #32
 8007818:	409a      	lsls	r2, r3
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b04      	cmp	r3, #4
 8007828:	d139      	bne.n	800789e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0216 	bic.w	r2, r2, #22
 8007838:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007848:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <HAL_DMA_IRQHandler+0x736>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0208 	bic.w	r2, r2, #8
 8007868:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	223f      	movs	r2, #63	; 0x3f
 8007874:	409a      	lsls	r2, r3
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 834a 	beq.w	8007f28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
          }
          return;
 800789c:	e344      	b.n	8007f28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d018      	beq.n	80078de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d108      	bne.n	80078cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d02c      	beq.n	800791c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
 80078ca:	e027      	b.n	800791c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d023      	beq.n	800791c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
 80078dc:	e01e      	b.n	800791c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10f      	bne.n	800790c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0210 	bic.w	r2, r2, #16
 80078fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8306 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8088 	beq.w	8007a44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2204      	movs	r2, #4
 8007938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a7a      	ldr	r2, [pc, #488]	; (8007b2c <HAL_DMA_IRQHandler+0xa08>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d04a      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a79      	ldr	r2, [pc, #484]	; (8007b30 <HAL_DMA_IRQHandler+0xa0c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d045      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a77      	ldr	r2, [pc, #476]	; (8007b34 <HAL_DMA_IRQHandler+0xa10>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d040      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a76      	ldr	r2, [pc, #472]	; (8007b38 <HAL_DMA_IRQHandler+0xa14>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d03b      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a74      	ldr	r2, [pc, #464]	; (8007b3c <HAL_DMA_IRQHandler+0xa18>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d036      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a73      	ldr	r2, [pc, #460]	; (8007b40 <HAL_DMA_IRQHandler+0xa1c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d031      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a71      	ldr	r2, [pc, #452]	; (8007b44 <HAL_DMA_IRQHandler+0xa20>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d02c      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a70      	ldr	r2, [pc, #448]	; (8007b48 <HAL_DMA_IRQHandler+0xa24>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d027      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a6e      	ldr	r2, [pc, #440]	; (8007b4c <HAL_DMA_IRQHandler+0xa28>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d022      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a6d      	ldr	r2, [pc, #436]	; (8007b50 <HAL_DMA_IRQHandler+0xa2c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d01d      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a6b      	ldr	r2, [pc, #428]	; (8007b54 <HAL_DMA_IRQHandler+0xa30>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d018      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6a      	ldr	r2, [pc, #424]	; (8007b58 <HAL_DMA_IRQHandler+0xa34>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a68      	ldr	r2, [pc, #416]	; (8007b5c <HAL_DMA_IRQHandler+0xa38>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d00e      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a67      	ldr	r2, [pc, #412]	; (8007b60 <HAL_DMA_IRQHandler+0xa3c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d009      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a65      	ldr	r2, [pc, #404]	; (8007b64 <HAL_DMA_IRQHandler+0xa40>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d004      	beq.n	80079dc <HAL_DMA_IRQHandler+0x8b8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a64      	ldr	r2, [pc, #400]	; (8007b68 <HAL_DMA_IRQHandler+0xa44>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d108      	bne.n	80079ee <HAL_DMA_IRQHandler+0x8ca>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0201 	bic.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	e007      	b.n	80079fe <HAL_DMA_IRQHandler+0x8da>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d307      	bcc.n	8007a1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f2      	bne.n	80079fe <HAL_DMA_IRQHandler+0x8da>
 8007a18:	e000      	b.n	8007a1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007a1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007a32:	e003      	b.n	8007a3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8272 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
 8007a56:	e26c      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a43      	ldr	r2, [pc, #268]	; (8007b6c <HAL_DMA_IRQHandler+0xa48>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d022      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a42      	ldr	r2, [pc, #264]	; (8007b70 <HAL_DMA_IRQHandler+0xa4c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d01d      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a40      	ldr	r2, [pc, #256]	; (8007b74 <HAL_DMA_IRQHandler+0xa50>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d018      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3f      	ldr	r2, [pc, #252]	; (8007b78 <HAL_DMA_IRQHandler+0xa54>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d013      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a3d      	ldr	r2, [pc, #244]	; (8007b7c <HAL_DMA_IRQHandler+0xa58>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00e      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a3c      	ldr	r2, [pc, #240]	; (8007b80 <HAL_DMA_IRQHandler+0xa5c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d009      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a3a      	ldr	r2, [pc, #232]	; (8007b84 <HAL_DMA_IRQHandler+0xa60>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d004      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0x984>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a39      	ldr	r2, [pc, #228]	; (8007b88 <HAL_DMA_IRQHandler+0xa64>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d101      	bne.n	8007aac <HAL_DMA_IRQHandler+0x988>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e000      	b.n	8007aae <HAL_DMA_IRQHandler+0x98a>
 8007aac:	2300      	movs	r3, #0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 823f 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	409a      	lsls	r2, r3
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80cd 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xb48>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80c7 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d049      	beq.n	8007b8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8210 	beq.w	8007f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b14:	e20a      	b.n	8007f2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 8206 	beq.w	8007f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b28:	e200      	b.n	8007f2c <HAL_DMA_IRQHandler+0xe08>
 8007b2a:	bf00      	nop
 8007b2c:	40020010 	.word	0x40020010
 8007b30:	40020028 	.word	0x40020028
 8007b34:	40020040 	.word	0x40020040
 8007b38:	40020058 	.word	0x40020058
 8007b3c:	40020070 	.word	0x40020070
 8007b40:	40020088 	.word	0x40020088
 8007b44:	400200a0 	.word	0x400200a0
 8007b48:	400200b8 	.word	0x400200b8
 8007b4c:	40020410 	.word	0x40020410
 8007b50:	40020428 	.word	0x40020428
 8007b54:	40020440 	.word	0x40020440
 8007b58:	40020458 	.word	0x40020458
 8007b5c:	40020470 	.word	0x40020470
 8007b60:	40020488 	.word	0x40020488
 8007b64:	400204a0 	.word	0x400204a0
 8007b68:	400204b8 	.word	0x400204b8
 8007b6c:	58025408 	.word	0x58025408
 8007b70:	5802541c 	.word	0x5802541c
 8007b74:	58025430 	.word	0x58025430
 8007b78:	58025444 	.word	0x58025444
 8007b7c:	58025458 	.word	0x58025458
 8007b80:	5802546c 	.word	0x5802546c
 8007b84:	58025480 	.word	0x58025480
 8007b88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d160      	bne.n	8007c58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7f      	ldr	r2, [pc, #508]	; (8007d98 <HAL_DMA_IRQHandler+0xc74>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d04a      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a7d      	ldr	r2, [pc, #500]	; (8007d9c <HAL_DMA_IRQHandler+0xc78>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d045      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a7c      	ldr	r2, [pc, #496]	; (8007da0 <HAL_DMA_IRQHandler+0xc7c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d040      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a7a      	ldr	r2, [pc, #488]	; (8007da4 <HAL_DMA_IRQHandler+0xc80>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d03b      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a79      	ldr	r2, [pc, #484]	; (8007da8 <HAL_DMA_IRQHandler+0xc84>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d036      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a77      	ldr	r2, [pc, #476]	; (8007dac <HAL_DMA_IRQHandler+0xc88>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d031      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a76      	ldr	r2, [pc, #472]	; (8007db0 <HAL_DMA_IRQHandler+0xc8c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d02c      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a74      	ldr	r2, [pc, #464]	; (8007db4 <HAL_DMA_IRQHandler+0xc90>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d027      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a73      	ldr	r2, [pc, #460]	; (8007db8 <HAL_DMA_IRQHandler+0xc94>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d022      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a71      	ldr	r2, [pc, #452]	; (8007dbc <HAL_DMA_IRQHandler+0xc98>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d01d      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a70      	ldr	r2, [pc, #448]	; (8007dc0 <HAL_DMA_IRQHandler+0xc9c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d018      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a6e      	ldr	r2, [pc, #440]	; (8007dc4 <HAL_DMA_IRQHandler+0xca0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a6d      	ldr	r2, [pc, #436]	; (8007dc8 <HAL_DMA_IRQHandler+0xca4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00e      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a6b      	ldr	r2, [pc, #428]	; (8007dcc <HAL_DMA_IRQHandler+0xca8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a6a      	ldr	r2, [pc, #424]	; (8007dd0 <HAL_DMA_IRQHandler+0xcac>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xb12>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a68      	ldr	r2, [pc, #416]	; (8007dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d108      	bne.n	8007c48 <HAL_DMA_IRQHandler+0xb24>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0208 	bic.w	r2, r2, #8
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e007      	b.n	8007c58 <HAL_DMA_IRQHandler+0xb34>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0204 	bic.w	r2, r2, #4
 8007c56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8165 	beq.w	8007f2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c6a:	e15f      	b.n	8007f2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2202      	movs	r2, #2
 8007c76:	409a      	lsls	r2, r3
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80c5 	beq.w	8007e0c <HAL_DMA_IRQHandler+0xce8>
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80bf 	beq.w	8007e0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2202      	movs	r2, #2
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d018      	beq.n	8007cda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d109      	bne.n	8007cc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 813a 	beq.w	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cc4:	e134      	b.n	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 8130 	beq.w	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd8:	e12a      	b.n	8007f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 8089 	bne.w	8007df8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a2b      	ldr	r2, [pc, #172]	; (8007d98 <HAL_DMA_IRQHandler+0xc74>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d04a      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a29      	ldr	r2, [pc, #164]	; (8007d9c <HAL_DMA_IRQHandler+0xc78>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d045      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <HAL_DMA_IRQHandler+0xc7c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d040      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a26      	ldr	r2, [pc, #152]	; (8007da4 <HAL_DMA_IRQHandler+0xc80>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d03b      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a25      	ldr	r2, [pc, #148]	; (8007da8 <HAL_DMA_IRQHandler+0xc84>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d036      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a23      	ldr	r2, [pc, #140]	; (8007dac <HAL_DMA_IRQHandler+0xc88>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d031      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a22      	ldr	r2, [pc, #136]	; (8007db0 <HAL_DMA_IRQHandler+0xc8c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d02c      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a20      	ldr	r2, [pc, #128]	; (8007db4 <HAL_DMA_IRQHandler+0xc90>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d027      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1f      	ldr	r2, [pc, #124]	; (8007db8 <HAL_DMA_IRQHandler+0xc94>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d022      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <HAL_DMA_IRQHandler+0xc98>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01d      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1c      	ldr	r2, [pc, #112]	; (8007dc0 <HAL_DMA_IRQHandler+0xc9c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d018      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1a      	ldr	r2, [pc, #104]	; (8007dc4 <HAL_DMA_IRQHandler+0xca0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a19      	ldr	r2, [pc, #100]	; (8007dc8 <HAL_DMA_IRQHandler+0xca4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00e      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <HAL_DMA_IRQHandler+0xca8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d009      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a16      	ldr	r2, [pc, #88]	; (8007dd0 <HAL_DMA_IRQHandler+0xcac>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d004      	beq.n	8007d86 <HAL_DMA_IRQHandler+0xc62>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a14      	ldr	r2, [pc, #80]	; (8007dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d128      	bne.n	8007dd8 <HAL_DMA_IRQHandler+0xcb4>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0214 	bic.w	r2, r2, #20
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e027      	b.n	8007de8 <HAL_DMA_IRQHandler+0xcc4>
 8007d98:	40020010 	.word	0x40020010
 8007d9c:	40020028 	.word	0x40020028
 8007da0:	40020040 	.word	0x40020040
 8007da4:	40020058 	.word	0x40020058
 8007da8:	40020070 	.word	0x40020070
 8007dac:	40020088 	.word	0x40020088
 8007db0:	400200a0 	.word	0x400200a0
 8007db4:	400200b8 	.word	0x400200b8
 8007db8:	40020410 	.word	0x40020410
 8007dbc:	40020428 	.word	0x40020428
 8007dc0:	40020440 	.word	0x40020440
 8007dc4:	40020458 	.word	0x40020458
 8007dc8:	40020470 	.word	0x40020470
 8007dcc:	40020488 	.word	0x40020488
 8007dd0:	400204a0 	.word	0x400204a0
 8007dd4:	400204b8 	.word	0x400204b8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 020a 	bic.w	r2, r2, #10
 8007de6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8097 	beq.w	8007f30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e0a:	e091      	b.n	8007f30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	2208      	movs	r2, #8
 8007e16:	409a      	lsls	r2, r3
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8088 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8082 	beq.w	8007f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a41      	ldr	r2, [pc, #260]	; (8007f38 <HAL_DMA_IRQHandler+0xe14>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d04a      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a3f      	ldr	r2, [pc, #252]	; (8007f3c <HAL_DMA_IRQHandler+0xe18>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d045      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a3e      	ldr	r2, [pc, #248]	; (8007f40 <HAL_DMA_IRQHandler+0xe1c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d040      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a3c      	ldr	r2, [pc, #240]	; (8007f44 <HAL_DMA_IRQHandler+0xe20>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d03b      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3b      	ldr	r2, [pc, #236]	; (8007f48 <HAL_DMA_IRQHandler+0xe24>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d036      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a39      	ldr	r2, [pc, #228]	; (8007f4c <HAL_DMA_IRQHandler+0xe28>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d031      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a38      	ldr	r2, [pc, #224]	; (8007f50 <HAL_DMA_IRQHandler+0xe2c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d02c      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a36      	ldr	r2, [pc, #216]	; (8007f54 <HAL_DMA_IRQHandler+0xe30>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d027      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a35      	ldr	r2, [pc, #212]	; (8007f58 <HAL_DMA_IRQHandler+0xe34>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d022      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a33      	ldr	r2, [pc, #204]	; (8007f5c <HAL_DMA_IRQHandler+0xe38>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d01d      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a32      	ldr	r2, [pc, #200]	; (8007f60 <HAL_DMA_IRQHandler+0xe3c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d018      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a30      	ldr	r2, [pc, #192]	; (8007f64 <HAL_DMA_IRQHandler+0xe40>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a2f      	ldr	r2, [pc, #188]	; (8007f68 <HAL_DMA_IRQHandler+0xe44>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00e      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a2d      	ldr	r2, [pc, #180]	; (8007f6c <HAL_DMA_IRQHandler+0xe48>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d009      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a2c      	ldr	r2, [pc, #176]	; (8007f70 <HAL_DMA_IRQHandler+0xe4c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_DMA_IRQHandler+0xdaa>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <HAL_DMA_IRQHandler+0xe50>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d108      	bne.n	8007ee0 <HAL_DMA_IRQHandler+0xdbc>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 021c 	bic.w	r2, r2, #28
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e007      	b.n	8007ef0 <HAL_DMA_IRQHandler+0xdcc>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 020e 	bic.w	r2, r2, #14
 8007eee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	2201      	movs	r2, #1
 8007efa:	409a      	lsls	r2, r3
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
 8007f26:	e004      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f32:	3728      	adds	r7, #40	; 0x28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40020010 	.word	0x40020010
 8007f3c:	40020028 	.word	0x40020028
 8007f40:	40020040 	.word	0x40020040
 8007f44:	40020058 	.word	0x40020058
 8007f48:	40020070 	.word	0x40020070
 8007f4c:	40020088 	.word	0x40020088
 8007f50:	400200a0 	.word	0x400200a0
 8007f54:	400200b8 	.word	0x400200b8
 8007f58:	40020410 	.word	0x40020410
 8007f5c:	40020428 	.word	0x40020428
 8007f60:	40020440 	.word	0x40020440
 8007f64:	40020458 	.word	0x40020458
 8007f68:	40020470 	.word	0x40020470
 8007f6c:	40020488 	.word	0x40020488
 8007f70:	400204a0 	.word	0x400204a0
 8007f74:	400204b8 	.word	0x400204b8

08007f78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a42      	ldr	r2, [pc, #264]	; (8008090 <DMA_CalcBaseAndBitshift+0x118>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d04a      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a41      	ldr	r2, [pc, #260]	; (8008094 <DMA_CalcBaseAndBitshift+0x11c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d045      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a3f      	ldr	r2, [pc, #252]	; (8008098 <DMA_CalcBaseAndBitshift+0x120>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d040      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a3e      	ldr	r2, [pc, #248]	; (800809c <DMA_CalcBaseAndBitshift+0x124>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d03b      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a3c      	ldr	r2, [pc, #240]	; (80080a0 <DMA_CalcBaseAndBitshift+0x128>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d036      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3b      	ldr	r2, [pc, #236]	; (80080a4 <DMA_CalcBaseAndBitshift+0x12c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d031      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a39      	ldr	r2, [pc, #228]	; (80080a8 <DMA_CalcBaseAndBitshift+0x130>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d02c      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a38      	ldr	r2, [pc, #224]	; (80080ac <DMA_CalcBaseAndBitshift+0x134>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d027      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a36      	ldr	r2, [pc, #216]	; (80080b0 <DMA_CalcBaseAndBitshift+0x138>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d022      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a35      	ldr	r2, [pc, #212]	; (80080b4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d01d      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a33      	ldr	r2, [pc, #204]	; (80080b8 <DMA_CalcBaseAndBitshift+0x140>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a32      	ldr	r2, [pc, #200]	; (80080bc <DMA_CalcBaseAndBitshift+0x144>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a30      	ldr	r2, [pc, #192]	; (80080c0 <DMA_CalcBaseAndBitshift+0x148>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2f      	ldr	r2, [pc, #188]	; (80080c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2d      	ldr	r2, [pc, #180]	; (80080c8 <DMA_CalcBaseAndBitshift+0x150>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <DMA_CalcBaseAndBitshift+0xa8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a2c      	ldr	r2, [pc, #176]	; (80080cc <DMA_CalcBaseAndBitshift+0x154>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d101      	bne.n	8008024 <DMA_CalcBaseAndBitshift+0xac>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <DMA_CalcBaseAndBitshift+0xae>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d024      	beq.n	8008074 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	3b10      	subs	r3, #16
 8008032:	4a27      	ldr	r2, [pc, #156]	; (80080d0 <DMA_CalcBaseAndBitshift+0x158>)
 8008034:	fba2 2303 	umull	r2, r3, r2, r3
 8008038:	091b      	lsrs	r3, r3, #4
 800803a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	4a24      	ldr	r2, [pc, #144]	; (80080d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008044:	5cd3      	ldrb	r3, [r2, r3]
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b03      	cmp	r3, #3
 8008050:	d908      	bls.n	8008064 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	4b1f      	ldr	r3, [pc, #124]	; (80080d8 <DMA_CalcBaseAndBitshift+0x160>)
 800805a:	4013      	ands	r3, r2
 800805c:	1d1a      	adds	r2, r3, #4
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	659a      	str	r2, [r3, #88]	; 0x58
 8008062:	e00d      	b.n	8008080 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <DMA_CalcBaseAndBitshift+0x160>)
 800806c:	4013      	ands	r3, r2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6593      	str	r3, [r2, #88]	; 0x58
 8008072:	e005      	b.n	8008080 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	40020010 	.word	0x40020010
 8008094:	40020028 	.word	0x40020028
 8008098:	40020040 	.word	0x40020040
 800809c:	40020058 	.word	0x40020058
 80080a0:	40020070 	.word	0x40020070
 80080a4:	40020088 	.word	0x40020088
 80080a8:	400200a0 	.word	0x400200a0
 80080ac:	400200b8 	.word	0x400200b8
 80080b0:	40020410 	.word	0x40020410
 80080b4:	40020428 	.word	0x40020428
 80080b8:	40020440 	.word	0x40020440
 80080bc:	40020458 	.word	0x40020458
 80080c0:	40020470 	.word	0x40020470
 80080c4:	40020488 	.word	0x40020488
 80080c8:	400204a0 	.word	0x400204a0
 80080cc:	400204b8 	.word	0x400204b8
 80080d0:	aaaaaaab 	.word	0xaaaaaaab
 80080d4:	08010bbc 	.word	0x08010bbc
 80080d8:	fffffc00 	.word	0xfffffc00

080080dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d120      	bne.n	8008132 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d858      	bhi.n	80081aa <DMA_CheckFifoParam+0xce>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <DMA_CheckFifoParam+0x24>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008111 	.word	0x08008111
 8008104:	08008123 	.word	0x08008123
 8008108:	08008111 	.word	0x08008111
 800810c:	080081ab 	.word	0x080081ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d048      	beq.n	80081ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008120:	e045      	b.n	80081ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800812a:	d142      	bne.n	80081b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008130:	e03f      	b.n	80081b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800813a:	d123      	bne.n	8008184 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	2b03      	cmp	r3, #3
 8008142:	d838      	bhi.n	80081b6 <DMA_CheckFifoParam+0xda>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <DMA_CheckFifoParam+0x70>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	0800815d 	.word	0x0800815d
 8008150:	08008163 	.word	0x08008163
 8008154:	0800815d 	.word	0x0800815d
 8008158:	08008175 	.word	0x08008175
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
        break;
 8008160:	e030      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d025      	beq.n	80081ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008172:	e022      	b.n	80081ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800817c:	d11f      	bne.n	80081be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008182:	e01c      	b.n	80081be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	2b02      	cmp	r3, #2
 800818a:	d902      	bls.n	8008192 <DMA_CheckFifoParam+0xb6>
 800818c:	2b03      	cmp	r3, #3
 800818e:	d003      	beq.n	8008198 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008190:	e018      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	73fb      	strb	r3, [r7, #15]
        break;
 8008196:	e015      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
    break;
 80081a8:	e00b      	b.n	80081c2 <DMA_CheckFifoParam+0xe6>
        break;
 80081aa:	bf00      	nop
 80081ac:	e00a      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
        break;
 80081ae:	bf00      	nop
 80081b0:	e008      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
        break;
 80081b2:	bf00      	nop
 80081b4:	e006      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
        break;
 80081b6:	bf00      	nop
 80081b8:	e004      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
        break;
 80081ba:	bf00      	nop
 80081bc:	e002      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
        break;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <DMA_CheckFifoParam+0xe8>
    break;
 80081c2:	bf00      	nop
    }
  }

  return status;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop

080081d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a38      	ldr	r2, [pc, #224]	; (80082c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d022      	beq.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a36      	ldr	r2, [pc, #216]	; (80082cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d01d      	beq.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a35      	ldr	r2, [pc, #212]	; (80082d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d018      	beq.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a33      	ldr	r2, [pc, #204]	; (80082d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d013      	beq.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a32      	ldr	r2, [pc, #200]	; (80082d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00e      	beq.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a30      	ldr	r2, [pc, #192]	; (80082dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d009      	beq.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a2f      	ldr	r2, [pc, #188]	; (80082e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d004      	beq.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a2d      	ldr	r2, [pc, #180]	; (80082e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d101      	bne.n	8008236 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01a      	beq.n	8008272 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	3b08      	subs	r3, #8
 8008244:	4a28      	ldr	r2, [pc, #160]	; (80082e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008246:	fba2 2303 	umull	r2, r3, r2, r3
 800824a:	091b      	lsrs	r3, r3, #4
 800824c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4b26      	ldr	r3, [pc, #152]	; (80082ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a24      	ldr	r2, [pc, #144]	; (80082f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008260:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	2201      	movs	r2, #1
 800826a:	409a      	lsls	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008270:	e024      	b.n	80082bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	3b10      	subs	r3, #16
 800827a:	4a1e      	ldr	r2, [pc, #120]	; (80082f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800827c:	fba2 2303 	umull	r2, r3, r2, r3
 8008280:	091b      	lsrs	r3, r3, #4
 8008282:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4a1c      	ldr	r2, [pc, #112]	; (80082f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d806      	bhi.n	800829a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4a1b      	ldr	r2, [pc, #108]	; (80082fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d902      	bls.n	800829a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3308      	adds	r3, #8
 8008298:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4b18      	ldr	r3, [pc, #96]	; (8008300 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a16      	ldr	r2, [pc, #88]	; (8008304 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80082ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f003 031f 	and.w	r3, r3, #31
 80082b4:	2201      	movs	r2, #1
 80082b6:	409a      	lsls	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082bc:	bf00      	nop
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	58025408 	.word	0x58025408
 80082cc:	5802541c 	.word	0x5802541c
 80082d0:	58025430 	.word	0x58025430
 80082d4:	58025444 	.word	0x58025444
 80082d8:	58025458 	.word	0x58025458
 80082dc:	5802546c 	.word	0x5802546c
 80082e0:	58025480 	.word	0x58025480
 80082e4:	58025494 	.word	0x58025494
 80082e8:	cccccccd 	.word	0xcccccccd
 80082ec:	16009600 	.word	0x16009600
 80082f0:	58025880 	.word	0x58025880
 80082f4:	aaaaaaab 	.word	0xaaaaaaab
 80082f8:	400204b8 	.word	0x400204b8
 80082fc:	4002040f 	.word	0x4002040f
 8008300:	10008200 	.word	0x10008200
 8008304:	40020880 	.word	0x40020880

08008308 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	b2db      	uxtb	r3, r3
 8008316:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d04a      	beq.n	80083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b08      	cmp	r3, #8
 8008322:	d847      	bhi.n	80083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a25      	ldr	r2, [pc, #148]	; (80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d022      	beq.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a24      	ldr	r2, [pc, #144]	; (80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d01d      	beq.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a22      	ldr	r2, [pc, #136]	; (80083c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d018      	beq.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a21      	ldr	r2, [pc, #132]	; (80083cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d013      	beq.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00e      	beq.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d009      	beq.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a1c      	ldr	r2, [pc, #112]	; (80083d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d004      	beq.n	8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a1b      	ldr	r2, [pc, #108]	; (80083dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d101      	bne.n	8008378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	4b17      	ldr	r3, [pc, #92]	; (80083e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	461a      	mov	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a15      	ldr	r2, [pc, #84]	; (80083e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008390:	671a      	str	r2, [r3, #112]	; 0x70
 8008392:	e009      	b.n	80083a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4b14      	ldr	r3, [pc, #80]	; (80083e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	461a      	mov	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a11      	ldr	r2, [pc, #68]	; (80083ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80083a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	2201      	movs	r2, #1
 80083ae:	409a      	lsls	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	58025408 	.word	0x58025408
 80083c4:	5802541c 	.word	0x5802541c
 80083c8:	58025430 	.word	0x58025430
 80083cc:	58025444 	.word	0x58025444
 80083d0:	58025458 	.word	0x58025458
 80083d4:	5802546c 	.word	0x5802546c
 80083d8:	58025480 	.word	0x58025480
 80083dc:	58025494 	.word	0x58025494
 80083e0:	1600963f 	.word	0x1600963f
 80083e4:	58025940 	.word	0x58025940
 80083e8:	1000823f 	.word	0x1000823f
 80083ec:	40020940 	.word	0x40020940

080083f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e0cf      	b.n	80085a2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2223      	movs	r2, #35	; 0x23
 8008410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7fd f89f 	bl	8005558 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800841a:	4b64      	ldr	r3, [pc, #400]	; (80085ac <HAL_ETH_Init+0x1bc>)
 800841c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008420:	4a62      	ldr	r2, [pc, #392]	; (80085ac <HAL_ETH_Init+0x1bc>)
 8008422:	f043 0302 	orr.w	r3, r3, #2
 8008426:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800842a:	4b60      	ldr	r3, [pc, #384]	; (80085ac <HAL_ETH_Init+0x1bc>)
 800842c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008430:	f003 0302 	and.w	r3, r3, #2
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7a1b      	ldrb	r3, [r3, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008440:	2000      	movs	r0, #0
 8008442:	f7fd fc8b 	bl	8005d5c <HAL_SYSCFG_ETHInterfaceSelect>
 8008446:	e003      	b.n	8008450 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8008448:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800844c:	f7fd fc86 	bl	8005d5c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8008450:	4b57      	ldr	r3, [pc, #348]	; (80085b0 <HAL_ETH_Init+0x1c0>)
 8008452:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800846a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800846c:	f7fd fc3a 	bl	8005ce4 <HAL_GetTick>
 8008470:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008472:	e011      	b.n	8008498 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8008474:	f7fd fc36 	bl	8005ce4 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008482:	d909      	bls.n	8008498 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2204      	movs	r2, #4
 8008488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	22e0      	movs	r2, #224	; 0xe0
 8008490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e084      	b.n	80085a2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e4      	bne.n	8008474 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f886 	bl	80085bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80084b0:	f001 fefc 	bl	800a2ac <HAL_RCC_GetHCLKFreq>
 80084b4:	4603      	mov	r3, r0
 80084b6:	4a3f      	ldr	r2, [pc, #252]	; (80085b4 <HAL_ETH_Init+0x1c4>)
 80084b8:	fba2 2303 	umull	r2, r3, r2, r3
 80084bc:	0c9a      	lsrs	r2, r3, #18
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3a01      	subs	r2, #1
 80084c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fa71 	bl	80089b0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80084da:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6812      	ldr	r2, [r2, #0]
 80084e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	22e0      	movs	r2, #224	; 0xe0
 8008506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e049      	b.n	80085a2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008516:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800851a:	4b27      	ldr	r3, [pc, #156]	; (80085b8 <HAL_ETH_Init+0x1c8>)
 800851c:	4013      	ands	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6952      	ldr	r2, [r2, #20]
 8008522:	0051      	lsls	r1, r2, #1
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	430b      	orrs	r3, r1
 800852a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800852e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fad9 	bl	8008aea <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fb1f 	bl	8008b7c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	3305      	adds	r3, #5
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	021a      	lsls	r2, r3, #8
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	4619      	mov	r1, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	3303      	adds	r3, #3
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	061a      	lsls	r2, r3, #24
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	3302      	adds	r3, #2
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	041b      	lsls	r3, r3, #16
 8008570:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	3301      	adds	r3, #1
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800857c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800858a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800858c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2210      	movs	r2, #16
 800859c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	58024400 	.word	0x58024400
 80085b0:	58000400 	.word	0x58000400
 80085b4:	431bde83 	.word	0x431bde83
 80085b8:	ffff8001 	.word	0xffff8001

080085bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80085d6:	f001 fe69 	bl	800a2ac <HAL_RCC_GetHCLKFreq>
 80085da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4a1e      	ldr	r2, [pc, #120]	; (8008658 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d908      	bls.n	80085f6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4a1d      	ldr	r2, [pc, #116]	; (800865c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d804      	bhi.n	80085f6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e027      	b.n	8008646 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a18      	ldr	r2, [pc, #96]	; (800865c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d908      	bls.n	8008610 <HAL_ETH_SetMDIOClockRange+0x54>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4a17      	ldr	r2, [pc, #92]	; (8008660 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d204      	bcs.n	8008610 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	e01a      	b.n	8008646 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4a13      	ldr	r2, [pc, #76]	; (8008660 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d303      	bcc.n	8008620 <HAL_ETH_SetMDIOClockRange+0x64>
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	4a12      	ldr	r2, [pc, #72]	; (8008664 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d911      	bls.n	8008644 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4a10      	ldr	r2, [pc, #64]	; (8008664 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d908      	bls.n	800863a <HAL_ETH_SetMDIOClockRange+0x7e>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4a0f      	ldr	r2, [pc, #60]	; (8008668 <HAL_ETH_SetMDIOClockRange+0xac>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d804      	bhi.n	800863a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e005      	b.n	8008646 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e000      	b.n	8008646 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008644:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	01312cff 	.word	0x01312cff
 800865c:	02160ebf 	.word	0x02160ebf
 8008660:	03938700 	.word	0x03938700
 8008664:	05f5e0ff 	.word	0x05f5e0ff
 8008668:	08f0d17f 	.word	0x08f0d17f

0800866c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800867e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	791b      	ldrb	r3, [r3, #4]
 8008684:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8008686:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	7b1b      	ldrb	r3, [r3, #12]
 800868c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800868e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	7b5b      	ldrb	r3, [r3, #13]
 8008694:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	7b9b      	ldrb	r3, [r3, #14]
 800869c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800869e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	7bdb      	ldrb	r3, [r3, #15]
 80086a4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80086a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	7c12      	ldrb	r2, [r2, #16]
 80086ac:	2a00      	cmp	r2, #0
 80086ae:	d102      	bne.n	80086b6 <ETH_SetMACConfig+0x4a>
 80086b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80086b4:	e000      	b.n	80086b8 <ETH_SetMACConfig+0x4c>
 80086b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80086b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	7c52      	ldrb	r2, [r2, #17]
 80086be:	2a00      	cmp	r2, #0
 80086c0:	d102      	bne.n	80086c8 <ETH_SetMACConfig+0x5c>
 80086c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086c6:	e000      	b.n	80086ca <ETH_SetMACConfig+0x5e>
 80086c8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80086ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	7c9b      	ldrb	r3, [r3, #18]
 80086d0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80086d2:	431a      	orrs	r2, r3
               macconf->Speed |
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80086d8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80086de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	7f1b      	ldrb	r3, [r3, #28]
 80086e4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80086e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	7f5b      	ldrb	r3, [r3, #29]
 80086ec:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80086ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	7f92      	ldrb	r2, [r2, #30]
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	d102      	bne.n	80086fe <ETH_SetMACConfig+0x92>
 80086f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086fc:	e000      	b.n	8008700 <ETH_SetMACConfig+0x94>
 80086fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8008700:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	7fdb      	ldrb	r3, [r3, #31]
 8008706:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8008708:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008710:	2a00      	cmp	r2, #0
 8008712:	d102      	bne.n	800871a <ETH_SetMACConfig+0xae>
 8008714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008718:	e000      	b.n	800871c <ETH_SetMACConfig+0xb0>
 800871a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800871c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8008722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800872a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800872c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	4b56      	ldr	r3, [pc, #344]	; (8008898 <ETH_SetMACConfig+0x22c>)
 800873e:	4013      	ands	r3, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	68f9      	ldr	r1, [r7, #12]
 8008746:	430b      	orrs	r3, r1
 8008748:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008756:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008758:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008760:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8008762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800876a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800876c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008774:	2a00      	cmp	r2, #0
 8008776:	d102      	bne.n	800877e <ETH_SetMACConfig+0x112>
 8008778:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800877c:	e000      	b.n	8008780 <ETH_SetMACConfig+0x114>
 800877e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8008780:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	4b42      	ldr	r3, [pc, #264]	; (800889c <ETH_SetMACConfig+0x230>)
 8008792:	4013      	ands	r3, r2
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6812      	ldr	r2, [r2, #0]
 8008798:	68f9      	ldr	r1, [r7, #12]
 800879a:	430b      	orrs	r3, r1
 800879c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087a4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	4b3a      	ldr	r3, [pc, #232]	; (80088a0 <ETH_SetMACConfig+0x234>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	68f9      	ldr	r1, [r7, #12]
 80087be:	430b      	orrs	r3, r1
 80087c0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80087c8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80087ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d101      	bne.n	80087de <ETH_SetMACConfig+0x172>
 80087da:	2280      	movs	r2, #128	; 0x80
 80087dc:	e000      	b.n	80087e0 <ETH_SetMACConfig+0x174>
 80087de:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80087e0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087f2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80087f6:	4013      	ands	r3, r2
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6812      	ldr	r2, [r2, #0]
 80087fc:	68f9      	ldr	r1, [r7, #12]
 80087fe:	430b      	orrs	r3, r1
 8008800:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008808:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008810:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800881e:	f023 0103 	bic.w	r1, r3, #3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	430a      	orrs	r2, r1
 800882a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008836:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008852:	2a00      	cmp	r2, #0
 8008854:	d101      	bne.n	800885a <ETH_SetMACConfig+0x1ee>
 8008856:	2240      	movs	r2, #64	; 0x40
 8008858:	e000      	b.n	800885c <ETH_SetMACConfig+0x1f0>
 800885a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800885c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008864:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800886e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008870:	4313      	orrs	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800887c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	430a      	orrs	r2, r1
 8008888:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800888c:	bf00      	nop
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	00048083 	.word	0x00048083
 800889c:	c0f88000 	.word	0xc0f88000
 80088a0:	fffffef0 	.word	0xfffffef0

080088a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	4b38      	ldr	r3, [pc, #224]	; (800899c <ETH_SetDMAConfig+0xf8>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	6811      	ldr	r1, [r2, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6812      	ldr	r2, [r2, #0]
 80088c4:	430b      	orrs	r3, r1
 80088c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088ca:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	791b      	ldrb	r3, [r3, #4]
 80088d0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80088d6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	7b1b      	ldrb	r3, [r3, #12]
 80088dc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	4b2c      	ldr	r3, [pc, #176]	; (80089a0 <ETH_SetDMAConfig+0xfc>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6812      	ldr	r2, [r2, #0]
 80088f4:	68f9      	ldr	r1, [r7, #12]
 80088f6:	430b      	orrs	r3, r1
 80088f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088fc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	7b5b      	ldrb	r3, [r3, #13]
 8008902:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008908:	4313      	orrs	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008914:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008918:	4b22      	ldr	r3, [pc, #136]	; (80089a4 <ETH_SetDMAConfig+0x100>)
 800891a:	4013      	ands	r3, r2
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	68f9      	ldr	r1, [r7, #12]
 8008922:	430b      	orrs	r3, r1
 8008924:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008928:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	7d1b      	ldrb	r3, [r3, #20]
 8008934:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008936:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	7f5b      	ldrb	r3, [r3, #29]
 800893c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800894e:	4b16      	ldr	r3, [pc, #88]	; (80089a8 <ETH_SetDMAConfig+0x104>)
 8008950:	4013      	ands	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6812      	ldr	r2, [r2, #0]
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	430b      	orrs	r3, r1
 800895a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800895e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	7f1b      	ldrb	r3, [r3, #28]
 8008966:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008978:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <ETH_SetDMAConfig+0x108>)
 800897e:	4013      	ands	r3, r2
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6812      	ldr	r2, [r2, #0]
 8008984:	68f9      	ldr	r1, [r7, #12]
 8008986:	430b      	orrs	r3, r1
 8008988:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800898c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8008990:	bf00      	nop
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	ffff87fd 	.word	0xffff87fd
 80089a0:	ffff2ffe 	.word	0xffff2ffe
 80089a4:	fffec000 	.word	0xfffec000
 80089a8:	ffc0efef 	.word	0xffc0efef
 80089ac:	7fc0ffff 	.word	0x7fc0ffff

080089b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b0a4      	sub	sp, #144	; 0x90
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80089b8:	2301      	movs	r3, #1
 80089ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80089be:	2300      	movs	r3, #0
 80089c0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80089da:	2301      	movs	r3, #1
 80089dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80089ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089f0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008a08:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008a0c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008a14:	2300      	movs	r3, #0
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008a24:	2300      	movs	r3, #0
 8008a26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008a32:	2300      	movs	r3, #0
 8008a34:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008a48:	2320      	movs	r3, #32
 8008a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008a5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a64:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff fde6 	bl	800866c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008aba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008abe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008ac4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ac8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8008ad0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff fee1 	bl	80088a4 <ETH_SetDMAConfig>
}
 8008ae2:	bf00      	nop
 8008ae4:	3790      	adds	r7, #144	; 0x90
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	e01d      	b.n	8008b34 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68d9      	ldr	r1, [r3, #12]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4613      	mov	r3, r2
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	4413      	add	r3, r2
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	440b      	add	r3, r1
 8008b08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008b22:	68b9      	ldr	r1, [r7, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	3206      	adds	r2, #6
 8008b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d9de      	bls.n	8008af8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	e023      	b.n	8008bd2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6919      	ldr	r1, [r3, #16]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4613      	mov	r3, r2
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	4413      	add	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	440b      	add	r3, r1
 8008b9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2200      	movs	r2, #0
 8008bac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008bc0:	68b9      	ldr	r1, [r7, #8]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	3212      	adds	r2, #18
 8008bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d9d8      	bls.n	8008b8a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfe:	461a      	mov	r2, r3
 8008c00:	2303      	movs	r3, #3
 8008c02:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691a      	ldr	r2, [r3, #16]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c12:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c26:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b089      	sub	sp, #36	; 0x24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c46:	4b89      	ldr	r3, [pc, #548]	; (8008e6c <HAL_GPIO_Init+0x234>)
 8008c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c4a:	e194      	b.n	8008f76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	2101      	movs	r1, #1
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	fa01 f303 	lsl.w	r3, r1, r3
 8008c58:	4013      	ands	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 8186 	beq.w	8008f70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f003 0303 	and.w	r3, r3, #3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d005      	beq.n	8008c7c <HAL_GPIO_Init+0x44>
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d130      	bne.n	8008cde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	2203      	movs	r2, #3
 8008c88:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4013      	ands	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	68da      	ldr	r2, [r3, #12]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	091b      	lsrs	r3, r3, #4
 8008cc8:	f003 0201 	and.w	r2, r3, #1
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d017      	beq.n	8008d1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	2203      	movs	r2, #3
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d123      	bne.n	8008d6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	08da      	lsrs	r2, r3, #3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3208      	adds	r2, #8
 8008d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	220f      	movs	r2, #15
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	43db      	mvns	r3, r3
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	4013      	ands	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	691a      	ldr	r2, [r3, #16]
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	08da      	lsrs	r2, r3, #3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3208      	adds	r2, #8
 8008d68:	69b9      	ldr	r1, [r7, #24]
 8008d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	2203      	movs	r2, #3
 8008d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7e:	43db      	mvns	r3, r3
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4013      	ands	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f003 0203 	and.w	r2, r3, #3
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	fa02 f303 	lsl.w	r3, r2, r3
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 80e0 	beq.w	8008f70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008db0:	4b2f      	ldr	r3, [pc, #188]	; (8008e70 <HAL_GPIO_Init+0x238>)
 8008db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008db6:	4a2e      	ldr	r2, [pc, #184]	; (8008e70 <HAL_GPIO_Init+0x238>)
 8008db8:	f043 0302 	orr.w	r3, r3, #2
 8008dbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008dc0:	4b2b      	ldr	r3, [pc, #172]	; (8008e70 <HAL_GPIO_Init+0x238>)
 8008dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dce:	4a29      	ldr	r2, [pc, #164]	; (8008e74 <HAL_GPIO_Init+0x23c>)
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	089b      	lsrs	r3, r3, #2
 8008dd4:	3302      	adds	r3, #2
 8008dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	220f      	movs	r2, #15
 8008de6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dea:	43db      	mvns	r3, r3
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	4013      	ands	r3, r2
 8008df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a20      	ldr	r2, [pc, #128]	; (8008e78 <HAL_GPIO_Init+0x240>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d052      	beq.n	8008ea0 <HAL_GPIO_Init+0x268>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a1f      	ldr	r2, [pc, #124]	; (8008e7c <HAL_GPIO_Init+0x244>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d031      	beq.n	8008e66 <HAL_GPIO_Init+0x22e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <HAL_GPIO_Init+0x248>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d02b      	beq.n	8008e62 <HAL_GPIO_Init+0x22a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a1d      	ldr	r2, [pc, #116]	; (8008e84 <HAL_GPIO_Init+0x24c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d025      	beq.n	8008e5e <HAL_GPIO_Init+0x226>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1c      	ldr	r2, [pc, #112]	; (8008e88 <HAL_GPIO_Init+0x250>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d01f      	beq.n	8008e5a <HAL_GPIO_Init+0x222>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1b      	ldr	r2, [pc, #108]	; (8008e8c <HAL_GPIO_Init+0x254>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d019      	beq.n	8008e56 <HAL_GPIO_Init+0x21e>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1a      	ldr	r2, [pc, #104]	; (8008e90 <HAL_GPIO_Init+0x258>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d013      	beq.n	8008e52 <HAL_GPIO_Init+0x21a>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a19      	ldr	r2, [pc, #100]	; (8008e94 <HAL_GPIO_Init+0x25c>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00d      	beq.n	8008e4e <HAL_GPIO_Init+0x216>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <HAL_GPIO_Init+0x260>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d007      	beq.n	8008e4a <HAL_GPIO_Init+0x212>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <HAL_GPIO_Init+0x264>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d101      	bne.n	8008e46 <HAL_GPIO_Init+0x20e>
 8008e42:	2309      	movs	r3, #9
 8008e44:	e02d      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e46:	230a      	movs	r3, #10
 8008e48:	e02b      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	e029      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e4e:	2307      	movs	r3, #7
 8008e50:	e027      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e52:	2306      	movs	r3, #6
 8008e54:	e025      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e56:	2305      	movs	r3, #5
 8008e58:	e023      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e5a:	2304      	movs	r3, #4
 8008e5c:	e021      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e01f      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e01d      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e01b      	b.n	8008ea2 <HAL_GPIO_Init+0x26a>
 8008e6a:	bf00      	nop
 8008e6c:	58000080 	.word	0x58000080
 8008e70:	58024400 	.word	0x58024400
 8008e74:	58000400 	.word	0x58000400
 8008e78:	58020000 	.word	0x58020000
 8008e7c:	58020400 	.word	0x58020400
 8008e80:	58020800 	.word	0x58020800
 8008e84:	58020c00 	.word	0x58020c00
 8008e88:	58021000 	.word	0x58021000
 8008e8c:	58021400 	.word	0x58021400
 8008e90:	58021800 	.word	0x58021800
 8008e94:	58021c00 	.word	0x58021c00
 8008e98:	58022000 	.word	0x58022000
 8008e9c:	58022400 	.word	0x58022400
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	f002 0203 	and.w	r2, r2, #3
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	4093      	lsls	r3, r2
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008eb2:	4938      	ldr	r1, [pc, #224]	; (8008f94 <HAL_GPIO_Init+0x35c>)
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	089b      	lsrs	r3, r3, #2
 8008eb8:	3302      	adds	r3, #2
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	43db      	mvns	r3, r3
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	4013      	ands	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	43db      	mvns	r3, r3
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	43db      	mvns	r3, r3
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	4013      	ands	r3, r2
 8008f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	3301      	adds	r3, #1
 8008f74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f47f ae63 	bne.w	8008c4c <HAL_GPIO_Init+0x14>
  }
}
 8008f86:	bf00      	nop
 8008f88:	bf00      	nop
 8008f8a:	3724      	adds	r7, #36	; 0x24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	58000400 	.word	0x58000400

08008f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	887b      	ldrh	r3, [r7, #2]
 8008faa:	4013      	ands	r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	73fb      	strb	r3, [r7, #15]
 8008fb4:	e001      	b.n	8008fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	807b      	strh	r3, [r7, #2]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fd8:	787b      	ldrb	r3, [r7, #1]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fde:	887a      	ldrh	r2, [r7, #2]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008fe4:	e003      	b.n	8008fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008fe6:	887b      	ldrh	r3, [r7, #2]
 8008fe8:	041a      	lsls	r2, r3, #16
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	619a      	str	r2, [r3, #24]
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	460b      	mov	r3, r1
 8009004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800900c:	887a      	ldrh	r2, [r7, #2]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4013      	ands	r3, r2
 8009012:	041a      	lsls	r2, r3, #16
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	43d9      	mvns	r1, r3
 8009018:	887b      	ldrh	r3, [r7, #2]
 800901a:	400b      	ands	r3, r1
 800901c:	431a      	orrs	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	619a      	str	r2, [r3, #24]
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
	...

08009030 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8009038:	4a08      	ldr	r2, [pc, #32]	; (800905c <HAL_HSEM_FastTake+0x2c>)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3320      	adds	r3, #32
 800903e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009042:	4a07      	ldr	r2, [pc, #28]	; (8009060 <HAL_HSEM_FastTake+0x30>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d101      	bne.n	800904c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	e000      	b.n	800904e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800904c:	2301      	movs	r3, #1
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	58026400 	.word	0x58026400
 8009060:	80000300 	.word	0x80000300

08009064 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800906e:	4906      	ldr	r1, [pc, #24]	; (8009088 <HAL_HSEM_Release+0x24>)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	58026400 	.word	0x58026400

0800908c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800908c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800908e:	b08f      	sub	sp, #60	; 0x3c
 8009090:	af0a      	add	r7, sp, #40	; 0x28
 8009092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e116      	b.n	80092cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7fc fc81 	bl	80059c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2203      	movs	r2, #3
 80090c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4618      	mov	r0, r3
 80090de:	f005 f977 	bl	800e3d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	687e      	ldr	r6, [r7, #4]
 80090ea:	466d      	mov	r5, sp
 80090ec:	f106 0410 	add.w	r4, r6, #16
 80090f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80090fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8009100:	1d33      	adds	r3, r6, #4
 8009102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009104:	6838      	ldr	r0, [r7, #0]
 8009106:	f005 f8f5 	bl	800e2f4 <USB_CoreInit>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e0d7      	b.n	80092cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f005 f965 	bl	800e3f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
 800912c:	e04a      	b.n	80091c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800912e:	7bfa      	ldrb	r2, [r7, #15]
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4613      	mov	r3, r2
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	440b      	add	r3, r1
 800913c:	333d      	adds	r3, #61	; 0x3d
 800913e:	2201      	movs	r2, #1
 8009140:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009142:	7bfa      	ldrb	r2, [r7, #15]
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	4613      	mov	r3, r2
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	4413      	add	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	440b      	add	r3, r1
 8009150:	333c      	adds	r3, #60	; 0x3c
 8009152:	7bfa      	ldrb	r2, [r7, #15]
 8009154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009156:	7bfa      	ldrb	r2, [r7, #15]
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	b298      	uxth	r0, r3
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	3344      	adds	r3, #68	; 0x44
 800916a:	4602      	mov	r2, r0
 800916c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	3340      	adds	r3, #64	; 0x40
 800917e:	2200      	movs	r2, #0
 8009180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009182:	7bfa      	ldrb	r2, [r7, #15]
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	3348      	adds	r3, #72	; 0x48
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009196:	7bfa      	ldrb	r2, [r7, #15]
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	4613      	mov	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	440b      	add	r3, r1
 80091a4:	334c      	adds	r3, #76	; 0x4c
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80091aa:	7bfa      	ldrb	r2, [r7, #15]
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	4613      	mov	r3, r2
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	440b      	add	r3, r1
 80091b8:	3354      	adds	r3, #84	; 0x54
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	3301      	adds	r3, #1
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	7bfa      	ldrb	r2, [r7, #15]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d3af      	bcc.n	800912e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]
 80091d2:	e044      	b.n	800925e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80091d4:	7bfa      	ldrb	r2, [r7, #15]
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	4613      	mov	r3, r2
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	440b      	add	r3, r1
 80091e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80091e6:	2200      	movs	r2, #0
 80091e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	440b      	add	r3, r1
 80091f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80091fc:	7bfa      	ldrb	r2, [r7, #15]
 80091fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009200:	7bfa      	ldrb	r2, [r7, #15]
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	4613      	mov	r3, r2
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	440b      	add	r3, r1
 800920e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009216:	7bfa      	ldrb	r2, [r7, #15]
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	4613      	mov	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800922c:	7bfa      	ldrb	r2, [r7, #15]
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4613      	mov	r3, r2
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	440b      	add	r3, r1
 800923a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009242:	7bfa      	ldrb	r2, [r7, #15]
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	440b      	add	r3, r1
 8009250:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	3301      	adds	r3, #1
 800925c:	73fb      	strb	r3, [r7, #15]
 800925e:	7bfa      	ldrb	r2, [r7, #15]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d3b5      	bcc.n	80091d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	603b      	str	r3, [r7, #0]
 800926e:	687e      	ldr	r6, [r7, #4]
 8009270:	466d      	mov	r5, sp
 8009272:	f106 0410 	add.w	r4, r6, #16
 8009276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800927a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800927c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800927e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009282:	e885 0003 	stmia.w	r5, {r0, r1}
 8009286:	1d33      	adds	r3, r6, #4
 8009288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800928a:	6838      	ldr	r0, [r7, #0]
 800928c:	f005 f8fe 	bl	800e48c <USB_DevInit>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d005      	beq.n	80092a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2202      	movs	r2, #2
 800929a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e014      	b.n	80092cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d102      	bne.n	80092c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f80a 	bl	80092d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f005 fabc 	bl	800e842 <USB_DevDisconnect>

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009302:	4b05      	ldr	r3, [pc, #20]	; (8009318 <HAL_PCDEx_ActivateLPM+0x44>)
 8009304:	4313      	orrs	r3, r2
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	10000003 	.word	0x10000003

0800931c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009324:	4b29      	ldr	r3, [pc, #164]	; (80093cc <HAL_PWREx_ConfigSupply+0xb0>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	2b06      	cmp	r3, #6
 800932e:	d00a      	beq.n	8009346 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009330:	4b26      	ldr	r3, [pc, #152]	; (80093cc <HAL_PWREx_ConfigSupply+0xb0>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	429a      	cmp	r2, r3
 800933c:	d001      	beq.n	8009342 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e040      	b.n	80093c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	e03e      	b.n	80093c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009346:	4b21      	ldr	r3, [pc, #132]	; (80093cc <HAL_PWREx_ConfigSupply+0xb0>)
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800934e:	491f      	ldr	r1, [pc, #124]	; (80093cc <HAL_PWREx_ConfigSupply+0xb0>)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4313      	orrs	r3, r2
 8009354:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009356:	f7fc fcc5 	bl	8005ce4 <HAL_GetTick>
 800935a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800935c:	e009      	b.n	8009372 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800935e:	f7fc fcc1 	bl	8005ce4 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800936c:	d901      	bls.n	8009372 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e028      	b.n	80093c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009372:	4b16      	ldr	r3, [pc, #88]	; (80093cc <HAL_PWREx_ConfigSupply+0xb0>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937e:	d1ee      	bne.n	800935e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b1e      	cmp	r3, #30
 8009384:	d008      	beq.n	8009398 <HAL_PWREx_ConfigSupply+0x7c>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b2e      	cmp	r3, #46	; 0x2e
 800938a:	d005      	beq.n	8009398 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b1d      	cmp	r3, #29
 8009390:	d002      	beq.n	8009398 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b2d      	cmp	r3, #45	; 0x2d
 8009396:	d114      	bne.n	80093c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8009398:	f7fc fca4 	bl	8005ce4 <HAL_GetTick>
 800939c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800939e:	e009      	b.n	80093b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80093a0:	f7fc fca0 	bl	8005ce4 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093ae:	d901      	bls.n	80093b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e007      	b.n	80093c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <HAL_PWREx_ConfigSupply+0xb0>)
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c0:	d1ee      	bne.n	80093a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	58024800 	.word	0x58024800

080093d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	4a04      	ldr	r2, [pc, #16]	; (80093ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80093da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093de:	60d3      	str	r3, [r2, #12]
}
 80093e0:	bf00      	nop
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	58024800 	.word	0x58024800

080093f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08c      	sub	sp, #48	; 0x30
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d102      	bne.n	8009404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f000 bc1d 	b.w	8009c3e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 8087 	beq.w	8009520 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009412:	4b99      	ldr	r3, [pc, #612]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800941c:	4b96      	ldr	r3, [pc, #600]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	2b10      	cmp	r3, #16
 8009426:	d007      	beq.n	8009438 <HAL_RCC_OscConfig+0x48>
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	2b18      	cmp	r3, #24
 800942c:	d110      	bne.n	8009450 <HAL_RCC_OscConfig+0x60>
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	f003 0303 	and.w	r3, r3, #3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d10b      	bne.n	8009450 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009438:	4b8f      	ldr	r3, [pc, #572]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d06c      	beq.n	800951e <HAL_RCC_OscConfig+0x12e>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d168      	bne.n	800951e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e3f6      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009458:	d106      	bne.n	8009468 <HAL_RCC_OscConfig+0x78>
 800945a:	4b87      	ldr	r3, [pc, #540]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a86      	ldr	r2, [pc, #536]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	e02e      	b.n	80094c6 <HAL_RCC_OscConfig+0xd6>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10c      	bne.n	800948a <HAL_RCC_OscConfig+0x9a>
 8009470:	4b81      	ldr	r3, [pc, #516]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a80      	ldr	r2, [pc, #512]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	4b7e      	ldr	r3, [pc, #504]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a7d      	ldr	r2, [pc, #500]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	e01d      	b.n	80094c6 <HAL_RCC_OscConfig+0xd6>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009492:	d10c      	bne.n	80094ae <HAL_RCC_OscConfig+0xbe>
 8009494:	4b78      	ldr	r3, [pc, #480]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a77      	ldr	r2, [pc, #476]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800949a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	4b75      	ldr	r3, [pc, #468]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a74      	ldr	r2, [pc, #464]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80094a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	e00b      	b.n	80094c6 <HAL_RCC_OscConfig+0xd6>
 80094ae:	4b72      	ldr	r3, [pc, #456]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a71      	ldr	r2, [pc, #452]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80094b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	4b6f      	ldr	r3, [pc, #444]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a6e      	ldr	r2, [pc, #440]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80094c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d013      	beq.n	80094f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ce:	f7fc fc09 	bl	8005ce4 <HAL_GetTick>
 80094d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094d4:	e008      	b.n	80094e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094d6:	f7fc fc05 	bl	8005ce4 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	2b64      	cmp	r3, #100	; 0x64
 80094e2:	d901      	bls.n	80094e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e3aa      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094e8:	4b63      	ldr	r3, [pc, #396]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0f0      	beq.n	80094d6 <HAL_RCC_OscConfig+0xe6>
 80094f4:	e014      	b.n	8009520 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f6:	f7fc fbf5 	bl	8005ce4 <HAL_GetTick>
 80094fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80094fc:	e008      	b.n	8009510 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094fe:	f7fc fbf1 	bl	8005ce4 <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b64      	cmp	r3, #100	; 0x64
 800950a:	d901      	bls.n	8009510 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e396      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009510:	4b59      	ldr	r3, [pc, #356]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1f0      	bne.n	80094fe <HAL_RCC_OscConfig+0x10e>
 800951c:	e000      	b.n	8009520 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800951e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 80cb 	beq.w	80096c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800952e:	4b52      	ldr	r3, [pc, #328]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009536:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009538:	4b4f      	ldr	r3, [pc, #316]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <HAL_RCC_OscConfig+0x164>
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	2b18      	cmp	r3, #24
 8009548:	d156      	bne.n	80095f8 <HAL_RCC_OscConfig+0x208>
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	f003 0303 	and.w	r3, r3, #3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d151      	bne.n	80095f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009554:	4b48      	ldr	r3, [pc, #288]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <HAL_RCC_OscConfig+0x17c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e368      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800956c:	4b42      	ldr	r3, [pc, #264]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f023 0219 	bic.w	r2, r3, #25
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	493f      	ldr	r1, [pc, #252]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800957a:	4313      	orrs	r3, r2
 800957c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800957e:	f7fc fbb1 	bl	8005ce4 <HAL_GetTick>
 8009582:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009584:	e008      	b.n	8009598 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009586:	f7fc fbad 	bl	8005ce4 <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	2b02      	cmp	r3, #2
 8009592:	d901      	bls.n	8009598 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e352      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009598:	4b37      	ldr	r3, [pc, #220]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d0f0      	beq.n	8009586 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095a4:	f7fc fbce 	bl	8005d44 <HAL_GetREVID>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d817      	bhi.n	80095e2 <HAL_RCC_OscConfig+0x1f2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b40      	cmp	r3, #64	; 0x40
 80095b8:	d108      	bne.n	80095cc <HAL_RCC_OscConfig+0x1dc>
 80095ba:	4b2f      	ldr	r3, [pc, #188]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80095c2:	4a2d      	ldr	r2, [pc, #180]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80095c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095ca:	e07b      	b.n	80096c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095cc:	4b2a      	ldr	r3, [pc, #168]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	031b      	lsls	r3, r3, #12
 80095da:	4927      	ldr	r1, [pc, #156]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095e0:	e070      	b.n	80096c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095e2:	4b25      	ldr	r3, [pc, #148]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	4921      	ldr	r1, [pc, #132]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095f6:	e065      	b.n	80096c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d048      	beq.n	8009692 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009600:	4b1d      	ldr	r3, [pc, #116]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f023 0219 	bic.w	r2, r3, #25
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	491a      	ldr	r1, [pc, #104]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800960e:	4313      	orrs	r3, r2
 8009610:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009612:	f7fc fb67 	bl	8005ce4 <HAL_GetTick>
 8009616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009618:	e008      	b.n	800962c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800961a:	f7fc fb63 	bl	8005ce4 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d901      	bls.n	800962c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e308      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800962c:	4b12      	ldr	r3, [pc, #72]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0f0      	beq.n	800961a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009638:	f7fc fb84 	bl	8005d44 <HAL_GetREVID>
 800963c:	4603      	mov	r3, r0
 800963e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009642:	4293      	cmp	r3, r2
 8009644:	d81a      	bhi.n	800967c <HAL_RCC_OscConfig+0x28c>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b40      	cmp	r3, #64	; 0x40
 800964c:	d108      	bne.n	8009660 <HAL_RCC_OscConfig+0x270>
 800964e:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009656:	4a08      	ldr	r2, [pc, #32]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800965c:	6053      	str	r3, [r2, #4]
 800965e:	e031      	b.n	80096c4 <HAL_RCC_OscConfig+0x2d4>
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	031b      	lsls	r3, r3, #12
 800966e:	4902      	ldr	r1, [pc, #8]	; (8009678 <HAL_RCC_OscConfig+0x288>)
 8009670:	4313      	orrs	r3, r2
 8009672:	604b      	str	r3, [r1, #4]
 8009674:	e026      	b.n	80096c4 <HAL_RCC_OscConfig+0x2d4>
 8009676:	bf00      	nop
 8009678:	58024400 	.word	0x58024400
 800967c:	4b9a      	ldr	r3, [pc, #616]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	061b      	lsls	r3, r3, #24
 800968a:	4997      	ldr	r1, [pc, #604]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800968c:	4313      	orrs	r3, r2
 800968e:	604b      	str	r3, [r1, #4]
 8009690:	e018      	b.n	80096c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009692:	4b95      	ldr	r3, [pc, #596]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a94      	ldr	r2, [pc, #592]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009698:	f023 0301 	bic.w	r3, r3, #1
 800969c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969e:	f7fc fb21 	bl	8005ce4 <HAL_GetTick>
 80096a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80096a4:	e008      	b.n	80096b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096a6:	f7fc fb1d 	bl	8005ce4 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e2c2      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80096b8:	4b8b      	ldr	r3, [pc, #556]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1f0      	bne.n	80096a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0310 	and.w	r3, r3, #16
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 80a9 	beq.w	8009824 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096d2:	4b85      	ldr	r3, [pc, #532]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096dc:	4b82      	ldr	r3, [pc, #520]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80096de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d007      	beq.n	80096f8 <HAL_RCC_OscConfig+0x308>
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	2b18      	cmp	r3, #24
 80096ec:	d13a      	bne.n	8009764 <HAL_RCC_OscConfig+0x374>
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d135      	bne.n	8009764 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096f8:	4b7b      	ldr	r3, [pc, #492]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <HAL_RCC_OscConfig+0x320>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	2b80      	cmp	r3, #128	; 0x80
 800970a:	d001      	beq.n	8009710 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e296      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009710:	f7fc fb18 	bl	8005d44 <HAL_GetREVID>
 8009714:	4603      	mov	r3, r0
 8009716:	f241 0203 	movw	r2, #4099	; 0x1003
 800971a:	4293      	cmp	r3, r2
 800971c:	d817      	bhi.n	800974e <HAL_RCC_OscConfig+0x35e>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	2b20      	cmp	r3, #32
 8009724:	d108      	bne.n	8009738 <HAL_RCC_OscConfig+0x348>
 8009726:	4b70      	ldr	r3, [pc, #448]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800972e:	4a6e      	ldr	r2, [pc, #440]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009734:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009736:	e075      	b.n	8009824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009738:	4b6b      	ldr	r3, [pc, #428]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	069b      	lsls	r3, r3, #26
 8009746:	4968      	ldr	r1, [pc, #416]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009748:	4313      	orrs	r3, r2
 800974a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800974c:	e06a      	b.n	8009824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800974e:	4b66      	ldr	r3, [pc, #408]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	061b      	lsls	r3, r3, #24
 800975c:	4962      	ldr	r1, [pc, #392]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800975e:	4313      	orrs	r3, r2
 8009760:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009762:	e05f      	b.n	8009824 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d042      	beq.n	80097f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800976c:	4b5e      	ldr	r3, [pc, #376]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a5d      	ldr	r2, [pc, #372]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009778:	f7fc fab4 	bl	8005ce4 <HAL_GetTick>
 800977c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800977e:	e008      	b.n	8009792 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009780:	f7fc fab0 	bl	8005ce4 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b02      	cmp	r3, #2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e255      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009792:	4b55      	ldr	r3, [pc, #340]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0f0      	beq.n	8009780 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800979e:	f7fc fad1 	bl	8005d44 <HAL_GetREVID>
 80097a2:	4603      	mov	r3, r0
 80097a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d817      	bhi.n	80097dc <HAL_RCC_OscConfig+0x3ec>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	d108      	bne.n	80097c6 <HAL_RCC_OscConfig+0x3d6>
 80097b4:	4b4c      	ldr	r3, [pc, #304]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80097bc:	4a4a      	ldr	r2, [pc, #296]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097c2:	6053      	str	r3, [r2, #4]
 80097c4:	e02e      	b.n	8009824 <HAL_RCC_OscConfig+0x434>
 80097c6:	4b48      	ldr	r3, [pc, #288]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	069b      	lsls	r3, r3, #26
 80097d4:	4944      	ldr	r1, [pc, #272]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	604b      	str	r3, [r1, #4]
 80097da:	e023      	b.n	8009824 <HAL_RCC_OscConfig+0x434>
 80097dc:	4b42      	ldr	r3, [pc, #264]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	061b      	lsls	r3, r3, #24
 80097ea:	493f      	ldr	r1, [pc, #252]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60cb      	str	r3, [r1, #12]
 80097f0:	e018      	b.n	8009824 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80097f2:	4b3d      	ldr	r3, [pc, #244]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a3c      	ldr	r2, [pc, #240]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80097f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fe:	f7fc fa71 	bl	8005ce4 <HAL_GetTick>
 8009802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009804:	e008      	b.n	8009818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009806:	f7fc fa6d 	bl	8005ce4 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e212      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009818:	4b33      	ldr	r3, [pc, #204]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1f0      	bne.n	8009806 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0308 	and.w	r3, r3, #8
 800982c:	2b00      	cmp	r3, #0
 800982e:	d036      	beq.n	800989e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d019      	beq.n	800986c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009838:	4b2b      	ldr	r3, [pc, #172]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800983a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800983c:	4a2a      	ldr	r2, [pc, #168]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009844:	f7fc fa4e 	bl	8005ce4 <HAL_GetTick>
 8009848:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800984a:	e008      	b.n	800985e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800984c:	f7fc fa4a 	bl	8005ce4 <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b02      	cmp	r3, #2
 8009858:	d901      	bls.n	800985e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e1ef      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800985e:	4b22      	ldr	r3, [pc, #136]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0f0      	beq.n	800984c <HAL_RCC_OscConfig+0x45c>
 800986a:	e018      	b.n	800989e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800986c:	4b1e      	ldr	r3, [pc, #120]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 800986e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009870:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009872:	f023 0301 	bic.w	r3, r3, #1
 8009876:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009878:	f7fc fa34 	bl	8005ce4 <HAL_GetTick>
 800987c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800987e:	e008      	b.n	8009892 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009880:	f7fc fa30 	bl	8005ce4 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	2b02      	cmp	r3, #2
 800988c:	d901      	bls.n	8009892 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e1d5      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 8009894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1f0      	bne.n	8009880 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d039      	beq.n	800991e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d01c      	beq.n	80098ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80098b2:	4b0d      	ldr	r3, [pc, #52]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a0c      	ldr	r2, [pc, #48]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80098b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098be:	f7fc fa11 	bl	8005ce4 <HAL_GetTick>
 80098c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80098c4:	e008      	b.n	80098d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80098c6:	f7fc fa0d 	bl	8005ce4 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d901      	bls.n	80098d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e1b2      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80098d8:	4b03      	ldr	r3, [pc, #12]	; (80098e8 <HAL_RCC_OscConfig+0x4f8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0f0      	beq.n	80098c6 <HAL_RCC_OscConfig+0x4d6>
 80098e4:	e01b      	b.n	800991e <HAL_RCC_OscConfig+0x52e>
 80098e6:	bf00      	nop
 80098e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098ec:	4b9b      	ldr	r3, [pc, #620]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a9a      	ldr	r2, [pc, #616]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80098f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098f8:	f7fc f9f4 	bl	8005ce4 <HAL_GetTick>
 80098fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098fe:	e008      	b.n	8009912 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009900:	f7fc f9f0 	bl	8005ce4 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b02      	cmp	r3, #2
 800990c:	d901      	bls.n	8009912 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e195      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009912:	4b92      	ldr	r3, [pc, #584]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1f0      	bne.n	8009900 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8081 	beq.w	8009a2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800992c:	4b8c      	ldr	r3, [pc, #560]	; (8009b60 <HAL_RCC_OscConfig+0x770>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a8b      	ldr	r2, [pc, #556]	; (8009b60 <HAL_RCC_OscConfig+0x770>)
 8009932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009938:	f7fc f9d4 	bl	8005ce4 <HAL_GetTick>
 800993c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800993e:	e008      	b.n	8009952 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009940:	f7fc f9d0 	bl	8005ce4 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b64      	cmp	r3, #100	; 0x64
 800994c:	d901      	bls.n	8009952 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e175      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009952:	4b83      	ldr	r3, [pc, #524]	; (8009b60 <HAL_RCC_OscConfig+0x770>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0f0      	beq.n	8009940 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d106      	bne.n	8009974 <HAL_RCC_OscConfig+0x584>
 8009966:	4b7d      	ldr	r3, [pc, #500]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	4a7c      	ldr	r2, [pc, #496]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 800996c:	f043 0301 	orr.w	r3, r3, #1
 8009970:	6713      	str	r3, [r2, #112]	; 0x70
 8009972:	e02d      	b.n	80099d0 <HAL_RCC_OscConfig+0x5e0>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10c      	bne.n	8009996 <HAL_RCC_OscConfig+0x5a6>
 800997c:	4b77      	ldr	r3, [pc, #476]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	4a76      	ldr	r2, [pc, #472]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009982:	f023 0301 	bic.w	r3, r3, #1
 8009986:	6713      	str	r3, [r2, #112]	; 0x70
 8009988:	4b74      	ldr	r3, [pc, #464]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	4a73      	ldr	r2, [pc, #460]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 800998e:	f023 0304 	bic.w	r3, r3, #4
 8009992:	6713      	str	r3, [r2, #112]	; 0x70
 8009994:	e01c      	b.n	80099d0 <HAL_RCC_OscConfig+0x5e0>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	2b05      	cmp	r3, #5
 800999c:	d10c      	bne.n	80099b8 <HAL_RCC_OscConfig+0x5c8>
 800999e:	4b6f      	ldr	r3, [pc, #444]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a2:	4a6e      	ldr	r2, [pc, #440]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099a4:	f043 0304 	orr.w	r3, r3, #4
 80099a8:	6713      	str	r3, [r2, #112]	; 0x70
 80099aa:	4b6c      	ldr	r3, [pc, #432]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ae:	4a6b      	ldr	r2, [pc, #428]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099b0:	f043 0301 	orr.w	r3, r3, #1
 80099b4:	6713      	str	r3, [r2, #112]	; 0x70
 80099b6:	e00b      	b.n	80099d0 <HAL_RCC_OscConfig+0x5e0>
 80099b8:	4b68      	ldr	r3, [pc, #416]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099bc:	4a67      	ldr	r2, [pc, #412]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099be:	f023 0301 	bic.w	r3, r3, #1
 80099c2:	6713      	str	r3, [r2, #112]	; 0x70
 80099c4:	4b65      	ldr	r3, [pc, #404]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c8:	4a64      	ldr	r2, [pc, #400]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099ca:	f023 0304 	bic.w	r3, r3, #4
 80099ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d015      	beq.n	8009a04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099d8:	f7fc f984 	bl	8005ce4 <HAL_GetTick>
 80099dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099de:	e00a      	b.n	80099f6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099e0:	f7fc f980 	bl	8005ce4 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d901      	bls.n	80099f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e123      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099f6:	4b59      	ldr	r3, [pc, #356]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0ee      	beq.n	80099e0 <HAL_RCC_OscConfig+0x5f0>
 8009a02:	e014      	b.n	8009a2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a04:	f7fc f96e 	bl	8005ce4 <HAL_GetTick>
 8009a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a0a:	e00a      	b.n	8009a22 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a0c:	f7fc f96a 	bl	8005ce4 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d901      	bls.n	8009a22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e10d      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a22:	4b4e      	ldr	r3, [pc, #312]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1ee      	bne.n	8009a0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8102 	beq.w	8009c3c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009a38:	4b48      	ldr	r3, [pc, #288]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a40:	2b18      	cmp	r3, #24
 8009a42:	f000 80bd 	beq.w	8009bc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	f040 809e 	bne.w	8009b8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a50:	4b42      	ldr	r3, [pc, #264]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a41      	ldr	r2, [pc, #260]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a5c:	f7fc f942 	bl	8005ce4 <HAL_GetTick>
 8009a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a62:	e008      	b.n	8009a76 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a64:	f7fc f93e 	bl	8005ce4 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e0e3      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a76:	4b39      	ldr	r3, [pc, #228]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1f0      	bne.n	8009a64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a82:	4b36      	ldr	r3, [pc, #216]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a86:	4b37      	ldr	r3, [pc, #220]	; (8009b64 <HAL_RCC_OscConfig+0x774>)
 8009a88:	4013      	ands	r3, r2
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a92:	0112      	lsls	r2, r2, #4
 8009a94:	430a      	orrs	r2, r1
 8009a96:	4931      	ldr	r1, [pc, #196]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	628b      	str	r3, [r1, #40]	; 0x28
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	025b      	lsls	r3, r3, #9
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	041b      	lsls	r3, r3, #16
 8009aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	061b      	lsls	r3, r3, #24
 8009ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009acc:	4923      	ldr	r1, [pc, #140]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009ad2:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	4a21      	ldr	r2, [pc, #132]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009ad8:	f023 0301 	bic.w	r3, r3, #1
 8009adc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ade:	4b1f      	ldr	r3, [pc, #124]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae2:	4b21      	ldr	r3, [pc, #132]	; (8009b68 <HAL_RCC_OscConfig+0x778>)
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009aea:	00d2      	lsls	r2, r2, #3
 8009aec:	491b      	ldr	r1, [pc, #108]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009af2:	4b1a      	ldr	r3, [pc, #104]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	f023 020c 	bic.w	r2, r3, #12
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	4917      	ldr	r1, [pc, #92]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009b04:	4b15      	ldr	r3, [pc, #84]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	f023 0202 	bic.w	r2, r3, #2
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b10:	4912      	ldr	r1, [pc, #72]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009b16:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	4a10      	ldr	r2, [pc, #64]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b22:	4b0e      	ldr	r3, [pc, #56]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	4a0d      	ldr	r2, [pc, #52]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009b3a:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	4a07      	ldr	r2, [pc, #28]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b46:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <HAL_RCC_OscConfig+0x76c>)
 8009b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b52:	f7fc f8c7 	bl	8005ce4 <HAL_GetTick>
 8009b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b58:	e011      	b.n	8009b7e <HAL_RCC_OscConfig+0x78e>
 8009b5a:	bf00      	nop
 8009b5c:	58024400 	.word	0x58024400
 8009b60:	58024800 	.word	0x58024800
 8009b64:	fffffc0c 	.word	0xfffffc0c
 8009b68:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b6c:	f7fc f8ba 	bl	8005ce4 <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d901      	bls.n	8009b7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e05f      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b7e:	4b32      	ldr	r3, [pc, #200]	; (8009c48 <HAL_RCC_OscConfig+0x858>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0f0      	beq.n	8009b6c <HAL_RCC_OscConfig+0x77c>
 8009b8a:	e057      	b.n	8009c3c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b8c:	4b2e      	ldr	r3, [pc, #184]	; (8009c48 <HAL_RCC_OscConfig+0x858>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a2d      	ldr	r2, [pc, #180]	; (8009c48 <HAL_RCC_OscConfig+0x858>)
 8009b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b98:	f7fc f8a4 	bl	8005ce4 <HAL_GetTick>
 8009b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ba0:	f7fc f8a0 	bl	8005ce4 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e045      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009bb2:	4b25      	ldr	r3, [pc, #148]	; (8009c48 <HAL_RCC_OscConfig+0x858>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1f0      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x7b0>
 8009bbe:	e03d      	b.n	8009c3c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009bc0:	4b21      	ldr	r3, [pc, #132]	; (8009c48 <HAL_RCC_OscConfig+0x858>)
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009bc6:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <HAL_RCC_OscConfig+0x858>)
 8009bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d031      	beq.n	8009c38 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f003 0203 	and.w	r2, r3, #3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d12a      	bne.n	8009c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	091b      	lsrs	r3, r3, #4
 8009be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d122      	bne.n	8009c38 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d11a      	bne.n	8009c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	0a5b      	lsrs	r3, r3, #9
 8009c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d111      	bne.n	8009c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	0c1b      	lsrs	r3, r3, #16
 8009c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d108      	bne.n	8009c38 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	0e1b      	lsrs	r3, r3, #24
 8009c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c32:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d001      	beq.n	8009c3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3730      	adds	r7, #48	; 0x30
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	58024400 	.word	0x58024400

08009c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e19c      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c60:	4b8a      	ldr	r3, [pc, #552]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 030f 	and.w	r3, r3, #15
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d910      	bls.n	8009c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c6e:	4b87      	ldr	r3, [pc, #540]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f023 020f 	bic.w	r2, r3, #15
 8009c76:	4985      	ldr	r1, [pc, #532]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c7e:	4b83      	ldr	r3, [pc, #524]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 030f 	and.w	r3, r3, #15
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d001      	beq.n	8009c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e184      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d010      	beq.n	8009cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691a      	ldr	r2, [r3, #16]
 8009ca0:	4b7b      	ldr	r3, [pc, #492]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d908      	bls.n	8009cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009cac:	4b78      	ldr	r3, [pc, #480]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	4975      	ldr	r1, [pc, #468]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0308 	and.w	r3, r3, #8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d010      	beq.n	8009cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	695a      	ldr	r2, [r3, #20]
 8009cce:	4b70      	ldr	r3, [pc, #448]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d908      	bls.n	8009cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009cda:	4b6d      	ldr	r3, [pc, #436]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	496a      	ldr	r1, [pc, #424]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0310 	and.w	r3, r3, #16
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d010      	beq.n	8009d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	699a      	ldr	r2, [r3, #24]
 8009cfc:	4b64      	ldr	r3, [pc, #400]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d908      	bls.n	8009d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d08:	4b61      	ldr	r3, [pc, #388]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	495e      	ldr	r1, [pc, #376]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0320 	and.w	r3, r3, #32
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d010      	beq.n	8009d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	69da      	ldr	r2, [r3, #28]
 8009d2a:	4b59      	ldr	r3, [pc, #356]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d908      	bls.n	8009d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009d36:	4b56      	ldr	r3, [pc, #344]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	4953      	ldr	r1, [pc, #332]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0302 	and.w	r3, r3, #2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d010      	beq.n	8009d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68da      	ldr	r2, [r3, #12]
 8009d58:	4b4d      	ldr	r3, [pc, #308]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	f003 030f 	and.w	r3, r3, #15
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d908      	bls.n	8009d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d64:	4b4a      	ldr	r3, [pc, #296]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	f023 020f 	bic.w	r2, r3, #15
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	4947      	ldr	r1, [pc, #284]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d055      	beq.n	8009e2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009d82:	4b43      	ldr	r3, [pc, #268]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	4940      	ldr	r1, [pc, #256]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d107      	bne.n	8009dac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d9c:	4b3c      	ldr	r3, [pc, #240]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d121      	bne.n	8009dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e0f6      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d107      	bne.n	8009dc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009db4:	4b36      	ldr	r3, [pc, #216]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d115      	bne.n	8009dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e0ea      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d107      	bne.n	8009ddc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dcc:	4b30      	ldr	r3, [pc, #192]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e0de      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ddc:	4b2c      	ldr	r3, [pc, #176]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e0d6      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dec:	4b28      	ldr	r3, [pc, #160]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	f023 0207 	bic.w	r2, r3, #7
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4925      	ldr	r1, [pc, #148]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dfe:	f7fb ff71 	bl	8005ce4 <HAL_GetTick>
 8009e02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e04:	e00a      	b.n	8009e1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e06:	f7fb ff6d 	bl	8005ce4 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e0be      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e1c:	4b1c      	ldr	r3, [pc, #112]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d1eb      	bne.n	8009e06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d010      	beq.n	8009e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	4b14      	ldr	r3, [pc, #80]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d208      	bcs.n	8009e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e4a:	4b11      	ldr	r3, [pc, #68]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	f023 020f 	bic.w	r2, r3, #15
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	490e      	ldr	r1, [pc, #56]	; (8009e90 <HAL_RCC_ClockConfig+0x244>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e5c:	4b0b      	ldr	r3, [pc, #44]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d214      	bcs.n	8009e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e6a:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f023 020f 	bic.w	r2, r3, #15
 8009e72:	4906      	ldr	r1, [pc, #24]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e7a:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <HAL_RCC_ClockConfig+0x240>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 030f 	and.w	r3, r3, #15
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d005      	beq.n	8009e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e086      	b.n	8009f9a <HAL_RCC_ClockConfig+0x34e>
 8009e8c:	52002000 	.word	0x52002000
 8009e90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 0304 	and.w	r3, r3, #4
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d010      	beq.n	8009ec2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691a      	ldr	r2, [r3, #16]
 8009ea4:	4b3f      	ldr	r3, [pc, #252]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d208      	bcs.n	8009ec2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009eb0:	4b3c      	ldr	r3, [pc, #240]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	4939      	ldr	r1, [pc, #228]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0308 	and.w	r3, r3, #8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d010      	beq.n	8009ef0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695a      	ldr	r2, [r3, #20]
 8009ed2:	4b34      	ldr	r3, [pc, #208]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d208      	bcs.n	8009ef0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ede:	4b31      	ldr	r3, [pc, #196]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009ee0:	69db      	ldr	r3, [r3, #28]
 8009ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	492e      	ldr	r1, [pc, #184]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009eec:	4313      	orrs	r3, r2
 8009eee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d010      	beq.n	8009f1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	699a      	ldr	r2, [r3, #24]
 8009f00:	4b28      	ldr	r3, [pc, #160]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d208      	bcs.n	8009f1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f0c:	4b25      	ldr	r3, [pc, #148]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	4922      	ldr	r1, [pc, #136]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d010      	beq.n	8009f4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69da      	ldr	r2, [r3, #28]
 8009f2e:	4b1d      	ldr	r3, [pc, #116]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d208      	bcs.n	8009f4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009f3a:	4b1a      	ldr	r3, [pc, #104]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	4917      	ldr	r1, [pc, #92]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f4c:	f000 f834 	bl	8009fb8 <HAL_RCC_GetSysClockFreq>
 8009f50:	4602      	mov	r2, r0
 8009f52:	4b14      	ldr	r3, [pc, #80]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	4912      	ldr	r1, [pc, #72]	; (8009fa8 <HAL_RCC_ClockConfig+0x35c>)
 8009f5e:	5ccb      	ldrb	r3, [r1, r3]
 8009f60:	f003 031f 	and.w	r3, r3, #31
 8009f64:	fa22 f303 	lsr.w	r3, r2, r3
 8009f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f6a:	4b0e      	ldr	r3, [pc, #56]	; (8009fa4 <HAL_RCC_ClockConfig+0x358>)
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	f003 030f 	and.w	r3, r3, #15
 8009f72:	4a0d      	ldr	r2, [pc, #52]	; (8009fa8 <HAL_RCC_ClockConfig+0x35c>)
 8009f74:	5cd3      	ldrb	r3, [r2, r3]
 8009f76:	f003 031f 	and.w	r3, r3, #31
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f80:	4a0a      	ldr	r2, [pc, #40]	; (8009fac <HAL_RCC_ClockConfig+0x360>)
 8009f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f84:	4a0a      	ldr	r2, [pc, #40]	; (8009fb0 <HAL_RCC_ClockConfig+0x364>)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009f8a:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <HAL_RCC_ClockConfig+0x368>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fb fe5e 	bl	8005c50 <HAL_InitTick>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	58024400 	.word	0x58024400
 8009fa8:	0800f66c 	.word	0x0800f66c
 8009fac:	24000008 	.word	0x24000008
 8009fb0:	24000004 	.word	0x24000004
 8009fb4:	2400001c 	.word	0x2400001c

08009fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b089      	sub	sp, #36	; 0x24
 8009fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fbe:	4bb3      	ldr	r3, [pc, #716]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fc6:	2b18      	cmp	r3, #24
 8009fc8:	f200 8155 	bhi.w	800a276 <HAL_RCC_GetSysClockFreq+0x2be>
 8009fcc:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd2:	bf00      	nop
 8009fd4:	0800a039 	.word	0x0800a039
 8009fd8:	0800a277 	.word	0x0800a277
 8009fdc:	0800a277 	.word	0x0800a277
 8009fe0:	0800a277 	.word	0x0800a277
 8009fe4:	0800a277 	.word	0x0800a277
 8009fe8:	0800a277 	.word	0x0800a277
 8009fec:	0800a277 	.word	0x0800a277
 8009ff0:	0800a277 	.word	0x0800a277
 8009ff4:	0800a05f 	.word	0x0800a05f
 8009ff8:	0800a277 	.word	0x0800a277
 8009ffc:	0800a277 	.word	0x0800a277
 800a000:	0800a277 	.word	0x0800a277
 800a004:	0800a277 	.word	0x0800a277
 800a008:	0800a277 	.word	0x0800a277
 800a00c:	0800a277 	.word	0x0800a277
 800a010:	0800a277 	.word	0x0800a277
 800a014:	0800a065 	.word	0x0800a065
 800a018:	0800a277 	.word	0x0800a277
 800a01c:	0800a277 	.word	0x0800a277
 800a020:	0800a277 	.word	0x0800a277
 800a024:	0800a277 	.word	0x0800a277
 800a028:	0800a277 	.word	0x0800a277
 800a02c:	0800a277 	.word	0x0800a277
 800a030:	0800a277 	.word	0x0800a277
 800a034:	0800a06b 	.word	0x0800a06b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a038:	4b94      	ldr	r3, [pc, #592]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0320 	and.w	r3, r3, #32
 800a040:	2b00      	cmp	r3, #0
 800a042:	d009      	beq.n	800a058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a044:	4b91      	ldr	r3, [pc, #580]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	08db      	lsrs	r3, r3, #3
 800a04a:	f003 0303 	and.w	r3, r3, #3
 800a04e:	4a90      	ldr	r2, [pc, #576]	; (800a290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a050:	fa22 f303 	lsr.w	r3, r2, r3
 800a054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a056:	e111      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a058:	4b8d      	ldr	r3, [pc, #564]	; (800a290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a05a:	61bb      	str	r3, [r7, #24]
    break;
 800a05c:	e10e      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a05e:	4b8d      	ldr	r3, [pc, #564]	; (800a294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a060:	61bb      	str	r3, [r7, #24]
    break;
 800a062:	e10b      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a064:	4b8c      	ldr	r3, [pc, #560]	; (800a298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a066:	61bb      	str	r3, [r7, #24]
    break;
 800a068:	e108      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a06a:	4b88      	ldr	r3, [pc, #544]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a074:	4b85      	ldr	r3, [pc, #532]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a078:	091b      	lsrs	r3, r3, #4
 800a07a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a07e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a080:	4b82      	ldr	r3, [pc, #520]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a08a:	4b80      	ldr	r3, [pc, #512]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08e:	08db      	lsrs	r3, r3, #3
 800a090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	fb02 f303 	mul.w	r3, r2, r3
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 80e1 	beq.w	800a270 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	f000 8083 	beq.w	800a1bc <HAL_RCC_GetSysClockFreq+0x204>
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	f200 80a1 	bhi.w	800a200 <HAL_RCC_GetSysClockFreq+0x248>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <HAL_RCC_GetSysClockFreq+0x114>
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d056      	beq.n	800a178 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a0ca:	e099      	b.n	800a200 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0cc:	4b6f      	ldr	r3, [pc, #444]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0320 	and.w	r3, r3, #32
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d02d      	beq.n	800a134 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0d8:	4b6c      	ldr	r3, [pc, #432]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	08db      	lsrs	r3, r3, #3
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	4a6b      	ldr	r2, [pc, #428]	; (800a290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	ee07 3a90 	vmov	s15, r3
 800a0f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	ee07 3a90 	vmov	s15, r3
 800a0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a102:	4b62      	ldr	r3, [pc, #392]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a112:	ed97 6a02 	vldr	s12, [r7, #8]
 800a116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a29c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a132:	e087      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a2a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a146:	4b51      	ldr	r3, [pc, #324]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14e:	ee07 3a90 	vmov	s15, r3
 800a152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a156:	ed97 6a02 	vldr	s12, [r7, #8]
 800a15a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a29c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a176:	e065      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a182:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a2a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a18a:	4b40      	ldr	r3, [pc, #256]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a19a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a19e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a29c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ba:	e043      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a2a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ce:	4b2f      	ldr	r3, [pc, #188]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a29c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1fe:	e021      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a2a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a212:	4b1e      	ldr	r3, [pc, #120]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a222:	ed97 6a02 	vldr	s12, [r7, #8]
 800a226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a29c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a242:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a244:	4b11      	ldr	r3, [pc, #68]	; (800a28c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a248:	0a5b      	lsrs	r3, r3, #9
 800a24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24e:	3301      	adds	r3, #1
 800a250:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	ee07 3a90 	vmov	s15, r3
 800a258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a25c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a268:	ee17 3a90 	vmov	r3, s15
 800a26c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a26e:	e005      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	61bb      	str	r3, [r7, #24]
    break;
 800a274:	e002      	b.n	800a27c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a276:	4b07      	ldr	r3, [pc, #28]	; (800a294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a278:	61bb      	str	r3, [r7, #24]
    break;
 800a27a:	bf00      	nop
  }

  return sysclockfreq;
 800a27c:	69bb      	ldr	r3, [r7, #24]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3724      	adds	r7, #36	; 0x24
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	58024400 	.word	0x58024400
 800a290:	03d09000 	.word	0x03d09000
 800a294:	003d0900 	.word	0x003d0900
 800a298:	007a1200 	.word	0x007a1200
 800a29c:	46000000 	.word	0x46000000
 800a2a0:	4c742400 	.word	0x4c742400
 800a2a4:	4a742400 	.word	0x4a742400
 800a2a8:	4af42400 	.word	0x4af42400

0800a2ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a2b2:	f7ff fe81 	bl	8009fb8 <HAL_RCC_GetSysClockFreq>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	4b10      	ldr	r3, [pc, #64]	; (800a2fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	f003 030f 	and.w	r3, r3, #15
 800a2c2:	490f      	ldr	r1, [pc, #60]	; (800a300 <HAL_RCC_GetHCLKFreq+0x54>)
 800a2c4:	5ccb      	ldrb	r3, [r1, r3]
 800a2c6:	f003 031f 	and.w	r3, r3, #31
 800a2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	f003 030f 	and.w	r3, r3, #15
 800a2d8:	4a09      	ldr	r2, [pc, #36]	; (800a300 <HAL_RCC_GetHCLKFreq+0x54>)
 800a2da:	5cd3      	ldrb	r3, [r2, r3]
 800a2dc:	f003 031f 	and.w	r3, r3, #31
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e6:	4a07      	ldr	r2, [pc, #28]	; (800a304 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2ea:	4a07      	ldr	r2, [pc, #28]	; (800a308 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a2f0:	4b04      	ldr	r3, [pc, #16]	; (800a304 <HAL_RCC_GetHCLKFreq+0x58>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	58024400 	.word	0x58024400
 800a300:	0800f66c 	.word	0x0800f66c
 800a304:	24000008 	.word	0x24000008
 800a308:	24000004 	.word	0x24000004

0800a30c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a310:	f7ff ffcc 	bl	800a2ac <HAL_RCC_GetHCLKFreq>
 800a314:	4602      	mov	r2, r0
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	091b      	lsrs	r3, r3, #4
 800a31c:	f003 0307 	and.w	r3, r3, #7
 800a320:	4904      	ldr	r1, [pc, #16]	; (800a334 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a322:	5ccb      	ldrb	r3, [r1, r3]
 800a324:	f003 031f 	and.w	r3, r3, #31
 800a328:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	58024400 	.word	0x58024400
 800a334:	0800f66c 	.word	0x0800f66c

0800a338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a33c:	f7ff ffb6 	bl	800a2ac <HAL_RCC_GetHCLKFreq>
 800a340:	4602      	mov	r2, r0
 800a342:	4b06      	ldr	r3, [pc, #24]	; (800a35c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	4904      	ldr	r1, [pc, #16]	; (800a360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a34e:	5ccb      	ldrb	r3, [r1, r3]
 800a350:	f003 031f 	and.w	r3, r3, #31
 800a354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a358:	4618      	mov	r0, r3
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	58024400 	.word	0x58024400
 800a360:	0800f66c 	.word	0x0800f66c

0800a364 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a36c:	2300      	movs	r3, #0
 800a36e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a370:	2300      	movs	r3, #0
 800a372:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d03f      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a388:	d02a      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a38a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a38e:	d824      	bhi.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a394:	d018      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a39a:	d81e      	bhi.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a3a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a4:	d007      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a3a6:	e018      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a8:	4ba3      	ldr	r3, [pc, #652]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	4aa2      	ldr	r2, [pc, #648]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a3ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a3b4:	e015      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	2102      	movs	r1, #2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 f9d5 	bl	800b76c <RCCEx_PLL2_Config>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a3c6:	e00c      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3324      	adds	r3, #36	; 0x24
 800a3cc:	2102      	movs	r1, #2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 fa7e 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a3d8:	e003      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a3de:	e000      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a3e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d109      	bne.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a3e8:	4b93      	ldr	r3, [pc, #588]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3f4:	4990      	ldr	r1, [pc, #576]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	650b      	str	r3, [r1, #80]	; 0x50
 800a3fa:	e001      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d03d      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a410:	2b04      	cmp	r3, #4
 800a412:	d826      	bhi.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a414:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41a:	bf00      	nop
 800a41c:	0800a431 	.word	0x0800a431
 800a420:	0800a43f 	.word	0x0800a43f
 800a424:	0800a451 	.word	0x0800a451
 800a428:	0800a469 	.word	0x0800a469
 800a42c:	0800a469 	.word	0x0800a469
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a430:	4b81      	ldr	r3, [pc, #516]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	4a80      	ldr	r2, [pc, #512]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a43a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a43c:	e015      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3304      	adds	r3, #4
 800a442:	2100      	movs	r1, #0
 800a444:	4618      	mov	r0, r3
 800a446:	f001 f991 	bl	800b76c <RCCEx_PLL2_Config>
 800a44a:	4603      	mov	r3, r0
 800a44c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a44e:	e00c      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3324      	adds	r3, #36	; 0x24
 800a454:	2100      	movs	r1, #0
 800a456:	4618      	mov	r0, r3
 800a458:	f001 fa3a 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a45c:	4603      	mov	r3, r0
 800a45e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a460:	e003      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
      break;
 800a466:	e000      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a470:	4b71      	ldr	r3, [pc, #452]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a474:	f023 0207 	bic.w	r2, r3, #7
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a47c:	496e      	ldr	r1, [pc, #440]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	650b      	str	r3, [r1, #80]	; 0x50
 800a482:	e001      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a490:	2b00      	cmp	r3, #0
 800a492:	d042      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a49c:	d02b      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a2:	d825      	bhi.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a4a4:	2bc0      	cmp	r3, #192	; 0xc0
 800a4a6:	d028      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a4a8:	2bc0      	cmp	r3, #192	; 0xc0
 800a4aa:	d821      	bhi.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a4ac:	2b80      	cmp	r3, #128	; 0x80
 800a4ae:	d016      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a4b0:	2b80      	cmp	r3, #128	; 0x80
 800a4b2:	d81d      	bhi.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a4b8:	2b40      	cmp	r3, #64	; 0x40
 800a4ba:	d007      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a4bc:	e018      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4be:	4b5e      	ldr	r3, [pc, #376]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c2:	4a5d      	ldr	r2, [pc, #372]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a4c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a4ca:	e017      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f001 f94a 	bl	800b76c <RCCEx_PLL2_Config>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a4dc:	e00e      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3324      	adds	r3, #36	; 0x24
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f001 f9f3 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a4ee:	e005      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4f4:	e002      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a4f6:	bf00      	nop
 800a4f8:	e000      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a4fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a502:	4b4d      	ldr	r3, [pc, #308]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a506:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50e:	494a      	ldr	r1, [pc, #296]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a510:	4313      	orrs	r3, r2
 800a512:	650b      	str	r3, [r1, #80]	; 0x50
 800a514:	e001      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a522:	2b00      	cmp	r3, #0
 800a524:	d049      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a52c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a530:	d030      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a532:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a536:	d82a      	bhi.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a538:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a53c:	d02c      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a53e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a542:	d824      	bhi.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a548:	d018      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a54a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a54e:	d81e      	bhi.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a558:	d007      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a55a:	e018      	b.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a55c:	4b36      	ldr	r3, [pc, #216]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	4a35      	ldr	r2, [pc, #212]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a566:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a568:	e017      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3304      	adds	r3, #4
 800a56e:	2100      	movs	r1, #0
 800a570:	4618      	mov	r0, r3
 800a572:	f001 f8fb 	bl	800b76c <RCCEx_PLL2_Config>
 800a576:	4603      	mov	r3, r0
 800a578:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a57a:	e00e      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3324      	adds	r3, #36	; 0x24
 800a580:	2100      	movs	r1, #0
 800a582:	4618      	mov	r0, r3
 800a584:	f001 f9a4 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a588:	4603      	mov	r3, r0
 800a58a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a58c:	e005      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	75fb      	strb	r3, [r7, #23]
      break;
 800a592:	e002      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a594:	bf00      	nop
 800a596:	e000      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a5a0:	4b25      	ldr	r3, [pc, #148]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5ae:	4922      	ldr	r1, [pc, #136]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	658b      	str	r3, [r1, #88]	; 0x58
 800a5b4:	e001      	b.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d04b      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a5cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5d0:	d030      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a5d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5d6:	d82a      	bhi.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5dc:	d02e      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a5de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5e2:	d824      	bhi.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e8:	d018      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a5ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5ee:	d81e      	bhi.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a5f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5f8:	d007      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a5fa:	e018      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5fc:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	4a0d      	ldr	r2, [pc, #52]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a606:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a608:	e019      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3304      	adds	r3, #4
 800a60e:	2100      	movs	r1, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f001 f8ab 	bl	800b76c <RCCEx_PLL2_Config>
 800a616:	4603      	mov	r3, r0
 800a618:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a61a:	e010      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3324      	adds	r3, #36	; 0x24
 800a620:	2100      	movs	r1, #0
 800a622:	4618      	mov	r0, r3
 800a624:	f001 f954 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a62c:	e007      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	75fb      	strb	r3, [r7, #23]
      break;
 800a632:	e004      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a634:	bf00      	nop
 800a636:	e002      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a638:	58024400 	.word	0x58024400
      break;
 800a63c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a644:	4b99      	ldr	r3, [pc, #612]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a648:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a652:	4996      	ldr	r1, [pc, #600]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a654:	4313      	orrs	r3, r2
 800a656:	658b      	str	r3, [r1, #88]	; 0x58
 800a658:	e001      	b.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d032      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a66e:	2b30      	cmp	r3, #48	; 0x30
 800a670:	d01c      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x348>
 800a672:	2b30      	cmp	r3, #48	; 0x30
 800a674:	d817      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a676:	2b20      	cmp	r3, #32
 800a678:	d00c      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800a67a:	2b20      	cmp	r3, #32
 800a67c:	d813      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d016      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a682:	2b10      	cmp	r3, #16
 800a684:	d10f      	bne.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a686:	4b89      	ldr	r3, [pc, #548]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68a:	4a88      	ldr	r2, [pc, #544]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a68c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a692:	e00e      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	2102      	movs	r1, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f001 f866 	bl	800b76c <RCCEx_PLL2_Config>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a6a4:	e005      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6aa:	e002      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a6ac:	bf00      	nop
 800a6ae:	e000      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800a6b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d109      	bne.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a6b8:	4b7c      	ldr	r3, [pc, #496]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a6ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c4:	4979      	ldr	r1, [pc, #484]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a6ca:	e001      	b.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d047      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6e4:	d030      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a6e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6ea:	d82a      	bhi.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a6ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6f0:	d02c      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a6f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6f6:	d824      	bhi.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a6f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6fc:	d018      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800a6fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a702:	d81e      	bhi.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800a704:	2b00      	cmp	r3, #0
 800a706:	d003      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800a708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a70c:	d007      	beq.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800a70e:	e018      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a710:	4b66      	ldr	r3, [pc, #408]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a714:	4a65      	ldr	r2, [pc, #404]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a71a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a71c:	e017      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3304      	adds	r3, #4
 800a722:	2100      	movs	r1, #0
 800a724:	4618      	mov	r0, r3
 800a726:	f001 f821 	bl	800b76c <RCCEx_PLL2_Config>
 800a72a:	4603      	mov	r3, r0
 800a72c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a72e:	e00e      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3324      	adds	r3, #36	; 0x24
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f001 f8ca 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a73c:	4603      	mov	r3, r0
 800a73e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a740:	e005      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	75fb      	strb	r3, [r7, #23]
      break;
 800a746:	e002      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a748:	bf00      	nop
 800a74a:	e000      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800a74c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a74e:	7dfb      	ldrb	r3, [r7, #23]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d109      	bne.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a754:	4b55      	ldr	r3, [pc, #340]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a758:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a760:	4952      	ldr	r1, [pc, #328]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a762:	4313      	orrs	r3, r2
 800a764:	650b      	str	r3, [r1, #80]	; 0x50
 800a766:	e001      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d049      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a77c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a780:	d02e      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a786:	d828      	bhi.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a788:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a78c:	d02a      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800a78e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a792:	d822      	bhi.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a794:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a798:	d026      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800a79a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a79e:	d81c      	bhi.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a7a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7a4:	d010      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a7a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7aa:	d816      	bhi.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01d      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x488>
 800a7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b4:	d111      	bne.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 ffd5 	bl	800b76c <RCCEx_PLL2_Config>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a7c6:	e012      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3324      	adds	r3, #36	; 0x24
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 f87e 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a7d8:	e009      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a7de:	e006      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a7e0:	bf00      	nop
 800a7e2:	e004      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a7e4:	bf00      	nop
 800a7e6:	e002      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a7e8:	bf00      	nop
 800a7ea:	e000      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800a7ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7f4:	4b2d      	ldr	r3, [pc, #180]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a800:	492a      	ldr	r1, [pc, #168]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a802:	4313      	orrs	r3, r2
 800a804:	650b      	str	r3, [r1, #80]	; 0x50
 800a806:	e001      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d04d      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a822:	d02e      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a828:	d828      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a82e:	d02a      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a834:	d822      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a83a:	d026      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800a83c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a840:	d81c      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a846:	d010      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a84c:	d816      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d01d      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a856:	d111      	bne.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3304      	adds	r3, #4
 800a85c:	2101      	movs	r1, #1
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 ff84 	bl	800b76c <RCCEx_PLL2_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a868:	e012      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3324      	adds	r3, #36	; 0x24
 800a86e:	2101      	movs	r1, #1
 800a870:	4618      	mov	r0, r3
 800a872:	f001 f82d 	bl	800b8d0 <RCCEx_PLL3_Config>
 800a876:	4603      	mov	r3, r0
 800a878:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a87a:	e009      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	75fb      	strb	r3, [r7, #23]
      break;
 800a880:	e006      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a882:	bf00      	nop
 800a884:	e004      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a886:	bf00      	nop
 800a888:	e002      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a88a:	bf00      	nop
 800a88c:	e000      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800a88e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a890:	7dfb      	ldrb	r3, [r7, #23]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10c      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a896:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a8a4:	4901      	ldr	r1, [pc, #4]	; (800a8ac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	658b      	str	r3, [r1, #88]	; 0x58
 800a8aa:	e003      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800a8ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d02f      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8c8:	d00e      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800a8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ce:	d814      	bhi.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x596>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d015      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800a8d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8d8:	d10f      	bne.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8da:	4baf      	ldr	r3, [pc, #700]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8de:	4aae      	ldr	r2, [pc, #696]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a8e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a8e6:	e00c      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 ff3c 	bl	800b76c <RCCEx_PLL2_Config>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a8f8:	e003      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a8fe:	e000      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800a900:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a902:	7dfb      	ldrb	r3, [r7, #23]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d109      	bne.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a908:	4ba3      	ldr	r3, [pc, #652]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a914:	49a0      	ldr	r1, [pc, #640]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a916:	4313      	orrs	r3, r2
 800a918:	650b      	str	r3, [r1, #80]	; 0x50
 800a91a:	e001      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d032      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a930:	2b03      	cmp	r3, #3
 800a932:	d81b      	bhi.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a934:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a973 	.word	0x0800a973
 800a940:	0800a94d 	.word	0x0800a94d
 800a944:	0800a95b 	.word	0x0800a95b
 800a948:	0800a973 	.word	0x0800a973
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94c:	4b92      	ldr	r3, [pc, #584]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4a91      	ldr	r2, [pc, #580]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a958:	e00c      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	3304      	adds	r3, #4
 800a95e:	2102      	movs	r1, #2
 800a960:	4618      	mov	r0, r3
 800a962:	f000 ff03 	bl	800b76c <RCCEx_PLL2_Config>
 800a966:	4603      	mov	r3, r0
 800a968:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a96a:	e003      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	75fb      	strb	r3, [r7, #23]
      break;
 800a970:	e000      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a972:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d109      	bne.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a97a:	4b87      	ldr	r3, [pc, #540]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a97c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a97e:	f023 0203 	bic.w	r2, r3, #3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a986:	4984      	ldr	r1, [pc, #528]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a98c:	e001      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 8086 	beq.w	800aaac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9a0:	4b7e      	ldr	r3, [pc, #504]	; (800ab9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a7d      	ldr	r2, [pc, #500]	; (800ab9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a9a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9ac:	f7fb f99a 	bl	8005ce4 <HAL_GetTick>
 800a9b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9b2:	e009      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9b4:	f7fb f996 	bl	8005ce4 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	2b64      	cmp	r3, #100	; 0x64
 800a9c0:	d902      	bls.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	75fb      	strb	r3, [r7, #23]
        break;
 800a9c6:	e005      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9c8:	4b74      	ldr	r3, [pc, #464]	; (800ab9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0ef      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d166      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a9da:	4b6f      	ldr	r3, [pc, #444]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9e4:	4053      	eors	r3, r2
 800a9e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d013      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9ee:	4b6a      	ldr	r3, [pc, #424]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9f8:	4b67      	ldr	r3, [pc, #412]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fc:	4a66      	ldr	r2, [pc, #408]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a9fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa02:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa04:	4b64      	ldr	r3, [pc, #400]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa08:	4a63      	ldr	r2, [pc, #396]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa0e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa10:	4a61      	ldr	r2, [pc, #388]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa20:	d115      	bne.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa22:	f7fb f95f 	bl	8005ce4 <HAL_GetTick>
 800aa26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa28:	e00b      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa2a:	f7fb f95b 	bl	8005ce4 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d902      	bls.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	75fb      	strb	r3, [r7, #23]
            break;
 800aa40:	e005      	b.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa42:	4b55      	ldr	r3, [pc, #340]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0ed      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800aa4e:	7dfb      	ldrb	r3, [r7, #23]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d126      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa62:	d10d      	bne.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800aa64:	4b4c      	ldr	r3, [pc, #304]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa72:	0919      	lsrs	r1, r3, #4
 800aa74:	4b4a      	ldr	r3, [pc, #296]	; (800aba0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800aa76:	400b      	ands	r3, r1
 800aa78:	4947      	ldr	r1, [pc, #284]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	610b      	str	r3, [r1, #16]
 800aa7e:	e005      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800aa80:	4b45      	ldr	r3, [pc, #276]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	4a44      	ldr	r2, [pc, #272]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa8a:	6113      	str	r3, [r2, #16]
 800aa8c:	4b42      	ldr	r3, [pc, #264]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa9a:	493f      	ldr	r1, [pc, #252]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	670b      	str	r3, [r1, #112]	; 0x70
 800aaa0:	e004      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
 800aaa4:	75bb      	strb	r3, [r7, #22]
 800aaa6:	e001      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 8085 	beq.w	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aabe:	2b28      	cmp	r3, #40	; 0x28
 800aac0:	d866      	bhi.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800aba5 	.word	0x0800aba5
 800aacc:	0800ab91 	.word	0x0800ab91
 800aad0:	0800ab91 	.word	0x0800ab91
 800aad4:	0800ab91 	.word	0x0800ab91
 800aad8:	0800ab91 	.word	0x0800ab91
 800aadc:	0800ab91 	.word	0x0800ab91
 800aae0:	0800ab91 	.word	0x0800ab91
 800aae4:	0800ab91 	.word	0x0800ab91
 800aae8:	0800ab6d 	.word	0x0800ab6d
 800aaec:	0800ab91 	.word	0x0800ab91
 800aaf0:	0800ab91 	.word	0x0800ab91
 800aaf4:	0800ab91 	.word	0x0800ab91
 800aaf8:	0800ab91 	.word	0x0800ab91
 800aafc:	0800ab91 	.word	0x0800ab91
 800ab00:	0800ab91 	.word	0x0800ab91
 800ab04:	0800ab91 	.word	0x0800ab91
 800ab08:	0800ab7f 	.word	0x0800ab7f
 800ab0c:	0800ab91 	.word	0x0800ab91
 800ab10:	0800ab91 	.word	0x0800ab91
 800ab14:	0800ab91 	.word	0x0800ab91
 800ab18:	0800ab91 	.word	0x0800ab91
 800ab1c:	0800ab91 	.word	0x0800ab91
 800ab20:	0800ab91 	.word	0x0800ab91
 800ab24:	0800ab91 	.word	0x0800ab91
 800ab28:	0800aba5 	.word	0x0800aba5
 800ab2c:	0800ab91 	.word	0x0800ab91
 800ab30:	0800ab91 	.word	0x0800ab91
 800ab34:	0800ab91 	.word	0x0800ab91
 800ab38:	0800ab91 	.word	0x0800ab91
 800ab3c:	0800ab91 	.word	0x0800ab91
 800ab40:	0800ab91 	.word	0x0800ab91
 800ab44:	0800ab91 	.word	0x0800ab91
 800ab48:	0800aba5 	.word	0x0800aba5
 800ab4c:	0800ab91 	.word	0x0800ab91
 800ab50:	0800ab91 	.word	0x0800ab91
 800ab54:	0800ab91 	.word	0x0800ab91
 800ab58:	0800ab91 	.word	0x0800ab91
 800ab5c:	0800ab91 	.word	0x0800ab91
 800ab60:	0800ab91 	.word	0x0800ab91
 800ab64:	0800ab91 	.word	0x0800ab91
 800ab68:	0800aba5 	.word	0x0800aba5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	2101      	movs	r1, #1
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 fdfa 	bl	800b76c <RCCEx_PLL2_Config>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ab7c:	e013      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3324      	adds	r3, #36	; 0x24
 800ab82:	2101      	movs	r1, #1
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 fea3 	bl	800b8d0 <RCCEx_PLL3_Config>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ab8e:	e00a      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	75fb      	strb	r3, [r7, #23]
      break;
 800ab94:	e007      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ab96:	bf00      	nop
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	58024800 	.word	0x58024800
 800aba0:	00ffffcf 	.word	0x00ffffcf
      break;
 800aba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d109      	bne.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800abac:	4b96      	ldr	r3, [pc, #600]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800abae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb8:	4993      	ldr	r1, [pc, #588]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	654b      	str	r3, [r1, #84]	; 0x54
 800abbe:	e001      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
 800abc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d038      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abd4:	2b05      	cmp	r3, #5
 800abd6:	d821      	bhi.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800abd8:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800abda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abde:	bf00      	nop
 800abe0:	0800ac23 	.word	0x0800ac23
 800abe4:	0800abf9 	.word	0x0800abf9
 800abe8:	0800ac0b 	.word	0x0800ac0b
 800abec:	0800ac23 	.word	0x0800ac23
 800abf0:	0800ac23 	.word	0x0800ac23
 800abf4:	0800ac23 	.word	0x0800ac23
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	3304      	adds	r3, #4
 800abfc:	2101      	movs	r1, #1
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 fdb4 	bl	800b76c <RCCEx_PLL2_Config>
 800ac04:	4603      	mov	r3, r0
 800ac06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ac08:	e00c      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3324      	adds	r3, #36	; 0x24
 800ac0e:	2101      	movs	r1, #1
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fe5d 	bl	800b8d0 <RCCEx_PLL3_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ac1a:	e003      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac20:	e000      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800ac22:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d109      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ac2a:	4b77      	ldr	r3, [pc, #476]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ac2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2e:	f023 0207 	bic.w	r2, r3, #7
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac36:	4974      	ldr	r1, [pc, #464]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	654b      	str	r3, [r1, #84]	; 0x54
 800ac3c:	e001      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0304 	and.w	r3, r3, #4
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d03a      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac54:	2b05      	cmp	r3, #5
 800ac56:	d821      	bhi.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800ac58:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800ac5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5e:	bf00      	nop
 800ac60:	0800aca3 	.word	0x0800aca3
 800ac64:	0800ac79 	.word	0x0800ac79
 800ac68:	0800ac8b 	.word	0x0800ac8b
 800ac6c:	0800aca3 	.word	0x0800aca3
 800ac70:	0800aca3 	.word	0x0800aca3
 800ac74:	0800aca3 	.word	0x0800aca3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 fd74 	bl	800b76c <RCCEx_PLL2_Config>
 800ac84:	4603      	mov	r3, r0
 800ac86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ac88:	e00c      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3324      	adds	r3, #36	; 0x24
 800ac8e:	2101      	movs	r1, #1
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 fe1d 	bl	800b8d0 <RCCEx_PLL3_Config>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ac9a:	e003      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aca0:	e000      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800aca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800acaa:	4b57      	ldr	r3, [pc, #348]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800acac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acae:	f023 0207 	bic.w	r2, r3, #7
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb8:	4953      	ldr	r1, [pc, #332]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800acba:	4313      	orrs	r3, r2
 800acbc:	658b      	str	r3, [r1, #88]	; 0x58
 800acbe:	e001      	b.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
 800acc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0320 	and.w	r3, r3, #32
 800accc:	2b00      	cmp	r3, #0
 800acce:	d04b      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acda:	d02e      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800acdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ace0:	d828      	bhi.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ace2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ace6:	d02a      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800ace8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acec:	d822      	bhi.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800acee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acf2:	d026      	beq.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800acf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acf8:	d81c      	bhi.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800acfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acfe:	d010      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800ad00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad04:	d816      	bhi.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d01d      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800ad0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad0e:	d111      	bne.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	2100      	movs	r1, #0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fd28 	bl	800b76c <RCCEx_PLL2_Config>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ad20:	e012      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3324      	adds	r3, #36	; 0x24
 800ad26:	2102      	movs	r1, #2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 fdd1 	bl	800b8d0 <RCCEx_PLL3_Config>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ad32:	e009      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	75fb      	strb	r3, [r7, #23]
      break;
 800ad38:	e006      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800ad3a:	bf00      	nop
 800ad3c:	e004      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800ad3e:	bf00      	nop
 800ad40:	e002      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800ad42:	bf00      	nop
 800ad44:	e000      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800ad46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad48:	7dfb      	ldrb	r3, [r7, #23]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10a      	bne.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad4e:	4b2e      	ldr	r3, [pc, #184]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ad50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad5c:	492a      	ldr	r1, [pc, #168]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	654b      	str	r3, [r1, #84]	; 0x54
 800ad62:	e001      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d04d      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad7e:	d02e      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800ad80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ad84:	d828      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800ad86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad8a:	d02a      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ad8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad90:	d822      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800ad92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad96:	d026      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ad98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad9c:	d81c      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800ad9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ada2:	d010      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800ada4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ada8:	d816      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d01d      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800adae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb2:	d111      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3304      	adds	r3, #4
 800adb8:	2100      	movs	r1, #0
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fcd6 	bl	800b76c <RCCEx_PLL2_Config>
 800adc0:	4603      	mov	r3, r0
 800adc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800adc4:	e012      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3324      	adds	r3, #36	; 0x24
 800adca:	2102      	movs	r1, #2
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fd7f 	bl	800b8d0 <RCCEx_PLL3_Config>
 800add2:	4603      	mov	r3, r0
 800add4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800add6:	e009      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	75fb      	strb	r3, [r7, #23]
      break;
 800addc:	e006      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800adde:	bf00      	nop
 800ade0:	e004      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ade2:	bf00      	nop
 800ade4:	e002      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800ade6:	bf00      	nop
 800ade8:	e000      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800adea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10c      	bne.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800adf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae00:	4901      	ldr	r1, [pc, #4]	; (800ae08 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	658b      	str	r3, [r1, #88]	; 0x58
 800ae06:	e003      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800ae08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
 800ae0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d04b      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ae26:	d02e      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ae28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ae2c:	d828      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ae2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae32:	d02a      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ae34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae38:	d822      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ae3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ae3e:	d026      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800ae40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ae44:	d81c      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ae46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae4a:	d010      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800ae4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae50:	d816      	bhi.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d01d      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800ae56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae5a:	d111      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fc82 	bl	800b76c <RCCEx_PLL2_Config>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ae6c:	e012      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3324      	adds	r3, #36	; 0x24
 800ae72:	2102      	movs	r1, #2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fd2b 	bl	800b8d0 <RCCEx_PLL3_Config>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ae7e:	e009      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	75fb      	strb	r3, [r7, #23]
      break;
 800ae84:	e006      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ae86:	bf00      	nop
 800ae88:	e004      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ae8a:	bf00      	nop
 800ae8c:	e002      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ae8e:	bf00      	nop
 800ae90:	e000      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ae92:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ae9a:	4b9d      	ldr	r3, [pc, #628]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ae9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aea8:	4999      	ldr	r1, [pc, #612]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	658b      	str	r3, [r1, #88]	; 0x58
 800aeae:	e001      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
 800aeb2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0308 	and.w	r3, r3, #8
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01a      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeca:	d10a      	bne.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3324      	adds	r3, #36	; 0x24
 800aed0:	2102      	movs	r1, #2
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fcfc 	bl	800b8d0 <RCCEx_PLL3_Config>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aee2:	4b8b      	ldr	r3, [pc, #556]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aef0:	4987      	ldr	r1, [pc, #540]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0310 	and.w	r3, r3, #16
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01a      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af0c:	d10a      	bne.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3324      	adds	r3, #36	; 0x24
 800af12:	2102      	movs	r1, #2
 800af14:	4618      	mov	r0, r3
 800af16:	f000 fcdb 	bl	800b8d0 <RCCEx_PLL3_Config>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800af24:	4b7a      	ldr	r3, [pc, #488]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800af26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af32:	4977      	ldr	r1, [pc, #476]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800af34:	4313      	orrs	r3, r2
 800af36:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d034      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af4e:	d01d      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800af50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af54:	d817      	bhi.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800af5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af5e:	d009      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800af60:	e011      	b.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3304      	adds	r3, #4
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fbff 	bl	800b76c <RCCEx_PLL2_Config>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800af72:	e00c      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3324      	adds	r3, #36	; 0x24
 800af78:	2102      	movs	r1, #2
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fca8 	bl	800b8d0 <RCCEx_PLL3_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800af84:	e003      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	75fb      	strb	r3, [r7, #23]
      break;
 800af8a:	e000      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800af8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af94:	4b5e      	ldr	r3, [pc, #376]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800af96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800afa2:	495b      	ldr	r1, [pc, #364]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	658b      	str	r3, [r1, #88]	; 0x58
 800afa8:	e001      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d033      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afc4:	d01c      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800afc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afca:	d816      	bhi.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800afcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afd0:	d003      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800afd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afd6:	d007      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800afd8:	e00f      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afda:	4b4d      	ldr	r3, [pc, #308]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	4a4c      	ldr	r2, [pc, #304]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800afe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afe4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800afe6:	e00c      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3324      	adds	r3, #36	; 0x24
 800afec:	2101      	movs	r1, #1
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fc6e 	bl	800b8d0 <RCCEx_PLL3_Config>
 800aff4:	4603      	mov	r3, r0
 800aff6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800aff8:	e003      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	75fb      	strb	r3, [r7, #23]
      break;
 800affe:	e000      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b000:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b008:	4b41      	ldr	r3, [pc, #260]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b016:	493e      	ldr	r1, [pc, #248]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b018:	4313      	orrs	r3, r2
 800b01a:	654b      	str	r3, [r1, #84]	; 0x54
 800b01c:	e001      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d029      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b03a:	d007      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b03c:	e00f      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b03e:	4b34      	ldr	r3, [pc, #208]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b042:	4a33      	ldr	r2, [pc, #204]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b048:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b04a:	e00b      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3304      	adds	r3, #4
 800b050:	2102      	movs	r1, #2
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fb8a 	bl	800b76c <RCCEx_PLL2_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b05c:	e002      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	75fb      	strb	r3, [r7, #23]
      break;
 800b062:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d109      	bne.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b06a:	4b29      	ldr	r3, [pc, #164]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b06e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b076:	4926      	ldr	r1, [pc, #152]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b07c:	e001      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3324      	adds	r3, #36	; 0x24
 800b092:	2102      	movs	r1, #2
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fc1b 	bl	800b8d0 <RCCEx_PLL3_Config>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d033      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0b8:	d017      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b0ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0be:	d811      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0c4:	d013      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b0c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0ca:	d80b      	bhi.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d010      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b0d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d4:	d106      	bne.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0d6:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0da:	4a0d      	ldr	r2, [pc, #52]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b0e2:	e007      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0e8:	e004      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b0ea:	bf00      	nop
 800b0ec:	e002      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b0ee:	bf00      	nop
 800b0f0:	e000      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b0f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10c      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b106:	4902      	ldr	r1, [pc, #8]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b108:	4313      	orrs	r3, r2
 800b10a:	654b      	str	r3, [r1, #84]	; 0x54
 800b10c:	e004      	b.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b10e:	bf00      	nop
 800b110:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d008      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b124:	4b31      	ldr	r3, [pc, #196]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b130:	492e      	ldr	r1, [pc, #184]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b132:	4313      	orrs	r3, r2
 800b134:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d009      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b142:	4b2a      	ldr	r3, [pc, #168]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b150:	4926      	ldr	r1, [pc, #152]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b152:	4313      	orrs	r3, r2
 800b154:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d008      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b162:	4b22      	ldr	r3, [pc, #136]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b166:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b16e:	491f      	ldr	r1, [pc, #124]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b170:	4313      	orrs	r3, r2
 800b172:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00d      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b180:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	4a19      	ldr	r2, [pc, #100]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b18a:	6113      	str	r3, [r2, #16]
 800b18c:	4b17      	ldr	r3, [pc, #92]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b196:	4915      	ldr	r1, [pc, #84]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b198:	4313      	orrs	r3, r2
 800b19a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	da08      	bge.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b1a4:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b0:	490e      	ldr	r1, [pc, #56]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b1c2:	4b0a      	ldr	r3, [pc, #40]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d0:	4906      	ldr	r1, [pc, #24]	; (800b1ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b1d6:	7dbb      	ldrb	r3, [r7, #22]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e000      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	58024400 	.word	0x58024400

0800b1f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b1f4:	f7ff f85a 	bl	800a2ac <HAL_RCC_GetHCLKFreq>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	4b06      	ldr	r3, [pc, #24]	; (800b214 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	091b      	lsrs	r3, r3, #4
 800b200:	f003 0307 	and.w	r3, r3, #7
 800b204:	4904      	ldr	r1, [pc, #16]	; (800b218 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b206:	5ccb      	ldrb	r3, [r1, r3]
 800b208:	f003 031f 	and.w	r3, r3, #31
 800b20c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b210:	4618      	mov	r0, r3
 800b212:	bd80      	pop	{r7, pc}
 800b214:	58024400 	.word	0x58024400
 800b218:	0800f66c 	.word	0x0800f66c

0800b21c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b089      	sub	sp, #36	; 0x24
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b224:	4ba1      	ldr	r3, [pc, #644]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b228:	f003 0303 	and.w	r3, r3, #3
 800b22c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b22e:	4b9f      	ldr	r3, [pc, #636]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b232:	0b1b      	lsrs	r3, r3, #12
 800b234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b238:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b23a:	4b9c      	ldr	r3, [pc, #624]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23e:	091b      	lsrs	r3, r3, #4
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b246:	4b99      	ldr	r3, [pc, #612]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24a:	08db      	lsrs	r3, r3, #3
 800b24c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	fb02 f303 	mul.w	r3, r2, r3
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 8111 	beq.w	800b48c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	f000 8083 	beq.w	800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b02      	cmp	r3, #2
 800b276:	f200 80a1 	bhi.w	800b3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d056      	beq.n	800b334 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b286:	e099      	b.n	800b3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b288:	4b88      	ldr	r3, [pc, #544]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0320 	and.w	r3, r3, #32
 800b290:	2b00      	cmp	r3, #0
 800b292:	d02d      	beq.n	800b2f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b294:	4b85      	ldr	r3, [pc, #532]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	4a84      	ldr	r2, [pc, #528]	; (800b4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2be:	4b7b      	ldr	r3, [pc, #492]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b2ee:	e087      	b.n	800b400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b6a      	ldr	r3, [pc, #424]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a03 	vldr	s12, [r7, #12]
 800b316:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b332:	e065      	b.n	800b400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b346:	4b59      	ldr	r3, [pc, #356]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b356:	ed97 6a03 	vldr	s12, [r7, #12]
 800b35a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b376:	e043      	b.n	800b400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b382:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b38a:	4b48      	ldr	r3, [pc, #288]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3ba:	e021      	b.n	800b400 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ce:	4b37      	ldr	r3, [pc, #220]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b400:	4b2a      	ldr	r3, [pc, #168]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b404:	0a5b      	lsrs	r3, r3, #9
 800b406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b426:	ee17 2a90 	vmov	r2, s15
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b42e:	4b1f      	ldr	r3, [pc, #124]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b432:	0c1b      	lsrs	r3, r3, #16
 800b434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b438:	ee07 3a90 	vmov	s15, r3
 800b43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b444:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b448:	edd7 6a07 	vldr	s13, [r7, #28]
 800b44c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b454:	ee17 2a90 	vmov	r2, s15
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b45c:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b460:	0e1b      	lsrs	r3, r3, #24
 800b462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b466:	ee07 3a90 	vmov	s15, r3
 800b46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b472:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b476:	edd7 6a07 	vldr	s13, [r7, #28]
 800b47a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b482:	ee17 2a90 	vmov	r2, s15
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b48a:	e008      	b.n	800b49e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	609a      	str	r2, [r3, #8]
}
 800b49e:	bf00      	nop
 800b4a0:	3724      	adds	r7, #36	; 0x24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	58024400 	.word	0x58024400
 800b4b0:	03d09000 	.word	0x03d09000
 800b4b4:	46000000 	.word	0x46000000
 800b4b8:	4c742400 	.word	0x4c742400
 800b4bc:	4a742400 	.word	0x4a742400
 800b4c0:	4af42400 	.word	0x4af42400

0800b4c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b089      	sub	sp, #36	; 0x24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4cc:	4ba1      	ldr	r3, [pc, #644]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d0:	f003 0303 	and.w	r3, r3, #3
 800b4d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b4d6:	4b9f      	ldr	r3, [pc, #636]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4da:	0d1b      	lsrs	r3, r3, #20
 800b4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b4e2:	4b9c      	ldr	r3, [pc, #624]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e6:	0a1b      	lsrs	r3, r3, #8
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b4ee:	4b99      	ldr	r3, [pc, #612]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f2:	08db      	lsrs	r3, r3, #3
 800b4f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	fb02 f303 	mul.w	r3, r2, r3
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b506:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8111 	beq.w	800b734 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	2b02      	cmp	r3, #2
 800b516:	f000 8083 	beq.w	800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	f200 80a1 	bhi.w	800b664 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d056      	beq.n	800b5dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b52e:	e099      	b.n	800b664 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b530:	4b88      	ldr	r3, [pc, #544]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0320 	and.w	r3, r3, #32
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d02d      	beq.n	800b598 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b53c:	4b85      	ldr	r3, [pc, #532]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	08db      	lsrs	r3, r3, #3
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	4a84      	ldr	r2, [pc, #528]	; (800b758 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b548:	fa22 f303 	lsr.w	r3, r2, r3
 800b54c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	ee07 3a90 	vmov	s15, r3
 800b554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	ee07 3a90 	vmov	s15, r3
 800b55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b566:	4b7b      	ldr	r3, [pc, #492]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b576:	ed97 6a03 	vldr	s12, [r7, #12]
 800b57a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b75c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b592:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b596:	e087      	b.n	800b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b760 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5aa:	4b6a      	ldr	r3, [pc, #424]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b75c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5da:	e065      	b.n	800b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	ee07 3a90 	vmov	s15, r3
 800b5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ee:	4b59      	ldr	r3, [pc, #356]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b602:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b75c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b61e:	e043      	b.n	800b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b768 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b632:	4b48      	ldr	r3, [pc, #288]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b642:	ed97 6a03 	vldr	s12, [r7, #12]
 800b646:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b75c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b662:	e021      	b.n	800b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b764 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b676:	4b37      	ldr	r3, [pc, #220]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67e:	ee07 3a90 	vmov	s15, r3
 800b682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b686:	ed97 6a03 	vldr	s12, [r7, #12]
 800b68a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b75c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b6a8:	4b2a      	ldr	r3, [pc, #168]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ac:	0a5b      	lsrs	r3, r3, #9
 800b6ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b2:	ee07 3a90 	vmov	s15, r3
 800b6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ce:	ee17 2a90 	vmov	r2, s15
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b6d6:	4b1f      	ldr	r3, [pc, #124]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6da:	0c1b      	lsrs	r3, r3, #16
 800b6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6e0:	ee07 3a90 	vmov	s15, r3
 800b6e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fc:	ee17 2a90 	vmov	r2, s15
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b704:	4b13      	ldr	r3, [pc, #76]	; (800b754 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b708:	0e1b      	lsrs	r3, r3, #24
 800b70a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b70e:	ee07 3a90 	vmov	s15, r3
 800b712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b71a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b71e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b72a:	ee17 2a90 	vmov	r2, s15
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b732:	e008      	b.n	800b746 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	609a      	str	r2, [r3, #8]
}
 800b746:	bf00      	nop
 800b748:	3724      	adds	r7, #36	; 0x24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	58024400 	.word	0x58024400
 800b758:	03d09000 	.word	0x03d09000
 800b75c:	46000000 	.word	0x46000000
 800b760:	4c742400 	.word	0x4c742400
 800b764:	4a742400 	.word	0x4a742400
 800b768:	4af42400 	.word	0x4af42400

0800b76c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b77a:	4b53      	ldr	r3, [pc, #332]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	2b03      	cmp	r3, #3
 800b784:	d101      	bne.n	800b78a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e099      	b.n	800b8be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b78a:	4b4f      	ldr	r3, [pc, #316]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a4e      	ldr	r2, [pc, #312]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b796:	f7fa faa5 	bl	8005ce4 <HAL_GetTick>
 800b79a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b79c:	e008      	b.n	800b7b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b79e:	f7fa faa1 	bl	8005ce4 <HAL_GetTick>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d901      	bls.n	800b7b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e086      	b.n	800b8be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7b0:	4b45      	ldr	r3, [pc, #276]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1f0      	bne.n	800b79e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7bc:	4b42      	ldr	r3, [pc, #264]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	031b      	lsls	r3, r3, #12
 800b7ca:	493f      	ldr	r1, [pc, #252]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	628b      	str	r3, [r1, #40]	; 0x28
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	025b      	lsls	r3, r3, #9
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	431a      	orrs	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	041b      	lsls	r3, r3, #16
 800b7ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	061b      	lsls	r3, r3, #24
 800b7fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b800:	4931      	ldr	r1, [pc, #196]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b802:	4313      	orrs	r3, r2
 800b804:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b806:	4b30      	ldr	r3, [pc, #192]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	492d      	ldr	r1, [pc, #180]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b814:	4313      	orrs	r3, r2
 800b816:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b818:	4b2b      	ldr	r3, [pc, #172]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	f023 0220 	bic.w	r2, r3, #32
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	4928      	ldr	r1, [pc, #160]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b826:	4313      	orrs	r3, r2
 800b828:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b82a:	4b27      	ldr	r3, [pc, #156]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82e:	4a26      	ldr	r2, [pc, #152]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b830:	f023 0310 	bic.w	r3, r3, #16
 800b834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b836:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b83a:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <RCCEx_PLL2_Config+0x160>)
 800b83c:	4013      	ands	r3, r2
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	69d2      	ldr	r2, [r2, #28]
 800b842:	00d2      	lsls	r2, r2, #3
 800b844:	4920      	ldr	r1, [pc, #128]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b846:	4313      	orrs	r3, r2
 800b848:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b84a:	4b1f      	ldr	r3, [pc, #124]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84e:	4a1e      	ldr	r2, [pc, #120]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b850:	f043 0310 	orr.w	r3, r3, #16
 800b854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d106      	bne.n	800b86a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b85c:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	4a19      	ldr	r2, [pc, #100]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b866:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b868:	e00f      	b.n	800b88a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d106      	bne.n	800b87e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b870:	4b15      	ldr	r3, [pc, #84]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	4a14      	ldr	r2, [pc, #80]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b87a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b87c:	e005      	b.n	800b88a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b87e:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b882:	4a11      	ldr	r2, [pc, #68]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b88a:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a0e      	ldr	r2, [pc, #56]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b890:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b896:	f7fa fa25 	bl	8005ce4 <HAL_GetTick>
 800b89a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b89c:	e008      	b.n	800b8b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b89e:	f7fa fa21 	bl	8005ce4 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d901      	bls.n	800b8b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e006      	b.n	800b8be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <RCCEx_PLL2_Config+0x15c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d0f0      	beq.n	800b89e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	ffff0007 	.word	0xffff0007

0800b8d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8de:	4b53      	ldr	r3, [pc, #332]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d101      	bne.n	800b8ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e099      	b.n	800ba22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8ee:	4b4f      	ldr	r3, [pc, #316]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a4e      	ldr	r2, [pc, #312]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b8f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8fa:	f7fa f9f3 	bl	8005ce4 <HAL_GetTick>
 800b8fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b900:	e008      	b.n	800b914 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b902:	f7fa f9ef 	bl	8005ce4 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d901      	bls.n	800b914 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e086      	b.n	800ba22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b914:	4b45      	ldr	r3, [pc, #276]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1f0      	bne.n	800b902 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b920:	4b42      	ldr	r3, [pc, #264]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b924:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	051b      	lsls	r3, r3, #20
 800b92e:	493f      	ldr	r1, [pc, #252]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b930:	4313      	orrs	r3, r2
 800b932:	628b      	str	r3, [r1, #40]	; 0x28
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	3b01      	subs	r3, #1
 800b93a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	3b01      	subs	r3, #1
 800b944:	025b      	lsls	r3, r3, #9
 800b946:	b29b      	uxth	r3, r3
 800b948:	431a      	orrs	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	3b01      	subs	r3, #1
 800b950:	041b      	lsls	r3, r3, #16
 800b952:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b956:	431a      	orrs	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	3b01      	subs	r3, #1
 800b95e:	061b      	lsls	r3, r3, #24
 800b960:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b964:	4931      	ldr	r1, [pc, #196]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b966:	4313      	orrs	r3, r2
 800b968:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b96a:	4b30      	ldr	r3, [pc, #192]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	492d      	ldr	r1, [pc, #180]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b97c:	4b2b      	ldr	r3, [pc, #172]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	4928      	ldr	r1, [pc, #160]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b98e:	4b27      	ldr	r3, [pc, #156]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b992:	4a26      	ldr	r2, [pc, #152]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b99a:	4b24      	ldr	r3, [pc, #144]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b99c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b99e:	4b24      	ldr	r3, [pc, #144]	; (800ba30 <RCCEx_PLL3_Config+0x160>)
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	69d2      	ldr	r2, [r2, #28]
 800b9a6:	00d2      	lsls	r2, r2, #3
 800b9a8:	4920      	ldr	r1, [pc, #128]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9ae:	4b1f      	ldr	r3, [pc, #124]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	4a1e      	ldr	r2, [pc, #120]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d106      	bne.n	800b9ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c4:	4a19      	ldr	r2, [pc, #100]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b9ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9cc:	e00f      	b.n	800b9ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d106      	bne.n	800b9e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9d4:	4b15      	ldr	r3, [pc, #84]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	4a14      	ldr	r2, [pc, #80]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9e0:	e005      	b.n	800b9ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9e2:	4b12      	ldr	r3, [pc, #72]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e6:	4a11      	ldr	r2, [pc, #68]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a0e      	ldr	r2, [pc, #56]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800b9f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9fa:	f7fa f973 	bl	8005ce4 <HAL_GetTick>
 800b9fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba00:	e008      	b.n	800ba14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ba02:	f7fa f96f 	bl	8005ce4 <HAL_GetTick>
 800ba06:	4602      	mov	r2, r0
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d901      	bls.n	800ba14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e006      	b.n	800ba22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba14:	4b05      	ldr	r3, [pc, #20]	; (800ba2c <RCCEx_PLL3_Config+0x15c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0f0      	beq.n	800ba02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	58024400 	.word	0x58024400
 800ba30:	ffff0007 	.word	0xffff0007

0800ba34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e0f1      	b.n	800bc2a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a78      	ldr	r2, [pc, #480]	; (800bc34 <HAL_SPI_Init+0x200>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d00f      	beq.n	800ba76 <HAL_SPI_Init+0x42>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a77      	ldr	r2, [pc, #476]	; (800bc38 <HAL_SPI_Init+0x204>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d00a      	beq.n	800ba76 <HAL_SPI_Init+0x42>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a75      	ldr	r2, [pc, #468]	; (800bc3c <HAL_SPI_Init+0x208>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d005      	beq.n	800ba76 <HAL_SPI_Init+0x42>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	2b0f      	cmp	r3, #15
 800ba70:	d901      	bls.n	800ba76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e0d9      	b.n	800bc2a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 fba2 	bl	800c1c0 <SPI_GetPacketSize>
 800ba7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a6c      	ldr	r2, [pc, #432]	; (800bc34 <HAL_SPI_Init+0x200>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d00c      	beq.n	800baa2 <HAL_SPI_Init+0x6e>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a6a      	ldr	r2, [pc, #424]	; (800bc38 <HAL_SPI_Init+0x204>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d007      	beq.n	800baa2 <HAL_SPI_Init+0x6e>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a69      	ldr	r2, [pc, #420]	; (800bc3c <HAL_SPI_Init+0x208>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d002      	beq.n	800baa2 <HAL_SPI_Init+0x6e>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b08      	cmp	r3, #8
 800baa0:	d811      	bhi.n	800bac6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800baa6:	4a63      	ldr	r2, [pc, #396]	; (800bc34 <HAL_SPI_Init+0x200>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d009      	beq.n	800bac0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a61      	ldr	r2, [pc, #388]	; (800bc38 <HAL_SPI_Init+0x204>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d004      	beq.n	800bac0 <HAL_SPI_Init+0x8c>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a60      	ldr	r2, [pc, #384]	; (800bc3c <HAL_SPI_Init+0x208>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d104      	bne.n	800baca <HAL_SPI_Init+0x96>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b10      	cmp	r3, #16
 800bac4:	d901      	bls.n	800baca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e0af      	b.n	800bc2a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d106      	bne.n	800bae4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7f9 fe08 	bl	80056f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2202      	movs	r2, #2
 800bae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f022 0201 	bic.w	r2, r2, #1
 800bafa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bb06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb10:	d119      	bne.n	800bb46 <HAL_SPI_Init+0x112>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb1a:	d103      	bne.n	800bb24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d008      	beq.n	800bb36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10c      	bne.n	800bb46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb34:	d107      	bne.n	800bb46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	69da      	ldr	r2, [r3, #28]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	431a      	orrs	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb58:	ea42 0103 	orr.w	r1, r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68da      	ldr	r2, [r3, #12]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	430a      	orrs	r2, r1
 800bb66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	431a      	orrs	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	431a      	orrs	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	431a      	orrs	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	431a      	orrs	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	431a      	orrs	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	431a      	orrs	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb9a:	431a      	orrs	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	431a      	orrs	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bba6:	ea42 0103 	orr.w	r1, r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	430a      	orrs	r2, r1
 800bbb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d113      	bne.n	800bbe6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bbe4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f022 0201 	bic.w	r2, r2, #1
 800bbf4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	430a      	orrs	r2, r1
 800bc16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	40013000 	.word	0x40013000
 800bc38:	40003800 	.word	0x40003800
 800bc3c:	40003c00 	.word	0x40003c00

0800bc40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08a      	sub	sp, #40	; 0x28
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	603b      	str	r3, [r7, #0]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3320      	adds	r3, #32
 800bc56:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <HAL_SPI_Transmit+0x2a>
 800bc66:	2302      	movs	r3, #2
 800bc68:	e1d7      	b.n	800c01a <HAL_SPI_Transmit+0x3da>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc72:	f7fa f837 	bl	8005ce4 <HAL_GetTick>
 800bc76:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d007      	beq.n	800bc94 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bc84:	2302      	movs	r3, #2
 800bc86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bc90:	7efb      	ldrb	r3, [r7, #27]
 800bc92:	e1c2      	b.n	800c01a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <HAL_SPI_Transmit+0x60>
 800bc9a:	88fb      	ldrh	r3, [r7, #6]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d107      	bne.n	800bcb0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bcac:	7efb      	ldrb	r3, [r7, #27]
 800bcae:	e1b4      	b.n	800c01a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2203      	movs	r2, #3
 800bcb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	88fa      	ldrh	r2, [r7, #6]
 800bcca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	88fa      	ldrh	r2, [r7, #6]
 800bcd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bd00:	d107      	bne.n	800bd12 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd10:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	4b96      	ldr	r3, [pc, #600]	; (800bf74 <HAL_SPI_Transmit+0x334>)
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	88f9      	ldrh	r1, [r7, #6]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	6812      	ldr	r2, [r2, #0]
 800bd22:	430b      	orrs	r3, r1
 800bd24:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f042 0201 	orr.w	r2, r2, #1
 800bd34:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd3e:	d107      	bne.n	800bd50 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	2b0f      	cmp	r3, #15
 800bd56:	d947      	bls.n	800bde8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bd58:	e03f      	b.n	800bdda <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	f003 0302 	and.w	r3, r3, #2
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d114      	bne.n	800bd92 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6812      	ldr	r2, [r2, #0]
 800bd72:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	3b01      	subs	r3, #1
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bd90:	e023      	b.n	800bdda <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd92:	f7f9 ffa7 	bl	8005ce4 <HAL_GetTick>
 800bd96:	4602      	mov	r2, r0
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d803      	bhi.n	800bdaa <HAL_SPI_Transmit+0x16a>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda8:	d102      	bne.n	800bdb0 <HAL_SPI_Transmit+0x170>
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d114      	bne.n	800bdda <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 f937 	bl	800c024 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e11f      	b.n	800c01a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1b9      	bne.n	800bd5a <HAL_SPI_Transmit+0x11a>
 800bde6:	e0f2      	b.n	800bfce <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	2b07      	cmp	r3, #7
 800bdee:	f240 80e7 	bls.w	800bfc0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bdf2:	e05d      	b.n	800beb0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	f003 0302 	and.w	r3, r3, #2
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d132      	bne.n	800be68 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d918      	bls.n	800be40 <HAL_SPI_Transmit+0x200>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be12:	2b00      	cmp	r3, #0
 800be14:	d014      	beq.n	800be40 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6812      	ldr	r2, [r2, #0]
 800be20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be26:	1d1a      	adds	r2, r3, #4
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be32:	b29b      	uxth	r3, r3
 800be34:	3b02      	subs	r3, #2
 800be36:	b29a      	uxth	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800be3e:	e037      	b.n	800beb0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be44:	881a      	ldrh	r2, [r3, #0]
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be4e:	1c9a      	adds	r2, r3, #2
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	3b01      	subs	r3, #1
 800be5e:	b29a      	uxth	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800be66:	e023      	b.n	800beb0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be68:	f7f9 ff3c 	bl	8005ce4 <HAL_GetTick>
 800be6c:	4602      	mov	r2, r0
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	429a      	cmp	r2, r3
 800be76:	d803      	bhi.n	800be80 <HAL_SPI_Transmit+0x240>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7e:	d102      	bne.n	800be86 <HAL_SPI_Transmit+0x246>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d114      	bne.n	800beb0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f8cc 	bl	800c024 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e0b4      	b.n	800c01a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d19b      	bne.n	800bdf4 <HAL_SPI_Transmit+0x1b4>
 800bebc:	e087      	b.n	800bfce <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	f003 0302 	and.w	r3, r3, #2
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d155      	bne.n	800bf78 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d918      	bls.n	800bf0a <HAL_SPI_Transmit+0x2ca>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bedc:	2b40      	cmp	r3, #64	; 0x40
 800bede:	d914      	bls.n	800bf0a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6812      	ldr	r2, [r2, #0]
 800beea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bef0:	1d1a      	adds	r2, r3, #4
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800befc:	b29b      	uxth	r3, r3
 800befe:	3b04      	subs	r3, #4
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bf08:	e05a      	b.n	800bfc0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d917      	bls.n	800bf46 <HAL_SPI_Transmit+0x306>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d013      	beq.n	800bf46 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf22:	881a      	ldrh	r2, [r3, #0]
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf2c:	1c9a      	adds	r2, r3, #2
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	3b02      	subs	r3, #2
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bf44:	e03c      	b.n	800bfc0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	3320      	adds	r3, #32
 800bf50:	7812      	ldrb	r2, [r2, #0]
 800bf52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf58:	1c5a      	adds	r2, r3, #1
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	3b01      	subs	r3, #1
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bf70:	e026      	b.n	800bfc0 <HAL_SPI_Transmit+0x380>
 800bf72:	bf00      	nop
 800bf74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf78:	f7f9 feb4 	bl	8005ce4 <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d803      	bhi.n	800bf90 <HAL_SPI_Transmit+0x350>
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8e:	d102      	bne.n	800bf96 <HAL_SPI_Transmit+0x356>
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d114      	bne.n	800bfc0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f000 f844 	bl	800c024 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	e02c      	b.n	800c01a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f47f af78 	bne.w	800bebe <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	2108      	movs	r1, #8
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 f8c3 	bl	800c164 <SPI_WaitOnFlagUntilTimeout>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d007      	beq.n	800bff4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfea:	f043 0220 	orr.w	r2, r3, #32
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 f815 	bl	800c024 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e000      	b.n	800c01a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c018:	7efb      	ldrb	r3, [r7, #27]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3720      	adds	r7, #32
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop

0800c024 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	699a      	ldr	r2, [r3, #24]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f042 0208 	orr.w	r2, r2, #8
 800c042:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	699a      	ldr	r2, [r3, #24]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f042 0210 	orr.w	r2, r2, #16
 800c052:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0201 	bic.w	r2, r2, #1
 800c062:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6919      	ldr	r1, [r3, #16]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	4b3c      	ldr	r3, [pc, #240]	; (800c160 <SPI_CloseTransfer+0x13c>)
 800c070:	400b      	ands	r3, r1
 800c072:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	689a      	ldr	r2, [r3, #8]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c082:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d014      	beq.n	800c0ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00f      	beq.n	800c0ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	699a      	ldr	r2, [r3, #24]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f042 0220 	orr.w	r2, r2, #32
 800c0b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d014      	beq.n	800c0f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00f      	beq.n	800c0f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0d6:	f043 0204 	orr.w	r2, r3, #4
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	699a      	ldr	r2, [r3, #24]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00f      	beq.n	800c11a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c100:	f043 0201 	orr.w	r2, r3, #1
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	699a      	ldr	r2, [r3, #24]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c118:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00f      	beq.n	800c144 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c12a:	f043 0208 	orr.w	r2, r3, #8
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	699a      	ldr	r2, [r3, #24]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c142:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c154:	bf00      	nop
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	fffffc90 	.word	0xfffffc90

0800c164 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	4613      	mov	r3, r2
 800c172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c174:	e010      	b.n	800c198 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c176:	f7f9 fdb5 	bl	8005ce4 <HAL_GetTick>
 800c17a:	4602      	mov	r2, r0
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	429a      	cmp	r2, r3
 800c184:	d803      	bhi.n	800c18e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18c:	d102      	bne.n	800c194 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e00f      	b.n	800c1b8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	695a      	ldr	r2, [r3, #20]
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	bf0c      	ite	eq
 800c1a8:	2301      	moveq	r3, #1
 800c1aa:	2300      	movne	r3, #0
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d0df      	beq.n	800c176 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1cc:	095b      	lsrs	r3, r3, #5
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	3307      	adds	r3, #7
 800c1de:	08db      	lsrs	r3, r3, #3
 800c1e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	fb02 f303 	mul.w	r3, r2, r3
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	e049      	b.n	800c29c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b00      	cmp	r3, #0
 800c212:	d106      	bne.n	800c222 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7f9 fad5 	bl	80057cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2202      	movs	r2, #2
 800c226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	3304      	adds	r3, #4
 800c232:	4619      	mov	r1, r3
 800c234:	4610      	mov	r0, r2
 800c236:	f000 fa23 	bl	800c680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d001      	beq.n	800c2bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e054      	b.n	800c366 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68da      	ldr	r2, [r3, #12]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f042 0201 	orr.w	r2, r2, #1
 800c2d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a26      	ldr	r2, [pc, #152]	; (800c374 <HAL_TIM_Base_Start_IT+0xd0>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d022      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x80>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2e6:	d01d      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x80>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a22      	ldr	r2, [pc, #136]	; (800c378 <HAL_TIM_Base_Start_IT+0xd4>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d018      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x80>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a21      	ldr	r2, [pc, #132]	; (800c37c <HAL_TIM_Base_Start_IT+0xd8>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d013      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x80>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a1f      	ldr	r2, [pc, #124]	; (800c380 <HAL_TIM_Base_Start_IT+0xdc>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d00e      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x80>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a1e      	ldr	r2, [pc, #120]	; (800c384 <HAL_TIM_Base_Start_IT+0xe0>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d009      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x80>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a1c      	ldr	r2, [pc, #112]	; (800c388 <HAL_TIM_Base_Start_IT+0xe4>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d004      	beq.n	800c324 <HAL_TIM_Base_Start_IT+0x80>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a1b      	ldr	r2, [pc, #108]	; (800c38c <HAL_TIM_Base_Start_IT+0xe8>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d115      	bne.n	800c350 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	689a      	ldr	r2, [r3, #8]
 800c32a:	4b19      	ldr	r3, [pc, #100]	; (800c390 <HAL_TIM_Base_Start_IT+0xec>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b06      	cmp	r3, #6
 800c334:	d015      	beq.n	800c362 <HAL_TIM_Base_Start_IT+0xbe>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c33c:	d011      	beq.n	800c362 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f042 0201 	orr.w	r2, r2, #1
 800c34c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c34e:	e008      	b.n	800c362 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f042 0201 	orr.w	r2, r2, #1
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	e000      	b.n	800c364 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	40010000 	.word	0x40010000
 800c378:	40000400 	.word	0x40000400
 800c37c:	40000800 	.word	0x40000800
 800c380:	40000c00 	.word	0x40000c00
 800c384:	40010400 	.word	0x40010400
 800c388:	40001800 	.word	0x40001800
 800c38c:	40014000 	.word	0x40014000
 800c390:	00010007 	.word	0x00010007

0800c394 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f022 0201 	bic.w	r2, r2, #1
 800c3aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	6a1a      	ldr	r2, [r3, #32]
 800c3b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10f      	bne.n	800c3dc <HAL_TIM_Base_Stop_IT+0x48>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6a1a      	ldr	r2, [r3, #32]
 800c3c2:	f240 4344 	movw	r3, #1092	; 0x444
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d107      	bne.n	800c3dc <HAL_TIM_Base_Stop_IT+0x48>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f022 0201 	bic.w	r2, r2, #1
 800c3da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b02      	cmp	r3, #2
 800c406:	d122      	bne.n	800c44e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	f003 0302 	and.w	r3, r3, #2
 800c412:	2b02      	cmp	r3, #2
 800c414:	d11b      	bne.n	800c44e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f06f 0202 	mvn.w	r2, #2
 800c41e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	699b      	ldr	r3, [r3, #24]
 800c42c:	f003 0303 	and.w	r3, r3, #3
 800c430:	2b00      	cmp	r3, #0
 800c432:	d003      	beq.n	800c43c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f905 	bl	800c644 <HAL_TIM_IC_CaptureCallback>
 800c43a:	e005      	b.n	800c448 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f8f7 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f908 	bl	800c658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	f003 0304 	and.w	r3, r3, #4
 800c458:	2b04      	cmp	r3, #4
 800c45a:	d122      	bne.n	800c4a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	f003 0304 	and.w	r3, r3, #4
 800c466:	2b04      	cmp	r3, #4
 800c468:	d11b      	bne.n	800c4a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f06f 0204 	mvn.w	r2, #4
 800c472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2202      	movs	r2, #2
 800c478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c484:	2b00      	cmp	r3, #0
 800c486:	d003      	beq.n	800c490 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 f8db 	bl	800c644 <HAL_TIM_IC_CaptureCallback>
 800c48e:	e005      	b.n	800c49c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f8cd 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f8de 	bl	800c658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	f003 0308 	and.w	r3, r3, #8
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d122      	bne.n	800c4f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f003 0308 	and.w	r3, r3, #8
 800c4ba:	2b08      	cmp	r3, #8
 800c4bc:	d11b      	bne.n	800c4f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f06f 0208 	mvn.w	r2, #8
 800c4c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2204      	movs	r2, #4
 800c4cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	f003 0303 	and.w	r3, r3, #3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 f8b1 	bl	800c644 <HAL_TIM_IC_CaptureCallback>
 800c4e2:	e005      	b.n	800c4f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f8a3 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f8b4 	bl	800c658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	f003 0310 	and.w	r3, r3, #16
 800c500:	2b10      	cmp	r3, #16
 800c502:	d122      	bne.n	800c54a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	f003 0310 	and.w	r3, r3, #16
 800c50e:	2b10      	cmp	r3, #16
 800c510:	d11b      	bne.n	800c54a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f06f 0210 	mvn.w	r2, #16
 800c51a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2208      	movs	r2, #8
 800c520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	69db      	ldr	r3, [r3, #28]
 800c528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f887 	bl	800c644 <HAL_TIM_IC_CaptureCallback>
 800c536:	e005      	b.n	800c544 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f879 	bl	800c630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f88a 	bl	800c658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b01      	cmp	r3, #1
 800c556:	d10e      	bne.n	800c576 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b01      	cmp	r3, #1
 800c564:	d107      	bne.n	800c576 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f06f 0201 	mvn.w	r2, #1
 800c56e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7f8 fb95 	bl	8004ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c580:	2b80      	cmp	r3, #128	; 0x80
 800c582:	d10e      	bne.n	800c5a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c58e:	2b80      	cmp	r3, #128	; 0x80
 800c590:	d107      	bne.n	800c5a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c59a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f9a1 	bl	800c8e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b0:	d10e      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5bc:	2b80      	cmp	r3, #128	; 0x80
 800c5be:	d107      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f994 	bl	800c8f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5da:	2b40      	cmp	r3, #64	; 0x40
 800c5dc:	d10e      	bne.n	800c5fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e8:	2b40      	cmp	r3, #64	; 0x40
 800c5ea:	d107      	bne.n	800c5fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c5f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 f838 	bl	800c66c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	f003 0320 	and.w	r3, r3, #32
 800c606:	2b20      	cmp	r3, #32
 800c608:	d10e      	bne.n	800c628 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f003 0320 	and.w	r3, r3, #32
 800c614:	2b20      	cmp	r3, #32
 800c616:	d107      	bne.n	800c628 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f06f 0220 	mvn.w	r2, #32
 800c620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f954 	bl	800c8d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a40      	ldr	r2, [pc, #256]	; (800c794 <TIM_Base_SetConfig+0x114>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d013      	beq.n	800c6c0 <TIM_Base_SetConfig+0x40>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c69e:	d00f      	beq.n	800c6c0 <TIM_Base_SetConfig+0x40>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a3d      	ldr	r2, [pc, #244]	; (800c798 <TIM_Base_SetConfig+0x118>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00b      	beq.n	800c6c0 <TIM_Base_SetConfig+0x40>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a3c      	ldr	r2, [pc, #240]	; (800c79c <TIM_Base_SetConfig+0x11c>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d007      	beq.n	800c6c0 <TIM_Base_SetConfig+0x40>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a3b      	ldr	r2, [pc, #236]	; (800c7a0 <TIM_Base_SetConfig+0x120>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d003      	beq.n	800c6c0 <TIM_Base_SetConfig+0x40>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a3a      	ldr	r2, [pc, #232]	; (800c7a4 <TIM_Base_SetConfig+0x124>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d108      	bne.n	800c6d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a2f      	ldr	r2, [pc, #188]	; (800c794 <TIM_Base_SetConfig+0x114>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d01f      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e0:	d01b      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a2c      	ldr	r2, [pc, #176]	; (800c798 <TIM_Base_SetConfig+0x118>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d017      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a2b      	ldr	r2, [pc, #172]	; (800c79c <TIM_Base_SetConfig+0x11c>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d013      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a2a      	ldr	r2, [pc, #168]	; (800c7a0 <TIM_Base_SetConfig+0x120>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d00f      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a29      	ldr	r2, [pc, #164]	; (800c7a4 <TIM_Base_SetConfig+0x124>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d00b      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a28      	ldr	r2, [pc, #160]	; (800c7a8 <TIM_Base_SetConfig+0x128>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d007      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a27      	ldr	r2, [pc, #156]	; (800c7ac <TIM_Base_SetConfig+0x12c>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d003      	beq.n	800c71a <TIM_Base_SetConfig+0x9a>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a26      	ldr	r2, [pc, #152]	; (800c7b0 <TIM_Base_SetConfig+0x130>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d108      	bne.n	800c72c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	4313      	orrs	r3, r2
 800c72a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	4313      	orrs	r3, r2
 800c738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	689a      	ldr	r2, [r3, #8]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a10      	ldr	r2, [pc, #64]	; (800c794 <TIM_Base_SetConfig+0x114>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d00f      	beq.n	800c778 <TIM_Base_SetConfig+0xf8>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a12      	ldr	r2, [pc, #72]	; (800c7a4 <TIM_Base_SetConfig+0x124>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d00b      	beq.n	800c778 <TIM_Base_SetConfig+0xf8>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a11      	ldr	r2, [pc, #68]	; (800c7a8 <TIM_Base_SetConfig+0x128>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d007      	beq.n	800c778 <TIM_Base_SetConfig+0xf8>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a10      	ldr	r2, [pc, #64]	; (800c7ac <TIM_Base_SetConfig+0x12c>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d003      	beq.n	800c778 <TIM_Base_SetConfig+0xf8>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a0f      	ldr	r2, [pc, #60]	; (800c7b0 <TIM_Base_SetConfig+0x130>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d103      	bne.n	800c780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	691a      	ldr	r2, [r3, #16]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	615a      	str	r2, [r3, #20]
}
 800c786:	bf00      	nop
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	40010000 	.word	0x40010000
 800c798:	40000400 	.word	0x40000400
 800c79c:	40000800 	.word	0x40000800
 800c7a0:	40000c00 	.word	0x40000c00
 800c7a4:	40010400 	.word	0x40010400
 800c7a8:	40014000 	.word	0x40014000
 800c7ac:	40014400 	.word	0x40014400
 800c7b0:	40014800 	.word	0x40014800

0800c7b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d101      	bne.n	800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	e06d      	b.n	800c8a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a30      	ldr	r2, [pc, #192]	; (800c8b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d004      	beq.n	800c800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a2f      	ldr	r2, [pc, #188]	; (800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d108      	bne.n	800c812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	4313      	orrs	r3, r2
 800c810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	4313      	orrs	r3, r2
 800c822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a20      	ldr	r2, [pc, #128]	; (800c8b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d022      	beq.n	800c87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c83e:	d01d      	beq.n	800c87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a1d      	ldr	r2, [pc, #116]	; (800c8bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d018      	beq.n	800c87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a1c      	ldr	r2, [pc, #112]	; (800c8c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d013      	beq.n	800c87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a1a      	ldr	r2, [pc, #104]	; (800c8c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d00e      	beq.n	800c87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a15      	ldr	r2, [pc, #84]	; (800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d009      	beq.n	800c87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a16      	ldr	r2, [pc, #88]	; (800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d004      	beq.n	800c87c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a15      	ldr	r2, [pc, #84]	; (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d10c      	bne.n	800c896 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3714      	adds	r7, #20
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	40010000 	.word	0x40010000
 800c8b8:	40010400 	.word	0x40010400
 800c8bc:	40000400 	.word	0x40000400
 800c8c0:	40000800 	.word	0x40000800
 800c8c4:	40000c00 	.word	0x40000c00
 800c8c8:	40001800 	.word	0x40001800
 800c8cc:	40014000 	.word	0x40014000

0800c8d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	e042      	b.n	800c9a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c924:	2b00      	cmp	r3, #0
 800c926:	d106      	bne.n	800c936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7f8 ff73 	bl	800581c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2224      	movs	r2, #36	; 0x24
 800c93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f022 0201 	bic.w	r2, r2, #1
 800c94c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fbea 	bl	800d128 <UART_SetConfig>
 800c954:	4603      	mov	r3, r0
 800c956:	2b01      	cmp	r3, #1
 800c958:	d101      	bne.n	800c95e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e022      	b.n	800c9a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f001 f946 	bl	800dbf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c97a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	689a      	ldr	r2, [r3, #8]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c98a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f042 0201 	orr.w	r2, r2, #1
 800c99a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f001 f9cd 	bl	800dd3c <UART_CheckIdleState>
 800c9a2:	4603      	mov	r3, r0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b0ba      	sub	sp, #232	; 0xe8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c9d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c9d6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c9da:	4013      	ands	r3, r2
 800c9dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c9e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d11b      	bne.n	800ca20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ec:	f003 0320 	and.w	r3, r3, #32
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d015      	beq.n	800ca20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9f8:	f003 0320 	and.w	r3, r3, #32
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d105      	bne.n	800ca0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d009      	beq.n	800ca20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 835a 	beq.w	800d0ca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	4798      	blx	r3
      }
      return;
 800ca1e:	e354      	b.n	800d0ca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 811f 	beq.w	800cc68 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ca2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ca2e:	4b8b      	ldr	r3, [pc, #556]	; (800cc5c <HAL_UART_IRQHandler+0x2b0>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ca36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ca3a:	4b89      	ldr	r3, [pc, #548]	; (800cc60 <HAL_UART_IRQHandler+0x2b4>)
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 8112 	beq.w	800cc68 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d011      	beq.n	800ca74 <HAL_UART_IRQHandler+0xc8>
 800ca50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00b      	beq.n	800ca74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2201      	movs	r2, #1
 800ca62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca6a:	f043 0201 	orr.w	r2, r3, #1
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca78:	f003 0302 	and.w	r3, r3, #2
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d011      	beq.n	800caa4 <HAL_UART_IRQHandler+0xf8>
 800ca80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca84:	f003 0301 	and.w	r3, r3, #1
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00b      	beq.n	800caa4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2202      	movs	r2, #2
 800ca92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca9a:	f043 0204 	orr.w	r2, r3, #4
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa8:	f003 0304 	and.w	r3, r3, #4
 800caac:	2b00      	cmp	r3, #0
 800caae:	d011      	beq.n	800cad4 <HAL_UART_IRQHandler+0x128>
 800cab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00b      	beq.n	800cad4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2204      	movs	r2, #4
 800cac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caca:	f043 0202 	orr.w	r2, r3, #2
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cad8:	f003 0308 	and.w	r3, r3, #8
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d017      	beq.n	800cb10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cae4:	f003 0320 	and.w	r3, r3, #32
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d105      	bne.n	800caf8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800caec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800caf0:	4b5a      	ldr	r3, [pc, #360]	; (800cc5c <HAL_UART_IRQHandler+0x2b0>)
 800caf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00b      	beq.n	800cb10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2208      	movs	r2, #8
 800cafe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb06:	f043 0208 	orr.w	r2, r3, #8
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d012      	beq.n	800cb42 <HAL_UART_IRQHandler+0x196>
 800cb1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00c      	beq.n	800cb42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb38:	f043 0220 	orr.w	r2, r3, #32
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 82c0 	beq.w	800d0ce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb52:	f003 0320 	and.w	r3, r3, #32
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d013      	beq.n	800cb82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb5e:	f003 0320 	and.w	r3, r3, #32
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d105      	bne.n	800cb72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d007      	beq.n	800cb82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d003      	beq.n	800cb82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb96:	2b40      	cmp	r3, #64	; 0x40
 800cb98:	d005      	beq.n	800cba6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cb9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d04f      	beq.n	800cc46 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 f9dc 	bl	800df64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb6:	2b40      	cmp	r3, #64	; 0x40
 800cbb8:	d141      	bne.n	800cc3e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	3308      	adds	r3, #8
 800cbc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbc8:	e853 3f00 	ldrex	r3, [r3]
 800cbcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cbd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3308      	adds	r3, #8
 800cbe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cbe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cbea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cbf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cbf6:	e841 2300 	strex	r3, r2, [r1]
 800cbfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cbfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1d9      	bne.n	800cbba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d013      	beq.n	800cc36 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc12:	4a14      	ldr	r2, [pc, #80]	; (800cc64 <HAL_UART_IRQHandler+0x2b8>)
 800cc14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fa f83c 	bl	8006c98 <HAL_DMA_Abort_IT>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d017      	beq.n	800cc56 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cc30:	4610      	mov	r0, r2
 800cc32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc34:	e00f      	b.n	800cc56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fa60 	bl	800d0fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc3c:	e00b      	b.n	800cc56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fa5c 	bl	800d0fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc44:	e007      	b.n	800cc56 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fa58 	bl	800d0fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cc54:	e23b      	b.n	800d0ce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc56:	bf00      	nop
    return;
 800cc58:	e239      	b.n	800d0ce <HAL_UART_IRQHandler+0x722>
 800cc5a:	bf00      	nop
 800cc5c:	10000001 	.word	0x10000001
 800cc60:	04000120 	.word	0x04000120
 800cc64:	0800e031 	.word	0x0800e031

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	f040 81ce 	bne.w	800d00e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc76:	f003 0310 	and.w	r3, r3, #16
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 81c7 	beq.w	800d00e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc84:	f003 0310 	and.w	r3, r3, #16
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 81c0 	beq.w	800d00e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2210      	movs	r2, #16
 800cc94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca0:	2b40      	cmp	r3, #64	; 0x40
 800cca2:	f040 813b 	bne.w	800cf1c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a8b      	ldr	r2, [pc, #556]	; (800cedc <HAL_UART_IRQHandler+0x530>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d059      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a89      	ldr	r2, [pc, #548]	; (800cee0 <HAL_UART_IRQHandler+0x534>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d053      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a87      	ldr	r2, [pc, #540]	; (800cee4 <HAL_UART_IRQHandler+0x538>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d04d      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a85      	ldr	r2, [pc, #532]	; (800cee8 <HAL_UART_IRQHandler+0x53c>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d047      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a83      	ldr	r2, [pc, #524]	; (800ceec <HAL_UART_IRQHandler+0x540>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d041      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a81      	ldr	r2, [pc, #516]	; (800cef0 <HAL_UART_IRQHandler+0x544>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d03b      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a7f      	ldr	r2, [pc, #508]	; (800cef4 <HAL_UART_IRQHandler+0x548>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d035      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a7d      	ldr	r2, [pc, #500]	; (800cef8 <HAL_UART_IRQHandler+0x54c>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d02f      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a7b      	ldr	r2, [pc, #492]	; (800cefc <HAL_UART_IRQHandler+0x550>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d029      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a79      	ldr	r2, [pc, #484]	; (800cf00 <HAL_UART_IRQHandler+0x554>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d023      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a77      	ldr	r2, [pc, #476]	; (800cf04 <HAL_UART_IRQHandler+0x558>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d01d      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a75      	ldr	r2, [pc, #468]	; (800cf08 <HAL_UART_IRQHandler+0x55c>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d017      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a73      	ldr	r2, [pc, #460]	; (800cf0c <HAL_UART_IRQHandler+0x560>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d011      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a71      	ldr	r2, [pc, #452]	; (800cf10 <HAL_UART_IRQHandler+0x564>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d00b      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a6f      	ldr	r2, [pc, #444]	; (800cf14 <HAL_UART_IRQHandler+0x568>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d005      	beq.n	800cd66 <HAL_UART_IRQHandler+0x3ba>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a6d      	ldr	r2, [pc, #436]	; (800cf18 <HAL_UART_IRQHandler+0x56c>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d105      	bne.n	800cd72 <HAL_UART_IRQHandler+0x3c6>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	e004      	b.n	800cd7c <HAL_UART_IRQHandler+0x3d0>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cd80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f000 81a4 	beq.w	800d0d2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cd94:	429a      	cmp	r2, r3
 800cd96:	f080 819c 	bcs.w	800d0d2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cda0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cda8:	69db      	ldr	r3, [r3, #28]
 800cdaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdae:	f000 8086 	beq.w	800cebe <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cdbe:	e853 3f00 	ldrex	r3, [r3]
 800cdc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cdc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cdca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cde0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cde8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cdec:	e841 2300 	strex	r3, r2, [r1]
 800cdf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cdf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1da      	bne.n	800cdb2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3308      	adds	r3, #8
 800ce02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce06:	e853 3f00 	ldrex	r3, [r3]
 800ce0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ce0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce0e:	f023 0301 	bic.w	r3, r3, #1
 800ce12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ce20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce2c:	e841 2300 	strex	r3, r2, [r1]
 800ce30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ce32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1e1      	bne.n	800cdfc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce42:	e853 3f00 	ldrex	r3, [r3]
 800ce46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ce48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	3308      	adds	r3, #8
 800ce58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ce5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ce5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce64:	e841 2300 	strex	r3, r2, [r1]
 800ce68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ce6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1e3      	bne.n	800ce38 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2220      	movs	r2, #32
 800ce74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce86:	e853 3f00 	ldrex	r3, [r3]
 800ce8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce8e:	f023 0310 	bic.w	r3, r3, #16
 800ce92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cea0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cea2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cea8:	e841 2300 	strex	r3, r2, [r1]
 800ceac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ceae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1e4      	bne.n	800ce7e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7f9 fbcf 	bl	800665c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f91c 	bl	800d110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ced8:	e0fb      	b.n	800d0d2 <HAL_UART_IRQHandler+0x726>
 800ceda:	bf00      	nop
 800cedc:	40020010 	.word	0x40020010
 800cee0:	40020028 	.word	0x40020028
 800cee4:	40020040 	.word	0x40020040
 800cee8:	40020058 	.word	0x40020058
 800ceec:	40020070 	.word	0x40020070
 800cef0:	40020088 	.word	0x40020088
 800cef4:	400200a0 	.word	0x400200a0
 800cef8:	400200b8 	.word	0x400200b8
 800cefc:	40020410 	.word	0x40020410
 800cf00:	40020428 	.word	0x40020428
 800cf04:	40020440 	.word	0x40020440
 800cf08:	40020458 	.word	0x40020458
 800cf0c:	40020470 	.word	0x40020470
 800cf10:	40020488 	.word	0x40020488
 800cf14:	400204a0 	.word	0x400204a0
 800cf18:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 80cc 	beq.w	800d0d6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cf3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 80c7 	beq.w	800d0d6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	e853 3f00 	ldrex	r3, [r3]
 800cf54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	461a      	mov	r2, r3
 800cf66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cf6a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf72:	e841 2300 	strex	r3, r2, [r1]
 800cf76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1e4      	bne.n	800cf48 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3308      	adds	r3, #8
 800cf84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf88:	e853 3f00 	ldrex	r3, [r3]
 800cf8c:	623b      	str	r3, [r7, #32]
   return(result);
 800cf8e:	6a3a      	ldr	r2, [r7, #32]
 800cf90:	4b54      	ldr	r3, [pc, #336]	; (800d0e4 <HAL_UART_IRQHandler+0x738>)
 800cf92:	4013      	ands	r3, r2
 800cf94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cfa2:	633a      	str	r2, [r7, #48]	; 0x30
 800cfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfaa:	e841 2300 	strex	r3, r2, [r1]
 800cfae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e3      	bne.n	800cf7e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2220      	movs	r2, #32
 800cfba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	e853 3f00 	ldrex	r3, [r3]
 800cfd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f023 0310 	bic.w	r3, r3, #16
 800cfde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cfec:	61fb      	str	r3, [r7, #28]
 800cfee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff0:	69b9      	ldr	r1, [r7, #24]
 800cff2:	69fa      	ldr	r2, [r7, #28]
 800cff4:	e841 2300 	strex	r3, r2, [r1]
 800cff8:	617b      	str	r3, [r7, #20]
   return(result);
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1e4      	bne.n	800cfca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f882 	bl	800d110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d00c:	e063      	b.n	800d0d6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00e      	beq.n	800d038 <HAL_UART_IRQHandler+0x68c>
 800d01a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d022:	2b00      	cmp	r3, #0
 800d024:	d008      	beq.n	800d038 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d02e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f001 f83e 	bl	800e0b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d036:	e051      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d03c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d040:	2b00      	cmp	r3, #0
 800d042:	d014      	beq.n	800d06e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d105      	bne.n	800d05c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d008      	beq.n	800d06e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d060:	2b00      	cmp	r3, #0
 800d062:	d03a      	beq.n	800d0da <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	4798      	blx	r3
    }
    return;
 800d06c:	e035      	b.n	800d0da <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d076:	2b00      	cmp	r3, #0
 800d078:	d009      	beq.n	800d08e <HAL_UART_IRQHandler+0x6e2>
 800d07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d003      	beq.n	800d08e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 ffe8 	bl	800e05c <UART_EndTransmit_IT>
    return;
 800d08c:	e026      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d096:	2b00      	cmp	r3, #0
 800d098:	d009      	beq.n	800d0ae <HAL_UART_IRQHandler+0x702>
 800d09a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d09e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f001 f817 	bl	800e0da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0ac:	e016      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d010      	beq.n	800d0dc <HAL_UART_IRQHandler+0x730>
 800d0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	da0c      	bge.n	800d0dc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 ffff 	bl	800e0c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0c8:	e008      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
      return;
 800d0ca:	bf00      	nop
 800d0cc:	e006      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
    return;
 800d0ce:	bf00      	nop
 800d0d0:	e004      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
      return;
 800d0d2:	bf00      	nop
 800d0d4:	e002      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
      return;
 800d0d6:	bf00      	nop
 800d0d8:	e000      	b.n	800d0dc <HAL_UART_IRQHandler+0x730>
    return;
 800d0da:	bf00      	nop
  }
}
 800d0dc:	37e8      	adds	r7, #232	; 0xe8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	effffffe 	.word	0xeffffffe

0800d0e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	460b      	mov	r3, r1
 800d11a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d12c:	b092      	sub	sp, #72	; 0x48
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	689a      	ldr	r2, [r3, #8]
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	431a      	orrs	r2, r3
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	431a      	orrs	r2, r3
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	4bbe      	ldr	r3, [pc, #760]	; (800d450 <UART_SetConfig+0x328>)
 800d158:	4013      	ands	r3, r2
 800d15a:	697a      	ldr	r2, [r7, #20]
 800d15c:	6812      	ldr	r2, [r2, #0]
 800d15e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d160:	430b      	orrs	r3, r1
 800d162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	68da      	ldr	r2, [r3, #12]
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	430a      	orrs	r2, r1
 800d178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4ab3      	ldr	r2, [pc, #716]	; (800d454 <UART_SetConfig+0x32c>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d004      	beq.n	800d194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d190:	4313      	orrs	r3, r2
 800d192:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689a      	ldr	r2, [r3, #8]
 800d19a:	4baf      	ldr	r3, [pc, #700]	; (800d458 <UART_SetConfig+0x330>)
 800d19c:	4013      	ands	r3, r2
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	6812      	ldr	r2, [r2, #0]
 800d1a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1a4:	430b      	orrs	r3, r1
 800d1a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ae:	f023 010f 	bic.w	r1, r3, #15
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4aa6      	ldr	r2, [pc, #664]	; (800d45c <UART_SetConfig+0x334>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d177      	bne.n	800d2b8 <UART_SetConfig+0x190>
 800d1c8:	4ba5      	ldr	r3, [pc, #660]	; (800d460 <UART_SetConfig+0x338>)
 800d1ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1d0:	2b28      	cmp	r3, #40	; 0x28
 800d1d2:	d86d      	bhi.n	800d2b0 <UART_SetConfig+0x188>
 800d1d4:	a201      	add	r2, pc, #4	; (adr r2, 800d1dc <UART_SetConfig+0xb4>)
 800d1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1da:	bf00      	nop
 800d1dc:	0800d281 	.word	0x0800d281
 800d1e0:	0800d2b1 	.word	0x0800d2b1
 800d1e4:	0800d2b1 	.word	0x0800d2b1
 800d1e8:	0800d2b1 	.word	0x0800d2b1
 800d1ec:	0800d2b1 	.word	0x0800d2b1
 800d1f0:	0800d2b1 	.word	0x0800d2b1
 800d1f4:	0800d2b1 	.word	0x0800d2b1
 800d1f8:	0800d2b1 	.word	0x0800d2b1
 800d1fc:	0800d289 	.word	0x0800d289
 800d200:	0800d2b1 	.word	0x0800d2b1
 800d204:	0800d2b1 	.word	0x0800d2b1
 800d208:	0800d2b1 	.word	0x0800d2b1
 800d20c:	0800d2b1 	.word	0x0800d2b1
 800d210:	0800d2b1 	.word	0x0800d2b1
 800d214:	0800d2b1 	.word	0x0800d2b1
 800d218:	0800d2b1 	.word	0x0800d2b1
 800d21c:	0800d291 	.word	0x0800d291
 800d220:	0800d2b1 	.word	0x0800d2b1
 800d224:	0800d2b1 	.word	0x0800d2b1
 800d228:	0800d2b1 	.word	0x0800d2b1
 800d22c:	0800d2b1 	.word	0x0800d2b1
 800d230:	0800d2b1 	.word	0x0800d2b1
 800d234:	0800d2b1 	.word	0x0800d2b1
 800d238:	0800d2b1 	.word	0x0800d2b1
 800d23c:	0800d299 	.word	0x0800d299
 800d240:	0800d2b1 	.word	0x0800d2b1
 800d244:	0800d2b1 	.word	0x0800d2b1
 800d248:	0800d2b1 	.word	0x0800d2b1
 800d24c:	0800d2b1 	.word	0x0800d2b1
 800d250:	0800d2b1 	.word	0x0800d2b1
 800d254:	0800d2b1 	.word	0x0800d2b1
 800d258:	0800d2b1 	.word	0x0800d2b1
 800d25c:	0800d2a1 	.word	0x0800d2a1
 800d260:	0800d2b1 	.word	0x0800d2b1
 800d264:	0800d2b1 	.word	0x0800d2b1
 800d268:	0800d2b1 	.word	0x0800d2b1
 800d26c:	0800d2b1 	.word	0x0800d2b1
 800d270:	0800d2b1 	.word	0x0800d2b1
 800d274:	0800d2b1 	.word	0x0800d2b1
 800d278:	0800d2b1 	.word	0x0800d2b1
 800d27c:	0800d2a9 	.word	0x0800d2a9
 800d280:	2301      	movs	r3, #1
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d286:	e222      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d288:	2304      	movs	r3, #4
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d28e:	e21e      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d290:	2308      	movs	r3, #8
 800d292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d296:	e21a      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d298:	2310      	movs	r3, #16
 800d29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d29e:	e216      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d2a0:	2320      	movs	r3, #32
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a6:	e212      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d2a8:	2340      	movs	r3, #64	; 0x40
 800d2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ae:	e20e      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d2b0:	2380      	movs	r3, #128	; 0x80
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e20a      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a69      	ldr	r2, [pc, #420]	; (800d464 <UART_SetConfig+0x33c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d130      	bne.n	800d324 <UART_SetConfig+0x1fc>
 800d2c2:	4b67      	ldr	r3, [pc, #412]	; (800d460 <UART_SetConfig+0x338>)
 800d2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2c6:	f003 0307 	and.w	r3, r3, #7
 800d2ca:	2b05      	cmp	r3, #5
 800d2cc:	d826      	bhi.n	800d31c <UART_SetConfig+0x1f4>
 800d2ce:	a201      	add	r2, pc, #4	; (adr r2, 800d2d4 <UART_SetConfig+0x1ac>)
 800d2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d4:	0800d2ed 	.word	0x0800d2ed
 800d2d8:	0800d2f5 	.word	0x0800d2f5
 800d2dc:	0800d2fd 	.word	0x0800d2fd
 800d2e0:	0800d305 	.word	0x0800d305
 800d2e4:	0800d30d 	.word	0x0800d30d
 800d2e8:	0800d315 	.word	0x0800d315
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f2:	e1ec      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d2f4:	2304      	movs	r3, #4
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fa:	e1e8      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d2fc:	2308      	movs	r3, #8
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d302:	e1e4      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d304:	2310      	movs	r3, #16
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30a:	e1e0      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d30c:	2320      	movs	r3, #32
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e1dc      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d314:	2340      	movs	r3, #64	; 0x40
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31a:	e1d8      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d31c:	2380      	movs	r3, #128	; 0x80
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e1d4      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a4f      	ldr	r2, [pc, #316]	; (800d468 <UART_SetConfig+0x340>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d130      	bne.n	800d390 <UART_SetConfig+0x268>
 800d32e:	4b4c      	ldr	r3, [pc, #304]	; (800d460 <UART_SetConfig+0x338>)
 800d330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d332:	f003 0307 	and.w	r3, r3, #7
 800d336:	2b05      	cmp	r3, #5
 800d338:	d826      	bhi.n	800d388 <UART_SetConfig+0x260>
 800d33a:	a201      	add	r2, pc, #4	; (adr r2, 800d340 <UART_SetConfig+0x218>)
 800d33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d340:	0800d359 	.word	0x0800d359
 800d344:	0800d361 	.word	0x0800d361
 800d348:	0800d369 	.word	0x0800d369
 800d34c:	0800d371 	.word	0x0800d371
 800d350:	0800d379 	.word	0x0800d379
 800d354:	0800d381 	.word	0x0800d381
 800d358:	2300      	movs	r3, #0
 800d35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35e:	e1b6      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d360:	2304      	movs	r3, #4
 800d362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d366:	e1b2      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d368:	2308      	movs	r3, #8
 800d36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d36e:	e1ae      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d370:	2310      	movs	r3, #16
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d376:	e1aa      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d378:	2320      	movs	r3, #32
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d37e:	e1a6      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d380:	2340      	movs	r3, #64	; 0x40
 800d382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d386:	e1a2      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d388:	2380      	movs	r3, #128	; 0x80
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e19e      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a35      	ldr	r2, [pc, #212]	; (800d46c <UART_SetConfig+0x344>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d130      	bne.n	800d3fc <UART_SetConfig+0x2d4>
 800d39a:	4b31      	ldr	r3, [pc, #196]	; (800d460 <UART_SetConfig+0x338>)
 800d39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d39e:	f003 0307 	and.w	r3, r3, #7
 800d3a2:	2b05      	cmp	r3, #5
 800d3a4:	d826      	bhi.n	800d3f4 <UART_SetConfig+0x2cc>
 800d3a6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ac <UART_SetConfig+0x284>)
 800d3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ac:	0800d3c5 	.word	0x0800d3c5
 800d3b0:	0800d3cd 	.word	0x0800d3cd
 800d3b4:	0800d3d5 	.word	0x0800d3d5
 800d3b8:	0800d3dd 	.word	0x0800d3dd
 800d3bc:	0800d3e5 	.word	0x0800d3e5
 800d3c0:	0800d3ed 	.word	0x0800d3ed
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ca:	e180      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d3cc:	2304      	movs	r3, #4
 800d3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d2:	e17c      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d3d4:	2308      	movs	r3, #8
 800d3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3da:	e178      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d3dc:	2310      	movs	r3, #16
 800d3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e2:	e174      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d3e4:	2320      	movs	r3, #32
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ea:	e170      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d3ec:	2340      	movs	r3, #64	; 0x40
 800d3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f2:	e16c      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d3f4:	2380      	movs	r3, #128	; 0x80
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e168      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a1b      	ldr	r2, [pc, #108]	; (800d470 <UART_SetConfig+0x348>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d142      	bne.n	800d48c <UART_SetConfig+0x364>
 800d406:	4b16      	ldr	r3, [pc, #88]	; (800d460 <UART_SetConfig+0x338>)
 800d408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d40a:	f003 0307 	and.w	r3, r3, #7
 800d40e:	2b05      	cmp	r3, #5
 800d410:	d838      	bhi.n	800d484 <UART_SetConfig+0x35c>
 800d412:	a201      	add	r2, pc, #4	; (adr r2, 800d418 <UART_SetConfig+0x2f0>)
 800d414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d418:	0800d431 	.word	0x0800d431
 800d41c:	0800d439 	.word	0x0800d439
 800d420:	0800d441 	.word	0x0800d441
 800d424:	0800d449 	.word	0x0800d449
 800d428:	0800d475 	.word	0x0800d475
 800d42c:	0800d47d 	.word	0x0800d47d
 800d430:	2300      	movs	r3, #0
 800d432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d436:	e14a      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d438:	2304      	movs	r3, #4
 800d43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43e:	e146      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d440:	2308      	movs	r3, #8
 800d442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d446:	e142      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d448:	2310      	movs	r3, #16
 800d44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44e:	e13e      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d450:	cfff69f3 	.word	0xcfff69f3
 800d454:	58000c00 	.word	0x58000c00
 800d458:	11fff4ff 	.word	0x11fff4ff
 800d45c:	40011000 	.word	0x40011000
 800d460:	58024400 	.word	0x58024400
 800d464:	40004400 	.word	0x40004400
 800d468:	40004800 	.word	0x40004800
 800d46c:	40004c00 	.word	0x40004c00
 800d470:	40005000 	.word	0x40005000
 800d474:	2320      	movs	r3, #32
 800d476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47a:	e128      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d47c:	2340      	movs	r3, #64	; 0x40
 800d47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d482:	e124      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d484:	2380      	movs	r3, #128	; 0x80
 800d486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d48a:	e120      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4acb      	ldr	r2, [pc, #812]	; (800d7c0 <UART_SetConfig+0x698>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d176      	bne.n	800d584 <UART_SetConfig+0x45c>
 800d496:	4bcb      	ldr	r3, [pc, #812]	; (800d7c4 <UART_SetConfig+0x69c>)
 800d498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d49a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d49e:	2b28      	cmp	r3, #40	; 0x28
 800d4a0:	d86c      	bhi.n	800d57c <UART_SetConfig+0x454>
 800d4a2:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <UART_SetConfig+0x380>)
 800d4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a8:	0800d54d 	.word	0x0800d54d
 800d4ac:	0800d57d 	.word	0x0800d57d
 800d4b0:	0800d57d 	.word	0x0800d57d
 800d4b4:	0800d57d 	.word	0x0800d57d
 800d4b8:	0800d57d 	.word	0x0800d57d
 800d4bc:	0800d57d 	.word	0x0800d57d
 800d4c0:	0800d57d 	.word	0x0800d57d
 800d4c4:	0800d57d 	.word	0x0800d57d
 800d4c8:	0800d555 	.word	0x0800d555
 800d4cc:	0800d57d 	.word	0x0800d57d
 800d4d0:	0800d57d 	.word	0x0800d57d
 800d4d4:	0800d57d 	.word	0x0800d57d
 800d4d8:	0800d57d 	.word	0x0800d57d
 800d4dc:	0800d57d 	.word	0x0800d57d
 800d4e0:	0800d57d 	.word	0x0800d57d
 800d4e4:	0800d57d 	.word	0x0800d57d
 800d4e8:	0800d55d 	.word	0x0800d55d
 800d4ec:	0800d57d 	.word	0x0800d57d
 800d4f0:	0800d57d 	.word	0x0800d57d
 800d4f4:	0800d57d 	.word	0x0800d57d
 800d4f8:	0800d57d 	.word	0x0800d57d
 800d4fc:	0800d57d 	.word	0x0800d57d
 800d500:	0800d57d 	.word	0x0800d57d
 800d504:	0800d57d 	.word	0x0800d57d
 800d508:	0800d565 	.word	0x0800d565
 800d50c:	0800d57d 	.word	0x0800d57d
 800d510:	0800d57d 	.word	0x0800d57d
 800d514:	0800d57d 	.word	0x0800d57d
 800d518:	0800d57d 	.word	0x0800d57d
 800d51c:	0800d57d 	.word	0x0800d57d
 800d520:	0800d57d 	.word	0x0800d57d
 800d524:	0800d57d 	.word	0x0800d57d
 800d528:	0800d56d 	.word	0x0800d56d
 800d52c:	0800d57d 	.word	0x0800d57d
 800d530:	0800d57d 	.word	0x0800d57d
 800d534:	0800d57d 	.word	0x0800d57d
 800d538:	0800d57d 	.word	0x0800d57d
 800d53c:	0800d57d 	.word	0x0800d57d
 800d540:	0800d57d 	.word	0x0800d57d
 800d544:	0800d57d 	.word	0x0800d57d
 800d548:	0800d575 	.word	0x0800d575
 800d54c:	2301      	movs	r3, #1
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d552:	e0bc      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d554:	2304      	movs	r3, #4
 800d556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d55a:	e0b8      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d55c:	2308      	movs	r3, #8
 800d55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d562:	e0b4      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d564:	2310      	movs	r3, #16
 800d566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d56a:	e0b0      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d56c:	2320      	movs	r3, #32
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d572:	e0ac      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d574:	2340      	movs	r3, #64	; 0x40
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57a:	e0a8      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d57c:	2380      	movs	r3, #128	; 0x80
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e0a4      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a8f      	ldr	r2, [pc, #572]	; (800d7c8 <UART_SetConfig+0x6a0>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d130      	bne.n	800d5f0 <UART_SetConfig+0x4c8>
 800d58e:	4b8d      	ldr	r3, [pc, #564]	; (800d7c4 <UART_SetConfig+0x69c>)
 800d590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d592:	f003 0307 	and.w	r3, r3, #7
 800d596:	2b05      	cmp	r3, #5
 800d598:	d826      	bhi.n	800d5e8 <UART_SetConfig+0x4c0>
 800d59a:	a201      	add	r2, pc, #4	; (adr r2, 800d5a0 <UART_SetConfig+0x478>)
 800d59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a0:	0800d5b9 	.word	0x0800d5b9
 800d5a4:	0800d5c1 	.word	0x0800d5c1
 800d5a8:	0800d5c9 	.word	0x0800d5c9
 800d5ac:	0800d5d1 	.word	0x0800d5d1
 800d5b0:	0800d5d9 	.word	0x0800d5d9
 800d5b4:	0800d5e1 	.word	0x0800d5e1
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5be:	e086      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d5c0:	2304      	movs	r3, #4
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5c6:	e082      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d5c8:	2308      	movs	r3, #8
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ce:	e07e      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d5d0:	2310      	movs	r3, #16
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5d6:	e07a      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d5d8:	2320      	movs	r3, #32
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5de:	e076      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d5e0:	2340      	movs	r3, #64	; 0x40
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5e6:	e072      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d5e8:	2380      	movs	r3, #128	; 0x80
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e06e      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a75      	ldr	r2, [pc, #468]	; (800d7cc <UART_SetConfig+0x6a4>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d130      	bne.n	800d65c <UART_SetConfig+0x534>
 800d5fa:	4b72      	ldr	r3, [pc, #456]	; (800d7c4 <UART_SetConfig+0x69c>)
 800d5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5fe:	f003 0307 	and.w	r3, r3, #7
 800d602:	2b05      	cmp	r3, #5
 800d604:	d826      	bhi.n	800d654 <UART_SetConfig+0x52c>
 800d606:	a201      	add	r2, pc, #4	; (adr r2, 800d60c <UART_SetConfig+0x4e4>)
 800d608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60c:	0800d625 	.word	0x0800d625
 800d610:	0800d62d 	.word	0x0800d62d
 800d614:	0800d635 	.word	0x0800d635
 800d618:	0800d63d 	.word	0x0800d63d
 800d61c:	0800d645 	.word	0x0800d645
 800d620:	0800d64d 	.word	0x0800d64d
 800d624:	2300      	movs	r3, #0
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62a:	e050      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d62c:	2304      	movs	r3, #4
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d632:	e04c      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d634:	2308      	movs	r3, #8
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63a:	e048      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d63c:	2310      	movs	r3, #16
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d642:	e044      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d644:	2320      	movs	r3, #32
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d64a:	e040      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d64c:	2340      	movs	r3, #64	; 0x40
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d652:	e03c      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d654:	2380      	movs	r3, #128	; 0x80
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e038      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a5b      	ldr	r2, [pc, #364]	; (800d7d0 <UART_SetConfig+0x6a8>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d130      	bne.n	800d6c8 <UART_SetConfig+0x5a0>
 800d666:	4b57      	ldr	r3, [pc, #348]	; (800d7c4 <UART_SetConfig+0x69c>)
 800d668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d66a:	f003 0307 	and.w	r3, r3, #7
 800d66e:	2b05      	cmp	r3, #5
 800d670:	d826      	bhi.n	800d6c0 <UART_SetConfig+0x598>
 800d672:	a201      	add	r2, pc, #4	; (adr r2, 800d678 <UART_SetConfig+0x550>)
 800d674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d678:	0800d691 	.word	0x0800d691
 800d67c:	0800d699 	.word	0x0800d699
 800d680:	0800d6a1 	.word	0x0800d6a1
 800d684:	0800d6a9 	.word	0x0800d6a9
 800d688:	0800d6b1 	.word	0x0800d6b1
 800d68c:	0800d6b9 	.word	0x0800d6b9
 800d690:	2302      	movs	r3, #2
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d696:	e01a      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d698:	2304      	movs	r3, #4
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69e:	e016      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d6a0:	2308      	movs	r3, #8
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a6:	e012      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d6a8:	2310      	movs	r3, #16
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ae:	e00e      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d6b0:	2320      	movs	r3, #32
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e00a      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d6b8:	2340      	movs	r3, #64	; 0x40
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6be:	e006      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d6c0:	2380      	movs	r3, #128	; 0x80
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e002      	b.n	800d6ce <UART_SetConfig+0x5a6>
 800d6c8:	2380      	movs	r3, #128	; 0x80
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a3f      	ldr	r2, [pc, #252]	; (800d7d0 <UART_SetConfig+0x6a8>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	f040 80f8 	bne.w	800d8ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d6da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d6de:	2b20      	cmp	r3, #32
 800d6e0:	dc46      	bgt.n	800d770 <UART_SetConfig+0x648>
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	f2c0 8082 	blt.w	800d7ec <UART_SetConfig+0x6c4>
 800d6e8:	3b02      	subs	r3, #2
 800d6ea:	2b1e      	cmp	r3, #30
 800d6ec:	d87e      	bhi.n	800d7ec <UART_SetConfig+0x6c4>
 800d6ee:	a201      	add	r2, pc, #4	; (adr r2, 800d6f4 <UART_SetConfig+0x5cc>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d777 	.word	0x0800d777
 800d6f8:	0800d7ed 	.word	0x0800d7ed
 800d6fc:	0800d77f 	.word	0x0800d77f
 800d700:	0800d7ed 	.word	0x0800d7ed
 800d704:	0800d7ed 	.word	0x0800d7ed
 800d708:	0800d7ed 	.word	0x0800d7ed
 800d70c:	0800d78f 	.word	0x0800d78f
 800d710:	0800d7ed 	.word	0x0800d7ed
 800d714:	0800d7ed 	.word	0x0800d7ed
 800d718:	0800d7ed 	.word	0x0800d7ed
 800d71c:	0800d7ed 	.word	0x0800d7ed
 800d720:	0800d7ed 	.word	0x0800d7ed
 800d724:	0800d7ed 	.word	0x0800d7ed
 800d728:	0800d7ed 	.word	0x0800d7ed
 800d72c:	0800d79f 	.word	0x0800d79f
 800d730:	0800d7ed 	.word	0x0800d7ed
 800d734:	0800d7ed 	.word	0x0800d7ed
 800d738:	0800d7ed 	.word	0x0800d7ed
 800d73c:	0800d7ed 	.word	0x0800d7ed
 800d740:	0800d7ed 	.word	0x0800d7ed
 800d744:	0800d7ed 	.word	0x0800d7ed
 800d748:	0800d7ed 	.word	0x0800d7ed
 800d74c:	0800d7ed 	.word	0x0800d7ed
 800d750:	0800d7ed 	.word	0x0800d7ed
 800d754:	0800d7ed 	.word	0x0800d7ed
 800d758:	0800d7ed 	.word	0x0800d7ed
 800d75c:	0800d7ed 	.word	0x0800d7ed
 800d760:	0800d7ed 	.word	0x0800d7ed
 800d764:	0800d7ed 	.word	0x0800d7ed
 800d768:	0800d7ed 	.word	0x0800d7ed
 800d76c:	0800d7df 	.word	0x0800d7df
 800d770:	2b40      	cmp	r3, #64	; 0x40
 800d772:	d037      	beq.n	800d7e4 <UART_SetConfig+0x6bc>
 800d774:	e03a      	b.n	800d7ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d776:	f7fd fd3b 	bl	800b1f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d77a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d77c:	e03c      	b.n	800d7f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d782:	4618      	mov	r0, r3
 800d784:	f7fd fd4a 	bl	800b21c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d78c:	e034      	b.n	800d7f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d78e:	f107 0318 	add.w	r3, r7, #24
 800d792:	4618      	mov	r0, r3
 800d794:	f7fd fe96 	bl	800b4c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d79c:	e02c      	b.n	800d7f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d79e:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <UART_SetConfig+0x69c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d016      	beq.n	800d7d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7aa:	4b06      	ldr	r3, [pc, #24]	; (800d7c4 <UART_SetConfig+0x69c>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	08db      	lsrs	r3, r3, #3
 800d7b0:	f003 0303 	and.w	r3, r3, #3
 800d7b4:	4a07      	ldr	r2, [pc, #28]	; (800d7d4 <UART_SetConfig+0x6ac>)
 800d7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7bc:	e01c      	b.n	800d7f8 <UART_SetConfig+0x6d0>
 800d7be:	bf00      	nop
 800d7c0:	40011400 	.word	0x40011400
 800d7c4:	58024400 	.word	0x58024400
 800d7c8:	40007800 	.word	0x40007800
 800d7cc:	40007c00 	.word	0x40007c00
 800d7d0:	58000c00 	.word	0x58000c00
 800d7d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d7d8:	4b9d      	ldr	r3, [pc, #628]	; (800da50 <UART_SetConfig+0x928>)
 800d7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7dc:	e00c      	b.n	800d7f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7de:	4b9d      	ldr	r3, [pc, #628]	; (800da54 <UART_SetConfig+0x92c>)
 800d7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7e2:	e009      	b.n	800d7f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7ea:	e005      	b.n	800d7f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d7f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f000 81de 	beq.w	800dbbc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d804:	4a94      	ldr	r2, [pc, #592]	; (800da58 <UART_SetConfig+0x930>)
 800d806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d80a:	461a      	mov	r2, r3
 800d80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d812:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	4613      	mov	r3, r2
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	4413      	add	r3, r2
 800d81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d820:	429a      	cmp	r2, r3
 800d822:	d305      	bcc.n	800d830 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d903      	bls.n	800d838 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d836:	e1c1      	b.n	800dbbc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83a:	2200      	movs	r2, #0
 800d83c:	60bb      	str	r3, [r7, #8]
 800d83e:	60fa      	str	r2, [r7, #12]
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	4a84      	ldr	r2, [pc, #528]	; (800da58 <UART_SetConfig+0x930>)
 800d846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	2200      	movs	r2, #0
 800d84e:	603b      	str	r3, [r7, #0]
 800d850:	607a      	str	r2, [r7, #4]
 800d852:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d856:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d85a:	f7f2 fd91 	bl	8000380 <__aeabi_uldivmod>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4610      	mov	r0, r2
 800d864:	4619      	mov	r1, r3
 800d866:	f04f 0200 	mov.w	r2, #0
 800d86a:	f04f 0300 	mov.w	r3, #0
 800d86e:	020b      	lsls	r3, r1, #8
 800d870:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d874:	0202      	lsls	r2, r0, #8
 800d876:	6979      	ldr	r1, [r7, #20]
 800d878:	6849      	ldr	r1, [r1, #4]
 800d87a:	0849      	lsrs	r1, r1, #1
 800d87c:	2000      	movs	r0, #0
 800d87e:	460c      	mov	r4, r1
 800d880:	4605      	mov	r5, r0
 800d882:	eb12 0804 	adds.w	r8, r2, r4
 800d886:	eb43 0905 	adc.w	r9, r3, r5
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	469a      	mov	sl, r3
 800d892:	4693      	mov	fp, r2
 800d894:	4652      	mov	r2, sl
 800d896:	465b      	mov	r3, fp
 800d898:	4640      	mov	r0, r8
 800d89a:	4649      	mov	r1, r9
 800d89c:	f7f2 fd70 	bl	8000380 <__aeabi_uldivmod>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8ae:	d308      	bcc.n	800d8c2 <UART_SetConfig+0x79a>
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8b6:	d204      	bcs.n	800d8c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8be:	60da      	str	r2, [r3, #12]
 800d8c0:	e17c      	b.n	800dbbc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8c8:	e178      	b.n	800dbbc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	69db      	ldr	r3, [r3, #28]
 800d8ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8d2:	f040 80c5 	bne.w	800da60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d8d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d8da:	2b20      	cmp	r3, #32
 800d8dc:	dc48      	bgt.n	800d970 <UART_SetConfig+0x848>
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	db7b      	blt.n	800d9da <UART_SetConfig+0x8b2>
 800d8e2:	2b20      	cmp	r3, #32
 800d8e4:	d879      	bhi.n	800d9da <UART_SetConfig+0x8b2>
 800d8e6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ec <UART_SetConfig+0x7c4>)
 800d8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ec:	0800d977 	.word	0x0800d977
 800d8f0:	0800d97f 	.word	0x0800d97f
 800d8f4:	0800d9db 	.word	0x0800d9db
 800d8f8:	0800d9db 	.word	0x0800d9db
 800d8fc:	0800d987 	.word	0x0800d987
 800d900:	0800d9db 	.word	0x0800d9db
 800d904:	0800d9db 	.word	0x0800d9db
 800d908:	0800d9db 	.word	0x0800d9db
 800d90c:	0800d997 	.word	0x0800d997
 800d910:	0800d9db 	.word	0x0800d9db
 800d914:	0800d9db 	.word	0x0800d9db
 800d918:	0800d9db 	.word	0x0800d9db
 800d91c:	0800d9db 	.word	0x0800d9db
 800d920:	0800d9db 	.word	0x0800d9db
 800d924:	0800d9db 	.word	0x0800d9db
 800d928:	0800d9db 	.word	0x0800d9db
 800d92c:	0800d9a7 	.word	0x0800d9a7
 800d930:	0800d9db 	.word	0x0800d9db
 800d934:	0800d9db 	.word	0x0800d9db
 800d938:	0800d9db 	.word	0x0800d9db
 800d93c:	0800d9db 	.word	0x0800d9db
 800d940:	0800d9db 	.word	0x0800d9db
 800d944:	0800d9db 	.word	0x0800d9db
 800d948:	0800d9db 	.word	0x0800d9db
 800d94c:	0800d9db 	.word	0x0800d9db
 800d950:	0800d9db 	.word	0x0800d9db
 800d954:	0800d9db 	.word	0x0800d9db
 800d958:	0800d9db 	.word	0x0800d9db
 800d95c:	0800d9db 	.word	0x0800d9db
 800d960:	0800d9db 	.word	0x0800d9db
 800d964:	0800d9db 	.word	0x0800d9db
 800d968:	0800d9db 	.word	0x0800d9db
 800d96c:	0800d9cd 	.word	0x0800d9cd
 800d970:	2b40      	cmp	r3, #64	; 0x40
 800d972:	d02e      	beq.n	800d9d2 <UART_SetConfig+0x8aa>
 800d974:	e031      	b.n	800d9da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d976:	f7fc fcc9 	bl	800a30c <HAL_RCC_GetPCLK1Freq>
 800d97a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d97c:	e033      	b.n	800d9e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d97e:	f7fc fcdb 	bl	800a338 <HAL_RCC_GetPCLK2Freq>
 800d982:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d984:	e02f      	b.n	800d9e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fd fc46 	bl	800b21c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d994:	e027      	b.n	800d9e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d996:	f107 0318 	add.w	r3, r7, #24
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fd fd92 	bl	800b4c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9a4:	e01f      	b.n	800d9e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9a6:	4b2d      	ldr	r3, [pc, #180]	; (800da5c <UART_SetConfig+0x934>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f003 0320 	and.w	r3, r3, #32
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d009      	beq.n	800d9c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9b2:	4b2a      	ldr	r3, [pc, #168]	; (800da5c <UART_SetConfig+0x934>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	08db      	lsrs	r3, r3, #3
 800d9b8:	f003 0303 	and.w	r3, r3, #3
 800d9bc:	4a24      	ldr	r2, [pc, #144]	; (800da50 <UART_SetConfig+0x928>)
 800d9be:	fa22 f303 	lsr.w	r3, r2, r3
 800d9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9c4:	e00f      	b.n	800d9e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d9c6:	4b22      	ldr	r3, [pc, #136]	; (800da50 <UART_SetConfig+0x928>)
 800d9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9ca:	e00c      	b.n	800d9e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9cc:	4b21      	ldr	r3, [pc, #132]	; (800da54 <UART_SetConfig+0x92c>)
 800d9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9d0:	e009      	b.n	800d9e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9d8:	e005      	b.n	800d9e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d9e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 80e7 	beq.w	800dbbc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f2:	4a19      	ldr	r2, [pc, #100]	; (800da58 <UART_SetConfig+0x930>)
 800d9f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800da00:	005a      	lsls	r2, r3, #1
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	085b      	lsrs	r3, r3, #1
 800da08:	441a      	add	r2, r3
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	2b0f      	cmp	r3, #15
 800da18:	d916      	bls.n	800da48 <UART_SetConfig+0x920>
 800da1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da20:	d212      	bcs.n	800da48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	b29b      	uxth	r3, r3
 800da26:	f023 030f 	bic.w	r3, r3, #15
 800da2a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2e:	085b      	lsrs	r3, r3, #1
 800da30:	b29b      	uxth	r3, r3
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	b29a      	uxth	r2, r3
 800da38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da3a:	4313      	orrs	r3, r2
 800da3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da44:	60da      	str	r2, [r3, #12]
 800da46:	e0b9      	b.n	800dbbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800da48:	2301      	movs	r3, #1
 800da4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da4e:	e0b5      	b.n	800dbbc <UART_SetConfig+0xa94>
 800da50:	03d09000 	.word	0x03d09000
 800da54:	003d0900 	.word	0x003d0900
 800da58:	08010bc4 	.word	0x08010bc4
 800da5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800da60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da64:	2b20      	cmp	r3, #32
 800da66:	dc49      	bgt.n	800dafc <UART_SetConfig+0x9d4>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	db7c      	blt.n	800db66 <UART_SetConfig+0xa3e>
 800da6c:	2b20      	cmp	r3, #32
 800da6e:	d87a      	bhi.n	800db66 <UART_SetConfig+0xa3e>
 800da70:	a201      	add	r2, pc, #4	; (adr r2, 800da78 <UART_SetConfig+0x950>)
 800da72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da76:	bf00      	nop
 800da78:	0800db03 	.word	0x0800db03
 800da7c:	0800db0b 	.word	0x0800db0b
 800da80:	0800db67 	.word	0x0800db67
 800da84:	0800db67 	.word	0x0800db67
 800da88:	0800db13 	.word	0x0800db13
 800da8c:	0800db67 	.word	0x0800db67
 800da90:	0800db67 	.word	0x0800db67
 800da94:	0800db67 	.word	0x0800db67
 800da98:	0800db23 	.word	0x0800db23
 800da9c:	0800db67 	.word	0x0800db67
 800daa0:	0800db67 	.word	0x0800db67
 800daa4:	0800db67 	.word	0x0800db67
 800daa8:	0800db67 	.word	0x0800db67
 800daac:	0800db67 	.word	0x0800db67
 800dab0:	0800db67 	.word	0x0800db67
 800dab4:	0800db67 	.word	0x0800db67
 800dab8:	0800db33 	.word	0x0800db33
 800dabc:	0800db67 	.word	0x0800db67
 800dac0:	0800db67 	.word	0x0800db67
 800dac4:	0800db67 	.word	0x0800db67
 800dac8:	0800db67 	.word	0x0800db67
 800dacc:	0800db67 	.word	0x0800db67
 800dad0:	0800db67 	.word	0x0800db67
 800dad4:	0800db67 	.word	0x0800db67
 800dad8:	0800db67 	.word	0x0800db67
 800dadc:	0800db67 	.word	0x0800db67
 800dae0:	0800db67 	.word	0x0800db67
 800dae4:	0800db67 	.word	0x0800db67
 800dae8:	0800db67 	.word	0x0800db67
 800daec:	0800db67 	.word	0x0800db67
 800daf0:	0800db67 	.word	0x0800db67
 800daf4:	0800db67 	.word	0x0800db67
 800daf8:	0800db59 	.word	0x0800db59
 800dafc:	2b40      	cmp	r3, #64	; 0x40
 800dafe:	d02e      	beq.n	800db5e <UART_SetConfig+0xa36>
 800db00:	e031      	b.n	800db66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db02:	f7fc fc03 	bl	800a30c <HAL_RCC_GetPCLK1Freq>
 800db06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db08:	e033      	b.n	800db72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db0a:	f7fc fc15 	bl	800a338 <HAL_RCC_GetPCLK2Freq>
 800db0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db10:	e02f      	b.n	800db72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db16:	4618      	mov	r0, r3
 800db18:	f7fd fb80 	bl	800b21c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db20:	e027      	b.n	800db72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db22:	f107 0318 	add.w	r3, r7, #24
 800db26:	4618      	mov	r0, r3
 800db28:	f7fd fccc 	bl	800b4c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db30:	e01f      	b.n	800db72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db32:	4b2d      	ldr	r3, [pc, #180]	; (800dbe8 <UART_SetConfig+0xac0>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 0320 	and.w	r3, r3, #32
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d009      	beq.n	800db52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db3e:	4b2a      	ldr	r3, [pc, #168]	; (800dbe8 <UART_SetConfig+0xac0>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	08db      	lsrs	r3, r3, #3
 800db44:	f003 0303 	and.w	r3, r3, #3
 800db48:	4a28      	ldr	r2, [pc, #160]	; (800dbec <UART_SetConfig+0xac4>)
 800db4a:	fa22 f303 	lsr.w	r3, r2, r3
 800db4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db50:	e00f      	b.n	800db72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800db52:	4b26      	ldr	r3, [pc, #152]	; (800dbec <UART_SetConfig+0xac4>)
 800db54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db56:	e00c      	b.n	800db72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db58:	4b25      	ldr	r3, [pc, #148]	; (800dbf0 <UART_SetConfig+0xac8>)
 800db5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db5c:	e009      	b.n	800db72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db64:	e005      	b.n	800db72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db70:	bf00      	nop
    }

    if (pclk != 0U)
 800db72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d021      	beq.n	800dbbc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7c:	4a1d      	ldr	r2, [pc, #116]	; (800dbf4 <UART_SetConfig+0xacc>)
 800db7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db82:	461a      	mov	r2, r3
 800db84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db86:	fbb3 f2f2 	udiv	r2, r3, r2
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	085b      	lsrs	r3, r3, #1
 800db90:	441a      	add	r2, r3
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	fbb2 f3f3 	udiv	r3, r2, r3
 800db9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9e:	2b0f      	cmp	r3, #15
 800dba0:	d909      	bls.n	800dbb6 <UART_SetConfig+0xa8e>
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba8:	d205      	bcs.n	800dbb6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	60da      	str	r2, [r3, #12]
 800dbb4:	e002      	b.n	800dbbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dbd8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3748      	adds	r7, #72	; 0x48
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbe6:	bf00      	nop
 800dbe8:	58024400 	.word	0x58024400
 800dbec:	03d09000 	.word	0x03d09000
 800dbf0:	003d0900 	.word	0x003d0900
 800dbf4:	08010bc4 	.word	0x08010bc4

0800dbf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc04:	f003 0301 	and.w	r3, r3, #1
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00a      	beq.n	800dc22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	430a      	orrs	r2, r1
 800dc20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc26:	f003 0302 	and.w	r3, r3, #2
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	430a      	orrs	r2, r1
 800dc42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00a      	beq.n	800dc66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	430a      	orrs	r2, r1
 800dc64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6a:	f003 0308 	and.w	r3, r3, #8
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00a      	beq.n	800dc88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	430a      	orrs	r2, r1
 800dc86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8c:	f003 0310 	and.w	r3, r3, #16
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00a      	beq.n	800dcaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	430a      	orrs	r2, r1
 800dca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcae:	f003 0320 	and.w	r3, r3, #32
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00a      	beq.n	800dccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	430a      	orrs	r2, r1
 800dcca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d01a      	beq.n	800dd0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	430a      	orrs	r2, r1
 800dcec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcf6:	d10a      	bne.n	800dd0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	430a      	orrs	r2, r1
 800dd0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	430a      	orrs	r2, r1
 800dd2e:	605a      	str	r2, [r3, #4]
  }
}
 800dd30:	bf00      	nop
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af02      	add	r7, sp, #8
 800dd42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd4c:	f7f7 ffca 	bl	8005ce4 <HAL_GetTick>
 800dd50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 0308 	and.w	r3, r3, #8
 800dd5c:	2b08      	cmp	r3, #8
 800dd5e:	d10e      	bne.n	800dd7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f82f 	bl	800ddd2 <UART_WaitOnFlagUntilTimeout>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	e025      	b.n	800ddca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 0304 	and.w	r3, r3, #4
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d10e      	bne.n	800ddaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f819 	bl	800ddd2 <UART_WaitOnFlagUntilTimeout>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dda6:	2303      	movs	r3, #3
 800dda8:	e00f      	b.n	800ddca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2220      	movs	r2, #32
 800ddae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2220      	movs	r2, #32
 800ddb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b09c      	sub	sp, #112	; 0x70
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	60f8      	str	r0, [r7, #12]
 800ddda:	60b9      	str	r1, [r7, #8]
 800dddc:	603b      	str	r3, [r7, #0]
 800ddde:	4613      	mov	r3, r2
 800dde0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dde2:	e0a9      	b.n	800df38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dde4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddea:	f000 80a5 	beq.w	800df38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddee:	f7f7 ff79 	bl	8005ce4 <HAL_GetTick>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d302      	bcc.n	800de04 <UART_WaitOnFlagUntilTimeout+0x32>
 800ddfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de00:	2b00      	cmp	r3, #0
 800de02:	d140      	bne.n	800de86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de0c:	e853 3f00 	ldrex	r3, [r3]
 800de10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800de12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de18:	667b      	str	r3, [r7, #100]	; 0x64
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	461a      	mov	r2, r3
 800de20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de2a:	e841 2300 	strex	r3, r2, [r1]
 800de2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800de30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1e6      	bne.n	800de04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	3308      	adds	r3, #8
 800de3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de40:	e853 3f00 	ldrex	r3, [r3]
 800de44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de48:	f023 0301 	bic.w	r3, r3, #1
 800de4c:	663b      	str	r3, [r7, #96]	; 0x60
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	3308      	adds	r3, #8
 800de54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de56:	64ba      	str	r2, [r7, #72]	; 0x48
 800de58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de5e:	e841 2300 	strex	r3, r2, [r1]
 800de62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800de64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1e5      	bne.n	800de36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2220      	movs	r2, #32
 800de6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2220      	movs	r2, #32
 800de76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e069      	b.n	800df5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f003 0304 	and.w	r3, r3, #4
 800de90:	2b00      	cmp	r3, #0
 800de92:	d051      	beq.n	800df38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	69db      	ldr	r3, [r3, #28]
 800de9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dea2:	d149      	bne.n	800df38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800deac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	e853 3f00 	ldrex	r3, [r3]
 800deba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	461a      	mov	r2, r3
 800deca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800decc:	637b      	str	r3, [r7, #52]	; 0x34
 800dece:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ded2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ded4:	e841 2300 	strex	r3, r2, [r1]
 800ded8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1e6      	bne.n	800deae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3308      	adds	r3, #8
 800dee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	e853 3f00 	ldrex	r3, [r3]
 800deee:	613b      	str	r3, [r7, #16]
   return(result);
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	f023 0301 	bic.w	r3, r3, #1
 800def6:	66bb      	str	r3, [r7, #104]	; 0x68
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	3308      	adds	r3, #8
 800defe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df00:	623a      	str	r2, [r7, #32]
 800df02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df04:	69f9      	ldr	r1, [r7, #28]
 800df06:	6a3a      	ldr	r2, [r7, #32]
 800df08:	e841 2300 	strex	r3, r2, [r1]
 800df0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d1e5      	bne.n	800dee0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2220      	movs	r2, #32
 800df18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2220      	movs	r2, #32
 800df20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2220      	movs	r2, #32
 800df28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df34:	2303      	movs	r3, #3
 800df36:	e010      	b.n	800df5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	69da      	ldr	r2, [r3, #28]
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	4013      	ands	r3, r2
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	429a      	cmp	r2, r3
 800df46:	bf0c      	ite	eq
 800df48:	2301      	moveq	r3, #1
 800df4a:	2300      	movne	r3, #0
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	461a      	mov	r2, r3
 800df50:	79fb      	ldrb	r3, [r7, #7]
 800df52:	429a      	cmp	r2, r3
 800df54:	f43f af46 	beq.w	800dde4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3770      	adds	r7, #112	; 0x70
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
	...

0800df64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df64:	b480      	push	{r7}
 800df66:	b095      	sub	sp, #84	; 0x54
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df74:	e853 3f00 	ldrex	r3, [r3]
 800df78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	461a      	mov	r2, r3
 800df88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df8a:	643b      	str	r3, [r7, #64]	; 0x40
 800df8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df92:	e841 2300 	strex	r3, r2, [r1]
 800df96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1e6      	bne.n	800df6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3308      	adds	r3, #8
 800dfa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	e853 3f00 	ldrex	r3, [r3]
 800dfac:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfae:	69fa      	ldr	r2, [r7, #28]
 800dfb0:	4b1e      	ldr	r3, [pc, #120]	; (800e02c <UART_EndRxTransfer+0xc8>)
 800dfb2:	4013      	ands	r3, r2
 800dfb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	3308      	adds	r3, #8
 800dfbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfc6:	e841 2300 	strex	r3, r2, [r1]
 800dfca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1e5      	bne.n	800df9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	d118      	bne.n	800e00c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	e853 3f00 	ldrex	r3, [r3]
 800dfe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	f023 0310 	bic.w	r3, r3, #16
 800dfee:	647b      	str	r3, [r7, #68]	; 0x44
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	461a      	mov	r2, r3
 800dff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dff8:	61bb      	str	r3, [r7, #24]
 800dffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffc:	6979      	ldr	r1, [r7, #20]
 800dffe:	69ba      	ldr	r2, [r7, #24]
 800e000:	e841 2300 	strex	r3, r2, [r1]
 800e004:	613b      	str	r3, [r7, #16]
   return(result);
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e6      	bne.n	800dfda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2220      	movs	r2, #32
 800e010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e020:	bf00      	nop
 800e022:	3754      	adds	r7, #84	; 0x54
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	effffffe 	.word	0xeffffffe

0800e030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e03c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2200      	movs	r2, #0
 800e04a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f7ff f854 	bl	800d0fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e054:	bf00      	nop
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b088      	sub	sp, #32
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	e853 3f00 	ldrex	r3, [r3]
 800e070:	60bb      	str	r3, [r7, #8]
   return(result);
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e078:	61fb      	str	r3, [r7, #28]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	61bb      	str	r3, [r7, #24]
 800e084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e086:	6979      	ldr	r1, [r7, #20]
 800e088:	69ba      	ldr	r2, [r7, #24]
 800e08a:	e841 2300 	strex	r3, r2, [r1]
 800e08e:	613b      	str	r3, [r7, #16]
   return(result);
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1e6      	bne.n	800e064 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2220      	movs	r2, #32
 800e09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff f81f 	bl	800d0e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0aa:	bf00      	nop
 800e0ac:	3720      	adds	r7, #32
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e0b2:	b480      	push	{r7}
 800e0b4:	b083      	sub	sp, #12
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e0ba:	bf00      	nop
 800e0bc:	370c      	adds	r7, #12
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	b083      	sub	sp, #12
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e0ce:	bf00      	nop
 800e0d0:	370c      	adds	r7, #12
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b083      	sub	sp, #12
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e0e2:	bf00      	nop
 800e0e4:	370c      	adds	r7, #12
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr

0800e0ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e0ee:	b480      	push	{r7}
 800e0f0:	b085      	sub	sp, #20
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d101      	bne.n	800e104 <HAL_UARTEx_DisableFifoMode+0x16>
 800e100:	2302      	movs	r3, #2
 800e102:	e027      	b.n	800e154 <HAL_UARTEx_DisableFifoMode+0x66>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2201      	movs	r2, #1
 800e108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2224      	movs	r2, #36	; 0x24
 800e110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f022 0201 	bic.w	r2, r2, #1
 800e12a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e132:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2220      	movs	r2, #32
 800e146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e170:	2b01      	cmp	r3, #1
 800e172:	d101      	bne.n	800e178 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e174:	2302      	movs	r3, #2
 800e176:	e02d      	b.n	800e1d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2224      	movs	r2, #36	; 0x24
 800e184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f022 0201 	bic.w	r2, r2, #1
 800e19e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	683a      	ldr	r2, [r7, #0]
 800e1b0:	430a      	orrs	r2, r1
 800e1b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f84f 	bl	800e258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	68fa      	ldr	r2, [r7, #12]
 800e1c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2220      	movs	r2, #32
 800e1c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d101      	bne.n	800e1f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e1f0:	2302      	movs	r3, #2
 800e1f2:	e02d      	b.n	800e250 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2224      	movs	r2, #36	; 0x24
 800e200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f022 0201 	bic.w	r2, r2, #1
 800e21a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	683a      	ldr	r2, [r7, #0]
 800e22c:	430a      	orrs	r2, r1
 800e22e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f811 	bl	800e258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2220      	movs	r2, #32
 800e242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e264:	2b00      	cmp	r3, #0
 800e266:	d108      	bne.n	800e27a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e278:	e031      	b.n	800e2de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e27a:	2310      	movs	r3, #16
 800e27c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e27e:	2310      	movs	r3, #16
 800e280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	0e5b      	lsrs	r3, r3, #25
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	f003 0307 	and.w	r3, r3, #7
 800e290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	0f5b      	lsrs	r3, r3, #29
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	f003 0307 	and.w	r3, r3, #7
 800e2a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2a2:	7bbb      	ldrb	r3, [r7, #14]
 800e2a4:	7b3a      	ldrb	r2, [r7, #12]
 800e2a6:	4911      	ldr	r1, [pc, #68]	; (800e2ec <UARTEx_SetNbDataToProcess+0x94>)
 800e2a8:	5c8a      	ldrb	r2, [r1, r2]
 800e2aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e2ae:	7b3a      	ldrb	r2, [r7, #12]
 800e2b0:	490f      	ldr	r1, [pc, #60]	; (800e2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800e2b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2c0:	7bfb      	ldrb	r3, [r7, #15]
 800e2c2:	7b7a      	ldrb	r2, [r7, #13]
 800e2c4:	4909      	ldr	r1, [pc, #36]	; (800e2ec <UARTEx_SetNbDataToProcess+0x94>)
 800e2c6:	5c8a      	ldrb	r2, [r1, r2]
 800e2c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e2cc:	7b7a      	ldrb	r2, [r7, #13]
 800e2ce:	4908      	ldr	r1, [pc, #32]	; (800e2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800e2d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e2de:	bf00      	nop
 800e2e0:	3714      	adds	r7, #20
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr
 800e2ea:	bf00      	nop
 800e2ec:	08010bdc 	.word	0x08010bdc
 800e2f0:	08010be4 	.word	0x08010be4

0800e2f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	f107 001c 	add.w	r0, r7, #28
 800e302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d120      	bne.n	800e34e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68da      	ldr	r2, [r3, #12]
 800e31c:	4b2a      	ldr	r3, [pc, #168]	; (800e3c8 <USB_CoreInit+0xd4>)
 800e31e:	4013      	ands	r3, r2
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e332:	2b01      	cmp	r3, #1
 800e334:	d105      	bne.n	800e342 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 faac 	bl	800e8a0 <USB_CoreReset>
 800e348:	4603      	mov	r3, r0
 800e34a:	73fb      	strb	r3, [r7, #15]
 800e34c:	e01a      	b.n	800e384 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 faa0 	bl	800e8a0 <USB_CoreReset>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e366:	2b00      	cmp	r3, #0
 800e368:	d106      	bne.n	800e378 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e36e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	639a      	str	r2, [r3, #56]	; 0x38
 800e376:	e005      	b.n	800e384 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e386:	2b01      	cmp	r3, #1
 800e388:	d116      	bne.n	800e3b8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e38e:	b29a      	uxth	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e398:	4b0c      	ldr	r3, [pc, #48]	; (800e3cc <USB_CoreInit+0xd8>)
 800e39a:	4313      	orrs	r3, r2
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	f043 0206 	orr.w	r2, r3, #6
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	f043 0220 	orr.w	r2, r3, #32
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3c4:	b004      	add	sp, #16
 800e3c6:	4770      	bx	lr
 800e3c8:	ffbdffbf 	.word	0xffbdffbf
 800e3cc:	03ee0000 	.word	0x03ee0000

0800e3d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	f023 0201 	bic.w	r2, r3, #1
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b084      	sub	sp, #16
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e3fe:	2300      	movs	r3, #0
 800e400:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e40e:	78fb      	ldrb	r3, [r7, #3]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d115      	bne.n	800e440 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e420:	2001      	movs	r0, #1
 800e422:	f7f7 fc6b 	bl	8005cfc <HAL_Delay>
      ms++;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	3301      	adds	r3, #1
 800e42a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fa29 	bl	800e884 <USB_GetMode>
 800e432:	4603      	mov	r3, r0
 800e434:	2b01      	cmp	r3, #1
 800e436:	d01e      	beq.n	800e476 <USB_SetCurrentMode+0x84>
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2b31      	cmp	r3, #49	; 0x31
 800e43c:	d9f0      	bls.n	800e420 <USB_SetCurrentMode+0x2e>
 800e43e:	e01a      	b.n	800e476 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e440:	78fb      	ldrb	r3, [r7, #3]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d115      	bne.n	800e472 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e452:	2001      	movs	r0, #1
 800e454:	f7f7 fc52 	bl	8005cfc <HAL_Delay>
      ms++;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	3301      	adds	r3, #1
 800e45c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 fa10 	bl	800e884 <USB_GetMode>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d005      	beq.n	800e476 <USB_SetCurrentMode+0x84>
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2b31      	cmp	r3, #49	; 0x31
 800e46e:	d9f0      	bls.n	800e452 <USB_SetCurrentMode+0x60>
 800e470:	e001      	b.n	800e476 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	e005      	b.n	800e482 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2b32      	cmp	r3, #50	; 0x32
 800e47a:	d101      	bne.n	800e480 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e47c:	2301      	movs	r3, #1
 800e47e:	e000      	b.n	800e482 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e48c:	b084      	sub	sp, #16
 800e48e:	b580      	push	{r7, lr}
 800e490:	b086      	sub	sp, #24
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e49a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	613b      	str	r3, [r7, #16]
 800e4aa:	e009      	b.n	800e4c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	3340      	adds	r3, #64	; 0x40
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	4413      	add	r3, r2
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	613b      	str	r3, [r7, #16]
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	2b0e      	cmp	r3, #14
 800e4c4:	d9f2      	bls.n	800e4ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d11c      	bne.n	800e506 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4da:	f043 0302 	orr.w	r3, r3, #2
 800e4de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	e005      	b.n	800e512 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e518:	461a      	mov	r2, r3
 800e51a:	2300      	movs	r3, #0
 800e51c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e524:	4619      	mov	r1, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e52c:	461a      	mov	r2, r3
 800e52e:	680b      	ldr	r3, [r1, #0]
 800e530:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e534:	2b01      	cmp	r3, #1
 800e536:	d10c      	bne.n	800e552 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d104      	bne.n	800e548 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e53e:	2100      	movs	r1, #0
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f965 	bl	800e810 <USB_SetDevSpeed>
 800e546:	e008      	b.n	800e55a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e548:	2101      	movs	r1, #1
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f960 	bl	800e810 <USB_SetDevSpeed>
 800e550:	e003      	b.n	800e55a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e552:	2103      	movs	r1, #3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 f95b 	bl	800e810 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e55a:	2110      	movs	r1, #16
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f8f3 	bl	800e748 <USB_FlushTxFifo>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d001      	beq.n	800e56c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f91f 	bl	800e7b0 <USB_FlushRxFifo>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e582:	461a      	mov	r2, r3
 800e584:	2300      	movs	r3, #0
 800e586:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e58e:	461a      	mov	r2, r3
 800e590:	2300      	movs	r3, #0
 800e592:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e59a:	461a      	mov	r2, r3
 800e59c:	2300      	movs	r3, #0
 800e59e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	613b      	str	r3, [r7, #16]
 800e5a4:	e043      	b.n	800e62e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	015a      	lsls	r2, r3, #5
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5bc:	d118      	bne.n	800e5f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d10a      	bne.n	800e5da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	015a      	lsls	r2, r3, #5
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e5d6:	6013      	str	r3, [r2, #0]
 800e5d8:	e013      	b.n	800e602 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	015a      	lsls	r2, r3, #5
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e5ec:	6013      	str	r3, [r2, #0]
 800e5ee:	e008      	b.n	800e602 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	015a      	lsls	r2, r3, #5
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	2300      	movs	r3, #0
 800e600:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	015a      	lsls	r2, r3, #5
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	4413      	add	r3, r2
 800e60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e60e:	461a      	mov	r2, r3
 800e610:	2300      	movs	r3, #0
 800e612:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	015a      	lsls	r2, r3, #5
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	4413      	add	r3, r2
 800e61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e620:	461a      	mov	r2, r3
 800e622:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e626:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	3301      	adds	r3, #1
 800e62c:	613b      	str	r3, [r7, #16]
 800e62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e630:	693a      	ldr	r2, [r7, #16]
 800e632:	429a      	cmp	r2, r3
 800e634:	d3b7      	bcc.n	800e5a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e636:	2300      	movs	r3, #0
 800e638:	613b      	str	r3, [r7, #16]
 800e63a:	e043      	b.n	800e6c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	015a      	lsls	r2, r3, #5
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	4413      	add	r3, r2
 800e644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e64e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e652:	d118      	bne.n	800e686 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d10a      	bne.n	800e670 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	015a      	lsls	r2, r3, #5
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	4413      	add	r3, r2
 800e662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e666:	461a      	mov	r2, r3
 800e668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e66c:	6013      	str	r3, [r2, #0]
 800e66e:	e013      	b.n	800e698 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	015a      	lsls	r2, r3, #5
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	4413      	add	r3, r2
 800e678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e67c:	461a      	mov	r2, r3
 800e67e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e682:	6013      	str	r3, [r2, #0]
 800e684:	e008      	b.n	800e698 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	015a      	lsls	r2, r3, #5
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	4413      	add	r3, r2
 800e68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e692:	461a      	mov	r2, r3
 800e694:	2300      	movs	r3, #0
 800e696:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	015a      	lsls	r2, r3, #5
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	4413      	add	r3, r2
 800e6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	015a      	lsls	r2, r3, #5
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e6bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	613b      	str	r3, [r7, #16]
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	693a      	ldr	r2, [r7, #16]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d3b7      	bcc.n	800e63c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	68fa      	ldr	r2, [r7, #12]
 800e6d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e6ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d105      	bne.n	800e700 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	699b      	ldr	r3, [r3, #24]
 800e6f8:	f043 0210 	orr.w	r2, r3, #16
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	699a      	ldr	r2, [r3, #24]
 800e704:	4b0e      	ldr	r3, [pc, #56]	; (800e740 <USB_DevInit+0x2b4>)
 800e706:	4313      	orrs	r3, r2
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d005      	beq.n	800e71e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	f043 0208 	orr.w	r2, r3, #8
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e720:	2b01      	cmp	r3, #1
 800e722:	d105      	bne.n	800e730 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	699a      	ldr	r2, [r3, #24]
 800e728:	4b06      	ldr	r3, [pc, #24]	; (800e744 <USB_DevInit+0x2b8>)
 800e72a:	4313      	orrs	r3, r2
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e730:	7dfb      	ldrb	r3, [r7, #23]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3718      	adds	r7, #24
 800e736:	46bd      	mov	sp, r7
 800e738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e73c:	b004      	add	sp, #16
 800e73e:	4770      	bx	lr
 800e740:	803c3800 	.word	0x803c3800
 800e744:	40000004 	.word	0x40000004

0800e748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e752:	2300      	movs	r3, #0
 800e754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3301      	adds	r3, #1
 800e75a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	4a13      	ldr	r2, [pc, #76]	; (800e7ac <USB_FlushTxFifo+0x64>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d901      	bls.n	800e768 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e764:	2303      	movs	r3, #3
 800e766:	e01b      	b.n	800e7a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	daf2      	bge.n	800e756 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e770:	2300      	movs	r3, #0
 800e772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	019b      	lsls	r3, r3, #6
 800e778:	f043 0220 	orr.w	r2, r3, #32
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	3301      	adds	r3, #1
 800e784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	4a08      	ldr	r2, [pc, #32]	; (800e7ac <USB_FlushTxFifo+0x64>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d901      	bls.n	800e792 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e78e:	2303      	movs	r3, #3
 800e790:	e006      	b.n	800e7a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	691b      	ldr	r3, [r3, #16]
 800e796:	f003 0320 	and.w	r3, r3, #32
 800e79a:	2b20      	cmp	r3, #32
 800e79c:	d0f0      	beq.n	800e780 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3714      	adds	r7, #20
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr
 800e7ac:	00030d40 	.word	0x00030d40

0800e7b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	4a11      	ldr	r2, [pc, #68]	; (800e80c <USB_FlushRxFifo+0x5c>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d901      	bls.n	800e7ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	e018      	b.n	800e800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	daf2      	bge.n	800e7bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2210      	movs	r2, #16
 800e7de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	4a08      	ldr	r2, [pc, #32]	; (800e80c <USB_FlushRxFifo+0x5c>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d901      	bls.n	800e7f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	e006      	b.n	800e800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	f003 0310 	and.w	r3, r3, #16
 800e7fa:	2b10      	cmp	r3, #16
 800e7fc:	d0f0      	beq.n	800e7e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr
 800e80c:	00030d40 	.word	0x00030d40

0800e810 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	460b      	mov	r3, r1
 800e81a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	68f9      	ldr	r1, [r7, #12]
 800e82c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e830:	4313      	orrs	r3, r2
 800e832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e842:	b480      	push	{r7}
 800e844:	b085      	sub	sp, #20
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e85c:	f023 0303 	bic.w	r3, r3, #3
 800e860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e870:	f043 0302 	orr.w	r3, r3, #2
 800e874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	695b      	ldr	r3, [r3, #20]
 800e890:	f003 0301 	and.w	r3, r3, #1
}
 800e894:	4618      	mov	r0, r3
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	4a13      	ldr	r2, [pc, #76]	; (800e904 <USB_CoreReset+0x64>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d901      	bls.n	800e8be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e01b      	b.n	800e8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	daf2      	bge.n	800e8ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	f043 0201 	orr.w	r2, r3, #1
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4a09      	ldr	r2, [pc, #36]	; (800e904 <USB_CoreReset+0x64>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d901      	bls.n	800e8e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e006      	b.n	800e8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	f003 0301 	and.w	r3, r3, #1
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d0f0      	beq.n	800e8d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3714      	adds	r7, #20
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	00030d40 	.word	0x00030d40

0800e908 <__errno>:
 800e908:	4b01      	ldr	r3, [pc, #4]	; (800e910 <__errno+0x8>)
 800e90a:	6818      	ldr	r0, [r3, #0]
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	24000024 	.word	0x24000024

0800e914 <__libc_init_array>:
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	4d0d      	ldr	r5, [pc, #52]	; (800e94c <__libc_init_array+0x38>)
 800e918:	4c0d      	ldr	r4, [pc, #52]	; (800e950 <__libc_init_array+0x3c>)
 800e91a:	1b64      	subs	r4, r4, r5
 800e91c:	10a4      	asrs	r4, r4, #2
 800e91e:	2600      	movs	r6, #0
 800e920:	42a6      	cmp	r6, r4
 800e922:	d109      	bne.n	800e938 <__libc_init_array+0x24>
 800e924:	4d0b      	ldr	r5, [pc, #44]	; (800e954 <__libc_init_array+0x40>)
 800e926:	4c0c      	ldr	r4, [pc, #48]	; (800e958 <__libc_init_array+0x44>)
 800e928:	f000 fc8e 	bl	800f248 <_init>
 800e92c:	1b64      	subs	r4, r4, r5
 800e92e:	10a4      	asrs	r4, r4, #2
 800e930:	2600      	movs	r6, #0
 800e932:	42a6      	cmp	r6, r4
 800e934:	d105      	bne.n	800e942 <__libc_init_array+0x2e>
 800e936:	bd70      	pop	{r4, r5, r6, pc}
 800e938:	f855 3b04 	ldr.w	r3, [r5], #4
 800e93c:	4798      	blx	r3
 800e93e:	3601      	adds	r6, #1
 800e940:	e7ee      	b.n	800e920 <__libc_init_array+0xc>
 800e942:	f855 3b04 	ldr.w	r3, [r5], #4
 800e946:	4798      	blx	r3
 800e948:	3601      	adds	r6, #1
 800e94a:	e7f2      	b.n	800e932 <__libc_init_array+0x1e>
 800e94c:	08010c28 	.word	0x08010c28
 800e950:	08010c28 	.word	0x08010c28
 800e954:	08010c28 	.word	0x08010c28
 800e958:	08010c2c 	.word	0x08010c2c

0800e95c <memset>:
 800e95c:	4402      	add	r2, r0
 800e95e:	4603      	mov	r3, r0
 800e960:	4293      	cmp	r3, r2
 800e962:	d100      	bne.n	800e966 <memset+0xa>
 800e964:	4770      	bx	lr
 800e966:	f803 1b01 	strb.w	r1, [r3], #1
 800e96a:	e7f9      	b.n	800e960 <memset+0x4>

0800e96c <_free_r>:
 800e96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e96e:	2900      	cmp	r1, #0
 800e970:	d044      	beq.n	800e9fc <_free_r+0x90>
 800e972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e976:	9001      	str	r0, [sp, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f1a1 0404 	sub.w	r4, r1, #4
 800e97e:	bfb8      	it	lt
 800e980:	18e4      	addlt	r4, r4, r3
 800e982:	f000 f903 	bl	800eb8c <__malloc_lock>
 800e986:	4a1e      	ldr	r2, [pc, #120]	; (800ea00 <_free_r+0x94>)
 800e988:	9801      	ldr	r0, [sp, #4]
 800e98a:	6813      	ldr	r3, [r2, #0]
 800e98c:	b933      	cbnz	r3, 800e99c <_free_r+0x30>
 800e98e:	6063      	str	r3, [r4, #4]
 800e990:	6014      	str	r4, [r2, #0]
 800e992:	b003      	add	sp, #12
 800e994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e998:	f000 b8fe 	b.w	800eb98 <__malloc_unlock>
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	d908      	bls.n	800e9b2 <_free_r+0x46>
 800e9a0:	6825      	ldr	r5, [r4, #0]
 800e9a2:	1961      	adds	r1, r4, r5
 800e9a4:	428b      	cmp	r3, r1
 800e9a6:	bf01      	itttt	eq
 800e9a8:	6819      	ldreq	r1, [r3, #0]
 800e9aa:	685b      	ldreq	r3, [r3, #4]
 800e9ac:	1949      	addeq	r1, r1, r5
 800e9ae:	6021      	streq	r1, [r4, #0]
 800e9b0:	e7ed      	b.n	800e98e <_free_r+0x22>
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	b10b      	cbz	r3, 800e9bc <_free_r+0x50>
 800e9b8:	42a3      	cmp	r3, r4
 800e9ba:	d9fa      	bls.n	800e9b2 <_free_r+0x46>
 800e9bc:	6811      	ldr	r1, [r2, #0]
 800e9be:	1855      	adds	r5, r2, r1
 800e9c0:	42a5      	cmp	r5, r4
 800e9c2:	d10b      	bne.n	800e9dc <_free_r+0x70>
 800e9c4:	6824      	ldr	r4, [r4, #0]
 800e9c6:	4421      	add	r1, r4
 800e9c8:	1854      	adds	r4, r2, r1
 800e9ca:	42a3      	cmp	r3, r4
 800e9cc:	6011      	str	r1, [r2, #0]
 800e9ce:	d1e0      	bne.n	800e992 <_free_r+0x26>
 800e9d0:	681c      	ldr	r4, [r3, #0]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	6053      	str	r3, [r2, #4]
 800e9d6:	4421      	add	r1, r4
 800e9d8:	6011      	str	r1, [r2, #0]
 800e9da:	e7da      	b.n	800e992 <_free_r+0x26>
 800e9dc:	d902      	bls.n	800e9e4 <_free_r+0x78>
 800e9de:	230c      	movs	r3, #12
 800e9e0:	6003      	str	r3, [r0, #0]
 800e9e2:	e7d6      	b.n	800e992 <_free_r+0x26>
 800e9e4:	6825      	ldr	r5, [r4, #0]
 800e9e6:	1961      	adds	r1, r4, r5
 800e9e8:	428b      	cmp	r3, r1
 800e9ea:	bf04      	itt	eq
 800e9ec:	6819      	ldreq	r1, [r3, #0]
 800e9ee:	685b      	ldreq	r3, [r3, #4]
 800e9f0:	6063      	str	r3, [r4, #4]
 800e9f2:	bf04      	itt	eq
 800e9f4:	1949      	addeq	r1, r1, r5
 800e9f6:	6021      	streq	r1, [r4, #0]
 800e9f8:	6054      	str	r4, [r2, #4]
 800e9fa:	e7ca      	b.n	800e992 <_free_r+0x26>
 800e9fc:	b003      	add	sp, #12
 800e9fe:	bd30      	pop	{r4, r5, pc}
 800ea00:	24000eb8 	.word	0x24000eb8

0800ea04 <sbrk_aligned>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	4e0e      	ldr	r6, [pc, #56]	; (800ea40 <sbrk_aligned+0x3c>)
 800ea08:	460c      	mov	r4, r1
 800ea0a:	6831      	ldr	r1, [r6, #0]
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	b911      	cbnz	r1, 800ea16 <sbrk_aligned+0x12>
 800ea10:	f000 f88c 	bl	800eb2c <_sbrk_r>
 800ea14:	6030      	str	r0, [r6, #0]
 800ea16:	4621      	mov	r1, r4
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f000 f887 	bl	800eb2c <_sbrk_r>
 800ea1e:	1c43      	adds	r3, r0, #1
 800ea20:	d00a      	beq.n	800ea38 <sbrk_aligned+0x34>
 800ea22:	1cc4      	adds	r4, r0, #3
 800ea24:	f024 0403 	bic.w	r4, r4, #3
 800ea28:	42a0      	cmp	r0, r4
 800ea2a:	d007      	beq.n	800ea3c <sbrk_aligned+0x38>
 800ea2c:	1a21      	subs	r1, r4, r0
 800ea2e:	4628      	mov	r0, r5
 800ea30:	f000 f87c 	bl	800eb2c <_sbrk_r>
 800ea34:	3001      	adds	r0, #1
 800ea36:	d101      	bne.n	800ea3c <sbrk_aligned+0x38>
 800ea38:	f04f 34ff 	mov.w	r4, #4294967295
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	bd70      	pop	{r4, r5, r6, pc}
 800ea40:	24000ebc 	.word	0x24000ebc

0800ea44 <_malloc_r>:
 800ea44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea48:	1ccd      	adds	r5, r1, #3
 800ea4a:	f025 0503 	bic.w	r5, r5, #3
 800ea4e:	3508      	adds	r5, #8
 800ea50:	2d0c      	cmp	r5, #12
 800ea52:	bf38      	it	cc
 800ea54:	250c      	movcc	r5, #12
 800ea56:	2d00      	cmp	r5, #0
 800ea58:	4607      	mov	r7, r0
 800ea5a:	db01      	blt.n	800ea60 <_malloc_r+0x1c>
 800ea5c:	42a9      	cmp	r1, r5
 800ea5e:	d905      	bls.n	800ea6c <_malloc_r+0x28>
 800ea60:	230c      	movs	r3, #12
 800ea62:	603b      	str	r3, [r7, #0]
 800ea64:	2600      	movs	r6, #0
 800ea66:	4630      	mov	r0, r6
 800ea68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea6c:	4e2e      	ldr	r6, [pc, #184]	; (800eb28 <_malloc_r+0xe4>)
 800ea6e:	f000 f88d 	bl	800eb8c <__malloc_lock>
 800ea72:	6833      	ldr	r3, [r6, #0]
 800ea74:	461c      	mov	r4, r3
 800ea76:	bb34      	cbnz	r4, 800eac6 <_malloc_r+0x82>
 800ea78:	4629      	mov	r1, r5
 800ea7a:	4638      	mov	r0, r7
 800ea7c:	f7ff ffc2 	bl	800ea04 <sbrk_aligned>
 800ea80:	1c43      	adds	r3, r0, #1
 800ea82:	4604      	mov	r4, r0
 800ea84:	d14d      	bne.n	800eb22 <_malloc_r+0xde>
 800ea86:	6834      	ldr	r4, [r6, #0]
 800ea88:	4626      	mov	r6, r4
 800ea8a:	2e00      	cmp	r6, #0
 800ea8c:	d140      	bne.n	800eb10 <_malloc_r+0xcc>
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	4631      	mov	r1, r6
 800ea92:	4638      	mov	r0, r7
 800ea94:	eb04 0803 	add.w	r8, r4, r3
 800ea98:	f000 f848 	bl	800eb2c <_sbrk_r>
 800ea9c:	4580      	cmp	r8, r0
 800ea9e:	d13a      	bne.n	800eb16 <_malloc_r+0xd2>
 800eaa0:	6821      	ldr	r1, [r4, #0]
 800eaa2:	3503      	adds	r5, #3
 800eaa4:	1a6d      	subs	r5, r5, r1
 800eaa6:	f025 0503 	bic.w	r5, r5, #3
 800eaaa:	3508      	adds	r5, #8
 800eaac:	2d0c      	cmp	r5, #12
 800eaae:	bf38      	it	cc
 800eab0:	250c      	movcc	r5, #12
 800eab2:	4629      	mov	r1, r5
 800eab4:	4638      	mov	r0, r7
 800eab6:	f7ff ffa5 	bl	800ea04 <sbrk_aligned>
 800eaba:	3001      	adds	r0, #1
 800eabc:	d02b      	beq.n	800eb16 <_malloc_r+0xd2>
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	442b      	add	r3, r5
 800eac2:	6023      	str	r3, [r4, #0]
 800eac4:	e00e      	b.n	800eae4 <_malloc_r+0xa0>
 800eac6:	6822      	ldr	r2, [r4, #0]
 800eac8:	1b52      	subs	r2, r2, r5
 800eaca:	d41e      	bmi.n	800eb0a <_malloc_r+0xc6>
 800eacc:	2a0b      	cmp	r2, #11
 800eace:	d916      	bls.n	800eafe <_malloc_r+0xba>
 800ead0:	1961      	adds	r1, r4, r5
 800ead2:	42a3      	cmp	r3, r4
 800ead4:	6025      	str	r5, [r4, #0]
 800ead6:	bf18      	it	ne
 800ead8:	6059      	strne	r1, [r3, #4]
 800eada:	6863      	ldr	r3, [r4, #4]
 800eadc:	bf08      	it	eq
 800eade:	6031      	streq	r1, [r6, #0]
 800eae0:	5162      	str	r2, [r4, r5]
 800eae2:	604b      	str	r3, [r1, #4]
 800eae4:	4638      	mov	r0, r7
 800eae6:	f104 060b 	add.w	r6, r4, #11
 800eaea:	f000 f855 	bl	800eb98 <__malloc_unlock>
 800eaee:	f026 0607 	bic.w	r6, r6, #7
 800eaf2:	1d23      	adds	r3, r4, #4
 800eaf4:	1af2      	subs	r2, r6, r3
 800eaf6:	d0b6      	beq.n	800ea66 <_malloc_r+0x22>
 800eaf8:	1b9b      	subs	r3, r3, r6
 800eafa:	50a3      	str	r3, [r4, r2]
 800eafc:	e7b3      	b.n	800ea66 <_malloc_r+0x22>
 800eafe:	6862      	ldr	r2, [r4, #4]
 800eb00:	42a3      	cmp	r3, r4
 800eb02:	bf0c      	ite	eq
 800eb04:	6032      	streq	r2, [r6, #0]
 800eb06:	605a      	strne	r2, [r3, #4]
 800eb08:	e7ec      	b.n	800eae4 <_malloc_r+0xa0>
 800eb0a:	4623      	mov	r3, r4
 800eb0c:	6864      	ldr	r4, [r4, #4]
 800eb0e:	e7b2      	b.n	800ea76 <_malloc_r+0x32>
 800eb10:	4634      	mov	r4, r6
 800eb12:	6876      	ldr	r6, [r6, #4]
 800eb14:	e7b9      	b.n	800ea8a <_malloc_r+0x46>
 800eb16:	230c      	movs	r3, #12
 800eb18:	603b      	str	r3, [r7, #0]
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	f000 f83c 	bl	800eb98 <__malloc_unlock>
 800eb20:	e7a1      	b.n	800ea66 <_malloc_r+0x22>
 800eb22:	6025      	str	r5, [r4, #0]
 800eb24:	e7de      	b.n	800eae4 <_malloc_r+0xa0>
 800eb26:	bf00      	nop
 800eb28:	24000eb8 	.word	0x24000eb8

0800eb2c <_sbrk_r>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4d06      	ldr	r5, [pc, #24]	; (800eb48 <_sbrk_r+0x1c>)
 800eb30:	2300      	movs	r3, #0
 800eb32:	4604      	mov	r4, r0
 800eb34:	4608      	mov	r0, r1
 800eb36:	602b      	str	r3, [r5, #0]
 800eb38:	f7f6 ffee 	bl	8005b18 <_sbrk>
 800eb3c:	1c43      	adds	r3, r0, #1
 800eb3e:	d102      	bne.n	800eb46 <_sbrk_r+0x1a>
 800eb40:	682b      	ldr	r3, [r5, #0]
 800eb42:	b103      	cbz	r3, 800eb46 <_sbrk_r+0x1a>
 800eb44:	6023      	str	r3, [r4, #0]
 800eb46:	bd38      	pop	{r3, r4, r5, pc}
 800eb48:	24000ec0 	.word	0x24000ec0

0800eb4c <siprintf>:
 800eb4c:	b40e      	push	{r1, r2, r3}
 800eb4e:	b500      	push	{lr}
 800eb50:	b09c      	sub	sp, #112	; 0x70
 800eb52:	ab1d      	add	r3, sp, #116	; 0x74
 800eb54:	9002      	str	r0, [sp, #8]
 800eb56:	9006      	str	r0, [sp, #24]
 800eb58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb5c:	4809      	ldr	r0, [pc, #36]	; (800eb84 <siprintf+0x38>)
 800eb5e:	9107      	str	r1, [sp, #28]
 800eb60:	9104      	str	r1, [sp, #16]
 800eb62:	4909      	ldr	r1, [pc, #36]	; (800eb88 <siprintf+0x3c>)
 800eb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb68:	9105      	str	r1, [sp, #20]
 800eb6a:	6800      	ldr	r0, [r0, #0]
 800eb6c:	9301      	str	r3, [sp, #4]
 800eb6e:	a902      	add	r1, sp, #8
 800eb70:	f000 f874 	bl	800ec5c <_svfiprintf_r>
 800eb74:	9b02      	ldr	r3, [sp, #8]
 800eb76:	2200      	movs	r2, #0
 800eb78:	701a      	strb	r2, [r3, #0]
 800eb7a:	b01c      	add	sp, #112	; 0x70
 800eb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb80:	b003      	add	sp, #12
 800eb82:	4770      	bx	lr
 800eb84:	24000024 	.word	0x24000024
 800eb88:	ffff0208 	.word	0xffff0208

0800eb8c <__malloc_lock>:
 800eb8c:	4801      	ldr	r0, [pc, #4]	; (800eb94 <__malloc_lock+0x8>)
 800eb8e:	f000 baf9 	b.w	800f184 <__retarget_lock_acquire_recursive>
 800eb92:	bf00      	nop
 800eb94:	24000ec4 	.word	0x24000ec4

0800eb98 <__malloc_unlock>:
 800eb98:	4801      	ldr	r0, [pc, #4]	; (800eba0 <__malloc_unlock+0x8>)
 800eb9a:	f000 baf4 	b.w	800f186 <__retarget_lock_release_recursive>
 800eb9e:	bf00      	nop
 800eba0:	24000ec4 	.word	0x24000ec4

0800eba4 <__ssputs_r>:
 800eba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eba8:	688e      	ldr	r6, [r1, #8]
 800ebaa:	429e      	cmp	r6, r3
 800ebac:	4682      	mov	sl, r0
 800ebae:	460c      	mov	r4, r1
 800ebb0:	4690      	mov	r8, r2
 800ebb2:	461f      	mov	r7, r3
 800ebb4:	d838      	bhi.n	800ec28 <__ssputs_r+0x84>
 800ebb6:	898a      	ldrh	r2, [r1, #12]
 800ebb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ebbc:	d032      	beq.n	800ec24 <__ssputs_r+0x80>
 800ebbe:	6825      	ldr	r5, [r4, #0]
 800ebc0:	6909      	ldr	r1, [r1, #16]
 800ebc2:	eba5 0901 	sub.w	r9, r5, r1
 800ebc6:	6965      	ldr	r5, [r4, #20]
 800ebc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	444b      	add	r3, r9
 800ebd4:	106d      	asrs	r5, r5, #1
 800ebd6:	429d      	cmp	r5, r3
 800ebd8:	bf38      	it	cc
 800ebda:	461d      	movcc	r5, r3
 800ebdc:	0553      	lsls	r3, r2, #21
 800ebde:	d531      	bpl.n	800ec44 <__ssputs_r+0xa0>
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	f7ff ff2f 	bl	800ea44 <_malloc_r>
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	b950      	cbnz	r0, 800ec00 <__ssputs_r+0x5c>
 800ebea:	230c      	movs	r3, #12
 800ebec:	f8ca 3000 	str.w	r3, [sl]
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebf6:	81a3      	strh	r3, [r4, #12]
 800ebf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec00:	6921      	ldr	r1, [r4, #16]
 800ec02:	464a      	mov	r2, r9
 800ec04:	f000 fac0 	bl	800f188 <memcpy>
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec12:	81a3      	strh	r3, [r4, #12]
 800ec14:	6126      	str	r6, [r4, #16]
 800ec16:	6165      	str	r5, [r4, #20]
 800ec18:	444e      	add	r6, r9
 800ec1a:	eba5 0509 	sub.w	r5, r5, r9
 800ec1e:	6026      	str	r6, [r4, #0]
 800ec20:	60a5      	str	r5, [r4, #8]
 800ec22:	463e      	mov	r6, r7
 800ec24:	42be      	cmp	r6, r7
 800ec26:	d900      	bls.n	800ec2a <__ssputs_r+0x86>
 800ec28:	463e      	mov	r6, r7
 800ec2a:	6820      	ldr	r0, [r4, #0]
 800ec2c:	4632      	mov	r2, r6
 800ec2e:	4641      	mov	r1, r8
 800ec30:	f000 fab8 	bl	800f1a4 <memmove>
 800ec34:	68a3      	ldr	r3, [r4, #8]
 800ec36:	1b9b      	subs	r3, r3, r6
 800ec38:	60a3      	str	r3, [r4, #8]
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	4433      	add	r3, r6
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	2000      	movs	r0, #0
 800ec42:	e7db      	b.n	800ebfc <__ssputs_r+0x58>
 800ec44:	462a      	mov	r2, r5
 800ec46:	f000 fac7 	bl	800f1d8 <_realloc_r>
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d1e1      	bne.n	800ec14 <__ssputs_r+0x70>
 800ec50:	6921      	ldr	r1, [r4, #16]
 800ec52:	4650      	mov	r0, sl
 800ec54:	f7ff fe8a 	bl	800e96c <_free_r>
 800ec58:	e7c7      	b.n	800ebea <__ssputs_r+0x46>
	...

0800ec5c <_svfiprintf_r>:
 800ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	4698      	mov	r8, r3
 800ec62:	898b      	ldrh	r3, [r1, #12]
 800ec64:	061b      	lsls	r3, r3, #24
 800ec66:	b09d      	sub	sp, #116	; 0x74
 800ec68:	4607      	mov	r7, r0
 800ec6a:	460d      	mov	r5, r1
 800ec6c:	4614      	mov	r4, r2
 800ec6e:	d50e      	bpl.n	800ec8e <_svfiprintf_r+0x32>
 800ec70:	690b      	ldr	r3, [r1, #16]
 800ec72:	b963      	cbnz	r3, 800ec8e <_svfiprintf_r+0x32>
 800ec74:	2140      	movs	r1, #64	; 0x40
 800ec76:	f7ff fee5 	bl	800ea44 <_malloc_r>
 800ec7a:	6028      	str	r0, [r5, #0]
 800ec7c:	6128      	str	r0, [r5, #16]
 800ec7e:	b920      	cbnz	r0, 800ec8a <_svfiprintf_r+0x2e>
 800ec80:	230c      	movs	r3, #12
 800ec82:	603b      	str	r3, [r7, #0]
 800ec84:	f04f 30ff 	mov.w	r0, #4294967295
 800ec88:	e0d1      	b.n	800ee2e <_svfiprintf_r+0x1d2>
 800ec8a:	2340      	movs	r3, #64	; 0x40
 800ec8c:	616b      	str	r3, [r5, #20]
 800ec8e:	2300      	movs	r3, #0
 800ec90:	9309      	str	r3, [sp, #36]	; 0x24
 800ec92:	2320      	movs	r3, #32
 800ec94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec9c:	2330      	movs	r3, #48	; 0x30
 800ec9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ee48 <_svfiprintf_r+0x1ec>
 800eca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eca6:	f04f 0901 	mov.w	r9, #1
 800ecaa:	4623      	mov	r3, r4
 800ecac:	469a      	mov	sl, r3
 800ecae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecb2:	b10a      	cbz	r2, 800ecb8 <_svfiprintf_r+0x5c>
 800ecb4:	2a25      	cmp	r2, #37	; 0x25
 800ecb6:	d1f9      	bne.n	800ecac <_svfiprintf_r+0x50>
 800ecb8:	ebba 0b04 	subs.w	fp, sl, r4
 800ecbc:	d00b      	beq.n	800ecd6 <_svfiprintf_r+0x7a>
 800ecbe:	465b      	mov	r3, fp
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	4629      	mov	r1, r5
 800ecc4:	4638      	mov	r0, r7
 800ecc6:	f7ff ff6d 	bl	800eba4 <__ssputs_r>
 800ecca:	3001      	adds	r0, #1
 800eccc:	f000 80aa 	beq.w	800ee24 <_svfiprintf_r+0x1c8>
 800ecd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecd2:	445a      	add	r2, fp
 800ecd4:	9209      	str	r2, [sp, #36]	; 0x24
 800ecd6:	f89a 3000 	ldrb.w	r3, [sl]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f000 80a2 	beq.w	800ee24 <_svfiprintf_r+0x1c8>
 800ece0:	2300      	movs	r3, #0
 800ece2:	f04f 32ff 	mov.w	r2, #4294967295
 800ece6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecea:	f10a 0a01 	add.w	sl, sl, #1
 800ecee:	9304      	str	r3, [sp, #16]
 800ecf0:	9307      	str	r3, [sp, #28]
 800ecf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecf6:	931a      	str	r3, [sp, #104]	; 0x68
 800ecf8:	4654      	mov	r4, sl
 800ecfa:	2205      	movs	r2, #5
 800ecfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed00:	4851      	ldr	r0, [pc, #324]	; (800ee48 <_svfiprintf_r+0x1ec>)
 800ed02:	f7f1 faed 	bl	80002e0 <memchr>
 800ed06:	9a04      	ldr	r2, [sp, #16]
 800ed08:	b9d8      	cbnz	r0, 800ed42 <_svfiprintf_r+0xe6>
 800ed0a:	06d0      	lsls	r0, r2, #27
 800ed0c:	bf44      	itt	mi
 800ed0e:	2320      	movmi	r3, #32
 800ed10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed14:	0711      	lsls	r1, r2, #28
 800ed16:	bf44      	itt	mi
 800ed18:	232b      	movmi	r3, #43	; 0x2b
 800ed1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed22:	2b2a      	cmp	r3, #42	; 0x2a
 800ed24:	d015      	beq.n	800ed52 <_svfiprintf_r+0xf6>
 800ed26:	9a07      	ldr	r2, [sp, #28]
 800ed28:	4654      	mov	r4, sl
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	f04f 0c0a 	mov.w	ip, #10
 800ed30:	4621      	mov	r1, r4
 800ed32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed36:	3b30      	subs	r3, #48	; 0x30
 800ed38:	2b09      	cmp	r3, #9
 800ed3a:	d94e      	bls.n	800edda <_svfiprintf_r+0x17e>
 800ed3c:	b1b0      	cbz	r0, 800ed6c <_svfiprintf_r+0x110>
 800ed3e:	9207      	str	r2, [sp, #28]
 800ed40:	e014      	b.n	800ed6c <_svfiprintf_r+0x110>
 800ed42:	eba0 0308 	sub.w	r3, r0, r8
 800ed46:	fa09 f303 	lsl.w	r3, r9, r3
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	9304      	str	r3, [sp, #16]
 800ed4e:	46a2      	mov	sl, r4
 800ed50:	e7d2      	b.n	800ecf8 <_svfiprintf_r+0x9c>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	1d19      	adds	r1, r3, #4
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	9103      	str	r1, [sp, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	bfbb      	ittet	lt
 800ed5e:	425b      	neglt	r3, r3
 800ed60:	f042 0202 	orrlt.w	r2, r2, #2
 800ed64:	9307      	strge	r3, [sp, #28]
 800ed66:	9307      	strlt	r3, [sp, #28]
 800ed68:	bfb8      	it	lt
 800ed6a:	9204      	strlt	r2, [sp, #16]
 800ed6c:	7823      	ldrb	r3, [r4, #0]
 800ed6e:	2b2e      	cmp	r3, #46	; 0x2e
 800ed70:	d10c      	bne.n	800ed8c <_svfiprintf_r+0x130>
 800ed72:	7863      	ldrb	r3, [r4, #1]
 800ed74:	2b2a      	cmp	r3, #42	; 0x2a
 800ed76:	d135      	bne.n	800ede4 <_svfiprintf_r+0x188>
 800ed78:	9b03      	ldr	r3, [sp, #12]
 800ed7a:	1d1a      	adds	r2, r3, #4
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	9203      	str	r2, [sp, #12]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	bfb8      	it	lt
 800ed84:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed88:	3402      	adds	r4, #2
 800ed8a:	9305      	str	r3, [sp, #20]
 800ed8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee58 <_svfiprintf_r+0x1fc>
 800ed90:	7821      	ldrb	r1, [r4, #0]
 800ed92:	2203      	movs	r2, #3
 800ed94:	4650      	mov	r0, sl
 800ed96:	f7f1 faa3 	bl	80002e0 <memchr>
 800ed9a:	b140      	cbz	r0, 800edae <_svfiprintf_r+0x152>
 800ed9c:	2340      	movs	r3, #64	; 0x40
 800ed9e:	eba0 000a 	sub.w	r0, r0, sl
 800eda2:	fa03 f000 	lsl.w	r0, r3, r0
 800eda6:	9b04      	ldr	r3, [sp, #16]
 800eda8:	4303      	orrs	r3, r0
 800edaa:	3401      	adds	r4, #1
 800edac:	9304      	str	r3, [sp, #16]
 800edae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edb2:	4826      	ldr	r0, [pc, #152]	; (800ee4c <_svfiprintf_r+0x1f0>)
 800edb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edb8:	2206      	movs	r2, #6
 800edba:	f7f1 fa91 	bl	80002e0 <memchr>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d038      	beq.n	800ee34 <_svfiprintf_r+0x1d8>
 800edc2:	4b23      	ldr	r3, [pc, #140]	; (800ee50 <_svfiprintf_r+0x1f4>)
 800edc4:	bb1b      	cbnz	r3, 800ee0e <_svfiprintf_r+0x1b2>
 800edc6:	9b03      	ldr	r3, [sp, #12]
 800edc8:	3307      	adds	r3, #7
 800edca:	f023 0307 	bic.w	r3, r3, #7
 800edce:	3308      	adds	r3, #8
 800edd0:	9303      	str	r3, [sp, #12]
 800edd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edd4:	4433      	add	r3, r6
 800edd6:	9309      	str	r3, [sp, #36]	; 0x24
 800edd8:	e767      	b.n	800ecaa <_svfiprintf_r+0x4e>
 800edda:	fb0c 3202 	mla	r2, ip, r2, r3
 800edde:	460c      	mov	r4, r1
 800ede0:	2001      	movs	r0, #1
 800ede2:	e7a5      	b.n	800ed30 <_svfiprintf_r+0xd4>
 800ede4:	2300      	movs	r3, #0
 800ede6:	3401      	adds	r4, #1
 800ede8:	9305      	str	r3, [sp, #20]
 800edea:	4619      	mov	r1, r3
 800edec:	f04f 0c0a 	mov.w	ip, #10
 800edf0:	4620      	mov	r0, r4
 800edf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edf6:	3a30      	subs	r2, #48	; 0x30
 800edf8:	2a09      	cmp	r2, #9
 800edfa:	d903      	bls.n	800ee04 <_svfiprintf_r+0x1a8>
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d0c5      	beq.n	800ed8c <_svfiprintf_r+0x130>
 800ee00:	9105      	str	r1, [sp, #20]
 800ee02:	e7c3      	b.n	800ed8c <_svfiprintf_r+0x130>
 800ee04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee08:	4604      	mov	r4, r0
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e7f0      	b.n	800edf0 <_svfiprintf_r+0x194>
 800ee0e:	ab03      	add	r3, sp, #12
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	462a      	mov	r2, r5
 800ee14:	4b0f      	ldr	r3, [pc, #60]	; (800ee54 <_svfiprintf_r+0x1f8>)
 800ee16:	a904      	add	r1, sp, #16
 800ee18:	4638      	mov	r0, r7
 800ee1a:	f3af 8000 	nop.w
 800ee1e:	1c42      	adds	r2, r0, #1
 800ee20:	4606      	mov	r6, r0
 800ee22:	d1d6      	bne.n	800edd2 <_svfiprintf_r+0x176>
 800ee24:	89ab      	ldrh	r3, [r5, #12]
 800ee26:	065b      	lsls	r3, r3, #25
 800ee28:	f53f af2c 	bmi.w	800ec84 <_svfiprintf_r+0x28>
 800ee2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee2e:	b01d      	add	sp, #116	; 0x74
 800ee30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee34:	ab03      	add	r3, sp, #12
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	462a      	mov	r2, r5
 800ee3a:	4b06      	ldr	r3, [pc, #24]	; (800ee54 <_svfiprintf_r+0x1f8>)
 800ee3c:	a904      	add	r1, sp, #16
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f000 f87a 	bl	800ef38 <_printf_i>
 800ee44:	e7eb      	b.n	800ee1e <_svfiprintf_r+0x1c2>
 800ee46:	bf00      	nop
 800ee48:	08010bec 	.word	0x08010bec
 800ee4c:	08010bf6 	.word	0x08010bf6
 800ee50:	00000000 	.word	0x00000000
 800ee54:	0800eba5 	.word	0x0800eba5
 800ee58:	08010bf2 	.word	0x08010bf2

0800ee5c <_printf_common>:
 800ee5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee60:	4616      	mov	r6, r2
 800ee62:	4699      	mov	r9, r3
 800ee64:	688a      	ldr	r2, [r1, #8]
 800ee66:	690b      	ldr	r3, [r1, #16]
 800ee68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	bfb8      	it	lt
 800ee70:	4613      	movlt	r3, r2
 800ee72:	6033      	str	r3, [r6, #0]
 800ee74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee78:	4607      	mov	r7, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	b10a      	cbz	r2, 800ee82 <_printf_common+0x26>
 800ee7e:	3301      	adds	r3, #1
 800ee80:	6033      	str	r3, [r6, #0]
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	0699      	lsls	r1, r3, #26
 800ee86:	bf42      	ittt	mi
 800ee88:	6833      	ldrmi	r3, [r6, #0]
 800ee8a:	3302      	addmi	r3, #2
 800ee8c:	6033      	strmi	r3, [r6, #0]
 800ee8e:	6825      	ldr	r5, [r4, #0]
 800ee90:	f015 0506 	ands.w	r5, r5, #6
 800ee94:	d106      	bne.n	800eea4 <_printf_common+0x48>
 800ee96:	f104 0a19 	add.w	sl, r4, #25
 800ee9a:	68e3      	ldr	r3, [r4, #12]
 800ee9c:	6832      	ldr	r2, [r6, #0]
 800ee9e:	1a9b      	subs	r3, r3, r2
 800eea0:	42ab      	cmp	r3, r5
 800eea2:	dc26      	bgt.n	800eef2 <_printf_common+0x96>
 800eea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eea8:	1e13      	subs	r3, r2, #0
 800eeaa:	6822      	ldr	r2, [r4, #0]
 800eeac:	bf18      	it	ne
 800eeae:	2301      	movne	r3, #1
 800eeb0:	0692      	lsls	r2, r2, #26
 800eeb2:	d42b      	bmi.n	800ef0c <_printf_common+0xb0>
 800eeb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eeb8:	4649      	mov	r1, r9
 800eeba:	4638      	mov	r0, r7
 800eebc:	47c0      	blx	r8
 800eebe:	3001      	adds	r0, #1
 800eec0:	d01e      	beq.n	800ef00 <_printf_common+0xa4>
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	68e5      	ldr	r5, [r4, #12]
 800eec6:	6832      	ldr	r2, [r6, #0]
 800eec8:	f003 0306 	and.w	r3, r3, #6
 800eecc:	2b04      	cmp	r3, #4
 800eece:	bf08      	it	eq
 800eed0:	1aad      	subeq	r5, r5, r2
 800eed2:	68a3      	ldr	r3, [r4, #8]
 800eed4:	6922      	ldr	r2, [r4, #16]
 800eed6:	bf0c      	ite	eq
 800eed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eedc:	2500      	movne	r5, #0
 800eede:	4293      	cmp	r3, r2
 800eee0:	bfc4      	itt	gt
 800eee2:	1a9b      	subgt	r3, r3, r2
 800eee4:	18ed      	addgt	r5, r5, r3
 800eee6:	2600      	movs	r6, #0
 800eee8:	341a      	adds	r4, #26
 800eeea:	42b5      	cmp	r5, r6
 800eeec:	d11a      	bne.n	800ef24 <_printf_common+0xc8>
 800eeee:	2000      	movs	r0, #0
 800eef0:	e008      	b.n	800ef04 <_printf_common+0xa8>
 800eef2:	2301      	movs	r3, #1
 800eef4:	4652      	mov	r2, sl
 800eef6:	4649      	mov	r1, r9
 800eef8:	4638      	mov	r0, r7
 800eefa:	47c0      	blx	r8
 800eefc:	3001      	adds	r0, #1
 800eefe:	d103      	bne.n	800ef08 <_printf_common+0xac>
 800ef00:	f04f 30ff 	mov.w	r0, #4294967295
 800ef04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef08:	3501      	adds	r5, #1
 800ef0a:	e7c6      	b.n	800ee9a <_printf_common+0x3e>
 800ef0c:	18e1      	adds	r1, r4, r3
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	2030      	movs	r0, #48	; 0x30
 800ef12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef16:	4422      	add	r2, r4
 800ef18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef20:	3302      	adds	r3, #2
 800ef22:	e7c7      	b.n	800eeb4 <_printf_common+0x58>
 800ef24:	2301      	movs	r3, #1
 800ef26:	4622      	mov	r2, r4
 800ef28:	4649      	mov	r1, r9
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	47c0      	blx	r8
 800ef2e:	3001      	adds	r0, #1
 800ef30:	d0e6      	beq.n	800ef00 <_printf_common+0xa4>
 800ef32:	3601      	adds	r6, #1
 800ef34:	e7d9      	b.n	800eeea <_printf_common+0x8e>
	...

0800ef38 <_printf_i>:
 800ef38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef3c:	7e0f      	ldrb	r7, [r1, #24]
 800ef3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef40:	2f78      	cmp	r7, #120	; 0x78
 800ef42:	4691      	mov	r9, r2
 800ef44:	4680      	mov	r8, r0
 800ef46:	460c      	mov	r4, r1
 800ef48:	469a      	mov	sl, r3
 800ef4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef4e:	d807      	bhi.n	800ef60 <_printf_i+0x28>
 800ef50:	2f62      	cmp	r7, #98	; 0x62
 800ef52:	d80a      	bhi.n	800ef6a <_printf_i+0x32>
 800ef54:	2f00      	cmp	r7, #0
 800ef56:	f000 80d8 	beq.w	800f10a <_printf_i+0x1d2>
 800ef5a:	2f58      	cmp	r7, #88	; 0x58
 800ef5c:	f000 80a3 	beq.w	800f0a6 <_printf_i+0x16e>
 800ef60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef68:	e03a      	b.n	800efe0 <_printf_i+0xa8>
 800ef6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef6e:	2b15      	cmp	r3, #21
 800ef70:	d8f6      	bhi.n	800ef60 <_printf_i+0x28>
 800ef72:	a101      	add	r1, pc, #4	; (adr r1, 800ef78 <_printf_i+0x40>)
 800ef74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef78:	0800efd1 	.word	0x0800efd1
 800ef7c:	0800efe5 	.word	0x0800efe5
 800ef80:	0800ef61 	.word	0x0800ef61
 800ef84:	0800ef61 	.word	0x0800ef61
 800ef88:	0800ef61 	.word	0x0800ef61
 800ef8c:	0800ef61 	.word	0x0800ef61
 800ef90:	0800efe5 	.word	0x0800efe5
 800ef94:	0800ef61 	.word	0x0800ef61
 800ef98:	0800ef61 	.word	0x0800ef61
 800ef9c:	0800ef61 	.word	0x0800ef61
 800efa0:	0800ef61 	.word	0x0800ef61
 800efa4:	0800f0f1 	.word	0x0800f0f1
 800efa8:	0800f015 	.word	0x0800f015
 800efac:	0800f0d3 	.word	0x0800f0d3
 800efb0:	0800ef61 	.word	0x0800ef61
 800efb4:	0800ef61 	.word	0x0800ef61
 800efb8:	0800f113 	.word	0x0800f113
 800efbc:	0800ef61 	.word	0x0800ef61
 800efc0:	0800f015 	.word	0x0800f015
 800efc4:	0800ef61 	.word	0x0800ef61
 800efc8:	0800ef61 	.word	0x0800ef61
 800efcc:	0800f0db 	.word	0x0800f0db
 800efd0:	682b      	ldr	r3, [r5, #0]
 800efd2:	1d1a      	adds	r2, r3, #4
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	602a      	str	r2, [r5, #0]
 800efd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efe0:	2301      	movs	r3, #1
 800efe2:	e0a3      	b.n	800f12c <_printf_i+0x1f4>
 800efe4:	6820      	ldr	r0, [r4, #0]
 800efe6:	6829      	ldr	r1, [r5, #0]
 800efe8:	0606      	lsls	r6, r0, #24
 800efea:	f101 0304 	add.w	r3, r1, #4
 800efee:	d50a      	bpl.n	800f006 <_printf_i+0xce>
 800eff0:	680e      	ldr	r6, [r1, #0]
 800eff2:	602b      	str	r3, [r5, #0]
 800eff4:	2e00      	cmp	r6, #0
 800eff6:	da03      	bge.n	800f000 <_printf_i+0xc8>
 800eff8:	232d      	movs	r3, #45	; 0x2d
 800effa:	4276      	negs	r6, r6
 800effc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f000:	485e      	ldr	r0, [pc, #376]	; (800f17c <_printf_i+0x244>)
 800f002:	230a      	movs	r3, #10
 800f004:	e019      	b.n	800f03a <_printf_i+0x102>
 800f006:	680e      	ldr	r6, [r1, #0]
 800f008:	602b      	str	r3, [r5, #0]
 800f00a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f00e:	bf18      	it	ne
 800f010:	b236      	sxthne	r6, r6
 800f012:	e7ef      	b.n	800eff4 <_printf_i+0xbc>
 800f014:	682b      	ldr	r3, [r5, #0]
 800f016:	6820      	ldr	r0, [r4, #0]
 800f018:	1d19      	adds	r1, r3, #4
 800f01a:	6029      	str	r1, [r5, #0]
 800f01c:	0601      	lsls	r1, r0, #24
 800f01e:	d501      	bpl.n	800f024 <_printf_i+0xec>
 800f020:	681e      	ldr	r6, [r3, #0]
 800f022:	e002      	b.n	800f02a <_printf_i+0xf2>
 800f024:	0646      	lsls	r6, r0, #25
 800f026:	d5fb      	bpl.n	800f020 <_printf_i+0xe8>
 800f028:	881e      	ldrh	r6, [r3, #0]
 800f02a:	4854      	ldr	r0, [pc, #336]	; (800f17c <_printf_i+0x244>)
 800f02c:	2f6f      	cmp	r7, #111	; 0x6f
 800f02e:	bf0c      	ite	eq
 800f030:	2308      	moveq	r3, #8
 800f032:	230a      	movne	r3, #10
 800f034:	2100      	movs	r1, #0
 800f036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f03a:	6865      	ldr	r5, [r4, #4]
 800f03c:	60a5      	str	r5, [r4, #8]
 800f03e:	2d00      	cmp	r5, #0
 800f040:	bfa2      	ittt	ge
 800f042:	6821      	ldrge	r1, [r4, #0]
 800f044:	f021 0104 	bicge.w	r1, r1, #4
 800f048:	6021      	strge	r1, [r4, #0]
 800f04a:	b90e      	cbnz	r6, 800f050 <_printf_i+0x118>
 800f04c:	2d00      	cmp	r5, #0
 800f04e:	d04d      	beq.n	800f0ec <_printf_i+0x1b4>
 800f050:	4615      	mov	r5, r2
 800f052:	fbb6 f1f3 	udiv	r1, r6, r3
 800f056:	fb03 6711 	mls	r7, r3, r1, r6
 800f05a:	5dc7      	ldrb	r7, [r0, r7]
 800f05c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f060:	4637      	mov	r7, r6
 800f062:	42bb      	cmp	r3, r7
 800f064:	460e      	mov	r6, r1
 800f066:	d9f4      	bls.n	800f052 <_printf_i+0x11a>
 800f068:	2b08      	cmp	r3, #8
 800f06a:	d10b      	bne.n	800f084 <_printf_i+0x14c>
 800f06c:	6823      	ldr	r3, [r4, #0]
 800f06e:	07de      	lsls	r6, r3, #31
 800f070:	d508      	bpl.n	800f084 <_printf_i+0x14c>
 800f072:	6923      	ldr	r3, [r4, #16]
 800f074:	6861      	ldr	r1, [r4, #4]
 800f076:	4299      	cmp	r1, r3
 800f078:	bfde      	ittt	le
 800f07a:	2330      	movle	r3, #48	; 0x30
 800f07c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f080:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f084:	1b52      	subs	r2, r2, r5
 800f086:	6122      	str	r2, [r4, #16]
 800f088:	f8cd a000 	str.w	sl, [sp]
 800f08c:	464b      	mov	r3, r9
 800f08e:	aa03      	add	r2, sp, #12
 800f090:	4621      	mov	r1, r4
 800f092:	4640      	mov	r0, r8
 800f094:	f7ff fee2 	bl	800ee5c <_printf_common>
 800f098:	3001      	adds	r0, #1
 800f09a:	d14c      	bne.n	800f136 <_printf_i+0x1fe>
 800f09c:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a0:	b004      	add	sp, #16
 800f0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a6:	4835      	ldr	r0, [pc, #212]	; (800f17c <_printf_i+0x244>)
 800f0a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f0ac:	6829      	ldr	r1, [r5, #0]
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f0b4:	6029      	str	r1, [r5, #0]
 800f0b6:	061d      	lsls	r5, r3, #24
 800f0b8:	d514      	bpl.n	800f0e4 <_printf_i+0x1ac>
 800f0ba:	07df      	lsls	r7, r3, #31
 800f0bc:	bf44      	itt	mi
 800f0be:	f043 0320 	orrmi.w	r3, r3, #32
 800f0c2:	6023      	strmi	r3, [r4, #0]
 800f0c4:	b91e      	cbnz	r6, 800f0ce <_printf_i+0x196>
 800f0c6:	6823      	ldr	r3, [r4, #0]
 800f0c8:	f023 0320 	bic.w	r3, r3, #32
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	2310      	movs	r3, #16
 800f0d0:	e7b0      	b.n	800f034 <_printf_i+0xfc>
 800f0d2:	6823      	ldr	r3, [r4, #0]
 800f0d4:	f043 0320 	orr.w	r3, r3, #32
 800f0d8:	6023      	str	r3, [r4, #0]
 800f0da:	2378      	movs	r3, #120	; 0x78
 800f0dc:	4828      	ldr	r0, [pc, #160]	; (800f180 <_printf_i+0x248>)
 800f0de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0e2:	e7e3      	b.n	800f0ac <_printf_i+0x174>
 800f0e4:	0659      	lsls	r1, r3, #25
 800f0e6:	bf48      	it	mi
 800f0e8:	b2b6      	uxthmi	r6, r6
 800f0ea:	e7e6      	b.n	800f0ba <_printf_i+0x182>
 800f0ec:	4615      	mov	r5, r2
 800f0ee:	e7bb      	b.n	800f068 <_printf_i+0x130>
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	6826      	ldr	r6, [r4, #0]
 800f0f4:	6961      	ldr	r1, [r4, #20]
 800f0f6:	1d18      	adds	r0, r3, #4
 800f0f8:	6028      	str	r0, [r5, #0]
 800f0fa:	0635      	lsls	r5, r6, #24
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	d501      	bpl.n	800f104 <_printf_i+0x1cc>
 800f100:	6019      	str	r1, [r3, #0]
 800f102:	e002      	b.n	800f10a <_printf_i+0x1d2>
 800f104:	0670      	lsls	r0, r6, #25
 800f106:	d5fb      	bpl.n	800f100 <_printf_i+0x1c8>
 800f108:	8019      	strh	r1, [r3, #0]
 800f10a:	2300      	movs	r3, #0
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	4615      	mov	r5, r2
 800f110:	e7ba      	b.n	800f088 <_printf_i+0x150>
 800f112:	682b      	ldr	r3, [r5, #0]
 800f114:	1d1a      	adds	r2, r3, #4
 800f116:	602a      	str	r2, [r5, #0]
 800f118:	681d      	ldr	r5, [r3, #0]
 800f11a:	6862      	ldr	r2, [r4, #4]
 800f11c:	2100      	movs	r1, #0
 800f11e:	4628      	mov	r0, r5
 800f120:	f7f1 f8de 	bl	80002e0 <memchr>
 800f124:	b108      	cbz	r0, 800f12a <_printf_i+0x1f2>
 800f126:	1b40      	subs	r0, r0, r5
 800f128:	6060      	str	r0, [r4, #4]
 800f12a:	6863      	ldr	r3, [r4, #4]
 800f12c:	6123      	str	r3, [r4, #16]
 800f12e:	2300      	movs	r3, #0
 800f130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f134:	e7a8      	b.n	800f088 <_printf_i+0x150>
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	462a      	mov	r2, r5
 800f13a:	4649      	mov	r1, r9
 800f13c:	4640      	mov	r0, r8
 800f13e:	47d0      	blx	sl
 800f140:	3001      	adds	r0, #1
 800f142:	d0ab      	beq.n	800f09c <_printf_i+0x164>
 800f144:	6823      	ldr	r3, [r4, #0]
 800f146:	079b      	lsls	r3, r3, #30
 800f148:	d413      	bmi.n	800f172 <_printf_i+0x23a>
 800f14a:	68e0      	ldr	r0, [r4, #12]
 800f14c:	9b03      	ldr	r3, [sp, #12]
 800f14e:	4298      	cmp	r0, r3
 800f150:	bfb8      	it	lt
 800f152:	4618      	movlt	r0, r3
 800f154:	e7a4      	b.n	800f0a0 <_printf_i+0x168>
 800f156:	2301      	movs	r3, #1
 800f158:	4632      	mov	r2, r6
 800f15a:	4649      	mov	r1, r9
 800f15c:	4640      	mov	r0, r8
 800f15e:	47d0      	blx	sl
 800f160:	3001      	adds	r0, #1
 800f162:	d09b      	beq.n	800f09c <_printf_i+0x164>
 800f164:	3501      	adds	r5, #1
 800f166:	68e3      	ldr	r3, [r4, #12]
 800f168:	9903      	ldr	r1, [sp, #12]
 800f16a:	1a5b      	subs	r3, r3, r1
 800f16c:	42ab      	cmp	r3, r5
 800f16e:	dcf2      	bgt.n	800f156 <_printf_i+0x21e>
 800f170:	e7eb      	b.n	800f14a <_printf_i+0x212>
 800f172:	2500      	movs	r5, #0
 800f174:	f104 0619 	add.w	r6, r4, #25
 800f178:	e7f5      	b.n	800f166 <_printf_i+0x22e>
 800f17a:	bf00      	nop
 800f17c:	08010bfd 	.word	0x08010bfd
 800f180:	08010c0e 	.word	0x08010c0e

0800f184 <__retarget_lock_acquire_recursive>:
 800f184:	4770      	bx	lr

0800f186 <__retarget_lock_release_recursive>:
 800f186:	4770      	bx	lr

0800f188 <memcpy>:
 800f188:	440a      	add	r2, r1
 800f18a:	4291      	cmp	r1, r2
 800f18c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f190:	d100      	bne.n	800f194 <memcpy+0xc>
 800f192:	4770      	bx	lr
 800f194:	b510      	push	{r4, lr}
 800f196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f19e:	4291      	cmp	r1, r2
 800f1a0:	d1f9      	bne.n	800f196 <memcpy+0xe>
 800f1a2:	bd10      	pop	{r4, pc}

0800f1a4 <memmove>:
 800f1a4:	4288      	cmp	r0, r1
 800f1a6:	b510      	push	{r4, lr}
 800f1a8:	eb01 0402 	add.w	r4, r1, r2
 800f1ac:	d902      	bls.n	800f1b4 <memmove+0x10>
 800f1ae:	4284      	cmp	r4, r0
 800f1b0:	4623      	mov	r3, r4
 800f1b2:	d807      	bhi.n	800f1c4 <memmove+0x20>
 800f1b4:	1e43      	subs	r3, r0, #1
 800f1b6:	42a1      	cmp	r1, r4
 800f1b8:	d008      	beq.n	800f1cc <memmove+0x28>
 800f1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1c2:	e7f8      	b.n	800f1b6 <memmove+0x12>
 800f1c4:	4402      	add	r2, r0
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	428a      	cmp	r2, r1
 800f1ca:	d100      	bne.n	800f1ce <memmove+0x2a>
 800f1cc:	bd10      	pop	{r4, pc}
 800f1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1d6:	e7f7      	b.n	800f1c8 <memmove+0x24>

0800f1d8 <_realloc_r>:
 800f1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1dc:	4680      	mov	r8, r0
 800f1de:	4614      	mov	r4, r2
 800f1e0:	460e      	mov	r6, r1
 800f1e2:	b921      	cbnz	r1, 800f1ee <_realloc_r+0x16>
 800f1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e8:	4611      	mov	r1, r2
 800f1ea:	f7ff bc2b 	b.w	800ea44 <_malloc_r>
 800f1ee:	b92a      	cbnz	r2, 800f1fc <_realloc_r+0x24>
 800f1f0:	f7ff fbbc 	bl	800e96c <_free_r>
 800f1f4:	4625      	mov	r5, r4
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1fc:	f000 f81b 	bl	800f236 <_malloc_usable_size_r>
 800f200:	4284      	cmp	r4, r0
 800f202:	4607      	mov	r7, r0
 800f204:	d802      	bhi.n	800f20c <_realloc_r+0x34>
 800f206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f20a:	d812      	bhi.n	800f232 <_realloc_r+0x5a>
 800f20c:	4621      	mov	r1, r4
 800f20e:	4640      	mov	r0, r8
 800f210:	f7ff fc18 	bl	800ea44 <_malloc_r>
 800f214:	4605      	mov	r5, r0
 800f216:	2800      	cmp	r0, #0
 800f218:	d0ed      	beq.n	800f1f6 <_realloc_r+0x1e>
 800f21a:	42bc      	cmp	r4, r7
 800f21c:	4622      	mov	r2, r4
 800f21e:	4631      	mov	r1, r6
 800f220:	bf28      	it	cs
 800f222:	463a      	movcs	r2, r7
 800f224:	f7ff ffb0 	bl	800f188 <memcpy>
 800f228:	4631      	mov	r1, r6
 800f22a:	4640      	mov	r0, r8
 800f22c:	f7ff fb9e 	bl	800e96c <_free_r>
 800f230:	e7e1      	b.n	800f1f6 <_realloc_r+0x1e>
 800f232:	4635      	mov	r5, r6
 800f234:	e7df      	b.n	800f1f6 <_realloc_r+0x1e>

0800f236 <_malloc_usable_size_r>:
 800f236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f23a:	1f18      	subs	r0, r3, #4
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	bfbc      	itt	lt
 800f240:	580b      	ldrlt	r3, [r1, r0]
 800f242:	18c0      	addlt	r0, r0, r3
 800f244:	4770      	bx	lr
	...

0800f248 <_init>:
 800f248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24a:	bf00      	nop
 800f24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f24e:	bc08      	pop	{r3}
 800f250:	469e      	mov	lr, r3
 800f252:	4770      	bx	lr

0800f254 <_fini>:
 800f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f256:	bf00      	nop
 800f258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25a:	bc08      	pop	{r3}
 800f25c:	469e      	mov	lr, r3
 800f25e:	4770      	bx	lr
