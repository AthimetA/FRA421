
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  08010c5c  08010c5c  00020c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012624  08012624  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08012624  08012624  00022624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801262c  0801262c  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801262c  0801262c  0002262c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012630  08012630  00022630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  080126bc  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0801271c  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  0801277c  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  0801277c  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002641a  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a90  00000000  00000000  0005a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019e8  00000000  00000000  0005bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023ab7  00000000  00000000  0009b03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937b4  00000000  00000000  000beaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002522a6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076c0  00000000  00000000  002522f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010c44 	.word	0x08010c44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08010c44 	.word	0x08010c44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fe47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fe12 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Monster_SPS>:

void Player_Reading_Card_Monster_SPS(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3318      	adds	r3, #24
 800099e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8098 	bne.w	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	e00d      	b.n	80009e0 <Player_Reading_Card_Monster_SPS+0x6c>
			if (ptrYugiohCard_src->cardType == 1) {
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <Player_Reading_Card_Monster_SPS+0x60>
				flag_played = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80009d2:	e008      	b.n	80009e6 <Player_Reading_Card_Monster_SPS+0x72>
			}
			ptrYugiohCard_played++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3310      	adds	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <Player_Reading_Card_Monster_SPS+0x50>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e00f      	b.n	8000a14 <Player_Reading_Card_Monster_SPS+0xa0>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <Player_Reading_Card_Monster_SPS+0x94>
				flag_played = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000a06:	e008      	b.n	8000a1a <Player_Reading_Card_Monster_SPS+0xa6>
			}
			ptrYugiohCard_played++;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddec      	ble.n	80009f4 <Player_Reading_Card_Monster_SPS+0x80>
		}

		if (player->turn == first && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d85c      	bhi.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fd7c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	69b8      	ldr	r0, [r7, #24]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69f8      	ldr	r0, [r7, #28]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a82:	e034      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d12f      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d927      	bls.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fd47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f7ff fdec 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	799a      	ldrb	r2, [r3, #6]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	0899      	lsrs	r1, r3, #2
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2200      	movs	r2, #0
 8000acc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f7ff fe21 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000aec:	e7ff      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab

08000afc <Player_Reading_Card_Monster_Battle>:

void Player_Reading_Card_Monster_Battle(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3328      	adds	r3, #40	; 0x28
 8000b0c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2358      	movs	r3, #88	; 0x58
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	3328      	adds	r3, #40	; 0x28
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3318      	adds	r3, #24
 8000b26:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b2e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3308      	adds	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d17d      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e00d      	b.n	8000b66 <Player_Reading_Card_Monster_Battle+0x6a>
			if (ptrYugiohCard_src->cardType == 1 ) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <Player_Reading_Card_Monster_Battle+0x5e>
				flag_played = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b58:	e008      	b.n	8000b6c <Player_Reading_Card_Monster_Battle+0x70>
			}
			ptrYugiohCard_played++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	ddee      	ble.n	8000b4a <Player_Reading_Card_Monster_Battle+0x4e>
		}

		if (player->turn == first && flag_played == 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12f      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>
 8000b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	799b      	ldrb	r3, [r3, #6]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d85c      	bhi.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fcd3 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fd78 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	799a      	ldrb	r2, [r3, #6]
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0899      	lsrs	r1, r3, #2
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bbc:	69b8      	ldr	r0, [r7, #24]
 8000bbe:	f7ff fdad 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bd4:	e034      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d12f      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d927      	bls.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fc9e 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff fd43 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000c04:	fba3 1302 	umull	r1, r3, r3, r2
 8000c08:	0899      	lsrs	r1, r3, #2
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f7ff fd78 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c3e:	e7ff      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	aaaaaaab 	.word	0xaaaaaaab

08000c4c <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2358      	movs	r3, #88	; 0x58
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	3328      	adds	r3, #40	; 0x28
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3318      	adds	r3, #24
 8000c76:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c7e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3308      	adds	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 8088 	bne.w	8000da6 <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e017      	b.n	8000ccc <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10b      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000cbe:	e008      	b.n	8000cd2 <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	dde4      	ble.n	8000c9c <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>
 8000cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d85c      	bhi.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fc20 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fcc5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	799a      	ldrb	r2, [r3, #6]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	0899      	lsrs	r1, r3, #2
 8000d06:	460b      	mov	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff fcfa 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d3a:	e034      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12f      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d12b      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	799b      	ldrb	r3, [r3, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d927      	bls.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fbeb 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff fc90 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	799a      	ldrb	r2, [r3, #6]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0899      	lsrs	r1, r3, #2
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff fcc5 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2200      	movs	r2, #0
 8000d96:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000da4:	e7ff      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	aaaaaaab 	.word	0xaaaaaaab

08000db4 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3328      	adds	r3, #40	; 0x28
 8000dc4:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2358      	movs	r3, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3328      	adds	r3, #40	; 0x28
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000de6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d17d      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d12f      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d85c      	bhi.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fb75 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	69f8      	ldr	r0, [r7, #28]
 8000e4c:	f7ff fc1a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc4f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000e90:	e034      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d12f      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d927      	bls.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fb40 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f7ff fbe5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	799a      	ldrb	r2, [r3, #6]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	0899      	lsrs	r1, r3, #2
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee2:	6a38      	ldr	r0, [r7, #32]
 8000ee4:	f7ff fc1a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	2200      	movs	r2, #0
 8000eec:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000efa:	e7ff      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2358      	movs	r3, #88	; 0x58
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3318      	adds	r3, #24
 8000f32:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f3a:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3368      	adds	r3, #104	; 0x68
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e00f      	b.n	8000f7e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d103      	bne.n	8000f72 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000f70:	e008      	b.n	8000f84 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3310      	adds	r3, #16
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b13      	cmp	r3, #19
 8000f82:	ddec      	ble.n	8000f5e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d12f      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	799b      	ldrb	r3, [r3, #6]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d85c      	bhi.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac7 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff fb6c 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	0899      	lsrs	r1, r3, #2
 8000fb8:	460b      	mov	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f7ff fba1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000fec:	e034      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12f      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8000ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12b      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d927      	bls.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa92 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fb37 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb6c 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001056:	e7ff      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	2358      	movs	r3, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3318      	adds	r3, #24
 800108e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001096:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80cb 	bne.w	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e013      	b.n	80010dc <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80010ce:	e008      	b.n	80010e2 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dde8      	ble.n	80010b4 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d102      	bne.n	80010fc <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3368      	adds	r3, #104	; 0x68
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e00f      	b.n	8001128 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800111a:	e008      	b.n	800112e <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3310      	adds	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	3301      	adds	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b13      	cmp	r3, #19
 800112c:	ddec      	ble.n	8001108 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00f      	b.n	800115c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800114e:	e008      	b.n	8001162 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	3310      	adds	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b04      	cmp	r3, #4
 8001160:	ddec      	ble.n	800113c <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d902      	bls.n	8001170 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12f      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12b      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d85c      	bhi.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9d1 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fa76 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	799a      	ldrb	r2, [r3, #6]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0899      	lsrs	r1, r3, #2
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2201      	movs	r2, #1
 80011be:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faab 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80011d8:	e034      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12f      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 80011e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12b      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d927      	bls.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f99c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	799a      	ldrb	r2, [r3, #6]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	0899      	lsrs	r1, r3, #2
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f7ff fa76 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001242:	e7ff      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	aaaaaaab 	.word	0xaaaaaaab

08001250 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	2358      	movs	r3, #88	; 0x58
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3318      	adds	r3, #24
 800127a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001282:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80c7 	bne.w	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e00f      	b.n	80012c0 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80012b2:	e008      	b.n	80012c6 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3310      	adds	r3, #16
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	ddec      	ble.n	80012a0 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d102      	bne.n	80012d4 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3368      	adds	r3, #104	; 0x68
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	e00f      	b.n	800131a <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800130c:	e008      	b.n	8001320 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3310      	adds	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b13      	cmp	r3, #19
 800131e:	ddec      	ble.n	80012fa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	e00f      	b.n	800134e <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d103      	bne.n	8001342 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001340:	e008      	b.n	8001354 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3310      	adds	r3, #16
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	ddec      	ble.n	800132e <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12f      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>
 800135e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12b      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	799b      	ldrb	r3, [r3, #6]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d85c      	bhi.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8df 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f984 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	799a      	ldrb	r2, [r3, #6]
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	0899      	lsrs	r1, r3, #2
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80013bc:	e034      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12f      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 80013c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12b      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d927      	bls.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f8aa 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f94f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	799a      	ldrb	r2, [r3, #6]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	0899      	lsrs	r1, r3, #2
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2201      	movs	r2, #1
 800140c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800140e:	69b8      	ldr	r0, [r7, #24]
 8001410:	f7ff f984 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001426:	e7ff      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	aaaaaaab 	.word	0xaaaaaaab

08001434 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001450:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	76fb      	strb	r3, [r7, #27]
 8001456:	e00b      	b.n	8001470 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	69f9      	ldr	r1, [r7, #28]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f910 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3310      	adds	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	3301      	adds	r3, #1
 800146e:	76fb      	strb	r3, [r7, #27]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d9f0      	bls.n	8001458 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	e00b      	b.n	80014bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f8ea 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3310      	adds	r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80014b6:	7efb      	ldrb	r3, [r7, #27]
 80014b8:	3301      	adds	r3, #1
 80014ba:	76fb      	strb	r3, [r7, #27]
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d9f0      	bls.n	80014a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3368      	adds	r3, #104	; 0x68
 80014c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00b      	b.n	80014e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8d5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3310      	adds	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	3301      	adds	r3, #1
 80014e4:	76bb      	strb	r3, [r7, #26]
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	d9f0      	bls.n	80014ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80014f2:	2300      	movs	r3, #0
 80014f4:	767b      	strb	r3, [r7, #25]
 80014f6:	e00b      	b.n	8001510 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8c0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3310      	adds	r3, #16
 8001508:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	3301      	adds	r3, #1
 800150e:	767b      	strb	r3, [r7, #25]
 8001510:	7e7b      	ldrb	r3, [r7, #25]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9f0      	bls.n	80014f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f8ad 	bl	8000684 <YUGIOH_card_copy>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001540:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001548:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001550:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001558:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800155a:	2306      	movs	r3, #6
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff f88e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b10      	subs	r3, #16
 800156c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3b10      	subs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcef      	bgt.n	8001560 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001598:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80015a0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80015a8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80015b0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e02c      	b.n	8001612 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff f862 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3b02      	subs	r3, #2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b02      	subs	r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	1e50      	subs	r0, r2, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3b10      	subs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b10      	subs	r3, #16
 800160a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dccf      	bgt.n	80015b8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3368      	adds	r3, #104	; 0x68
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3368      	adds	r3, #104	; 0x68
 800164c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001654:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001656:	2314      	movs	r3, #20
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e00c      	b.n	8001676 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001660:	f7ff f810 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3b10      	subs	r3, #16
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3b10      	subs	r3, #16
 800166e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dcef      	bgt.n	800165c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3368      	adds	r3, #104	; 0x68
 8001684:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	f7fe fffb 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe fff4 	bl	8000684 <YUGIOH_card_copy>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3304      	adds	r3, #4
 80016b2:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3304      	adds	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3304      	adds	r3, #4
 80016be:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80016c6:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 80016e4:	2108      	movs	r1, #8
 80016e6:	48ad      	ldr	r0, [pc, #692]	; (800199c <GAME_PLAY_Management+0x2f8>)
 80016e8:	f009 f954 	bl	800a994 <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 80016f4:	2102      	movs	r1, #2
 80016f6:	48aa      	ldr	r0, [pc, #680]	; (80019a0 <GAME_PLAY_Management+0x2fc>)
 80016f8:	f009 f94c 	bl	800a994 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8001704:	2104      	movs	r1, #4
 8001706:	48a5      	ldr	r0, [pc, #660]	; (800199c <GAME_PLAY_Management+0x2f8>)
 8001708:	f009 f944 	bl	800a994 <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8001714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001718:	48a2      	ldr	r0, [pc, #648]	; (80019a4 <GAME_PLAY_Management+0x300>)
 800171a:	f009 f93b 	bl	800a994 <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800172c:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	3304      	adds	r3, #4
 8001732:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3304      	adds	r3, #4
 8001738:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	2b04      	cmp	r3, #4
 800173e:	f200 82c7 	bhi.w	8001cd0 <GAME_PLAY_Management+0x62c>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <GAME_PLAY_Management+0xa4>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	0800175d 	.word	0x0800175d
 800174c:	080019d9 	.word	0x080019d9
 8001750:	08001b37 	.word	0x08001b37
 8001754:	08001bb5 	.word	0x08001bb5
 8001758:	08001c5d 	.word	0x08001c5d
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800175e:	2200      	movs	r2, #0
 8001760:	9202      	str	r2, [sp, #8]
 8001762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001766:	9201      	str	r2, [sp, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a8f      	ldr	r2, [pc, #572]	; (80019ac <GAME_PLAY_Management+0x308>)
 8001770:	2105      	movs	r1, #5
 8001772:	2005      	movs	r0, #5
 8001774:	f005 f94b 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001778:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800177a:	2200      	movs	r2, #0
 800177c:	9202      	str	r2, [sp, #8]
 800177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a89      	ldr	r2, [pc, #548]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 800178c:	210f      	movs	r1, #15
 800178e:	2000      	movs	r0, #0
 8001790:	f005 f93d 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001794:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <GAME_PLAY_Management+0x310>)
 8001796:	2200      	movs	r2, #0
 8001798:	9202      	str	r2, [sp, #8]
 800179a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800179e:	9201      	str	r2, [sp, #4]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	9200      	str	r2, [sp, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <GAME_PLAY_Management+0x314>)
 80017a8:	2123      	movs	r1, #35	; 0x23
 80017aa:	2008      	movs	r0, #8
 80017ac:	f005 f92f 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80017b0:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <GAME_PLAY_Management+0x310>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	9202      	str	r2, [sp, #8]
 80017b6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80017ba:	9201      	str	r2, [sp, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7e      	ldr	r2, [pc, #504]	; (80019bc <GAME_PLAY_Management+0x318>)
 80017c4:	213c      	movs	r1, #60	; 0x3c
 80017c6:	2019      	movs	r0, #25
 80017c8:	f005 f921 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017cc:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	9202      	str	r2, [sp, #8]
 80017d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 80017e0:	214b      	movs	r1, #75	; 0x4b
 80017e2:	2000      	movs	r0, #0
 80017e4:	f005 f913 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017e8:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	9202      	str	r2, [sp, #8]
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	9201      	str	r2, [sp, #4]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a71      	ldr	r2, [pc, #452]	; (80019c0 <GAME_PLAY_Management+0x31c>)
 80017fc:	215a      	movs	r1, #90	; 0x5a
 80017fe:	2000      	movs	r0, #0
 8001800:	f005 f905 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001806:	2200      	movs	r2, #0
 8001808:	9202      	str	r2, [sp, #8]
 800180a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6b      	ldr	r2, [pc, #428]	; (80019c4 <GAME_PLAY_Management+0x320>)
 8001818:	215a      	movs	r1, #90	; 0x5a
 800181a:	205d      	movs	r0, #93	; 0x5d
 800181c:	f005 f8f7 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001820:	4b61      	ldr	r3, [pc, #388]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001822:	2200      	movs	r2, #0
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	9201      	str	r2, [sp, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <GAME_PLAY_Management+0x324>)
 8001834:	2169      	movs	r1, #105	; 0x69
 8001836:	2000      	movs	r0, #0
 8001838:	f005 f8e9 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800183c:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800183e:	2200      	movs	r2, #0
 8001840:	9202      	str	r2, [sp, #8]
 8001842:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5f      	ldr	r2, [pc, #380]	; (80019cc <GAME_PLAY_Management+0x328>)
 8001850:	2169      	movs	r1, #105	; 0x69
 8001852:	2064      	movs	r0, #100	; 0x64
 8001854:	f005 f8db 	bl	8006a0e <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800185a:	2200      	movs	r2, #0
 800185c:	9202      	str	r2, [sp, #8]
 800185e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a59      	ldr	r2, [pc, #356]	; (80019d0 <GAME_PLAY_Management+0x32c>)
 800186c:	2105      	movs	r1, #5
 800186e:	2005      	movs	r0, #5
 8001870:	f005 f917 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001876:	2200      	movs	r2, #0
 8001878:	9202      	str	r2, [sp, #8]
 800187a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187e:	9201      	str	r2, [sp, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 8001888:	210f      	movs	r1, #15
 800188a:	2000      	movs	r0, #0
 800188c:	f005 f909 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001890:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <GAME_PLAY_Management+0x310>)
 8001892:	2200      	movs	r2, #0
 8001894:	9202      	str	r2, [sp, #8]
 8001896:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800189a:	9201      	str	r2, [sp, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	9200      	str	r2, [sp, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <GAME_PLAY_Management+0x314>)
 80018a4:	2123      	movs	r1, #35	; 0x23
 80018a6:	2008      	movs	r0, #8
 80018a8:	f005 f8fb 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <GAME_PLAY_Management+0x310>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	9202      	str	r2, [sp, #8]
 80018b2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	9200      	str	r2, [sp, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3f      	ldr	r2, [pc, #252]	; (80019bc <GAME_PLAY_Management+0x318>)
 80018c0:	213c      	movs	r1, #60	; 0x3c
 80018c2:	2014      	movs	r0, #20
 80018c4:	f005 f8ed 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	9202      	str	r2, [sp, #8]
 80018ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 80018dc:	214b      	movs	r1, #75	; 0x4b
 80018de:	2000      	movs	r0, #0
 80018e0:	f005 f8df 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	9202      	str	r2, [sp, #8]
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	9200      	str	r2, [sp, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <GAME_PLAY_Management+0x31c>)
 80018f8:	215a      	movs	r1, #90	; 0x5a
 80018fa:	2000      	movs	r0, #0
 80018fc:	f005 f8d1 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001902:	2200      	movs	r2, #0
 8001904:	9202      	str	r2, [sp, #8]
 8001906:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800190a:	9201      	str	r2, [sp, #4]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <GAME_PLAY_Management+0x320>)
 8001914:	215a      	movs	r1, #90	; 0x5a
 8001916:	205d      	movs	r0, #93	; 0x5d
 8001918:	f005 f8c3 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800191e:	2200      	movs	r2, #0
 8001920:	9202      	str	r2, [sp, #8]
 8001922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001926:	9201      	str	r2, [sp, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	9200      	str	r2, [sp, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <GAME_PLAY_Management+0x324>)
 8001930:	2169      	movs	r1, #105	; 0x69
 8001932:	2000      	movs	r0, #0
 8001934:	f005 f8b5 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800193a:	2200      	movs	r2, #0
 800193c:	9202      	str	r2, [sp, #8]
 800193e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001942:	9201      	str	r2, [sp, #4]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	9200      	str	r2, [sp, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <GAME_PLAY_Management+0x328>)
 800194c:	2169      	movs	r1, #105	; 0x69
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f005 f8a7 	bl	8006aa2 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8001954:	2108      	movs	r1, #8
 8001956:	481f      	ldr	r0, [pc, #124]	; (80019d4 <GAME_PLAY_Management+0x330>)
 8001958:	f009 f81c 	bl	800a994 <HAL_GPIO_ReadPin>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10a      	bne.n	8001978 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001962:	2000      	movs	r0, #0
 8001964:	f005 faba 	bl	8006edc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001968:	2000      	movs	r0, #0
 800196a:	f005 fac8 	bl	8006efe <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8001976:	e1ab      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
			state_game->PlyerAction_State = PS_AFK;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8001998:	e19a      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
 800199a:	bf00      	nop
 800199c:	58020800 	.word	0x58020800
 80019a0:	58020400 	.word	0x58020400
 80019a4:	58021400 	.word	0x58021400
 80019a8:	2400000c 	.word	0x2400000c
 80019ac:	08010c5c 	.word	0x08010c5c
 80019b0:	08010c68 	.word	0x08010c68
 80019b4:	24000014 	.word	0x24000014
 80019b8:	08010c7c 	.word	0x08010c7c
 80019bc:	08010c88 	.word	0x08010c88
 80019c0:	08010c90 	.word	0x08010c90
 80019c4:	08010ca0 	.word	0x08010ca0
 80019c8:	08010ca8 	.word	0x08010ca8
 80019cc:	08010cb8 	.word	0x08010cb8
 80019d0:	08010cbc 	.word	0x08010cbc
 80019d4:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019d8:	4b96      	ldr	r3, [pc, #600]	; (8001c34 <GAME_PLAY_Management+0x590>)
 80019da:	2200      	movs	r2, #0
 80019dc:	9202      	str	r2, [sp, #8]
 80019de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	9200      	str	r2, [sp, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a93      	ldr	r2, [pc, #588]	; (8001c38 <GAME_PLAY_Management+0x594>)
 80019ec:	2105      	movs	r1, #5
 80019ee:	2005      	movs	r0, #5
 80019f0:	f005 f80d 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019f4:	4b8f      	ldr	r3, [pc, #572]	; (8001c34 <GAME_PLAY_Management+0x590>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	9202      	str	r2, [sp, #8]
 80019fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	9200      	str	r2, [sp, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a8d      	ldr	r2, [pc, #564]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001a08:	210f      	movs	r1, #15
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f004 ffff 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001a10:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	9202      	str	r2, [sp, #8]
 8001a16:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001a1a:	9201      	str	r2, [sp, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	9200      	str	r2, [sp, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a88      	ldr	r2, [pc, #544]	; (8001c44 <GAME_PLAY_Management+0x5a0>)
 8001a24:	2123      	movs	r1, #35	; 0x23
 8001a26:	2019      	movs	r0, #25
 8001a28:	f004 fff1 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001a2c:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	9202      	str	r2, [sp, #8]
 8001a32:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a36:	9201      	str	r2, [sp, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a82      	ldr	r2, [pc, #520]	; (8001c48 <GAME_PLAY_Management+0x5a4>)
 8001a40:	213c      	movs	r1, #60	; 0x3c
 8001a42:	2021      	movs	r0, #33	; 0x21
 8001a44:	f004 ffe3 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a48:	4b7a      	ldr	r3, [pc, #488]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	9202      	str	r2, [sp, #8]
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	9201      	str	r2, [sp, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	9200      	str	r2, [sp, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a78      	ldr	r2, [pc, #480]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001a5c:	214b      	movs	r1, #75	; 0x4b
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f004 ffd5 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	9202      	str	r2, [sp, #8]
 8001a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6e:	9201      	str	r2, [sp, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	; (8001c4c <GAME_PLAY_Management+0x5a8>)
 8001a78:	2105      	movs	r1, #5
 8001a7a:	2005      	movs	r0, #5
 8001a7c:	f005 f811 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a80:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	9202      	str	r2, [sp, #8]
 8001a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8a:	9201      	str	r2, [sp, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	9200      	str	r2, [sp, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001a94:	210f      	movs	r1, #15
 8001a96:	2000      	movs	r0, #0
 8001a98:	f005 f803 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	9202      	str	r2, [sp, #8]
 8001aa2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001aa6:	9201      	str	r2, [sp, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <GAME_PLAY_Management+0x5a0>)
 8001ab0:	2123      	movs	r1, #35	; 0x23
 8001ab2:	2019      	movs	r0, #25
 8001ab4:	f004 fff5 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001ab8:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	9202      	str	r2, [sp, #8]
 8001abe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a61      	ldr	r2, [pc, #388]	; (8001c50 <GAME_PLAY_Management+0x5ac>)
 8001acc:	213c      	movs	r1, #60	; 0x3c
 8001ace:	2025      	movs	r0, #37	; 0x25
 8001ad0:	f004 ffe7 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ad4:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	9202      	str	r2, [sp, #8]
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	9201      	str	r2, [sp, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001ae8:	214b      	movs	r1, #75	; 0x4b
 8001aea:	2000      	movs	r0, #0
 8001aec:	f004 ffd9 	bl	8006aa2 <ST7735_WriteString1>
		HAL_Delay(3000);
 8001af0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001af4:	f005 fe00 	bl	80076f8 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f005 f9ef 	bl	8006edc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f005 f9fd 	bl	8006efe <ST7735_FillScreen1>
		MainGUI();
 8001b04:	f003 fe64 	bl	80057d0 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001b0e:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001b16:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8001b18:	69f8      	ldr	r0, [r7, #28]
 8001b1a:	f7ff fcb1 	bl	8001480 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8001b1e:	69b8      	ldr	r0, [r7, #24]
 8001b20:	f7ff fcae 	bl	8001480 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8001b34:	e0cc      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
	case first_player:
		if (state_game -> F_flag == 0){
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d12b      	bne.n	8001b98 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	9202      	str	r2, [sp, #8]
 8001b46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001b4a:	9201      	str	r2, [sp, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <GAME_PLAY_Management+0x5b0>)
 8001b54:	215a      	movs	r1, #90	; 0x5a
 8001b56:	200f      	movs	r0, #15
 8001b58:	f004 ffa3 	bl	8006aa2 <ST7735_WriteString1>
			HAL_Delay(2000);
 8001b5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b60:	f005 fdca 	bl	80076f8 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2326      	movs	r3, #38	; 0x26
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	215a      	movs	r1, #90	; 0x5a
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f005 f8b6 	bl	8006ce0 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001b96:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001ba4:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f899 	bl	8001ce4 <GAME_PLAY_Phase_Management>
		break;
 8001bb2:	e08d      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
	case second_player:
		if (state_game -> S_flag == 0){
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d12b      	bne.n	8001c16 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	9202      	str	r2, [sp, #8]
 8001bc4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <GAME_PLAY_Management+0x5b0>)
 8001bd2:	215a      	movs	r1, #90	; 0x5a
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	f004 ff1a 	bl	8006a0e <ST7735_WriteString>
			HAL_Delay(2000);
 8001bda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bde:	f005 fd8b 	bl	80076f8 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8001be2:	2300      	movs	r3, #0
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2326      	movs	r3, #38	; 0x26
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	215a      	movs	r1, #90	; 0x5a
 8001bec:	2000      	movs	r0, #0
 8001bee:	f005 f803 	bl	8006bf8 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001c14:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001c1c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f85a 	bl	8001ce4 <GAME_PLAY_Phase_Management>
		break;
 8001c30:	e04e      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
 8001c32:	bf00      	nop
 8001c34:	2400000c 	.word	0x2400000c
 8001c38:	08010c5c 	.word	0x08010c5c
 8001c3c:	08010c68 	.word	0x08010c68
 8001c40:	24000014 	.word	0x24000014
 8001c44:	08010cc8 	.word	0x08010cc8
 8001c48:	08010cd0 	.word	0x08010cd0
 8001c4c:	08010cbc 	.word	0x08010cbc
 8001c50:	08010cd8 	.word	0x08010cd8
 8001c54:	08010ce0 	.word	0x08010ce0
 8001c58:	24000176 	.word	0x24000176
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2326      	movs	r3, #38	; 0x26
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	215a      	movs	r1, #90	; 0x5a
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f005 f8ac 	bl	8006dc8 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2326      	movs	r3, #38	; 0x26
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	215a      	movs	r1, #90	; 0x5a
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f005 f8a2 	bl	8006dc8 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8001c84:	20c8      	movs	r0, #200	; 0xc8
 8001c86:	f005 fd37 	bl	80076f8 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <GAME_PLAY_Management+0x634>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	9203      	str	r2, [sp, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	9202      	str	r2, [sp, #8]
 8001c94:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001c98:	9201      	str	r2, [sp, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	9200      	str	r2, [sp, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <GAME_PLAY_Management+0x638>)
 8001ca2:	215a      	movs	r1, #90	; 0x5a
 8001ca4:	2014      	movs	r0, #20
 8001ca6:	f004 ff46 	bl	8006b36 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <GAME_PLAY_Management+0x634>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	9203      	str	r2, [sp, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	221f      	movs	r2, #31
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	9200      	str	r2, [sp, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <GAME_PLAY_Management+0x63c>)
 8001cc0:	215a      	movs	r1, #90	; 0x5a
 8001cc2:	200f      	movs	r0, #15
 8001cc4:	f004 ff37 	bl	8006b36 <ST7735_WriteStringNSS>
		HAL_Delay(200);
 8001cc8:	20c8      	movs	r0, #200	; 0xc8
 8001cca:	f005 fd15 	bl	80076f8 <HAL_Delay>
		break;
 8001cce:	bf00      	nop
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	24000014 	.word	0x24000014
 8001cdc:	08010cec 	.word	0x08010cec
 8001ce0:	08010cf4 	.word	0x08010cf4

08001ce4 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8001cea:	af04      	add	r7, sp, #16
 8001cec:	f507 7418 	add.w	r4, r7, #608	; 0x260
 8001cf0:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 8001cf4:	6020      	str	r0, [r4, #0]
 8001cf6:	f507 7018 	add.w	r0, r7, #608	; 0x260
 8001cfa:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 8001cfe:	6001      	str	r1, [r0, #0]
 8001d00:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8001d04:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8001d08:	600a      	str	r2, [r1, #0]
 8001d0a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001d0e:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8001d12:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8001d14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d18:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001d22:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001d26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d2a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8001d34:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8001d38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d3c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001d46:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 8001d4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d4e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d52:	4618      	mov	r0, r3
 8001d54:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f00e fafc 	bl	8010358 <memset>

	switch (PAS) {
 8001d60:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	f203 8314 	bhi.w	8005392 <GAME_PLAY_Phase_Management+0x36ae>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <GAME_PLAY_Phase_Management+0x8c>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08005385 	.word	0x08005385
 8001d74:	08001d81 	.word	0x08001d81
 8001d78:	08001ed9 	.word	0x08001ed9
 8001d7c:	08003f2f 	.word	0x08003f2f
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 8001d80:	48b5      	ldr	r0, [pc, #724]	; (8002058 <GAME_PLAY_Phase_Management+0x374>)
 8001d82:	f00b ff8d 	bl	800dca0 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 8001d86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d8a:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8001d8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001d96:	6811      	ldr	r1, [r2, #0]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	f003 fdd9 	bl	8005950 <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001d9e:	4baf      	ldr	r3, [pc, #700]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	9200      	str	r2, [sp, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4aab      	ldr	r2, [pc, #684]	; (8002060 <GAME_PLAY_Phase_Management+0x37c>)
 8001db2:	2123      	movs	r1, #35	; 0x23
 8001db4:	206e      	movs	r0, #110	; 0x6e
 8001db6:	f004 fe2a 	bl	8006a0e <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001dba:	4ba8      	ldr	r3, [pc, #672]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	9202      	str	r2, [sp, #8]
 8001dc0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001dc4:	9201      	str	r2, [sp, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4aa4      	ldr	r2, [pc, #656]	; (8002060 <GAME_PLAY_Phase_Management+0x37c>)
 8001dce:	2123      	movs	r1, #35	; 0x23
 8001dd0:	206e      	movs	r0, #110	; 0x6e
 8001dd2:	f004 fe66 	bl	8006aa2 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001dd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001dda:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	4b9e      	ldr	r3, [pc, #632]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001de4:	9203      	str	r2, [sp, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	9202      	str	r2, [sp, #8]
 8001dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dee:	9201      	str	r2, [sp, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a9b      	ldr	r2, [pc, #620]	; (8002064 <GAME_PLAY_Phase_Management+0x380>)
 8001df8:	215a      	movs	r1, #90	; 0x5a
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	f004 fe9b 	bl	8006b36 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001e00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e04:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	4b93      	ldr	r3, [pc, #588]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001e0e:	9203      	str	r2, [sp, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	9202      	str	r2, [sp, #8]
 8001e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e18:	9201      	str	r2, [sp, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	9200      	str	r2, [sp, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a91      	ldr	r2, [pc, #580]	; (8002068 <GAME_PLAY_Phase_Management+0x384>)
 8001e22:	215a      	movs	r1, #90	; 0x5a
 8001e24:	2005      	movs	r0, #5
 8001e26:	f004 fe86 	bl	8006b36 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	488f      	ldr	r0, [pc, #572]	; (800206c <GAME_PLAY_Phase_Management+0x388>)
 8001e2e:	f008 fdb1 	bl	800a994 <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f043 82a7 	bne.w	8005388 <GAME_PLAY_Phase_Management+0x36a4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f005 f84e 	bl	8006edc <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f005 f85c 	bl	8006efe <ST7735_FillScreen1>
			MainGUI();
 8001e46:	f003 fcc3 	bl	80057d0 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8001e4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001e5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001e6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8001e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7c:	f005 fc3c 	bl	80076f8 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e84:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	4b73      	ldr	r3, [pc, #460]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001e8e:	9203      	str	r2, [sp, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	9202      	str	r2, [sp, #8]
 8001e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e98:	9201      	str	r2, [sp, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	9200      	str	r2, [sp, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a70      	ldr	r2, [pc, #448]	; (8002064 <GAME_PLAY_Phase_Management+0x380>)
 8001ea2:	215a      	movs	r1, #90	; 0x5a
 8001ea4:	2005      	movs	r0, #5
 8001ea6:	f004 fe46 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001eaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001eae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	4b69      	ldr	r3, [pc, #420]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001eb8:	9203      	str	r2, [sp, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	9202      	str	r2, [sp, #8]
 8001ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec2:	9201      	str	r2, [sp, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	9200      	str	r2, [sp, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <GAME_PLAY_Phase_Management+0x38c>)
 8001ecc:	215a      	movs	r1, #90	; 0x5a
 8001ece:	2005      	movs	r0, #5
 8001ed0:	f004 fe31 	bl	8006b36 <ST7735_WriteStringNSS>
		}
		break;
 8001ed4:	f003 ba58 	b.w	8005388 <GAME_PLAY_Phase_Management+0x36a4>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8001ed8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001edc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8001ee0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ee4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001ee8:	6811      	ldr	r1, [r2, #0]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	f003 fd30 	bl	8005950 <LCDvalue>

		switch (PMS)
 8001ef0:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	f203 8249 	bhi.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <GAME_PLAY_Phase_Management+0x21c>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08003f05 	.word	0x08003f05
 8001f04:	08001f21 	.word	0x08001f21
 8001f08:	080020d5 	.word	0x080020d5
 8001f0c:	0800223f 	.word	0x0800223f
 8001f10:	080027c5 	.word	0x080027c5
 8001f14:	08002ed9 	.word	0x08002ed9
 8001f18:	08002cc9 	.word	0x08002cc9
 8001f1c:	08002aa9 	.word	0x08002aa9
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8001f20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 80a7 	bne.w	8002080 <GAME_PLAY_Phase_Management+0x39c>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	9202      	str	r2, [sp, #8]
 8001f38:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f3c:	9201      	str	r2, [sp, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	9200      	str	r2, [sp, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <GAME_PLAY_Phase_Management+0x390>)
 8001f46:	2123      	movs	r1, #35	; 0x23
 8001f48:	206e      	movs	r0, #110	; 0x6e
 8001f4a:	f004 fd60 	bl	8006a0e <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	9202      	str	r2, [sp, #8]
 8001f54:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f58:	9201      	str	r2, [sp, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a44      	ldr	r2, [pc, #272]	; (8002074 <GAME_PLAY_Phase_Management+0x390>)
 8001f62:	2123      	movs	r1, #35	; 0x23
 8001f64:	206e      	movs	r0, #110	; 0x6e
 8001f66:	f004 fd9c 	bl	8006aa2 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	483f      	ldr	r0, [pc, #252]	; (800206c <GAME_PLAY_Phase_Management+0x388>)
 8001f6e:	f008 fd11 	bl	800a994 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d15b      	bne.n	8002030 <GAME_PLAY_Phase_Management+0x34c>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f004 ffaf 	bl	8006edc <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f004 ffbd 	bl	8006efe <ST7735_FillScreen1>
					MainGUI();
 8001f84:	f003 fc24 	bl	80057d0 <MainGUI>
					state_game->action = 50;
 8001f88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2232      	movs	r2, #50	; 0x32
 8001f94:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001f96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 8001fa6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001faa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	f003 fbed 	bl	800578e <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 8001fb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fb8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 8001fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd8:	f005 fb8e 	bl	80076f8 <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001fdc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fe0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001fea:	9203      	str	r2, [sp, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	9202      	str	r2, [sp, #8]
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	9201      	str	r2, [sp, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <GAME_PLAY_Phase_Management+0x394>)
 8001ffe:	215a      	movs	r1, #90	; 0x5a
 8002000:	2005      	movs	r0, #5
 8002002:	f004 fd98 	bl	8006b36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8002006:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800200a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8002014:	9203      	str	r2, [sp, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	9202      	str	r2, [sp, #8]
 800201a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201e:	9201      	str	r2, [sp, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	9200      	str	r2, [sp, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <GAME_PLAY_Phase_Management+0x398>)
 8002028:	215a      	movs	r1, #90	; 0x5a
 800202a:	2005      	movs	r0, #5
 800202c:	f004 fd83 	bl	8006b36 <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002030:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002034:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002038:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800203c:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002040:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002044:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6809      	ldr	r1, [r1, #0]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f7fe fb81 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8002052:	f001 bf5a 	b.w	8003f0a <GAME_PLAY_Phase_Management+0x2226>
 8002056:	bf00      	nop
 8002058:	240002e8 	.word	0x240002e8
 800205c:	2400000c 	.word	0x2400000c
 8002060:	08010d00 	.word	0x08010d00
 8002064:	08010d04 	.word	0x08010d04
 8002068:	08010d14 	.word	0x08010d14
 800206c:	58020800 	.word	0x58020800
 8002070:	08010d20 	.word	0x08010d20
 8002074:	08010d30 	.word	0x08010d30
 8002078:	08010d34 	.word	0x08010d34
 800207c:	08010d44 	.word	0x08010d44
			else if (state_game->action == 1)
 8002080:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002084:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	f041 873c 	bne.w	8003f0a <GAME_PLAY_Phase_Management+0x2226>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002092:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002096:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2326      	movs	r3, #38	; 0x26
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	215a      	movs	r1, #90	; 0x5a
 80020aa:	2000      	movs	r0, #0
 80020ac:	f004 fe8c 	bl	8006dc8 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 80020b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 80020c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80020d0:	f001 bf1b 	b.w	8003f0a <GAME_PLAY_Phase_Management+0x2226>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80020d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	4ba6      	ldr	r3, [pc, #664]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 80020e2:	9203      	str	r2, [sp, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	9202      	str	r2, [sp, #8]
 80020e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ec:	9201      	str	r2, [sp, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	9200      	str	r2, [sp, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4aa2      	ldr	r2, [pc, #648]	; (8002380 <GAME_PLAY_Phase_Management+0x69c>)
 80020f6:	215a      	movs	r1, #90	; 0x5a
 80020f8:	2005      	movs	r0, #5
 80020fa:	f004 fd1c 	bl	8006b36 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80020fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002102:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800210c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002110:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002114:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800211e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8002122:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002126:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d147      	bne.n	80021c2 <GAME_PLAY_Phase_Management+0x4de>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8002132:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002136:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	789b      	ldrb	r3, [r3, #2]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <GAME_PLAY_Phase_Management+0x478>
					ptrYugiohCard_src->cardState = 0;
 8002142:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002146:	2200      	movs	r2, #0
 8002148:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 800214a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800214e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8002158:	f001 beda 	b.w	8003f10 <GAME_PLAY_Phase_Management+0x222c>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 800215c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002160:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f041 86d1 	bne.w	8003f10 <GAME_PLAY_Phase_Management+0x222c>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 800216e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002172:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002176:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	f003 faba 	bl	80056f4 <YUGIOH_Check_Spell_On_board>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8002186:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d00c      	beq.n	80021a8 <GAME_PLAY_Phase_Management+0x4c4>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 800218e:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002192:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002196:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	3308      	adds	r3, #8
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe faa5 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 80021a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80021ac:	2201      	movs	r2, #1
 80021ae:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 80021b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2202      	movs	r2, #2
 80021bc:	701a      	strb	r2, [r3, #0]
			break;
 80021be:	f001 bea7 	b.w	8003f10 <GAME_PLAY_Phase_Management+0x222c>
			else if (state_game->action == 2)
 80021c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	f041 869e 	bne.w	8003f10 <GAME_PLAY_Phase_Management+0x222c>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80021d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2326      	movs	r3, #38	; 0x26
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	215a      	movs	r1, #90	; 0x5a
 80021ec:	2000      	movs	r0, #0
 80021ee:	f004 fdeb 	bl	8006dc8 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80021f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021f6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2326      	movs	r3, #38	; 0x26
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	215a      	movs	r1, #90	; 0x5a
 800220a:	2000      	movs	r0, #0
 800220c:	f004 fddc 	bl	8006dc8 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002210:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002214:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002218:	f7fe fa34 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 800221c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002220:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2203      	movs	r2, #3
 8002228:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 800222a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800222e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800223a:	f001 be69 	b.w	8003f10 <GAME_PLAY_Phase_Management+0x222c>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 800223e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002242:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800224c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8002250:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002254:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	f041 865a 	bne.w	8003f16 <GAME_PLAY_Phase_Management+0x2232>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8002262:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2b03      	cmp	r3, #3
 800226a:	f040 8093 	bne.w	8002394 <GAME_PLAY_Phase_Management+0x6b0>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800226e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002272:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b40      	ldr	r3, [pc, #256]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 800227c:	9203      	str	r2, [sp, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	9202      	str	r2, [sp, #8]
 8002282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <GAME_PLAY_Phase_Management+0x6a0>)
 8002290:	215a      	movs	r1, #90	; 0x5a
 8002292:	2005      	movs	r0, #5
 8002294:	f004 fc4f 	bl	8006b36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002298:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800229c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 80022a6:	9203      	str	r2, [sp, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	9202      	str	r2, [sp, #8]
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	9200      	str	r2, [sp, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a33      	ldr	r2, [pc, #204]	; (8002388 <GAME_PLAY_Phase_Management+0x6a4>)
 80022ba:	215a      	movs	r1, #90	; 0x5a
 80022bc:	2005      	movs	r0, #5
 80022be:	f004 fc3a 	bl	8006b36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80022c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80022c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 80022d0:	9203      	str	r2, [sp, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <GAME_PLAY_Phase_Management+0x6a8>)
 80022e4:	2169      	movs	r1, #105	; 0x69
 80022e6:	2005      	movs	r0, #5
 80022e8:	f004 fc25 	bl	8006b36 <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 80022ec:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80022f0:	2200      	movs	r2, #0
 80022f2:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80022f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80022f8:	799a      	ldrb	r2, [r3, #6]
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <GAME_PLAY_Phase_Management+0x6ac>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	0899      	lsrs	r1, r3, #2
 8002302:	460b      	mov	r3, r1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	440b      	add	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002310:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8002314:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002318:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	3308      	adds	r3, #8
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002328:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800232c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002330:	f7fe f9a8 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002334:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002338:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	f7ff f879 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002342:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002346:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002350:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f995 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 800235a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800235e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002368:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800236c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8002378:	f001 bdcd 	b.w	8003f16 <GAME_PLAY_Phase_Management+0x2232>
 800237c:	2400000c 	.word	0x2400000c
 8002380:	08010d54 	.word	0x08010d54
 8002384:	08010d64 	.word	0x08010d64
 8002388:	08010d74 	.word	0x08010d74
 800238c:	08010d84 	.word	0x08010d84
 8002390:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 2)
 8002394:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 8146 	bne.w	800262c <GAME_PLAY_Phase_Management+0x948>
					state_game->count_chain = 1;
 80023a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 80023ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	f040 80a7 	bne.w	8002508 <GAME_PLAY_Phase_Management+0x824>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80023ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b92      	ldr	r3, [pc, #584]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 80023c8:	9203      	str	r2, [sp, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	9202      	str	r2, [sp, #8]
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	9201      	str	r2, [sp, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	9200      	str	r2, [sp, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a8e      	ldr	r2, [pc, #568]	; (8002614 <GAME_PLAY_Phase_Management+0x930>)
 80023dc:	215a      	movs	r1, #90	; 0x5a
 80023de:	2005      	movs	r0, #5
 80023e0:	f004 fba9 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80023e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023e8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	4b87      	ldr	r3, [pc, #540]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 80023f2:	9203      	str	r2, [sp, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	9202      	str	r2, [sp, #8]
 80023f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	9200      	str	r2, [sp, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a84      	ldr	r2, [pc, #528]	; (8002618 <GAME_PLAY_Phase_Management+0x934>)
 8002406:	215a      	movs	r1, #90	; 0x5a
 8002408:	2005      	movs	r0, #5
 800240a:	f004 fb94 	bl	8006b36 <ST7735_WriteStringNSS>
						state_game->action = 4;
 800240e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002412:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2204      	movs	r2, #4
 800241a:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800241c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002420:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f7ff f8b0 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800242a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800242e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002438:	4619      	mov	r1, r3
 800243a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800243e:	f7fe f921 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8002442:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002446:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002450:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 800245a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800245e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002468:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002472:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002476:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002480:	3301      	adds	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002488:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002492:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002496:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2300      	movs	r3, #0
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2326      	movs	r3, #38	; 0x26
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	215a      	movs	r1, #90	; 0x5a
 80024aa:	2000      	movs	r0, #0
 80024ac:	f004 fc8c 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80024b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024b4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	2300      	movs	r3, #0
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2326      	movs	r3, #38	; 0x26
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	215a      	movs	r1, #90	; 0x5a
 80024c8:	2000      	movs	r0, #0
 80024ca:	f004 fc7d 	bl	8006dc8 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80024ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f7fe ffac 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80024dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80024ea:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f8c8 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 80024f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2207      	movs	r2, #7
 8002500:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002504:	f001 bd07 	b.w	8003f16 <GAME_PLAY_Phase_Management+0x2232>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002508:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800250c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 8002516:	9203      	str	r2, [sp, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	9202      	str	r2, [sp, #8]
 800251c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	9200      	str	r2, [sp, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3c      	ldr	r2, [pc, #240]	; (800261c <GAME_PLAY_Phase_Management+0x938>)
 800252a:	215a      	movs	r1, #90	; 0x5a
 800252c:	2005      	movs	r0, #5
 800252e:	f004 fb02 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002532:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002536:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 8002540:	9203      	str	r2, [sp, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	9202      	str	r2, [sp, #8]
 8002546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254a:	9201      	str	r2, [sp, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	9200      	str	r2, [sp, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <GAME_PLAY_Phase_Management+0x93c>)
 8002554:	215a      	movs	r1, #90	; 0x5a
 8002556:	2005      	movs	r0, #5
 8002558:	f004 faed 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800255c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002560:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 800256a:	9203      	str	r2, [sp, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002574:	9201      	str	r2, [sp, #4]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <GAME_PLAY_Phase_Management+0x940>)
 800257e:	2169      	movs	r1, #105	; 0x69
 8002580:	2005      	movs	r0, #5
 8002582:	f004 fad8 	bl	8006b36 <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002586:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800258a:	799a      	ldrb	r2, [r3, #6]
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <GAME_PLAY_Phase_Management+0x944>)
 800258e:	fba3 1302 	umull	r1, r3, r3, r2
 8002592:	0899      	lsrs	r1, r3, #2
 8002594:	460b      	mov	r3, r1
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	440b      	add	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80025a2:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 80025a6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80025aa:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3308      	adds	r3, #8
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80025ba:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80025be:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80025c2:	f7fe f85f 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80025c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f7fe ff30 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80025d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025e2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe f84c 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80025ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80025fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800260a:	f001 bc84 	b.w	8003f16 <GAME_PLAY_Phase_Management+0x2232>
 800260e:	bf00      	nop
 8002610:	2400000c 	.word	0x2400000c
 8002614:	08010d8c 	.word	0x08010d8c
 8002618:	08010da4 	.word	0x08010da4
 800261c:	08010d64 	.word	0x08010d64
 8002620:	08010d74 	.word	0x08010d74
 8002624:	08010d84 	.word	0x08010d84
 8002628:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 800262c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b01      	cmp	r3, #1
 8002634:	f041 846f 	bne.w	8003f16 <GAME_PLAY_Phase_Management+0x2232>
					state_game->test = 2;
 8002638:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800263c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 8002648:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800264c:	78db      	ldrb	r3, [r3, #3]
 800264e:	2b06      	cmp	r3, #6
 8002650:	f200 80a0 	bhi.w	8002794 <GAME_PLAY_Phase_Management+0xab0>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002654:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002658:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	4b8b      	ldr	r3, [pc, #556]	; (8002890 <GAME_PLAY_Phase_Management+0xbac>)
 8002662:	9203      	str	r2, [sp, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	9202      	str	r2, [sp, #8]
 8002668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800266c:	9201      	str	r2, [sp, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	9200      	str	r2, [sp, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a87      	ldr	r2, [pc, #540]	; (8002894 <GAME_PLAY_Phase_Management+0xbb0>)
 8002676:	215a      	movs	r1, #90	; 0x5a
 8002678:	2005      	movs	r0, #5
 800267a:	f004 fa5c 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800267e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002682:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	4b81      	ldr	r3, [pc, #516]	; (8002890 <GAME_PLAY_Phase_Management+0xbac>)
 800268c:	9203      	str	r2, [sp, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	9202      	str	r2, [sp, #8]
 8002692:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002696:	9201      	str	r2, [sp, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	9200      	str	r2, [sp, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7e      	ldr	r2, [pc, #504]	; (8002898 <GAME_PLAY_Phase_Management+0xbb4>)
 80026a0:	2169      	movs	r1, #105	; 0x69
 80026a2:	2005      	movs	r0, #5
 80026a4:	f004 fa47 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80026a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <GAME_PLAY_Phase_Management+0xbac>)
 80026b6:	9203      	str	r2, [sp, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	9202      	str	r2, [sp, #8]
 80026bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c0:	9201      	str	r2, [sp, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	9200      	str	r2, [sp, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a74      	ldr	r2, [pc, #464]	; (800289c <GAME_PLAY_Phase_Management+0xbb8>)
 80026ca:	215a      	movs	r1, #90	; 0x5a
 80026cc:	2005      	movs	r0, #5
 80026ce:	f004 fa32 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80026d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026d6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <GAME_PLAY_Phase_Management+0xbac>)
 80026e0:	9203      	str	r2, [sp, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	9202      	str	r2, [sp, #8]
 80026e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026ea:	9201      	str	r2, [sp, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	9200      	str	r2, [sp, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a69      	ldr	r2, [pc, #420]	; (8002898 <GAME_PLAY_Phase_Management+0xbb4>)
 80026f4:	2169      	movs	r1, #105	; 0x69
 80026f6:	2005      	movs	r0, #5
 80026f8:	f004 fa1d 	bl	8006b36 <ST7735_WriteStringNSS>
						state_game->test = 1;
 80026fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002700:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800270c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002710:	799a      	ldrb	r2, [r3, #6]
 8002712:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <GAME_PLAY_Phase_Management+0xbbc>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	0899      	lsrs	r1, r3, #2
 800271a:	460b      	mov	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	440b      	add	r3, r1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002728:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 800272c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002730:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	3308      	adds	r3, #8
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	4413      	add	r3, r2
 800273c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002740:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002744:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002748:	f7fd ff9c 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800274c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002750:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f7fe fe6d 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800275a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800275e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002768:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd ff89 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8002772:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002776:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002780:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002784:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002790:	f001 bbc1 	b.w	8003f16 <GAME_PLAY_Phase_Management+0x2232>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002794:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002798:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	f7fe fe49 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80027a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 80027b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2204      	movs	r2, #4
 80027bc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80027c0:	f001 bba9 	b.w	8003f16 <GAME_PLAY_Phase_Management+0x2232>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80027c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (playerAtk->noBTN == GPIO_PIN_RESET)
 80027d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	789b      	ldrb	r3, [r3, #2]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11f      	bne.n	8002826 <GAME_PLAY_Phase_Management+0xb42>
			{
				state_game->action = 0;
 80027e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80027f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002804:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002808:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	f7fe fe11 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_clear(&playerAtk->CardInPlayed);
 8002812:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002816:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd ff66 	bl	80006f2 <YUGIOH_card_clear>
			}

			if (state_game->action == 4)
 8002826:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800282a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d111      	bne.n	800285a <GAME_PLAY_Phase_Management+0xb76>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 8002836:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800283a:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800283e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002842:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002846:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800284a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	6809      	ldr	r1, [r1, #0]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	f7fe f88e 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 8002858:	e0d0      	b.n	80029fc <GAME_PLAY_Phase_Management+0xd18>
			}
			else if (state_game->action == 5)
 800285a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800285e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d11c      	bne.n	80028a4 <GAME_PLAY_Phase_Management+0xbc0>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 800286a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800286e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002872:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002876:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800287a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800287e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	6809      	ldr	r1, [r1, #0]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	f7fe f874 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 800288c:	e0b6      	b.n	80029fc <GAME_PLAY_Phase_Management+0xd18>
 800288e:	bf00      	nop
 8002890:	2400000c 	.word	0x2400000c
 8002894:	08010db8 	.word	0x08010db8
 8002898:	08010dc4 	.word	0x08010dc4
 800289c:	08010dd0 	.word	0x08010dd0
 80028a0:	aaaaaaab 	.word	0xaaaaaaab
			}
			else if (state_game->action == 6)
 80028a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	f040 80a3 	bne.w	80029fc <GAME_PLAY_Phase_Management+0xd18>
			{
				uint8_t monsterflag = 0 ;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 80028bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80028ca:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80028ce:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d804      	bhi.n	80028e2 <GAME_PLAY_Phase_Management+0xbfe>
				{
					monsterflag += 1;
 80028d8:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80028dc:	3301      	adds	r3, #1
 80028de:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}
				ptrYugiohCard_dst++;
 80028e2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80028e6:	3310      	adds	r3, #16
 80028e8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80028ec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80028f0:	78db      	ldrb	r3, [r3, #3]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d804      	bhi.n	8002900 <GAME_PLAY_Phase_Management+0xc1c>
				{
					monsterflag += 1;
 80028f6:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80028fa:	3301      	adds	r3, #1
 80028fc:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}

				if (monsterflag == 2)
 8002900:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8002904:	2b02      	cmp	r3, #2
 8002906:	d160      	bne.n	80029ca <GAME_PLAY_Phase_Management+0xce6>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002908:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800290c:	799a      	ldrb	r2, [r3, #6]
 800290e:	4b9c      	ldr	r3, [pc, #624]	; (8002b80 <GAME_PLAY_Phase_Management+0xe9c>)
 8002910:	fba3 1302 	umull	r1, r3, r3, r2
 8002914:	0899      	lsrs	r1, r3, #2
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002924:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 8002928:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800292c:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	3308      	adds	r3, #8
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4413      	add	r3, r2
 8002938:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800293c:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002940:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002944:	f7fd fe9e 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 8002948:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800294c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8002956:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800295a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800295e:	4611      	mov	r1, r2
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	f7fe fe5e 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8002966:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800296a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8002974:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002978:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800297c:	4611      	mov	r1, r2
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	f7fe fe4f 	bl	8001622 <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002984:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002988:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	f7fe fd51 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002992:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002996:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80029a0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fe6d 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80029aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80029b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80029c8:	e018      	b.n	80029fc <GAME_PLAY_Phase_Management+0xd18>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80029ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	f7fe fd2e 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 80029d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029dc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80029e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f7fd fe44 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80029fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a00:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <GAME_PLAY_Phase_Management+0xea0>)
 8002a0a:	9203      	str	r2, [sp, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	9202      	str	r2, [sp, #8]
 8002a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a14:	9201      	str	r2, [sp, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	9200      	str	r2, [sp, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5a      	ldr	r2, [pc, #360]	; (8002b88 <GAME_PLAY_Phase_Management+0xea4>)
 8002a1e:	215a      	movs	r1, #90	; 0x5a
 8002a20:	2005      	movs	r0, #5
 8002a22:	f004 f888 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8002a26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <GAME_PLAY_Phase_Management+0xea0>)
 8002a34:	9203      	str	r2, [sp, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	9202      	str	r2, [sp, #8]
 8002a3a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002a3e:	9201      	str	r2, [sp, #4]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	9200      	str	r2, [sp, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <GAME_PLAY_Phase_Management+0xea8>)
 8002a48:	2169      	movs	r1, #105	; 0x69
 8002a4a:	2005      	movs	r0, #5
 8002a4c:	f004 f873 	bl	8006b36 <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002a50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a54:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <GAME_PLAY_Phase_Management+0xea0>)
 8002a5e:	9203      	str	r2, [sp, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	9202      	str	r2, [sp, #8]
 8002a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a68:	9201      	str	r2, [sp, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	9200      	str	r2, [sp, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a47      	ldr	r2, [pc, #284]	; (8002b90 <GAME_PLAY_Phase_Management+0xeac>)
 8002a72:	215a      	movs	r1, #90	; 0x5a
 8002a74:	2005      	movs	r0, #5
 8002a76:	f004 f85e 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8002a7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a7e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <GAME_PLAY_Phase_Management+0xea0>)
 8002a88:	9203      	str	r2, [sp, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	9202      	str	r2, [sp, #8]
 8002a8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002a92:	9201      	str	r2, [sp, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	9200      	str	r2, [sp, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3c      	ldr	r2, [pc, #240]	; (8002b8c <GAME_PLAY_Phase_Management+0xea8>)
 8002a9c:	2169      	movs	r1, #105	; 0x69
 8002a9e:	2005      	movs	r0, #5
 8002aa0:	f004 f849 	bl	8006b36 <ST7735_WriteStringNSS>
			break;
 8002aa4:	f001 ba41 	b.w	8003f2a <GAME_PLAY_Phase_Management+0x2246>
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002aa8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <GAME_PLAY_Phase_Management+0xea0>)
 8002ab6:	9203      	str	r2, [sp, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	9202      	str	r2, [sp, #8]
 8002abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac0:	9201      	str	r2, [sp, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	9200      	str	r2, [sp, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <GAME_PLAY_Phase_Management+0xeb0>)
 8002aca:	215a      	movs	r1, #90	; 0x5a
 8002acc:	2005      	movs	r0, #5
 8002ace:	f004 f832 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002ad2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ad6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <GAME_PLAY_Phase_Management+0xea0>)
 8002ae0:	9203      	str	r2, [sp, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	9202      	str	r2, [sp, #8]
 8002ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aea:	9201      	str	r2, [sp, #4]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	9200      	str	r2, [sp, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <GAME_PLAY_Phase_Management+0xeb4>)
 8002af4:	215a      	movs	r1, #90	; 0x5a
 8002af6:	2005      	movs	r0, #5
 8002af8:	f004 f81d 	bl	8006b36 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8002afc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b00:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d147      	bne.n	8002b9c <GAME_PLAY_Phase_Management+0xeb8>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8002b0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b10:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	789b      	ldrb	r3, [r3, #2]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11d      	bne.n	8002b58 <GAME_PLAY_Phase_Management+0xe74>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002b1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b20:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2326      	movs	r3, #38	; 0x26
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	215a      	movs	r1, #90	; 0x5a
 8002b34:	2000      	movs	r0, #0
 8002b36:	f004 f947 	bl	8006dc8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002b3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2205      	movs	r2, #5
 8002b46:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8002b4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8002b58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b5c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8002b60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b64:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002b68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b6c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	6809      	ldr	r1, [r1, #0]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	f7fe f869 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002b7a:	f001 b9cf 	b.w	8003f1c <GAME_PLAY_Phase_Management+0x2238>
 8002b7e:	bf00      	nop
 8002b80:	aaaaaaab 	.word	0xaaaaaaab
 8002b84:	2400000c 	.word	0x2400000c
 8002b88:	08010db8 	.word	0x08010db8
 8002b8c:	08010dc4 	.word	0x08010dc4
 8002b90:	08010dd0 	.word	0x08010dd0
 8002b94:	08010de0 	.word	0x08010de0
 8002b98:	08010df8 	.word	0x08010df8
			else if ((state_game->action == 5 )){
 8002b9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ba0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	f041 81b7 	bne.w	8003f1c <GAME_PLAY_Phase_Management+0x2238>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002bae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2326      	movs	r3, #38	; 0x26
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	215a      	movs	r1, #90	; 0x5a
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f004 f8fe 	bl	8006dc8 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8002bcc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bd0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002bda:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8002bde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002be2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002be6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	f002 fd56 	bl	800569c <YUGIOH_Check_Trap_On_board>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 8002bf6:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002bfa:	2bff      	cmp	r3, #255	; 0xff
 8002bfc:	d05b      	beq.n	8002cb6 <GAME_PLAY_Phase_Management+0xfd2>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8002bfe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c02:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	f7fe fcbf 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8002c0c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002c10:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002c14:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002c24:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002c2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c30:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8002c40:	f7fd fd20 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8002c44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c48:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002c52:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8002c5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c60:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002c6a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8002c74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8002c94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c98:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2206      	movs	r2, #6
 8002ca0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8002ca4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ca8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	701a      	strb	r2, [r3, #0]
			break;
 8002cb2:	f001 b933 	b.w	8003f1c <GAME_PLAY_Phase_Management+0x2238>
					state_game->action = 4;
 8002cb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	701a      	strb	r2, [r3, #0]
			break;
 8002cc4:	f001 b92a 	b.w	8003f1c <GAME_PLAY_Phase_Management+0x2238>
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002cc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ccc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	4b7d      	ldr	r3, [pc, #500]	; (8002ecc <GAME_PLAY_Phase_Management+0x11e8>)
 8002cd6:	9203      	str	r2, [sp, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	9202      	str	r2, [sp, #8]
 8002cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce0:	9201      	str	r2, [sp, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	9200      	str	r2, [sp, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a79      	ldr	r2, [pc, #484]	; (8002ed0 <GAME_PLAY_Phase_Management+0x11ec>)
 8002cea:	215a      	movs	r1, #90	; 0x5a
 8002cec:	2005      	movs	r0, #5
 8002cee:	f003 ff22 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002cf2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cf6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <GAME_PLAY_Phase_Management+0x11e8>)
 8002d00:	9203      	str	r2, [sp, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	9202      	str	r2, [sp, #8]
 8002d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0a:	9201      	str	r2, [sp, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	9200      	str	r2, [sp, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a70      	ldr	r2, [pc, #448]	; (8002ed4 <GAME_PLAY_Phase_Management+0x11f0>)
 8002d14:	215a      	movs	r1, #90	; 0x5a
 8002d16:	2005      	movs	r0, #5
 8002d18:	f003 ff0d 	bl	8006b36 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8002d1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d20:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d147      	bne.n	8002dbc <GAME_PLAY_Phase_Management+0x10d8>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8002d2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	789b      	ldrb	r3, [r3, #2]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d12c      	bne.n	8002d96 <GAME_PLAY_Phase_Management+0x10b2>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002d3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d40:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2326      	movs	r3, #38	; 0x26
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	215a      	movs	r1, #90	; 0x5a
 8002d54:	2000      	movs	r0, #0
 8002d56:	f004 f837 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002d5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d5e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2326      	movs	r3, #38	; 0x26
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	215a      	movs	r1, #90	; 0x5a
 8002d72:	2000      	movs	r0, #0
 8002d74:	f004 f828 	bl	8006dc8 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002d78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d7c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2205      	movs	r2, #5
 8002d84:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8002d88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 8002d96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d9a:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002d9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002da2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002da6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002daa:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	6809      	ldr	r1, [r1, #0]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	f7fd ff4a 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002db8:	f001 b8b3 	b.w	8003f22 <GAME_PLAY_Phase_Management+0x223e>
			else if ((state_game->action == 5 )){
 8002dbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dc0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	f041 80aa 	bne.w	8003f22 <GAME_PLAY_Phase_Management+0x223e>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002dce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dd2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ddc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8002de0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002de4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002de8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	f002 fc55 	bl	800569c <YUGIOH_Check_Trap_On_board>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 8002df8:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8002dfc:	2bff      	cmp	r3, #255	; 0xff
 8002dfe:	d05b      	beq.n	8002eb8 <GAME_PLAY_Phase_Management+0x11d4>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8002e00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e04:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	f7fe fbbe 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002e0e:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8002e12:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e16:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002e26:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002e2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8002e42:	f7fd fc1f 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8002e46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e4a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e54:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8002e5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e62:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e6c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8002e76:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e7a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002e84:	3301      	adds	r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8002e96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2206      	movs	r2, #6
 8002ea2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8002ea6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eaa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	701a      	strb	r2, [r3, #0]
			break;
 8002eb4:	f001 b835 	b.w	8003f22 <GAME_PLAY_Phase_Management+0x223e>
					state_game->action = 4;
 8002eb8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ebc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	701a      	strb	r2, [r3, #0]
			break;
 8002ec6:	f001 b82c 	b.w	8003f22 <GAME_PLAY_Phase_Management+0x223e>
 8002eca:	bf00      	nop
 8002ecc:	2400000c 	.word	0x2400000c
 8002ed0:	08010df8 	.word	0x08010df8
 8002ed4:	08010de0 	.word	0x08010de0
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002ed8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002edc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 8002ee6:	9203      	str	r2, [sp, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	9202      	str	r2, [sp, #8]
 8002eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ef0:	9201      	str	r2, [sp, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	9200      	str	r2, [sp, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a96      	ldr	r2, [pc, #600]	; (8003154 <GAME_PLAY_Phase_Management+0x1470>)
 8002efa:	215a      	movs	r1, #90	; 0x5a
 8002efc:	2005      	movs	r0, #5
 8002efe:	f003 fe1a 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002f02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	4b90      	ldr	r3, [pc, #576]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 8002f10:	9203      	str	r2, [sp, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	9202      	str	r2, [sp, #8]
 8002f16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f1a:	9201      	str	r2, [sp, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	9200      	str	r2, [sp, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a8d      	ldr	r2, [pc, #564]	; (8003158 <GAME_PLAY_Phase_Management+0x1474>)
 8002f24:	2169      	movs	r1, #105	; 0x69
 8002f26:	2005      	movs	r0, #5
 8002f28:	f003 fe05 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f30:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	4b85      	ldr	r3, [pc, #532]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 8002f3a:	9203      	str	r2, [sp, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a83      	ldr	r2, [pc, #524]	; (800315c <GAME_PLAY_Phase_Management+0x1478>)
 8002f4e:	215a      	movs	r1, #90	; 0x5a
 8002f50:	2005      	movs	r0, #5
 8002f52:	f003 fdf0 	bl	8006b36 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002f56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 8002f64:	9203      	str	r2, [sp, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	9202      	str	r2, [sp, #8]
 8002f6a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a78      	ldr	r2, [pc, #480]	; (8003158 <GAME_PLAY_Phase_Management+0x1474>)
 8002f78:	2169      	movs	r1, #105	; 0x69
 8002f7a:	2005      	movs	r0, #5
 8002f7c:	f003 fddb 	bl	8006b36 <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002f80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f84:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f92:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002f96:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002fa6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002faa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fb8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002fbc:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 8002fcc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fd0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	f040 82cd 	bne.w	8003578 <GAME_PLAY_Phase_Management+0x1894>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8002fde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fe2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	785a      	ldrb	r2, [r3, #1]
 8002fea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f080 825d 	bcs.w	80034b8 <GAME_PLAY_Phase_Management+0x17d4>
				{
					state_game->test = 165;
 8002ffe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003002:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	22a5      	movs	r2, #165	; 0xa5
 800300a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800300e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003012:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	4619      	mov	r1, r3
 800301c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003020:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003024:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4413      	add	r3, r2
 800302e:	3304      	adds	r3, #4
 8003030:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 8003034:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b0b      	cmp	r3, #11
 800303c:	f040 8096 	bne.w	800316c <GAME_PLAY_Phase_Management+0x1488>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8003040:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 f9ae 	bl	80053a8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800304c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fae3 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 800305c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003060:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	785b      	ldrb	r3, [r3, #1]
 8003068:	3301      	adds	r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003070:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003078:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	4b33      	ldr	r3, [pc, #204]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 8003082:	9203      	str	r2, [sp, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	9202      	str	r2, [sp, #8]
 8003088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800308c:	9201      	str	r2, [sp, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	9200      	str	r2, [sp, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a32      	ldr	r2, [pc, #200]	; (8003160 <GAME_PLAY_Phase_Management+0x147c>)
 8003096:	215a      	movs	r1, #90	; 0x5a
 8003098:	2005      	movs	r0, #5
 800309a:	f003 fd4c 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800309e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 80030a8:	9203      	str	r2, [sp, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	9202      	str	r2, [sp, #8]
 80030ae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80030b2:	9201      	str	r2, [sp, #4]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	9200      	str	r2, [sp, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2a      	ldr	r2, [pc, #168]	; (8003164 <GAME_PLAY_Phase_Management+0x1480>)
 80030bc:	2169      	movs	r1, #105	; 0x69
 80030be:	2005      	movs	r0, #5
 80030c0:	f003 fd39 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80030c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 80030ce:	9203      	str	r2, [sp, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	9202      	str	r2, [sp, #8]
 80030d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d8:	9201      	str	r2, [sp, #4]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	9200      	str	r2, [sp, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <GAME_PLAY_Phase_Management+0x1484>)
 80030e2:	215a      	movs	r1, #90	; 0x5a
 80030e4:	2005      	movs	r0, #5
 80030e6:	f003 fd26 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80030ea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <GAME_PLAY_Phase_Management+0x146c>)
 80030f4:	9203      	str	r2, [sp, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	9202      	str	r2, [sp, #8]
 80030fa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80030fe:	9201      	str	r2, [sp, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	9200      	str	r2, [sp, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a14      	ldr	r2, [pc, #80]	; (8003158 <GAME_PLAY_Phase_Management+0x1474>)
 8003108:	2169      	movs	r1, #105	; 0x69
 800310a:	2005      	movs	r0, #5
 800310c:	f003 fd13 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003114:	f004 faf0 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003118:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2326      	movs	r3, #38	; 0x26
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	215a      	movs	r1, #90	; 0x5a
 800312c:	2000      	movs	r0, #0
 800312e:	f003 fe4b 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003132:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	2300      	movs	r3, #0
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2326      	movs	r3, #38	; 0x26
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	215a      	movs	r1, #90	; 0x5a
 8003146:	2000      	movs	r0, #0
 8003148:	f003 fe3e 	bl	8006dc8 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 800314c:	f000 beec 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
 8003150:	2400000c 	.word	0x2400000c
 8003154:	08010e14 	.word	0x08010e14
 8003158:	08010e24 	.word	0x08010e24
 800315c:	08010e34 	.word	0x08010e34
 8003160:	08010e48 	.word	0x08010e48
 8003164:	08010e58 	.word	0x08010e58
 8003168:	08010e60 	.word	0x08010e60
					else if (ptrYugiohCard_src->cardSignature == 12)
 800316c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	f040 808c 	bne.w	8003290 <GAME_PLAY_Phase_Management+0x15ac>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8003178:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f002 f92e 	bl	80053e8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800318c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fa43 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 800319c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	785b      	ldrb	r3, [r3, #1]
 80031a8:	3301      	adds	r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80031b8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	4bb5      	ldr	r3, [pc, #724]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 80031c2:	9203      	str	r2, [sp, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	9202      	str	r2, [sp, #8]
 80031c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031cc:	9201      	str	r2, [sp, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	9200      	str	r2, [sp, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4ab1      	ldr	r2, [pc, #708]	; (800349c <GAME_PLAY_Phase_Management+0x17b8>)
 80031d6:	215a      	movs	r1, #90	; 0x5a
 80031d8:	2005      	movs	r0, #5
 80031da:	f003 fcac 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80031de:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	4bac      	ldr	r3, [pc, #688]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 80031e8:	9203      	str	r2, [sp, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	9202      	str	r2, [sp, #8]
 80031ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	9200      	str	r2, [sp, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4aa9      	ldr	r2, [pc, #676]	; (80034a0 <GAME_PLAY_Phase_Management+0x17bc>)
 80031fc:	2169      	movs	r1, #105	; 0x69
 80031fe:	2005      	movs	r0, #5
 8003200:	f003 fc99 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003204:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	4ba2      	ldr	r3, [pc, #648]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 800320e:	9203      	str	r2, [sp, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	9202      	str	r2, [sp, #8]
 8003214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003218:	9201      	str	r2, [sp, #4]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	9200      	str	r2, [sp, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4aa0      	ldr	r2, [pc, #640]	; (80034a4 <GAME_PLAY_Phase_Management+0x17c0>)
 8003222:	215a      	movs	r1, #90	; 0x5a
 8003224:	2005      	movs	r0, #5
 8003226:	f003 fc86 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800322a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	4b99      	ldr	r3, [pc, #612]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 8003234:	9203      	str	r2, [sp, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	9202      	str	r2, [sp, #8]
 800323a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800323e:	9201      	str	r2, [sp, #4]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	9200      	str	r2, [sp, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a98      	ldr	r2, [pc, #608]	; (80034a8 <GAME_PLAY_Phase_Management+0x17c4>)
 8003248:	2169      	movs	r1, #105	; 0x69
 800324a:	2005      	movs	r0, #5
 800324c:	f003 fc73 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003254:	f004 fa50 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003258:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2326      	movs	r3, #38	; 0x26
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	215a      	movs	r1, #90	; 0x5a
 800326c:	2000      	movs	r0, #0
 800326e:	f003 fdab 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003272:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	2300      	movs	r3, #0
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2326      	movs	r3, #38	; 0x26
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	215a      	movs	r1, #90	; 0x5a
 8003286:	2000      	movs	r0, #0
 8003288:	f003 fd9e 	bl	8006dc8 <ST7735_FillRectangleNSS>
			break;
 800328c:	f000 be4c 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8003290:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b0d      	cmp	r3, #13
 8003298:	d110      	bne.n	80032bc <GAME_PLAY_Phase_Management+0x15d8>
						state_game->test = 166;
 800329a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800329e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	22a6      	movs	r2, #166	; 0xa6
 80032a6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80032aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2205      	movs	r2, #5
 80032b6:	701a      	strb	r2, [r3, #0]
			break;
 80032b8:	f000 be36 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80032bc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b0e      	cmp	r3, #14
 80032c4:	d005      	beq.n	80032d2 <GAME_PLAY_Phase_Management+0x15ee>
 80032c6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	f040 8094 	bne.w	80033fa <GAME_PLAY_Phase_Management+0x1716>
						state_game->test = 133;
 80032d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2285      	movs	r2, #133	; 0x85
 80032de:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80032e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f002 f94d 	bl	8005590 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80032f6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe f98e 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003306:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800330a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	3301      	adds	r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800331a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003322:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 800332c:	9203      	str	r2, [sp, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	9202      	str	r2, [sp, #8]
 8003332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003336:	9201      	str	r2, [sp, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	9200      	str	r2, [sp, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5b      	ldr	r2, [pc, #364]	; (80034ac <GAME_PLAY_Phase_Management+0x17c8>)
 8003340:	215a      	movs	r1, #90	; 0x5a
 8003342:	2005      	movs	r0, #5
 8003344:	f003 fbf7 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003348:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	4b51      	ldr	r3, [pc, #324]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 8003352:	9203      	str	r2, [sp, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	9202      	str	r2, [sp, #8]
 8003358:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800335c:	9201      	str	r2, [sp, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	9200      	str	r2, [sp, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <GAME_PLAY_Phase_Management+0x17cc>)
 8003366:	2169      	movs	r1, #105	; 0x69
 8003368:	2005      	movs	r0, #5
 800336a:	f003 fbe4 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800336e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	4b48      	ldr	r3, [pc, #288]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 8003378:	9203      	str	r2, [sp, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	9202      	str	r2, [sp, #8]
 800337e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003382:	9201      	str	r2, [sp, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	9200      	str	r2, [sp, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a46      	ldr	r2, [pc, #280]	; (80034a4 <GAME_PLAY_Phase_Management+0x17c0>)
 800338c:	215a      	movs	r1, #90	; 0x5a
 800338e:	2005      	movs	r0, #5
 8003390:	f003 fbd1 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003394:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <GAME_PLAY_Phase_Management+0x17b4>)
 800339e:	9203      	str	r2, [sp, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	9202      	str	r2, [sp, #8]
 80033a4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80033a8:	9201      	str	r2, [sp, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	9200      	str	r2, [sp, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <GAME_PLAY_Phase_Management+0x17d0>)
 80033b2:	2169      	movs	r1, #105	; 0x69
 80033b4:	2005      	movs	r0, #5
 80033b6:	f003 fbbe 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80033ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033be:	f004 f99b 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80033c2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	2300      	movs	r3, #0
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2326      	movs	r3, #38	; 0x26
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	215a      	movs	r1, #90	; 0x5a
 80033d6:	2000      	movs	r0, #0
 80033d8:	f003 fcf6 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80033dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2326      	movs	r3, #38	; 0x26
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	215a      	movs	r1, #90	; 0x5a
 80033f0:	2000      	movs	r0, #0
 80033f2:	f003 fce9 	bl	8006dc8 <ST7735_FillRectangleNSS>
			break;
 80033f6:	f000 bd97 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
					else if(ptrYugiohCard_src->cardSignature == 16)
 80033fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b10      	cmp	r3, #16
 8003402:	d110      	bne.n	8003426 <GAME_PLAY_Phase_Management+0x1742>
						state_game->test = 124;
 8003404:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003408:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	227c      	movs	r2, #124	; 0x7c
 8003410:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8003414:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003418:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2205      	movs	r2, #5
 8003420:	701a      	strb	r2, [r3, #0]
			break;
 8003422:	f000 bd81 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8003426:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b11      	cmp	r3, #17
 800342e:	d108      	bne.n	8003442 <GAME_PLAY_Phase_Management+0x175e>
						state_game->action = 5;
 8003430:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003434:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2205      	movs	r2, #5
 800343c:	701a      	strb	r2, [r3, #0]
			break;
 800343e:	f000 bd73 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8003442:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b12      	cmp	r3, #18
 800344a:	d005      	beq.n	8003458 <GAME_PLAY_Phase_Management+0x1774>
 800344c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b13      	cmp	r3, #19
 8003454:	f040 8568 	bne.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8003458:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 8561 	bne.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003466:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe f8d6 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8003476:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800347a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	785b      	ldrb	r3, [r3, #1]
 8003482:	3301      	adds	r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800348a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	705a      	strb	r2, [r3, #1]
			break;
 8003492:	f000 bd49 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
 8003496:	bf00      	nop
 8003498:	2400000c 	.word	0x2400000c
 800349c:	08010e48 	.word	0x08010e48
 80034a0:	08010e70 	.word	0x08010e70
 80034a4:	08010e60 	.word	0x08010e60
 80034a8:	08010e24 	.word	0x08010e24
 80034ac:	08010e7c 	.word	0x08010e7c
 80034b0:	08010e8c 	.word	0x08010e8c
 80034b4:	08010e9c 	.word	0x08010e9c
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80034b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2326      	movs	r3, #38	; 0x26
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	215a      	movs	r1, #90	; 0x5a
 80034d0:	2000      	movs	r0, #0
 80034d2:	f003 fc79 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80034d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034da:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	2300      	movs	r3, #0
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2326      	movs	r3, #38	; 0x26
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	215a      	movs	r1, #90	; 0x5a
 80034ee:	2000      	movs	r0, #0
 80034f0:	f003 fc6a 	bl	8006dc8 <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80034fa:	e020      	b.n	800353e <GAME_PLAY_Phase_Management+0x185a>
						state_game->ptrChainUser[i] = &dummyPlayer;
 80034fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003500:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800350a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	f107 0210 	add.w	r2, r7, #16
 8003516:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 8003518:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800351c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003526:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	f107 0210 	add.w	r2, r7, #16
 8003532:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8003534:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003538:	3301      	adds	r3, #1
 800353a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800353e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003542:	2b05      	cmp	r3, #5
 8003544:	ddda      	ble.n	80034fc <GAME_PLAY_Phase_Management+0x1818>
					state_game->ChainCount = 0;
 8003546:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800354a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 8003556:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800355a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8003564:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003568:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003574:	f000 bcd8 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
			else if (state_game->action == 5)
 8003578:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800357c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b05      	cmp	r3, #5
 8003586:	f040 809d 	bne.w	80036c4 <GAME_PLAY_Phase_Management+0x19e0>
				state_game->test = 167;
 800358a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800358e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	22a7      	movs	r2, #167	; 0xa7
 8003596:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800359a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800359e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	4619      	mov	r1, r3
 80035a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035ac:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80035b0:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 80035c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	789b      	ldrb	r3, [r3, #2]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d128      	bne.n	800361e <GAME_PLAY_Phase_Management+0x193a>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 80035cc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd ff2e 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&(*ptrUser)->ActtionBuffer[0],&(*ptrUser)->CardInPlayed);
 80035d8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80035e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f7fd f848 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 4;
 80035f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2204      	movs	r2, #4
 8003600:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8003602:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003606:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	3301      	adds	r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003616:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 800361e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b0d      	cmp	r3, #13
 8003626:	d110      	bne.n	800364a <GAME_PLAY_Phase_Management+0x1966>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 8003628:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003632:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003636:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800363a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800363e:	6809      	ldr	r1, [r1, #0]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f7fd fc61 	bl	8000f08 <Player_Reading_Card_Reborn>
			break;
 8003646:	f000 bc6f 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
				else if(ptrYugiohCard_src->cardSignature == 16){
 800364a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b10      	cmp	r3, #16
 8003652:	d110      	bne.n	8003676 <GAME_PLAY_Phase_Management+0x1992>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 8003654:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800365e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003662:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003666:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800366a:	6809      	ldr	r1, [r1, #0]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	f7fd fcf9 	bl	8001064 <Player_Reading_Card_Ancient_Rule>
			break;
 8003672:	f000 bc59 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
				else if (ptrYugiohCard_src->cardSignature == 17)
 8003676:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b11      	cmp	r3, #17
 800367e:	d110      	bne.n	80036a2 <GAME_PLAY_Phase_Management+0x19be>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 8003680:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800368a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800368e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003692:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003696:	6809      	ldr	r1, [r1, #0]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	f7fd fb8b 	bl	8000db4 <Player_Reading_Card_Stopdef>
			break;
 800369e:	f000 bc43 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 80036a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036ac:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80036b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036b4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80036b8:	6809      	ldr	r1, [r1, #0]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	f7fd f84a 	bl	8000754 <Player_Reading_Card>
			break;
 80036c0:	f000 bc32 	b.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
			else if (state_game->action == 6)
 80036c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	f040 8429 	bne.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
				state_game->test = 169;
 80036d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	22a9      	movs	r2, #169	; 0xa9
 80036e2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80036e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	785b      	ldrb	r3, [r3, #1]
 80036f2:	4619      	mov	r1, r3
 80036f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036f8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80036fc:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 800370c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b0d      	cmp	r3, #13
 8003714:	f040 819d 	bne.w	8003a52 <GAME_PLAY_Phase_Management+0x1d6e>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003718:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	4b66      	ldr	r3, [pc, #408]	; (80038bc <GAME_PLAY_Phase_Management+0x1bd8>)
 8003722:	9203      	str	r2, [sp, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	9202      	str	r2, [sp, #8]
 8003728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372c:	9201      	str	r2, [sp, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	9200      	str	r2, [sp, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a62      	ldr	r2, [pc, #392]	; (80038c0 <GAME_PLAY_Phase_Management+0x1bdc>)
 8003736:	215a      	movs	r1, #90	; 0x5a
 8003738:	2005      	movs	r0, #5
 800373a:	f003 f9fc 	bl	8006b36 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 800373e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	789b      	ldrb	r3, [r3, #2]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80c4 	bne.w	80038d4 <GAME_PLAY_Phase_Management+0x1bf0>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800374c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2326      	movs	r3, #38	; 0x26
 800375c:	2280      	movs	r2, #128	; 0x80
 800375e:	215a      	movs	r1, #90	; 0x5a
 8003760:	2000      	movs	r0, #0
 8003762:	f003 fb31 	bl	8006dc8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8003766:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800376a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	22aa      	movs	r2, #170	; 0xaa
 8003772:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8003776:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003780:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8003784:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003788:	2200      	movs	r2, #0
 800378a:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800378c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003796:	4619      	mov	r1, r3
 8003798:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800379c:	f7fc ff72 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80037a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fe5c 	bl	8005464 <YUGIOH_Reborn>
						state_game->action = 4;
 80037ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2204      	movs	r2, #4
 80037b8:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80037ba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fd ff2c 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 80037ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	785b      	ldrb	r3, [r3, #1]
 80037d6:	3301      	adds	r3, #1
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037de:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80037e6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	4b33      	ldr	r3, [pc, #204]	; (80038bc <GAME_PLAY_Phase_Management+0x1bd8>)
 80037f0:	9203      	str	r2, [sp, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	9202      	str	r2, [sp, #8]
 80037f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fa:	9201      	str	r2, [sp, #4]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	9200      	str	r2, [sp, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a30      	ldr	r2, [pc, #192]	; (80038c4 <GAME_PLAY_Phase_Management+0x1be0>)
 8003804:	215a      	movs	r1, #90	; 0x5a
 8003806:	2005      	movs	r0, #5
 8003808:	f003 f995 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800380c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	4b29      	ldr	r3, [pc, #164]	; (80038bc <GAME_PLAY_Phase_Management+0x1bd8>)
 8003816:	9203      	str	r2, [sp, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	9202      	str	r2, [sp, #8]
 800381c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003820:	9201      	str	r2, [sp, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <GAME_PLAY_Phase_Management+0x1be4>)
 800382a:	2169      	movs	r1, #105	; 0x69
 800382c:	2005      	movs	r0, #5
 800382e:	f003 f982 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003832:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <GAME_PLAY_Phase_Management+0x1bd8>)
 800383c:	9203      	str	r2, [sp, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	9202      	str	r2, [sp, #8]
 8003842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003846:	9201      	str	r2, [sp, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	9200      	str	r2, [sp, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <GAME_PLAY_Phase_Management+0x1be8>)
 8003850:	215a      	movs	r1, #90	; 0x5a
 8003852:	2005      	movs	r0, #5
 8003854:	f003 f96f 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003858:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	781a      	ldrb	r2, [r3, #0]
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <GAME_PLAY_Phase_Management+0x1bd8>)
 8003862:	9203      	str	r2, [sp, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	9202      	str	r2, [sp, #8]
 8003868:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800386c:	9201      	str	r2, [sp, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	9200      	str	r2, [sp, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <GAME_PLAY_Phase_Management+0x1bec>)
 8003876:	2169      	movs	r1, #105	; 0x69
 8003878:	2005      	movs	r0, #5
 800387a:	f003 f95c 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 800387e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003882:	f003 ff39 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003886:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	2300      	movs	r3, #0
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2326      	movs	r3, #38	; 0x26
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	215a      	movs	r1, #90	; 0x5a
 800389a:	2000      	movs	r0, #0
 800389c:	f003 fa94 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80038a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2326      	movs	r3, #38	; 0x26
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	215a      	movs	r1, #90	; 0x5a
 80038b4:	2000      	movs	r0, #0
 80038b6:	f003 fa87 	bl	8006dc8 <ST7735_FillRectangleNSS>
			break;
 80038ba:	e335      	b.n	8003f28 <GAME_PLAY_Phase_Management+0x2244>
 80038bc:	2400000c 	.word	0x2400000c
 80038c0:	08010d54 	.word	0x08010d54
 80038c4:	08010e48 	.word	0x08010e48
 80038c8:	08010ea8 	.word	0x08010ea8
 80038cc:	08010e60 	.word	0x08010e60
 80038d0:	08010e24 	.word	0x08010e24
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 80038d4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f040 8323 	bne.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80038e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	2300      	movs	r3, #0
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2326      	movs	r3, #38	; 0x26
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	215a      	movs	r1, #90	; 0x5a
 80038f6:	2000      	movs	r0, #0
 80038f8:	f003 fa66 	bl	8006dc8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 80038fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003900:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	22ab      	movs	r2, #171	; 0xab
 8003908:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 800390c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003916:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 800391a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800391e:	2201      	movs	r2, #1
 8003920:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003922:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800392c:	4619      	mov	r1, r3
 800392e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003932:	f7fc fea7 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8003936:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fd91 	bl	8005464 <YUGIOH_Reborn>
						state_game->action = 4;
 8003942:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003946:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2204      	movs	r2, #4
 800394e:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003950:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fe61 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003960:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003964:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	3301      	adds	r3, #1
 800396e:	b2da      	uxtb	r2, r3
 8003970:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003974:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800397c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	4ba5      	ldr	r3, [pc, #660]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 8003986:	9203      	str	r2, [sp, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	9202      	str	r2, [sp, #8]
 800398c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003990:	9201      	str	r2, [sp, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	9200      	str	r2, [sp, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4aa1      	ldr	r2, [pc, #644]	; (8003c20 <GAME_PLAY_Phase_Management+0x1f3c>)
 800399a:	215a      	movs	r1, #90	; 0x5a
 800399c:	2005      	movs	r0, #5
 800399e:	f003 f8ca 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80039a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	4b9c      	ldr	r3, [pc, #624]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 80039ac:	9203      	str	r2, [sp, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	9202      	str	r2, [sp, #8]
 80039b2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80039b6:	9201      	str	r2, [sp, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	9200      	str	r2, [sp, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a99      	ldr	r2, [pc, #612]	; (8003c24 <GAME_PLAY_Phase_Management+0x1f40>)
 80039c0:	2169      	movs	r1, #105	; 0x69
 80039c2:	2005      	movs	r0, #5
 80039c4:	f003 f8b7 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80039c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 80039d2:	9203      	str	r2, [sp, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	9202      	str	r2, [sp, #8]
 80039d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039dc:	9201      	str	r2, [sp, #4]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	9200      	str	r2, [sp, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a90      	ldr	r2, [pc, #576]	; (8003c28 <GAME_PLAY_Phase_Management+0x1f44>)
 80039e6:	215a      	movs	r1, #90	; 0x5a
 80039e8:	2005      	movs	r0, #5
 80039ea:	f003 f8a4 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80039ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	4b89      	ldr	r3, [pc, #548]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 80039f8:	9203      	str	r2, [sp, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	9202      	str	r2, [sp, #8]
 80039fe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003a02:	9201      	str	r2, [sp, #4]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a88      	ldr	r2, [pc, #544]	; (8003c2c <GAME_PLAY_Phase_Management+0x1f48>)
 8003a0c:	2169      	movs	r1, #105	; 0x69
 8003a0e:	2005      	movs	r0, #5
 8003a10:	f003 f891 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a18:	f003 fe6e 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a1c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2326      	movs	r3, #38	; 0x26
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	215a      	movs	r1, #90	; 0x5a
 8003a30:	2000      	movs	r0, #0
 8003a32:	f003 f9c9 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a36:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2326      	movs	r3, #38	; 0x26
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	215a      	movs	r1, #90	; 0x5a
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f003 f9bc 	bl	8006dc8 <ST7735_FillRectangleNSS>
			break;
 8003a50:	e26a      	b.n	8003f28 <GAME_PLAY_Phase_Management+0x2244>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8003a52:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	f040 81aa 	bne.w	8003db2 <GAME_PLAY_Phase_Management+0x20ce>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a5e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2326      	movs	r3, #38	; 0x26
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	215a      	movs	r1, #90	; 0x5a
 8003a72:	2000      	movs	r0, #0
 8003a74:	f003 f9a8 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a78:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 8003a82:	9203      	str	r2, [sp, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	9202      	str	r2, [sp, #8]
 8003a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8c:	9201      	str	r2, [sp, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	9200      	str	r2, [sp, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a66      	ldr	r2, [pc, #408]	; (8003c30 <GAME_PLAY_Phase_Management+0x1f4c>)
 8003a96:	215a      	movs	r1, #90	; 0x5a
 8003a98:	2005      	movs	r0, #5
 8003a9a:	f003 f84c 	bl	8006b36 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8003a9e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	789b      	ldrb	r3, [r3, #2]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 80c4 	bne.w	8003c34 <GAME_PLAY_Phase_Management+0x1f50>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003aac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2326      	movs	r3, #38	; 0x26
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	215a      	movs	r1, #90	; 0x5a
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f003 f981 	bl	8006dc8 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8003ac6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003aca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	22aa      	movs	r2, #170	; 0xaa
 8003ad2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8003ad6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ae0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8003ae4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003ae8:	2200      	movs	r2, #0
 8003aea:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003aec:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003af6:	4619      	mov	r1, r3
 8003af8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003afc:	f7fc fdc2 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8003b00:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 fd16 	bl	8005538 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8003b0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b10:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2204      	movs	r2, #4
 8003b18:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003b1a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fd7c 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003b2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b2e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	3301      	adds	r3, #1
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b46:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 8003b50:	9203      	str	r2, [sp, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	9202      	str	r2, [sp, #8]
 8003b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b5a:	9201      	str	r2, [sp, #4]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	9200      	str	r2, [sp, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2f      	ldr	r2, [pc, #188]	; (8003c20 <GAME_PLAY_Phase_Management+0x1f3c>)
 8003b64:	215a      	movs	r1, #90	; 0x5a
 8003b66:	2005      	movs	r0, #5
 8003b68:	f002 ffe5 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b6c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	781a      	ldrb	r2, [r3, #0]
 8003b74:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 8003b76:	9203      	str	r2, [sp, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	9202      	str	r2, [sp, #8]
 8003b7c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003b80:	9201      	str	r2, [sp, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	9200      	str	r2, [sp, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <GAME_PLAY_Phase_Management+0x1f40>)
 8003b8a:	2169      	movs	r1, #105	; 0x69
 8003b8c:	2005      	movs	r0, #5
 8003b8e:	f002 ffd2 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003b92:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 8003b9c:	9203      	str	r2, [sp, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	9202      	str	r2, [sp, #8]
 8003ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ba6:	9201      	str	r2, [sp, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	9200      	str	r2, [sp, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <GAME_PLAY_Phase_Management+0x1f44>)
 8003bb0:	215a      	movs	r1, #90	; 0x5a
 8003bb2:	2005      	movs	r0, #5
 8003bb4:	f002 ffbf 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003bb8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <GAME_PLAY_Phase_Management+0x1f38>)
 8003bc2:	9203      	str	r2, [sp, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	9202      	str	r2, [sp, #8]
 8003bc8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003bcc:	9201      	str	r2, [sp, #4]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	9200      	str	r2, [sp, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <GAME_PLAY_Phase_Management+0x1f48>)
 8003bd6:	2169      	movs	r1, #105	; 0x69
 8003bd8:	2005      	movs	r0, #5
 8003bda:	f002 ffac 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be2:	f003 fd89 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003be6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2326      	movs	r3, #38	; 0x26
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	215a      	movs	r1, #90	; 0x5a
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f003 f8e4 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003c00:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2326      	movs	r3, #38	; 0x26
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	215a      	movs	r1, #90	; 0x5a
 8003c14:	2000      	movs	r0, #0
 8003c16:	f003 f8d7 	bl	8006dc8 <ST7735_FillRectangleNSS>
			break;
 8003c1a:	e185      	b.n	8003f28 <GAME_PLAY_Phase_Management+0x2244>
 8003c1c:	2400000c 	.word	0x2400000c
 8003c20:	08010e48 	.word	0x08010e48
 8003c24:	08010ea8 	.word	0x08010ea8
 8003c28:	08010e60 	.word	0x08010e60
 8003c2c:	08010e24 	.word	0x08010e24
 8003c30:	08010d54 	.word	0x08010d54
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8003c34:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 8173 	bne.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003c42:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2326      	movs	r3, #38	; 0x26
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	215a      	movs	r1, #90	; 0x5a
 8003c56:	2000      	movs	r0, #0
 8003c58:	f003 f8b6 	bl	8006dc8 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8003c5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c60:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	22ab      	movs	r2, #171	; 0xab
 8003c68:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8003c6c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c76:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8003c7a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003c7e:	2201      	movs	r2, #1
 8003c80:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003c82:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003c92:	f7fc fcf7 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8003c96:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fc4b 	bl	8005538 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8003ca2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ca6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2204      	movs	r2, #4
 8003cae:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003cb0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd fcb1 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003cc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cc4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003cdc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	4ba3      	ldr	r3, [pc, #652]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003ce6:	9203      	str	r2, [sp, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	9202      	str	r2, [sp, #8]
 8003cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf0:	9201      	str	r2, [sp, #4]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	9200      	str	r2, [sp, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a9f      	ldr	r2, [pc, #636]	; (8003f78 <GAME_PLAY_Phase_Management+0x2294>)
 8003cfa:	215a      	movs	r1, #90	; 0x5a
 8003cfc:	2005      	movs	r0, #5
 8003cfe:	f002 ff1a 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003d02:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	4b9a      	ldr	r3, [pc, #616]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003d0c:	9203      	str	r2, [sp, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	9202      	str	r2, [sp, #8]
 8003d12:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003d16:	9201      	str	r2, [sp, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	9200      	str	r2, [sp, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a97      	ldr	r2, [pc, #604]	; (8003f7c <GAME_PLAY_Phase_Management+0x2298>)
 8003d20:	2169      	movs	r1, #105	; 0x69
 8003d22:	2005      	movs	r0, #5
 8003d24:	f002 ff07 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003d28:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	4b90      	ldr	r3, [pc, #576]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003d32:	9203      	str	r2, [sp, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	9202      	str	r2, [sp, #8]
 8003d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d3c:	9201      	str	r2, [sp, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	9200      	str	r2, [sp, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a8e      	ldr	r2, [pc, #568]	; (8003f80 <GAME_PLAY_Phase_Management+0x229c>)
 8003d46:	215a      	movs	r1, #90	; 0x5a
 8003d48:	2005      	movs	r0, #5
 8003d4a:	f002 fef4 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003d4e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	4b87      	ldr	r3, [pc, #540]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003d58:	9203      	str	r2, [sp, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	9202      	str	r2, [sp, #8]
 8003d5e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003d62:	9201      	str	r2, [sp, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	9200      	str	r2, [sp, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a86      	ldr	r2, [pc, #536]	; (8003f84 <GAME_PLAY_Phase_Management+0x22a0>)
 8003d6c:	2169      	movs	r1, #105	; 0x69
 8003d6e:	2005      	movs	r0, #5
 8003d70:	f002 fee1 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d78:	f003 fcbe 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003d7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2326      	movs	r3, #38	; 0x26
 8003d8c:	2280      	movs	r2, #128	; 0x80
 8003d8e:	215a      	movs	r1, #90	; 0x5a
 8003d90:	2000      	movs	r0, #0
 8003d92:	f003 f819 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003d96:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	2300      	movs	r3, #0
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2326      	movs	r3, #38	; 0x26
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	215a      	movs	r1, #90	; 0x5a
 8003daa:	2000      	movs	r0, #0
 8003dac:	f003 f80c 	bl	8006dc8 <ST7735_FillRectangleNSS>
			break;
 8003db0:	e0ba      	b.n	8003f28 <GAME_PLAY_Phase_Management+0x2244>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8003db2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b11      	cmp	r3, #17
 8003dba:	f040 80b5 	bne.w	8003f28 <GAME_PLAY_Phase_Management+0x2244>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8003dbe:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003dc8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8003dcc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003ddc:	f7fc fc52 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8003de0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f001 fc1e 	bl	8005630 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8003df4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003df8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003e02:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fd fc08 	bl	8001622 <YUGIOH_To_GY>
					state_game->count_chain++;
 8003e12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e16:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003e2e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003e38:	9203      	str	r2, [sp, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	9202      	str	r2, [sp, #8]
 8003e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e42:	9201      	str	r2, [sp, #4]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	9200      	str	r2, [sp, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4b      	ldr	r2, [pc, #300]	; (8003f78 <GAME_PLAY_Phase_Management+0x2294>)
 8003e4c:	215a      	movs	r1, #90	; 0x5a
 8003e4e:	2005      	movs	r0, #5
 8003e50:	f002 fe71 	bl	8006b36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003e54:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003e5e:	9203      	str	r2, [sp, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	9202      	str	r2, [sp, #8]
 8003e64:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e68:	9201      	str	r2, [sp, #4]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	9200      	str	r2, [sp, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a45      	ldr	r2, [pc, #276]	; (8003f88 <GAME_PLAY_Phase_Management+0x22a4>)
 8003e72:	2169      	movs	r1, #105	; 0x69
 8003e74:	2005      	movs	r0, #5
 8003e76:	f002 fe5e 	bl	8006b36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003e7a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003e84:	9203      	str	r2, [sp, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	9202      	str	r2, [sp, #8]
 8003e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8e:	9201      	str	r2, [sp, #4]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	9200      	str	r2, [sp, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a3a      	ldr	r2, [pc, #232]	; (8003f80 <GAME_PLAY_Phase_Management+0x229c>)
 8003e98:	215a      	movs	r1, #90	; 0x5a
 8003e9a:	2005      	movs	r0, #5
 8003e9c:	f002 fe4b 	bl	8006b36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ea0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <GAME_PLAY_Phase_Management+0x2290>)
 8003eaa:	9203      	str	r2, [sp, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	9202      	str	r2, [sp, #8]
 8003eb0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003eb4:	9201      	str	r2, [sp, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	9200      	str	r2, [sp, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <GAME_PLAY_Phase_Management+0x22a0>)
 8003ebe:	2169      	movs	r1, #105	; 0x69
 8003ec0:	2005      	movs	r0, #5
 8003ec2:	f002 fe38 	bl	8006b36 <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8003ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eca:	f003 fc15 	bl	80076f8 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003ece:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2326      	movs	r3, #38	; 0x26
 8003ede:	2280      	movs	r2, #128	; 0x80
 8003ee0:	215a      	movs	r1, #90	; 0x5a
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f002 ff70 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ee8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2326      	movs	r3, #38	; 0x26
 8003ef8:	2280      	movs	r2, #128	; 0x80
 8003efa:	215a      	movs	r1, #90	; 0x5a
 8003efc:	2000      	movs	r0, #0
 8003efe:	f002 ff63 	bl	8006dc8 <ST7735_FillRectangleNSS>
			break;
 8003f02:	e011      	b.n	8003f28 <GAME_PLAY_Phase_Management+0x2244>
			break;
 8003f04:	bf00      	nop
 8003f06:	f001 ba41 	b.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
			break;
 8003f0a:	bf00      	nop
 8003f0c:	f001 ba3e 	b.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
			break;
 8003f10:	bf00      	nop
 8003f12:	f001 ba3b 	b.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
			break;
 8003f16:	bf00      	nop
 8003f18:	f001 ba38 	b.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
			break;
 8003f1c:	bf00      	nop
 8003f1e:	f001 ba35 	b.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
			break;
 8003f22:	bf00      	nop
 8003f24:	f001 ba32 	b.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
			break;
 8003f28:	bf00      	nop
		}
		break;
 8003f2a:	f001 ba2f 	b.w	800538c <GAME_PLAY_Phase_Management+0x36a8>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8003f2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f32:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003f36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f3a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003f3e:	6811      	ldr	r1, [r2, #0]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	f001 fd05 	bl	8005950 <LCDvalue>
			switch(PBS){
 8003f46:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	f201 8220 	bhi.w	8005390 <GAME_PLAY_Phase_Management+0x36ac>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <GAME_PLAY_Phase_Management+0x2274>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	0800536d 	.word	0x0800536d
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	080046bd 	.word	0x080046bd
 8003f64:	08004387 	.word	0x08004387
 8003f68:	080049f1 	.word	0x080049f1
 8003f6c:	08004ccd 	.word	0x08004ccd
 8003f70:	080051fd 	.word	0x080051fd
 8003f74:	2400000c 	.word	0x2400000c
 8003f78:	08010e48 	.word	0x08010e48
 8003f7c:	08010ea8 	.word	0x08010ea8
 8003f80:	08010e60 	.word	0x08010e60
 8003f84:	08010e24 	.word	0x08010e24
 8003f88:	08010eb8 	.word	0x08010eb8
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003f8c:	4ba2      	ldr	r3, [pc, #648]	; (8004218 <GAME_PLAY_Phase_Management+0x2534>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	9202      	str	r2, [sp, #8]
 8003f92:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f96:	9201      	str	r2, [sp, #4]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	9200      	str	r2, [sp, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a9f      	ldr	r2, [pc, #636]	; (800421c <GAME_PLAY_Phase_Management+0x2538>)
 8003fa0:	2123      	movs	r1, #35	; 0x23
 8003fa2:	206e      	movs	r0, #110	; 0x6e
 8003fa4:	f002 fd33 	bl	8006a0e <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003fa8:	4b9b      	ldr	r3, [pc, #620]	; (8004218 <GAME_PLAY_Phase_Management+0x2534>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	9202      	str	r2, [sp, #8]
 8003fae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003fb2:	9201      	str	r2, [sp, #4]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	9200      	str	r2, [sp, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a98      	ldr	r2, [pc, #608]	; (800421c <GAME_PLAY_Phase_Management+0x2538>)
 8003fbc:	2123      	movs	r1, #35	; 0x23
 8003fbe:	206e      	movs	r0, #110	; 0x6e
 8003fc0:	f002 fd6f 	bl	8006aa2 <ST7735_WriteString1>
				if(state_game->action == 50){
 8003fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b32      	cmp	r3, #50	; 0x32
 8003fd2:	f040 809b 	bne.w	800410c <GAME_PLAY_Phase_Management+0x2428>
					Player_Reading_Card_Monster_Battle(RFIDmain, state_game, playerDef);
 8003fd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fda:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003fde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fe2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003fe6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fea:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	6809      	ldr	r1, [r1, #0]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	f7fc fd82 	bl	8000afc <Player_Reading_Card_Monster_Battle>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4889      	ldr	r0, [pc, #548]	; (8004220 <GAME_PLAY_Phase_Management+0x253c>)
 8003ffc:	f006 fcca 	bl	800a994 <HAL_GPIO_ReadPin>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	f041 81b4 	bne.w	8005370 <GAME_PLAY_Phase_Management+0x368c>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8004008:	4886      	ldr	r0, [pc, #536]	; (8004224 <GAME_PLAY_Phase_Management+0x2540>)
 800400a:	f009 fec1 	bl	800dd90 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 800400e:	4986      	ldr	r1, [pc, #536]	; (8004228 <GAME_PLAY_Phase_Management+0x2544>)
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800401c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004020:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	2300      	movs	r3, #0
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2326      	movs	r3, #38	; 0x26
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	215a      	movs	r1, #90	; 0x5a
 8004034:	2000      	movs	r0, #0
 8004036:	f002 fec7 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800403a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800403e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	4b79      	ldr	r3, [pc, #484]	; (800422c <GAME_PLAY_Phase_Management+0x2548>)
 8004048:	9203      	str	r2, [sp, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	9202      	str	r2, [sp, #8]
 800404e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004052:	9201      	str	r2, [sp, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	9200      	str	r2, [sp, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a75      	ldr	r2, [pc, #468]	; (8004230 <GAME_PLAY_Phase_Management+0x254c>)
 800405c:	215a      	movs	r1, #90	; 0x5a
 800405e:	200f      	movs	r0, #15
 8004060:	f002 fd69 	bl	8006b36 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004064:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004068:	f003 fb46 	bl	80076f8 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800406c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004070:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	2300      	movs	r3, #0
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2326      	movs	r3, #38	; 0x26
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	215a      	movs	r1, #90	; 0x5a
 8004084:	2000      	movs	r0, #0
 8004086:	f002 fe9f 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800408a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800408e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	2300      	movs	r3, #0
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2326      	movs	r3, #38	; 0x26
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	215a      	movs	r1, #90	; 0x5a
 80040a2:	2000      	movs	r0, #0
 80040a4:	f002 fe90 	bl	8006dc8 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 80040a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 80040b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040ba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	f001 fb44 	bl	800574c <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 80040c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d108      	bne.n	80040e8 <GAME_PLAY_Phase_Management+0x2404>
							state_game->MainGame_State = second_player;
 80040d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2203      	movs	r2, #3
 80040e2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80040e6:	e007      	b.n	80040f8 <GAME_PLAY_Phase_Management+0x2414>
						}
						else{
							state_game->MainGame_State = first_player;
 80040e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 80040f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040fc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8004108:	f001 b932 	b.w	8005370 <GAME_PLAY_Phase_Management+0x368c>
				else if(state_game->action == 51){
 800410c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004110:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b33      	cmp	r3, #51	; 0x33
 800411a:	f041 8129 	bne.w	8005370 <GAME_PLAY_Phase_Management+0x368c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800411e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004122:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	2300      	movs	r3, #0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2326      	movs	r3, #38	; 0x26
 8004132:	2280      	movs	r2, #128	; 0x80
 8004134:	215a      	movs	r1, #90	; 0x5a
 8004136:	2000      	movs	r0, #0
 8004138:	f002 fe46 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800413c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004140:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2326      	movs	r3, #38	; 0x26
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	215a      	movs	r1, #90	; 0x5a
 8004154:	2000      	movs	r0, #0
 8004156:	f002 fe37 	bl	8006dc8 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004160:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004164:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800416e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8004172:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004176:	799b      	ldrb	r3, [r3, #6]
 8004178:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 800417c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004180:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3338      	adds	r3, #56	; 0x38
 8004188:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004192:	e013      	b.n	80041bc <GAME_PLAY_Phase_Management+0x24d8>
						if(ptrYugiohCard_dst->cardData == 0){
 8004194:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <GAME_PLAY_Phase_Management+0x24c4>
							check_def_mon++;
 800419e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80041a2:	3301      	adds	r3, #1
 80041a4:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 80041a8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80041ac:	3310      	adds	r3, #16
 80041ae:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 80041b2:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 80041b6:	3301      	adds	r3, #1
 80041b8:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 80041bc:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d9e7      	bls.n	8004194 <GAME_PLAY_Phase_Management+0x24b0>
					uint8_t flag_can_atk = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80041ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041ce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80041d8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 80041dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3338      	adds	r3, #56	; 0x38
 80041e8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 80041f2:	e02c      	b.n	800424e <GAME_PLAY_Phase_Management+0x256a>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 80041f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	429a      	cmp	r2, r3
 8004202:	d11a      	bne.n	800423a <GAME_PLAY_Phase_Management+0x2556>
							if(ptrYugiohCard_dst->cardState == 1){
 8004204:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004208:	789b      	ldrb	r3, [r3, #2]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d112      	bne.n	8004234 <GAME_PLAY_Phase_Management+0x2550>
								flag_can_atk = 2;
 800420e:	2302      	movs	r3, #2
 8004210:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 8004214:	e01f      	b.n	8004256 <GAME_PLAY_Phase_Management+0x2572>
 8004216:	bf00      	nop
 8004218:	2400000c 	.word	0x2400000c
 800421c:	08010ec8 	.word	0x08010ec8
 8004220:	58020800 	.word	0x58020800
 8004224:	240002e8 	.word	0x240002e8
 8004228:	24000ea0 	.word	0x24000ea0
 800422c:	24000014 	.word	0x24000014
 8004230:	08010ecc 	.word	0x08010ecc
								flag_can_atk = 1;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 800423a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800423e:	3310      	adds	r3, #16
 8004240:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8004244:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8004248:	3301      	adds	r3, #1
 800424a:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 800424e:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8004252:	2b02      	cmp	r3, #2
 8004254:	d9ce      	bls.n	80041f4 <GAME_PLAY_Phase_Management+0x2510>
					if (check_def_mon < 3)
 8004256:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800425a:	2b02      	cmp	r3, #2
 800425c:	d810      	bhi.n	8004280 <GAME_PLAY_Phase_Management+0x259c>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 800425e:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 8004262:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004266:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <GAME_PLAY_Phase_Management+0x259c>
							flag_can_atk = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 8004280:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8004284:	2b02      	cmp	r3, #2
 8004286:	d165      	bne.n	8004354 <GAME_PLAY_Phase_Management+0x2670>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8004288:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800428c:	7a1b      	ldrb	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d047      	beq.n	8004322 <GAME_PLAY_Phase_Management+0x263e>
 8004292:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004296:	789b      	ldrb	r3, [r3, #2]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d142      	bne.n	8004322 <GAME_PLAY_Phase_Management+0x263e>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 800429c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80042a0:	7a1b      	ldrb	r3, [r3, #8]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80042aa:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 80042ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042ba:	4619      	mov	r1, r3
 80042bc:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80042c0:	f7fc f9e0 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 80042c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042d2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 80042d6:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d104      	bne.n	80042e8 <GAME_PLAY_Phase_Management+0x2604>
								ptrYugiohCard_dst->targetPosition = 99;
 80042de:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80042e2:	2263      	movs	r2, #99	; 0x63
 80042e4:	71da      	strb	r2, [r3, #7]
 80042e6:	e004      	b.n	80042f2 <GAME_PLAY_Phase_Management+0x260e>
								ptrYugiohCard_dst->targetPosition = targetpos;
 80042e8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80042ec:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 80042f0:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 80042f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042f6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	f7fd f89a 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8004300:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004304:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2234      	movs	r2, #52	; 0x34
 800430c:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 800430e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004312:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2203      	movs	r2, #3
 800431a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800431e:	f001 b827 	b.w	8005370 <GAME_PLAY_Phase_Management+0x368c>
							state_game->test = 222;
 8004322:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004326:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	22de      	movs	r2, #222	; 0xde
 800432e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8004332:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004336:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2232      	movs	r2, #50	; 0x32
 800433e:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004340:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004344:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004350:	f001 b80e 	b.w	8005370 <GAME_PLAY_Phase_Management+0x368c>
						state_game->test = 223;
 8004354:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004358:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	22df      	movs	r2, #223	; 0xdf
 8004360:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8004364:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004368:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2232      	movs	r2, #50	; 0x32
 8004370:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004372:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004376:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004382:	f000 bff5 	b.w	8005370 <GAME_PLAY_Phase_Management+0x368c>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004386:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800438a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	4bc5      	ldr	r3, [pc, #788]	; (80046a8 <GAME_PLAY_Phase_Management+0x29c4>)
 8004394:	9203      	str	r2, [sp, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	9202      	str	r2, [sp, #8]
 800439a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439e:	9201      	str	r2, [sp, #4]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	9200      	str	r2, [sp, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4ac1      	ldr	r2, [pc, #772]	; (80046ac <GAME_PLAY_Phase_Management+0x29c8>)
 80043a8:	215a      	movs	r1, #90	; 0x5a
 80043aa:	2005      	movs	r0, #5
 80043ac:	f002 fbc3 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80043b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	4bba      	ldr	r3, [pc, #744]	; (80046a8 <GAME_PLAY_Phase_Management+0x29c4>)
 80043be:	9203      	str	r2, [sp, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	9202      	str	r2, [sp, #8]
 80043c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c8:	9201      	str	r2, [sp, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	9200      	str	r2, [sp, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4ab7      	ldr	r2, [pc, #732]	; (80046b0 <GAME_PLAY_Phase_Management+0x29cc>)
 80043d2:	2169      	movs	r1, #105	; 0x69
 80043d4:	2005      	movs	r0, #5
 80043d6:	f002 fbae 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80043da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043de:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	4bb0      	ldr	r3, [pc, #704]	; (80046a8 <GAME_PLAY_Phase_Management+0x29c4>)
 80043e8:	9203      	str	r2, [sp, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	9202      	str	r2, [sp, #8]
 80043ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f2:	9201      	str	r2, [sp, #4]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	9200      	str	r2, [sp, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4aae      	ldr	r2, [pc, #696]	; (80046b4 <GAME_PLAY_Phase_Management+0x29d0>)
 80043fc:	215a      	movs	r1, #90	; 0x5a
 80043fe:	2005      	movs	r0, #5
 8004400:	f002 fb99 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004404:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004408:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	4ba5      	ldr	r3, [pc, #660]	; (80046a8 <GAME_PLAY_Phase_Management+0x29c4>)
 8004412:	9203      	str	r2, [sp, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	9202      	str	r2, [sp, #8]
 8004418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441c:	9201      	str	r2, [sp, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	9200      	str	r2, [sp, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4aa4      	ldr	r2, [pc, #656]	; (80046b8 <GAME_PLAY_Phase_Management+0x29d4>)
 8004426:	2169      	movs	r1, #105	; 0x69
 8004428:	2005      	movs	r0, #5
 800442a:	f002 fb84 	bl	8006b36 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 800442e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004432:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b34      	cmp	r3, #52	; 0x34
 800443c:	d141      	bne.n	80044c2 <GAME_PLAY_Phase_Management+0x27de>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 800443e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004442:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	789b      	ldrb	r3, [r3, #2]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d115      	bne.n	800447a <GAME_PLAY_Phase_Management+0x2796>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 800444e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004452:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2204      	movs	r2, #4
 800445a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 800445e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004462:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2236      	movs	r2, #54	; 0x36
 800446a:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 800446c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004470:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800447a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800447e:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004482:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004486:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800448a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800448e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	6809      	ldr	r1, [r1, #0]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	f7fc fbd8 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800449c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044a0:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80044a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044a8:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80044ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044b0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	6809      	ldr	r1, [r1, #0]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	f7fc fec9 	bl	8001250 <Player_Reading_Card_Monster_Effect>





				break;
 80044be:	f000 bf59 	b.w	8005374 <GAME_PLAY_Phase_Management+0x3690>
				else if ((state_game->action == 53 ))
 80044c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b35      	cmp	r3, #53	; 0x35
 80044d0:	f040 8750 	bne.w	8005374 <GAME_PLAY_Phase_Management+0x3690>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80044d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2326      	movs	r3, #38	; 0x26
 80044e8:	2280      	movs	r2, #128	; 0x80
 80044ea:	215a      	movs	r1, #90	; 0x5a
 80044ec:	2000      	movs	r0, #0
 80044ee:	f002 fc6b 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80044f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044f6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	2300      	movs	r3, #0
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2326      	movs	r3, #38	; 0x26
 8004506:	2280      	movs	r2, #128	; 0x80
 8004508:	215a      	movs	r1, #90	; 0x5a
 800450a:	2000      	movs	r0, #0
 800450c:	f002 fc5c 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004510:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004514:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800451e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8004522:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004526:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800452a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	f001 f8b4 	bl	800569c <YUGIOH_Check_Trap_On_board>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 800453a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b03      	cmp	r3, #3
 8004542:	d14f      	bne.n	80045e4 <GAME_PLAY_Phase_Management+0x2900>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8004544:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004548:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f7fd f81c 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8004552:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004556:	2200      	movs	r2, #0
 8004558:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800455a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800455e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004568:	4619      	mov	r1, r3
 800456a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800456e:	f7fc f889 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 8004572:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004576:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004580:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 800458a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800458e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004598:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80045a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80045b0:	3301      	adds	r3, #1
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 80045c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80045d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2234      	movs	r2, #52	; 0x34
 80045de:	701a      	strb	r2, [r3, #0]
				break;
 80045e0:	f000 bec8 	b.w	8005374 <GAME_PLAY_Phase_Management+0x3690>
						if (idx != 255)
 80045e4:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80045e8:	2bff      	cmp	r3, #255	; 0xff
 80045ea:	f000 86c3 	beq.w	8005374 <GAME_PLAY_Phase_Management+0x3690>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80045ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	f7fc ffc7 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80045fc:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8004600:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004604:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	3308      	adds	r3, #8
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	4413      	add	r3, r2
 8004610:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8004614:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004618:	2200      	movs	r2, #0
 800461a:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 800461c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004620:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800462a:	4619      	mov	r1, r3
 800462c:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004630:	f7fc f828 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8004634:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004638:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004642:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 800464c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004650:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800465a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8004664:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004668:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004672:	3301      	adds	r3, #1
 8004674:	b2da      	uxtb	r2, r3
 8004676:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800467a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8004684:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004688:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8004694:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004698:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2234      	movs	r2, #52	; 0x34
 80046a0:	701a      	strb	r2, [r3, #0]
				break;
 80046a2:	f000 be67 	b.w	8005374 <GAME_PLAY_Phase_Management+0x3690>
 80046a6:	bf00      	nop
 80046a8:	2400000c 	.word	0x2400000c
 80046ac:	08010ed8 	.word	0x08010ed8
 80046b0:	08010ee8 	.word	0x08010ee8
 80046b4:	08010ef4 	.word	0x08010ef4
 80046b8:	08010f04 	.word	0x08010f04
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80046bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	4bc4      	ldr	r3, [pc, #784]	; (80049dc <GAME_PLAY_Phase_Management+0x2cf8>)
 80046ca:	9203      	str	r2, [sp, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	9202      	str	r2, [sp, #8]
 80046d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d4:	9201      	str	r2, [sp, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	9200      	str	r2, [sp, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4ac0      	ldr	r2, [pc, #768]	; (80049e0 <GAME_PLAY_Phase_Management+0x2cfc>)
 80046de:	215a      	movs	r1, #90	; 0x5a
 80046e0:	2005      	movs	r0, #5
 80046e2:	f002 fa28 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80046e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	4bba      	ldr	r3, [pc, #744]	; (80049dc <GAME_PLAY_Phase_Management+0x2cf8>)
 80046f4:	9203      	str	r2, [sp, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	9202      	str	r2, [sp, #8]
 80046fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046fe:	9201      	str	r2, [sp, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	9200      	str	r2, [sp, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4ab7      	ldr	r2, [pc, #732]	; (80049e4 <GAME_PLAY_Phase_Management+0x2d00>)
 8004708:	2169      	movs	r1, #105	; 0x69
 800470a:	2005      	movs	r0, #5
 800470c:	f002 fa13 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004710:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004714:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	4baf      	ldr	r3, [pc, #700]	; (80049dc <GAME_PLAY_Phase_Management+0x2cf8>)
 800471e:	9203      	str	r2, [sp, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	9202      	str	r2, [sp, #8]
 8004724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004728:	9201      	str	r2, [sp, #4]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	9200      	str	r2, [sp, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4aad      	ldr	r2, [pc, #692]	; (80049e8 <GAME_PLAY_Phase_Management+0x2d04>)
 8004732:	215a      	movs	r1, #90	; 0x5a
 8004734:	2005      	movs	r0, #5
 8004736:	f002 f9fe 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800473a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800473e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <GAME_PLAY_Phase_Management+0x2cf8>)
 8004748:	9203      	str	r2, [sp, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	9202      	str	r2, [sp, #8]
 800474e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004752:	9201      	str	r2, [sp, #4]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	9200      	str	r2, [sp, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4aa4      	ldr	r2, [pc, #656]	; (80049ec <GAME_PLAY_Phase_Management+0x2d08>)
 800475c:	2169      	movs	r1, #105	; 0x69
 800475e:	2005      	movs	r0, #5
 8004760:	f002 f9e9 	bl	8006b36 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8004764:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004768:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b34      	cmp	r3, #52	; 0x34
 8004772:	d141      	bne.n	80047f8 <GAME_PLAY_Phase_Management+0x2b14>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8004774:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004778:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	789b      	ldrb	r3, [r3, #2]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d115      	bne.n	80047b0 <GAME_PLAY_Phase_Management+0x2acc>
						//affect
						state_game->action = 54;
 8004784:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004788:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2236      	movs	r2, #54	; 0x36
 8004790:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8004792:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004796:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2204      	movs	r2, #4
 800479e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 80047a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2200      	movs	r2, #0
 80047ae:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 80047b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047b4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80047b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047bc:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80047c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047c4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6809      	ldr	r1, [r1, #0]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f7fc fa3d 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 80047d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047d6:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80047da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047de:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80047e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047e6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	6809      	ldr	r1, [r1, #0]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	f7fc fd2e 	bl	8001250 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 80047f4:	f000 bdc0 	b.w	8005378 <GAME_PLAY_Phase_Management+0x3694>
				else if ((state_game->action == 53 )){
 80047f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047fc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b35      	cmp	r3, #53	; 0x35
 8004806:	f040 85b7 	bne.w	8005378 <GAME_PLAY_Phase_Management+0x3694>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800480a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800480e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	2300      	movs	r3, #0
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	2326      	movs	r3, #38	; 0x26
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	215a      	movs	r1, #90	; 0x5a
 8004822:	2000      	movs	r0, #0
 8004824:	f002 fad0 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004828:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800482c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	2300      	movs	r3, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	2326      	movs	r3, #38	; 0x26
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	215a      	movs	r1, #90	; 0x5a
 8004840:	2000      	movs	r0, #0
 8004842:	f002 fac1 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8004846:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800484a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004854:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8004858:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800485c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004860:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f000 ff19 	bl	800569c <YUGIOH_Check_Trap_On_board>
 800486a:	4603      	mov	r3, r0
 800486c:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 8004870:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d14f      	bne.n	800491a <GAME_PLAY_Phase_Management+0x2c36>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800487a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800487e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	f7fc fe81 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8004888:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800488c:	2200      	movs	r2, #0
 800488e:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8004890:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004894:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800489e:	4619      	mov	r1, r3
 80048a0:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80048a4:	f7fb feee 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 80048a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80048b6:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 80048c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80048ce:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80048d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80048e6:	3301      	adds	r3, #1
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 80048f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048fc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2203      	movs	r2, #3
 8004904:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 8004908:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800490c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2234      	movs	r2, #52	; 0x34
 8004914:	701a      	strb	r2, [r3, #0]
				break;
 8004916:	f000 bd2f 	b.w	8005378 <GAME_PLAY_Phase_Management+0x3694>
						if (idx != 255)
 800491a:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800491e:	2bff      	cmp	r3, #255	; 0xff
 8004920:	f000 852a 	beq.w	8005378 <GAME_PLAY_Phase_Management+0x3694>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8004924:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004928:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	f7fc fe2c 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8004932:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8004936:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800493a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	3308      	adds	r3, #8
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	4413      	add	r3, r2
 8004946:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800494a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800494e:	2200      	movs	r2, #0
 8004950:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8004952:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004956:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004960:	4619      	mov	r1, r3
 8004962:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004966:	f7fb fe8d 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 800496a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800496e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004978:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8004982:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004986:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004990:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 800499a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800499e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80049a8:	3301      	adds	r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 80049ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80049ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2234      	movs	r2, #52	; 0x34
 80049d6:	701a      	strb	r2, [r3, #0]
				break;
 80049d8:	f000 bcce 	b.w	8005378 <GAME_PLAY_Phase_Management+0x3694>
 80049dc:	2400000c 	.word	0x2400000c
 80049e0:	08010ef4 	.word	0x08010ef4
 80049e4:	08010f10 	.word	0x08010f10
 80049e8:	08010f18 	.word	0x08010f18
 80049ec:	08010f28 	.word	0x08010f28
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80049f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	781a      	ldrb	r2, [r3, #0]
 80049fc:	4bb1      	ldr	r3, [pc, #708]	; (8004cc4 <GAME_PLAY_Phase_Management+0x2fe0>)
 80049fe:	9203      	str	r2, [sp, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	9202      	str	r2, [sp, #8]
 8004a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a08:	9201      	str	r2, [sp, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	9200      	str	r2, [sp, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4aad      	ldr	r2, [pc, #692]	; (8004cc8 <GAME_PLAY_Phase_Management+0x2fe4>)
 8004a12:	215a      	movs	r1, #90	; 0x5a
 8004a14:	2005      	movs	r0, #5
 8004a16:	f002 f88e 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004a1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a1e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	4ba7      	ldr	r3, [pc, #668]	; (8004cc4 <GAME_PLAY_Phase_Management+0x2fe0>)
 8004a28:	9203      	str	r2, [sp, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	9202      	str	r2, [sp, #8]
 8004a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	9200      	str	r2, [sp, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4aa3      	ldr	r2, [pc, #652]	; (8004cc8 <GAME_PLAY_Phase_Management+0x2fe4>)
 8004a3c:	215a      	movs	r1, #90	; 0x5a
 8004a3e:	2005      	movs	r0, #5
 8004a40:	f002 f879 	bl	8006b36 <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8004a44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a48:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a56:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004a5a:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	3304      	adds	r3, #4
 8004a66:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8004a6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	4619      	mov	r1, r3
 8004a78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a7c:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004a80:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 8004a90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a94:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b36      	cmp	r3, #54	; 0x36
 8004a9e:	f040 846d 	bne.w	800537c <GAME_PLAY_Phase_Management+0x3698>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8004aa2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004aa6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	785a      	ldrb	r2, [r3, #1]
 8004aae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ab2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004abc:	429a      	cmp	r2, r3
 8004abe:	f080 80a2 	bcs.w	8004c06 <GAME_PLAY_Phase_Management+0x2f22>
					{
						state_game->test = 165;
 8004ac2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ac6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	22a5      	movs	r2, #165	; 0xa5
 8004ace:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8004ad2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ad6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ae4:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004ae8:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	3304      	adds	r3, #4
 8004af4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 8004af8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d11d      	bne.n	8004b3e <GAME_PLAY_Phase_Management+0x2e5a>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 8004b02:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2262      	movs	r2, #98	; 0x62
 8004b0a:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004b0e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fc fd82 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8004b1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8004b3a:	f000 bc1f 	b.w	800537c <GAME_PLAY_Phase_Management+0x3698>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8004b3e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b0e      	cmp	r3, #14
 8004b46:	d004      	beq.n	8004b52 <GAME_PLAY_Phase_Management+0x2e6e>
 8004b48:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	d128      	bne.n	8004ba4 <GAME_PLAY_Phase_Management+0x2ec0>
							state_game->test = 133;
 8004b52:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b56:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2285      	movs	r2, #133	; 0x85
 8004b5e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8004b62:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 fd0d 	bl	8005590 <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004b76:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc fd4e 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8004b86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	3301      	adds	r3, #1
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	705a      	strb	r2, [r3, #1]
				break;
 8004ba2:	e3eb      	b.n	800537c <GAME_PLAY_Phase_Management+0x3698>
						else if(ptrYugiohCard_src->cardSignature == 20){
 8004ba4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b14      	cmp	r3, #20
 8004bac:	f040 83e6 	bne.w	800537c <GAME_PLAY_Phase_Management+0x3698>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004bb0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fc fd31 	bl	8001622 <YUGIOH_To_GY>
							if(state_game->MainGame_State == first_player){
 8004bc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bc4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d108      	bne.n	8004be4 <GAME_PLAY_Phase_Management+0x2f00>
								state_game->MainGame_State = second_player;
 8004bd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bd6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2203      	movs	r2, #3
 8004bde:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8004be2:	e007      	b.n	8004bf4 <GAME_PLAY_Phase_Management+0x2f10>
								state_game->MainGame_State = first_player;
 8004be4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004be8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 8004bf4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bf8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8004c04:	e3ba      	b.n	800537c <GAME_PLAY_Phase_Management+0x3698>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004c06:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c0a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	2300      	movs	r3, #0
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2326      	movs	r3, #38	; 0x26
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	215a      	movs	r1, #90	; 0x5a
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f002 f8d2 	bl	8006dc8 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004c24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c28:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	2300      	movs	r3, #0
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2326      	movs	r3, #38	; 0x26
 8004c38:	2280      	movs	r2, #128	; 0x80
 8004c3a:	215a      	movs	r1, #90	; 0x5a
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f002 f8c3 	bl	8006dc8 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8004c48:	e020      	b.n	8004c8c <GAME_PLAY_Phase_Management+0x2fa8>
							state_game->ptrChainUser[i] = &dummyPlayer;
 8004c4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	f107 0210 	add.w	r2, r7, #16
 8004c64:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 8004c66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c6a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c74:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f107 0210 	add.w	r2, r7, #16
 8004c80:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004c82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c86:	3301      	adds	r3, #1
 8004c88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8004c8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	ddda      	ble.n	8004c4a <GAME_PLAY_Phase_Management+0x2f66>
						state_game->ChainCount = 0;
 8004c94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c98:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 8004ca4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ca8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2232      	movs	r2, #50	; 0x32
 8004cb0:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8004cb2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cb6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004cc2:	e35b      	b.n	800537c <GAME_PLAY_Phase_Management+0x3698>
 8004cc4:	2400000c 	.word	0x2400000c
 8004cc8:	08010f38 	.word	0x08010f38
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8004ccc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cd0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cda:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8004cde:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004ce2:	791b      	ldrb	r3, [r3, #4]
 8004ce4:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 8004ce8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004cec:	79db      	ldrb	r3, [r3, #7]
 8004cee:	2b63      	cmp	r3, #99	; 0x63
 8004cf0:	d122      	bne.n	8004d38 <GAME_PLAY_Phase_Management+0x3054>
				{
					playerDef->life_point -= atk*100;
 8004cf2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cf6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	889a      	ldrh	r2, [r3, #4]
 8004cfe:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	4619      	mov	r1, r3
 8004d06:	0249      	lsls	r1, r1, #9
 8004d08:	1ac9      	subs	r1, r1, r3
 8004d0a:	0089      	lsls	r1, r1, #2
 8004d0c:	4419      	add	r1, r3
 8004d0e:	00c9      	lsls	r1, r1, #3
 8004d10:	1acb      	subs	r3, r1, r3
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d1e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8004d26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d2a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2206      	movs	r2, #6
 8004d32:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 8004d36:	e323      	b.n	8005380 <GAME_PLAY_Phase_Management+0x369c>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8004d38:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004d3c:	79db      	ldrb	r3, [r3, #7]
 8004d3e:	2b62      	cmp	r3, #98	; 0x62
 8004d40:	d108      	bne.n	8004d54 <GAME_PLAY_Phase_Management+0x3070>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8004d42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d46:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2206      	movs	r2, #6
 8004d4e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004d52:	e315      	b.n	8005380 <GAME_PLAY_Phase_Management+0x369c>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8004d54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d58:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8004d64:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004d68:	79db      	ldrb	r3, [r3, #7]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d70:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004d74:	010b      	lsls	r3, r1, #4
 8004d76:	3308      	adds	r3, #8
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8004d80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d84:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2236      	movs	r2, #54	; 0x36
 8004d8c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8004d90:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d94:	789b      	ldrb	r3, [r3, #2]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f040 8100 	bne.w	8004f9c <GAME_PLAY_Phase_Management+0x32b8>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004d9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004da0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	4b77      	ldr	r3, [pc, #476]	; (8004f88 <GAME_PLAY_Phase_Management+0x32a4>)
 8004daa:	9203      	str	r2, [sp, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	9202      	str	r2, [sp, #8]
 8004db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db4:	9201      	str	r2, [sp, #4]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	9200      	str	r2, [sp, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a73      	ldr	r2, [pc, #460]	; (8004f8c <GAME_PLAY_Phase_Management+0x32a8>)
 8004dbe:	215a      	movs	r1, #90	; 0x5a
 8004dc0:	2005      	movs	r0, #5
 8004dc2:	f001 feb8 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004dc6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	4b6d      	ldr	r3, [pc, #436]	; (8004f88 <GAME_PLAY_Phase_Management+0x32a4>)
 8004dd4:	9203      	str	r2, [sp, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	9202      	str	r2, [sp, #8]
 8004dda:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004dde:	9201      	str	r2, [sp, #4]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	9200      	str	r2, [sp, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6a      	ldr	r2, [pc, #424]	; (8004f90 <GAME_PLAY_Phase_Management+0x32ac>)
 8004de8:	2169      	movs	r1, #105	; 0x69
 8004dea:	2005      	movs	r0, #5
 8004dec:	f001 fea3 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004df0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004df4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	4b62      	ldr	r3, [pc, #392]	; (8004f88 <GAME_PLAY_Phase_Management+0x32a4>)
 8004dfe:	9203      	str	r2, [sp, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	9202      	str	r2, [sp, #8]
 8004e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e08:	9201      	str	r2, [sp, #4]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	9200      	str	r2, [sp, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a60      	ldr	r2, [pc, #384]	; (8004f94 <GAME_PLAY_Phase_Management+0x32b0>)
 8004e12:	215a      	movs	r1, #90	; 0x5a
 8004e14:	2005      	movs	r0, #5
 8004e16:	f001 fe8e 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004e1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e1e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	4b58      	ldr	r3, [pc, #352]	; (8004f88 <GAME_PLAY_Phase_Management+0x32a4>)
 8004e28:	9203      	str	r2, [sp, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	9202      	str	r2, [sp, #8]
 8004e2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e32:	9201      	str	r2, [sp, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	9200      	str	r2, [sp, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a57      	ldr	r2, [pc, #348]	; (8004f98 <GAME_PLAY_Phase_Management+0x32b4>)
 8004e3c:	2169      	movs	r1, #105	; 0x69
 8004e3e:	2005      	movs	r0, #5
 8004e40:	f001 fe79 	bl	8006b36 <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8004e44:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004e48:	795b      	ldrb	r3, [r3, #5]
 8004e4a:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 8004e4e:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004e52:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d25e      	bcs.n	8004f18 <GAME_PLAY_Phase_Management+0x3234>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004e5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2326      	movs	r3, #38	; 0x26
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	215a      	movs	r1, #90	; 0x5a
 8004e72:	2000      	movs	r0, #0
 8004e74:	f001 ffa8 	bl	8006dc8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004e78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e7c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	2300      	movs	r3, #0
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	2326      	movs	r3, #38	; 0x26
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	215a      	movs	r1, #90	; 0x5a
 8004e90:	2000      	movs	r0, #0
 8004e92:	f001 ff99 	bl	8006dc8 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 8004e96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	889a      	ldrh	r2, [r3, #4]
 8004ea2:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 8004ea6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004eaa:	1acb      	subs	r3, r1, r3
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	4619      	mov	r1, r3
 8004eb0:	0249      	lsls	r1, r1, #9
 8004eb2:	1ac9      	subs	r1, r1, r3
 8004eb4:	0089      	lsls	r1, r1, #2
 8004eb6:	4419      	add	r1, r3
 8004eb8:	00c9      	lsls	r1, r1, #3
 8004eba:	1acb      	subs	r3, r1, r3
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ec8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8004ed0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004ed4:	799b      	ldrb	r3, [r3, #6]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004edc:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8004ee0:	010b      	lsls	r3, r1, #4
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	441a      	add	r2, r3
 8004ee8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004eec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	f7fc fb95 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8004ef8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004efc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f7fc fa97 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004f06:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f0a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2206      	movs	r2, #6
 8004f12:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004f16:	e233      	b.n	8005380 <GAME_PLAY_Phase_Management+0x369c>
						else if(atk > def){
 8004f18:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004f1c:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8004f20:	429a      	cmp	r2, r3
 8004f22:	f240 822d 	bls.w	8005380 <GAME_PLAY_Phase_Management+0x369c>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004f26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	2300      	movs	r3, #0
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2326      	movs	r3, #38	; 0x26
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	215a      	movs	r1, #90	; 0x5a
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f001 ff42 	bl	8006dc8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004f44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f48:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2326      	movs	r3, #38	; 0x26
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	215a      	movs	r1, #90	; 0x5a
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f001 ff33 	bl	8006dc8 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8004f62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f66:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f6a:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	f7fc fb57 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004f74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2206      	movs	r2, #6
 8004f80:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004f84:	e1fc      	b.n	8005380 <GAME_PLAY_Phase_Management+0x369c>
 8004f86:	bf00      	nop
 8004f88:	2400000c 	.word	0x2400000c
 8004f8c:	08010f48 	.word	0x08010f48
 8004f90:	08010f58 	.word	0x08010f58
 8004f94:	08010f68 	.word	0x08010f68
 8004f98:	08010f78 	.word	0x08010f78
					else if(ptrYugiohCard_dst->cardState == 1){
 8004f9c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004fa0:	789b      	ldrb	r3, [r3, #2]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	f040 81ec 	bne.w	8005380 <GAME_PLAY_Phase_Management+0x369c>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004fa8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	781a      	ldrb	r2, [r3, #0]
 8004fb4:	4bba      	ldr	r3, [pc, #744]	; (80052a0 <GAME_PLAY_Phase_Management+0x35bc>)
 8004fb6:	9203      	str	r2, [sp, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	9202      	str	r2, [sp, #8]
 8004fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fc0:	9201      	str	r2, [sp, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	9200      	str	r2, [sp, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4ab6      	ldr	r2, [pc, #728]	; (80052a4 <GAME_PLAY_Phase_Management+0x35c0>)
 8004fca:	215a      	movs	r1, #90	; 0x5a
 8004fcc:	2005      	movs	r0, #5
 8004fce:	f001 fdb2 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004fd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fd6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	4bb0      	ldr	r3, [pc, #704]	; (80052a0 <GAME_PLAY_Phase_Management+0x35bc>)
 8004fe0:	9203      	str	r2, [sp, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	9202      	str	r2, [sp, #8]
 8004fe6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004fea:	9201      	str	r2, [sp, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	9200      	str	r2, [sp, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4aad      	ldr	r2, [pc, #692]	; (80052a8 <GAME_PLAY_Phase_Management+0x35c4>)
 8004ff4:	2169      	movs	r1, #105	; 0x69
 8004ff6:	2005      	movs	r0, #5
 8004ff8:	f001 fd9d 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004ffc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005000:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	4ba5      	ldr	r3, [pc, #660]	; (80052a0 <GAME_PLAY_Phase_Management+0x35bc>)
 800500a:	9203      	str	r2, [sp, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	9202      	str	r2, [sp, #8]
 8005010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005014:	9201      	str	r2, [sp, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	9200      	str	r2, [sp, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4aa3      	ldr	r2, [pc, #652]	; (80052ac <GAME_PLAY_Phase_Management+0x35c8>)
 800501e:	215a      	movs	r1, #90	; 0x5a
 8005020:	2005      	movs	r0, #5
 8005022:	f001 fd88 	bl	8006b36 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005026:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800502a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781a      	ldrb	r2, [r3, #0]
 8005032:	4b9b      	ldr	r3, [pc, #620]	; (80052a0 <GAME_PLAY_Phase_Management+0x35bc>)
 8005034:	9203      	str	r2, [sp, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	9202      	str	r2, [sp, #8]
 800503a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800503e:	9201      	str	r2, [sp, #4]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	9200      	str	r2, [sp, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a9a      	ldr	r2, [pc, #616]	; (80052b0 <GAME_PLAY_Phase_Management+0x35cc>)
 8005048:	2169      	movs	r1, #105	; 0x69
 800504a:	2005      	movs	r0, #5
 800504c:	f001 fd73 	bl	8006b36 <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8005050:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005054:	791b      	ldrb	r3, [r3, #4]
 8005056:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 800505a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800505e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	223c      	movs	r2, #60	; 0x3c
 8005066:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 800506a:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 800506e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005072:	429a      	cmp	r2, r3
 8005074:	d266      	bcs.n	8005144 <GAME_PLAY_Phase_Management+0x3460>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005076:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800507a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	2300      	movs	r3, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2326      	movs	r3, #38	; 0x26
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	215a      	movs	r1, #90	; 0x5a
 800508e:	2000      	movs	r0, #0
 8005090:	f001 fe9a 	bl	8006dc8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005094:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005098:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	2300      	movs	r3, #0
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2326      	movs	r3, #38	; 0x26
 80050a8:	2280      	movs	r2, #128	; 0x80
 80050aa:	215a      	movs	r1, #90	; 0x5a
 80050ac:	2000      	movs	r0, #0
 80050ae:	f001 fe8b 	bl	8006dc8 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 80050b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	223d      	movs	r2, #61	; 0x3d
 80050be:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 80050c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	889a      	ldrh	r2, [r3, #4]
 80050ce:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 80050d2:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80050d6:	1acb      	subs	r3, r1, r3
 80050d8:	b29b      	uxth	r3, r3
 80050da:	4619      	mov	r1, r3
 80050dc:	0249      	lsls	r1, r1, #9
 80050de:	1ac9      	subs	r1, r1, r3
 80050e0:	0089      	lsls	r1, r1, #2
 80050e2:	4419      	add	r1, r3
 80050e4:	00c9      	lsls	r1, r1, #3
 80050e6:	1acb      	subs	r3, r1, r3
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 80050fc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005100:	799b      	ldrb	r3, [r3, #6]
 8005102:	4619      	mov	r1, r3
 8005104:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005108:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800510c:	010b      	lsls	r3, r1, #4
 800510e:	3308      	adds	r3, #8
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	441a      	add	r2, r3
 8005114:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005118:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800511c:	4611      	mov	r1, r2
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	f7fc fa7f 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005124:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005128:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	f7fc f981 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005132:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005136:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2206      	movs	r2, #6
 800513e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005142:	e11d      	b.n	8005380 <GAME_PLAY_Phase_Management+0x369c>
						else if(atk > atk2){
 8005144:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005148:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 800514c:	429a      	cmp	r2, r3
 800514e:	f240 8117 	bls.w	8005380 <GAME_PLAY_Phase_Management+0x369c>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005152:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005156:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2326      	movs	r3, #38	; 0x26
 8005166:	2280      	movs	r2, #128	; 0x80
 8005168:	215a      	movs	r1, #90	; 0x5a
 800516a:	2000      	movs	r0, #0
 800516c:	f001 fe2c 	bl	8006dc8 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005170:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005174:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2326      	movs	r3, #38	; 0x26
 8005184:	2280      	movs	r2, #128	; 0x80
 8005186:	215a      	movs	r1, #90	; 0x5a
 8005188:	2000      	movs	r0, #0
 800518a:	f001 fe1d 	bl	8006dc8 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 800518e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005192:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2246      	movs	r2, #70	; 0x46
 800519a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 800519e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051a2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	889a      	ldrh	r2, [r3, #4]
 80051aa:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 80051ae:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 80051b2:	1acb      	subs	r3, r1, r3
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	0249      	lsls	r1, r1, #9
 80051ba:	1ac9      	subs	r1, r1, r3
 80051bc:	0089      	lsls	r1, r1, #2
 80051be:	4419      	add	r1, r3
 80051c0:	00c9      	lsls	r1, r1, #3
 80051c2:	1acb      	subs	r3, r1, r3
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80051d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80051e0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	f7fc fa1c 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80051ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2206      	movs	r2, #6
 80051f6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80051fa:	e0c1      	b.n	8005380 <GAME_PLAY_Phase_Management+0x369c>
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80051fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005200:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	781a      	ldrb	r2, [r3, #0]
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <GAME_PLAY_Phase_Management+0x35bc>)
 800520a:	9203      	str	r2, [sp, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	9202      	str	r2, [sp, #8]
 8005210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005214:	9201      	str	r2, [sp, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	9200      	str	r2, [sp, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <GAME_PLAY_Phase_Management+0x35d0>)
 800521e:	215a      	movs	r1, #90	; 0x5a
 8005220:	2005      	movs	r0, #5
 8005222:	f001 fc88 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005226:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800522a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <GAME_PLAY_Phase_Management+0x35bc>)
 8005234:	9203      	str	r2, [sp, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	9202      	str	r2, [sp, #8]
 800523a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523e:	9201      	str	r2, [sp, #4]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	9200      	str	r2, [sp, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <GAME_PLAY_Phase_Management+0x35d4>)
 8005248:	215a      	movs	r1, #90	; 0x5a
 800524a:	2005      	movs	r0, #5
 800524c:	f001 fc73 	bl	8006b36 <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8005250:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005254:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800525e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 8005262:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8005266:	f7fb fa44 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 800526a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800526e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	889b      	ldrh	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <GAME_PLAY_Phase_Management+0x35aa>
 800527a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800527e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	889b      	ldrh	r3, [r3, #4]
 8005286:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800528a:	4293      	cmp	r3, r2
 800528c:	d916      	bls.n	80052bc <GAME_PLAY_Phase_Management+0x35d8>
					state_game->MainGame_State = Game_Ended;
 800528e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005292:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2204      	movs	r2, #4
 800529a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 800529e:	e070      	b.n	8005382 <GAME_PLAY_Phase_Management+0x369e>
 80052a0:	2400000c 	.word	0x2400000c
 80052a4:	08010f48 	.word	0x08010f48
 80052a8:	08010f8c 	.word	0x08010f8c
 80052ac:	08010f68 	.word	0x08010f68
 80052b0:	08010f9c 	.word	0x08010f9c
 80052b4:	08010fb0 	.word	0x08010fb0
 80052b8:	08010fc0 	.word	0x08010fc0
					state_game->action = 50;
 80052bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2232      	movs	r2, #50	; 0x32
 80052c8:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80052ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	2300      	movs	r3, #0
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	2326      	movs	r3, #38	; 0x26
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	215a      	movs	r1, #90	; 0x5a
 80052e2:	2000      	movs	r0, #0
 80052e4:	f001 fd70 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80052e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052ec:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2326      	movs	r3, #38	; 0x26
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	215a      	movs	r1, #90	; 0x5a
 8005300:	2000      	movs	r0, #0
 8005302:	f001 fd61 	bl	8006dc8 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005306:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800530a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	781a      	ldrb	r2, [r3, #0]
 8005312:	4b22      	ldr	r3, [pc, #136]	; (800539c <GAME_PLAY_Phase_Management+0x36b8>)
 8005314:	9203      	str	r2, [sp, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	9202      	str	r2, [sp, #8]
 800531a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800531e:	9201      	str	r2, [sp, #4]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	9200      	str	r2, [sp, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <GAME_PLAY_Phase_Management+0x36bc>)
 8005328:	215a      	movs	r1, #90	; 0x5a
 800532a:	2005      	movs	r0, #5
 800532c:	f001 fc03 	bl	8006b36 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005330:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005334:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <GAME_PLAY_Phase_Management+0x36b8>)
 800533e:	9203      	str	r2, [sp, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	9202      	str	r2, [sp, #8]
 8005344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005348:	9201      	str	r2, [sp, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	9200      	str	r2, [sp, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <GAME_PLAY_Phase_Management+0x36c0>)
 8005352:	215a      	movs	r1, #90	; 0x5a
 8005354:	2005      	movs	r0, #5
 8005356:	f001 fbee 	bl	8006b36 <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800535a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800535e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800536a:	e00a      	b.n	8005382 <GAME_PLAY_Phase_Management+0x369e>
				break;
 800536c:	bf00      	nop
 800536e:	e00f      	b.n	8005390 <GAME_PLAY_Phase_Management+0x36ac>
				break;
 8005370:	bf00      	nop
 8005372:	e00d      	b.n	8005390 <GAME_PLAY_Phase_Management+0x36ac>
				break;
 8005374:	bf00      	nop
 8005376:	e00b      	b.n	8005390 <GAME_PLAY_Phase_Management+0x36ac>
				break;
 8005378:	bf00      	nop
 800537a:	e009      	b.n	8005390 <GAME_PLAY_Phase_Management+0x36ac>
				break;
 800537c:	bf00      	nop
 800537e:	e007      	b.n	8005390 <GAME_PLAY_Phase_Management+0x36ac>
				break;
 8005380:	bf00      	nop
			}
			break;
 8005382:	e005      	b.n	8005390 <GAME_PLAY_Phase_Management+0x36ac>
		break;
 8005384:	bf00      	nop
 8005386:	e004      	b.n	8005392 <GAME_PLAY_Phase_Management+0x36ae>
		break;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <GAME_PLAY_Phase_Management+0x36ae>
		break;
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <GAME_PLAY_Phase_Management+0x36ae>
			break;
 8005390:	bf00      	nop

	}
}
 8005392:	bf00      	nop
 8005394:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}
 800539c:	2400000c 	.word	0x2400000c
 80053a0:	08010fb0 	.word	0x08010fb0
 80053a4:	08010fc0 	.word	0x08010fc0

080053a8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3338      	adds	r3, #56	; 0x38
 80053b4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80053b6:	2300      	movs	r3, #0
 80053b8:	72fb      	strb	r3, [r7, #11]
 80053ba:	e00d      	b.n	80053d8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fc f92b 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3310      	adds	r3, #16
 80053d0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	3301      	adds	r3, #1
 80053d6:	72fb      	strb	r3, [r7, #11]
 80053d8:	7afb      	ldrb	r3, [r7, #11]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d9ee      	bls.n	80053bc <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3308      	adds	r3, #8
 80053f6:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3338      	adds	r3, #56	; 0x38
 80053fc:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	3308      	adds	r3, #8
 8005402:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	3338      	adds	r3, #56	; 0x38
 8005408:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
 800540e:	e00d      	b.n	800542c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8005418:	6979      	ldr	r1, [r7, #20]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc f901 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3310      	adds	r3, #16
 8005424:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	3301      	adds	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d9ee      	bls.n	8005410 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8005432:	2300      	movs	r3, #0
 8005434:	73bb      	strb	r3, [r7, #14]
 8005436:	e00d      	b.n	8005454 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8005440:	6939      	ldr	r1, [r7, #16]
 8005442:	6838      	ldr	r0, [r7, #0]
 8005444:	f7fc f8ed 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	3310      	adds	r3, #16
 800544c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	3301      	adds	r3, #1
 8005452:	73bb      	strb	r3, [r7, #14]
 8005454:	7bbb      	ldrb	r3, [r7, #14]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d9ee      	bls.n	8005438 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800547a:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3368      	adds	r3, #104	; 0x68
 8005480:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3368      	adds	r3, #104	; 0x68
 8005486:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8005488:	2300      	movs	r3, #0
 800548a:	74fb      	strb	r3, [r7, #19]
 800548c:	e010      	b.n	80054b0 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	429a      	cmp	r2, r3
 8005498:	d104      	bne.n	80054a4 <YUGIOH_Reborn+0x40>
			flag = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800549e:	7cfb      	ldrb	r3, [r7, #19]
 80054a0:	77bb      	strb	r3, [r7, #30]
			break;
 80054a2:	e008      	b.n	80054b6 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3310      	adds	r3, #16
 80054a8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	3301      	adds	r3, #1
 80054ae:	74fb      	strb	r3, [r7, #19]
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b13      	cmp	r3, #19
 80054b4:	d9eb      	bls.n	800548e <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3338      	adds	r3, #56	; 0x38
 80054ba:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80054bc:	7ffb      	ldrb	r3, [r7, #31]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d134      	bne.n	800552c <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	799a      	ldrb	r2, [r3, #6]
 80054c6:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <YUGIOH_Reborn+0xd0>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	0899      	lsrs	r1, r3, #2
 80054ce:	460b      	mov	r3, r1
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	440b      	add	r3, r1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	3308      	adds	r3, #8
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	69b8      	ldr	r0, [r7, #24]
 80054e8:	f7fb f8cc 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80054ec:	7fbb      	ldrb	r3, [r7, #30]
 80054ee:	3301      	adds	r3, #1
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	3368      	adds	r3, #104	; 0x68
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	4413      	add	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80054fa:	7fbb      	ldrb	r3, [r7, #30]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	3368      	adds	r3, #104	; 0x68
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4413      	add	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8005506:	7fbb      	ldrb	r3, [r7, #30]
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e00c      	b.n	8005526 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800550c:	6979      	ldr	r1, [r7, #20]
 800550e:	69b8      	ldr	r0, [r7, #24]
 8005510:	f7fb f8b8 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	3310      	adds	r3, #16
 8005518:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3310      	adds	r3, #16
 800551e:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b13      	cmp	r3, #19
 800552a:	ddef      	ble.n	800550c <YUGIOH_Reborn+0xa8>
		}


	}
}
 800552c:	bf00      	nop
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	aaaaaaab 	.word	0xaaaaaaab

08005538 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005546:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800554e:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	799a      	ldrb	r2, [r3, #6]
 8005554:	4b0d      	ldr	r3, [pc, #52]	; (800558c <YUGIOH_Ancient_Rules+0x54>)
 8005556:	fba3 1302 	umull	r1, r3, r3, r2
 800555a:	0899      	lsrs	r1, r3, #2
 800555c:	460b      	mov	r3, r1
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	440b      	add	r3, r1
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3308      	adds	r3, #8
 800556c:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	3308      	adds	r3, #8
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	6978      	ldr	r0, [r7, #20]
 800557e:	f7fb f881 	bl	8000684 <YUGIOH_card_copy>

}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	aaaaaaab 	.word	0xaaaaaaab

08005590 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3308      	adds	r3, #8
 800559e:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3338      	adds	r3, #56	; 0x38
 80055a4:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3338      	adds	r3, #56	; 0x38
 80055b0:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80055b6:	2300      	movs	r3, #0
 80055b8:	73bb      	strb	r3, [r7, #14]
 80055ba:	e00c      	b.n	80055d6 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	3301      	adds	r3, #1
 80055c8:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	3310      	adds	r3, #16
 80055ce:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	3301      	adds	r3, #1
 80055d4:	73bb      	strb	r3, [r7, #14]
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d9ef      	bls.n	80055bc <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80055dc:	2300      	movs	r3, #0
 80055de:	737b      	strb	r3, [r7, #13]
 80055e0:	e00c      	b.n	80055fc <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d102      	bne.n	80055f0 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	3301      	adds	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3310      	adds	r3, #16
 80055f4:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80055f6:	7b7b      	ldrb	r3, [r7, #13]
 80055f8:	3301      	adds	r3, #1
 80055fa:	737b      	strb	r3, [r7, #13]
 80055fc:	7b7b      	ldrb	r3, [r7, #13]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d9ef      	bls.n	80055e2 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	889a      	ldrh	r2, [r3, #4]
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	b29b      	uxth	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	0089      	lsls	r1, r1, #2
 800560e:	440b      	add	r3, r1
 8005610:	4619      	mov	r1, r3
 8005612:	0109      	lsls	r1, r1, #4
 8005614:	1acb      	subs	r3, r1, r3
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	b29b      	uxth	r3, r3
 800561a:	4413      	add	r3, r2
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	809a      	strh	r2, [r3, #4]

}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005640:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005648:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	799a      	ldrb	r2, [r3, #6]
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <YUGIOH_Stop_Defense+0x68>)
 8005650:	fba3 1302 	umull	r1, r3, r3, r2
 8005654:	0899      	lsrs	r1, r3, #2
 8005656:	460b      	mov	r3, r1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	440b      	add	r3, r1
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	3308      	adds	r3, #8
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	4413      	add	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	789b      	ldrb	r3, [r3, #2]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <YUGIOH_Stop_Defense+0x5a>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	709a      	strb	r2, [r3, #2]
	}

}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	aaaaaaab 	.word	0xaaaaaaab

0800569c <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3308      	adds	r3, #8
 80056aa:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80056ac:	2300      	movs	r3, #0
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	e016      	b.n	80056e0 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10a      	bne.n	80056d4 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	7a5b      	ldrb	r3, [r3, #9]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d006      	beq.n	80056d4 <YUGIOH_Check_Trap_On_board+0x38>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d102      	bne.n	80056d4 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e009      	b.n	80056e8 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3310      	adds	r3, #16
 80056d8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	3301      	adds	r3, #1
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	dde5      	ble.n	80056b2 <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 80056e6:	23ff      	movs	r3, #255	; 0xff
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3308      	adds	r3, #8
 8005702:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8005704:	2300      	movs	r3, #0
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	e016      	b.n	8005738 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	429a      	cmp	r2, r3
 8005714:	d10a      	bne.n	800572c <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	7a5b      	ldrb	r3, [r3, #9]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <YUGIOH_Check_Spell_On_board+0x38>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d102      	bne.n	800572c <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e009      	b.n	8005740 <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3310      	adds	r3, #16
 8005730:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	3301      	adds	r3, #1
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b02      	cmp	r3, #2
 800573c:	dde5      	ble.n	800570a <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 800573e:	23ff      	movs	r3, #255	; 0xff
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3308      	adds	r3, #8
 8005758:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	e00c      	b.n	800577a <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3310      	adds	r3, #16
 8005772:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3301      	adds	r3, #1
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b02      	cmp	r3, #2
 800577e:	ddef      	ble.n	8005760 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3338      	adds	r3, #56	; 0x38
 800579a:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 800579c:	2303      	movs	r3, #3
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	e00c      	b.n	80057bc <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3310      	adds	r3, #16
 80057b4:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b05      	cmp	r3, #5
 80057c0:	ddef      	ble.n	80057a2 <YUGIOH_Monster_Activated+0x14>
	}
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <MainGUI>:
void MainGUI()
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80057d6:	4b55      	ldr	r3, [pc, #340]	; (800592c <MainGUI+0x15c>)
 80057d8:	2200      	movs	r2, #0
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80057e0:	9201      	str	r2, [sp, #4]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	9200      	str	r2, [sp, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a51      	ldr	r2, [pc, #324]	; (8005930 <MainGUI+0x160>)
 80057ea:	2105      	movs	r1, #5
 80057ec:	2005      	movs	r0, #5
 80057ee:	f001 f958 	bl	8006aa2 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80057f2:	4b4e      	ldr	r3, [pc, #312]	; (800592c <MainGUI+0x15c>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	9202      	str	r2, [sp, #8]
 80057f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fc:	9201      	str	r2, [sp, #4]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	9200      	str	r2, [sp, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a4b      	ldr	r2, [pc, #300]	; (8005934 <MainGUI+0x164>)
 8005806:	2114      	movs	r1, #20
 8005808:	2005      	movs	r0, #5
 800580a:	f001 f94a 	bl	8006aa2 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800580e:	4b47      	ldr	r3, [pc, #284]	; (800592c <MainGUI+0x15c>)
 8005810:	2200      	movs	r2, #0
 8005812:	9202      	str	r2, [sp, #8]
 8005814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005818:	9201      	str	r2, [sp, #4]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	9200      	str	r2, [sp, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a45      	ldr	r2, [pc, #276]	; (8005938 <MainGUI+0x168>)
 8005822:	2123      	movs	r1, #35	; 0x23
 8005824:	2005      	movs	r0, #5
 8005826:	f001 f93c 	bl	8006aa2 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800582a:	4b40      	ldr	r3, [pc, #256]	; (800592c <MainGUI+0x15c>)
 800582c:	2200      	movs	r2, #0
 800582e:	9202      	str	r2, [sp, #8]
 8005830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005834:	9201      	str	r2, [sp, #4]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	9200      	str	r2, [sp, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3f      	ldr	r2, [pc, #252]	; (800593c <MainGUI+0x16c>)
 800583e:	2123      	movs	r1, #35	; 0x23
 8005840:	203c      	movs	r0, #60	; 0x3c
 8005842:	f001 f8e4 	bl	8006a0e <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005846:	4b39      	ldr	r3, [pc, #228]	; (800592c <MainGUI+0x15c>)
 8005848:	2200      	movs	r2, #0
 800584a:	9202      	str	r2, [sp, #8]
 800584c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005850:	9201      	str	r2, [sp, #4]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	9200      	str	r2, [sp, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a39      	ldr	r2, [pc, #228]	; (8005940 <MainGUI+0x170>)
 800585a:	2132      	movs	r1, #50	; 0x32
 800585c:	2000      	movs	r0, #0
 800585e:	f001 f920 	bl	8006aa2 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <MainGUI+0x15c>)
 8005864:	2200      	movs	r2, #0
 8005866:	9202      	str	r2, [sp, #8]
 8005868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800586c:	9201      	str	r2, [sp, #4]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	9200      	str	r2, [sp, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a33      	ldr	r2, [pc, #204]	; (8005944 <MainGUI+0x174>)
 8005876:	213c      	movs	r1, #60	; 0x3c
 8005878:	2000      	movs	r0, #0
 800587a:	f001 f912 	bl	8006aa2 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <MainGUI+0x15c>)
 8005880:	2200      	movs	r2, #0
 8005882:	9202      	str	r2, [sp, #8]
 8005884:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005888:	9201      	str	r2, [sp, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	9200      	str	r2, [sp, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2d      	ldr	r2, [pc, #180]	; (8005948 <MainGUI+0x178>)
 8005892:	2105      	movs	r1, #5
 8005894:	2005      	movs	r0, #5
 8005896:	f001 f8ba 	bl	8006a0e <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800589a:	4b24      	ldr	r3, [pc, #144]	; (800592c <MainGUI+0x15c>)
 800589c:	2200      	movs	r2, #0
 800589e:	9202      	str	r2, [sp, #8]
 80058a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a4:	9201      	str	r2, [sp, #4]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	9200      	str	r2, [sp, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a21      	ldr	r2, [pc, #132]	; (8005934 <MainGUI+0x164>)
 80058ae:	2114      	movs	r1, #20
 80058b0:	2005      	movs	r0, #5
 80058b2:	f001 f8ac 	bl	8006a0e <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <MainGUI+0x15c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	9202      	str	r2, [sp, #8]
 80058bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c0:	9201      	str	r2, [sp, #4]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	9200      	str	r2, [sp, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a20      	ldr	r2, [pc, #128]	; (800594c <MainGUI+0x17c>)
 80058ca:	2123      	movs	r1, #35	; 0x23
 80058cc:	2005      	movs	r0, #5
 80058ce:	f001 f89e 	bl	8006a0e <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80058d2:	4b16      	ldr	r3, [pc, #88]	; (800592c <MainGUI+0x15c>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	9202      	str	r2, [sp, #8]
 80058d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058dc:	9201      	str	r2, [sp, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	9200      	str	r2, [sp, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <MainGUI+0x16c>)
 80058e6:	2123      	movs	r1, #35	; 0x23
 80058e8:	203c      	movs	r0, #60	; 0x3c
 80058ea:	f001 f8da 	bl	8006aa2 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <MainGUI+0x15c>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	9202      	str	r2, [sp, #8]
 80058f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f8:	9201      	str	r2, [sp, #4]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	9200      	str	r2, [sp, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <MainGUI+0x170>)
 8005902:	2132      	movs	r1, #50	; 0x32
 8005904:	2000      	movs	r0, #0
 8005906:	f001 f882 	bl	8006a0e <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800590a:	4b08      	ldr	r3, [pc, #32]	; (800592c <MainGUI+0x15c>)
 800590c:	2200      	movs	r2, #0
 800590e:	9202      	str	r2, [sp, #8]
 8005910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005914:	9201      	str	r2, [sp, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	9200      	str	r2, [sp, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a09      	ldr	r2, [pc, #36]	; (8005944 <MainGUI+0x174>)
 800591e:	213c      	movs	r1, #60	; 0x3c
 8005920:	2000      	movs	r0, #0
 8005922:	f001 f874 	bl	8006a0e <ST7735_WriteString>
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	2400000c 	.word	0x2400000c
 8005930:	08010cbc 	.word	0x08010cbc
 8005934:	08010fd0 	.word	0x08010fd0
 8005938:	08010fe0 	.word	0x08010fe0
 800593c:	08010fe8 	.word	0x08010fe8
 8005940:	08010ff0 	.word	0x08010ff0
 8005944:	08010c68 	.word	0x08010c68
 8005948:	08010c5c 	.word	0x08010c5c
 800594c:	08011004 	.word	0x08011004

08005950 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af04      	add	r7, sp, #16
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 800595a:	2300      	movs	r3, #0
 800595c:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 800595e:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <LCDvalue+0x134>)
 8005960:	881a      	ldrh	r2, [r3, #0]
 8005962:	4b49      	ldr	r3, [pc, #292]	; (8005a88 <LCDvalue+0x138>)
 8005964:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8005966:	4b49      	ldr	r3, [pc, #292]	; (8005a8c <LCDvalue+0x13c>)
 8005968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800596c:	4a48      	ldr	r2, [pc, #288]	; (8005a90 <LCDvalue+0x140>)
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	f7fa fd05 	bl	8000380 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4613      	mov	r3, r2
 800597c:	817b      	strh	r3, [r7, #10]
	time -= a;
 800597e:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <LCDvalue+0x138>)
 8005980:	881a      	ldrh	r2, [r3, #0]
 8005982:	897b      	ldrh	r3, [r7, #10]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	b29a      	uxth	r2, r3
 8005988:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <LCDvalue+0x138>)
 800598a:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 800598c:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <LCDvalue+0x138>)
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	4940      	ldr	r1, [pc, #256]	; (8005a94 <LCDvalue+0x144>)
 8005994:	4840      	ldr	r0, [pc, #256]	; (8005a98 <LCDvalue+0x148>)
 8005996:	f00a fdd7 	bl	8010548 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e012      	b.n	80059c6 <LCDvalue+0x76>
		if(t_c[i] == 0){
 80059a0:	4a3d      	ldr	r2, [pc, #244]	; (8005a98 <LCDvalue+0x148>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <LCDvalue+0x70>
			t_c[i] = 32;
 80059ac:	4a3a      	ldr	r2, [pc, #232]	; (8005a98 <LCDvalue+0x148>)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	2220      	movs	r2, #32
 80059b4:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	4a37      	ldr	r2, [pc, #220]	; (8005a98 <LCDvalue+0x148>)
 80059bc:	2120      	movs	r1, #32
 80059be:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	dde9      	ble.n	80059a0 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 80059cc:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <LCDvalue+0x138>)
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 811d 	bne.w	8005c10 <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 80059d6:	4831      	ldr	r0, [pc, #196]	; (8005a9c <LCDvalue+0x14c>)
 80059d8:	f008 f9da 	bl	800dd90 <HAL_TIM_Base_Stop_IT>
		time = 0;
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <LCDvalue+0x138>)
 80059de:	2200      	movs	r2, #0
 80059e0:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 80059e2:	2000      	movs	r0, #0
 80059e4:	f001 fa7a 	bl	8006edc <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 80059e8:	2000      	movs	r0, #0
 80059ea:	f001 fa88 	bl	8006efe <ST7735_FillScreen1>
		while(time == 0){
 80059ee:	e10a      	b.n	8005c06 <LCDvalue+0x2b6>
			uint8_t credit = 1;
 80059f0:	2301      	movs	r3, #1
 80059f2:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 80059f4:	7a7b      	ldrb	r3, [r7, #9]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d15e      	bne.n	8005ab8 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <LCDvalue+0x150>)
 8005a00:	9203      	str	r2, [sp, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	9202      	str	r2, [sp, #8]
 8005a06:	221f      	movs	r2, #31
 8005a08:	9201      	str	r2, [sp, #4]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	9200      	str	r2, [sp, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a24      	ldr	r2, [pc, #144]	; (8005aa4 <LCDvalue+0x154>)
 8005a12:	2123      	movs	r1, #35	; 0x23
 8005a14:	200f      	movs	r0, #15
 8005a16:	f001 f88e 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	781a      	ldrb	r2, [r3, #0]
 8005a1e:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <LCDvalue+0x158>)
 8005a20:	9203      	str	r2, [sp, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	9202      	str	r2, [sp, #8]
 8005a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2a:	9201      	str	r2, [sp, #4]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	9200      	str	r2, [sp, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <LCDvalue+0x15c>)
 8005a34:	213c      	movs	r1, #60	; 0x3c
 8005a36:	2005      	movs	r0, #5
 8005a38:	f001 f87d 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <LCDvalue+0x150>)
 8005a42:	9203      	str	r2, [sp, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	9202      	str	r2, [sp, #8]
 8005a48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005a4c:	9201      	str	r2, [sp, #4]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	9200      	str	r2, [sp, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <LCDvalue+0x160>)
 8005a56:	2123      	movs	r1, #35	; 0x23
 8005a58:	2014      	movs	r0, #20
 8005a5a:	f001 f86c 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <LCDvalue+0x158>)
 8005a64:	9203      	str	r2, [sp, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	9202      	str	r2, [sp, #8]
 8005a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6e:	9201      	str	r2, [sp, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	9200      	str	r2, [sp, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <LCDvalue+0x164>)
 8005a78:	213c      	movs	r1, #60	; 0x3c
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f001 f85b 	bl	8006b36 <ST7735_WriteStringNSS>
 8005a80:	e0c1      	b.n	8005c06 <LCDvalue+0x2b6>
 8005a82:	bf00      	nop
 8005a84:	24000000 	.word	0x24000000
 8005a88:	24000174 	.word	0x24000174
 8005a8c:	24000ea0 	.word	0x24000ea0
 8005a90:	000f4240 	.word	0x000f4240
 8005a94:	0801100c 	.word	0x0801100c
 8005a98:	24000170 	.word	0x24000170
 8005a9c:	240002e8 	.word	0x240002e8
 8005aa0:	24000014 	.word	0x24000014
 8005aa4:	08010cf4 	.word	0x08010cf4
 8005aa8:	2400000c 	.word	0x2400000c
 8005aac:	08011010 	.word	0x08011010
 8005ab0:	08010cec 	.word	0x08010cec
 8005ab4:	08011024 	.word	0x08011024
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8005ab8:	7a7b      	ldrb	r3, [r7, #9]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	f040 80a3 	bne.w	8005c06 <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	4ba1      	ldr	r3, [pc, #644]	; (8005d4c <LCDvalue+0x3fc>)
 8005ac6:	9203      	str	r2, [sp, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	9202      	str	r2, [sp, #8]
 8005acc:	221f      	movs	r2, #31
 8005ace:	9201      	str	r2, [sp, #4]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	9200      	str	r2, [sp, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a9e      	ldr	r2, [pc, #632]	; (8005d50 <LCDvalue+0x400>)
 8005ad8:	2119      	movs	r1, #25
 8005ada:	200f      	movs	r0, #15
 8005adc:	f001 f82b 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	4b9b      	ldr	r3, [pc, #620]	; (8005d54 <LCDvalue+0x404>)
 8005ae6:	9203      	str	r2, [sp, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	9202      	str	r2, [sp, #8]
 8005aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af0:	9201      	str	r2, [sp, #4]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	9200      	str	r2, [sp, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a97      	ldr	r2, [pc, #604]	; (8005d58 <LCDvalue+0x408>)
 8005afa:	2132      	movs	r1, #50	; 0x32
 8005afc:	2005      	movs	r0, #5
 8005afe:	f001 f81a 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	4b91      	ldr	r3, [pc, #580]	; (8005d4c <LCDvalue+0x3fc>)
 8005b08:	9203      	str	r2, [sp, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b12:	9201      	str	r2, [sp, #4]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	9200      	str	r2, [sp, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a90      	ldr	r2, [pc, #576]	; (8005d5c <LCDvalue+0x40c>)
 8005b1c:	2119      	movs	r1, #25
 8005b1e:	2014      	movs	r0, #20
 8005b20:	f001 f809 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	4b8a      	ldr	r3, [pc, #552]	; (8005d54 <LCDvalue+0x404>)
 8005b2a:	9203      	str	r2, [sp, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	9202      	str	r2, [sp, #8]
 8005b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b34:	9201      	str	r2, [sp, #4]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	9200      	str	r2, [sp, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a88      	ldr	r2, [pc, #544]	; (8005d60 <LCDvalue+0x410>)
 8005b3e:	2132      	movs	r1, #50	; 0x32
 8005b40:	2000      	movs	r0, #0
 8005b42:	f000 fff8 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8005b46:	4b83      	ldr	r3, [pc, #524]	; (8005d54 <LCDvalue+0x404>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	9203      	str	r2, [sp, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	9202      	str	r2, [sp, #8]
 8005b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b54:	9201      	str	r2, [sp, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a81      	ldr	r2, [pc, #516]	; (8005d64 <LCDvalue+0x414>)
 8005b5e:	2141      	movs	r1, #65	; 0x41
 8005b60:	2000      	movs	r0, #0
 8005b62:	f000 ffe8 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8005b66:	4b7b      	ldr	r3, [pc, #492]	; (8005d54 <LCDvalue+0x404>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	9203      	str	r2, [sp, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	9202      	str	r2, [sp, #8]
 8005b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b74:	9201      	str	r2, [sp, #4]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	9200      	str	r2, [sp, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a79      	ldr	r2, [pc, #484]	; (8005d64 <LCDvalue+0x414>)
 8005b7e:	2141      	movs	r1, #65	; 0x41
 8005b80:	2000      	movs	r0, #0
 8005b82:	f000 ffd8 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8005b86:	4b73      	ldr	r3, [pc, #460]	; (8005d54 <LCDvalue+0x404>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	9203      	str	r2, [sp, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	9202      	str	r2, [sp, #8]
 8005b90:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8005b94:	9201      	str	r2, [sp, #4]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	9200      	str	r2, [sp, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a72      	ldr	r2, [pc, #456]	; (8005d68 <LCDvalue+0x418>)
 8005b9e:	2164      	movs	r1, #100	; 0x64
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	f000 ffc8 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8005ba6:	4b6b      	ldr	r3, [pc, #428]	; (8005d54 <LCDvalue+0x404>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	9203      	str	r2, [sp, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	9202      	str	r2, [sp, #8]
 8005bb0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005bb4:	9201      	str	r2, [sp, #4]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	9200      	str	r2, [sp, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a6b      	ldr	r2, [pc, #428]	; (8005d6c <LCDvalue+0x41c>)
 8005bbe:	2173      	movs	r1, #115	; 0x73
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f000 ffb8 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 8005bc6:	4b63      	ldr	r3, [pc, #396]	; (8005d54 <LCDvalue+0x404>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	9203      	str	r2, [sp, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	9202      	str	r2, [sp, #8]
 8005bd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005bd4:	9201      	str	r2, [sp, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	9200      	str	r2, [sp, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a64      	ldr	r2, [pc, #400]	; (8005d70 <LCDvalue+0x420>)
 8005bde:	2173      	movs	r1, #115	; 0x73
 8005be0:	2000      	movs	r0, #0
 8005be2:	f000 ffa8 	bl	8006b36 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 8005be6:	4b5b      	ldr	r3, [pc, #364]	; (8005d54 <LCDvalue+0x404>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	9203      	str	r2, [sp, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	9202      	str	r2, [sp, #8]
 8005bf0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005bf4:	9201      	str	r2, [sp, #4]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	9200      	str	r2, [sp, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5d      	ldr	r2, [pc, #372]	; (8005d74 <LCDvalue+0x424>)
 8005bfe:	215a      	movs	r1, #90	; 0x5a
 8005c00:	2000      	movs	r0, #0
 8005c02:	f000 ff98 	bl	8006b36 <ST7735_WriteStringNSS>
		while(time == 0){
 8005c06:	4b5c      	ldr	r3, [pc, #368]	; (8005d78 <LCDvalue+0x428>)
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f43f aef0 	beq.w	80059f0 <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	889b      	ldrh	r3, [r3, #4]
 8005c14:	461a      	mov	r2, r3
 8005c16:	4959      	ldr	r1, [pc, #356]	; (8005d7c <LCDvalue+0x42c>)
 8005c18:	4859      	ldr	r0, [pc, #356]	; (8005d80 <LCDvalue+0x430>)
 8005c1a:	f00a fc95 	bl	8010548 <siprintf>
	if(C_LP_ATK[3] == 0){
 8005c1e:	4b58      	ldr	r3, [pc, #352]	; (8005d80 <LCDvalue+0x430>)
 8005c20:	78db      	ldrb	r3, [r3, #3]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10e      	bne.n	8005c44 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8005c26:	4b56      	ldr	r3, [pc, #344]	; (8005d80 <LCDvalue+0x430>)
 8005c28:	789a      	ldrb	r2, [r3, #2]
 8005c2a:	4b55      	ldr	r3, [pc, #340]	; (8005d80 <LCDvalue+0x430>)
 8005c2c:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8005c2e:	4b54      	ldr	r3, [pc, #336]	; (8005d80 <LCDvalue+0x430>)
 8005c30:	785a      	ldrb	r2, [r3, #1]
 8005c32:	4b53      	ldr	r3, [pc, #332]	; (8005d80 <LCDvalue+0x430>)
 8005c34:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8005c36:	4b52      	ldr	r3, [pc, #328]	; (8005d80 <LCDvalue+0x430>)
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <LCDvalue+0x430>)
 8005c3c:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8005c3e:	4b50      	ldr	r3, [pc, #320]	; (8005d80 <LCDvalue+0x430>)
 8005c40:	2220      	movs	r2, #32
 8005c42:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	4b42      	ldr	r3, [pc, #264]	; (8005d54 <LCDvalue+0x404>)
 8005c4a:	9203      	str	r2, [sp, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	9202      	str	r2, [sp, #8]
 8005c50:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c54:	9201      	str	r2, [sp, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	9200      	str	r2, [sp, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a48      	ldr	r2, [pc, #288]	; (8005d80 <LCDvalue+0x430>)
 8005c5e:	2114      	movs	r1, #20
 8005c60:	205a      	movs	r0, #90	; 0x5a
 8005c62:	f000 ff68 	bl	8006b36 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	4b3a      	ldr	r3, [pc, #232]	; (8005d54 <LCDvalue+0x404>)
 8005c6c:	9203      	str	r2, [sp, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	9202      	str	r2, [sp, #8]
 8005c72:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c76:	9201      	str	r2, [sp, #4]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	9200      	str	r2, [sp, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a41      	ldr	r2, [pc, #260]	; (8005d84 <LCDvalue+0x434>)
 8005c80:	2132      	movs	r1, #50	; 0x32
 8005c82:	2069      	movs	r0, #105	; 0x69
 8005c84:	f000 ff57 	bl	8006b36 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	889b      	ldrh	r3, [r3, #4]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	493b      	ldr	r1, [pc, #236]	; (8005d7c <LCDvalue+0x42c>)
 8005c90:	483d      	ldr	r0, [pc, #244]	; (8005d88 <LCDvalue+0x438>)
 8005c92:	f00a fc59 	bl	8010548 <siprintf>
	if(C_LP_DEF[3] == 0){
 8005c96:	4b3c      	ldr	r3, [pc, #240]	; (8005d88 <LCDvalue+0x438>)
 8005c98:	78db      	ldrb	r3, [r3, #3]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10e      	bne.n	8005cbc <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8005c9e:	4b3a      	ldr	r3, [pc, #232]	; (8005d88 <LCDvalue+0x438>)
 8005ca0:	789a      	ldrb	r2, [r3, #2]
 8005ca2:	4b39      	ldr	r3, [pc, #228]	; (8005d88 <LCDvalue+0x438>)
 8005ca4:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8005ca6:	4b38      	ldr	r3, [pc, #224]	; (8005d88 <LCDvalue+0x438>)
 8005ca8:	785a      	ldrb	r2, [r3, #1]
 8005caa:	4b37      	ldr	r3, [pc, #220]	; (8005d88 <LCDvalue+0x438>)
 8005cac:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 8005cae:	4b36      	ldr	r3, [pc, #216]	; (8005d88 <LCDvalue+0x438>)
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	4b35      	ldr	r3, [pc, #212]	; (8005d88 <LCDvalue+0x438>)
 8005cb4:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8005cb6:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <LCDvalue+0x438>)
 8005cb8:	2220      	movs	r2, #32
 8005cba:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781a      	ldrb	r2, [r3, #0]
 8005cc0:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <LCDvalue+0x404>)
 8005cc2:	9203      	str	r2, [sp, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	9202      	str	r2, [sp, #8]
 8005cc8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005ccc:	9201      	str	r2, [sp, #4]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	9200      	str	r2, [sp, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a2c      	ldr	r2, [pc, #176]	; (8005d88 <LCDvalue+0x438>)
 8005cd6:	2114      	movs	r1, #20
 8005cd8:	205a      	movs	r0, #90	; 0x5a
 8005cda:	f000 ff2c 	bl	8006b36 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <LCDvalue+0x404>)
 8005ce4:	9203      	str	r2, [sp, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	9202      	str	r2, [sp, #8]
 8005cea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005cee:	9201      	str	r2, [sp, #4]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	9200      	str	r2, [sp, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <LCDvalue+0x43c>)
 8005cf8:	2132      	movs	r1, #50	; 0x32
 8005cfa:	2069      	movs	r0, #105	; 0x69
 8005cfc:	f000 ff1b 	bl	8006b36 <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 8005d00:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <LCDvalue+0x440>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	491d      	ldr	r1, [pc, #116]	; (8005d7c <LCDvalue+0x42c>)
 8005d08:	4822      	ldr	r0, [pc, #136]	; (8005d94 <LCDvalue+0x444>)
 8005d0a:	f00a fc1d 	bl	8010548 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8005d0e:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <LCDvalue+0x404>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	9203      	str	r2, [sp, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	9202      	str	r2, [sp, #8]
 8005d18:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005d1c:	9201      	str	r2, [sp, #4]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	9200      	str	r2, [sp, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <LCDvalue+0x444>)
 8005d26:	2123      	movs	r1, #35	; 0x23
 8005d28:	2032      	movs	r0, #50	; 0x32
 8005d2a:	f000 ff04 	bl	8006b36 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <LCDvalue+0x404>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	9203      	str	r2, [sp, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	9202      	str	r2, [sp, #8]
 8005d38:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005d3c:	9201      	str	r2, [sp, #4]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	9200      	str	r2, [sp, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <LCDvalue+0x444>)
 8005d46:	2123      	movs	r1, #35	; 0x23
 8005d48:	2032      	movs	r0, #50	; 0x32
 8005d4a:	e025      	b.n	8005d98 <LCDvalue+0x448>
 8005d4c:	24000014 	.word	0x24000014
 8005d50:	08010cf4 	.word	0x08010cf4
 8005d54:	2400000c 	.word	0x2400000c
 8005d58:	08011010 	.word	0x08011010
 8005d5c:	08010cec 	.word	0x08010cec
 8005d60:	08011024 	.word	0x08011024
 8005d64:	08010c68 	.word	0x08010c68
 8005d68:	08011038 	.word	0x08011038
 8005d6c:	08011044 	.word	0x08011044
 8005d70:	08011054 	.word	0x08011054
 8005d74:	08011060 	.word	0x08011060
 8005d78:	24000174 	.word	0x24000174
 8005d7c:	0801100c 	.word	0x0801100c
 8005d80:	24000164 	.word	0x24000164
 8005d84:	24000170 	.word	0x24000170
 8005d88:	24000168 	.word	0x24000168
 8005d8c:	08010cb8 	.word	0x08010cb8
 8005d90:	24000176 	.word	0x24000176
 8005d94:	2400016c 	.word	0x2400016c
 8005d98:	f000 fecd 	bl	8006b36 <ST7735_WriteStringNSS>

}
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005da8:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <SystemInit+0xfc>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	4a3c      	ldr	r2, [pc, #240]	; (8005ea0 <SystemInit+0xfc>)
 8005db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005db8:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <SystemInit+0xfc>)
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	4a38      	ldr	r2, [pc, #224]	; (8005ea0 <SystemInit+0xfc>)
 8005dbe:	f043 0310 	orr.w	r3, r3, #16
 8005dc2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005dc4:	4b37      	ldr	r3, [pc, #220]	; (8005ea4 <SystemInit+0x100>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	d807      	bhi.n	8005de0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005dd0:	4b34      	ldr	r3, [pc, #208]	; (8005ea4 <SystemInit+0x100>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 030f 	bic.w	r3, r3, #15
 8005dd8:	4a32      	ldr	r2, [pc, #200]	; (8005ea4 <SystemInit+0x100>)
 8005dda:	f043 0307 	orr.w	r3, r3, #7
 8005dde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005de0:	4b31      	ldr	r3, [pc, #196]	; (8005ea8 <SystemInit+0x104>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a30      	ldr	r2, [pc, #192]	; (8005ea8 <SystemInit+0x104>)
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005dec:	4b2e      	ldr	r3, [pc, #184]	; (8005ea8 <SystemInit+0x104>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005df2:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <SystemInit+0x104>)
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	492c      	ldr	r1, [pc, #176]	; (8005ea8 <SystemInit+0x104>)
 8005df8:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <SystemInit+0x108>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005dfe:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <SystemInit+0x100>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <SystemInit+0x100>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 030f 	bic.w	r3, r3, #15
 8005e12:	4a24      	ldr	r2, [pc, #144]	; (8005ea4 <SystemInit+0x100>)
 8005e14:	f043 0307 	orr.w	r3, r3, #7
 8005e18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005e1a:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <SystemInit+0x104>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005e20:	4b21      	ldr	r3, [pc, #132]	; (8005ea8 <SystemInit+0x104>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <SystemInit+0x104>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <SystemInit+0x104>)
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <SystemInit+0x10c>)
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005e32:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <SystemInit+0x104>)
 8005e34:	4a1f      	ldr	r2, [pc, #124]	; (8005eb4 <SystemInit+0x110>)
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005e38:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <SystemInit+0x104>)
 8005e3a:	4a1f      	ldr	r2, [pc, #124]	; (8005eb8 <SystemInit+0x114>)
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ea8 <SystemInit+0x104>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005e44:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <SystemInit+0x104>)
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <SystemInit+0x114>)
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <SystemInit+0x104>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005e50:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <SystemInit+0x104>)
 8005e52:	4a19      	ldr	r2, [pc, #100]	; (8005eb8 <SystemInit+0x114>)
 8005e54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005e56:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <SystemInit+0x104>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e5c:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <SystemInit+0x104>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a11      	ldr	r2, [pc, #68]	; (8005ea8 <SystemInit+0x104>)
 8005e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <SystemInit+0x104>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <SystemInit+0x118>)
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <SystemInit+0x118>)
 8005e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e78:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <SystemInit+0x11c>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <SystemInit+0x120>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e86:	d202      	bcs.n	8005e8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <SystemInit+0x124>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <SystemInit+0x128>)
 8005e90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005e94:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8005e96:	bf00      	nop
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	e000ed00 	.word	0xe000ed00
 8005ea4:	52002000 	.word	0x52002000
 8005ea8:	58024400 	.word	0x58024400
 8005eac:	eaf6ed7f 	.word	0xeaf6ed7f
 8005eb0:	02020200 	.word	0x02020200
 8005eb4:	01ff0000 	.word	0x01ff0000
 8005eb8:	01010280 	.word	0x01010280
 8005ebc:	580000c0 	.word	0x580000c0
 8005ec0:	5c001000 	.word	0x5c001000
 8005ec4:	ffff0000 	.word	0xffff0000
 8005ec8:	51008108 	.word	0x51008108
 8005ecc:	52004000 	.word	0x52004000

08005ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8005ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eda:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8005edc:	bf00      	nop
 8005ede:	4b37      	ldr	r3, [pc, #220]	; (8005fbc <main+0xec>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <main+0x24>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dcf4      	bgt.n	8005ede <main+0xe>
	if ( timeout < 0 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da01      	bge.n	8005efe <main+0x2e>
	{
		Error_Handler();
 8005efa:	f000 fbeb 	bl	80066d4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005efe:	f001 fb69 	bl	80075d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f02:	f000 f863 	bl	8005fcc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005f06:	f000 f8e5 	bl	80060d4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8005f0a:	4b2c      	ldr	r3, [pc, #176]	; (8005fbc <main+0xec>)
 8005f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f10:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <main+0xec>)
 8005f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f1a:	4b28      	ldr	r3, [pc, #160]	; (8005fbc <main+0xec>)
 8005f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f004 fd7f 	bl	800aa2c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8005f2e:	2100      	movs	r1, #0
 8005f30:	2000      	movs	r0, #0
 8005f32:	f004 fd95 	bl	800aa60 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8005f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f3a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8005f3c:	bf00      	nop
 8005f3e:	4b1f      	ldr	r3, [pc, #124]	; (8005fbc <main+0xec>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <main+0x84>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	1e5a      	subs	r2, r3, #1
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dcf4      	bgt.n	8005f3e <main+0x6e>
	if ( timeout < 0 )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da01      	bge.n	8005f5e <main+0x8e>
	{
		Error_Handler();
 8005f5a:	f000 fbbb 	bl	80066d4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f5e:	f000 fa6d 	bl	800643c <MX_GPIO_Init>
  MX_ETH_Init();
 8005f62:	f000 f8e9 	bl	8006138 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8005f66:	f000 f9c1 	bl	80062ec <MX_USART3_UART_Init>
  MX_DMA_Init();
 8005f6a:	f000 fa3f 	bl	80063ec <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005f6e:	f000 fa0b 	bl	8006388 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8005f72:	f000 f92d 	bl	80061d0 <MX_SPI3_Init>
  MX_TIM7_Init();
 8005f76:	f000 f983 	bl	8006280 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8005f7a:	f000 fcb3 	bl	80068e4 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f000 ffbd 	bl	8006efe <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8005f84:	2000      	movs	r0, #0
 8005f86:	f000 ffa9 	bl	8006edc <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8005f8a:	f001 fba9 	bl	80076e0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <main+0xf0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2bc8      	cmp	r3, #200	; 0xc8
 8005f98:	d9f7      	bls.n	8005f8a <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8005f9a:	f001 fba1 	bl	80076e0 <HAL_GetTick>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <main+0xf0>)
 8005fa2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fa8:	4806      	ldr	r0, [pc, #24]	; (8005fc4 <main+0xf4>)
 8005faa:	f004 fd24 	bl	800a9f6 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8005fae:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8005fb2:	4905      	ldr	r1, [pc, #20]	; (8005fc8 <main+0xf8>)
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fb fb75 	bl	80016a4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8005fba:	e7e6      	b.n	8005f8a <main+0xba>
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	24000e98 	.word	0x24000e98
 8005fc4:	58020400 	.word	0x58020400
 8005fc8:	240009c0 	.word	0x240009c0

08005fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b09c      	sub	sp, #112	; 0x70
 8005fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd6:	224c      	movs	r2, #76	; 0x4c
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f00a f9bc 	bl	8010358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f00a f9b6 	bl	8010358 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005fec:	2004      	movs	r0, #4
 8005fee:	f004 fe93 	bl	800ad18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	603b      	str	r3, [r7, #0]
 8005ff6:	4b34      	ldr	r3, [pc, #208]	; (80060c8 <SystemClock_Config+0xfc>)
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	4a33      	ldr	r2, [pc, #204]	; (80060c8 <SystemClock_Config+0xfc>)
 8005ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006000:	6193      	str	r3, [r2, #24]
 8006002:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <SystemClock_Config+0xfc>)
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <SystemClock_Config+0x100>)
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	4a2e      	ldr	r2, [pc, #184]	; (80060cc <SystemClock_Config+0x100>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006018:	4b2c      	ldr	r3, [pc, #176]	; (80060cc <SystemClock_Config+0x100>)
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006024:	bf00      	nop
 8006026:	4b28      	ldr	r3, [pc, #160]	; (80060c8 <SystemClock_Config+0xfc>)
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800602e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006032:	d1f8      	bne.n	8006026 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006034:	4b26      	ldr	r3, [pc, #152]	; (80060d0 <SystemClock_Config+0x104>)
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	4a24      	ldr	r2, [pc, #144]	; (80060d0 <SystemClock_Config+0x104>)
 800603e:	f043 0302 	orr.w	r3, r3, #2
 8006042:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006044:	2301      	movs	r3, #1
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006048:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800604e:	2302      	movs	r3, #2
 8006050:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006052:	2302      	movs	r3, #2
 8006054:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800605a:	2378      	movs	r3, #120	; 0x78
 800605c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800605e:	2302      	movs	r3, #2
 8006060:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006062:	2302      	movs	r3, #2
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006066:	2302      	movs	r3, #2
 8006068:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800606a:	230c      	movs	r3, #12
 800606c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800606e:	2300      	movs	r3, #0
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607a:	4618      	mov	r0, r3
 800607c:	f004 feb6 	bl	800adec <HAL_RCC_OscConfig>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8006086:	f000 fb25 	bl	80066d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800608a:	233f      	movs	r3, #63	; 0x3f
 800608c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800608e:	2303      	movs	r3, #3
 8006090:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006096:	2308      	movs	r3, #8
 8006098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800609a:	2340      	movs	r3, #64	; 0x40
 800609c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80060a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80060ac:	1d3b      	adds	r3, r7, #4
 80060ae:	2104      	movs	r1, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f005 fac9 	bl	800b648 <HAL_RCC_ClockConfig>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80060bc:	f000 fb0a 	bl	80066d4 <Error_Handler>
  }
}
 80060c0:	bf00      	nop
 80060c2:	3770      	adds	r7, #112	; 0x70
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	58024800 	.word	0x58024800
 80060cc:	58000400 	.word	0x58000400
 80060d0:	58024400 	.word	0x58024400

080060d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b0b0      	sub	sp, #192	; 0xc0
 80060d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	22bc      	movs	r2, #188	; 0xbc
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f00a f939 	bl	8010358 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80060e6:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80060ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80060ec:	2301      	movs	r3, #1
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80060f0:	2318      	movs	r3, #24
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80060f4:	2302      	movs	r3, #2
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80060f8:	2304      	movs	r3, #4
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80060fc:	2302      	movs	r3, #2
 80060fe:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8006100:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006106:	2300      	movs	r3, #0
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800610e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006112:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8006114:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	4618      	mov	r0, r3
 8006120:	f005 fe1e 	bl	800bd60 <HAL_RCCEx_PeriphCLKConfig>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800612a:	f000 fad3 	bl	80066d4 <Error_Handler>
  }
}
 800612e:	bf00      	nop
 8006130:	37c0      	adds	r7, #192	; 0xc0
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800613c:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <MX_ETH_Init+0x80>)
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <MX_ETH_Init+0x84>)
 8006140:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006142:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <MX_ETH_Init+0x88>)
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <MX_ETH_Init+0x88>)
 800614a:	2280      	movs	r2, #128	; 0x80
 800614c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800614e:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <MX_ETH_Init+0x88>)
 8006150:	22e1      	movs	r2, #225	; 0xe1
 8006152:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <MX_ETH_Init+0x88>)
 8006156:	2200      	movs	r2, #0
 8006158:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800615a:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <MX_ETH_Init+0x88>)
 800615c:	2200      	movs	r2, #0
 800615e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8006160:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <MX_ETH_Init+0x88>)
 8006162:	2200      	movs	r2, #0
 8006164:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <MX_ETH_Init+0x80>)
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <MX_ETH_Init+0x88>)
 800616a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <MX_ETH_Init+0x80>)
 800616e:	2201      	movs	r2, #1
 8006170:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006172:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <MX_ETH_Init+0x80>)
 8006174:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <MX_ETH_Init+0x8c>)
 8006176:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <MX_ETH_Init+0x80>)
 800617a:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <MX_ETH_Init+0x90>)
 800617c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800617e:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <MX_ETH_Init+0x80>)
 8006180:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006184:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8006186:	480c      	ldr	r0, [pc, #48]	; (80061b8 <MX_ETH_Init+0x80>)
 8006188:	f003 fe30 	bl	8009dec <HAL_ETH_Init>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8006192:	f000 fa9f 	bl	80066d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006196:	2238      	movs	r2, #56	; 0x38
 8006198:	2100      	movs	r1, #0
 800619a:	480c      	ldr	r0, [pc, #48]	; (80061cc <MX_ETH_Init+0x94>)
 800619c:	f00a f8dc 	bl	8010358 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80061a0:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <MX_ETH_Init+0x94>)
 80061a2:	2221      	movs	r2, #33	; 0x21
 80061a4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <MX_ETH_Init+0x94>)
 80061a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80061ac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <MX_ETH_Init+0x94>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80061b4:	bf00      	nop
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	240001b0 	.word	0x240001b0
 80061bc:	40028000 	.word	0x40028000
 80061c0:	24000ea8 	.word	0x24000ea8
 80061c4:	240000e8 	.word	0x240000e8
 80061c8:	24000088 	.word	0x24000088
 80061cc:	24000178 	.word	0x24000178

080061d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80061d4:	4b28      	ldr	r3, [pc, #160]	; (8006278 <MX_SPI3_Init+0xa8>)
 80061d6:	4a29      	ldr	r2, [pc, #164]	; (800627c <MX_SPI3_Init+0xac>)
 80061d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80061da:	4b27      	ldr	r3, [pc, #156]	; (8006278 <MX_SPI3_Init+0xa8>)
 80061dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80061e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80061e2:	4b25      	ldr	r3, [pc, #148]	; (8006278 <MX_SPI3_Init+0xa8>)
 80061e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061e8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <MX_SPI3_Init+0xa8>)
 80061ec:	2207      	movs	r2, #7
 80061ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061f0:	4b21      	ldr	r3, [pc, #132]	; (8006278 <MX_SPI3_Init+0xa8>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <MX_SPI3_Init+0xa8>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <MX_SPI3_Init+0xa8>)
 80061fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006202:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800620a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800620c:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <MX_SPI3_Init+0xa8>)
 800620e:	2200      	movs	r2, #0
 8006210:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006212:	4b19      	ldr	r3, [pc, #100]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006214:	2200      	movs	r2, #0
 8006216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006218:	4b17      	ldr	r3, [pc, #92]	; (8006278 <MX_SPI3_Init+0xa8>)
 800621a:	2200      	movs	r2, #0
 800621c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800621e:	4b16      	ldr	r3, [pc, #88]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006220:	2200      	movs	r2, #0
 8006222:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800622a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800622c:	4b12      	ldr	r3, [pc, #72]	; (8006278 <MX_SPI3_Init+0xa8>)
 800622e:	2200      	movs	r2, #0
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006234:	2200      	movs	r2, #0
 8006236:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <MX_SPI3_Init+0xa8>)
 800623a:	2200      	movs	r2, #0
 800623c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006240:	2200      	movs	r2, #0
 8006242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006246:	2200      	movs	r2, #0
 8006248:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <MX_SPI3_Init+0xa8>)
 800624c:	2200      	movs	r2, #0
 800624e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006252:	2200      	movs	r2, #0
 8006254:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006258:	2200      	movs	r2, #0
 800625a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <MX_SPI3_Init+0xa8>)
 800625e:	2200      	movs	r2, #0
 8006260:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006262:	4805      	ldr	r0, [pc, #20]	; (8006278 <MX_SPI3_Init+0xa8>)
 8006264:	f007 f8e4 	bl	800d430 <HAL_SPI_Init>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800626e:	f000 fa31 	bl	80066d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	24000260 	.word	0x24000260
 800627c:	40003c00 	.word	0x40003c00

08006280 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006286:	1d3b      	adds	r3, r7, #4
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006290:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <MX_TIM7_Init+0x64>)
 8006292:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <MX_TIM7_Init+0x68>)
 8006294:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <MX_TIM7_Init+0x64>)
 8006298:	22ef      	movs	r2, #239	; 0xef
 800629a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800629c:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <MX_TIM7_Init+0x64>)
 800629e:	2200      	movs	r2, #0
 80062a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80062a2:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <MX_TIM7_Init+0x64>)
 80062a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062aa:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <MX_TIM7_Init+0x64>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80062b0:	480c      	ldr	r0, [pc, #48]	; (80062e4 <MX_TIM7_Init+0x64>)
 80062b2:	f007 fc9e 	bl	800dbf2 <HAL_TIM_Base_Init>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80062bc:	f000 fa0a 	bl	80066d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062c0:	2300      	movs	r3, #0
 80062c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4805      	ldr	r0, [pc, #20]	; (80062e4 <MX_TIM7_Init+0x64>)
 80062ce:	f007 ff6f 	bl	800e1b0 <HAL_TIMEx_MasterConfigSynchronization>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80062d8:	f000 f9fc 	bl	80066d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	240002e8 	.word	0x240002e8
 80062e8:	40001400 	.word	0x40001400

080062ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <MX_USART3_UART_Init+0x90>)
 80062f2:	4a23      	ldr	r2, [pc, #140]	; (8006380 <MX_USART3_UART_Init+0x94>)
 80062f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <MX_USART3_UART_Init+0x90>)
 80062f8:	4a22      	ldr	r2, [pc, #136]	; (8006384 <MX_USART3_UART_Init+0x98>)
 80062fa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80062fc:	4b1f      	ldr	r3, [pc, #124]	; (800637c <MX_USART3_UART_Init+0x90>)
 80062fe:	2200      	movs	r2, #0
 8006300:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006304:	2200      	movs	r2, #0
 8006306:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <MX_USART3_UART_Init+0x90>)
 800630a:	2200      	movs	r2, #0
 800630c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006310:	220c      	movs	r2, #12
 8006312:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006314:	4b19      	ldr	r3, [pc, #100]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006316:	2200      	movs	r2, #0
 8006318:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <MX_USART3_UART_Init+0x90>)
 800631c:	2200      	movs	r2, #0
 800631e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006320:	4b16      	ldr	r3, [pc, #88]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006322:	2200      	movs	r2, #0
 8006324:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006328:	2200      	movs	r2, #0
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800632c:	4b13      	ldr	r3, [pc, #76]	; (800637c <MX_USART3_UART_Init+0x90>)
 800632e:	2200      	movs	r2, #0
 8006330:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006332:	4812      	ldr	r0, [pc, #72]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006334:	f007 ffe8 	bl	800e308 <HAL_UART_Init>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800633e:	f000 f9c9 	bl	80066d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006342:	2100      	movs	r1, #0
 8006344:	480d      	ldr	r0, [pc, #52]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006346:	f009 fc09 	bl	800fb5c <HAL_UARTEx_SetTxFifoThreshold>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8006350:	f000 f9c0 	bl	80066d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006354:	2100      	movs	r1, #0
 8006356:	4809      	ldr	r0, [pc, #36]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006358:	f009 fc3e 	bl	800fbd8 <HAL_UARTEx_SetRxFifoThreshold>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8006362:	f000 f9b7 	bl	80066d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006366:	4805      	ldr	r0, [pc, #20]	; (800637c <MX_USART3_UART_Init+0x90>)
 8006368:	f009 fbbf 	bl	800faea <HAL_UARTEx_DisableFifoMode>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8006372:	f000 f9af 	bl	80066d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	24000334 	.word	0x24000334
 8006380:	40004800 	.word	0x40004800
 8006384:	0005dc00 	.word	0x0005dc00

08006388 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800638c:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006390:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006392:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006394:	2209      	movs	r2, #9
 8006396:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800639a:	2202      	movs	r2, #2
 800639c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800639e:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063a6:	2202      	movs	r2, #2
 80063a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80063aa:	4b0e      	ldr	r3, [pc, #56]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80063bc:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063be:	2201      	movs	r2, #1
 80063c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80063c2:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063ce:	4805      	ldr	r0, [pc, #20]	; (80063e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80063d0:	f004 fb5a 	bl	800aa88 <HAL_PCD_Init>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80063da:	f000 f97b 	bl	80066d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80063de:	bf00      	nop
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	240004b4 	.word	0x240004b4
 80063e8:	40080000 	.word	0x40080000

080063ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <MX_DMA_Init+0x4c>)
 80063f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063f8:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <MX_DMA_Init+0x4c>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <MX_DMA_Init+0x4c>)
 8006404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	200c      	movs	r0, #12
 8006416:	f001 fa8e 	bl	8007936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800641a:	200c      	movs	r0, #12
 800641c:	f001 faa5 	bl	800796a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006420:	2200      	movs	r2, #0
 8006422:	2100      	movs	r1, #0
 8006424:	200f      	movs	r0, #15
 8006426:	f001 fa86 	bl	8007936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800642a:	200f      	movs	r0, #15
 800642c:	f001 fa9d 	bl	800796a <HAL_NVIC_EnableIRQ>

}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	58024400 	.word	0x58024400

0800643c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08e      	sub	sp, #56	; 0x38
 8006440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	609a      	str	r2, [r3, #8]
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006452:	4b8a      	ldr	r3, [pc, #552]	; (800667c <MX_GPIO_Init+0x240>)
 8006454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006458:	4a88      	ldr	r2, [pc, #544]	; (800667c <MX_GPIO_Init+0x240>)
 800645a:	f043 0304 	orr.w	r3, r3, #4
 800645e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006462:	4b86      	ldr	r3, [pc, #536]	; (800667c <MX_GPIO_Init+0x240>)
 8006464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	623b      	str	r3, [r7, #32]
 800646e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006470:	4b82      	ldr	r3, [pc, #520]	; (800667c <MX_GPIO_Init+0x240>)
 8006472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006476:	4a81      	ldr	r2, [pc, #516]	; (800667c <MX_GPIO_Init+0x240>)
 8006478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006480:	4b7e      	ldr	r3, [pc, #504]	; (800667c <MX_GPIO_Init+0x240>)
 8006482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800648e:	4b7b      	ldr	r3, [pc, #492]	; (800667c <MX_GPIO_Init+0x240>)
 8006490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006494:	4a79      	ldr	r2, [pc, #484]	; (800667c <MX_GPIO_Init+0x240>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800649e:	4b77      	ldr	r3, [pc, #476]	; (800667c <MX_GPIO_Init+0x240>)
 80064a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80064ac:	4b73      	ldr	r3, [pc, #460]	; (800667c <MX_GPIO_Init+0x240>)
 80064ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064b2:	4a72      	ldr	r2, [pc, #456]	; (800667c <MX_GPIO_Init+0x240>)
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064bc:	4b6f      	ldr	r3, [pc, #444]	; (800667c <MX_GPIO_Init+0x240>)
 80064be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80064ca:	4b6c      	ldr	r3, [pc, #432]	; (800667c <MX_GPIO_Init+0x240>)
 80064cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064d0:	4a6a      	ldr	r2, [pc, #424]	; (800667c <MX_GPIO_Init+0x240>)
 80064d2:	f043 0320 	orr.w	r3, r3, #32
 80064d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064da:	4b68      	ldr	r3, [pc, #416]	; (800667c <MX_GPIO_Init+0x240>)
 80064dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80064e8:	4b64      	ldr	r3, [pc, #400]	; (800667c <MX_GPIO_Init+0x240>)
 80064ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ee:	4a63      	ldr	r2, [pc, #396]	; (800667c <MX_GPIO_Init+0x240>)
 80064f0:	f043 0310 	orr.w	r3, r3, #16
 80064f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064f8:	4b60      	ldr	r3, [pc, #384]	; (800667c <MX_GPIO_Init+0x240>)
 80064fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006506:	4b5d      	ldr	r3, [pc, #372]	; (800667c <MX_GPIO_Init+0x240>)
 8006508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800650c:	4a5b      	ldr	r2, [pc, #364]	; (800667c <MX_GPIO_Init+0x240>)
 800650e:	f043 0308 	orr.w	r3, r3, #8
 8006512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006516:	4b59      	ldr	r3, [pc, #356]	; (800667c <MX_GPIO_Init+0x240>)
 8006518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006524:	4b55      	ldr	r3, [pc, #340]	; (800667c <MX_GPIO_Init+0x240>)
 8006526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800652a:	4a54      	ldr	r2, [pc, #336]	; (800667c <MX_GPIO_Init+0x240>)
 800652c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006534:	4b51      	ldr	r3, [pc, #324]	; (800667c <MX_GPIO_Init+0x240>)
 8006536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800653a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8006542:	2201      	movs	r2, #1
 8006544:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8006548:	484d      	ldr	r0, [pc, #308]	; (8006680 <MX_GPIO_Init+0x244>)
 800654a:	f004 fa3b 	bl	800a9c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 800654e:	2200      	movs	r2, #0
 8006550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006554:	484a      	ldr	r0, [pc, #296]	; (8006680 <MX_GPIO_Init+0x244>)
 8006556:	f004 fa35 	bl	800a9c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800655a:	2200      	movs	r2, #0
 800655c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006560:	4848      	ldr	r0, [pc, #288]	; (8006684 <MX_GPIO_Init+0x248>)
 8006562:	f004 fa2f 	bl	800a9c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006566:	2200      	movs	r2, #0
 8006568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800656c:	4846      	ldr	r0, [pc, #280]	; (8006688 <MX_GPIO_Init+0x24c>)
 800656e:	f004 fa29 	bl	800a9c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006572:	2201      	movs	r2, #1
 8006574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006578:	4844      	ldr	r0, [pc, #272]	; (800668c <MX_GPIO_Init+0x250>)
 800657a:	f004 fa23 	bl	800a9c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 800657e:	230d      	movs	r3, #13
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006582:	2300      	movs	r3, #0
 8006584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006586:	2300      	movs	r3, #0
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800658a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658e:	4619      	mov	r1, r3
 8006590:	483f      	ldr	r0, [pc, #252]	; (8006690 <MX_GPIO_Init+0x254>)
 8006592:	f004 f84f 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8006596:	2308      	movs	r3, #8
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800659a:	2300      	movs	r3, #0
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80065a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a6:	4619      	mov	r1, r3
 80065a8:	483a      	ldr	r0, [pc, #232]	; (8006694 <MX_GPIO_Init+0x258>)
 80065aa:	f004 f843 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80065ae:	2302      	movs	r3, #2
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065b2:	2300      	movs	r3, #0
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80065ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065be:	4619      	mov	r1, r3
 80065c0:	4830      	ldr	r0, [pc, #192]	; (8006684 <MX_GPIO_Init+0x248>)
 80065c2:	f004 f837 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 80065c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065cc:	2300      	movs	r3, #0
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80065d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d8:	4619      	mov	r1, r3
 80065da:	482f      	ldr	r0, [pc, #188]	; (8006698 <MX_GPIO_Init+0x25c>)
 80065dc:	f004 f82a 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80065e0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065e6:	2301      	movs	r3, #1
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ee:	2300      	movs	r3, #0
 80065f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065f6:	4619      	mov	r1, r3
 80065f8:	4821      	ldr	r0, [pc, #132]	; (8006680 <MX_GPIO_Init+0x244>)
 80065fa:	f004 f81b 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80065fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006604:	2301      	movs	r3, #1
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006608:	2300      	movs	r3, #0
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800660c:	2300      	movs	r3, #0
 800660e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006614:	4619      	mov	r1, r3
 8006616:	481b      	ldr	r0, [pc, #108]	; (8006684 <MX_GPIO_Init+0x248>)
 8006618:	f004 f80c 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800661c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006622:	2301      	movs	r3, #1
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800662e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006632:	4619      	mov	r1, r3
 8006634:	4814      	ldr	r0, [pc, #80]	; (8006688 <MX_GPIO_Init+0x24c>)
 8006636:	f003 fffd 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800663e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	2300      	movs	r3, #0
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800664c:	4619      	mov	r1, r3
 800664e:	480f      	ldr	r0, [pc, #60]	; (800668c <MX_GPIO_Init+0x250>)
 8006650:	f003 fff0 	bl	800a634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800665a:	2301      	movs	r3, #1
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665e:	2300      	movs	r3, #0
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006662:	2300      	movs	r3, #0
 8006664:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666a:	4619      	mov	r1, r3
 800666c:	4807      	ldr	r0, [pc, #28]	; (800668c <MX_GPIO_Init+0x250>)
 800666e:	f003 ffe1 	bl	800a634 <HAL_GPIO_Init>

}
 8006672:	bf00      	nop
 8006674:	3738      	adds	r7, #56	; 0x38
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	58024400 	.word	0x58024400
 8006680:	58021000 	.word	0x58021000
 8006684:	58020400 	.word	0x58020400
 8006688:	58020c00 	.word	0x58020c00
 800668c:	58021800 	.word	0x58021800
 8006690:	58020800 	.word	0x58020800
 8006694:	58020000 	.word	0x58020000
 8006698:	58021400 	.word	0x58021400

0800669c <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800669c:	b4b0      	push	{r4, r5, r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a09      	ldr	r2, [pc, #36]	; (80066cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10a      	bne.n	80066c2 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80066b6:	1854      	adds	r4, r2, r1
 80066b8:	f143 0500 	adc.w	r5, r3, #0
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80066be:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bcb0      	pop	{r4, r5, r7}
 80066ca:	4770      	bx	lr
 80066cc:	240002e8 	.word	0x240002e8
 80066d0:	24000ea0 	.word	0x24000ea0

080066d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066d8:	b672      	cpsid	i
}
 80066da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80066dc:	e7fe      	b.n	80066dc <Error_Handler+0x8>
	...

080066e0 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80066e4:	2200      	movs	r2, #0
 80066e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066ea:	4802      	ldr	r0, [pc, #8]	; (80066f4 <ST7735_Select+0x14>)
 80066ec:	f004 f96a 	bl	800a9c4 <HAL_GPIO_WritePin>
}
 80066f0:	bf00      	nop
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	58021000 	.word	0x58021000

080066f8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80066fc:	2201      	movs	r2, #1
 80066fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006702:	4802      	ldr	r0, [pc, #8]	; (800670c <ST7735_Unselect+0x14>)
 8006704:	f004 f95e 	bl	800a9c4 <HAL_GPIO_WritePin>
}
 8006708:	bf00      	nop
 800670a:	bd80      	pop	{r7, pc}
 800670c:	58021000 	.word	0x58021000

08006710 <ST7735_Select1>:
static void ST7735_Select1() {
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8006714:	2200      	movs	r2, #0
 8006716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800671a:	4802      	ldr	r0, [pc, #8]	; (8006724 <ST7735_Select1+0x14>)
 800671c:	f004 f952 	bl	800a9c4 <HAL_GPIO_WritePin>
}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}
 8006724:	58021000 	.word	0x58021000

08006728 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 800672c:	2201      	movs	r2, #1
 800672e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006732:	4802      	ldr	r0, [pc, #8]	; (800673c <ST7735_Unselect1+0x14>)
 8006734:	f004 f946 	bl	800a9c4 <HAL_GPIO_WritePin>
}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}
 800673c:	58021000 	.word	0x58021000

08006740 <ST7735_Reset>:

static void ST7735_Reset() {
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8006744:	2200      	movs	r2, #0
 8006746:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800674a:	4807      	ldr	r0, [pc, #28]	; (8006768 <ST7735_Reset+0x28>)
 800674c:	f004 f93a 	bl	800a9c4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8006750:	2005      	movs	r0, #5
 8006752:	f000 ffd1 	bl	80076f8 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8006756:	2201      	movs	r2, #1
 8006758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800675c:	4802      	ldr	r0, [pc, #8]	; (8006768 <ST7735_Reset+0x28>)
 800675e:	f004 f931 	bl	800a9c4 <HAL_GPIO_WritePin>
}
 8006762:	bf00      	nop
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	58021000 	.word	0x58021000

0800676c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8006776:	2200      	movs	r2, #0
 8006778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800677c:	4806      	ldr	r0, [pc, #24]	; (8006798 <ST7735_WriteCommand+0x2c>)
 800677e:	f004 f921 	bl	800a9c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006782:	1df9      	adds	r1, r7, #7
 8006784:	f04f 33ff 	mov.w	r3, #4294967295
 8006788:	2201      	movs	r2, #1
 800678a:	4804      	ldr	r0, [pc, #16]	; (800679c <ST7735_WriteCommand+0x30>)
 800678c:	f006 ff56 	bl	800d63c <HAL_SPI_Transmit>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	58021800 	.word	0x58021800
 800679c:	24000260 	.word	0x24000260

080067a0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80067aa:	2201      	movs	r2, #1
 80067ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067b0:	4807      	ldr	r0, [pc, #28]	; (80067d0 <ST7735_WriteData+0x30>)
 80067b2:	f004 f907 	bl	800a9c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	f04f 33ff 	mov.w	r3, #4294967295
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	4804      	ldr	r0, [pc, #16]	; (80067d4 <ST7735_WriteData+0x34>)
 80067c2:	f006 ff3b 	bl	800d63c <HAL_SPI_Transmit>
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	58021800 	.word	0x58021800
 80067d4:	24000260 	.word	0x24000260

080067d8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 80067ea:	e034      	b.n	8006856 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff ffb7 	bl	800676c <ST7735_WriteCommand>

		numArgs = *addr++;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8006808:	7abb      	ldrb	r3, [r7, #10]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8006812:	7abb      	ldrb	r3, [r7, #10]
 8006814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006818:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 800681a:	7abb      	ldrb	r3, [r7, #10]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8006820:	7abb      	ldrb	r3, [r7, #10]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ffbb 	bl	80067a0 <ST7735_WriteData>
			addr += numArgs;
 800682a:	7abb      	ldrb	r3, [r7, #10]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4413      	add	r3, r2
 8006830:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8006832:	89bb      	ldrh	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00e      	beq.n	8006856 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	607a      	str	r2, [r7, #4]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8006842:	89bb      	ldrh	r3, [r7, #12]
 8006844:	2bff      	cmp	r3, #255	; 0xff
 8006846:	d102      	bne.n	800684e <ST7735_ExecuteCommandList+0x76>
 8006848:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800684c:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 800684e:	89bb      	ldrh	r3, [r7, #12]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 ff51 	bl	80076f8 <HAL_Delay>
	while(numCommands--) {
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	1e5a      	subs	r2, r3, #1
 800685a:	73fa      	strb	r2, [r7, #15]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1c5      	bne.n	80067ec <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800686a:	b590      	push	{r4, r7, lr}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	4604      	mov	r4, r0
 8006872:	4608      	mov	r0, r1
 8006874:	4611      	mov	r1, r2
 8006876:	461a      	mov	r2, r3
 8006878:	4623      	mov	r3, r4
 800687a:	71fb      	strb	r3, [r7, #7]
 800687c:	4603      	mov	r3, r0
 800687e:	71bb      	strb	r3, [r7, #6]
 8006880:	460b      	mov	r3, r1
 8006882:	717b      	strb	r3, [r7, #5]
 8006884:	4613      	mov	r3, r2
 8006886:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006888:	202a      	movs	r0, #42	; 0x2a
 800688a:	f7ff ff6f 	bl	800676c <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800688e:	2300      	movs	r3, #0
 8006890:	733b      	strb	r3, [r7, #12]
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	3302      	adds	r3, #2
 8006896:	b2db      	uxtb	r3, r3
 8006898:	737b      	strb	r3, [r7, #13]
 800689a:	2300      	movs	r3, #0
 800689c:	73bb      	strb	r3, [r7, #14]
 800689e:	797b      	ldrb	r3, [r7, #5]
 80068a0:	3302      	adds	r3, #2
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80068a6:	f107 030c 	add.w	r3, r7, #12
 80068aa:	2104      	movs	r1, #4
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff77 	bl	80067a0 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 80068b2:	202b      	movs	r0, #43	; 0x2b
 80068b4:	f7ff ff5a 	bl	800676c <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 80068b8:	79bb      	ldrb	r3, [r7, #6]
 80068ba:	3301      	adds	r3, #1
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 80068c0:	793b      	ldrb	r3, [r7, #4]
 80068c2:	3301      	adds	r3, #1
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80068c8:	f107 030c 	add.w	r3, r7, #12
 80068cc:	2104      	movs	r1, #4
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff ff66 	bl	80067a0 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 80068d4:	202c      	movs	r0, #44	; 0x2c
 80068d6:	f7ff ff49 	bl	800676c <ST7735_WriteCommand>
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd90      	pop	{r4, r7, pc}
	...

080068e4 <ST7735_Init>:

void ST7735_Init() {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
	ST7735_Select();
 80068e8:	f7ff fefa 	bl	80066e0 <ST7735_Select>
	ST7735_Select1();
 80068ec:	f7ff ff10 	bl	8006710 <ST7735_Select1>
	ST7735_Reset();
 80068f0:	f7ff ff26 	bl	8006740 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 80068f4:	4807      	ldr	r0, [pc, #28]	; (8006914 <ST7735_Init+0x30>)
 80068f6:	f7ff ff6f 	bl	80067d8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 80068fa:	4807      	ldr	r0, [pc, #28]	; (8006918 <ST7735_Init+0x34>)
 80068fc:	f7ff ff6c 	bl	80067d8 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8006900:	4806      	ldr	r0, [pc, #24]	; (800691c <ST7735_Init+0x38>)
 8006902:	f7ff ff69 	bl	80067d8 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8006906:	f7ff fef7 	bl	80066f8 <ST7735_Unselect>
	ST7735_Unselect1();
 800690a:	f7ff ff0d 	bl	8006728 <ST7735_Unselect1>
}
 800690e:	bf00      	nop
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	08012548 	.word	0x08012548
 8006918:	08012584 	.word	0x08012584
 800691c:	08012594 	.word	0x08012594

08006920 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006920:	b082      	sub	sp, #8
 8006922:	b590      	push	{r4, r7, lr}
 8006924:	b089      	sub	sp, #36	; 0x24
 8006926:	af00      	add	r7, sp, #0
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	4603      	mov	r3, r0
 800692c:	80fb      	strh	r3, [r7, #6]
 800692e:	460b      	mov	r3, r1
 8006930:	80bb      	strh	r3, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	b2d8      	uxtb	r0, r3
 800693a:	88bb      	ldrh	r3, [r7, #4]
 800693c:	b2d9      	uxtb	r1, r3
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	b2da      	uxtb	r2, r3
 8006942:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006946:	4413      	add	r3, r2
 8006948:	b2db      	uxtb	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b2dc      	uxtb	r4, r3
 800694e:	88bb      	ldrh	r3, [r7, #4]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006956:	4413      	add	r3, r2
 8006958:	b2db      	uxtb	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	4622      	mov	r2, r4
 8006960:	f7ff ff83 	bl	800686a <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	e043      	b.n	80069f2 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 800696a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	3b20      	subs	r3, #32
 8006970:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	4619      	mov	r1, r3
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	440b      	add	r3, r1
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	e029      	b.n	80069e0 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00e      	beq.n	80069ba <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 800699c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800699e:	0a1b      	lsrs	r3, r3, #8
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	743b      	strb	r3, [r7, #16]
 80069a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 80069ac:	f107 0310 	add.w	r3, r7, #16
 80069b0:	2102      	movs	r1, #2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fef4 	bl	80067a0 <ST7735_WriteData>
 80069b8:	e00f      	b.n	80069da <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80069ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069be:	0a1b      	lsrs	r3, r3, #8
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	733b      	strb	r3, [r7, #12]
 80069c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	2102      	movs	r1, #2
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff fee3 	bl	80067a0 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	3301      	adds	r3, #1
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80069e4:	461a      	mov	r2, r3
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d3cf      	bcc.n	800698c <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	3301      	adds	r3, #1
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80069f6:	461a      	mov	r2, r3
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d3b5      	bcc.n	800696a <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	3724      	adds	r7, #36	; 0x24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006a0a:	b002      	add	sp, #8
 8006a0c:	4770      	bx	lr

08006a0e <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006a0e:	b082      	sub	sp, #8
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af04      	add	r7, sp, #16
 8006a16:	603a      	str	r2, [r7, #0]
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	80fb      	strh	r3, [r7, #6]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8006a22:	f7ff fe5d 	bl	80066e0 <ST7735_Select>

	while(*str) {
 8006a26:	e02d      	b.n	8006a84 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	7d3a      	ldrb	r2, [r7, #20]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a30:	dd13      	ble.n	8006a5a <ST7735_WriteString+0x4c>
			x = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006a36:	7d7b      	ldrb	r3, [r7, #21]
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	88bb      	ldrh	r3, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006a40:	88bb      	ldrh	r3, [r7, #4]
 8006a42:	7d7a      	ldrb	r2, [r7, #21]
 8006a44:	4413      	add	r3, r2
 8006a46:	2b7f      	cmp	r3, #127	; 0x7f
 8006a48:	dc21      	bgt.n	8006a8e <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d103      	bne.n	8006a5a <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	603b      	str	r3, [r7, #0]
				continue;
 8006a58:	e014      	b.n	8006a84 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781a      	ldrb	r2, [r3, #0]
 8006a5e:	88b9      	ldrh	r1, [r7, #4]
 8006a60:	88f8      	ldrh	r0, [r7, #6]
 8006a62:	8c3b      	ldrh	r3, [r7, #32]
 8006a64:	9302      	str	r3, [sp, #8]
 8006a66:	8bbb      	ldrh	r3, [r7, #28]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f7ff ff56 	bl	8006920 <ST7735_WriteChar>
		x += font.width;
 8006a74:	7d3b      	ldrb	r3, [r7, #20]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
		str++;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	3301      	adds	r3, #1
 8006a82:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1cd      	bne.n	8006a28 <ST7735_WriteString+0x1a>
 8006a8c:	e000      	b.n	8006a90 <ST7735_WriteString+0x82>
				break;
 8006a8e:	bf00      	nop
	}

	ST7735_Unselect();
 8006a90:	f7ff fe32 	bl	80066f8 <ST7735_Unselect>
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a9e:	b002      	add	sp, #8
 8006aa0:	4770      	bx	lr

08006aa2 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af04      	add	r7, sp, #16
 8006aaa:	603a      	str	r2, [r7, #0]
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	4603      	mov	r3, r0
 8006ab0:	80fb      	strh	r3, [r7, #6]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8006ab6:	f7ff fe2b 	bl	8006710 <ST7735_Select1>

	while(*str) {
 8006aba:	e02d      	b.n	8006b18 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	7d3a      	ldrb	r2, [r7, #20]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac4:	dd13      	ble.n	8006aee <ST7735_WriteString1+0x4c>
			x = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006aca:	7d7b      	ldrb	r3, [r7, #21]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	88bb      	ldrh	r3, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006ad4:	88bb      	ldrh	r3, [r7, #4]
 8006ad6:	7d7a      	ldrb	r2, [r7, #21]
 8006ad8:	4413      	add	r3, r2
 8006ada:	2b7f      	cmp	r3, #127	; 0x7f
 8006adc:	dc21      	bgt.n	8006b22 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d103      	bne.n	8006aee <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	603b      	str	r3, [r7, #0]
				continue;
 8006aec:	e014      	b.n	8006b18 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	88b9      	ldrh	r1, [r7, #4]
 8006af4:	88f8      	ldrh	r0, [r7, #6]
 8006af6:	8c3b      	ldrh	r3, [r7, #32]
 8006af8:	9302      	str	r3, [sp, #8]
 8006afa:	8bbb      	ldrh	r3, [r7, #28]
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f7ff ff0c 	bl	8006920 <ST7735_WriteChar>
		x += font.width;
 8006b08:	7d3b      	ldrb	r3, [r7, #20]
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	4413      	add	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
		str++;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1cd      	bne.n	8006abc <ST7735_WriteString1+0x1a>
 8006b20:	e000      	b.n	8006b24 <ST7735_WriteString1+0x82>
				break;
 8006b22:	bf00      	nop
	}

	ST7735_Unselect1();
 8006b24:	f7ff fe00 	bl	8006728 <ST7735_Unselect1>
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b32:	b002      	add	sp, #8
 8006b34:	4770      	bx	lr

08006b36 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8006b36:	b082      	sub	sp, #8
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af04      	add	r7, sp, #16
 8006b3e:	603a      	str	r2, [r7, #0]
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	4603      	mov	r3, r0
 8006b44:	80fb      	strh	r3, [r7, #6]
 8006b46:	460b      	mov	r3, r1
 8006b48:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8006b4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8006b52:	f7ff fdc5 	bl	80066e0 <ST7735_Select>
 8006b56:	e034      	b.n	8006bc2 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8006b58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d130      	bne.n	8006bc2 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8006b60:	f7ff fdd6 	bl	8006710 <ST7735_Select1>

	}


	while(*str) {
 8006b64:	e02d      	b.n	8006bc2 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	7d3a      	ldrb	r2, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b6e:	dd13      	ble.n	8006b98 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006b74:	7d7b      	ldrb	r3, [r7, #21]
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	88bb      	ldrh	r3, [r7, #4]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006b7e:	88bb      	ldrh	r3, [r7, #4]
 8006b80:	7d7a      	ldrb	r2, [r7, #21]
 8006b82:	4413      	add	r3, r2
 8006b84:	2b7f      	cmp	r3, #127	; 0x7f
 8006b86:	dc21      	bgt.n	8006bcc <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d103      	bne.n	8006b98 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	603b      	str	r3, [r7, #0]
				continue;
 8006b96:	e014      	b.n	8006bc2 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	88b9      	ldrh	r1, [r7, #4]
 8006b9e:	88f8      	ldrh	r0, [r7, #6]
 8006ba0:	8c3b      	ldrh	r3, [r7, #32]
 8006ba2:	9302      	str	r3, [sp, #8]
 8006ba4:	8bbb      	ldrh	r3, [r7, #28]
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f7ff feb7 	bl	8006920 <ST7735_WriteChar>
		x += font.width;
 8006bb2:	7d3b      	ldrb	r3, [r7, #20]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	4413      	add	r3, r2
 8006bba:	80fb      	strh	r3, [r7, #6]
		str++;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1cd      	bne.n	8006b66 <ST7735_WriteStringNSS+0x30>
 8006bca:	e000      	b.n	8006bce <ST7735_WriteStringNSS+0x98>
				break;
 8006bcc:	bf00      	nop
	}
	if(NSS == 0){
 8006bce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8006bd6:	f7ff fd8f 	bl	80066f8 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8006bda:	e005      	b.n	8006be8 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8006bdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 8006be4:	f7ff fda0 	bl	8006728 <ST7735_Unselect1>
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bf2:	b002      	add	sp, #8
 8006bf4:	4770      	bx	lr
	...

08006bf8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	461a      	mov	r2, r3
 8006c06:	4623      	mov	r3, r4
 8006c08:	80fb      	strh	r3, [r7, #6]
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	80bb      	strh	r3, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	807b      	strh	r3, [r7, #2]
 8006c12:	4613      	mov	r3, r2
 8006c14:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1a:	d858      	bhi.n	8006cce <ST7735_FillRectangle+0xd6>
 8006c1c:	88bb      	ldrh	r3, [r7, #4]
 8006c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c20:	d855      	bhi.n	8006cce <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	887b      	ldrh	r3, [r7, #2]
 8006c26:	4413      	add	r3, r2
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	dd03      	ble.n	8006c34 <ST7735_FillRectangle+0x3c>
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006c32:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006c34:	88ba      	ldrh	r2, [r7, #4]
 8006c36:	883b      	ldrh	r3, [r7, #0]
 8006c38:	4413      	add	r3, r2
 8006c3a:	2b80      	cmp	r3, #128	; 0x80
 8006c3c:	dd03      	ble.n	8006c46 <ST7735_FillRectangle+0x4e>
 8006c3e:	88bb      	ldrh	r3, [r7, #4]
 8006c40:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006c44:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8006c46:	f7ff fd4b 	bl	80066e0 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	b2d8      	uxtb	r0, r3
 8006c4e:	88bb      	ldrh	r3, [r7, #4]
 8006c50:	b2d9      	uxtb	r1, r3
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b2dc      	uxtb	r4, r3
 8006c62:	88bb      	ldrh	r3, [r7, #4]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	883b      	ldrh	r3, [r7, #0]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	4622      	mov	r2, r4
 8006c74:	f7ff fdf9 	bl	800686a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006c78:	8c3b      	ldrh	r3, [r7, #32]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	733b      	strb	r3, [r7, #12]
 8006c82:	8c3b      	ldrh	r3, [r7, #32]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c8e:	4812      	ldr	r0, [pc, #72]	; (8006cd8 <ST7735_FillRectangle+0xe0>)
 8006c90:	f003 fe98 	bl	800a9c4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006c94:	883b      	ldrh	r3, [r7, #0]
 8006c96:	80bb      	strh	r3, [r7, #4]
 8006c98:	e013      	b.n	8006cc2 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8006c9a:	887b      	ldrh	r3, [r7, #2]
 8006c9c:	80fb      	strh	r3, [r7, #6]
 8006c9e:	e00a      	b.n	8006cb6 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006ca0:	f107 010c 	add.w	r1, r7, #12
 8006ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca8:	2202      	movs	r2, #2
 8006caa:	480c      	ldr	r0, [pc, #48]	; (8006cdc <ST7735_FillRectangle+0xe4>)
 8006cac:	f006 fcc6 	bl	800d63c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	80fb      	strh	r3, [r7, #6]
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f1      	bne.n	8006ca0 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8006cbc:	88bb      	ldrh	r3, [r7, #4]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	80bb      	strh	r3, [r7, #4]
 8006cc2:	88bb      	ldrh	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e8      	bne.n	8006c9a <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8006cc8:	f7ff fd16 	bl	80066f8 <ST7735_Unselect>
 8006ccc:	e000      	b.n	8006cd0 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006cce:	bf00      	nop
}
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd90      	pop	{r4, r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	58021800 	.word	0x58021800
 8006cdc:	24000260 	.word	0x24000260

08006ce0 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006ce0:	b590      	push	{r4, r7, lr}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4623      	mov	r3, r4
 8006cf0:	80fb      	strh	r3, [r7, #6]
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	80bb      	strh	r3, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	807b      	strh	r3, [r7, #2]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b7f      	cmp	r3, #127	; 0x7f
 8006d02:	d858      	bhi.n	8006db6 <ST7735_FillRectangle1+0xd6>
 8006d04:	88bb      	ldrh	r3, [r7, #4]
 8006d06:	2b7f      	cmp	r3, #127	; 0x7f
 8006d08:	d855      	bhi.n	8006db6 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	887b      	ldrh	r3, [r7, #2]
 8006d0e:	4413      	add	r3, r2
 8006d10:	2b80      	cmp	r3, #128	; 0x80
 8006d12:	dd03      	ble.n	8006d1c <ST7735_FillRectangle1+0x3c>
 8006d14:	88fb      	ldrh	r3, [r7, #6]
 8006d16:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006d1a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006d1c:	88ba      	ldrh	r2, [r7, #4]
 8006d1e:	883b      	ldrh	r3, [r7, #0]
 8006d20:	4413      	add	r3, r2
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	dd03      	ble.n	8006d2e <ST7735_FillRectangle1+0x4e>
 8006d26:	88bb      	ldrh	r3, [r7, #4]
 8006d28:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006d2c:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8006d2e:	f7ff fcef 	bl	8006710 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	b2d8      	uxtb	r0, r3
 8006d36:	88bb      	ldrh	r3, [r7, #4]
 8006d38:	b2d9      	uxtb	r1, r3
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b2dc      	uxtb	r4, r3
 8006d4a:	88bb      	ldrh	r3, [r7, #4]
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	883b      	ldrh	r3, [r7, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	4413      	add	r3, r2
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	f7ff fd85 	bl	800686a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006d60:	8c3b      	ldrh	r3, [r7, #32]
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	733b      	strb	r3, [r7, #12]
 8006d6a:	8c3b      	ldrh	r3, [r7, #32]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006d70:	2201      	movs	r2, #1
 8006d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d76:	4812      	ldr	r0, [pc, #72]	; (8006dc0 <ST7735_FillRectangle1+0xe0>)
 8006d78:	f003 fe24 	bl	800a9c4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006d7c:	883b      	ldrh	r3, [r7, #0]
 8006d7e:	80bb      	strh	r3, [r7, #4]
 8006d80:	e013      	b.n	8006daa <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8006d82:	887b      	ldrh	r3, [r7, #2]
 8006d84:	80fb      	strh	r3, [r7, #6]
 8006d86:	e00a      	b.n	8006d9e <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006d88:	f107 010c 	add.w	r1, r7, #12
 8006d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d90:	2202      	movs	r2, #2
 8006d92:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <ST7735_FillRectangle1+0xe4>)
 8006d94:	f006 fc52 	bl	800d63c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	80fb      	strh	r3, [r7, #6]
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f1      	bne.n	8006d88 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8006da4:	88bb      	ldrh	r3, [r7, #4]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	80bb      	strh	r3, [r7, #4]
 8006daa:	88bb      	ldrh	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e8      	bne.n	8006d82 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8006db0:	f7ff fcba 	bl	8006728 <ST7735_Unselect1>
 8006db4:	e000      	b.n	8006db8 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006db6:	bf00      	nop
}
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd90      	pop	{r4, r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	58021800 	.word	0x58021800
 8006dc4:	24000260 	.word	0x24000260

08006dc8 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8006dc8:	b590      	push	{r4, r7, lr}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	80fb      	strh	r3, [r7, #6]
 8006dda:	4603      	mov	r3, r0
 8006ddc:	80bb      	strh	r3, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	807b      	strh	r3, [r7, #2]
 8006de2:	4613      	mov	r3, r2
 8006de4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dea:	d86e      	bhi.n	8006eca <ST7735_FillRectangleNSS+0x102>
 8006dec:	88bb      	ldrh	r3, [r7, #4]
 8006dee:	2b7f      	cmp	r3, #127	; 0x7f
 8006df0:	d86b      	bhi.n	8006eca <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	887b      	ldrh	r3, [r7, #2]
 8006df6:	4413      	add	r3, r2
 8006df8:	2b80      	cmp	r3, #128	; 0x80
 8006dfa:	dd03      	ble.n	8006e04 <ST7735_FillRectangleNSS+0x3c>
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006e02:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006e04:	88ba      	ldrh	r2, [r7, #4]
 8006e06:	883b      	ldrh	r3, [r7, #0]
 8006e08:	4413      	add	r3, r2
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	dd03      	ble.n	8006e16 <ST7735_FillRectangleNSS+0x4e>
 8006e0e:	88bb      	ldrh	r3, [r7, #4]
 8006e10:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006e14:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8006e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8006e1e:	f7ff fc5f 	bl	80066e0 <ST7735_Select>
 8006e22:	e005      	b.n	8006e30 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8006e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8006e2c:	f7ff fc70 	bl	8006710 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	b2d8      	uxtb	r0, r3
 8006e34:	88bb      	ldrh	r3, [r7, #4]
 8006e36:	b2d9      	uxtb	r1, r3
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	887b      	ldrh	r3, [r7, #2]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b2dc      	uxtb	r4, r3
 8006e48:	88bb      	ldrh	r3, [r7, #4]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	883b      	ldrh	r3, [r7, #0]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	4622      	mov	r2, r4
 8006e5a:	f7ff fd06 	bl	800686a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006e5e:	8c3b      	ldrh	r3, [r7, #32]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	733b      	strb	r3, [r7, #12]
 8006e68:	8c3b      	ldrh	r3, [r7, #32]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e74:	4817      	ldr	r0, [pc, #92]	; (8006ed4 <ST7735_FillRectangleNSS+0x10c>)
 8006e76:	f003 fda5 	bl	800a9c4 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006e7a:	883b      	ldrh	r3, [r7, #0]
 8006e7c:	80bb      	strh	r3, [r7, #4]
 8006e7e:	e013      	b.n	8006ea8 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8006e80:	887b      	ldrh	r3, [r7, #2]
 8006e82:	80fb      	strh	r3, [r7, #6]
 8006e84:	e00a      	b.n	8006e9c <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006e86:	f107 010c 	add.w	r1, r7, #12
 8006e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8e:	2202      	movs	r2, #2
 8006e90:	4811      	ldr	r0, [pc, #68]	; (8006ed8 <ST7735_FillRectangleNSS+0x110>)
 8006e92:	f006 fbd3 	bl	800d63c <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006e96:	88fb      	ldrh	r3, [r7, #6]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	80fb      	strh	r3, [r7, #6]
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f1      	bne.n	8006e86 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8006ea2:	88bb      	ldrh	r3, [r7, #4]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	80bb      	strh	r3, [r7, #4]
 8006ea8:	88bb      	ldrh	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e8      	bne.n	8006e80 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8006eae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8006eb6:	f7ff fc1f 	bl	80066f8 <ST7735_Unselect>
 8006eba:	e007      	b.n	8006ecc <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8006ebc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d103      	bne.n	8006ecc <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8006ec4:	f7ff fc30 	bl	8006728 <ST7735_Unselect1>
 8006ec8:	e000      	b.n	8006ecc <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006eca:	bf00      	nop
	}
}
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd90      	pop	{r4, r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	58021800 	.word	0x58021800
 8006ed8:	24000260 	.word	0x24000260

08006edc <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	2380      	movs	r3, #128	; 0x80
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	2100      	movs	r1, #0
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	f7ff fe81 	bl	8006bf8 <ST7735_FillRectangle>
}
 8006ef6:	bf00      	nop
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	4603      	mov	r3, r0
 8006f06:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	2380      	movs	r3, #128	; 0x80
 8006f0e:	2280      	movs	r2, #128	; 0x80
 8006f10:	2100      	movs	r1, #0
 8006f12:	2000      	movs	r0, #0
 8006f14:	f7ff fee4 	bl	8006ce0 <ST7735_FillRectangle1>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <HAL_MspInit+0x30>)
 8006f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f2c:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <HAL_MspInit+0x30>)
 8006f2e:	f043 0302 	orr.w	r3, r3, #2
 8006f32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <HAL_MspInit+0x30>)
 8006f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	607b      	str	r3, [r7, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	58024400 	.word	0x58024400

08006f54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08e      	sub	sp, #56	; 0x38
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a59      	ldr	r2, [pc, #356]	; (80070d8 <HAL_ETH_MspInit+0x184>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	f040 80ab 	bne.w	80070ce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006f78:	4b58      	ldr	r3, [pc, #352]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f7e:	4a57      	ldr	r2, [pc, #348]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f88:	4b54      	ldr	r3, [pc, #336]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f92:	623b      	str	r3, [r7, #32]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006f96:	4b51      	ldr	r3, [pc, #324]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f9c:	4a4f      	ldr	r2, [pc, #316]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006fa6:	4b4d      	ldr	r3, [pc, #308]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006fb4:	4b49      	ldr	r3, [pc, #292]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006fba:	4a48      	ldr	r2, [pc, #288]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006fc4:	4b45      	ldr	r3, [pc, #276]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fd2:	4b42      	ldr	r3, [pc, #264]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fd8:	4a40      	ldr	r2, [pc, #256]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006fda:	f043 0304 	orr.w	r3, r3, #4
 8006fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fe2:	4b3e      	ldr	r3, [pc, #248]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff0:	4b3a      	ldr	r3, [pc, #232]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ff6:	4a39      	ldr	r2, [pc, #228]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007000:	4b36      	ldr	r3, [pc, #216]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8007002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800700e:	4b33      	ldr	r3, [pc, #204]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8007010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007014:	4a31      	ldr	r2, [pc, #196]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8007016:	f043 0302 	orr.w	r3, r3, #2
 800701a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800701e:	4b2f      	ldr	r3, [pc, #188]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8007020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <HAL_ETH_MspInit+0x188>)
 800702e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007032:	4a2a      	ldr	r2, [pc, #168]	; (80070dc <HAL_ETH_MspInit+0x188>)
 8007034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <HAL_ETH_MspInit+0x188>)
 800703e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	60bb      	str	r3, [r7, #8]
 8007048:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800704a:	2332      	movs	r3, #50	; 0x32
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704e:	2302      	movs	r3, #2
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007052:	2300      	movs	r3, #0
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007056:	2300      	movs	r3, #0
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800705a:	230b      	movs	r3, #11
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800705e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007062:	4619      	mov	r1, r3
 8007064:	481e      	ldr	r0, [pc, #120]	; (80070e0 <HAL_ETH_MspInit+0x18c>)
 8007066:	f003 fae5 	bl	800a634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800706a:	2386      	movs	r3, #134	; 0x86
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800706e:	2302      	movs	r3, #2
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007072:	2300      	movs	r3, #0
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007076:	2300      	movs	r3, #0
 8007078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800707a:	230b      	movs	r3, #11
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800707e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007082:	4619      	mov	r1, r3
 8007084:	4817      	ldr	r0, [pc, #92]	; (80070e4 <HAL_ETH_MspInit+0x190>)
 8007086:	f003 fad5 	bl	800a634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800708a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007090:	2302      	movs	r3, #2
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007094:	2300      	movs	r3, #0
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007098:	2300      	movs	r3, #0
 800709a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800709c:	230b      	movs	r3, #11
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070a4:	4619      	mov	r1, r3
 80070a6:	4810      	ldr	r0, [pc, #64]	; (80070e8 <HAL_ETH_MspInit+0x194>)
 80070a8:	f003 fac4 	bl	800a634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80070ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b2:	2302      	movs	r3, #2
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ba:	2300      	movs	r3, #0
 80070bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80070be:	230b      	movs	r3, #11
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070c6:	4619      	mov	r1, r3
 80070c8:	4808      	ldr	r0, [pc, #32]	; (80070ec <HAL_ETH_MspInit+0x198>)
 80070ca:	f003 fab3 	bl	800a634 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80070ce:	bf00      	nop
 80070d0:	3738      	adds	r7, #56	; 0x38
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	40028000 	.word	0x40028000
 80070dc:	58024400 	.word	0x58024400
 80070e0:	58020800 	.word	0x58020800
 80070e4:	58020000 	.word	0x58020000
 80070e8:	58020400 	.word	0x58020400
 80070ec:	58021800 	.word	0x58021800

080070f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070f8:	f107 0314 	add.w	r3, r7, #20
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	605a      	str	r2, [r3, #4]
 8007102:	609a      	str	r2, [r3, #8]
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2a      	ldr	r2, [pc, #168]	; (80071b8 <HAL_SPI_MspInit+0xc8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d14d      	bne.n	80071ae <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007112:	4b2a      	ldr	r3, [pc, #168]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007118:	4a28      	ldr	r2, [pc, #160]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007122:	4b26      	ldr	r3, [pc, #152]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007130:	4b22      	ldr	r3, [pc, #136]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007136:	4a21      	ldr	r2, [pc, #132]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007138:	f043 0302 	orr.w	r3, r3, #2
 800713c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007140:	4b1e      	ldr	r3, [pc, #120]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800714e:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007154:	4a19      	ldr	r2, [pc, #100]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007156:	f043 0304 	orr.w	r3, r3, #4
 800715a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800715e:	4b17      	ldr	r3, [pc, #92]	; (80071bc <HAL_SPI_MspInit+0xcc>)
 8007160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800716c:	2304      	movs	r3, #4
 800716e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007170:	2302      	movs	r3, #2
 8007172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007174:	2302      	movs	r3, #2
 8007176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007178:	2300      	movs	r3, #0
 800717a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800717c:	2307      	movs	r3, #7
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007180:	f107 0314 	add.w	r3, r7, #20
 8007184:	4619      	mov	r1, r3
 8007186:	480e      	ldr	r0, [pc, #56]	; (80071c0 <HAL_SPI_MspInit+0xd0>)
 8007188:	f003 fa54 	bl	800a634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800718c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007192:	2302      	movs	r3, #2
 8007194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007196:	2302      	movs	r3, #2
 8007198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800719a:	2300      	movs	r3, #0
 800719c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800719e:	2306      	movs	r3, #6
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071a2:	f107 0314 	add.w	r3, r7, #20
 80071a6:	4619      	mov	r1, r3
 80071a8:	4806      	ldr	r0, [pc, #24]	; (80071c4 <HAL_SPI_MspInit+0xd4>)
 80071aa:	f003 fa43 	bl	800a634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80071ae:	bf00      	nop
 80071b0:	3728      	adds	r7, #40	; 0x28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40003c00 	.word	0x40003c00
 80071bc:	58024400 	.word	0x58024400
 80071c0:	58020400 	.word	0x58020400
 80071c4:	58020800 	.word	0x58020800

080071c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a0e      	ldr	r2, [pc, #56]	; (8007210 <HAL_TIM_Base_MspInit+0x48>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d116      	bne.n	8007208 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80071da:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <HAL_TIM_Base_MspInit+0x4c>)
 80071dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071e0:	4a0c      	ldr	r2, [pc, #48]	; (8007214 <HAL_TIM_Base_MspInit+0x4c>)
 80071e2:	f043 0320 	orr.w	r3, r3, #32
 80071e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80071ea:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <HAL_TIM_Base_MspInit+0x4c>)
 80071ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80071f8:	2200      	movs	r2, #0
 80071fa:	2100      	movs	r1, #0
 80071fc:	2037      	movs	r0, #55	; 0x37
 80071fe:	f000 fb9a 	bl	8007936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007202:	2037      	movs	r0, #55	; 0x37
 8007204:	f000 fbb1 	bl	800796a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40001400 	.word	0x40001400
 8007214:	58024400 	.word	0x58024400

08007218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b0b8      	sub	sp, #224	; 0xe0
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	609a      	str	r2, [r3, #8]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007230:	f107 0310 	add.w	r3, r7, #16
 8007234:	22bc      	movs	r2, #188	; 0xbc
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f009 f88d 	bl	8010358 <memset>
  if(huart->Instance==USART3)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a57      	ldr	r2, [pc, #348]	; (80073a0 <HAL_UART_MspInit+0x188>)
 8007244:	4293      	cmp	r3, r2
 8007246:	f040 80a6 	bne.w	8007396 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800724a:	2302      	movs	r3, #2
 800724c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800724e:	2300      	movs	r3, #0
 8007250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007254:	f107 0310 	add.w	r3, r7, #16
 8007258:	4618      	mov	r0, r3
 800725a:	f004 fd81 	bl	800bd60 <HAL_RCCEx_PeriphCLKConfig>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8007264:	f7ff fa36 	bl	80066d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007268:	4b4e      	ldr	r3, [pc, #312]	; (80073a4 <HAL_UART_MspInit+0x18c>)
 800726a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800726e:	4a4d      	ldr	r2, [pc, #308]	; (80073a4 <HAL_UART_MspInit+0x18c>)
 8007270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007274:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007278:	4b4a      	ldr	r3, [pc, #296]	; (80073a4 <HAL_UART_MspInit+0x18c>)
 800727a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800727e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007286:	4b47      	ldr	r3, [pc, #284]	; (80073a4 <HAL_UART_MspInit+0x18c>)
 8007288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800728c:	4a45      	ldr	r2, [pc, #276]	; (80073a4 <HAL_UART_MspInit+0x18c>)
 800728e:	f043 0308 	orr.w	r3, r3, #8
 8007292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007296:	4b43      	ldr	r3, [pc, #268]	; (80073a4 <HAL_UART_MspInit+0x18c>)
 8007298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80072a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ac:	2302      	movs	r3, #2
 80072ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80072be:	2307      	movs	r3, #7
 80072c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80072c8:	4619      	mov	r1, r3
 80072ca:	4837      	ldr	r0, [pc, #220]	; (80073a8 <HAL_UART_MspInit+0x190>)
 80072cc:	f003 f9b2 	bl	800a634 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80072d0:	4b36      	ldr	r3, [pc, #216]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072d2:	4a37      	ldr	r2, [pc, #220]	; (80073b0 <HAL_UART_MspInit+0x198>)
 80072d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80072d6:	4b35      	ldr	r3, [pc, #212]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072d8:	222d      	movs	r2, #45	; 0x2d
 80072da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072dc:	4b33      	ldr	r3, [pc, #204]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072e2:	4b32      	ldr	r3, [pc, #200]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072e8:	4b30      	ldr	r3, [pc, #192]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072f0:	4b2e      	ldr	r3, [pc, #184]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072f6:	4b2d      	ldr	r3, [pc, #180]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80072fc:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <HAL_UART_MspInit+0x194>)
 80072fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007302:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007304:	4b29      	ldr	r3, [pc, #164]	; (80073ac <HAL_UART_MspInit+0x194>)
 8007306:	2200      	movs	r2, #0
 8007308:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800730a:	4b28      	ldr	r3, [pc, #160]	; (80073ac <HAL_UART_MspInit+0x194>)
 800730c:	2200      	movs	r2, #0
 800730e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007310:	4826      	ldr	r0, [pc, #152]	; (80073ac <HAL_UART_MspInit+0x194>)
 8007312:	f000 fb45 	bl	80079a0 <HAL_DMA_Init>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800731c:	f7ff f9da 	bl	80066d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a22      	ldr	r2, [pc, #136]	; (80073ac <HAL_UART_MspInit+0x194>)
 8007324:	67da      	str	r2, [r3, #124]	; 0x7c
 8007326:	4a21      	ldr	r2, [pc, #132]	; (80073ac <HAL_UART_MspInit+0x194>)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800732c:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 800732e:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <HAL_UART_MspInit+0x1a0>)
 8007330:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8007332:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 8007334:	222e      	movs	r2, #46	; 0x2e
 8007336:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007338:	4b1e      	ldr	r3, [pc, #120]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 800733a:	2240      	movs	r2, #64	; 0x40
 800733c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800733e:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 8007340:	2200      	movs	r2, #0
 8007342:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007344:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 8007346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800734a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 800734e:	2200      	movs	r2, #0
 8007350:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007352:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 8007354:	2200      	movs	r2, #0
 8007356:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007358:	4b16      	ldr	r3, [pc, #88]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 800735a:	2200      	movs	r2, #0
 800735c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 8007360:	2200      	movs	r2, #0
 8007362:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007364:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 8007366:	2200      	movs	r2, #0
 8007368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800736a:	4812      	ldr	r0, [pc, #72]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 800736c:	f000 fb18 	bl	80079a0 <HAL_DMA_Init>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8007376:	f7ff f9ad 	bl	80066d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a0d      	ldr	r2, [pc, #52]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 800737e:	679a      	str	r2, [r3, #120]	; 0x78
 8007380:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <HAL_UART_MspInit+0x19c>)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	2027      	movs	r0, #39	; 0x27
 800738c:	f000 fad3 	bl	8007936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007390:	2027      	movs	r0, #39	; 0x27
 8007392:	f000 faea 	bl	800796a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007396:	bf00      	nop
 8007398:	37e0      	adds	r7, #224	; 0xe0
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40004800 	.word	0x40004800
 80073a4:	58024400 	.word	0x58024400
 80073a8:	58020c00 	.word	0x58020c00
 80073ac:	240003c4 	.word	0x240003c4
 80073b0:	40020028 	.word	0x40020028
 80073b4:	2400043c 	.word	0x2400043c
 80073b8:	40020070 	.word	0x40020070

080073bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a22      	ldr	r2, [pc, #136]	; (8007464 <HAL_PCD_MspInit+0xa8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d13d      	bne.n	800745a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80073de:	f003 fcf5 	bl	800adcc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073e2:	4b21      	ldr	r3, [pc, #132]	; (8007468 <HAL_PCD_MspInit+0xac>)
 80073e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073e8:	4a1f      	ldr	r2, [pc, #124]	; (8007468 <HAL_PCD_MspInit+0xac>)
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073f2:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <HAL_PCD_MspInit+0xac>)
 80073f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8007400:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007406:	2302      	movs	r3, #2
 8007408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800740e:	2300      	movs	r3, #0
 8007410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8007412:	230a      	movs	r3, #10
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007416:	f107 0314 	add.w	r3, r7, #20
 800741a:	4619      	mov	r1, r3
 800741c:	4813      	ldr	r0, [pc, #76]	; (800746c <HAL_PCD_MspInit+0xb0>)
 800741e:	f003 f909 	bl	800a634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007428:	2300      	movs	r3, #0
 800742a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742c:	2300      	movs	r3, #0
 800742e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007430:	f107 0314 	add.w	r3, r7, #20
 8007434:	4619      	mov	r1, r3
 8007436:	480d      	ldr	r0, [pc, #52]	; (800746c <HAL_PCD_MspInit+0xb0>)
 8007438:	f003 f8fc 	bl	800a634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <HAL_PCD_MspInit+0xac>)
 800743e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007442:	4a09      	ldr	r2, [pc, #36]	; (8007468 <HAL_PCD_MspInit+0xac>)
 8007444:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007448:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_PCD_MspInit+0xac>)
 800744e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800745a:	bf00      	nop
 800745c:	3728      	adds	r7, #40	; 0x28
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40080000 	.word	0x40080000
 8007468:	58024400 	.word	0x58024400
 800746c:	58020000 	.word	0x58020000

08007470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007474:	e7fe      	b.n	8007474 <NMI_Handler+0x4>

08007476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800747a:	e7fe      	b.n	800747a <HardFault_Handler+0x4>

0800747c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007480:	e7fe      	b.n	8007480 <MemManage_Handler+0x4>

08007482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007482:	b480      	push	{r7}
 8007484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007486:	e7fe      	b.n	8007486 <BusFault_Handler+0x4>

08007488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800748c:	e7fe      	b.n	800748c <UsageFault_Handler+0x4>

0800748e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800748e:	b480      	push	{r7}
 8007490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074aa:	b480      	push	{r7}
 80074ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074ae:	bf00      	nop
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074bc:	f000 f8fc 	bl	80076b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074c0:	bf00      	nop
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80074c8:	4802      	ldr	r0, [pc, #8]	; (80074d4 <DMA1_Stream1_IRQHandler+0x10>)
 80074ca:	f001 fb29 	bl	8008b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80074ce:	bf00      	nop
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	240003c4 	.word	0x240003c4

080074d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80074dc:	4802      	ldr	r0, [pc, #8]	; (80074e8 <DMA1_Stream4_IRQHandler+0x10>)
 80074de:	f001 fb1f 	bl	8008b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80074e2:	bf00      	nop
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	2400043c 	.word	0x2400043c

080074ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80074f0:	4802      	ldr	r0, [pc, #8]	; (80074fc <USART3_IRQHandler+0x10>)
 80074f2:	f006 ff59 	bl	800e3a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	24000334 	.word	0x24000334

08007500 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007504:	4802      	ldr	r0, [pc, #8]	; (8007510 <TIM7_IRQHandler+0x10>)
 8007506:	f006 fc72 	bl	800ddee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	240002e8 	.word	0x240002e8

08007514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800751c:	4a14      	ldr	r2, [pc, #80]	; (8007570 <_sbrk+0x5c>)
 800751e:	4b15      	ldr	r3, [pc, #84]	; (8007574 <_sbrk+0x60>)
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007528:	4b13      	ldr	r3, [pc, #76]	; (8007578 <_sbrk+0x64>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <_sbrk+0x64>)
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <_sbrk+0x68>)
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <_sbrk+0x64>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	429a      	cmp	r2, r3
 8007542:	d207      	bcs.n	8007554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007544:	f008 fede 	bl	8010304 <__errno>
 8007548:	4603      	mov	r3, r0
 800754a:	220c      	movs	r2, #12
 800754c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	e009      	b.n	8007568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007554:	4b08      	ldr	r3, [pc, #32]	; (8007578 <_sbrk+0x64>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800755a:	4b07      	ldr	r3, [pc, #28]	; (8007578 <_sbrk+0x64>)
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	4a05      	ldr	r2, [pc, #20]	; (8007578 <_sbrk+0x64>)
 8007564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007566:	68fb      	ldr	r3, [r7, #12]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	24080000 	.word	0x24080000
 8007574:	00000400 	.word	0x00000400
 8007578:	24000eb0 	.word	0x24000eb0
 800757c:	24000ec8 	.word	0x24000ec8

08007580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007584:	f7fe fc0e 	bl	8005da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007588:	480c      	ldr	r0, [pc, #48]	; (80075bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800758a:	490d      	ldr	r1, [pc, #52]	; (80075c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800758c:	4a0d      	ldr	r2, [pc, #52]	; (80075c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800758e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007590:	e002      	b.n	8007598 <LoopCopyDataInit>

08007592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007596:	3304      	adds	r3, #4

08007598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800759a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800759c:	d3f9      	bcc.n	8007592 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800759e:	4a0a      	ldr	r2, [pc, #40]	; (80075c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80075a0:	4c0a      	ldr	r4, [pc, #40]	; (80075cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80075a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075a4:	e001      	b.n	80075aa <LoopFillZerobss>

080075a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075a8:	3204      	adds	r2, #4

080075aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075ac:	d3fb      	bcc.n	80075a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80075ae:	f008 feaf 	bl	8010310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075b2:	f7fe fc8d 	bl	8005ed0 <main>
  bx  lr
 80075b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80075b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80075bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80075c0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80075c4:	08012634 	.word	0x08012634
  ldr r2, =_sbss
 80075c8:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 80075cc:	24000ec8 	.word	0x24000ec8

080075d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80075d0:	e7fe      	b.n	80075d0 <ADC3_IRQHandler>
	...

080075d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075da:	2003      	movs	r0, #3
 80075dc:	f000 f9a0 	bl	8007920 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075e0:	f004 f9e8 	bl	800b9b4 <HAL_RCC_GetSysClockFreq>
 80075e4:	4602      	mov	r2, r0
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <HAL_Init+0x68>)
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	4913      	ldr	r1, [pc, #76]	; (8007640 <HAL_Init+0x6c>)
 80075f2:	5ccb      	ldrb	r3, [r1, r3]
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
 80075fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075fe:	4b0f      	ldr	r3, [pc, #60]	; (800763c <HAL_Init+0x68>)
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	4a0e      	ldr	r2, [pc, #56]	; (8007640 <HAL_Init+0x6c>)
 8007608:	5cd3      	ldrb	r3, [r2, r3]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
 8007614:	4a0b      	ldr	r2, [pc, #44]	; (8007644 <HAL_Init+0x70>)
 8007616:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007618:	4a0b      	ldr	r2, [pc, #44]	; (8007648 <HAL_Init+0x74>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800761e:	2000      	movs	r0, #0
 8007620:	f000 f814 	bl	800764c <HAL_InitTick>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e002      	b.n	8007634 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800762e:	f7ff fc77 	bl	8006f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	58024400 	.word	0x58024400
 8007640:	08011070 	.word	0x08011070
 8007644:	24000008 	.word	0x24000008
 8007648:	24000004 	.word	0x24000004

0800764c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007654:	4b15      	ldr	r3, [pc, #84]	; (80076ac <HAL_InitTick+0x60>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e021      	b.n	80076a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007660:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <HAL_InitTick+0x64>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <HAL_InitTick+0x60>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	4619      	mov	r1, r3
 800766a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800766e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007672:	fbb2 f3f3 	udiv	r3, r2, r3
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f985 	bl	8007986 <HAL_SYSTICK_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e00e      	b.n	80076a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b0f      	cmp	r3, #15
 800768a:	d80a      	bhi.n	80076a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800768c:	2200      	movs	r2, #0
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	f000 f94f 	bl	8007936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007698:	4a06      	ldr	r2, [pc, #24]	; (80076b4 <HAL_InitTick+0x68>)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	24000020 	.word	0x24000020
 80076b0:	24000004 	.word	0x24000004
 80076b4:	2400001c 	.word	0x2400001c

080076b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <HAL_IncTick+0x20>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <HAL_IncTick+0x24>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4413      	add	r3, r2
 80076c8:	4a04      	ldr	r2, [pc, #16]	; (80076dc <HAL_IncTick+0x24>)
 80076ca:	6013      	str	r3, [r2, #0]
}
 80076cc:	bf00      	nop
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	24000020 	.word	0x24000020
 80076dc:	24000eb4 	.word	0x24000eb4

080076e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return uwTick;
 80076e4:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <HAL_GetTick+0x14>)
 80076e6:	681b      	ldr	r3, [r3, #0]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	24000eb4 	.word	0x24000eb4

080076f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007700:	f7ff ffee 	bl	80076e0 <HAL_GetTick>
 8007704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d005      	beq.n	800771e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007712:	4b0a      	ldr	r3, [pc, #40]	; (800773c <HAL_Delay+0x44>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800771e:	bf00      	nop
 8007720:	f7ff ffde 	bl	80076e0 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	429a      	cmp	r2, r3
 800772e:	d8f7      	bhi.n	8007720 <HAL_Delay+0x28>
  {
  }
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	24000020 	.word	0x24000020

08007740 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007744:	4b03      	ldr	r3, [pc, #12]	; (8007754 <HAL_GetREVID+0x14>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	0c1b      	lsrs	r3, r3, #16
}
 800774a:	4618      	mov	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	5c001000 	.word	0x5c001000

08007758 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007768:	4904      	ldr	r1, [pc, #16]	; (800777c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4313      	orrs	r3, r2
 800776e:	604b      	str	r3, [r1, #4]
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	58000400 	.word	0x58000400

08007780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <__NVIC_SetPriorityGrouping+0x40>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800779c:	4013      	ands	r3, r2
 800779e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <__NVIC_SetPriorityGrouping+0x44>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077ae:	4a04      	ldr	r2, [pc, #16]	; (80077c0 <__NVIC_SetPriorityGrouping+0x40>)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	60d3      	str	r3, [r2, #12]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	e000ed00 	.word	0xe000ed00
 80077c4:	05fa0000 	.word	0x05fa0000

080077c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077cc:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <__NVIC_GetPriorityGrouping+0x18>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	0a1b      	lsrs	r3, r3, #8
 80077d2:	f003 0307 	and.w	r3, r3, #7
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	e000ed00 	.word	0xe000ed00

080077e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80077ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	db0b      	blt.n	800780e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	f003 021f 	and.w	r2, r3, #31
 80077fc:	4907      	ldr	r1, [pc, #28]	; (800781c <__NVIC_EnableIRQ+0x38>)
 80077fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2001      	movs	r0, #1
 8007806:	fa00 f202 	lsl.w	r2, r0, r2
 800780a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	e000e100 	.word	0xe000e100

08007820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800782c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007830:	2b00      	cmp	r3, #0
 8007832:	db0a      	blt.n	800784a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	490c      	ldr	r1, [pc, #48]	; (800786c <__NVIC_SetPriority+0x4c>)
 800783a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800783e:	0112      	lsls	r2, r2, #4
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	440b      	add	r3, r1
 8007844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007848:	e00a      	b.n	8007860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4908      	ldr	r1, [pc, #32]	; (8007870 <__NVIC_SetPriority+0x50>)
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	3b04      	subs	r3, #4
 8007858:	0112      	lsls	r2, r2, #4
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	440b      	add	r3, r1
 800785e:	761a      	strb	r2, [r3, #24]
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	e000e100 	.word	0xe000e100
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007874:	b480      	push	{r7}
 8007876:	b089      	sub	sp, #36	; 0x24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f1c3 0307 	rsb	r3, r3, #7
 800788e:	2b04      	cmp	r3, #4
 8007890:	bf28      	it	cs
 8007892:	2304      	movcs	r3, #4
 8007894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	3304      	adds	r3, #4
 800789a:	2b06      	cmp	r3, #6
 800789c:	d902      	bls.n	80078a4 <NVIC_EncodePriority+0x30>
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3b03      	subs	r3, #3
 80078a2:	e000      	b.n	80078a6 <NVIC_EncodePriority+0x32>
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078a8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	43da      	mvns	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	401a      	ands	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078bc:	f04f 31ff 	mov.w	r1, #4294967295
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	fa01 f303 	lsl.w	r3, r1, r3
 80078c6:	43d9      	mvns	r1, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078cc:	4313      	orrs	r3, r2
         );
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3724      	adds	r7, #36	; 0x24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078ec:	d301      	bcc.n	80078f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078ee:	2301      	movs	r3, #1
 80078f0:	e00f      	b.n	8007912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078f2:	4a0a      	ldr	r2, [pc, #40]	; (800791c <SysTick_Config+0x40>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078fa:	210f      	movs	r1, #15
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	f7ff ff8e 	bl	8007820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <SysTick_Config+0x40>)
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800790a:	4b04      	ldr	r3, [pc, #16]	; (800791c <SysTick_Config+0x40>)
 800790c:	2207      	movs	r2, #7
 800790e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	e000e010 	.word	0xe000e010

08007920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff ff29 	bl	8007780 <__NVIC_SetPriorityGrouping>
}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b086      	sub	sp, #24
 800793a:	af00      	add	r7, sp, #0
 800793c:	4603      	mov	r3, r0
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007944:	f7ff ff40 	bl	80077c8 <__NVIC_GetPriorityGrouping>
 8007948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7ff ff90 	bl	8007874 <NVIC_EncodePriority>
 8007954:	4602      	mov	r2, r0
 8007956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800795a:	4611      	mov	r1, r2
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff ff5f 	bl	8007820 <__NVIC_SetPriority>
}
 8007962:	bf00      	nop
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	4603      	mov	r3, r0
 8007972:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff ff33 	bl	80077e4 <__NVIC_EnableIRQ>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff ffa4 	bl	80078dc <SysTick_Config>
 8007994:	4603      	mov	r3, r0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80079a8:	f7ff fe9a 	bl	80076e0 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e316      	b.n	8007fe6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a66      	ldr	r2, [pc, #408]	; (8007b58 <HAL_DMA_Init+0x1b8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d04a      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a65      	ldr	r2, [pc, #404]	; (8007b5c <HAL_DMA_Init+0x1bc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d045      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a63      	ldr	r2, [pc, #396]	; (8007b60 <HAL_DMA_Init+0x1c0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d040      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a62      	ldr	r2, [pc, #392]	; (8007b64 <HAL_DMA_Init+0x1c4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d03b      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a60      	ldr	r2, [pc, #384]	; (8007b68 <HAL_DMA_Init+0x1c8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d036      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a5f      	ldr	r2, [pc, #380]	; (8007b6c <HAL_DMA_Init+0x1cc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d031      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a5d      	ldr	r2, [pc, #372]	; (8007b70 <HAL_DMA_Init+0x1d0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d02c      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a5c      	ldr	r2, [pc, #368]	; (8007b74 <HAL_DMA_Init+0x1d4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d027      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a5a      	ldr	r2, [pc, #360]	; (8007b78 <HAL_DMA_Init+0x1d8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d022      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a59      	ldr	r2, [pc, #356]	; (8007b7c <HAL_DMA_Init+0x1dc>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d01d      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a57      	ldr	r2, [pc, #348]	; (8007b80 <HAL_DMA_Init+0x1e0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d018      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a56      	ldr	r2, [pc, #344]	; (8007b84 <HAL_DMA_Init+0x1e4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a54      	ldr	r2, [pc, #336]	; (8007b88 <HAL_DMA_Init+0x1e8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00e      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a53      	ldr	r2, [pc, #332]	; (8007b8c <HAL_DMA_Init+0x1ec>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a51      	ldr	r2, [pc, #324]	; (8007b90 <HAL_DMA_Init+0x1f0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_DMA_Init+0xb8>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a50      	ldr	r2, [pc, #320]	; (8007b94 <HAL_DMA_Init+0x1f4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d101      	bne.n	8007a5c <HAL_DMA_Init+0xbc>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <HAL_DMA_Init+0xbe>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 813b 	beq.w	8007cda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a37      	ldr	r2, [pc, #220]	; (8007b58 <HAL_DMA_Init+0x1b8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d04a      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a36      	ldr	r2, [pc, #216]	; (8007b5c <HAL_DMA_Init+0x1bc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d045      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a34      	ldr	r2, [pc, #208]	; (8007b60 <HAL_DMA_Init+0x1c0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d040      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a33      	ldr	r2, [pc, #204]	; (8007b64 <HAL_DMA_Init+0x1c4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d03b      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a31      	ldr	r2, [pc, #196]	; (8007b68 <HAL_DMA_Init+0x1c8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d036      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a30      	ldr	r2, [pc, #192]	; (8007b6c <HAL_DMA_Init+0x1cc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d031      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a2e      	ldr	r2, [pc, #184]	; (8007b70 <HAL_DMA_Init+0x1d0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d02c      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <HAL_DMA_Init+0x1d4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d027      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a2b      	ldr	r2, [pc, #172]	; (8007b78 <HAL_DMA_Init+0x1d8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d022      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <HAL_DMA_Init+0x1dc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d01d      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a28      	ldr	r2, [pc, #160]	; (8007b80 <HAL_DMA_Init+0x1e0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d018      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <HAL_DMA_Init+0x1e4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a25      	ldr	r2, [pc, #148]	; (8007b88 <HAL_DMA_Init+0x1e8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00e      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a24      	ldr	r2, [pc, #144]	; (8007b8c <HAL_DMA_Init+0x1ec>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d009      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a22      	ldr	r2, [pc, #136]	; (8007b90 <HAL_DMA_Init+0x1f0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d004      	beq.n	8007b14 <HAL_DMA_Init+0x174>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <HAL_DMA_Init+0x1f4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d108      	bne.n	8007b26 <HAL_DMA_Init+0x186>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e007      	b.n	8007b36 <HAL_DMA_Init+0x196>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0201 	bic.w	r2, r2, #1
 8007b34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b36:	e02f      	b.n	8007b98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b38:	f7ff fdd2 	bl	80076e0 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d928      	bls.n	8007b98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2203      	movs	r2, #3
 8007b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e246      	b.n	8007fe6 <HAL_DMA_Init+0x646>
 8007b58:	40020010 	.word	0x40020010
 8007b5c:	40020028 	.word	0x40020028
 8007b60:	40020040 	.word	0x40020040
 8007b64:	40020058 	.word	0x40020058
 8007b68:	40020070 	.word	0x40020070
 8007b6c:	40020088 	.word	0x40020088
 8007b70:	400200a0 	.word	0x400200a0
 8007b74:	400200b8 	.word	0x400200b8
 8007b78:	40020410 	.word	0x40020410
 8007b7c:	40020428 	.word	0x40020428
 8007b80:	40020440 	.word	0x40020440
 8007b84:	40020458 	.word	0x40020458
 8007b88:	40020470 	.word	0x40020470
 8007b8c:	40020488 	.word	0x40020488
 8007b90:	400204a0 	.word	0x400204a0
 8007b94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1c8      	bne.n	8007b38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4b83      	ldr	r3, [pc, #524]	; (8007dc0 <HAL_DMA_Init+0x420>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007bbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bd6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d107      	bne.n	8007bfc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007bfc:	4b71      	ldr	r3, [pc, #452]	; (8007dc4 <HAL_DMA_Init+0x424>)
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4b71      	ldr	r3, [pc, #452]	; (8007dc8 <HAL_DMA_Init+0x428>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c08:	d328      	bcc.n	8007c5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b28      	cmp	r3, #40	; 0x28
 8007c10:	d903      	bls.n	8007c1a <HAL_DMA_Init+0x27a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2b2e      	cmp	r3, #46	; 0x2e
 8007c18:	d917      	bls.n	8007c4a <HAL_DMA_Init+0x2aa>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c20:	d903      	bls.n	8007c2a <HAL_DMA_Init+0x28a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2b42      	cmp	r3, #66	; 0x42
 8007c28:	d90f      	bls.n	8007c4a <HAL_DMA_Init+0x2aa>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b46      	cmp	r3, #70	; 0x46
 8007c30:	d903      	bls.n	8007c3a <HAL_DMA_Init+0x29a>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b48      	cmp	r3, #72	; 0x48
 8007c38:	d907      	bls.n	8007c4a <HAL_DMA_Init+0x2aa>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b4e      	cmp	r3, #78	; 0x4e
 8007c40:	d905      	bls.n	8007c4e <HAL_DMA_Init+0x2ae>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b52      	cmp	r3, #82	; 0x52
 8007c48:	d801      	bhi.n	8007c4e <HAL_DMA_Init+0x2ae>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <HAL_DMA_Init+0x2b0>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f023 0307 	bic.w	r3, r3, #7
 8007c72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d117      	bne.n	8007cb6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00e      	beq.n	8007cb6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 ff1d 	bl	8009ad8 <DMA_CheckFifoParam>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2240      	movs	r2, #64	; 0x40
 8007ca8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e197      	b.n	8007fe6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fe58 	bl	8009974 <DMA_CalcBaseAndBitshift>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	223f      	movs	r2, #63	; 0x3f
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	609a      	str	r2, [r3, #8]
 8007cd8:	e0cd      	b.n	8007e76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a3b      	ldr	r2, [pc, #236]	; (8007dcc <HAL_DMA_Init+0x42c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d022      	beq.n	8007d2a <HAL_DMA_Init+0x38a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a39      	ldr	r2, [pc, #228]	; (8007dd0 <HAL_DMA_Init+0x430>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d01d      	beq.n	8007d2a <HAL_DMA_Init+0x38a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a38      	ldr	r2, [pc, #224]	; (8007dd4 <HAL_DMA_Init+0x434>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d018      	beq.n	8007d2a <HAL_DMA_Init+0x38a>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a36      	ldr	r2, [pc, #216]	; (8007dd8 <HAL_DMA_Init+0x438>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <HAL_DMA_Init+0x38a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a35      	ldr	r2, [pc, #212]	; (8007ddc <HAL_DMA_Init+0x43c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00e      	beq.n	8007d2a <HAL_DMA_Init+0x38a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a33      	ldr	r2, [pc, #204]	; (8007de0 <HAL_DMA_Init+0x440>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d009      	beq.n	8007d2a <HAL_DMA_Init+0x38a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a32      	ldr	r2, [pc, #200]	; (8007de4 <HAL_DMA_Init+0x444>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d004      	beq.n	8007d2a <HAL_DMA_Init+0x38a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a30      	ldr	r2, [pc, #192]	; (8007de8 <HAL_DMA_Init+0x448>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d101      	bne.n	8007d2e <HAL_DMA_Init+0x38e>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <HAL_DMA_Init+0x390>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 8097 	beq.w	8007e64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a24      	ldr	r2, [pc, #144]	; (8007dcc <HAL_DMA_Init+0x42c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d021      	beq.n	8007d84 <HAL_DMA_Init+0x3e4>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a22      	ldr	r2, [pc, #136]	; (8007dd0 <HAL_DMA_Init+0x430>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01c      	beq.n	8007d84 <HAL_DMA_Init+0x3e4>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a21      	ldr	r2, [pc, #132]	; (8007dd4 <HAL_DMA_Init+0x434>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d017      	beq.n	8007d84 <HAL_DMA_Init+0x3e4>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1f      	ldr	r2, [pc, #124]	; (8007dd8 <HAL_DMA_Init+0x438>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d012      	beq.n	8007d84 <HAL_DMA_Init+0x3e4>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	; (8007ddc <HAL_DMA_Init+0x43c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00d      	beq.n	8007d84 <HAL_DMA_Init+0x3e4>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1c      	ldr	r2, [pc, #112]	; (8007de0 <HAL_DMA_Init+0x440>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d008      	beq.n	8007d84 <HAL_DMA_Init+0x3e4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1b      	ldr	r2, [pc, #108]	; (8007de4 <HAL_DMA_Init+0x444>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <HAL_DMA_Init+0x3e4>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a19      	ldr	r2, [pc, #100]	; (8007de8 <HAL_DMA_Init+0x448>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4b12      	ldr	r3, [pc, #72]	; (8007dec <HAL_DMA_Init+0x44c>)
 8007da2:	4013      	ands	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d020      	beq.n	8007df0 <HAL_DMA_Init+0x450>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2b80      	cmp	r3, #128	; 0x80
 8007db4:	d102      	bne.n	8007dbc <HAL_DMA_Init+0x41c>
 8007db6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007dba:	e01a      	b.n	8007df2 <HAL_DMA_Init+0x452>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e018      	b.n	8007df2 <HAL_DMA_Init+0x452>
 8007dc0:	fe10803f 	.word	0xfe10803f
 8007dc4:	5c001000 	.word	0x5c001000
 8007dc8:	ffff0000 	.word	0xffff0000
 8007dcc:	58025408 	.word	0x58025408
 8007dd0:	5802541c 	.word	0x5802541c
 8007dd4:	58025430 	.word	0x58025430
 8007dd8:	58025444 	.word	0x58025444
 8007ddc:	58025458 	.word	0x58025458
 8007de0:	5802546c 	.word	0x5802546c
 8007de4:	58025480 	.word	0x58025480
 8007de8:	58025494 	.word	0x58025494
 8007dec:	fffe000f 	.word	0xfffe000f
 8007df0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	68d2      	ldr	r2, [r2, #12]
 8007df6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007e20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b6e      	ldr	r3, [pc, #440]	; (8007ff0 <HAL_DMA_Init+0x650>)
 8007e38:	4413      	add	r3, r2
 8007e3a:	4a6e      	ldr	r2, [pc, #440]	; (8007ff4 <HAL_DMA_Init+0x654>)
 8007e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e40:	091b      	lsrs	r3, r3, #4
 8007e42:	009a      	lsls	r2, r3, #2
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 fd93 	bl	8009974 <DMA_CalcBaseAndBitshift>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	e008      	b.n	8007e76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2240      	movs	r2, #64	; 0x40
 8007e68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e0b7      	b.n	8007fe6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a5f      	ldr	r2, [pc, #380]	; (8007ff8 <HAL_DMA_Init+0x658>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d072      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a5d      	ldr	r2, [pc, #372]	; (8007ffc <HAL_DMA_Init+0x65c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d06d      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a5c      	ldr	r2, [pc, #368]	; (8008000 <HAL_DMA_Init+0x660>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d068      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a5a      	ldr	r2, [pc, #360]	; (8008004 <HAL_DMA_Init+0x664>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d063      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a59      	ldr	r2, [pc, #356]	; (8008008 <HAL_DMA_Init+0x668>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d05e      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a57      	ldr	r2, [pc, #348]	; (800800c <HAL_DMA_Init+0x66c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d059      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a56      	ldr	r2, [pc, #344]	; (8008010 <HAL_DMA_Init+0x670>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d054      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a54      	ldr	r2, [pc, #336]	; (8008014 <HAL_DMA_Init+0x674>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d04f      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a53      	ldr	r2, [pc, #332]	; (8008018 <HAL_DMA_Init+0x678>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d04a      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a51      	ldr	r2, [pc, #324]	; (800801c <HAL_DMA_Init+0x67c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d045      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a50      	ldr	r2, [pc, #320]	; (8008020 <HAL_DMA_Init+0x680>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d040      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a4e      	ldr	r2, [pc, #312]	; (8008024 <HAL_DMA_Init+0x684>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d03b      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a4d      	ldr	r2, [pc, #308]	; (8008028 <HAL_DMA_Init+0x688>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d036      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a4b      	ldr	r2, [pc, #300]	; (800802c <HAL_DMA_Init+0x68c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d031      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a4a      	ldr	r2, [pc, #296]	; (8008030 <HAL_DMA_Init+0x690>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d02c      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a48      	ldr	r2, [pc, #288]	; (8008034 <HAL_DMA_Init+0x694>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d027      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a47      	ldr	r2, [pc, #284]	; (8008038 <HAL_DMA_Init+0x698>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d022      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a45      	ldr	r2, [pc, #276]	; (800803c <HAL_DMA_Init+0x69c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d01d      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a44      	ldr	r2, [pc, #272]	; (8008040 <HAL_DMA_Init+0x6a0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d018      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a42      	ldr	r2, [pc, #264]	; (8008044 <HAL_DMA_Init+0x6a4>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d013      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a41      	ldr	r2, [pc, #260]	; (8008048 <HAL_DMA_Init+0x6a8>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00e      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a3f      	ldr	r2, [pc, #252]	; (800804c <HAL_DMA_Init+0x6ac>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d009      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a3e      	ldr	r2, [pc, #248]	; (8008050 <HAL_DMA_Init+0x6b0>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d004      	beq.n	8007f66 <HAL_DMA_Init+0x5c6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a3c      	ldr	r2, [pc, #240]	; (8008054 <HAL_DMA_Init+0x6b4>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d101      	bne.n	8007f6a <HAL_DMA_Init+0x5ca>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <HAL_DMA_Init+0x5cc>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d032      	beq.n	8007fd6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 fe2d 	bl	8009bd0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b80      	cmp	r3, #128	; 0x80
 8007f7c:	d102      	bne.n	8007f84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8c:	b2d2      	uxtb	r2, r2
 8007f8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d010      	beq.n	8007fc4 <HAL_DMA_Init+0x624>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	d80c      	bhi.n	8007fc4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 feaa 	bl	8009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	e008      	b.n	8007fd6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	a7fdabf8 	.word	0xa7fdabf8
 8007ff4:	cccccccd 	.word	0xcccccccd
 8007ff8:	40020010 	.word	0x40020010
 8007ffc:	40020028 	.word	0x40020028
 8008000:	40020040 	.word	0x40020040
 8008004:	40020058 	.word	0x40020058
 8008008:	40020070 	.word	0x40020070
 800800c:	40020088 	.word	0x40020088
 8008010:	400200a0 	.word	0x400200a0
 8008014:	400200b8 	.word	0x400200b8
 8008018:	40020410 	.word	0x40020410
 800801c:	40020428 	.word	0x40020428
 8008020:	40020440 	.word	0x40020440
 8008024:	40020458 	.word	0x40020458
 8008028:	40020470 	.word	0x40020470
 800802c:	40020488 	.word	0x40020488
 8008030:	400204a0 	.word	0x400204a0
 8008034:	400204b8 	.word	0x400204b8
 8008038:	58025408 	.word	0x58025408
 800803c:	5802541c 	.word	0x5802541c
 8008040:	58025430 	.word	0x58025430
 8008044:	58025444 	.word	0x58025444
 8008048:	58025458 	.word	0x58025458
 800804c:	5802546c 	.word	0x5802546c
 8008050:	58025480 	.word	0x58025480
 8008054:	58025494 	.word	0x58025494

08008058 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008060:	f7ff fb3e 	bl	80076e0 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e2dc      	b.n	800862a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d008      	beq.n	800808e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2280      	movs	r2, #128	; 0x80
 8008080:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e2cd      	b.n	800862a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a76      	ldr	r2, [pc, #472]	; (800826c <HAL_DMA_Abort+0x214>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d04a      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a74      	ldr	r2, [pc, #464]	; (8008270 <HAL_DMA_Abort+0x218>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d045      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a73      	ldr	r2, [pc, #460]	; (8008274 <HAL_DMA_Abort+0x21c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d040      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a71      	ldr	r2, [pc, #452]	; (8008278 <HAL_DMA_Abort+0x220>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d03b      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a70      	ldr	r2, [pc, #448]	; (800827c <HAL_DMA_Abort+0x224>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d036      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a6e      	ldr	r2, [pc, #440]	; (8008280 <HAL_DMA_Abort+0x228>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d031      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a6d      	ldr	r2, [pc, #436]	; (8008284 <HAL_DMA_Abort+0x22c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d02c      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a6b      	ldr	r2, [pc, #428]	; (8008288 <HAL_DMA_Abort+0x230>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d027      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a6a      	ldr	r2, [pc, #424]	; (800828c <HAL_DMA_Abort+0x234>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d022      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a68      	ldr	r2, [pc, #416]	; (8008290 <HAL_DMA_Abort+0x238>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d01d      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a67      	ldr	r2, [pc, #412]	; (8008294 <HAL_DMA_Abort+0x23c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d018      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a65      	ldr	r2, [pc, #404]	; (8008298 <HAL_DMA_Abort+0x240>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a64      	ldr	r2, [pc, #400]	; (800829c <HAL_DMA_Abort+0x244>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00e      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a62      	ldr	r2, [pc, #392]	; (80082a0 <HAL_DMA_Abort+0x248>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a61      	ldr	r2, [pc, #388]	; (80082a4 <HAL_DMA_Abort+0x24c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_DMA_Abort+0xd6>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a5f      	ldr	r2, [pc, #380]	; (80082a8 <HAL_DMA_Abort+0x250>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d101      	bne.n	8008132 <HAL_DMA_Abort+0xda>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <HAL_DMA_Abort+0xdc>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d013      	beq.n	8008160 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 021e 	bic.w	r2, r2, #30
 8008146:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695a      	ldr	r2, [r3, #20]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008156:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	e00a      	b.n	8008176 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 020e 	bic.w	r2, r2, #14
 800816e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a3c      	ldr	r2, [pc, #240]	; (800826c <HAL_DMA_Abort+0x214>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d072      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a3a      	ldr	r2, [pc, #232]	; (8008270 <HAL_DMA_Abort+0x218>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d06d      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a39      	ldr	r2, [pc, #228]	; (8008274 <HAL_DMA_Abort+0x21c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d068      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a37      	ldr	r2, [pc, #220]	; (8008278 <HAL_DMA_Abort+0x220>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d063      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a36      	ldr	r2, [pc, #216]	; (800827c <HAL_DMA_Abort+0x224>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d05e      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a34      	ldr	r2, [pc, #208]	; (8008280 <HAL_DMA_Abort+0x228>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d059      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a33      	ldr	r2, [pc, #204]	; (8008284 <HAL_DMA_Abort+0x22c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d054      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a31      	ldr	r2, [pc, #196]	; (8008288 <HAL_DMA_Abort+0x230>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d04f      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a30      	ldr	r2, [pc, #192]	; (800828c <HAL_DMA_Abort+0x234>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d04a      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a2e      	ldr	r2, [pc, #184]	; (8008290 <HAL_DMA_Abort+0x238>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d045      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a2d      	ldr	r2, [pc, #180]	; (8008294 <HAL_DMA_Abort+0x23c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d040      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a2b      	ldr	r2, [pc, #172]	; (8008298 <HAL_DMA_Abort+0x240>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d03b      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a2a      	ldr	r2, [pc, #168]	; (800829c <HAL_DMA_Abort+0x244>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d036      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a28      	ldr	r2, [pc, #160]	; (80082a0 <HAL_DMA_Abort+0x248>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d031      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a27      	ldr	r2, [pc, #156]	; (80082a4 <HAL_DMA_Abort+0x24c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d02c      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <HAL_DMA_Abort+0x250>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d027      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a24      	ldr	r2, [pc, #144]	; (80082ac <HAL_DMA_Abort+0x254>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d022      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a22      	ldr	r2, [pc, #136]	; (80082b0 <HAL_DMA_Abort+0x258>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d01d      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a21      	ldr	r2, [pc, #132]	; (80082b4 <HAL_DMA_Abort+0x25c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d018      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <HAL_DMA_Abort+0x260>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d013      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <HAL_DMA_Abort+0x264>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00e      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <HAL_DMA_Abort+0x268>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d009      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <HAL_DMA_Abort+0x26c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d004      	beq.n	8008266 <HAL_DMA_Abort+0x20e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a19      	ldr	r2, [pc, #100]	; (80082c8 <HAL_DMA_Abort+0x270>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d132      	bne.n	80082cc <HAL_DMA_Abort+0x274>
 8008266:	2301      	movs	r3, #1
 8008268:	e031      	b.n	80082ce <HAL_DMA_Abort+0x276>
 800826a:	bf00      	nop
 800826c:	40020010 	.word	0x40020010
 8008270:	40020028 	.word	0x40020028
 8008274:	40020040 	.word	0x40020040
 8008278:	40020058 	.word	0x40020058
 800827c:	40020070 	.word	0x40020070
 8008280:	40020088 	.word	0x40020088
 8008284:	400200a0 	.word	0x400200a0
 8008288:	400200b8 	.word	0x400200b8
 800828c:	40020410 	.word	0x40020410
 8008290:	40020428 	.word	0x40020428
 8008294:	40020440 	.word	0x40020440
 8008298:	40020458 	.word	0x40020458
 800829c:	40020470 	.word	0x40020470
 80082a0:	40020488 	.word	0x40020488
 80082a4:	400204a0 	.word	0x400204a0
 80082a8:	400204b8 	.word	0x400204b8
 80082ac:	58025408 	.word	0x58025408
 80082b0:	5802541c 	.word	0x5802541c
 80082b4:	58025430 	.word	0x58025430
 80082b8:	58025444 	.word	0x58025444
 80082bc:	58025458 	.word	0x58025458
 80082c0:	5802546c 	.word	0x5802546c
 80082c4:	58025480 	.word	0x58025480
 80082c8:	58025494 	.word	0x58025494
 80082cc:	2300      	movs	r3, #0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a6d      	ldr	r2, [pc, #436]	; (800849c <HAL_DMA_Abort+0x444>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d04a      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a6b      	ldr	r2, [pc, #428]	; (80084a0 <HAL_DMA_Abort+0x448>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d045      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a6a      	ldr	r2, [pc, #424]	; (80084a4 <HAL_DMA_Abort+0x44c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d040      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a68      	ldr	r2, [pc, #416]	; (80084a8 <HAL_DMA_Abort+0x450>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d03b      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a67      	ldr	r2, [pc, #412]	; (80084ac <HAL_DMA_Abort+0x454>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d036      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a65      	ldr	r2, [pc, #404]	; (80084b0 <HAL_DMA_Abort+0x458>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d031      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a64      	ldr	r2, [pc, #400]	; (80084b4 <HAL_DMA_Abort+0x45c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d02c      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a62      	ldr	r2, [pc, #392]	; (80084b8 <HAL_DMA_Abort+0x460>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d027      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a61      	ldr	r2, [pc, #388]	; (80084bc <HAL_DMA_Abort+0x464>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d022      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a5f      	ldr	r2, [pc, #380]	; (80084c0 <HAL_DMA_Abort+0x468>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01d      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a5e      	ldr	r2, [pc, #376]	; (80084c4 <HAL_DMA_Abort+0x46c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d018      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a5c      	ldr	r2, [pc, #368]	; (80084c8 <HAL_DMA_Abort+0x470>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a5b      	ldr	r2, [pc, #364]	; (80084cc <HAL_DMA_Abort+0x474>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a59      	ldr	r2, [pc, #356]	; (80084d0 <HAL_DMA_Abort+0x478>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a58      	ldr	r2, [pc, #352]	; (80084d4 <HAL_DMA_Abort+0x47c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_DMA_Abort+0x32a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a56      	ldr	r2, [pc, #344]	; (80084d8 <HAL_DMA_Abort+0x480>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d108      	bne.n	8008394 <HAL_DMA_Abort+0x33c>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e007      	b.n	80083a4 <HAL_DMA_Abort+0x34c>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 0201 	bic.w	r2, r2, #1
 80083a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80083a4:	e013      	b.n	80083ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80083a6:	f7ff f99b 	bl	80076e0 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b05      	cmp	r3, #5
 80083b2:	d90c      	bls.n	80083ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2203      	movs	r2, #3
 80083be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e12d      	b.n	800862a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e5      	bne.n	80083a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a2f      	ldr	r2, [pc, #188]	; (800849c <HAL_DMA_Abort+0x444>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d04a      	beq.n	800847a <HAL_DMA_Abort+0x422>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a2d      	ldr	r2, [pc, #180]	; (80084a0 <HAL_DMA_Abort+0x448>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d045      	beq.n	800847a <HAL_DMA_Abort+0x422>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a2c      	ldr	r2, [pc, #176]	; (80084a4 <HAL_DMA_Abort+0x44c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d040      	beq.n	800847a <HAL_DMA_Abort+0x422>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a2a      	ldr	r2, [pc, #168]	; (80084a8 <HAL_DMA_Abort+0x450>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d03b      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a29      	ldr	r2, [pc, #164]	; (80084ac <HAL_DMA_Abort+0x454>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d036      	beq.n	800847a <HAL_DMA_Abort+0x422>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a27      	ldr	r2, [pc, #156]	; (80084b0 <HAL_DMA_Abort+0x458>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d031      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a26      	ldr	r2, [pc, #152]	; (80084b4 <HAL_DMA_Abort+0x45c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d02c      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a24      	ldr	r2, [pc, #144]	; (80084b8 <HAL_DMA_Abort+0x460>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d027      	beq.n	800847a <HAL_DMA_Abort+0x422>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a23      	ldr	r2, [pc, #140]	; (80084bc <HAL_DMA_Abort+0x464>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d022      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a21      	ldr	r2, [pc, #132]	; (80084c0 <HAL_DMA_Abort+0x468>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01d      	beq.n	800847a <HAL_DMA_Abort+0x422>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a20      	ldr	r2, [pc, #128]	; (80084c4 <HAL_DMA_Abort+0x46c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d018      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1e      	ldr	r2, [pc, #120]	; (80084c8 <HAL_DMA_Abort+0x470>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d013      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1d      	ldr	r2, [pc, #116]	; (80084cc <HAL_DMA_Abort+0x474>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00e      	beq.n	800847a <HAL_DMA_Abort+0x422>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <HAL_DMA_Abort+0x478>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d009      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <HAL_DMA_Abort+0x47c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d004      	beq.n	800847a <HAL_DMA_Abort+0x422>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <HAL_DMA_Abort+0x480>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d101      	bne.n	800847e <HAL_DMA_Abort+0x426>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <HAL_DMA_Abort+0x428>
 800847e:	2300      	movs	r3, #0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d02b      	beq.n	80084dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008488:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848e:	f003 031f 	and.w	r3, r3, #31
 8008492:	223f      	movs	r2, #63	; 0x3f
 8008494:	409a      	lsls	r2, r3
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	609a      	str	r2, [r3, #8]
 800849a:	e02a      	b.n	80084f2 <HAL_DMA_Abort+0x49a>
 800849c:	40020010 	.word	0x40020010
 80084a0:	40020028 	.word	0x40020028
 80084a4:	40020040 	.word	0x40020040
 80084a8:	40020058 	.word	0x40020058
 80084ac:	40020070 	.word	0x40020070
 80084b0:	40020088 	.word	0x40020088
 80084b4:	400200a0 	.word	0x400200a0
 80084b8:	400200b8 	.word	0x400200b8
 80084bc:	40020410 	.word	0x40020410
 80084c0:	40020428 	.word	0x40020428
 80084c4:	40020440 	.word	0x40020440
 80084c8:	40020458 	.word	0x40020458
 80084cc:	40020470 	.word	0x40020470
 80084d0:	40020488 	.word	0x40020488
 80084d4:	400204a0 	.word	0x400204a0
 80084d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	2201      	movs	r2, #1
 80084ec:	409a      	lsls	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a4f      	ldr	r2, [pc, #316]	; (8008634 <HAL_DMA_Abort+0x5dc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d072      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a4d      	ldr	r2, [pc, #308]	; (8008638 <HAL_DMA_Abort+0x5e0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d06d      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a4c      	ldr	r2, [pc, #304]	; (800863c <HAL_DMA_Abort+0x5e4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d068      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a4a      	ldr	r2, [pc, #296]	; (8008640 <HAL_DMA_Abort+0x5e8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d063      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a49      	ldr	r2, [pc, #292]	; (8008644 <HAL_DMA_Abort+0x5ec>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d05e      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a47      	ldr	r2, [pc, #284]	; (8008648 <HAL_DMA_Abort+0x5f0>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d059      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a46      	ldr	r2, [pc, #280]	; (800864c <HAL_DMA_Abort+0x5f4>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d054      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a44      	ldr	r2, [pc, #272]	; (8008650 <HAL_DMA_Abort+0x5f8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d04f      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a43      	ldr	r2, [pc, #268]	; (8008654 <HAL_DMA_Abort+0x5fc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d04a      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a41      	ldr	r2, [pc, #260]	; (8008658 <HAL_DMA_Abort+0x600>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d045      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a40      	ldr	r2, [pc, #256]	; (800865c <HAL_DMA_Abort+0x604>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d040      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a3e      	ldr	r2, [pc, #248]	; (8008660 <HAL_DMA_Abort+0x608>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d03b      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a3d      	ldr	r2, [pc, #244]	; (8008664 <HAL_DMA_Abort+0x60c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d036      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a3b      	ldr	r2, [pc, #236]	; (8008668 <HAL_DMA_Abort+0x610>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d031      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a3a      	ldr	r2, [pc, #232]	; (800866c <HAL_DMA_Abort+0x614>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d02c      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a38      	ldr	r2, [pc, #224]	; (8008670 <HAL_DMA_Abort+0x618>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d027      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a37      	ldr	r2, [pc, #220]	; (8008674 <HAL_DMA_Abort+0x61c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d022      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a35      	ldr	r2, [pc, #212]	; (8008678 <HAL_DMA_Abort+0x620>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d01d      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a34      	ldr	r2, [pc, #208]	; (800867c <HAL_DMA_Abort+0x624>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d018      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a32      	ldr	r2, [pc, #200]	; (8008680 <HAL_DMA_Abort+0x628>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a31      	ldr	r2, [pc, #196]	; (8008684 <HAL_DMA_Abort+0x62c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00e      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a2f      	ldr	r2, [pc, #188]	; (8008688 <HAL_DMA_Abort+0x630>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d009      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a2e      	ldr	r2, [pc, #184]	; (800868c <HAL_DMA_Abort+0x634>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d004      	beq.n	80085e2 <HAL_DMA_Abort+0x58a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a2c      	ldr	r2, [pc, #176]	; (8008690 <HAL_DMA_Abort+0x638>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d101      	bne.n	80085e6 <HAL_DMA_Abort+0x58e>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <HAL_DMA_Abort+0x590>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d015      	beq.n	8008618 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800860c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008616:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40020010 	.word	0x40020010
 8008638:	40020028 	.word	0x40020028
 800863c:	40020040 	.word	0x40020040
 8008640:	40020058 	.word	0x40020058
 8008644:	40020070 	.word	0x40020070
 8008648:	40020088 	.word	0x40020088
 800864c:	400200a0 	.word	0x400200a0
 8008650:	400200b8 	.word	0x400200b8
 8008654:	40020410 	.word	0x40020410
 8008658:	40020428 	.word	0x40020428
 800865c:	40020440 	.word	0x40020440
 8008660:	40020458 	.word	0x40020458
 8008664:	40020470 	.word	0x40020470
 8008668:	40020488 	.word	0x40020488
 800866c:	400204a0 	.word	0x400204a0
 8008670:	400204b8 	.word	0x400204b8
 8008674:	58025408 	.word	0x58025408
 8008678:	5802541c 	.word	0x5802541c
 800867c:	58025430 	.word	0x58025430
 8008680:	58025444 	.word	0x58025444
 8008684:	58025458 	.word	0x58025458
 8008688:	5802546c 	.word	0x5802546c
 800868c:	58025480 	.word	0x58025480
 8008690:	58025494 	.word	0x58025494

08008694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e237      	b.n	8008b16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d004      	beq.n	80086bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2280      	movs	r2, #128	; 0x80
 80086b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e22c      	b.n	8008b16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a5c      	ldr	r2, [pc, #368]	; (8008834 <HAL_DMA_Abort_IT+0x1a0>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d04a      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a5b      	ldr	r2, [pc, #364]	; (8008838 <HAL_DMA_Abort_IT+0x1a4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d045      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a59      	ldr	r2, [pc, #356]	; (800883c <HAL_DMA_Abort_IT+0x1a8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d040      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a58      	ldr	r2, [pc, #352]	; (8008840 <HAL_DMA_Abort_IT+0x1ac>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d03b      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a56      	ldr	r2, [pc, #344]	; (8008844 <HAL_DMA_Abort_IT+0x1b0>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d036      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a55      	ldr	r2, [pc, #340]	; (8008848 <HAL_DMA_Abort_IT+0x1b4>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d031      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a53      	ldr	r2, [pc, #332]	; (800884c <HAL_DMA_Abort_IT+0x1b8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d02c      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a52      	ldr	r2, [pc, #328]	; (8008850 <HAL_DMA_Abort_IT+0x1bc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d027      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a50      	ldr	r2, [pc, #320]	; (8008854 <HAL_DMA_Abort_IT+0x1c0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d022      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a4f      	ldr	r2, [pc, #316]	; (8008858 <HAL_DMA_Abort_IT+0x1c4>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d01d      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a4d      	ldr	r2, [pc, #308]	; (800885c <HAL_DMA_Abort_IT+0x1c8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d018      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a4c      	ldr	r2, [pc, #304]	; (8008860 <HAL_DMA_Abort_IT+0x1cc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d013      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a4a      	ldr	r2, [pc, #296]	; (8008864 <HAL_DMA_Abort_IT+0x1d0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00e      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a49      	ldr	r2, [pc, #292]	; (8008868 <HAL_DMA_Abort_IT+0x1d4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d009      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a47      	ldr	r2, [pc, #284]	; (800886c <HAL_DMA_Abort_IT+0x1d8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d004      	beq.n	800875c <HAL_DMA_Abort_IT+0xc8>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a46      	ldr	r2, [pc, #280]	; (8008870 <HAL_DMA_Abort_IT+0x1dc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d101      	bne.n	8008760 <HAL_DMA_Abort_IT+0xcc>
 800875c:	2301      	movs	r3, #1
 800875e:	e000      	b.n	8008762 <HAL_DMA_Abort_IT+0xce>
 8008760:	2300      	movs	r3, #0
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 8086 	beq.w	8008874 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2204      	movs	r2, #4
 800876c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a2f      	ldr	r2, [pc, #188]	; (8008834 <HAL_DMA_Abort_IT+0x1a0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d04a      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a2e      	ldr	r2, [pc, #184]	; (8008838 <HAL_DMA_Abort_IT+0x1a4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d045      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a2c      	ldr	r2, [pc, #176]	; (800883c <HAL_DMA_Abort_IT+0x1a8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d040      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a2b      	ldr	r2, [pc, #172]	; (8008840 <HAL_DMA_Abort_IT+0x1ac>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d03b      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a29      	ldr	r2, [pc, #164]	; (8008844 <HAL_DMA_Abort_IT+0x1b0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d036      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a28      	ldr	r2, [pc, #160]	; (8008848 <HAL_DMA_Abort_IT+0x1b4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d031      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a26      	ldr	r2, [pc, #152]	; (800884c <HAL_DMA_Abort_IT+0x1b8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d02c      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a25      	ldr	r2, [pc, #148]	; (8008850 <HAL_DMA_Abort_IT+0x1bc>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d027      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a23      	ldr	r2, [pc, #140]	; (8008854 <HAL_DMA_Abort_IT+0x1c0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d022      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a22      	ldr	r2, [pc, #136]	; (8008858 <HAL_DMA_Abort_IT+0x1c4>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d01d      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a20      	ldr	r2, [pc, #128]	; (800885c <HAL_DMA_Abort_IT+0x1c8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d018      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a1f      	ldr	r2, [pc, #124]	; (8008860 <HAL_DMA_Abort_IT+0x1cc>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d013      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1d      	ldr	r2, [pc, #116]	; (8008864 <HAL_DMA_Abort_IT+0x1d0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00e      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a1c      	ldr	r2, [pc, #112]	; (8008868 <HAL_DMA_Abort_IT+0x1d4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d009      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a1a      	ldr	r2, [pc, #104]	; (800886c <HAL_DMA_Abort_IT+0x1d8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d004      	beq.n	8008810 <HAL_DMA_Abort_IT+0x17c>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a19      	ldr	r2, [pc, #100]	; (8008870 <HAL_DMA_Abort_IT+0x1dc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d108      	bne.n	8008822 <HAL_DMA_Abort_IT+0x18e>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0201 	bic.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e178      	b.n	8008b14 <HAL_DMA_Abort_IT+0x480>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0201 	bic.w	r2, r2, #1
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	e16f      	b.n	8008b14 <HAL_DMA_Abort_IT+0x480>
 8008834:	40020010 	.word	0x40020010
 8008838:	40020028 	.word	0x40020028
 800883c:	40020040 	.word	0x40020040
 8008840:	40020058 	.word	0x40020058
 8008844:	40020070 	.word	0x40020070
 8008848:	40020088 	.word	0x40020088
 800884c:	400200a0 	.word	0x400200a0
 8008850:	400200b8 	.word	0x400200b8
 8008854:	40020410 	.word	0x40020410
 8008858:	40020428 	.word	0x40020428
 800885c:	40020440 	.word	0x40020440
 8008860:	40020458 	.word	0x40020458
 8008864:	40020470 	.word	0x40020470
 8008868:	40020488 	.word	0x40020488
 800886c:	400204a0 	.word	0x400204a0
 8008870:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 020e 	bic.w	r2, r2, #14
 8008882:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a6c      	ldr	r2, [pc, #432]	; (8008a3c <HAL_DMA_Abort_IT+0x3a8>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d04a      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a6b      	ldr	r2, [pc, #428]	; (8008a40 <HAL_DMA_Abort_IT+0x3ac>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d045      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a69      	ldr	r2, [pc, #420]	; (8008a44 <HAL_DMA_Abort_IT+0x3b0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d040      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a68      	ldr	r2, [pc, #416]	; (8008a48 <HAL_DMA_Abort_IT+0x3b4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d03b      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a66      	ldr	r2, [pc, #408]	; (8008a4c <HAL_DMA_Abort_IT+0x3b8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d036      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a65      	ldr	r2, [pc, #404]	; (8008a50 <HAL_DMA_Abort_IT+0x3bc>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d031      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a63      	ldr	r2, [pc, #396]	; (8008a54 <HAL_DMA_Abort_IT+0x3c0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d02c      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a62      	ldr	r2, [pc, #392]	; (8008a58 <HAL_DMA_Abort_IT+0x3c4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d027      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a60      	ldr	r2, [pc, #384]	; (8008a5c <HAL_DMA_Abort_IT+0x3c8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d022      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a5f      	ldr	r2, [pc, #380]	; (8008a60 <HAL_DMA_Abort_IT+0x3cc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d01d      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a5d      	ldr	r2, [pc, #372]	; (8008a64 <HAL_DMA_Abort_IT+0x3d0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d018      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a5c      	ldr	r2, [pc, #368]	; (8008a68 <HAL_DMA_Abort_IT+0x3d4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d013      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a5a      	ldr	r2, [pc, #360]	; (8008a6c <HAL_DMA_Abort_IT+0x3d8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00e      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a59      	ldr	r2, [pc, #356]	; (8008a70 <HAL_DMA_Abort_IT+0x3dc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d009      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a57      	ldr	r2, [pc, #348]	; (8008a74 <HAL_DMA_Abort_IT+0x3e0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d004      	beq.n	8008924 <HAL_DMA_Abort_IT+0x290>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a56      	ldr	r2, [pc, #344]	; (8008a78 <HAL_DMA_Abort_IT+0x3e4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d108      	bne.n	8008936 <HAL_DMA_Abort_IT+0x2a2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0201 	bic.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e007      	b.n	8008946 <HAL_DMA_Abort_IT+0x2b2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0201 	bic.w	r2, r2, #1
 8008944:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a3c      	ldr	r2, [pc, #240]	; (8008a3c <HAL_DMA_Abort_IT+0x3a8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d072      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a3a      	ldr	r2, [pc, #232]	; (8008a40 <HAL_DMA_Abort_IT+0x3ac>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d06d      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a39      	ldr	r2, [pc, #228]	; (8008a44 <HAL_DMA_Abort_IT+0x3b0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d068      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a37      	ldr	r2, [pc, #220]	; (8008a48 <HAL_DMA_Abort_IT+0x3b4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d063      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a36      	ldr	r2, [pc, #216]	; (8008a4c <HAL_DMA_Abort_IT+0x3b8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d05e      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a34      	ldr	r2, [pc, #208]	; (8008a50 <HAL_DMA_Abort_IT+0x3bc>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d059      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a33      	ldr	r2, [pc, #204]	; (8008a54 <HAL_DMA_Abort_IT+0x3c0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d054      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a31      	ldr	r2, [pc, #196]	; (8008a58 <HAL_DMA_Abort_IT+0x3c4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d04f      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a30      	ldr	r2, [pc, #192]	; (8008a5c <HAL_DMA_Abort_IT+0x3c8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d04a      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a2e      	ldr	r2, [pc, #184]	; (8008a60 <HAL_DMA_Abort_IT+0x3cc>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d045      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a2d      	ldr	r2, [pc, #180]	; (8008a64 <HAL_DMA_Abort_IT+0x3d0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d040      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a2b      	ldr	r2, [pc, #172]	; (8008a68 <HAL_DMA_Abort_IT+0x3d4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d03b      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a2a      	ldr	r2, [pc, #168]	; (8008a6c <HAL_DMA_Abort_IT+0x3d8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d036      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a28      	ldr	r2, [pc, #160]	; (8008a70 <HAL_DMA_Abort_IT+0x3dc>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d031      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a27      	ldr	r2, [pc, #156]	; (8008a74 <HAL_DMA_Abort_IT+0x3e0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d02c      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a25      	ldr	r2, [pc, #148]	; (8008a78 <HAL_DMA_Abort_IT+0x3e4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d027      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a24      	ldr	r2, [pc, #144]	; (8008a7c <HAL_DMA_Abort_IT+0x3e8>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d022      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a22      	ldr	r2, [pc, #136]	; (8008a80 <HAL_DMA_Abort_IT+0x3ec>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d01d      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <HAL_DMA_Abort_IT+0x3f0>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d018      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1f      	ldr	r2, [pc, #124]	; (8008a88 <HAL_DMA_Abort_IT+0x3f4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d013      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1e      	ldr	r2, [pc, #120]	; (8008a8c <HAL_DMA_Abort_IT+0x3f8>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00e      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1c      	ldr	r2, [pc, #112]	; (8008a90 <HAL_DMA_Abort_IT+0x3fc>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d009      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1b      	ldr	r2, [pc, #108]	; (8008a94 <HAL_DMA_Abort_IT+0x400>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d004      	beq.n	8008a36 <HAL_DMA_Abort_IT+0x3a2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a19      	ldr	r2, [pc, #100]	; (8008a98 <HAL_DMA_Abort_IT+0x404>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d132      	bne.n	8008a9c <HAL_DMA_Abort_IT+0x408>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e031      	b.n	8008a9e <HAL_DMA_Abort_IT+0x40a>
 8008a3a:	bf00      	nop
 8008a3c:	40020010 	.word	0x40020010
 8008a40:	40020028 	.word	0x40020028
 8008a44:	40020040 	.word	0x40020040
 8008a48:	40020058 	.word	0x40020058
 8008a4c:	40020070 	.word	0x40020070
 8008a50:	40020088 	.word	0x40020088
 8008a54:	400200a0 	.word	0x400200a0
 8008a58:	400200b8 	.word	0x400200b8
 8008a5c:	40020410 	.word	0x40020410
 8008a60:	40020428 	.word	0x40020428
 8008a64:	40020440 	.word	0x40020440
 8008a68:	40020458 	.word	0x40020458
 8008a6c:	40020470 	.word	0x40020470
 8008a70:	40020488 	.word	0x40020488
 8008a74:	400204a0 	.word	0x400204a0
 8008a78:	400204b8 	.word	0x400204b8
 8008a7c:	58025408 	.word	0x58025408
 8008a80:	5802541c 	.word	0x5802541c
 8008a84:	58025430 	.word	0x58025430
 8008a88:	58025444 	.word	0x58025444
 8008a8c:	58025458 	.word	0x58025458
 8008a90:	5802546c 	.word	0x5802546c
 8008a94:	58025480 	.word	0x58025480
 8008a98:	58025494 	.word	0x58025494
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d028      	beq.n	8008af4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ab0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abc:	f003 031f 	and.w	r3, r3, #31
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ad0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00c      	beq.n	8008af4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ae8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008af2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop

08008b20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	; 0x28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b2c:	4b67      	ldr	r3, [pc, #412]	; (8008ccc <HAL_DMA_IRQHandler+0x1ac>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a67      	ldr	r2, [pc, #412]	; (8008cd0 <HAL_DMA_IRQHandler+0x1b0>)
 8008b32:	fba2 2303 	umull	r2, r3, r2, r3
 8008b36:	0a9b      	lsrs	r3, r3, #10
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a5f      	ldr	r2, [pc, #380]	; (8008cd4 <HAL_DMA_IRQHandler+0x1b4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d04a      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a5d      	ldr	r2, [pc, #372]	; (8008cd8 <HAL_DMA_IRQHandler+0x1b8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d045      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a5c      	ldr	r2, [pc, #368]	; (8008cdc <HAL_DMA_IRQHandler+0x1bc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d040      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a5a      	ldr	r2, [pc, #360]	; (8008ce0 <HAL_DMA_IRQHandler+0x1c0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d03b      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a59      	ldr	r2, [pc, #356]	; (8008ce4 <HAL_DMA_IRQHandler+0x1c4>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d036      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a57      	ldr	r2, [pc, #348]	; (8008ce8 <HAL_DMA_IRQHandler+0x1c8>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d031      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a56      	ldr	r2, [pc, #344]	; (8008cec <HAL_DMA_IRQHandler+0x1cc>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d02c      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a54      	ldr	r2, [pc, #336]	; (8008cf0 <HAL_DMA_IRQHandler+0x1d0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d027      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a53      	ldr	r2, [pc, #332]	; (8008cf4 <HAL_DMA_IRQHandler+0x1d4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d022      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a51      	ldr	r2, [pc, #324]	; (8008cf8 <HAL_DMA_IRQHandler+0x1d8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d01d      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a50      	ldr	r2, [pc, #320]	; (8008cfc <HAL_DMA_IRQHandler+0x1dc>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d018      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a4e      	ldr	r2, [pc, #312]	; (8008d00 <HAL_DMA_IRQHandler+0x1e0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d013      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a4d      	ldr	r2, [pc, #308]	; (8008d04 <HAL_DMA_IRQHandler+0x1e4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00e      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a4b      	ldr	r2, [pc, #300]	; (8008d08 <HAL_DMA_IRQHandler+0x1e8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d009      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a4a      	ldr	r2, [pc, #296]	; (8008d0c <HAL_DMA_IRQHandler+0x1ec>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d004      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0xd2>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a48      	ldr	r2, [pc, #288]	; (8008d10 <HAL_DMA_IRQHandler+0x1f0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d101      	bne.n	8008bf6 <HAL_DMA_IRQHandler+0xd6>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e000      	b.n	8008bf8 <HAL_DMA_IRQHandler+0xd8>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 842b 	beq.w	8009454 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	2208      	movs	r2, #8
 8008c08:	409a      	lsls	r2, r3
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 80a2 	beq.w	8008d58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a2e      	ldr	r2, [pc, #184]	; (8008cd4 <HAL_DMA_IRQHandler+0x1b4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d04a      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a2d      	ldr	r2, [pc, #180]	; (8008cd8 <HAL_DMA_IRQHandler+0x1b8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d045      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a2b      	ldr	r2, [pc, #172]	; (8008cdc <HAL_DMA_IRQHandler+0x1bc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d040      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a2a      	ldr	r2, [pc, #168]	; (8008ce0 <HAL_DMA_IRQHandler+0x1c0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d03b      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a28      	ldr	r2, [pc, #160]	; (8008ce4 <HAL_DMA_IRQHandler+0x1c4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d036      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a27      	ldr	r2, [pc, #156]	; (8008ce8 <HAL_DMA_IRQHandler+0x1c8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d031      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a25      	ldr	r2, [pc, #148]	; (8008cec <HAL_DMA_IRQHandler+0x1cc>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d02c      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a24      	ldr	r2, [pc, #144]	; (8008cf0 <HAL_DMA_IRQHandler+0x1d0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d027      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a22      	ldr	r2, [pc, #136]	; (8008cf4 <HAL_DMA_IRQHandler+0x1d4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d022      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a21      	ldr	r2, [pc, #132]	; (8008cf8 <HAL_DMA_IRQHandler+0x1d8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d01d      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <HAL_DMA_IRQHandler+0x1dc>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d018      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1e      	ldr	r2, [pc, #120]	; (8008d00 <HAL_DMA_IRQHandler+0x1e0>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d013      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <HAL_DMA_IRQHandler+0x1e4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00e      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a1b      	ldr	r2, [pc, #108]	; (8008d08 <HAL_DMA_IRQHandler+0x1e8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d009      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a19      	ldr	r2, [pc, #100]	; (8008d0c <HAL_DMA_IRQHandler+0x1ec>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d004      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x194>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a18      	ldr	r2, [pc, #96]	; (8008d10 <HAL_DMA_IRQHandler+0x1f0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d12f      	bne.n	8008d14 <HAL_DMA_IRQHandler+0x1f4>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2301      	movne	r3, #1
 8008cc4:	2300      	moveq	r3, #0
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	e02e      	b.n	8008d28 <HAL_DMA_IRQHandler+0x208>
 8008cca:	bf00      	nop
 8008ccc:	24000004 	.word	0x24000004
 8008cd0:	1b4e81b5 	.word	0x1b4e81b5
 8008cd4:	40020010 	.word	0x40020010
 8008cd8:	40020028 	.word	0x40020028
 8008cdc:	40020040 	.word	0x40020040
 8008ce0:	40020058 	.word	0x40020058
 8008ce4:	40020070 	.word	0x40020070
 8008ce8:	40020088 	.word	0x40020088
 8008cec:	400200a0 	.word	0x400200a0
 8008cf0:	400200b8 	.word	0x400200b8
 8008cf4:	40020410 	.word	0x40020410
 8008cf8:	40020428 	.word	0x40020428
 8008cfc:	40020440 	.word	0x40020440
 8008d00:	40020458 	.word	0x40020458
 8008d04:	40020470 	.word	0x40020470
 8008d08:	40020488 	.word	0x40020488
 8008d0c:	400204a0 	.word	0x400204a0
 8008d10:	400204b8 	.word	0x400204b8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bf14      	ite	ne
 8008d22:	2301      	movne	r3, #1
 8008d24:	2300      	moveq	r3, #0
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d015      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0204 	bic.w	r2, r2, #4
 8008d3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d40:	f003 031f 	and.w	r3, r3, #31
 8008d44:	2208      	movs	r2, #8
 8008d46:	409a      	lsls	r2, r3
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d50:	f043 0201 	orr.w	r2, r3, #1
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5c:	f003 031f 	and.w	r3, r3, #31
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d06e      	beq.n	8008e4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a69      	ldr	r2, [pc, #420]	; (8008f18 <HAL_DMA_IRQHandler+0x3f8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d04a      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a67      	ldr	r2, [pc, #412]	; (8008f1c <HAL_DMA_IRQHandler+0x3fc>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d045      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a66      	ldr	r2, [pc, #408]	; (8008f20 <HAL_DMA_IRQHandler+0x400>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d040      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a64      	ldr	r2, [pc, #400]	; (8008f24 <HAL_DMA_IRQHandler+0x404>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d03b      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a63      	ldr	r2, [pc, #396]	; (8008f28 <HAL_DMA_IRQHandler+0x408>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d036      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a61      	ldr	r2, [pc, #388]	; (8008f2c <HAL_DMA_IRQHandler+0x40c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d031      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a60      	ldr	r2, [pc, #384]	; (8008f30 <HAL_DMA_IRQHandler+0x410>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d02c      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a5e      	ldr	r2, [pc, #376]	; (8008f34 <HAL_DMA_IRQHandler+0x414>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d027      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a5d      	ldr	r2, [pc, #372]	; (8008f38 <HAL_DMA_IRQHandler+0x418>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d022      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a5b      	ldr	r2, [pc, #364]	; (8008f3c <HAL_DMA_IRQHandler+0x41c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01d      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a5a      	ldr	r2, [pc, #360]	; (8008f40 <HAL_DMA_IRQHandler+0x420>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d018      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a58      	ldr	r2, [pc, #352]	; (8008f44 <HAL_DMA_IRQHandler+0x424>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a57      	ldr	r2, [pc, #348]	; (8008f48 <HAL_DMA_IRQHandler+0x428>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00e      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a55      	ldr	r2, [pc, #340]	; (8008f4c <HAL_DMA_IRQHandler+0x42c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d009      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a54      	ldr	r2, [pc, #336]	; (8008f50 <HAL_DMA_IRQHandler+0x430>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d004      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x2ee>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a52      	ldr	r2, [pc, #328]	; (8008f54 <HAL_DMA_IRQHandler+0x434>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d10a      	bne.n	8008e24 <HAL_DMA_IRQHandler+0x304>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	e003      	b.n	8008e2c <HAL_DMA_IRQHandler+0x30c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00d      	beq.n	8008e4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	2201      	movs	r2, #1
 8008e3a:	409a      	lsls	r2, r3
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e44:	f043 0202 	orr.w	r2, r3, #2
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e50:	f003 031f 	and.w	r3, r3, #31
 8008e54:	2204      	movs	r2, #4
 8008e56:	409a      	lsls	r2, r3
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 808f 	beq.w	8008f80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a2c      	ldr	r2, [pc, #176]	; (8008f18 <HAL_DMA_IRQHandler+0x3f8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d04a      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a2a      	ldr	r2, [pc, #168]	; (8008f1c <HAL_DMA_IRQHandler+0x3fc>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d045      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a29      	ldr	r2, [pc, #164]	; (8008f20 <HAL_DMA_IRQHandler+0x400>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d040      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a27      	ldr	r2, [pc, #156]	; (8008f24 <HAL_DMA_IRQHandler+0x404>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d03b      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <HAL_DMA_IRQHandler+0x408>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d036      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a24      	ldr	r2, [pc, #144]	; (8008f2c <HAL_DMA_IRQHandler+0x40c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d031      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a23      	ldr	r2, [pc, #140]	; (8008f30 <HAL_DMA_IRQHandler+0x410>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d02c      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a21      	ldr	r2, [pc, #132]	; (8008f34 <HAL_DMA_IRQHandler+0x414>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d027      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a20      	ldr	r2, [pc, #128]	; (8008f38 <HAL_DMA_IRQHandler+0x418>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d022      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a1e      	ldr	r2, [pc, #120]	; (8008f3c <HAL_DMA_IRQHandler+0x41c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d01d      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a1d      	ldr	r2, [pc, #116]	; (8008f40 <HAL_DMA_IRQHandler+0x420>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d018      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a1b      	ldr	r2, [pc, #108]	; (8008f44 <HAL_DMA_IRQHandler+0x424>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d013      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a1a      	ldr	r2, [pc, #104]	; (8008f48 <HAL_DMA_IRQHandler+0x428>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00e      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a18      	ldr	r2, [pc, #96]	; (8008f4c <HAL_DMA_IRQHandler+0x42c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d009      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a17      	ldr	r2, [pc, #92]	; (8008f50 <HAL_DMA_IRQHandler+0x430>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d004      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x3e2>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <HAL_DMA_IRQHandler+0x434>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d12a      	bne.n	8008f58 <HAL_DMA_IRQHandler+0x438>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bf14      	ite	ne
 8008f10:	2301      	movne	r3, #1
 8008f12:	2300      	moveq	r3, #0
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	e023      	b.n	8008f60 <HAL_DMA_IRQHandler+0x440>
 8008f18:	40020010 	.word	0x40020010
 8008f1c:	40020028 	.word	0x40020028
 8008f20:	40020040 	.word	0x40020040
 8008f24:	40020058 	.word	0x40020058
 8008f28:	40020070 	.word	0x40020070
 8008f2c:	40020088 	.word	0x40020088
 8008f30:	400200a0 	.word	0x400200a0
 8008f34:	400200b8 	.word	0x400200b8
 8008f38:	40020410 	.word	0x40020410
 8008f3c:	40020428 	.word	0x40020428
 8008f40:	40020440 	.word	0x40020440
 8008f44:	40020458 	.word	0x40020458
 8008f48:	40020470 	.word	0x40020470
 8008f4c:	40020488 	.word	0x40020488
 8008f50:	400204a0 	.word	0x400204a0
 8008f54:	400204b8 	.word	0x400204b8
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00d      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f68:	f003 031f 	and.w	r3, r3, #31
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	409a      	lsls	r2, r3
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f78:	f043 0204 	orr.w	r2, r3, #4
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	2210      	movs	r2, #16
 8008f8a:	409a      	lsls	r2, r3
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80a6 	beq.w	80090e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a85      	ldr	r2, [pc, #532]	; (80091b0 <HAL_DMA_IRQHandler+0x690>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d04a      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a83      	ldr	r2, [pc, #524]	; (80091b4 <HAL_DMA_IRQHandler+0x694>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d045      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a82      	ldr	r2, [pc, #520]	; (80091b8 <HAL_DMA_IRQHandler+0x698>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d040      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a80      	ldr	r2, [pc, #512]	; (80091bc <HAL_DMA_IRQHandler+0x69c>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d03b      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a7f      	ldr	r2, [pc, #508]	; (80091c0 <HAL_DMA_IRQHandler+0x6a0>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d036      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a7d      	ldr	r2, [pc, #500]	; (80091c4 <HAL_DMA_IRQHandler+0x6a4>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d031      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a7c      	ldr	r2, [pc, #496]	; (80091c8 <HAL_DMA_IRQHandler+0x6a8>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d02c      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a7a      	ldr	r2, [pc, #488]	; (80091cc <HAL_DMA_IRQHandler+0x6ac>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d027      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a79      	ldr	r2, [pc, #484]	; (80091d0 <HAL_DMA_IRQHandler+0x6b0>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d022      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a77      	ldr	r2, [pc, #476]	; (80091d4 <HAL_DMA_IRQHandler+0x6b4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d01d      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a76      	ldr	r2, [pc, #472]	; (80091d8 <HAL_DMA_IRQHandler+0x6b8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d018      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a74      	ldr	r2, [pc, #464]	; (80091dc <HAL_DMA_IRQHandler+0x6bc>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d013      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a73      	ldr	r2, [pc, #460]	; (80091e0 <HAL_DMA_IRQHandler+0x6c0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00e      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a71      	ldr	r2, [pc, #452]	; (80091e4 <HAL_DMA_IRQHandler+0x6c4>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d009      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a70      	ldr	r2, [pc, #448]	; (80091e8 <HAL_DMA_IRQHandler+0x6c8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d004      	beq.n	8009036 <HAL_DMA_IRQHandler+0x516>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a6e      	ldr	r2, [pc, #440]	; (80091ec <HAL_DMA_IRQHandler+0x6cc>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d10a      	bne.n	800904c <HAL_DMA_IRQHandler+0x52c>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0308 	and.w	r3, r3, #8
 8009040:	2b00      	cmp	r3, #0
 8009042:	bf14      	ite	ne
 8009044:	2301      	movne	r3, #1
 8009046:	2300      	moveq	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	e009      	b.n	8009060 <HAL_DMA_IRQHandler+0x540>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	bf14      	ite	ne
 800905a:	2301      	movne	r3, #1
 800905c:	2300      	moveq	r3, #0
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d03e      	beq.n	80090e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009068:	f003 031f 	and.w	r3, r3, #31
 800906c:	2210      	movs	r2, #16
 800906e:	409a      	lsls	r2, r3
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d108      	bne.n	80090a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009094:	2b00      	cmp	r3, #0
 8009096:	d024      	beq.n	80090e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	4798      	blx	r3
 80090a0:	e01f      	b.n	80090e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01b      	beq.n	80090e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
 80090b2:	e016      	b.n	80090e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d107      	bne.n	80090d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0208 	bic.w	r2, r2, #8
 80090d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e6:	f003 031f 	and.w	r3, r3, #31
 80090ea:	2220      	movs	r2, #32
 80090ec:	409a      	lsls	r2, r3
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	4013      	ands	r3, r2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8110 	beq.w	8009318 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a2c      	ldr	r2, [pc, #176]	; (80091b0 <HAL_DMA_IRQHandler+0x690>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d04a      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a2b      	ldr	r2, [pc, #172]	; (80091b4 <HAL_DMA_IRQHandler+0x694>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d045      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a29      	ldr	r2, [pc, #164]	; (80091b8 <HAL_DMA_IRQHandler+0x698>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d040      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a28      	ldr	r2, [pc, #160]	; (80091bc <HAL_DMA_IRQHandler+0x69c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d03b      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a26      	ldr	r2, [pc, #152]	; (80091c0 <HAL_DMA_IRQHandler+0x6a0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d036      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a25      	ldr	r2, [pc, #148]	; (80091c4 <HAL_DMA_IRQHandler+0x6a4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d031      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a23      	ldr	r2, [pc, #140]	; (80091c8 <HAL_DMA_IRQHandler+0x6a8>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d02c      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a22      	ldr	r2, [pc, #136]	; (80091cc <HAL_DMA_IRQHandler+0x6ac>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d027      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a20      	ldr	r2, [pc, #128]	; (80091d0 <HAL_DMA_IRQHandler+0x6b0>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d022      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <HAL_DMA_IRQHandler+0x6b4>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d01d      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <HAL_DMA_IRQHandler+0x6b8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d018      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <HAL_DMA_IRQHandler+0x6bc>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d013      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a1a      	ldr	r2, [pc, #104]	; (80091e0 <HAL_DMA_IRQHandler+0x6c0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00e      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a19      	ldr	r2, [pc, #100]	; (80091e4 <HAL_DMA_IRQHandler+0x6c4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d009      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a17      	ldr	r2, [pc, #92]	; (80091e8 <HAL_DMA_IRQHandler+0x6c8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <HAL_DMA_IRQHandler+0x678>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a16      	ldr	r2, [pc, #88]	; (80091ec <HAL_DMA_IRQHandler+0x6cc>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d12b      	bne.n	80091f0 <HAL_DMA_IRQHandler+0x6d0>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0310 	and.w	r3, r3, #16
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bf14      	ite	ne
 80091a6:	2301      	movne	r3, #1
 80091a8:	2300      	moveq	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	e02a      	b.n	8009204 <HAL_DMA_IRQHandler+0x6e4>
 80091ae:	bf00      	nop
 80091b0:	40020010 	.word	0x40020010
 80091b4:	40020028 	.word	0x40020028
 80091b8:	40020040 	.word	0x40020040
 80091bc:	40020058 	.word	0x40020058
 80091c0:	40020070 	.word	0x40020070
 80091c4:	40020088 	.word	0x40020088
 80091c8:	400200a0 	.word	0x400200a0
 80091cc:	400200b8 	.word	0x400200b8
 80091d0:	40020410 	.word	0x40020410
 80091d4:	40020428 	.word	0x40020428
 80091d8:	40020440 	.word	0x40020440
 80091dc:	40020458 	.word	0x40020458
 80091e0:	40020470 	.word	0x40020470
 80091e4:	40020488 	.word	0x40020488
 80091e8:	400204a0 	.word	0x400204a0
 80091ec:	400204b8 	.word	0x400204b8
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	bf14      	ite	ne
 80091fe:	2301      	movne	r3, #1
 8009200:	2300      	moveq	r3, #0
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 8087 	beq.w	8009318 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800920e:	f003 031f 	and.w	r3, r3, #31
 8009212:	2220      	movs	r2, #32
 8009214:	409a      	lsls	r2, r3
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b04      	cmp	r3, #4
 8009224:	d139      	bne.n	800929a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0216 	bic.w	r2, r2, #22
 8009234:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	695a      	ldr	r2, [r3, #20]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009244:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <HAL_DMA_IRQHandler+0x736>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0208 	bic.w	r2, r2, #8
 8009264:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	223f      	movs	r2, #63	; 0x3f
 8009270:	409a      	lsls	r2, r3
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 834a 	beq.w	8009924 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
          }
          return;
 8009298:	e344      	b.n	8009924 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d018      	beq.n	80092da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d108      	bne.n	80092c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d02c      	beq.n	8009318 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	4798      	blx	r3
 80092c6:	e027      	b.n	8009318 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d023      	beq.n	8009318 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
 80092d8:	e01e      	b.n	8009318 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10f      	bne.n	8009308 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0210 	bic.w	r2, r2, #16
 80092f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8306 	beq.w	800992e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8088 	beq.w	8009440 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2204      	movs	r2, #4
 8009334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a7a      	ldr	r2, [pc, #488]	; (8009528 <HAL_DMA_IRQHandler+0xa08>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d04a      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a79      	ldr	r2, [pc, #484]	; (800952c <HAL_DMA_IRQHandler+0xa0c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d045      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a77      	ldr	r2, [pc, #476]	; (8009530 <HAL_DMA_IRQHandler+0xa10>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d040      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a76      	ldr	r2, [pc, #472]	; (8009534 <HAL_DMA_IRQHandler+0xa14>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d03b      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a74      	ldr	r2, [pc, #464]	; (8009538 <HAL_DMA_IRQHandler+0xa18>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d036      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a73      	ldr	r2, [pc, #460]	; (800953c <HAL_DMA_IRQHandler+0xa1c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d031      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a71      	ldr	r2, [pc, #452]	; (8009540 <HAL_DMA_IRQHandler+0xa20>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d02c      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a70      	ldr	r2, [pc, #448]	; (8009544 <HAL_DMA_IRQHandler+0xa24>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d027      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a6e      	ldr	r2, [pc, #440]	; (8009548 <HAL_DMA_IRQHandler+0xa28>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d022      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a6d      	ldr	r2, [pc, #436]	; (800954c <HAL_DMA_IRQHandler+0xa2c>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d01d      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a6b      	ldr	r2, [pc, #428]	; (8009550 <HAL_DMA_IRQHandler+0xa30>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d018      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a6a      	ldr	r2, [pc, #424]	; (8009554 <HAL_DMA_IRQHandler+0xa34>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d013      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a68      	ldr	r2, [pc, #416]	; (8009558 <HAL_DMA_IRQHandler+0xa38>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00e      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a67      	ldr	r2, [pc, #412]	; (800955c <HAL_DMA_IRQHandler+0xa3c>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d009      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a65      	ldr	r2, [pc, #404]	; (8009560 <HAL_DMA_IRQHandler+0xa40>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x8b8>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a64      	ldr	r2, [pc, #400]	; (8009564 <HAL_DMA_IRQHandler+0xa44>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d108      	bne.n	80093ea <HAL_DMA_IRQHandler+0x8ca>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0201 	bic.w	r2, r2, #1
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	e007      	b.n	80093fa <HAL_DMA_IRQHandler+0x8da>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0201 	bic.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009402:	429a      	cmp	r2, r3
 8009404:	d307      	bcc.n	8009416 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f2      	bne.n	80093fa <HAL_DMA_IRQHandler+0x8da>
 8009414:	e000      	b.n	8009418 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009416:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2203      	movs	r2, #3
 800942a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800942e:	e003      	b.n	8009438 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8272 	beq.w	800992e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	4798      	blx	r3
 8009452:	e26c      	b.n	800992e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a43      	ldr	r2, [pc, #268]	; (8009568 <HAL_DMA_IRQHandler+0xa48>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d022      	beq.n	80094a4 <HAL_DMA_IRQHandler+0x984>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a42      	ldr	r2, [pc, #264]	; (800956c <HAL_DMA_IRQHandler+0xa4c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d01d      	beq.n	80094a4 <HAL_DMA_IRQHandler+0x984>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a40      	ldr	r2, [pc, #256]	; (8009570 <HAL_DMA_IRQHandler+0xa50>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d018      	beq.n	80094a4 <HAL_DMA_IRQHandler+0x984>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a3f      	ldr	r2, [pc, #252]	; (8009574 <HAL_DMA_IRQHandler+0xa54>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d013      	beq.n	80094a4 <HAL_DMA_IRQHandler+0x984>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a3d      	ldr	r2, [pc, #244]	; (8009578 <HAL_DMA_IRQHandler+0xa58>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d00e      	beq.n	80094a4 <HAL_DMA_IRQHandler+0x984>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a3c      	ldr	r2, [pc, #240]	; (800957c <HAL_DMA_IRQHandler+0xa5c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d009      	beq.n	80094a4 <HAL_DMA_IRQHandler+0x984>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a3a      	ldr	r2, [pc, #232]	; (8009580 <HAL_DMA_IRQHandler+0xa60>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d004      	beq.n	80094a4 <HAL_DMA_IRQHandler+0x984>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a39      	ldr	r2, [pc, #228]	; (8009584 <HAL_DMA_IRQHandler+0xa64>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d101      	bne.n	80094a8 <HAL_DMA_IRQHandler+0x988>
 80094a4:	2301      	movs	r3, #1
 80094a6:	e000      	b.n	80094aa <HAL_DMA_IRQHandler+0x98a>
 80094a8:	2300      	movs	r3, #0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 823f 	beq.w	800992e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094bc:	f003 031f 	and.w	r3, r3, #31
 80094c0:	2204      	movs	r2, #4
 80094c2:	409a      	lsls	r2, r3
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	4013      	ands	r3, r2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 80cd 	beq.w	8009668 <HAL_DMA_IRQHandler+0xb48>
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 80c7 	beq.w	8009668 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094de:	f003 031f 	and.w	r3, r3, #31
 80094e2:	2204      	movs	r2, #4
 80094e4:	409a      	lsls	r2, r3
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d049      	beq.n	8009588 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d109      	bne.n	8009512 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8210 	beq.w	8009928 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009510:	e20a      	b.n	8009928 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 8206 	beq.w	8009928 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009524:	e200      	b.n	8009928 <HAL_DMA_IRQHandler+0xe08>
 8009526:	bf00      	nop
 8009528:	40020010 	.word	0x40020010
 800952c:	40020028 	.word	0x40020028
 8009530:	40020040 	.word	0x40020040
 8009534:	40020058 	.word	0x40020058
 8009538:	40020070 	.word	0x40020070
 800953c:	40020088 	.word	0x40020088
 8009540:	400200a0 	.word	0x400200a0
 8009544:	400200b8 	.word	0x400200b8
 8009548:	40020410 	.word	0x40020410
 800954c:	40020428 	.word	0x40020428
 8009550:	40020440 	.word	0x40020440
 8009554:	40020458 	.word	0x40020458
 8009558:	40020470 	.word	0x40020470
 800955c:	40020488 	.word	0x40020488
 8009560:	400204a0 	.word	0x400204a0
 8009564:	400204b8 	.word	0x400204b8
 8009568:	58025408 	.word	0x58025408
 800956c:	5802541c 	.word	0x5802541c
 8009570:	58025430 	.word	0x58025430
 8009574:	58025444 	.word	0x58025444
 8009578:	58025458 	.word	0x58025458
 800957c:	5802546c 	.word	0x5802546c
 8009580:	58025480 	.word	0x58025480
 8009584:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	d160      	bne.n	8009654 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a7f      	ldr	r2, [pc, #508]	; (8009794 <HAL_DMA_IRQHandler+0xc74>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d04a      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a7d      	ldr	r2, [pc, #500]	; (8009798 <HAL_DMA_IRQHandler+0xc78>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d045      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a7c      	ldr	r2, [pc, #496]	; (800979c <HAL_DMA_IRQHandler+0xc7c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d040      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a7a      	ldr	r2, [pc, #488]	; (80097a0 <HAL_DMA_IRQHandler+0xc80>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d03b      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a79      	ldr	r2, [pc, #484]	; (80097a4 <HAL_DMA_IRQHandler+0xc84>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d036      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a77      	ldr	r2, [pc, #476]	; (80097a8 <HAL_DMA_IRQHandler+0xc88>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d031      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a76      	ldr	r2, [pc, #472]	; (80097ac <HAL_DMA_IRQHandler+0xc8c>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d02c      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a74      	ldr	r2, [pc, #464]	; (80097b0 <HAL_DMA_IRQHandler+0xc90>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d027      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a73      	ldr	r2, [pc, #460]	; (80097b4 <HAL_DMA_IRQHandler+0xc94>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d022      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a71      	ldr	r2, [pc, #452]	; (80097b8 <HAL_DMA_IRQHandler+0xc98>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d01d      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a70      	ldr	r2, [pc, #448]	; (80097bc <HAL_DMA_IRQHandler+0xc9c>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d018      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a6e      	ldr	r2, [pc, #440]	; (80097c0 <HAL_DMA_IRQHandler+0xca0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d013      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a6d      	ldr	r2, [pc, #436]	; (80097c4 <HAL_DMA_IRQHandler+0xca4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d00e      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a6b      	ldr	r2, [pc, #428]	; (80097c8 <HAL_DMA_IRQHandler+0xca8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d009      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a6a      	ldr	r2, [pc, #424]	; (80097cc <HAL_DMA_IRQHandler+0xcac>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d004      	beq.n	8009632 <HAL_DMA_IRQHandler+0xb12>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a68      	ldr	r2, [pc, #416]	; (80097d0 <HAL_DMA_IRQHandler+0xcb0>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d108      	bne.n	8009644 <HAL_DMA_IRQHandler+0xb24>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 0208 	bic.w	r2, r2, #8
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	e007      	b.n	8009654 <HAL_DMA_IRQHandler+0xb34>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 0204 	bic.w	r2, r2, #4
 8009652:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 8165 	beq.w	8009928 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009666:	e15f      	b.n	8009928 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800966c:	f003 031f 	and.w	r3, r3, #31
 8009670:	2202      	movs	r2, #2
 8009672:	409a      	lsls	r2, r3
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	4013      	ands	r3, r2
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 80c5 	beq.w	8009808 <HAL_DMA_IRQHandler+0xce8>
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80bf 	beq.w	8009808 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968e:	f003 031f 	and.w	r3, r3, #31
 8009692:	2202      	movs	r2, #2
 8009694:	409a      	lsls	r2, r3
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d018      	beq.n	80096d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 813a 	beq.w	800992c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096c0:	e134      	b.n	800992c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 8130 	beq.w	800992c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096d4:	e12a      	b.n	800992c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 8089 	bne.w	80097f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a2b      	ldr	r2, [pc, #172]	; (8009794 <HAL_DMA_IRQHandler+0xc74>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d04a      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a29      	ldr	r2, [pc, #164]	; (8009798 <HAL_DMA_IRQHandler+0xc78>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d045      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a28      	ldr	r2, [pc, #160]	; (800979c <HAL_DMA_IRQHandler+0xc7c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d040      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a26      	ldr	r2, [pc, #152]	; (80097a0 <HAL_DMA_IRQHandler+0xc80>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d03b      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a25      	ldr	r2, [pc, #148]	; (80097a4 <HAL_DMA_IRQHandler+0xc84>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d036      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a23      	ldr	r2, [pc, #140]	; (80097a8 <HAL_DMA_IRQHandler+0xc88>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d031      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a22      	ldr	r2, [pc, #136]	; (80097ac <HAL_DMA_IRQHandler+0xc8c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d02c      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a20      	ldr	r2, [pc, #128]	; (80097b0 <HAL_DMA_IRQHandler+0xc90>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d027      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a1f      	ldr	r2, [pc, #124]	; (80097b4 <HAL_DMA_IRQHandler+0xc94>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d022      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a1d      	ldr	r2, [pc, #116]	; (80097b8 <HAL_DMA_IRQHandler+0xc98>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d01d      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a1c      	ldr	r2, [pc, #112]	; (80097bc <HAL_DMA_IRQHandler+0xc9c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d018      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a1a      	ldr	r2, [pc, #104]	; (80097c0 <HAL_DMA_IRQHandler+0xca0>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d013      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a19      	ldr	r2, [pc, #100]	; (80097c4 <HAL_DMA_IRQHandler+0xca4>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00e      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a17      	ldr	r2, [pc, #92]	; (80097c8 <HAL_DMA_IRQHandler+0xca8>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d009      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a16      	ldr	r2, [pc, #88]	; (80097cc <HAL_DMA_IRQHandler+0xcac>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d004      	beq.n	8009782 <HAL_DMA_IRQHandler+0xc62>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a14      	ldr	r2, [pc, #80]	; (80097d0 <HAL_DMA_IRQHandler+0xcb0>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d128      	bne.n	80097d4 <HAL_DMA_IRQHandler+0xcb4>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0214 	bic.w	r2, r2, #20
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	e027      	b.n	80097e4 <HAL_DMA_IRQHandler+0xcc4>
 8009794:	40020010 	.word	0x40020010
 8009798:	40020028 	.word	0x40020028
 800979c:	40020040 	.word	0x40020040
 80097a0:	40020058 	.word	0x40020058
 80097a4:	40020070 	.word	0x40020070
 80097a8:	40020088 	.word	0x40020088
 80097ac:	400200a0 	.word	0x400200a0
 80097b0:	400200b8 	.word	0x400200b8
 80097b4:	40020410 	.word	0x40020410
 80097b8:	40020428 	.word	0x40020428
 80097bc:	40020440 	.word	0x40020440
 80097c0:	40020458 	.word	0x40020458
 80097c4:	40020470 	.word	0x40020470
 80097c8:	40020488 	.word	0x40020488
 80097cc:	400204a0 	.word	0x400204a0
 80097d0:	400204b8 	.word	0x400204b8
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 020a 	bic.w	r2, r2, #10
 80097e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 8097 	beq.w	800992c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009806:	e091      	b.n	800992c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	2208      	movs	r2, #8
 8009812:	409a      	lsls	r2, r3
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	4013      	ands	r3, r2
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8088 	beq.w	800992e <HAL_DMA_IRQHandler+0xe0e>
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 8082 	beq.w	800992e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a41      	ldr	r2, [pc, #260]	; (8009934 <HAL_DMA_IRQHandler+0xe14>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d04a      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a3f      	ldr	r2, [pc, #252]	; (8009938 <HAL_DMA_IRQHandler+0xe18>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d045      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a3e      	ldr	r2, [pc, #248]	; (800993c <HAL_DMA_IRQHandler+0xe1c>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d040      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a3c      	ldr	r2, [pc, #240]	; (8009940 <HAL_DMA_IRQHandler+0xe20>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d03b      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a3b      	ldr	r2, [pc, #236]	; (8009944 <HAL_DMA_IRQHandler+0xe24>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d036      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a39      	ldr	r2, [pc, #228]	; (8009948 <HAL_DMA_IRQHandler+0xe28>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d031      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a38      	ldr	r2, [pc, #224]	; (800994c <HAL_DMA_IRQHandler+0xe2c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d02c      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a36      	ldr	r2, [pc, #216]	; (8009950 <HAL_DMA_IRQHandler+0xe30>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d027      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a35      	ldr	r2, [pc, #212]	; (8009954 <HAL_DMA_IRQHandler+0xe34>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d022      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a33      	ldr	r2, [pc, #204]	; (8009958 <HAL_DMA_IRQHandler+0xe38>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d01d      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a32      	ldr	r2, [pc, #200]	; (800995c <HAL_DMA_IRQHandler+0xe3c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d018      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a30      	ldr	r2, [pc, #192]	; (8009960 <HAL_DMA_IRQHandler+0xe40>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d013      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a2f      	ldr	r2, [pc, #188]	; (8009964 <HAL_DMA_IRQHandler+0xe44>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00e      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a2d      	ldr	r2, [pc, #180]	; (8009968 <HAL_DMA_IRQHandler+0xe48>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d009      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a2c      	ldr	r2, [pc, #176]	; (800996c <HAL_DMA_IRQHandler+0xe4c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d004      	beq.n	80098ca <HAL_DMA_IRQHandler+0xdaa>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a2a      	ldr	r2, [pc, #168]	; (8009970 <HAL_DMA_IRQHandler+0xe50>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d108      	bne.n	80098dc <HAL_DMA_IRQHandler+0xdbc>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 021c 	bic.w	r2, r2, #28
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	e007      	b.n	80098ec <HAL_DMA_IRQHandler+0xdcc>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 020e 	bic.w	r2, r2, #14
 80098ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	2201      	movs	r2, #1
 80098f6:	409a      	lsls	r2, r3
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d009      	beq.n	800992e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
 8009922:	e004      	b.n	800992e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009924:	bf00      	nop
 8009926:	e002      	b.n	800992e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009928:	bf00      	nop
 800992a:	e000      	b.n	800992e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800992c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800992e:	3728      	adds	r7, #40	; 0x28
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	40020010 	.word	0x40020010
 8009938:	40020028 	.word	0x40020028
 800993c:	40020040 	.word	0x40020040
 8009940:	40020058 	.word	0x40020058
 8009944:	40020070 	.word	0x40020070
 8009948:	40020088 	.word	0x40020088
 800994c:	400200a0 	.word	0x400200a0
 8009950:	400200b8 	.word	0x400200b8
 8009954:	40020410 	.word	0x40020410
 8009958:	40020428 	.word	0x40020428
 800995c:	40020440 	.word	0x40020440
 8009960:	40020458 	.word	0x40020458
 8009964:	40020470 	.word	0x40020470
 8009968:	40020488 	.word	0x40020488
 800996c:	400204a0 	.word	0x400204a0
 8009970:	400204b8 	.word	0x400204b8

08009974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a42      	ldr	r2, [pc, #264]	; (8009a8c <DMA_CalcBaseAndBitshift+0x118>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d04a      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a41      	ldr	r2, [pc, #260]	; (8009a90 <DMA_CalcBaseAndBitshift+0x11c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d045      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a3f      	ldr	r2, [pc, #252]	; (8009a94 <DMA_CalcBaseAndBitshift+0x120>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d040      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a3e      	ldr	r2, [pc, #248]	; (8009a98 <DMA_CalcBaseAndBitshift+0x124>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d03b      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a3c      	ldr	r2, [pc, #240]	; (8009a9c <DMA_CalcBaseAndBitshift+0x128>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d036      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a3b      	ldr	r2, [pc, #236]	; (8009aa0 <DMA_CalcBaseAndBitshift+0x12c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d031      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a39      	ldr	r2, [pc, #228]	; (8009aa4 <DMA_CalcBaseAndBitshift+0x130>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d02c      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a38      	ldr	r2, [pc, #224]	; (8009aa8 <DMA_CalcBaseAndBitshift+0x134>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d027      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a36      	ldr	r2, [pc, #216]	; (8009aac <DMA_CalcBaseAndBitshift+0x138>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d022      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a35      	ldr	r2, [pc, #212]	; (8009ab0 <DMA_CalcBaseAndBitshift+0x13c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d01d      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a33      	ldr	r2, [pc, #204]	; (8009ab4 <DMA_CalcBaseAndBitshift+0x140>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d018      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a32      	ldr	r2, [pc, #200]	; (8009ab8 <DMA_CalcBaseAndBitshift+0x144>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d013      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a30      	ldr	r2, [pc, #192]	; (8009abc <DMA_CalcBaseAndBitshift+0x148>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00e      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a2f      	ldr	r2, [pc, #188]	; (8009ac0 <DMA_CalcBaseAndBitshift+0x14c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d009      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ac4 <DMA_CalcBaseAndBitshift+0x150>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <DMA_CalcBaseAndBitshift+0xa8>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a2c      	ldr	r2, [pc, #176]	; (8009ac8 <DMA_CalcBaseAndBitshift+0x154>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d101      	bne.n	8009a20 <DMA_CalcBaseAndBitshift+0xac>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e000      	b.n	8009a22 <DMA_CalcBaseAndBitshift+0xae>
 8009a20:	2300      	movs	r3, #0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d024      	beq.n	8009a70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	3b10      	subs	r3, #16
 8009a2e:	4a27      	ldr	r2, [pc, #156]	; (8009acc <DMA_CalcBaseAndBitshift+0x158>)
 8009a30:	fba2 2303 	umull	r2, r3, r2, r3
 8009a34:	091b      	lsrs	r3, r3, #4
 8009a36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	4a24      	ldr	r2, [pc, #144]	; (8009ad0 <DMA_CalcBaseAndBitshift+0x15c>)
 8009a40:	5cd3      	ldrb	r3, [r2, r3]
 8009a42:	461a      	mov	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d908      	bls.n	8009a60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	4b1f      	ldr	r3, [pc, #124]	; (8009ad4 <DMA_CalcBaseAndBitshift+0x160>)
 8009a56:	4013      	ands	r3, r2
 8009a58:	1d1a      	adds	r2, r3, #4
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8009a5e:	e00d      	b.n	8009a7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	461a      	mov	r2, r3
 8009a66:	4b1b      	ldr	r3, [pc, #108]	; (8009ad4 <DMA_CalcBaseAndBitshift+0x160>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8009a6e:	e005      	b.n	8009a7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	40020010 	.word	0x40020010
 8009a90:	40020028 	.word	0x40020028
 8009a94:	40020040 	.word	0x40020040
 8009a98:	40020058 	.word	0x40020058
 8009a9c:	40020070 	.word	0x40020070
 8009aa0:	40020088 	.word	0x40020088
 8009aa4:	400200a0 	.word	0x400200a0
 8009aa8:	400200b8 	.word	0x400200b8
 8009aac:	40020410 	.word	0x40020410
 8009ab0:	40020428 	.word	0x40020428
 8009ab4:	40020440 	.word	0x40020440
 8009ab8:	40020458 	.word	0x40020458
 8009abc:	40020470 	.word	0x40020470
 8009ac0:	40020488 	.word	0x40020488
 8009ac4:	400204a0 	.word	0x400204a0
 8009ac8:	400204b8 	.word	0x400204b8
 8009acc:	aaaaaaab 	.word	0xaaaaaaab
 8009ad0:	080125c0 	.word	0x080125c0
 8009ad4:	fffffc00 	.word	0xfffffc00

08009ad8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d120      	bne.n	8009b2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d858      	bhi.n	8009ba6 <DMA_CheckFifoParam+0xce>
 8009af4:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <DMA_CheckFifoParam+0x24>)
 8009af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afa:	bf00      	nop
 8009afc:	08009b0d 	.word	0x08009b0d
 8009b00:	08009b1f 	.word	0x08009b1f
 8009b04:	08009b0d 	.word	0x08009b0d
 8009b08:	08009ba7 	.word	0x08009ba7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d048      	beq.n	8009baa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b1c:	e045      	b.n	8009baa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b26:	d142      	bne.n	8009bae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b2c:	e03f      	b.n	8009bae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b36:	d123      	bne.n	8009b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d838      	bhi.n	8009bb2 <DMA_CheckFifoParam+0xda>
 8009b40:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <DMA_CheckFifoParam+0x70>)
 8009b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b46:	bf00      	nop
 8009b48:	08009b59 	.word	0x08009b59
 8009b4c:	08009b5f 	.word	0x08009b5f
 8009b50:	08009b59 	.word	0x08009b59
 8009b54:	08009b71 	.word	0x08009b71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	73fb      	strb	r3, [r7, #15]
        break;
 8009b5c:	e030      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d025      	beq.n	8009bb6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b6e:	e022      	b.n	8009bb6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b78:	d11f      	bne.n	8009bba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b7e:	e01c      	b.n	8009bba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d902      	bls.n	8009b8e <DMA_CheckFifoParam+0xb6>
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d003      	beq.n	8009b94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009b8c:	e018      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	73fb      	strb	r3, [r7, #15]
        break;
 8009b92:	e015      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00e      	beq.n	8009bbe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba4:	e00b      	b.n	8009bbe <DMA_CheckFifoParam+0xe6>
        break;
 8009ba6:	bf00      	nop
 8009ba8:	e00a      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009baa:	bf00      	nop
 8009bac:	e008      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009bae:	bf00      	nop
 8009bb0:	e006      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009bb2:	bf00      	nop
 8009bb4:	e004      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009bb6:	bf00      	nop
 8009bb8:	e002      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <DMA_CheckFifoParam+0xe8>
    break;
 8009bbe:	bf00      	nop
    }
  }

  return status;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop

08009bd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a38      	ldr	r2, [pc, #224]	; (8009cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d022      	beq.n	8009c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a36      	ldr	r2, [pc, #216]	; (8009cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d01d      	beq.n	8009c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a35      	ldr	r2, [pc, #212]	; (8009ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d018      	beq.n	8009c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a33      	ldr	r2, [pc, #204]	; (8009cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d013      	beq.n	8009c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a32      	ldr	r2, [pc, #200]	; (8009cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00e      	beq.n	8009c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a30      	ldr	r2, [pc, #192]	; (8009cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d009      	beq.n	8009c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a2f      	ldr	r2, [pc, #188]	; (8009cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d004      	beq.n	8009c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a2d      	ldr	r2, [pc, #180]	; (8009ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d101      	bne.n	8009c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009c32:	2300      	movs	r3, #0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01a      	beq.n	8009c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	3b08      	subs	r3, #8
 8009c40:	4a28      	ldr	r2, [pc, #160]	; (8009ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009c42:	fba2 2303 	umull	r2, r3, r2, r3
 8009c46:	091b      	lsrs	r3, r3, #4
 8009c48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4b26      	ldr	r3, [pc, #152]	; (8009ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a24      	ldr	r2, [pc, #144]	; (8009cec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009c5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f003 031f 	and.w	r3, r3, #31
 8009c64:	2201      	movs	r2, #1
 8009c66:	409a      	lsls	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009c6c:	e024      	b.n	8009cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	3b10      	subs	r3, #16
 8009c76:	4a1e      	ldr	r2, [pc, #120]	; (8009cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009c78:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7c:	091b      	lsrs	r3, r3, #4
 8009c7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	4a1c      	ldr	r2, [pc, #112]	; (8009cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d806      	bhi.n	8009c96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4a1b      	ldr	r2, [pc, #108]	; (8009cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d902      	bls.n	8009c96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3308      	adds	r3, #8
 8009c94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4b18      	ldr	r3, [pc, #96]	; (8009cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a16      	ldr	r2, [pc, #88]	; (8009d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009ca8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f003 031f 	and.w	r3, r3, #31
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	409a      	lsls	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009cb8:	bf00      	nop
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	58025408 	.word	0x58025408
 8009cc8:	5802541c 	.word	0x5802541c
 8009ccc:	58025430 	.word	0x58025430
 8009cd0:	58025444 	.word	0x58025444
 8009cd4:	58025458 	.word	0x58025458
 8009cd8:	5802546c 	.word	0x5802546c
 8009cdc:	58025480 	.word	0x58025480
 8009ce0:	58025494 	.word	0x58025494
 8009ce4:	cccccccd 	.word	0xcccccccd
 8009ce8:	16009600 	.word	0x16009600
 8009cec:	58025880 	.word	0x58025880
 8009cf0:	aaaaaaab 	.word	0xaaaaaaab
 8009cf4:	400204b8 	.word	0x400204b8
 8009cf8:	4002040f 	.word	0x4002040f
 8009cfc:	10008200 	.word	0x10008200
 8009d00:	40020880 	.word	0x40020880

08009d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d04a      	beq.n	8009db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d847      	bhi.n	8009db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a25      	ldr	r2, [pc, #148]	; (8009dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d022      	beq.n	8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a24      	ldr	r2, [pc, #144]	; (8009dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d01d      	beq.n	8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a22      	ldr	r2, [pc, #136]	; (8009dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d018      	beq.n	8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a21      	ldr	r2, [pc, #132]	; (8009dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d013      	beq.n	8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a1f      	ldr	r2, [pc, #124]	; (8009dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00e      	beq.n	8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a1e      	ldr	r2, [pc, #120]	; (8009dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d009      	beq.n	8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a1c      	ldr	r2, [pc, #112]	; (8009dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d004      	beq.n	8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a1b      	ldr	r2, [pc, #108]	; (8009dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d101      	bne.n	8009d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009d74:	2300      	movs	r3, #0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4b17      	ldr	r3, [pc, #92]	; (8009ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	461a      	mov	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a15      	ldr	r2, [pc, #84]	; (8009de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009d8c:	671a      	str	r2, [r3, #112]	; 0x70
 8009d8e:	e009      	b.n	8009da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4b14      	ldr	r3, [pc, #80]	; (8009de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	461a      	mov	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a11      	ldr	r2, [pc, #68]	; (8009de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009da2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	2201      	movs	r2, #1
 8009daa:	409a      	lsls	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009db0:	bf00      	nop
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	58025408 	.word	0x58025408
 8009dc0:	5802541c 	.word	0x5802541c
 8009dc4:	58025430 	.word	0x58025430
 8009dc8:	58025444 	.word	0x58025444
 8009dcc:	58025458 	.word	0x58025458
 8009dd0:	5802546c 	.word	0x5802546c
 8009dd4:	58025480 	.word	0x58025480
 8009dd8:	58025494 	.word	0x58025494
 8009ddc:	1600963f 	.word	0x1600963f
 8009de0:	58025940 	.word	0x58025940
 8009de4:	1000823f 	.word	0x1000823f
 8009de8:	40020940 	.word	0x40020940

08009dec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e0cf      	b.n	8009f9e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d106      	bne.n	8009e16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2223      	movs	r2, #35	; 0x23
 8009e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7fd f89f 	bl	8006f54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e16:	4b64      	ldr	r3, [pc, #400]	; (8009fa8 <HAL_ETH_Init+0x1bc>)
 8009e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e1c:	4a62      	ldr	r2, [pc, #392]	; (8009fa8 <HAL_ETH_Init+0x1bc>)
 8009e1e:	f043 0302 	orr.w	r3, r3, #2
 8009e22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009e26:	4b60      	ldr	r3, [pc, #384]	; (8009fa8 <HAL_ETH_Init+0x1bc>)
 8009e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	60bb      	str	r3, [r7, #8]
 8009e32:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	7a1b      	ldrb	r3, [r3, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f7fd fc8b 	bl	8007758 <HAL_SYSCFG_ETHInterfaceSelect>
 8009e42:	e003      	b.n	8009e4c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009e44:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009e48:	f7fd fc86 	bl	8007758 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009e4c:	4b57      	ldr	r3, [pc, #348]	; (8009fac <HAL_ETH_Init+0x1c0>)
 8009e4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6812      	ldr	r2, [r2, #0]
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e68:	f7fd fc3a 	bl	80076e0 <HAL_GetTick>
 8009e6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009e6e:	e011      	b.n	8009e94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009e70:	f7fd fc36 	bl	80076e0 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009e7e:	d909      	bls.n	8009e94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2204      	movs	r2, #4
 8009e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	22e0      	movs	r2, #224	; 0xe0
 8009e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e084      	b.n	8009f9e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e4      	bne.n	8009e70 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f886 	bl	8009fb8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009eac:	f001 fefc 	bl	800bca8 <HAL_RCC_GetHCLKFreq>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	4a3f      	ldr	r2, [pc, #252]	; (8009fb0 <HAL_ETH_Init+0x1c4>)
 8009eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb8:	0c9a      	lsrs	r2, r3, #18
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3a01      	subs	r2, #1
 8009ec0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fa71 	bl	800a3ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009ed6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	6812      	ldr	r2, [r2, #0]
 8009ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ee2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ee6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d009      	beq.n	8009f0a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	22e0      	movs	r2, #224	; 0xe0
 8009f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e049      	b.n	8009f9e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f12:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009f16:	4b27      	ldr	r3, [pc, #156]	; (8009fb4 <HAL_ETH_Init+0x1c8>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6952      	ldr	r2, [r2, #20]
 8009f1e:	0051      	lsls	r1, r2, #1
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	430b      	orrs	r3, r1
 8009f26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f2a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fad9 	bl	800a4e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fb1f 	bl	800a578 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	3305      	adds	r3, #5
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	021a      	lsls	r2, r3, #8
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	3303      	adds	r3, #3
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	061a      	lsls	r2, r3, #24
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	3302      	adds	r3, #2
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	3301      	adds	r3, #1
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009f86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2210      	movs	r2, #16
 8009f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	58024400 	.word	0x58024400
 8009fac:	58000400 	.word	0x58000400
 8009fb0:	431bde83 	.word	0x431bde83
 8009fb4:	ffff8001 	.word	0xffff8001

08009fb8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009fd0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009fd2:	f001 fe69 	bl	800bca8 <HAL_RCC_GetHCLKFreq>
 8009fd6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	4a1e      	ldr	r2, [pc, #120]	; (800a054 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d908      	bls.n	8009ff2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	4a1d      	ldr	r2, [pc, #116]	; (800a058 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d804      	bhi.n	8009ff2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e027      	b.n	800a042 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	4a18      	ldr	r2, [pc, #96]	; (800a058 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d908      	bls.n	800a00c <HAL_ETH_SetMDIOClockRange+0x54>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	4a17      	ldr	r2, [pc, #92]	; (800a05c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d204      	bcs.n	800a00c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e01a      	b.n	800a042 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	4a13      	ldr	r2, [pc, #76]	; (800a05c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d303      	bcc.n	800a01c <HAL_ETH_SetMDIOClockRange+0x64>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4a12      	ldr	r2, [pc, #72]	; (800a060 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d911      	bls.n	800a040 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4a10      	ldr	r2, [pc, #64]	; (800a060 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d908      	bls.n	800a036 <HAL_ETH_SetMDIOClockRange+0x7e>
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	4a0f      	ldr	r2, [pc, #60]	; (800a064 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d804      	bhi.n	800a036 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	e005      	b.n	800a042 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a03c:	60fb      	str	r3, [r7, #12]
 800a03e:	e000      	b.n	800a042 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a040:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a04c:	bf00      	nop
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	01312cff 	.word	0x01312cff
 800a058:	02160ebf 	.word	0x02160ebf
 800a05c:	03938700 	.word	0x03938700
 800a060:	05f5e0ff 	.word	0x05f5e0ff
 800a064:	08f0d17f 	.word	0x08f0d17f

0800a068 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a07a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	791b      	ldrb	r3, [r3, #4]
 800a080:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a082:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	7b1b      	ldrb	r3, [r3, #12]
 800a088:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a08a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	7b5b      	ldrb	r3, [r3, #13]
 800a090:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a092:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	7b9b      	ldrb	r3, [r3, #14]
 800a098:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a09a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	7bdb      	ldrb	r3, [r3, #15]
 800a0a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a0a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	7c12      	ldrb	r2, [r2, #16]
 800a0a8:	2a00      	cmp	r2, #0
 800a0aa:	d102      	bne.n	800a0b2 <ETH_SetMACConfig+0x4a>
 800a0ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a0b0:	e000      	b.n	800a0b4 <ETH_SetMACConfig+0x4c>
 800a0b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a0b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	7c52      	ldrb	r2, [r2, #17]
 800a0ba:	2a00      	cmp	r2, #0
 800a0bc:	d102      	bne.n	800a0c4 <ETH_SetMACConfig+0x5c>
 800a0be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a0c2:	e000      	b.n	800a0c6 <ETH_SetMACConfig+0x5e>
 800a0c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a0c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	7c9b      	ldrb	r3, [r3, #18]
 800a0cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a0ce:	431a      	orrs	r2, r3
               macconf->Speed |
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a0d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a0da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	7f1b      	ldrb	r3, [r3, #28]
 800a0e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a0e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	7f5b      	ldrb	r3, [r3, #29]
 800a0e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a0ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	7f92      	ldrb	r2, [r2, #30]
 800a0f0:	2a00      	cmp	r2, #0
 800a0f2:	d102      	bne.n	800a0fa <ETH_SetMACConfig+0x92>
 800a0f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0f8:	e000      	b.n	800a0fc <ETH_SetMACConfig+0x94>
 800a0fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a0fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	7fdb      	ldrb	r3, [r3, #31]
 800a102:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a104:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a10c:	2a00      	cmp	r2, #0
 800a10e:	d102      	bne.n	800a116 <ETH_SetMACConfig+0xae>
 800a110:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a114:	e000      	b.n	800a118 <ETH_SetMACConfig+0xb0>
 800a116:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a118:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a11e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a126:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a128:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	4b56      	ldr	r3, [pc, #344]	; (800a294 <ETH_SetMACConfig+0x22c>)
 800a13a:	4013      	ands	r3, r2
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	68f9      	ldr	r1, [r7, #12]
 800a142:	430b      	orrs	r3, r1
 800a144:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a152:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a154:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a15c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a15e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a166:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a168:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a170:	2a00      	cmp	r2, #0
 800a172:	d102      	bne.n	800a17a <ETH_SetMACConfig+0x112>
 800a174:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a178:	e000      	b.n	800a17c <ETH_SetMACConfig+0x114>
 800a17a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a17c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	4b42      	ldr	r3, [pc, #264]	; (800a298 <ETH_SetMACConfig+0x230>)
 800a18e:	4013      	ands	r3, r2
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6812      	ldr	r2, [r2, #0]
 800a194:	68f9      	ldr	r1, [r7, #12]
 800a196:	430b      	orrs	r3, r1
 800a198:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	4b3a      	ldr	r3, [pc, #232]	; (800a29c <ETH_SetMACConfig+0x234>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6812      	ldr	r2, [r2, #0]
 800a1b8:	68f9      	ldr	r1, [r7, #12]
 800a1ba:	430b      	orrs	r3, r1
 800a1bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a1c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a1ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a1d2:	2a00      	cmp	r2, #0
 800a1d4:	d101      	bne.n	800a1da <ETH_SetMACConfig+0x172>
 800a1d6:	2280      	movs	r2, #128	; 0x80
 800a1d8:	e000      	b.n	800a1dc <ETH_SetMACConfig+0x174>
 800a1da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a1dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1ee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	6812      	ldr	r2, [r2, #0]
 800a1f8:	68f9      	ldr	r1, [r7, #12]
 800a1fa:	430b      	orrs	r3, r1
 800a1fc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a204:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a20c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a21a:	f023 0103 	bic.w	r1, r3, #3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	430a      	orrs	r2, r1
 800a226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a232:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a24e:	2a00      	cmp	r2, #0
 800a250:	d101      	bne.n	800a256 <ETH_SetMACConfig+0x1ee>
 800a252:	2240      	movs	r2, #64	; 0x40
 800a254:	e000      	b.n	800a258 <ETH_SetMACConfig+0x1f0>
 800a256:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a258:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a260:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a26a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a278:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	430a      	orrs	r2, r1
 800a284:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a288:	bf00      	nop
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	00048083 	.word	0x00048083
 800a298:	c0f88000 	.word	0xc0f88000
 800a29c:	fffffef0 	.word	0xfffffef0

0800a2a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b38      	ldr	r3, [pc, #224]	; (800a398 <ETH_SetDMAConfig+0xf8>)
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	6811      	ldr	r1, [r2, #0]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6812      	ldr	r2, [r2, #0]
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	791b      	ldrb	r3, [r3, #4]
 800a2cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a2d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	7b1b      	ldrb	r3, [r3, #12]
 800a2d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	4b2c      	ldr	r3, [pc, #176]	; (800a39c <ETH_SetDMAConfig+0xfc>)
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	6812      	ldr	r2, [r2, #0]
 800a2f0:	68f9      	ldr	r1, [r7, #12]
 800a2f2:	430b      	orrs	r3, r1
 800a2f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	7b5b      	ldrb	r3, [r3, #13]
 800a2fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a304:	4313      	orrs	r3, r2
 800a306:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a310:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a314:	4b22      	ldr	r3, [pc, #136]	; (800a3a0 <ETH_SetDMAConfig+0x100>)
 800a316:	4013      	ands	r3, r2
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	68f9      	ldr	r1, [r7, #12]
 800a31e:	430b      	orrs	r3, r1
 800a320:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a324:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	7d1b      	ldrb	r3, [r3, #20]
 800a330:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a332:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	7f5b      	ldrb	r3, [r3, #29]
 800a338:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a346:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a34a:	4b16      	ldr	r3, [pc, #88]	; (800a3a4 <ETH_SetDMAConfig+0x104>)
 800a34c:	4013      	ands	r3, r2
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6812      	ldr	r2, [r2, #0]
 800a352:	68f9      	ldr	r1, [r7, #12]
 800a354:	430b      	orrs	r3, r1
 800a356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a35a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	7f1b      	ldrb	r3, [r3, #28]
 800a362:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a374:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a378:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <ETH_SetDMAConfig+0x108>)
 800a37a:	4013      	ands	r3, r2
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	68f9      	ldr	r1, [r7, #12]
 800a382:	430b      	orrs	r3, r1
 800a384:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a388:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	ffff87fd 	.word	0xffff87fd
 800a39c:	ffff2ffe 	.word	0xffff2ffe
 800a3a0:	fffec000 	.word	0xfffec000
 800a3a4:	ffc0efef 	.word	0xffc0efef
 800a3a8:	7fc0ffff 	.word	0x7fc0ffff

0800a3ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b0a4      	sub	sp, #144	; 0x90
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a3e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a404:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a408:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a40a:	2300      	movs	r3, #0
 800a40c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a410:	2300      	movs	r3, #0
 800a412:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800a414:	2301      	movs	r3, #1
 800a416:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a41a:	2300      	movs	r3, #0
 800a41c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a420:	2300      	movs	r3, #0
 800a422:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a426:	2300      	movs	r3, #0
 800a428:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a42e:	2300      	movs	r3, #0
 800a430:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a432:	2300      	movs	r3, #0
 800a434:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a43e:	2301      	movs	r3, #1
 800a440:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a444:	2320      	movs	r3, #32
 800a446:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a44a:	2301      	movs	r3, #1
 800a44c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a450:	2300      	movs	r3, #0
 800a452:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a456:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a45c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a460:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a462:	2300      	movs	r3, #0
 800a464:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a468:	2302      	movs	r3, #2
 800a46a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a474:	2300      	movs	r3, #0
 800a476:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a47a:	2300      	movs	r3, #0
 800a47c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a480:	2301      	movs	r3, #1
 800a482:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a486:	2300      	movs	r3, #0
 800a488:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a48a:	2301      	movs	r3, #1
 800a48c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff fde6 	bl	800a068 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a49c:	2301      	movs	r3, #1
 800a49e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a4b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a4c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a4cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a4d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a4d2:	f107 0308 	add.w	r3, r7, #8
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff fee1 	bl	800a2a0 <ETH_SetDMAConfig>
}
 800a4de:	bf00      	nop
 800a4e0:	3790      	adds	r7, #144	; 0x90
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	e01d      	b.n	800a530 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68d9      	ldr	r1, [r3, #12]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	005b      	lsls	r3, r3, #1
 800a4fe:	4413      	add	r3, r2
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	440b      	add	r3, r1
 800a504:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2200      	movs	r2, #0
 800a510:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2200      	movs	r2, #0
 800a516:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a51e:	68b9      	ldr	r1, [r7, #8]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	3206      	adds	r2, #6
 800a526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3301      	adds	r3, #1
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2b03      	cmp	r3, #3
 800a534:	d9de      	bls.n	800a4f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a544:	461a      	mov	r2, r3
 800a546:	2303      	movs	r3, #3
 800a548:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68da      	ldr	r2, [r3, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a558:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68da      	ldr	r2, [r3, #12]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a568:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800a56c:	bf00      	nop
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a580:	2300      	movs	r3, #0
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	e023      	b.n	800a5ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6919      	ldr	r1, [r3, #16]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4613      	mov	r3, r2
 800a58e:	005b      	lsls	r3, r3, #1
 800a590:	4413      	add	r3, r2
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	440b      	add	r3, r1
 800a596:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a5bc:	68b9      	ldr	r1, [r7, #8]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	3212      	adds	r2, #18
 800a5c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d9d8      	bls.n	800a586 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	691a      	ldr	r2, [r3, #16]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a622:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a626:	bf00      	nop
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
	...

0800a634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a634:	b480      	push	{r7}
 800a636:	b089      	sub	sp, #36	; 0x24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a63e:	2300      	movs	r3, #0
 800a640:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a642:	4b89      	ldr	r3, [pc, #548]	; (800a868 <HAL_GPIO_Init+0x234>)
 800a644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a646:	e194      	b.n	800a972 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	2101      	movs	r1, #1
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	fa01 f303 	lsl.w	r3, r1, r3
 800a654:	4013      	ands	r3, r2
 800a656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 8186 	beq.w	800a96c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	f003 0303 	and.w	r3, r3, #3
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d005      	beq.n	800a678 <HAL_GPIO_Init+0x44>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	f003 0303 	and.w	r3, r3, #3
 800a674:	2b02      	cmp	r3, #2
 800a676:	d130      	bne.n	800a6da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	2203      	movs	r2, #3
 800a684:	fa02 f303 	lsl.w	r3, r2, r3
 800a688:	43db      	mvns	r3, r3
 800a68a:	69ba      	ldr	r2, [r7, #24]
 800a68c:	4013      	ands	r3, r2
 800a68e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	fa02 f303 	lsl.w	r3, r2, r3
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b6:	43db      	mvns	r3, r3
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	091b      	lsrs	r3, r3, #4
 800a6c4:	f003 0201 	and.w	r2, r3, #1
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d017      	beq.n	800a716 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f6:	43db      	mvns	r3, r3
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689a      	ldr	r2, [r3, #8]
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	fa02 f303 	lsl.w	r3, r2, r3
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d123      	bne.n	800a76a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	08da      	lsrs	r2, r3, #3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3208      	adds	r2, #8
 800a72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	f003 0307 	and.w	r3, r3, #7
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	220f      	movs	r2, #15
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	43db      	mvns	r3, r3
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	4013      	ands	r3, r2
 800a744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	691a      	ldr	r2, [r3, #16]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	fa02 f303 	lsl.w	r3, r2, r3
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	4313      	orrs	r3, r2
 800a75a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	08da      	lsrs	r2, r3, #3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3208      	adds	r2, #8
 800a764:	69b9      	ldr	r1, [r7, #24]
 800a766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	2203      	movs	r2, #3
 800a776:	fa02 f303 	lsl.w	r3, r2, r3
 800a77a:	43db      	mvns	r3, r3
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	4013      	ands	r3, r2
 800a780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f003 0203 	and.w	r2, r3, #3
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	005b      	lsls	r3, r3, #1
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	4313      	orrs	r3, r2
 800a796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	69ba      	ldr	r2, [r7, #24]
 800a79c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 80e0 	beq.w	800a96c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7ac:	4b2f      	ldr	r3, [pc, #188]	; (800a86c <HAL_GPIO_Init+0x238>)
 800a7ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7b2:	4a2e      	ldr	r2, [pc, #184]	; (800a86c <HAL_GPIO_Init+0x238>)
 800a7b4:	f043 0302 	orr.w	r3, r3, #2
 800a7b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a7bc:	4b2b      	ldr	r3, [pc, #172]	; (800a86c <HAL_GPIO_Init+0x238>)
 800a7be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7c2:	f003 0302 	and.w	r3, r3, #2
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a7ca:	4a29      	ldr	r2, [pc, #164]	; (800a870 <HAL_GPIO_Init+0x23c>)
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	089b      	lsrs	r3, r3, #2
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	220f      	movs	r2, #15
 800a7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e6:	43db      	mvns	r3, r3
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a20      	ldr	r2, [pc, #128]	; (800a874 <HAL_GPIO_Init+0x240>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d052      	beq.n	800a89c <HAL_GPIO_Init+0x268>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a1f      	ldr	r2, [pc, #124]	; (800a878 <HAL_GPIO_Init+0x244>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d031      	beq.n	800a862 <HAL_GPIO_Init+0x22e>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a1e      	ldr	r2, [pc, #120]	; (800a87c <HAL_GPIO_Init+0x248>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d02b      	beq.n	800a85e <HAL_GPIO_Init+0x22a>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a1d      	ldr	r2, [pc, #116]	; (800a880 <HAL_GPIO_Init+0x24c>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d025      	beq.n	800a85a <HAL_GPIO_Init+0x226>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a1c      	ldr	r2, [pc, #112]	; (800a884 <HAL_GPIO_Init+0x250>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d01f      	beq.n	800a856 <HAL_GPIO_Init+0x222>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a1b      	ldr	r2, [pc, #108]	; (800a888 <HAL_GPIO_Init+0x254>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d019      	beq.n	800a852 <HAL_GPIO_Init+0x21e>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a1a      	ldr	r2, [pc, #104]	; (800a88c <HAL_GPIO_Init+0x258>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d013      	beq.n	800a84e <HAL_GPIO_Init+0x21a>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a19      	ldr	r2, [pc, #100]	; (800a890 <HAL_GPIO_Init+0x25c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00d      	beq.n	800a84a <HAL_GPIO_Init+0x216>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a18      	ldr	r2, [pc, #96]	; (800a894 <HAL_GPIO_Init+0x260>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d007      	beq.n	800a846 <HAL_GPIO_Init+0x212>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a17      	ldr	r2, [pc, #92]	; (800a898 <HAL_GPIO_Init+0x264>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d101      	bne.n	800a842 <HAL_GPIO_Init+0x20e>
 800a83e:	2309      	movs	r3, #9
 800a840:	e02d      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a842:	230a      	movs	r3, #10
 800a844:	e02b      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a846:	2308      	movs	r3, #8
 800a848:	e029      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a84a:	2307      	movs	r3, #7
 800a84c:	e027      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a84e:	2306      	movs	r3, #6
 800a850:	e025      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a852:	2305      	movs	r3, #5
 800a854:	e023      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a856:	2304      	movs	r3, #4
 800a858:	e021      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a85a:	2303      	movs	r3, #3
 800a85c:	e01f      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a85e:	2302      	movs	r3, #2
 800a860:	e01d      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a862:	2301      	movs	r3, #1
 800a864:	e01b      	b.n	800a89e <HAL_GPIO_Init+0x26a>
 800a866:	bf00      	nop
 800a868:	58000080 	.word	0x58000080
 800a86c:	58024400 	.word	0x58024400
 800a870:	58000400 	.word	0x58000400
 800a874:	58020000 	.word	0x58020000
 800a878:	58020400 	.word	0x58020400
 800a87c:	58020800 	.word	0x58020800
 800a880:	58020c00 	.word	0x58020c00
 800a884:	58021000 	.word	0x58021000
 800a888:	58021400 	.word	0x58021400
 800a88c:	58021800 	.word	0x58021800
 800a890:	58021c00 	.word	0x58021c00
 800a894:	58022000 	.word	0x58022000
 800a898:	58022400 	.word	0x58022400
 800a89c:	2300      	movs	r3, #0
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	f002 0203 	and.w	r2, r2, #3
 800a8a4:	0092      	lsls	r2, r2, #2
 800a8a6:	4093      	lsls	r3, r2
 800a8a8:	69ba      	ldr	r2, [r7, #24]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a8ae:	4938      	ldr	r1, [pc, #224]	; (800a990 <HAL_GPIO_Init+0x35c>)
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	089b      	lsrs	r3, r3, #2
 800a8b4:	3302      	adds	r3, #2
 800a8b6:	69ba      	ldr	r2, [r7, #24]
 800a8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a8bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	43db      	mvns	r3, r3
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a8e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a8ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	43db      	mvns	r3, r3
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a908:	69ba      	ldr	r2, [r7, #24]
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	43db      	mvns	r3, r3
 800a922:	69ba      	ldr	r2, [r7, #24]
 800a924:	4013      	ands	r3, r2
 800a926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d003      	beq.n	800a93c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a934:	69ba      	ldr	r2, [r7, #24]
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	4313      	orrs	r3, r2
 800a93a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	43db      	mvns	r3, r3
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	4013      	ands	r3, r2
 800a950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a95e:	69ba      	ldr	r2, [r7, #24]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	4313      	orrs	r3, r2
 800a964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	3301      	adds	r3, #1
 800a970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	fa22 f303 	lsr.w	r3, r2, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f47f ae63 	bne.w	800a648 <HAL_GPIO_Init+0x14>
  }
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	3724      	adds	r7, #36	; 0x24
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	58000400 	.word	0x58000400

0800a994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691a      	ldr	r2, [r3, #16]
 800a9a4:	887b      	ldrh	r3, [r7, #2]
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	73fb      	strb	r3, [r7, #15]
 800a9b0:	e001      	b.n	800a9b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	807b      	strh	r3, [r7, #2]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a9d4:	787b      	ldrb	r3, [r7, #1]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a9da:	887a      	ldrh	r2, [r7, #2]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a9e0:	e003      	b.n	800a9ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a9e2:	887b      	ldrh	r3, [r7, #2]
 800a9e4:	041a      	lsls	r2, r3, #16
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	619a      	str	r2, [r3, #24]
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b085      	sub	sp, #20
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aa08:	887a      	ldrh	r2, [r7, #2]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	041a      	lsls	r2, r3, #16
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	43d9      	mvns	r1, r3
 800aa14:	887b      	ldrh	r3, [r7, #2]
 800aa16:	400b      	ands	r3, r1
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	619a      	str	r2, [r3, #24]
}
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800aa34:	4a08      	ldr	r2, [pc, #32]	; (800aa58 <HAL_HSEM_FastTake+0x2c>)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3320      	adds	r3, #32
 800aa3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa3e:	4a07      	ldr	r2, [pc, #28]	; (800aa5c <HAL_HSEM_FastTake+0x30>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d101      	bne.n	800aa48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	e000      	b.n	800aa4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	58026400 	.word	0x58026400
 800aa5c:	80000300 	.word	0x80000300

0800aa60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800aa6a:	4906      	ldr	r1, [pc, #24]	; (800aa84 <HAL_HSEM_Release+0x24>)
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	58026400 	.word	0x58026400

0800aa88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800aa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa8a:	b08f      	sub	sp, #60	; 0x3c
 800aa8c:	af0a      	add	r7, sp, #40	; 0x28
 800aa8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e116      	b.n	800acc8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d106      	bne.n	800aaba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7fc fc81 	bl	80073bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2203      	movs	r2, #3
 800aabe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4618      	mov	r0, r3
 800aada:	f005 f977 	bl	800fdcc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	687e      	ldr	r6, [r7, #4]
 800aae6:	466d      	mov	r5, sp
 800aae8:	f106 0410 	add.w	r4, r6, #16
 800aaec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aaf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aaf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aaf8:	e885 0003 	stmia.w	r5, {r0, r1}
 800aafc:	1d33      	adds	r3, r6, #4
 800aafe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab00:	6838      	ldr	r0, [r7, #0]
 800ab02:	f005 f8f5 	bl	800fcf0 <USB_CoreInit>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d005      	beq.n	800ab18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e0d7      	b.n	800acc8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f005 f965 	bl	800fdee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab24:	2300      	movs	r3, #0
 800ab26:	73fb      	strb	r3, [r7, #15]
 800ab28:	e04a      	b.n	800abc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ab2a:	7bfa      	ldrb	r2, [r7, #15]
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	440b      	add	r3, r1
 800ab38:	333d      	adds	r3, #61	; 0x3d
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ab3e:	7bfa      	ldrb	r2, [r7, #15]
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	4613      	mov	r3, r2
 800ab44:	00db      	lsls	r3, r3, #3
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	440b      	add	r3, r1
 800ab4c:	333c      	adds	r3, #60	; 0x3c
 800ab4e:	7bfa      	ldrb	r2, [r7, #15]
 800ab50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ab52:	7bfa      	ldrb	r2, [r7, #15]
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	b298      	uxth	r0, r3
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3344      	adds	r3, #68	; 0x44
 800ab66:	4602      	mov	r2, r0
 800ab68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ab6a:	7bfa      	ldrb	r2, [r7, #15]
 800ab6c:	6879      	ldr	r1, [r7, #4]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	00db      	lsls	r3, r3, #3
 800ab72:	4413      	add	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	440b      	add	r3, r1
 800ab78:	3340      	adds	r3, #64	; 0x40
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ab7e:	7bfa      	ldrb	r2, [r7, #15]
 800ab80:	6879      	ldr	r1, [r7, #4]
 800ab82:	4613      	mov	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	440b      	add	r3, r1
 800ab8c:	3348      	adds	r3, #72	; 0x48
 800ab8e:	2200      	movs	r2, #0
 800ab90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ab92:	7bfa      	ldrb	r2, [r7, #15]
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	4613      	mov	r3, r2
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	440b      	add	r3, r1
 800aba0:	334c      	adds	r3, #76	; 0x4c
 800aba2:	2200      	movs	r2, #0
 800aba4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aba6:	7bfa      	ldrb	r2, [r7, #15]
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	4613      	mov	r3, r2
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	440b      	add	r3, r1
 800abb4:	3354      	adds	r3, #84	; 0x54
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	3301      	adds	r3, #1
 800abbe:	73fb      	strb	r3, [r7, #15]
 800abc0:	7bfa      	ldrb	r2, [r7, #15]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d3af      	bcc.n	800ab2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]
 800abce:	e044      	b.n	800ac5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800abd0:	7bfa      	ldrb	r2, [r7, #15]
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	4613      	mov	r3, r2
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	440b      	add	r3, r1
 800abde:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800abe2:	2200      	movs	r2, #0
 800abe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800abe6:	7bfa      	ldrb	r2, [r7, #15]
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	4613      	mov	r3, r2
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800abf8:	7bfa      	ldrb	r2, [r7, #15]
 800abfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800abfc:	7bfa      	ldrb	r2, [r7, #15]
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	4613      	mov	r3, r2
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	440b      	add	r3, r1
 800ac0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ac0e:	2200      	movs	r2, #0
 800ac10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ac12:	7bfa      	ldrb	r2, [r7, #15]
 800ac14:	6879      	ldr	r1, [r7, #4]
 800ac16:	4613      	mov	r3, r2
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	4413      	add	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	440b      	add	r3, r1
 800ac20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ac24:	2200      	movs	r2, #0
 800ac26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ac28:	7bfa      	ldrb	r2, [r7, #15]
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	440b      	add	r3, r1
 800ac36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ac3e:	7bfa      	ldrb	r2, [r7, #15]
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	3301      	adds	r3, #1
 800ac58:	73fb      	strb	r3, [r7, #15]
 800ac5a:	7bfa      	ldrb	r2, [r7, #15]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d3b5      	bcc.n	800abd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	603b      	str	r3, [r7, #0]
 800ac6a:	687e      	ldr	r6, [r7, #4]
 800ac6c:	466d      	mov	r5, sp
 800ac6e:	f106 0410 	add.w	r4, r6, #16
 800ac72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ac7e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ac82:	1d33      	adds	r3, r6, #4
 800ac84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac86:	6838      	ldr	r0, [r7, #0]
 800ac88:	f005 f8fe 	bl	800fe88 <USB_DevInit>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d005      	beq.n	800ac9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2202      	movs	r2, #2
 800ac96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e014      	b.n	800acc8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d102      	bne.n	800acbc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f80a 	bl	800acd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f005 fabc 	bl	801023e <USB_DevDisconnect>

  return HAL_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acfe:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <HAL_PCDEx_ActivateLPM+0x44>)
 800ad00:	4313      	orrs	r3, r2
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	10000003 	.word	0x10000003

0800ad18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800ad20:	4b29      	ldr	r3, [pc, #164]	; (800adc8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	2b06      	cmp	r3, #6
 800ad2a:	d00a      	beq.n	800ad42 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ad2c:	4b26      	ldr	r3, [pc, #152]	; (800adc8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d001      	beq.n	800ad3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e040      	b.n	800adc0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e03e      	b.n	800adc0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ad42:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800ad4a:	491f      	ldr	r1, [pc, #124]	; (800adc8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ad52:	f7fc fcc5 	bl	80076e0 <HAL_GetTick>
 800ad56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad58:	e009      	b.n	800ad6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ad5a:	f7fc fcc1 	bl	80076e0 <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad68:	d901      	bls.n	800ad6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e028      	b.n	800adc0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad6e:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <HAL_PWREx_ConfigSupply+0xb0>)
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad7a:	d1ee      	bne.n	800ad5a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b1e      	cmp	r3, #30
 800ad80:	d008      	beq.n	800ad94 <HAL_PWREx_ConfigSupply+0x7c>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b2e      	cmp	r3, #46	; 0x2e
 800ad86:	d005      	beq.n	800ad94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b1d      	cmp	r3, #29
 800ad8c:	d002      	beq.n	800ad94 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b2d      	cmp	r3, #45	; 0x2d
 800ad92:	d114      	bne.n	800adbe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ad94:	f7fc fca4 	bl	80076e0 <HAL_GetTick>
 800ad98:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ad9a:	e009      	b.n	800adb0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ad9c:	f7fc fca0 	bl	80076e0 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adaa:	d901      	bls.n	800adb0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e007      	b.n	800adc0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800adb0:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <HAL_PWREx_ConfigSupply+0xb0>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adbc:	d1ee      	bne.n	800ad9c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	58024800 	.word	0x58024800

0800adcc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	4a04      	ldr	r2, [pc, #16]	; (800ade8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800add6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adda:	60d3      	str	r3, [r2, #12]
}
 800addc:	bf00      	nop
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	58024800 	.word	0x58024800

0800adec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b08c      	sub	sp, #48	; 0x30
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d102      	bne.n	800ae00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	f000 bc1d 	b.w	800b63a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8087 	beq.w	800af1c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae0e:	4b99      	ldr	r3, [pc, #612]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae16:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae18:	4b96      	ldr	r3, [pc, #600]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	2b10      	cmp	r3, #16
 800ae22:	d007      	beq.n	800ae34 <HAL_RCC_OscConfig+0x48>
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	2b18      	cmp	r3, #24
 800ae28:	d110      	bne.n	800ae4c <HAL_RCC_OscConfig+0x60>
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d10b      	bne.n	800ae4c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae34:	4b8f      	ldr	r3, [pc, #572]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d06c      	beq.n	800af1a <HAL_RCC_OscConfig+0x12e>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d168      	bne.n	800af1a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e3f6      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae54:	d106      	bne.n	800ae64 <HAL_RCC_OscConfig+0x78>
 800ae56:	4b87      	ldr	r3, [pc, #540]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a86      	ldr	r2, [pc, #536]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	e02e      	b.n	800aec2 <HAL_RCC_OscConfig+0xd6>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10c      	bne.n	800ae86 <HAL_RCC_OscConfig+0x9a>
 800ae6c:	4b81      	ldr	r3, [pc, #516]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a80      	ldr	r2, [pc, #512]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	4b7e      	ldr	r3, [pc, #504]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a7d      	ldr	r2, [pc, #500]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae82:	6013      	str	r3, [r2, #0]
 800ae84:	e01d      	b.n	800aec2 <HAL_RCC_OscConfig+0xd6>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae8e:	d10c      	bne.n	800aeaa <HAL_RCC_OscConfig+0xbe>
 800ae90:	4b78      	ldr	r3, [pc, #480]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a77      	ldr	r2, [pc, #476]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	4b75      	ldr	r3, [pc, #468]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a74      	ldr	r2, [pc, #464]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800aea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	e00b      	b.n	800aec2 <HAL_RCC_OscConfig+0xd6>
 800aeaa:	4b72      	ldr	r3, [pc, #456]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a71      	ldr	r2, [pc, #452]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800aeb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	4b6f      	ldr	r3, [pc, #444]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a6e      	ldr	r2, [pc, #440]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800aebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aec0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d013      	beq.n	800aef2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeca:	f7fc fc09 	bl	80076e0 <HAL_GetTick>
 800aece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aed0:	e008      	b.n	800aee4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aed2:	f7fc fc05 	bl	80076e0 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	2b64      	cmp	r3, #100	; 0x64
 800aede:	d901      	bls.n	800aee4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e3aa      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aee4:	4b63      	ldr	r3, [pc, #396]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0f0      	beq.n	800aed2 <HAL_RCC_OscConfig+0xe6>
 800aef0:	e014      	b.n	800af1c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aef2:	f7fc fbf5 	bl	80076e0 <HAL_GetTick>
 800aef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aef8:	e008      	b.n	800af0c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aefa:	f7fc fbf1 	bl	80076e0 <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	2b64      	cmp	r3, #100	; 0x64
 800af06:	d901      	bls.n	800af0c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e396      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800af0c:	4b59      	ldr	r3, [pc, #356]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1f0      	bne.n	800aefa <HAL_RCC_OscConfig+0x10e>
 800af18:	e000      	b.n	800af1c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 80cb 	beq.w	800b0c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af2a:	4b52      	ldr	r3, [pc, #328]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af32:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af34:	4b4f      	ldr	r3, [pc, #316]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800af36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af38:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <HAL_RCC_OscConfig+0x164>
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	2b18      	cmp	r3, #24
 800af44:	d156      	bne.n	800aff4 <HAL_RCC_OscConfig+0x208>
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	f003 0303 	and.w	r3, r3, #3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d151      	bne.n	800aff4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af50:	4b48      	ldr	r3, [pc, #288]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <HAL_RCC_OscConfig+0x17c>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	e368      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800af68:	4b42      	ldr	r3, [pc, #264]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f023 0219 	bic.w	r2, r3, #25
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	493f      	ldr	r1, [pc, #252]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800af76:	4313      	orrs	r3, r2
 800af78:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af7a:	f7fc fbb1 	bl	80076e0 <HAL_GetTick>
 800af7e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af80:	e008      	b.n	800af94 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af82:	f7fc fbad 	bl	80076e0 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d901      	bls.n	800af94 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e352      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af94:	4b37      	ldr	r3, [pc, #220]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0f0      	beq.n	800af82 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afa0:	f7fc fbce 	bl	8007740 <HAL_GetREVID>
 800afa4:	4603      	mov	r3, r0
 800afa6:	f241 0203 	movw	r2, #4099	; 0x1003
 800afaa:	4293      	cmp	r3, r2
 800afac:	d817      	bhi.n	800afde <HAL_RCC_OscConfig+0x1f2>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2b40      	cmp	r3, #64	; 0x40
 800afb4:	d108      	bne.n	800afc8 <HAL_RCC_OscConfig+0x1dc>
 800afb6:	4b2f      	ldr	r3, [pc, #188]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800afbe:	4a2d      	ldr	r2, [pc, #180]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800afc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afc4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afc6:	e07b      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afc8:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	031b      	lsls	r3, r3, #12
 800afd6:	4927      	ldr	r1, [pc, #156]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800afd8:	4313      	orrs	r3, r2
 800afda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afdc:	e070      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afde:	4b25      	ldr	r3, [pc, #148]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	061b      	lsls	r3, r3, #24
 800afec:	4921      	ldr	r1, [pc, #132]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aff2:	e065      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d048      	beq.n	800b08e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800affc:	4b1d      	ldr	r3, [pc, #116]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f023 0219 	bic.w	r2, r3, #25
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	491a      	ldr	r1, [pc, #104]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800b00a:	4313      	orrs	r3, r2
 800b00c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b00e:	f7fc fb67 	bl	80076e0 <HAL_GetTick>
 800b012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b014:	e008      	b.n	800b028 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b016:	f7fc fb63 	bl	80076e0 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d901      	bls.n	800b028 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e308      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b028:	4b12      	ldr	r3, [pc, #72]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d0f0      	beq.n	800b016 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b034:	f7fc fb84 	bl	8007740 <HAL_GetREVID>
 800b038:	4603      	mov	r3, r0
 800b03a:	f241 0203 	movw	r2, #4099	; 0x1003
 800b03e:	4293      	cmp	r3, r2
 800b040:	d81a      	bhi.n	800b078 <HAL_RCC_OscConfig+0x28c>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	2b40      	cmp	r3, #64	; 0x40
 800b048:	d108      	bne.n	800b05c <HAL_RCC_OscConfig+0x270>
 800b04a:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b052:	4a08      	ldr	r2, [pc, #32]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800b054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b058:	6053      	str	r3, [r2, #4]
 800b05a:	e031      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2d4>
 800b05c:	4b05      	ldr	r3, [pc, #20]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	031b      	lsls	r3, r3, #12
 800b06a:	4902      	ldr	r1, [pc, #8]	; (800b074 <HAL_RCC_OscConfig+0x288>)
 800b06c:	4313      	orrs	r3, r2
 800b06e:	604b      	str	r3, [r1, #4]
 800b070:	e026      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2d4>
 800b072:	bf00      	nop
 800b074:	58024400 	.word	0x58024400
 800b078:	4b9a      	ldr	r3, [pc, #616]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	061b      	lsls	r3, r3, #24
 800b086:	4997      	ldr	r1, [pc, #604]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	604b      	str	r3, [r1, #4]
 800b08c:	e018      	b.n	800b0c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b08e:	4b95      	ldr	r3, [pc, #596]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a94      	ldr	r2, [pc, #592]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b094:	f023 0301 	bic.w	r3, r3, #1
 800b098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b09a:	f7fc fb21 	bl	80076e0 <HAL_GetTick>
 800b09e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b0a0:	e008      	b.n	800b0b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0a2:	f7fc fb1d 	bl	80076e0 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e2c2      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b0b4:	4b8b      	ldr	r3, [pc, #556]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f0      	bne.n	800b0a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0310 	and.w	r3, r3, #16
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 80a9 	beq.w	800b220 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0ce:	4b85      	ldr	r3, [pc, #532]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b0d8:	4b82      	ldr	r3, [pc, #520]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	2b08      	cmp	r3, #8
 800b0e2:	d007      	beq.n	800b0f4 <HAL_RCC_OscConfig+0x308>
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	2b18      	cmp	r3, #24
 800b0e8:	d13a      	bne.n	800b160 <HAL_RCC_OscConfig+0x374>
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f003 0303 	and.w	r3, r3, #3
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d135      	bne.n	800b160 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b0f4:	4b7b      	ldr	r3, [pc, #492]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <HAL_RCC_OscConfig+0x320>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	2b80      	cmp	r3, #128	; 0x80
 800b106:	d001      	beq.n	800b10c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e296      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b10c:	f7fc fb18 	bl	8007740 <HAL_GetREVID>
 800b110:	4603      	mov	r3, r0
 800b112:	f241 0203 	movw	r2, #4099	; 0x1003
 800b116:	4293      	cmp	r3, r2
 800b118:	d817      	bhi.n	800b14a <HAL_RCC_OscConfig+0x35e>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d108      	bne.n	800b134 <HAL_RCC_OscConfig+0x348>
 800b122:	4b70      	ldr	r3, [pc, #448]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b12a:	4a6e      	ldr	r2, [pc, #440]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b12c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b130:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b132:	e075      	b.n	800b220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b134:	4b6b      	ldr	r3, [pc, #428]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a1b      	ldr	r3, [r3, #32]
 800b140:	069b      	lsls	r3, r3, #26
 800b142:	4968      	ldr	r1, [pc, #416]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b144:	4313      	orrs	r3, r2
 800b146:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b148:	e06a      	b.n	800b220 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b14a:	4b66      	ldr	r3, [pc, #408]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	061b      	lsls	r3, r3, #24
 800b158:	4962      	ldr	r1, [pc, #392]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b15e:	e05f      	b.n	800b220 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	69db      	ldr	r3, [r3, #28]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d042      	beq.n	800b1ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b168:	4b5e      	ldr	r3, [pc, #376]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a5d      	ldr	r2, [pc, #372]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b174:	f7fc fab4 	bl	80076e0 <HAL_GetTick>
 800b178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b17a:	e008      	b.n	800b18e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b17c:	f7fc fab0 	bl	80076e0 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b02      	cmp	r3, #2
 800b188:	d901      	bls.n	800b18e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e255      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b18e:	4b55      	ldr	r3, [pc, #340]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0f0      	beq.n	800b17c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b19a:	f7fc fad1 	bl	8007740 <HAL_GetREVID>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f241 0203 	movw	r2, #4099	; 0x1003
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d817      	bhi.n	800b1d8 <HAL_RCC_OscConfig+0x3ec>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a1b      	ldr	r3, [r3, #32]
 800b1ac:	2b20      	cmp	r3, #32
 800b1ae:	d108      	bne.n	800b1c2 <HAL_RCC_OscConfig+0x3d6>
 800b1b0:	4b4c      	ldr	r3, [pc, #304]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b1b8:	4a4a      	ldr	r2, [pc, #296]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1be:	6053      	str	r3, [r2, #4]
 800b1c0:	e02e      	b.n	800b220 <HAL_RCC_OscConfig+0x434>
 800b1c2:	4b48      	ldr	r3, [pc, #288]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	069b      	lsls	r3, r3, #26
 800b1d0:	4944      	ldr	r1, [pc, #272]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	604b      	str	r3, [r1, #4]
 800b1d6:	e023      	b.n	800b220 <HAL_RCC_OscConfig+0x434>
 800b1d8:	4b42      	ldr	r3, [pc, #264]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	061b      	lsls	r3, r3, #24
 800b1e6:	493f      	ldr	r1, [pc, #252]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60cb      	str	r3, [r1, #12]
 800b1ec:	e018      	b.n	800b220 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b1ee:	4b3d      	ldr	r3, [pc, #244]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a3c      	ldr	r2, [pc, #240]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b1f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1fa:	f7fc fa71 	bl	80076e0 <HAL_GetTick>
 800b1fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b200:	e008      	b.n	800b214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b202:	f7fc fa6d 	bl	80076e0 <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d901      	bls.n	800b214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b210:	2303      	movs	r3, #3
 800b212:	e212      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b214:	4b33      	ldr	r3, [pc, #204]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1f0      	bne.n	800b202 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f003 0308 	and.w	r3, r3, #8
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d036      	beq.n	800b29a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d019      	beq.n	800b268 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b234:	4b2b      	ldr	r3, [pc, #172]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b238:	4a2a      	ldr	r2, [pc, #168]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b23a:	f043 0301 	orr.w	r3, r3, #1
 800b23e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b240:	f7fc fa4e 	bl	80076e0 <HAL_GetTick>
 800b244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b248:	f7fc fa4a 	bl	80076e0 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b02      	cmp	r3, #2
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e1ef      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b25a:	4b22      	ldr	r3, [pc, #136]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0f0      	beq.n	800b248 <HAL_RCC_OscConfig+0x45c>
 800b266:	e018      	b.n	800b29a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b268:	4b1e      	ldr	r3, [pc, #120]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b26e:	f023 0301 	bic.w	r3, r3, #1
 800b272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b274:	f7fc fa34 	bl	80076e0 <HAL_GetTick>
 800b278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b27a:	e008      	b.n	800b28e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b27c:	f7fc fa30 	bl	80076e0 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e1d5      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b28e:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1f0      	bne.n	800b27c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d039      	beq.n	800b31a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d01c      	beq.n	800b2e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b2ae:	4b0d      	ldr	r3, [pc, #52]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a0c      	ldr	r2, [pc, #48]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b2b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b2ba:	f7fc fa11 	bl	80076e0 <HAL_GetTick>
 800b2be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b2c0:	e008      	b.n	800b2d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b2c2:	f7fc fa0d 	bl	80076e0 <HAL_GetTick>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d901      	bls.n	800b2d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e1b2      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b2d4:	4b03      	ldr	r3, [pc, #12]	; (800b2e4 <HAL_RCC_OscConfig+0x4f8>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d0f0      	beq.n	800b2c2 <HAL_RCC_OscConfig+0x4d6>
 800b2e0:	e01b      	b.n	800b31a <HAL_RCC_OscConfig+0x52e>
 800b2e2:	bf00      	nop
 800b2e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2e8:	4b9b      	ldr	r3, [pc, #620]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a9a      	ldr	r2, [pc, #616]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b2ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b2f4:	f7fc f9f4 	bl	80076e0 <HAL_GetTick>
 800b2f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2fa:	e008      	b.n	800b30e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b2fc:	f7fc f9f0 	bl	80076e0 <HAL_GetTick>
 800b300:	4602      	mov	r2, r0
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	2b02      	cmp	r3, #2
 800b308:	d901      	bls.n	800b30e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b30a:	2303      	movs	r3, #3
 800b30c:	e195      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b30e:	4b92      	ldr	r3, [pc, #584]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1f0      	bne.n	800b2fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0304 	and.w	r3, r3, #4
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 8081 	beq.w	800b42a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b328:	4b8c      	ldr	r3, [pc, #560]	; (800b55c <HAL_RCC_OscConfig+0x770>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a8b      	ldr	r2, [pc, #556]	; (800b55c <HAL_RCC_OscConfig+0x770>)
 800b32e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b332:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b334:	f7fc f9d4 	bl	80076e0 <HAL_GetTick>
 800b338:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b33a:	e008      	b.n	800b34e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b33c:	f7fc f9d0 	bl	80076e0 <HAL_GetTick>
 800b340:	4602      	mov	r2, r0
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	2b64      	cmp	r3, #100	; 0x64
 800b348:	d901      	bls.n	800b34e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e175      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b34e:	4b83      	ldr	r3, [pc, #524]	; (800b55c <HAL_RCC_OscConfig+0x770>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0f0      	beq.n	800b33c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d106      	bne.n	800b370 <HAL_RCC_OscConfig+0x584>
 800b362:	4b7d      	ldr	r3, [pc, #500]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b366:	4a7c      	ldr	r2, [pc, #496]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b368:	f043 0301 	orr.w	r3, r3, #1
 800b36c:	6713      	str	r3, [r2, #112]	; 0x70
 800b36e:	e02d      	b.n	800b3cc <HAL_RCC_OscConfig+0x5e0>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10c      	bne.n	800b392 <HAL_RCC_OscConfig+0x5a6>
 800b378:	4b77      	ldr	r3, [pc, #476]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b37c:	4a76      	ldr	r2, [pc, #472]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b37e:	f023 0301 	bic.w	r3, r3, #1
 800b382:	6713      	str	r3, [r2, #112]	; 0x70
 800b384:	4b74      	ldr	r3, [pc, #464]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b388:	4a73      	ldr	r2, [pc, #460]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b38a:	f023 0304 	bic.w	r3, r3, #4
 800b38e:	6713      	str	r3, [r2, #112]	; 0x70
 800b390:	e01c      	b.n	800b3cc <HAL_RCC_OscConfig+0x5e0>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	2b05      	cmp	r3, #5
 800b398:	d10c      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x5c8>
 800b39a:	4b6f      	ldr	r3, [pc, #444]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39e:	4a6e      	ldr	r2, [pc, #440]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3a0:	f043 0304 	orr.w	r3, r3, #4
 800b3a4:	6713      	str	r3, [r2, #112]	; 0x70
 800b3a6:	4b6c      	ldr	r3, [pc, #432]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3aa:	4a6b      	ldr	r2, [pc, #428]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3ac:	f043 0301 	orr.w	r3, r3, #1
 800b3b0:	6713      	str	r3, [r2, #112]	; 0x70
 800b3b2:	e00b      	b.n	800b3cc <HAL_RCC_OscConfig+0x5e0>
 800b3b4:	4b68      	ldr	r3, [pc, #416]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b8:	4a67      	ldr	r2, [pc, #412]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3ba:	f023 0301 	bic.w	r3, r3, #1
 800b3be:	6713      	str	r3, [r2, #112]	; 0x70
 800b3c0:	4b65      	ldr	r3, [pc, #404]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3c4:	4a64      	ldr	r2, [pc, #400]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3c6:	f023 0304 	bic.w	r3, r3, #4
 800b3ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d015      	beq.n	800b400 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3d4:	f7fc f984 	bl	80076e0 <HAL_GetTick>
 800b3d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3da:	e00a      	b.n	800b3f2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3dc:	f7fc f980 	bl	80076e0 <HAL_GetTick>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d901      	bls.n	800b3f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e123      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3f2:	4b59      	ldr	r3, [pc, #356]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f6:	f003 0302 	and.w	r3, r3, #2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0ee      	beq.n	800b3dc <HAL_RCC_OscConfig+0x5f0>
 800b3fe:	e014      	b.n	800b42a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b400:	f7fc f96e 	bl	80076e0 <HAL_GetTick>
 800b404:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b406:	e00a      	b.n	800b41e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b408:	f7fc f96a 	bl	80076e0 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	f241 3288 	movw	r2, #5000	; 0x1388
 800b416:	4293      	cmp	r3, r2
 800b418:	d901      	bls.n	800b41e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e10d      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b41e:	4b4e      	ldr	r3, [pc, #312]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1ee      	bne.n	800b408 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 8102 	beq.w	800b638 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b434:	4b48      	ldr	r3, [pc, #288]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b43c:	2b18      	cmp	r3, #24
 800b43e:	f000 80bd 	beq.w	800b5bc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	2b02      	cmp	r3, #2
 800b448:	f040 809e 	bne.w	800b588 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b44c:	4b42      	ldr	r3, [pc, #264]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a41      	ldr	r2, [pc, #260]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b458:	f7fc f942 	bl	80076e0 <HAL_GetTick>
 800b45c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b45e:	e008      	b.n	800b472 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b460:	f7fc f93e 	bl	80076e0 <HAL_GetTick>
 800b464:	4602      	mov	r2, r0
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d901      	bls.n	800b472 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e0e3      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b472:	4b39      	ldr	r3, [pc, #228]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1f0      	bne.n	800b460 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b47e:	4b36      	ldr	r3, [pc, #216]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b482:	4b37      	ldr	r3, [pc, #220]	; (800b560 <HAL_RCC_OscConfig+0x774>)
 800b484:	4013      	ands	r3, r2
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b48e:	0112      	lsls	r2, r2, #4
 800b490:	430a      	orrs	r2, r1
 800b492:	4931      	ldr	r1, [pc, #196]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b494:	4313      	orrs	r3, r2
 800b496:	628b      	str	r3, [r1, #40]	; 0x28
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49c:	3b01      	subs	r3, #1
 800b49e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	025b      	lsls	r3, r3, #9
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	041b      	lsls	r3, r3, #16
 800b4b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	061b      	lsls	r3, r3, #24
 800b4c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4c8:	4923      	ldr	r1, [pc, #140]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b4ce:	4b22      	ldr	r3, [pc, #136]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d2:	4a21      	ldr	r2, [pc, #132]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b4d4:	f023 0301 	bic.w	r3, r3, #1
 800b4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b4da:	4b1f      	ldr	r3, [pc, #124]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4de:	4b21      	ldr	r3, [pc, #132]	; (800b564 <HAL_RCC_OscConfig+0x778>)
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b4e6:	00d2      	lsls	r2, r2, #3
 800b4e8:	491b      	ldr	r1, [pc, #108]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f2:	f023 020c 	bic.w	r2, r3, #12
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fa:	4917      	ldr	r1, [pc, #92]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b500:	4b15      	ldr	r3, [pc, #84]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	f023 0202 	bic.w	r2, r3, #2
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b50c:	4912      	ldr	r1, [pc, #72]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b50e:	4313      	orrs	r3, r2
 800b510:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b512:	4b11      	ldr	r3, [pc, #68]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b516:	4a10      	ldr	r2, [pc, #64]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b51c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b51e:	4b0e      	ldr	r3, [pc, #56]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b522:	4a0d      	ldr	r2, [pc, #52]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b52a:	4b0b      	ldr	r3, [pc, #44]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52e:	4a0a      	ldr	r2, [pc, #40]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b534:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b536:	4b08      	ldr	r3, [pc, #32]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53a:	4a07      	ldr	r2, [pc, #28]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b53c:	f043 0301 	orr.w	r3, r3, #1
 800b540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b542:	4b05      	ldr	r3, [pc, #20]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a04      	ldr	r2, [pc, #16]	; (800b558 <HAL_RCC_OscConfig+0x76c>)
 800b548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b54c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b54e:	f7fc f8c7 	bl	80076e0 <HAL_GetTick>
 800b552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b554:	e011      	b.n	800b57a <HAL_RCC_OscConfig+0x78e>
 800b556:	bf00      	nop
 800b558:	58024400 	.word	0x58024400
 800b55c:	58024800 	.word	0x58024800
 800b560:	fffffc0c 	.word	0xfffffc0c
 800b564:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b568:	f7fc f8ba 	bl	80076e0 <HAL_GetTick>
 800b56c:	4602      	mov	r2, r0
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b02      	cmp	r3, #2
 800b574:	d901      	bls.n	800b57a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e05f      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b57a:	4b32      	ldr	r3, [pc, #200]	; (800b644 <HAL_RCC_OscConfig+0x858>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d0f0      	beq.n	800b568 <HAL_RCC_OscConfig+0x77c>
 800b586:	e057      	b.n	800b638 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b588:	4b2e      	ldr	r3, [pc, #184]	; (800b644 <HAL_RCC_OscConfig+0x858>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a2d      	ldr	r2, [pc, #180]	; (800b644 <HAL_RCC_OscConfig+0x858>)
 800b58e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b594:	f7fc f8a4 	bl	80076e0 <HAL_GetTick>
 800b598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b59c:	f7fc f8a0 	bl	80076e0 <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e045      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b5ae:	4b25      	ldr	r3, [pc, #148]	; (800b644 <HAL_RCC_OscConfig+0x858>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1f0      	bne.n	800b59c <HAL_RCC_OscConfig+0x7b0>
 800b5ba:	e03d      	b.n	800b638 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b5bc:	4b21      	ldr	r3, [pc, #132]	; (800b644 <HAL_RCC_OscConfig+0x858>)
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b5c2:	4b20      	ldr	r3, [pc, #128]	; (800b644 <HAL_RCC_OscConfig+0x858>)
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d031      	beq.n	800b634 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f003 0203 	and.w	r2, r3, #3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d12a      	bne.n	800b634 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	091b      	lsrs	r3, r3, #4
 800b5e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d122      	bne.n	800b634 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d11a      	bne.n	800b634 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	0a5b      	lsrs	r3, r3, #9
 800b602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d111      	bne.n	800b634 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	0c1b      	lsrs	r3, r3, #16
 800b614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b61e:	429a      	cmp	r2, r3
 800b620:	d108      	bne.n	800b634 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	0e1b      	lsrs	r3, r3, #24
 800b626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b630:	429a      	cmp	r2, r3
 800b632:	d001      	beq.n	800b638 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e000      	b.n	800b63a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3730      	adds	r7, #48	; 0x30
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	58024400 	.word	0x58024400

0800b648 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e19c      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b65c:	4b8a      	ldr	r3, [pc, #552]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 030f 	and.w	r3, r3, #15
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d910      	bls.n	800b68c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b66a:	4b87      	ldr	r3, [pc, #540]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f023 020f 	bic.w	r2, r3, #15
 800b672:	4985      	ldr	r1, [pc, #532]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	4313      	orrs	r3, r2
 800b678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b67a:	4b83      	ldr	r3, [pc, #524]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 030f 	and.w	r3, r3, #15
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	d001      	beq.n	800b68c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e184      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0304 	and.w	r3, r3, #4
 800b694:	2b00      	cmp	r3, #0
 800b696:	d010      	beq.n	800b6ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	691a      	ldr	r2, [r3, #16]
 800b69c:	4b7b      	ldr	r3, [pc, #492]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d908      	bls.n	800b6ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b6a8:	4b78      	ldr	r3, [pc, #480]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	4975      	ldr	r1, [pc, #468]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0308 	and.w	r3, r3, #8
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d010      	beq.n	800b6e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	695a      	ldr	r2, [r3, #20]
 800b6ca:	4b70      	ldr	r3, [pc, #448]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d908      	bls.n	800b6e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b6d6:	4b6d      	ldr	r3, [pc, #436]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	496a      	ldr	r1, [pc, #424]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0310 	and.w	r3, r3, #16
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d010      	beq.n	800b716 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699a      	ldr	r2, [r3, #24]
 800b6f8:	4b64      	ldr	r3, [pc, #400]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b6fa:	69db      	ldr	r3, [r3, #28]
 800b6fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b700:	429a      	cmp	r2, r3
 800b702:	d908      	bls.n	800b716 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b704:	4b61      	ldr	r3, [pc, #388]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b706:	69db      	ldr	r3, [r3, #28]
 800b708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	495e      	ldr	r1, [pc, #376]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b712:	4313      	orrs	r3, r2
 800b714:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 0320 	and.w	r3, r3, #32
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d010      	beq.n	800b744 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	69da      	ldr	r2, [r3, #28]
 800b726:	4b59      	ldr	r3, [pc, #356]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b72e:	429a      	cmp	r2, r3
 800b730:	d908      	bls.n	800b744 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b732:	4b56      	ldr	r3, [pc, #344]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	4953      	ldr	r1, [pc, #332]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b740:	4313      	orrs	r3, r2
 800b742:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0302 	and.w	r3, r3, #2
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d010      	beq.n	800b772 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	68da      	ldr	r2, [r3, #12]
 800b754:	4b4d      	ldr	r3, [pc, #308]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	f003 030f 	and.w	r3, r3, #15
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d908      	bls.n	800b772 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b760:	4b4a      	ldr	r3, [pc, #296]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	f023 020f 	bic.w	r2, r3, #15
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	4947      	ldr	r1, [pc, #284]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d055      	beq.n	800b82a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b77e:	4b43      	ldr	r3, [pc, #268]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	4940      	ldr	r1, [pc, #256]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b78c:	4313      	orrs	r3, r2
 800b78e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	2b02      	cmp	r3, #2
 800b796:	d107      	bne.n	800b7a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b798:	4b3c      	ldr	r3, [pc, #240]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d121      	bne.n	800b7e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e0f6      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d107      	bne.n	800b7c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b7b0:	4b36      	ldr	r3, [pc, #216]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d115      	bne.n	800b7e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e0ea      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d107      	bne.n	800b7d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7c8:	4b30      	ldr	r3, [pc, #192]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d109      	bne.n	800b7e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e0de      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7d8:	4b2c      	ldr	r3, [pc, #176]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0304 	and.w	r3, r3, #4
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e0d6      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b7e8:	4b28      	ldr	r3, [pc, #160]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f023 0207 	bic.w	r2, r3, #7
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	4925      	ldr	r1, [pc, #148]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7fa:	f7fb ff71 	bl	80076e0 <HAL_GetTick>
 800b7fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b800:	e00a      	b.n	800b818 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b802:	f7fb ff6d 	bl	80076e0 <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b810:	4293      	cmp	r3, r2
 800b812:	d901      	bls.n	800b818 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	e0be      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b818:	4b1c      	ldr	r3, [pc, #112]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	00db      	lsls	r3, r3, #3
 800b826:	429a      	cmp	r2, r3
 800b828:	d1eb      	bne.n	800b802 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d010      	beq.n	800b858 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68da      	ldr	r2, [r3, #12]
 800b83a:	4b14      	ldr	r3, [pc, #80]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	f003 030f 	and.w	r3, r3, #15
 800b842:	429a      	cmp	r2, r3
 800b844:	d208      	bcs.n	800b858 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b846:	4b11      	ldr	r3, [pc, #68]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	f023 020f 	bic.w	r2, r3, #15
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	490e      	ldr	r1, [pc, #56]	; (800b88c <HAL_RCC_ClockConfig+0x244>)
 800b854:	4313      	orrs	r3, r2
 800b856:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b858:	4b0b      	ldr	r3, [pc, #44]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 030f 	and.w	r3, r3, #15
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	429a      	cmp	r2, r3
 800b864:	d214      	bcs.n	800b890 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b866:	4b08      	ldr	r3, [pc, #32]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f023 020f 	bic.w	r2, r3, #15
 800b86e:	4906      	ldr	r1, [pc, #24]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	4313      	orrs	r3, r2
 800b874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b876:	4b04      	ldr	r3, [pc, #16]	; (800b888 <HAL_RCC_ClockConfig+0x240>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 030f 	and.w	r3, r3, #15
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	429a      	cmp	r2, r3
 800b882:	d005      	beq.n	800b890 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e086      	b.n	800b996 <HAL_RCC_ClockConfig+0x34e>
 800b888:	52002000 	.word	0x52002000
 800b88c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d010      	beq.n	800b8be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691a      	ldr	r2, [r3, #16]
 800b8a0:	4b3f      	ldr	r3, [pc, #252]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d208      	bcs.n	800b8be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b8ac:	4b3c      	ldr	r3, [pc, #240]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	4939      	ldr	r1, [pc, #228]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f003 0308 	and.w	r3, r3, #8
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d010      	beq.n	800b8ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	695a      	ldr	r2, [r3, #20]
 800b8ce:	4b34      	ldr	r3, [pc, #208]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d208      	bcs.n	800b8ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b8da:	4b31      	ldr	r3, [pc, #196]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	492e      	ldr	r1, [pc, #184]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 0310 	and.w	r3, r3, #16
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d010      	beq.n	800b91a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	699a      	ldr	r2, [r3, #24]
 800b8fc:	4b28      	ldr	r3, [pc, #160]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b904:	429a      	cmp	r2, r3
 800b906:	d208      	bcs.n	800b91a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b908:	4b25      	ldr	r3, [pc, #148]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	699b      	ldr	r3, [r3, #24]
 800b914:	4922      	ldr	r1, [pc, #136]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b916:	4313      	orrs	r3, r2
 800b918:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b00      	cmp	r3, #0
 800b924:	d010      	beq.n	800b948 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	69da      	ldr	r2, [r3, #28]
 800b92a:	4b1d      	ldr	r3, [pc, #116]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b932:	429a      	cmp	r2, r3
 800b934:	d208      	bcs.n	800b948 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b936:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	69db      	ldr	r3, [r3, #28]
 800b942:	4917      	ldr	r1, [pc, #92]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b944:	4313      	orrs	r3, r2
 800b946:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b948:	f000 f834 	bl	800b9b4 <HAL_RCC_GetSysClockFreq>
 800b94c:	4602      	mov	r2, r0
 800b94e:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	0a1b      	lsrs	r3, r3, #8
 800b954:	f003 030f 	and.w	r3, r3, #15
 800b958:	4912      	ldr	r1, [pc, #72]	; (800b9a4 <HAL_RCC_ClockConfig+0x35c>)
 800b95a:	5ccb      	ldrb	r3, [r1, r3]
 800b95c:	f003 031f 	and.w	r3, r3, #31
 800b960:	fa22 f303 	lsr.w	r3, r2, r3
 800b964:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b966:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <HAL_RCC_ClockConfig+0x358>)
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	f003 030f 	and.w	r3, r3, #15
 800b96e:	4a0d      	ldr	r2, [pc, #52]	; (800b9a4 <HAL_RCC_ClockConfig+0x35c>)
 800b970:	5cd3      	ldrb	r3, [r2, r3]
 800b972:	f003 031f 	and.w	r3, r3, #31
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	fa22 f303 	lsr.w	r3, r2, r3
 800b97c:	4a0a      	ldr	r2, [pc, #40]	; (800b9a8 <HAL_RCC_ClockConfig+0x360>)
 800b97e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b980:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <HAL_RCC_ClockConfig+0x364>)
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b986:	4b0a      	ldr	r3, [pc, #40]	; (800b9b0 <HAL_RCC_ClockConfig+0x368>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fb fe5e 	bl	800764c <HAL_InitTick>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	58024400 	.word	0x58024400
 800b9a4:	08011070 	.word	0x08011070
 800b9a8:	24000008 	.word	0x24000008
 800b9ac:	24000004 	.word	0x24000004
 800b9b0:	2400001c 	.word	0x2400001c

0800b9b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b089      	sub	sp, #36	; 0x24
 800b9b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9ba:	4bb3      	ldr	r3, [pc, #716]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9c2:	2b18      	cmp	r3, #24
 800b9c4:	f200 8155 	bhi.w	800bc72 <HAL_RCC_GetSysClockFreq+0x2be>
 800b9c8:	a201      	add	r2, pc, #4	; (adr r2, 800b9d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ce:	bf00      	nop
 800b9d0:	0800ba35 	.word	0x0800ba35
 800b9d4:	0800bc73 	.word	0x0800bc73
 800b9d8:	0800bc73 	.word	0x0800bc73
 800b9dc:	0800bc73 	.word	0x0800bc73
 800b9e0:	0800bc73 	.word	0x0800bc73
 800b9e4:	0800bc73 	.word	0x0800bc73
 800b9e8:	0800bc73 	.word	0x0800bc73
 800b9ec:	0800bc73 	.word	0x0800bc73
 800b9f0:	0800ba5b 	.word	0x0800ba5b
 800b9f4:	0800bc73 	.word	0x0800bc73
 800b9f8:	0800bc73 	.word	0x0800bc73
 800b9fc:	0800bc73 	.word	0x0800bc73
 800ba00:	0800bc73 	.word	0x0800bc73
 800ba04:	0800bc73 	.word	0x0800bc73
 800ba08:	0800bc73 	.word	0x0800bc73
 800ba0c:	0800bc73 	.word	0x0800bc73
 800ba10:	0800ba61 	.word	0x0800ba61
 800ba14:	0800bc73 	.word	0x0800bc73
 800ba18:	0800bc73 	.word	0x0800bc73
 800ba1c:	0800bc73 	.word	0x0800bc73
 800ba20:	0800bc73 	.word	0x0800bc73
 800ba24:	0800bc73 	.word	0x0800bc73
 800ba28:	0800bc73 	.word	0x0800bc73
 800ba2c:	0800bc73 	.word	0x0800bc73
 800ba30:	0800ba67 	.word	0x0800ba67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba34:	4b94      	ldr	r3, [pc, #592]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0320 	and.w	r3, r3, #32
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d009      	beq.n	800ba54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba40:	4b91      	ldr	r3, [pc, #580]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	08db      	lsrs	r3, r3, #3
 800ba46:	f003 0303 	and.w	r3, r3, #3
 800ba4a:	4a90      	ldr	r2, [pc, #576]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ba52:	e111      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ba54:	4b8d      	ldr	r3, [pc, #564]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba56:	61bb      	str	r3, [r7, #24]
    break;
 800ba58:	e10e      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ba5a:	4b8d      	ldr	r3, [pc, #564]	; (800bc90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba5c:	61bb      	str	r3, [r7, #24]
    break;
 800ba5e:	e10b      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ba60:	4b8c      	ldr	r3, [pc, #560]	; (800bc94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ba62:	61bb      	str	r3, [r7, #24]
    break;
 800ba64:	e108      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba66:	4b88      	ldr	r3, [pc, #544]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6a:	f003 0303 	and.w	r3, r3, #3
 800ba6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ba70:	4b85      	ldr	r3, [pc, #532]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba74:	091b      	lsrs	r3, r3, #4
 800ba76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ba7c:	4b82      	ldr	r3, [pc, #520]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ba86:	4b80      	ldr	r3, [pc, #512]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8a:	08db      	lsrs	r3, r3, #3
 800ba8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	fb02 f303 	mul.w	r3, r2, r3
 800ba96:	ee07 3a90 	vmov	s15, r3
 800ba9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f000 80e1 	beq.w	800bc6c <HAL_RCC_GetSysClockFreq+0x2b8>
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b02      	cmp	r3, #2
 800baae:	f000 8083 	beq.w	800bbb8 <HAL_RCC_GetSysClockFreq+0x204>
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	f200 80a1 	bhi.w	800bbfc <HAL_RCC_GetSysClockFreq+0x248>
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <HAL_RCC_GetSysClockFreq+0x114>
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d056      	beq.n	800bb74 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bac6:	e099      	b.n	800bbfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bac8:	4b6f      	ldr	r3, [pc, #444]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d02d      	beq.n	800bb30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bad4:	4b6c      	ldr	r3, [pc, #432]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	08db      	lsrs	r3, r3, #3
 800bada:	f003 0303 	and.w	r3, r3, #3
 800bade:	4a6b      	ldr	r2, [pc, #428]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bae0:	fa22 f303 	lsr.w	r3, r2, r3
 800bae4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	ee07 3a90 	vmov	s15, r3
 800baec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	ee07 3a90 	vmov	s15, r3
 800baf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafe:	4b62      	ldr	r3, [pc, #392]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb12:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bc98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bb2e:	e087      	b.n	800bc40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bc9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800bb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb42:	4b51      	ldr	r3, [pc, #324]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb52:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb56:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bc98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb72:	e065      	b.n	800bc40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	ee07 3a90 	vmov	s15, r3
 800bb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb86:	4b40      	ldr	r3, [pc, #256]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8e:	ee07 3a90 	vmov	s15, r3
 800bb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb96:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bc98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb6:	e043      	b.n	800bc40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bca4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbca:	4b2f      	ldr	r3, [pc, #188]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbda:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bc98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbfa:	e021      	b.n	800bc40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	ee07 3a90 	vmov	s15, r3
 800bc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc06:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bc0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0e:	4b1e      	ldr	r3, [pc, #120]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc16:	ee07 3a90 	vmov	s15, r3
 800bc1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bc98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bc40:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc44:	0a5b      	lsrs	r3, r3, #9
 800bc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc58:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc64:	ee17 3a90 	vmov	r3, s15
 800bc68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800bc6a:	e005      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	61bb      	str	r3, [r7, #24]
    break;
 800bc70:	e002      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bc74:	61bb      	str	r3, [r7, #24]
    break;
 800bc76:	bf00      	nop
  }

  return sysclockfreq;
 800bc78:	69bb      	ldr	r3, [r7, #24]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3724      	adds	r7, #36	; 0x24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	58024400 	.word	0x58024400
 800bc8c:	03d09000 	.word	0x03d09000
 800bc90:	003d0900 	.word	0x003d0900
 800bc94:	007a1200 	.word	0x007a1200
 800bc98:	46000000 	.word	0x46000000
 800bc9c:	4c742400 	.word	0x4c742400
 800bca0:	4a742400 	.word	0x4a742400
 800bca4:	4af42400 	.word	0x4af42400

0800bca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bcae:	f7ff fe81 	bl	800b9b4 <HAL_RCC_GetSysClockFreq>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	4b10      	ldr	r3, [pc, #64]	; (800bcf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	0a1b      	lsrs	r3, r3, #8
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	490f      	ldr	r1, [pc, #60]	; (800bcfc <HAL_RCC_GetHCLKFreq+0x54>)
 800bcc0:	5ccb      	ldrb	r3, [r1, r3]
 800bcc2:	f003 031f 	and.w	r3, r3, #31
 800bcc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bccc:	4b0a      	ldr	r3, [pc, #40]	; (800bcf8 <HAL_RCC_GetHCLKFreq+0x50>)
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	f003 030f 	and.w	r3, r3, #15
 800bcd4:	4a09      	ldr	r2, [pc, #36]	; (800bcfc <HAL_RCC_GetHCLKFreq+0x54>)
 800bcd6:	5cd3      	ldrb	r3, [r2, r3]
 800bcd8:	f003 031f 	and.w	r3, r3, #31
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	fa22 f303 	lsr.w	r3, r2, r3
 800bce2:	4a07      	ldr	r2, [pc, #28]	; (800bd00 <HAL_RCC_GetHCLKFreq+0x58>)
 800bce4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bce6:	4a07      	ldr	r2, [pc, #28]	; (800bd04 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bcec:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <HAL_RCC_GetHCLKFreq+0x58>)
 800bcee:	681b      	ldr	r3, [r3, #0]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	58024400 	.word	0x58024400
 800bcfc:	08011070 	.word	0x08011070
 800bd00:	24000008 	.word	0x24000008
 800bd04:	24000004 	.word	0x24000004

0800bd08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bd0c:	f7ff ffcc 	bl	800bca8 <HAL_RCC_GetHCLKFreq>
 800bd10:	4602      	mov	r2, r0
 800bd12:	4b06      	ldr	r3, [pc, #24]	; (800bd2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	091b      	lsrs	r3, r3, #4
 800bd18:	f003 0307 	and.w	r3, r3, #7
 800bd1c:	4904      	ldr	r1, [pc, #16]	; (800bd30 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bd1e:	5ccb      	ldrb	r3, [r1, r3]
 800bd20:	f003 031f 	and.w	r3, r3, #31
 800bd24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	58024400 	.word	0x58024400
 800bd30:	08011070 	.word	0x08011070

0800bd34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bd38:	f7ff ffb6 	bl	800bca8 <HAL_RCC_GetHCLKFreq>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd40:	69db      	ldr	r3, [r3, #28]
 800bd42:	0a1b      	lsrs	r3, r3, #8
 800bd44:	f003 0307 	and.w	r3, r3, #7
 800bd48:	4904      	ldr	r1, [pc, #16]	; (800bd5c <HAL_RCC_GetPCLK2Freq+0x28>)
 800bd4a:	5ccb      	ldrb	r3, [r1, r3]
 800bd4c:	f003 031f 	and.w	r3, r3, #31
 800bd50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	58024400 	.word	0x58024400
 800bd5c:	08011070 	.word	0x08011070

0800bd60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd68:	2300      	movs	r3, #0
 800bd6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d03f      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd84:	d02a      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bd86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd8a:	d824      	bhi.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bd8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd90:	d018      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bd92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd96:	d81e      	bhi.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bd9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bda0:	d007      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bda2:	e018      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bda4:	4ba3      	ldr	r3, [pc, #652]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda8:	4aa2      	ldr	r2, [pc, #648]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bdb0:	e015      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	2102      	movs	r1, #2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f001 f9d5 	bl	800d168 <RCCEx_PLL2_Config>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bdc2:	e00c      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3324      	adds	r3, #36	; 0x24
 800bdc8:	2102      	movs	r1, #2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f001 fa7e 	bl	800d2cc <RCCEx_PLL3_Config>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bdd4:	e003      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	75fb      	strb	r3, [r7, #23]
      break;
 800bdda:	e000      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d109      	bne.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bde4:	4b93      	ldr	r3, [pc, #588]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdf0:	4990      	ldr	r1, [pc, #576]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	650b      	str	r3, [r1, #80]	; 0x50
 800bdf6:	e001      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be04:	2b00      	cmp	r3, #0
 800be06:	d03d      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d826      	bhi.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800be10:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800be12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be16:	bf00      	nop
 800be18:	0800be2d 	.word	0x0800be2d
 800be1c:	0800be3b 	.word	0x0800be3b
 800be20:	0800be4d 	.word	0x0800be4d
 800be24:	0800be65 	.word	0x0800be65
 800be28:	0800be65 	.word	0x0800be65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be2c:	4b81      	ldr	r3, [pc, #516]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be30:	4a80      	ldr	r2, [pc, #512]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800be38:	e015      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3304      	adds	r3, #4
 800be3e:	2100      	movs	r1, #0
 800be40:	4618      	mov	r0, r3
 800be42:	f001 f991 	bl	800d168 <RCCEx_PLL2_Config>
 800be46:	4603      	mov	r3, r0
 800be48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800be4a:	e00c      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3324      	adds	r3, #36	; 0x24
 800be50:	2100      	movs	r1, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f001 fa3a 	bl	800d2cc <RCCEx_PLL3_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800be5c:	e003      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	75fb      	strb	r3, [r7, #23]
      break;
 800be62:	e000      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800be64:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d109      	bne.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be6c:	4b71      	ldr	r3, [pc, #452]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be70:	f023 0207 	bic.w	r2, r3, #7
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be78:	496e      	ldr	r1, [pc, #440]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be7a:	4313      	orrs	r3, r2
 800be7c:	650b      	str	r3, [r1, #80]	; 0x50
 800be7e:	e001      	b.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be80:	7dfb      	ldrb	r3, [r7, #23]
 800be82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d042      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be98:	d02b      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800be9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be9e:	d825      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bea0:	2bc0      	cmp	r3, #192	; 0xc0
 800bea2:	d028      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bea4:	2bc0      	cmp	r3, #192	; 0xc0
 800bea6:	d821      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bea8:	2b80      	cmp	r3, #128	; 0x80
 800beaa:	d016      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800beac:	2b80      	cmp	r3, #128	; 0x80
 800beae:	d81d      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800beb4:	2b40      	cmp	r3, #64	; 0x40
 800beb6:	d007      	beq.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800beb8:	e018      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beba:	4b5e      	ldr	r3, [pc, #376]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebe:	4a5d      	ldr	r2, [pc, #372]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bec6:	e017      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3304      	adds	r3, #4
 800becc:	2100      	movs	r1, #0
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 f94a 	bl	800d168 <RCCEx_PLL2_Config>
 800bed4:	4603      	mov	r3, r0
 800bed6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bed8:	e00e      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	3324      	adds	r3, #36	; 0x24
 800bede:	2100      	movs	r1, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 f9f3 	bl	800d2cc <RCCEx_PLL3_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800beea:	e005      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	75fb      	strb	r3, [r7, #23]
      break;
 800bef0:	e002      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bef2:	bf00      	nop
 800bef4:	e000      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d109      	bne.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800befe:	4b4d      	ldr	r3, [pc, #308]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf0a:	494a      	ldr	r1, [pc, #296]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	650b      	str	r3, [r1, #80]	; 0x50
 800bf10:	e001      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d049      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf2c:	d030      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bf2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf32:	d82a      	bhi.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bf34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf38:	d02c      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bf3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf3e:	d824      	bhi.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bf40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf44:	d018      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bf46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf4a:	d81e      	bhi.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bf50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf54:	d007      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bf56:	e018      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf58:	4b36      	ldr	r3, [pc, #216]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	4a35      	ldr	r2, [pc, #212]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf64:	e017      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 f8fb 	bl	800d168 <RCCEx_PLL2_Config>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bf76:	e00e      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3324      	adds	r3, #36	; 0x24
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f001 f9a4 	bl	800d2cc <RCCEx_PLL3_Config>
 800bf84:	4603      	mov	r3, r0
 800bf86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf88:	e005      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf8e:	e002      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bf90:	bf00      	nop
 800bf92:	e000      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bf94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bf9c:	4b25      	ldr	r3, [pc, #148]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfa0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfaa:	4922      	ldr	r1, [pc, #136]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfac:	4313      	orrs	r3, r2
 800bfae:	658b      	str	r3, [r1, #88]	; 0x58
 800bfb0:	e001      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb2:	7dfb      	ldrb	r3, [r7, #23]
 800bfb4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d04b      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bfc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfcc:	d030      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bfce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfd2:	d82a      	bhi.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bfd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfd8:	d02e      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800bfda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfde:	d824      	bhi.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bfe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfe4:	d018      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bfe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfea:	d81e      	bhi.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bff4:	d007      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bff6:	e018      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bff8:	4b0e      	ldr	r3, [pc, #56]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffc:	4a0d      	ldr	r2, [pc, #52]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c004:	e019      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3304      	adds	r3, #4
 800c00a:	2100      	movs	r1, #0
 800c00c:	4618      	mov	r0, r3
 800c00e:	f001 f8ab 	bl	800d168 <RCCEx_PLL2_Config>
 800c012:	4603      	mov	r3, r0
 800c014:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c016:	e010      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3324      	adds	r3, #36	; 0x24
 800c01c:	2100      	movs	r1, #0
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 f954 	bl	800d2cc <RCCEx_PLL3_Config>
 800c024:	4603      	mov	r3, r0
 800c026:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c028:	e007      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	75fb      	strb	r3, [r7, #23]
      break;
 800c02e:	e004      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c030:	bf00      	nop
 800c032:	e002      	b.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c034:	58024400 	.word	0x58024400
      break;
 800c038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10a      	bne.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c040:	4b99      	ldr	r3, [pc, #612]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c044:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c04e:	4996      	ldr	r1, [pc, #600]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c050:	4313      	orrs	r3, r2
 800c052:	658b      	str	r3, [r1, #88]	; 0x58
 800c054:	e001      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d032      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c06a:	2b30      	cmp	r3, #48	; 0x30
 800c06c:	d01c      	beq.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c06e:	2b30      	cmp	r3, #48	; 0x30
 800c070:	d817      	bhi.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c072:	2b20      	cmp	r3, #32
 800c074:	d00c      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c076:	2b20      	cmp	r3, #32
 800c078:	d813      	bhi.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d016      	beq.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c07e:	2b10      	cmp	r3, #16
 800c080:	d10f      	bne.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c082:	4b89      	ldr	r3, [pc, #548]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c086:	4a88      	ldr	r2, [pc, #544]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c08c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c08e:	e00e      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3304      	adds	r3, #4
 800c094:	2102      	movs	r1, #2
 800c096:	4618      	mov	r0, r3
 800c098:	f001 f866 	bl	800d168 <RCCEx_PLL2_Config>
 800c09c:	4603      	mov	r3, r0
 800c09e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c0a0:	e005      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c0a6:	e002      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c0a8:	bf00      	nop
 800c0aa:	e000      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c0ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d109      	bne.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c0b4:	4b7c      	ldr	r3, [pc, #496]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c0b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c0:	4979      	ldr	r1, [pc, #484]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c0c6:	e001      	b.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d047      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0e0:	d030      	beq.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c0e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0e6:	d82a      	bhi.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c0e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0ec:	d02c      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c0ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0f2:	d824      	bhi.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0f8:	d018      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0fe:	d81e      	bhi.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c100:	2b00      	cmp	r3, #0
 800c102:	d003      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c108:	d007      	beq.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c10a:	e018      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c10c:	4b66      	ldr	r3, [pc, #408]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c110:	4a65      	ldr	r2, [pc, #404]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c118:	e017      	b.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	3304      	adds	r3, #4
 800c11e:	2100      	movs	r1, #0
 800c120:	4618      	mov	r0, r3
 800c122:	f001 f821 	bl	800d168 <RCCEx_PLL2_Config>
 800c126:	4603      	mov	r3, r0
 800c128:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c12a:	e00e      	b.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3324      	adds	r3, #36	; 0x24
 800c130:	2100      	movs	r1, #0
 800c132:	4618      	mov	r0, r3
 800c134:	f001 f8ca 	bl	800d2cc <RCCEx_PLL3_Config>
 800c138:	4603      	mov	r3, r0
 800c13a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c13c:	e005      	b.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	75fb      	strb	r3, [r7, #23]
      break;
 800c142:	e002      	b.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c144:	bf00      	nop
 800c146:	e000      	b.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c14a:	7dfb      	ldrb	r3, [r7, #23]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d109      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c150:	4b55      	ldr	r3, [pc, #340]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c154:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c15c:	4952      	ldr	r1, [pc, #328]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	650b      	str	r3, [r1, #80]	; 0x50
 800c162:	e001      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c164:	7dfb      	ldrb	r3, [r7, #23]
 800c166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d049      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c17c:	d02e      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c17e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c182:	d828      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c184:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c188:	d02a      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c18a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c18e:	d822      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c194:	d026      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c19a:	d81c      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c19c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1a0:	d010      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c1a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1a6:	d816      	bhi.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d01d      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c1ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b0:	d111      	bne.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 ffd5 	bl	800d168 <RCCEx_PLL2_Config>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c1c2:	e012      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3324      	adds	r3, #36	; 0x24
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f001 f87e 	bl	800d2cc <RCCEx_PLL3_Config>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c1d4:	e009      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c1da:	e006      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c1dc:	bf00      	nop
 800c1de:	e004      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c1e0:	bf00      	nop
 800c1e2:	e002      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c1e4:	bf00      	nop
 800c1e6:	e000      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c1e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d109      	bne.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c1f0:	4b2d      	ldr	r3, [pc, #180]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1fc:	492a      	ldr	r1, [pc, #168]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	650b      	str	r3, [r1, #80]	; 0x50
 800c202:	e001      	b.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d04d      	beq.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c21a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c21e:	d02e      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c224:	d828      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c22a:	d02a      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c230:	d822      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c232:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c236:	d026      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c23c:	d81c      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c23e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c242:	d010      	beq.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c248:	d816      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d01d      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c24e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c252:	d111      	bne.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	3304      	adds	r3, #4
 800c258:	2101      	movs	r1, #1
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 ff84 	bl	800d168 <RCCEx_PLL2_Config>
 800c260:	4603      	mov	r3, r0
 800c262:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c264:	e012      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	3324      	adds	r3, #36	; 0x24
 800c26a:	2101      	movs	r1, #1
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 f82d 	bl	800d2cc <RCCEx_PLL3_Config>
 800c272:	4603      	mov	r3, r0
 800c274:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c276:	e009      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	75fb      	strb	r3, [r7, #23]
      break;
 800c27c:	e006      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c27e:	bf00      	nop
 800c280:	e004      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c282:	bf00      	nop
 800c284:	e002      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c286:	bf00      	nop
 800c288:	e000      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c28a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10c      	bne.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c292:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c296:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c2a0:	4901      	ldr	r1, [pc, #4]	; (800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	658b      	str	r3, [r1, #88]	; 0x58
 800c2a6:	e003      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c2a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d02f      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c4:	d00e      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ca:	d814      	bhi.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d015      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c2d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2d4:	d10f      	bne.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2d6:	4baf      	ldr	r3, [pc, #700]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2da:	4aae      	ldr	r2, [pc, #696]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c2dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c2e2:	e00c      	b.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 ff3c 	bl	800d168 <RCCEx_PLL2_Config>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c2f4:	e003      	b.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2fa:	e000      	b.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c2fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d109      	bne.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c304:	4ba3      	ldr	r3, [pc, #652]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c308:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c310:	49a0      	ldr	r1, [pc, #640]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c312:	4313      	orrs	r3, r2
 800c314:	650b      	str	r3, [r1, #80]	; 0x50
 800c316:	e001      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c324:	2b00      	cmp	r3, #0
 800c326:	d032      	beq.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d81b      	bhi.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c330:	a201      	add	r2, pc, #4	; (adr r2, 800c338 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c336:	bf00      	nop
 800c338:	0800c36f 	.word	0x0800c36f
 800c33c:	0800c349 	.word	0x0800c349
 800c340:	0800c357 	.word	0x0800c357
 800c344:	0800c36f 	.word	0x0800c36f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c348:	4b92      	ldr	r3, [pc, #584]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	4a91      	ldr	r2, [pc, #580]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c354:	e00c      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3304      	adds	r3, #4
 800c35a:	2102      	movs	r1, #2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 ff03 	bl	800d168 <RCCEx_PLL2_Config>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c366:	e003      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	75fb      	strb	r3, [r7, #23]
      break;
 800c36c:	e000      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c36e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d109      	bne.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c376:	4b87      	ldr	r3, [pc, #540]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c37a:	f023 0203 	bic.w	r2, r3, #3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c382:	4984      	ldr	r1, [pc, #528]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c384:	4313      	orrs	r3, r2
 800c386:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c388:	e001      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
 800c38c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c396:	2b00      	cmp	r3, #0
 800c398:	f000 8086 	beq.w	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c39c:	4b7e      	ldr	r3, [pc, #504]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a7d      	ldr	r2, [pc, #500]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c3a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c3a8:	f7fb f99a 	bl	80076e0 <HAL_GetTick>
 800c3ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c3ae:	e009      	b.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3b0:	f7fb f996 	bl	80076e0 <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	2b64      	cmp	r3, #100	; 0x64
 800c3bc:	d902      	bls.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	75fb      	strb	r3, [r7, #23]
        break;
 800c3c2:	e005      	b.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c3c4:	4b74      	ldr	r3, [pc, #464]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d0ef      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d166      	bne.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c3d6:	4b6f      	ldr	r3, [pc, #444]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c3e0:	4053      	eors	r3, r2
 800c3e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d013      	beq.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c3ea:	4b6a      	ldr	r3, [pc, #424]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c3f4:	4b67      	ldr	r3, [pc, #412]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3f8:	4a66      	ldr	r2, [pc, #408]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c400:	4b64      	ldr	r3, [pc, #400]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c404:	4a63      	ldr	r2, [pc, #396]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c40a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c40c:	4a61      	ldr	r2, [pc, #388]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c41c:	d115      	bne.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c41e:	f7fb f95f 	bl	80076e0 <HAL_GetTick>
 800c422:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c424:	e00b      	b.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c426:	f7fb f95b 	bl	80076e0 <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	f241 3288 	movw	r2, #5000	; 0x1388
 800c434:	4293      	cmp	r3, r2
 800c436:	d902      	bls.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c438:	2303      	movs	r3, #3
 800c43a:	75fb      	strb	r3, [r7, #23]
            break;
 800c43c:	e005      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c43e:	4b55      	ldr	r3, [pc, #340]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c442:	f003 0302 	and.w	r3, r3, #2
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0ed      	beq.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c44a:	7dfb      	ldrb	r3, [r7, #23]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d126      	bne.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c45e:	d10d      	bne.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c460:	4b4c      	ldr	r3, [pc, #304]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c46e:	0919      	lsrs	r1, r3, #4
 800c470:	4b4a      	ldr	r3, [pc, #296]	; (800c59c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c472:	400b      	ands	r3, r1
 800c474:	4947      	ldr	r1, [pc, #284]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c476:	4313      	orrs	r3, r2
 800c478:	610b      	str	r3, [r1, #16]
 800c47a:	e005      	b.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c47c:	4b45      	ldr	r3, [pc, #276]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	4a44      	ldr	r2, [pc, #272]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c482:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c486:	6113      	str	r3, [r2, #16]
 800c488:	4b42      	ldr	r3, [pc, #264]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c48a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c496:	493f      	ldr	r1, [pc, #252]	; (800c594 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c498:	4313      	orrs	r3, r2
 800c49a:	670b      	str	r3, [r1, #112]	; 0x70
 800c49c:	e004      	b.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	75bb      	strb	r3, [r7, #22]
 800c4a2:	e001      	b.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 0301 	and.w	r3, r3, #1
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 8085 	beq.w	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4ba:	2b28      	cmp	r3, #40	; 0x28
 800c4bc:	d866      	bhi.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c4be:	a201      	add	r2, pc, #4	; (adr r2, 800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c4:	0800c5a1 	.word	0x0800c5a1
 800c4c8:	0800c58d 	.word	0x0800c58d
 800c4cc:	0800c58d 	.word	0x0800c58d
 800c4d0:	0800c58d 	.word	0x0800c58d
 800c4d4:	0800c58d 	.word	0x0800c58d
 800c4d8:	0800c58d 	.word	0x0800c58d
 800c4dc:	0800c58d 	.word	0x0800c58d
 800c4e0:	0800c58d 	.word	0x0800c58d
 800c4e4:	0800c569 	.word	0x0800c569
 800c4e8:	0800c58d 	.word	0x0800c58d
 800c4ec:	0800c58d 	.word	0x0800c58d
 800c4f0:	0800c58d 	.word	0x0800c58d
 800c4f4:	0800c58d 	.word	0x0800c58d
 800c4f8:	0800c58d 	.word	0x0800c58d
 800c4fc:	0800c58d 	.word	0x0800c58d
 800c500:	0800c58d 	.word	0x0800c58d
 800c504:	0800c57b 	.word	0x0800c57b
 800c508:	0800c58d 	.word	0x0800c58d
 800c50c:	0800c58d 	.word	0x0800c58d
 800c510:	0800c58d 	.word	0x0800c58d
 800c514:	0800c58d 	.word	0x0800c58d
 800c518:	0800c58d 	.word	0x0800c58d
 800c51c:	0800c58d 	.word	0x0800c58d
 800c520:	0800c58d 	.word	0x0800c58d
 800c524:	0800c5a1 	.word	0x0800c5a1
 800c528:	0800c58d 	.word	0x0800c58d
 800c52c:	0800c58d 	.word	0x0800c58d
 800c530:	0800c58d 	.word	0x0800c58d
 800c534:	0800c58d 	.word	0x0800c58d
 800c538:	0800c58d 	.word	0x0800c58d
 800c53c:	0800c58d 	.word	0x0800c58d
 800c540:	0800c58d 	.word	0x0800c58d
 800c544:	0800c5a1 	.word	0x0800c5a1
 800c548:	0800c58d 	.word	0x0800c58d
 800c54c:	0800c58d 	.word	0x0800c58d
 800c550:	0800c58d 	.word	0x0800c58d
 800c554:	0800c58d 	.word	0x0800c58d
 800c558:	0800c58d 	.word	0x0800c58d
 800c55c:	0800c58d 	.word	0x0800c58d
 800c560:	0800c58d 	.word	0x0800c58d
 800c564:	0800c5a1 	.word	0x0800c5a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3304      	adds	r3, #4
 800c56c:	2101      	movs	r1, #1
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 fdfa 	bl	800d168 <RCCEx_PLL2_Config>
 800c574:	4603      	mov	r3, r0
 800c576:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c578:	e013      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3324      	adds	r3, #36	; 0x24
 800c57e:	2101      	movs	r1, #1
 800c580:	4618      	mov	r0, r3
 800c582:	f000 fea3 	bl	800d2cc <RCCEx_PLL3_Config>
 800c586:	4603      	mov	r3, r0
 800c588:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c58a:	e00a      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	75fb      	strb	r3, [r7, #23]
      break;
 800c590:	e007      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c592:	bf00      	nop
 800c594:	58024400 	.word	0x58024400
 800c598:	58024800 	.word	0x58024800
 800c59c:	00ffffcf 	.word	0x00ffffcf
      break;
 800c5a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d109      	bne.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c5a8:	4b96      	ldr	r3, [pc, #600]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5b4:	4993      	ldr	r1, [pc, #588]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	654b      	str	r3, [r1, #84]	; 0x54
 800c5ba:	e001      	b.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 0302 	and.w	r3, r3, #2
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d038      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d0:	2b05      	cmp	r3, #5
 800c5d2:	d821      	bhi.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c5d4:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5da:	bf00      	nop
 800c5dc:	0800c61f 	.word	0x0800c61f
 800c5e0:	0800c5f5 	.word	0x0800c5f5
 800c5e4:	0800c607 	.word	0x0800c607
 800c5e8:	0800c61f 	.word	0x0800c61f
 800c5ec:	0800c61f 	.word	0x0800c61f
 800c5f0:	0800c61f 	.word	0x0800c61f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 fdb4 	bl	800d168 <RCCEx_PLL2_Config>
 800c600:	4603      	mov	r3, r0
 800c602:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c604:	e00c      	b.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3324      	adds	r3, #36	; 0x24
 800c60a:	2101      	movs	r1, #1
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 fe5d 	bl	800d2cc <RCCEx_PLL3_Config>
 800c612:	4603      	mov	r3, r0
 800c614:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c616:	e003      	b.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c618:	2301      	movs	r3, #1
 800c61a:	75fb      	strb	r3, [r7, #23]
      break;
 800c61c:	e000      	b.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c61e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c620:	7dfb      	ldrb	r3, [r7, #23]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d109      	bne.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c626:	4b77      	ldr	r3, [pc, #476]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c62a:	f023 0207 	bic.w	r2, r3, #7
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c632:	4974      	ldr	r1, [pc, #464]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c634:	4313      	orrs	r3, r2
 800c636:	654b      	str	r3, [r1, #84]	; 0x54
 800c638:	e001      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0304 	and.w	r3, r3, #4
 800c646:	2b00      	cmp	r3, #0
 800c648:	d03a      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c650:	2b05      	cmp	r3, #5
 800c652:	d821      	bhi.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c654:	a201      	add	r2, pc, #4	; (adr r2, 800c65c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65a:	bf00      	nop
 800c65c:	0800c69f 	.word	0x0800c69f
 800c660:	0800c675 	.word	0x0800c675
 800c664:	0800c687 	.word	0x0800c687
 800c668:	0800c69f 	.word	0x0800c69f
 800c66c:	0800c69f 	.word	0x0800c69f
 800c670:	0800c69f 	.word	0x0800c69f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	3304      	adds	r3, #4
 800c678:	2101      	movs	r1, #1
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fd74 	bl	800d168 <RCCEx_PLL2_Config>
 800c680:	4603      	mov	r3, r0
 800c682:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c684:	e00c      	b.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	3324      	adds	r3, #36	; 0x24
 800c68a:	2101      	movs	r1, #1
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fe1d 	bl	800d2cc <RCCEx_PLL3_Config>
 800c692:	4603      	mov	r3, r0
 800c694:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c696:	e003      	b.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	75fb      	strb	r3, [r7, #23]
      break;
 800c69c:	e000      	b.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c69e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10a      	bne.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c6a6:	4b57      	ldr	r3, [pc, #348]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6aa:	f023 0207 	bic.w	r2, r3, #7
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b4:	4953      	ldr	r1, [pc, #332]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	658b      	str	r3, [r1, #88]	; 0x58
 800c6ba:	e001      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0320 	and.w	r3, r3, #32
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d04b      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6d6:	d02e      	beq.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c6d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6dc:	d828      	bhi.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e2:	d02a      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e8:	d822      	bhi.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c6ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6ee:	d026      	beq.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c6f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6f4:	d81c      	bhi.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c6f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6fa:	d010      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c6fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c700:	d816      	bhi.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c702:	2b00      	cmp	r3, #0
 800c704:	d01d      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c70a:	d111      	bne.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3304      	adds	r3, #4
 800c710:	2100      	movs	r1, #0
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fd28 	bl	800d168 <RCCEx_PLL2_Config>
 800c718:	4603      	mov	r3, r0
 800c71a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c71c:	e012      	b.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3324      	adds	r3, #36	; 0x24
 800c722:	2102      	movs	r1, #2
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fdd1 	bl	800d2cc <RCCEx_PLL3_Config>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c72e:	e009      	b.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	75fb      	strb	r3, [r7, #23]
      break;
 800c734:	e006      	b.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c736:	bf00      	nop
 800c738:	e004      	b.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c73a:	bf00      	nop
 800c73c:	e002      	b.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c73e:	bf00      	nop
 800c740:	e000      	b.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c742:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c744:	7dfb      	ldrb	r3, [r7, #23]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10a      	bne.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c74a:	4b2e      	ldr	r3, [pc, #184]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c74e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c758:	492a      	ldr	r1, [pc, #168]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c75a:	4313      	orrs	r3, r2
 800c75c:	654b      	str	r3, [r1, #84]	; 0x54
 800c75e:	e001      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d04d      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c776:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c77a:	d02e      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c77c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c780:	d828      	bhi.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c786:	d02a      	beq.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c78c:	d822      	bhi.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c78e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c792:	d026      	beq.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c798:	d81c      	bhi.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c79a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c79e:	d010      	beq.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c7a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7a4:	d816      	bhi.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d01d      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c7aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ae:	d111      	bne.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fcd6 	bl	800d168 <RCCEx_PLL2_Config>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c7c0:	e012      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3324      	adds	r3, #36	; 0x24
 800c7c6:	2102      	movs	r1, #2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 fd7f 	bl	800d2cc <RCCEx_PLL3_Config>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c7d2:	e009      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c7d8:	e006      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c7da:	bf00      	nop
 800c7dc:	e004      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c7de:	bf00      	nop
 800c7e0:	e002      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c7e2:	bf00      	nop
 800c7e4:	e000      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c7e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7e8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10c      	bne.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7ee:	4b05      	ldr	r3, [pc, #20]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7fc:	4901      	ldr	r1, [pc, #4]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c7fe:	4313      	orrs	r3, r2
 800c800:	658b      	str	r3, [r1, #88]	; 0x58
 800c802:	e003      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c814:	2b00      	cmp	r3, #0
 800c816:	d04b      	beq.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c81e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c822:	d02e      	beq.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c824:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c828:	d828      	bhi.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c82e:	d02a      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c834:	d822      	bhi.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c836:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c83a:	d026      	beq.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c83c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c840:	d81c      	bhi.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c846:	d010      	beq.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c84c:	d816      	bhi.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d01d      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c856:	d111      	bne.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	3304      	adds	r3, #4
 800c85c:	2100      	movs	r1, #0
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 fc82 	bl	800d168 <RCCEx_PLL2_Config>
 800c864:	4603      	mov	r3, r0
 800c866:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c868:	e012      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	3324      	adds	r3, #36	; 0x24
 800c86e:	2102      	movs	r1, #2
 800c870:	4618      	mov	r0, r3
 800c872:	f000 fd2b 	bl	800d2cc <RCCEx_PLL3_Config>
 800c876:	4603      	mov	r3, r0
 800c878:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c87a:	e009      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	75fb      	strb	r3, [r7, #23]
      break;
 800c880:	e006      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c882:	bf00      	nop
 800c884:	e004      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c886:	bf00      	nop
 800c888:	e002      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c88a:	bf00      	nop
 800c88c:	e000      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c88e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10a      	bne.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c896:	4b9d      	ldr	r3, [pc, #628]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c89a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c8a4:	4999      	ldr	r1, [pc, #612]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	658b      	str	r3, [r1, #88]	; 0x58
 800c8aa:	e001      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
 800c8ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 0308 	and.w	r3, r3, #8
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d01a      	beq.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8c6:	d10a      	bne.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3324      	adds	r3, #36	; 0x24
 800c8cc:	2102      	movs	r1, #2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 fcfc 	bl	800d2cc <RCCEx_PLL3_Config>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c8de:	4b8b      	ldr	r3, [pc, #556]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8ec:	4987      	ldr	r1, [pc, #540]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 0310 	and.w	r3, r3, #16
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d01a      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c908:	d10a      	bne.n	800c920 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3324      	adds	r3, #36	; 0x24
 800c90e:	2102      	movs	r1, #2
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fcdb 	bl	800d2cc <RCCEx_PLL3_Config>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c920:	4b7a      	ldr	r3, [pc, #488]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c92e:	4977      	ldr	r1, [pc, #476]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c930:	4313      	orrs	r3, r2
 800c932:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d034      	beq.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c94a:	d01d      	beq.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c94c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c950:	d817      	bhi.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d003      	beq.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c95a:	d009      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c95c:	e011      	b.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3304      	adds	r3, #4
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fbff 	bl	800d168 <RCCEx_PLL2_Config>
 800c96a:	4603      	mov	r3, r0
 800c96c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c96e:	e00c      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3324      	adds	r3, #36	; 0x24
 800c974:	2102      	movs	r1, #2
 800c976:	4618      	mov	r0, r3
 800c978:	f000 fca8 	bl	800d2cc <RCCEx_PLL3_Config>
 800c97c:	4603      	mov	r3, r0
 800c97e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c980:	e003      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	75fb      	strb	r3, [r7, #23]
      break;
 800c986:	e000      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10a      	bne.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c990:	4b5e      	ldr	r3, [pc, #376]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c99e:	495b      	ldr	r1, [pc, #364]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	658b      	str	r3, [r1, #88]	; 0x58
 800c9a4:	e001      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d033      	beq.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9c0:	d01c      	beq.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c9c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c9c6:	d816      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c9c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9cc:	d003      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c9ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9d2:	d007      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c9d4:	e00f      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9d6:	4b4d      	ldr	r3, [pc, #308]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9da:	4a4c      	ldr	r2, [pc, #304]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c9e2:	e00c      	b.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	3324      	adds	r3, #36	; 0x24
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 fc6e 	bl	800d2cc <RCCEx_PLL3_Config>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c9f4:	e003      	b.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c9fa:	e000      	b.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c9fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca04:	4b41      	ldr	r3, [pc, #260]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca12:	493e      	ldr	r1, [pc, #248]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca14:	4313      	orrs	r3, r2
 800ca16:	654b      	str	r3, [r1, #84]	; 0x54
 800ca18:	e001      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca1a:	7dfb      	ldrb	r3, [r7, #23]
 800ca1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d029      	beq.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800ca32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca36:	d007      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800ca38:	e00f      	b.n	800ca5a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca3a:	4b34      	ldr	r3, [pc, #208]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3e:	4a33      	ldr	r2, [pc, #204]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ca46:	e00b      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	2102      	movs	r1, #2
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 fb8a 	bl	800d168 <RCCEx_PLL2_Config>
 800ca54:	4603      	mov	r3, r0
 800ca56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ca58:	e002      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ca5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d109      	bne.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ca66:	4b29      	ldr	r3, [pc, #164]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca72:	4926      	ldr	r1, [pc, #152]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ca78:	e001      	b.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00a      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3324      	adds	r3, #36	; 0x24
 800ca8e:	2102      	movs	r1, #2
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 fc1b 	bl	800d2cc <RCCEx_PLL3_Config>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d033      	beq.n	800cb14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cab4:	d017      	beq.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800cab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caba:	d811      	bhi.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac0:	d013      	beq.n	800caea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800cac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac6:	d80b      	bhi.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d010      	beq.n	800caee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800cacc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cad0:	d106      	bne.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cad2:	4b0e      	ldr	r3, [pc, #56]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad6:	4a0d      	ldr	r2, [pc, #52]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cadc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cade:	e007      	b.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	75fb      	strb	r3, [r7, #23]
      break;
 800cae4:	e004      	b.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cae6:	bf00      	nop
 800cae8:	e002      	b.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800caea:	bf00      	nop
 800caec:	e000      	b.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800caee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10c      	bne.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800caf6:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800caf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb02:	4902      	ldr	r1, [pc, #8]	; (800cb0c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb04:	4313      	orrs	r3, r2
 800cb06:	654b      	str	r3, [r1, #84]	; 0x54
 800cb08:	e004      	b.n	800cb14 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800cb0a:	bf00      	nop
 800cb0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
 800cb12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d008      	beq.n	800cb32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb20:	4b31      	ldr	r3, [pc, #196]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb2c:	492e      	ldr	r1, [pc, #184]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d009      	beq.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cb3e:	4b2a      	ldr	r3, [pc, #168]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb4c:	4926      	ldr	r1, [pc, #152]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d008      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb5e:	4b22      	ldr	r3, [pc, #136]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb62:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb6a:	491f      	ldr	r1, [pc, #124]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00d      	beq.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb7c:	4b1a      	ldr	r3, [pc, #104]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	4a19      	ldr	r2, [pc, #100]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb86:	6113      	str	r3, [r2, #16]
 800cb88:	4b17      	ldr	r3, [pc, #92]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb8a:	691a      	ldr	r2, [r3, #16]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cb92:	4915      	ldr	r1, [pc, #84]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb94:	4313      	orrs	r3, r2
 800cb96:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da08      	bge.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cba0:	4b11      	ldr	r3, [pc, #68]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbac:	490e      	ldr	r1, [pc, #56]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cbbe:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbcc:	4906      	ldr	r1, [pc, #24]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800cbd2:	7dbb      	ldrb	r3, [r7, #22]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d101      	bne.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	e000      	b.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	58024400 	.word	0x58024400

0800cbec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cbf0:	f7ff f85a 	bl	800bca8 <HAL_RCC_GetHCLKFreq>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	4b06      	ldr	r3, [pc, #24]	; (800cc10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	091b      	lsrs	r3, r3, #4
 800cbfc:	f003 0307 	and.w	r3, r3, #7
 800cc00:	4904      	ldr	r1, [pc, #16]	; (800cc14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cc02:	5ccb      	ldrb	r3, [r1, r3]
 800cc04:	f003 031f 	and.w	r3, r3, #31
 800cc08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	58024400 	.word	0x58024400
 800cc14:	08011070 	.word	0x08011070

0800cc18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b089      	sub	sp, #36	; 0x24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc20:	4ba1      	ldr	r3, [pc, #644]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc24:	f003 0303 	and.w	r3, r3, #3
 800cc28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800cc2a:	4b9f      	ldr	r3, [pc, #636]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2e:	0b1b      	lsrs	r3, r3, #12
 800cc30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cc36:	4b9c      	ldr	r3, [pc, #624]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3a:	091b      	lsrs	r3, r3, #4
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cc42:	4b99      	ldr	r3, [pc, #612]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	08db      	lsrs	r3, r3, #3
 800cc48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	fb02 f303 	mul.w	r3, r2, r3
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 8111 	beq.w	800ce88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	f000 8083 	beq.w	800cd74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	f200 80a1 	bhi.w	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d056      	beq.n	800cd30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cc82:	e099      	b.n	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc84:	4b88      	ldr	r3, [pc, #544]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0320 	and.w	r3, r3, #32
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d02d      	beq.n	800ccec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc90:	4b85      	ldr	r3, [pc, #532]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	08db      	lsrs	r3, r3, #3
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	4a84      	ldr	r2, [pc, #528]	; (800ceac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cc9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cca0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	ee07 3a90 	vmov	s15, r3
 800cca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccba:	4b7b      	ldr	r3, [pc, #492]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ccea:	e087      	b.n	800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ceb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ccfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfe:	4b6a      	ldr	r3, [pc, #424]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd2e:	e065      	b.n	800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd42:	4b59      	ldr	r3, [pc, #356]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4a:	ee07 3a90 	vmov	s15, r3
 800cd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd72:	e043      	b.n	800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	ee07 3a90 	vmov	s15, r3
 800cd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cd82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd86:	4b48      	ldr	r3, [pc, #288]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cda2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdb6:	e021      	b.n	800cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	ee07 3a90 	vmov	s15, r3
 800cdbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cdc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdca:	4b37      	ldr	r3, [pc, #220]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ceb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cde2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cde6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800cdfc:	4b2a      	ldr	r3, [pc, #168]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce00:	0a5b      	lsrs	r3, r3, #9
 800ce02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce22:	ee17 2a90 	vmov	r2, s15
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ce2a:	4b1f      	ldr	r3, [pc, #124]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2e:	0c1b      	lsrs	r3, r3, #16
 800ce30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce34:	ee07 3a90 	vmov	s15, r3
 800ce38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce50:	ee17 2a90 	vmov	r2, s15
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5c:	0e1b      	lsrs	r3, r3, #24
 800ce5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce7e:	ee17 2a90 	vmov	r2, s15
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ce86:	e008      	b.n	800ce9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	609a      	str	r2, [r3, #8]
}
 800ce9a:	bf00      	nop
 800ce9c:	3724      	adds	r7, #36	; 0x24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	58024400 	.word	0x58024400
 800ceac:	03d09000 	.word	0x03d09000
 800ceb0:	46000000 	.word	0x46000000
 800ceb4:	4c742400 	.word	0x4c742400
 800ceb8:	4a742400 	.word	0x4a742400
 800cebc:	4af42400 	.word	0x4af42400

0800cec0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b089      	sub	sp, #36	; 0x24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cec8:	4ba1      	ldr	r3, [pc, #644]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cecc:	f003 0303 	and.w	r3, r3, #3
 800ced0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ced2:	4b9f      	ldr	r3, [pc, #636]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ced4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced6:	0d1b      	lsrs	r3, r3, #20
 800ced8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cedc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cede:	4b9c      	ldr	r3, [pc, #624]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	0a1b      	lsrs	r3, r3, #8
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ceea:	4b99      	ldr	r3, [pc, #612]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceee:	08db      	lsrs	r3, r3, #3
 800cef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	fb02 f303 	mul.w	r3, r2, r3
 800cefa:	ee07 3a90 	vmov	s15, r3
 800cefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 8111 	beq.w	800d130 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	f000 8083 	beq.w	800d01c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	f200 80a1 	bhi.w	800d060 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d003      	beq.n	800cf2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d056      	beq.n	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cf2a:	e099      	b.n	800d060 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf2c:	4b88      	ldr	r3, [pc, #544]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 0320 	and.w	r3, r3, #32
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d02d      	beq.n	800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cf38:	4b85      	ldr	r3, [pc, #532]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	08db      	lsrs	r3, r3, #3
 800cf3e:	f003 0303 	and.w	r3, r3, #3
 800cf42:	4a84      	ldr	r2, [pc, #528]	; (800d154 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cf44:	fa22 f303 	lsr.w	r3, r2, r3
 800cf48:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	ee07 3a90 	vmov	s15, r3
 800cf50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	ee07 3a90 	vmov	s15, r3
 800cf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf62:	4b7b      	ldr	r3, [pc, #492]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6a:	ee07 3a90 	vmov	s15, r3
 800cf6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cf92:	e087      	b.n	800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d15c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa6:	4b6a      	ldr	r3, [pc, #424]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfae:	ee07 3a90 	vmov	s15, r3
 800cfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cfd6:	e065      	b.n	800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfea:	4b59      	ldr	r3, [pc, #356]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff2:	ee07 3a90 	vmov	s15, r3
 800cff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cffa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cffe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d01a:	e043      	b.n	800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	ee07 3a90 	vmov	s15, r3
 800d022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d026:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d02e:	4b48      	ldr	r3, [pc, #288]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d036:	ee07 3a90 	vmov	s15, r3
 800d03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d042:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d05e:	e021      	b.n	800d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	ee07 3a90 	vmov	s15, r3
 800d066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d06a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d072:	4b37      	ldr	r3, [pc, #220]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d07a:	ee07 3a90 	vmov	s15, r3
 800d07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d082:	ed97 6a03 	vldr	s12, [r7, #12]
 800d086:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d158 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d09e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d0a4:	4b2a      	ldr	r3, [pc, #168]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a8:	0a5b      	lsrs	r3, r3, #9
 800d0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ae:	ee07 3a90 	vmov	s15, r3
 800d0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ca:	ee17 2a90 	vmov	r2, s15
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d0d2:	4b1f      	ldr	r3, [pc, #124]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d6:	0c1b      	lsrs	r3, r3, #16
 800d0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0dc:	ee07 3a90 	vmov	s15, r3
 800d0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0f8:	ee17 2a90 	vmov	r2, s15
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d100:	4b13      	ldr	r3, [pc, #76]	; (800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d104:	0e1b      	lsrs	r3, r3, #24
 800d106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10a:	ee07 3a90 	vmov	s15, r3
 800d10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d11a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d11e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d126:	ee17 2a90 	vmov	r2, s15
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d12e:	e008      	b.n	800d142 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	609a      	str	r2, [r3, #8]
}
 800d142:	bf00      	nop
 800d144:	3724      	adds	r7, #36	; 0x24
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	58024400 	.word	0x58024400
 800d154:	03d09000 	.word	0x03d09000
 800d158:	46000000 	.word	0x46000000
 800d15c:	4c742400 	.word	0x4c742400
 800d160:	4a742400 	.word	0x4a742400
 800d164:	4af42400 	.word	0x4af42400

0800d168 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d176:	4b53      	ldr	r3, [pc, #332]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17a:	f003 0303 	and.w	r3, r3, #3
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d101      	bne.n	800d186 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	e099      	b.n	800d2ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d186:	4b4f      	ldr	r3, [pc, #316]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a4e      	ldr	r2, [pc, #312]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d18c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d192:	f7fa faa5 	bl	80076e0 <HAL_GetTick>
 800d196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d198:	e008      	b.n	800d1ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d19a:	f7fa faa1 	bl	80076e0 <HAL_GetTick>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d901      	bls.n	800d1ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	e086      	b.n	800d2ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1ac:	4b45      	ldr	r3, [pc, #276]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1f0      	bne.n	800d19a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1b8:	4b42      	ldr	r3, [pc, #264]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	031b      	lsls	r3, r3, #12
 800d1c6:	493f      	ldr	r1, [pc, #252]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	628b      	str	r3, [r1, #40]	; 0x28
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	025b      	lsls	r3, r3, #9
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	431a      	orrs	r2, r3
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	041b      	lsls	r3, r3, #16
 800d1ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	061b      	lsls	r3, r3, #24
 800d1f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1fc:	4931      	ldr	r1, [pc, #196]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d1fe:	4313      	orrs	r3, r2
 800d200:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d202:	4b30      	ldr	r3, [pc, #192]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d206:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	492d      	ldr	r1, [pc, #180]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d210:	4313      	orrs	r3, r2
 800d212:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d214:	4b2b      	ldr	r3, [pc, #172]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d218:	f023 0220 	bic.w	r2, r3, #32
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	699b      	ldr	r3, [r3, #24]
 800d220:	4928      	ldr	r1, [pc, #160]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d222:	4313      	orrs	r3, r2
 800d224:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d226:	4b27      	ldr	r3, [pc, #156]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	4a26      	ldr	r2, [pc, #152]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d22c:	f023 0310 	bic.w	r3, r3, #16
 800d230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d232:	4b24      	ldr	r3, [pc, #144]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d236:	4b24      	ldr	r3, [pc, #144]	; (800d2c8 <RCCEx_PLL2_Config+0x160>)
 800d238:	4013      	ands	r3, r2
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	69d2      	ldr	r2, [r2, #28]
 800d23e:	00d2      	lsls	r2, r2, #3
 800d240:	4920      	ldr	r1, [pc, #128]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d242:	4313      	orrs	r3, r2
 800d244:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d246:	4b1f      	ldr	r3, [pc, #124]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24a:	4a1e      	ldr	r2, [pc, #120]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d24c:	f043 0310 	orr.w	r3, r3, #16
 800d250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d106      	bne.n	800d266 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d258:	4b1a      	ldr	r3, [pc, #104]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	4a19      	ldr	r2, [pc, #100]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d25e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d262:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d264:	e00f      	b.n	800d286 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d106      	bne.n	800d27a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d26c:	4b15      	ldr	r3, [pc, #84]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d270:	4a14      	ldr	r2, [pc, #80]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d276:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d278:	e005      	b.n	800d286 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d27a:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27e:	4a11      	ldr	r2, [pc, #68]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d284:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d286:	4b0f      	ldr	r3, [pc, #60]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a0e      	ldr	r2, [pc, #56]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d28c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d292:	f7fa fa25 	bl	80076e0 <HAL_GetTick>
 800d296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d298:	e008      	b.n	800d2ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d29a:	f7fa fa21 	bl	80076e0 <HAL_GetTick>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d901      	bls.n	800d2ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e006      	b.n	800d2ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2ac:	4b05      	ldr	r3, [pc, #20]	; (800d2c4 <RCCEx_PLL2_Config+0x15c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d0f0      	beq.n	800d29a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	58024400 	.word	0x58024400
 800d2c8:	ffff0007 	.word	0xffff0007

0800d2cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2da:	4b53      	ldr	r3, [pc, #332]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2de:	f003 0303 	and.w	r3, r3, #3
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d101      	bne.n	800d2ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e099      	b.n	800d41e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d2ea:	4b4f      	ldr	r3, [pc, #316]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a4e      	ldr	r2, [pc, #312]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d2f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2f6:	f7fa f9f3 	bl	80076e0 <HAL_GetTick>
 800d2fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2fc:	e008      	b.n	800d310 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d2fe:	f7fa f9ef 	bl	80076e0 <HAL_GetTick>
 800d302:	4602      	mov	r2, r0
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d901      	bls.n	800d310 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d30c:	2303      	movs	r3, #3
 800d30e:	e086      	b.n	800d41e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d310:	4b45      	ldr	r3, [pc, #276]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1f0      	bne.n	800d2fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d31c:	4b42      	ldr	r3, [pc, #264]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d320:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	051b      	lsls	r3, r3, #20
 800d32a:	493f      	ldr	r1, [pc, #252]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d32c:	4313      	orrs	r3, r2
 800d32e:	628b      	str	r3, [r1, #40]	; 0x28
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	3b01      	subs	r3, #1
 800d336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	3b01      	subs	r3, #1
 800d340:	025b      	lsls	r3, r3, #9
 800d342:	b29b      	uxth	r3, r3
 800d344:	431a      	orrs	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	3b01      	subs	r3, #1
 800d34c:	041b      	lsls	r3, r3, #16
 800d34e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d352:	431a      	orrs	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	3b01      	subs	r3, #1
 800d35a:	061b      	lsls	r3, r3, #24
 800d35c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d360:	4931      	ldr	r1, [pc, #196]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d362:	4313      	orrs	r3, r2
 800d364:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d366:	4b30      	ldr	r3, [pc, #192]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d36a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	695b      	ldr	r3, [r3, #20]
 800d372:	492d      	ldr	r1, [pc, #180]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d374:	4313      	orrs	r3, r2
 800d376:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d378:	4b2b      	ldr	r3, [pc, #172]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	699b      	ldr	r3, [r3, #24]
 800d384:	4928      	ldr	r1, [pc, #160]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d386:	4313      	orrs	r3, r2
 800d388:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d38a:	4b27      	ldr	r3, [pc, #156]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38e:	4a26      	ldr	r2, [pc, #152]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d394:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d396:	4b24      	ldr	r3, [pc, #144]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d39a:	4b24      	ldr	r3, [pc, #144]	; (800d42c <RCCEx_PLL3_Config+0x160>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	69d2      	ldr	r2, [r2, #28]
 800d3a2:	00d2      	lsls	r2, r2, #3
 800d3a4:	4920      	ldr	r1, [pc, #128]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3aa:	4b1f      	ldr	r3, [pc, #124]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ae:	4a1e      	ldr	r2, [pc, #120]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3bc:	4b1a      	ldr	r3, [pc, #104]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	4a19      	ldr	r2, [pc, #100]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3c8:	e00f      	b.n	800d3ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d106      	bne.n	800d3de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3d0:	4b15      	ldr	r3, [pc, #84]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d4:	4a14      	ldr	r2, [pc, #80]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d3da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3dc:	e005      	b.n	800d3ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d3de:	4b12      	ldr	r3, [pc, #72]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e2:	4a11      	ldr	r2, [pc, #68]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d3ea:	4b0f      	ldr	r3, [pc, #60]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a0e      	ldr	r2, [pc, #56]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3f6:	f7fa f973 	bl	80076e0 <HAL_GetTick>
 800d3fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3fc:	e008      	b.n	800d410 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d3fe:	f7fa f96f 	bl	80076e0 <HAL_GetTick>
 800d402:	4602      	mov	r2, r0
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d901      	bls.n	800d410 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d40c:	2303      	movs	r3, #3
 800d40e:	e006      	b.n	800d41e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d410:	4b05      	ldr	r3, [pc, #20]	; (800d428 <RCCEx_PLL3_Config+0x15c>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d0f0      	beq.n	800d3fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	58024400 	.word	0x58024400
 800d42c:	ffff0007 	.word	0xffff0007

0800d430 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d101      	bne.n	800d442 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	e0f1      	b.n	800d626 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a78      	ldr	r2, [pc, #480]	; (800d630 <HAL_SPI_Init+0x200>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d00f      	beq.n	800d472 <HAL_SPI_Init+0x42>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a77      	ldr	r2, [pc, #476]	; (800d634 <HAL_SPI_Init+0x204>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d00a      	beq.n	800d472 <HAL_SPI_Init+0x42>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a75      	ldr	r2, [pc, #468]	; (800d638 <HAL_SPI_Init+0x208>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d005      	beq.n	800d472 <HAL_SPI_Init+0x42>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	2b0f      	cmp	r3, #15
 800d46c:	d901      	bls.n	800d472 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	e0d9      	b.n	800d626 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fba2 	bl	800dbbc <SPI_GetPacketSize>
 800d478:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a6c      	ldr	r2, [pc, #432]	; (800d630 <HAL_SPI_Init+0x200>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d00c      	beq.n	800d49e <HAL_SPI_Init+0x6e>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a6a      	ldr	r2, [pc, #424]	; (800d634 <HAL_SPI_Init+0x204>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d007      	beq.n	800d49e <HAL_SPI_Init+0x6e>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a69      	ldr	r2, [pc, #420]	; (800d638 <HAL_SPI_Init+0x208>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d002      	beq.n	800d49e <HAL_SPI_Init+0x6e>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b08      	cmp	r3, #8
 800d49c:	d811      	bhi.n	800d4c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d4a2:	4a63      	ldr	r2, [pc, #396]	; (800d630 <HAL_SPI_Init+0x200>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d009      	beq.n	800d4bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a61      	ldr	r2, [pc, #388]	; (800d634 <HAL_SPI_Init+0x204>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d004      	beq.n	800d4bc <HAL_SPI_Init+0x8c>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a60      	ldr	r2, [pc, #384]	; (800d638 <HAL_SPI_Init+0x208>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d104      	bne.n	800d4c6 <HAL_SPI_Init+0x96>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2b10      	cmp	r3, #16
 800d4c0:	d901      	bls.n	800d4c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e0af      	b.n	800d626 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7f9 fe08 	bl	80070f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f022 0201 	bic.w	r2, r2, #1
 800d4f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d502:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d50c:	d119      	bne.n	800d542 <HAL_SPI_Init+0x112>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d516:	d103      	bne.n	800d520 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d008      	beq.n	800d532 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10c      	bne.n	800d542 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d52c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d530:	d107      	bne.n	800d542 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d540:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	69da      	ldr	r2, [r3, #28]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	431a      	orrs	r2, r3
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	431a      	orrs	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d554:	ea42 0103 	orr.w	r1, r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	68da      	ldr	r2, [r3, #12]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	430a      	orrs	r2, r1
 800d562:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56c:	431a      	orrs	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d572:	431a      	orrs	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	699b      	ldr	r3, [r3, #24]
 800d578:	431a      	orrs	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	431a      	orrs	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	695b      	ldr	r3, [r3, #20]
 800d584:	431a      	orrs	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a1b      	ldr	r3, [r3, #32]
 800d58a:	431a      	orrs	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	431a      	orrs	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d596:	431a      	orrs	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	431a      	orrs	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5a2:	ea42 0103 	orr.w	r1, r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	430a      	orrs	r2, r1
 800d5b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d113      	bne.n	800d5e2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d5e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f022 0201 	bic.w	r2, r2, #1
 800d5f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00a      	beq.n	800d614 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	430a      	orrs	r2, r1
 800d612:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	40013000 	.word	0x40013000
 800d634:	40003800 	.word	0x40003800
 800d638:	40003c00 	.word	0x40003c00

0800d63c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08a      	sub	sp, #40	; 0x28
 800d640:	af02      	add	r7, sp, #8
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	603b      	str	r3, [r7, #0]
 800d648:	4613      	mov	r3, r2
 800d64a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3320      	adds	r3, #32
 800d652:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d101      	bne.n	800d666 <HAL_SPI_Transmit+0x2a>
 800d662:	2302      	movs	r3, #2
 800d664:	e1d7      	b.n	800da16 <HAL_SPI_Transmit+0x3da>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d66e:	f7fa f837 	bl	80076e0 <HAL_GetTick>
 800d672:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d007      	beq.n	800d690 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d680:	2302      	movs	r3, #2
 800d682:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d68c:	7efb      	ldrb	r3, [r7, #27]
 800d68e:	e1c2      	b.n	800da16 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <HAL_SPI_Transmit+0x60>
 800d696:	88fb      	ldrh	r3, [r7, #6]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d107      	bne.n	800d6ac <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d6a8:	7efb      	ldrb	r3, [r7, #27]
 800d6aa:	e1b4      	b.n	800da16 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2203      	movs	r2, #3
 800d6b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	88fa      	ldrh	r2, [r7, #6]
 800d6c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	88fa      	ldrh	r2, [r7, #6]
 800d6ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d6fc:	d107      	bne.n	800d70e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d70c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	4b96      	ldr	r3, [pc, #600]	; (800d970 <HAL_SPI_Transmit+0x334>)
 800d716:	4013      	ands	r3, r2
 800d718:	88f9      	ldrh	r1, [r7, #6]
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	6812      	ldr	r2, [r2, #0]
 800d71e:	430b      	orrs	r3, r1
 800d720:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f042 0201 	orr.w	r2, r2, #1
 800d730:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d73a:	d107      	bne.n	800d74c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d74a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	2b0f      	cmp	r3, #15
 800d752:	d947      	bls.n	800d7e4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d754:	e03f      	b.n	800d7d6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	f003 0302 	and.w	r3, r3, #2
 800d760:	2b02      	cmp	r3, #2
 800d762:	d114      	bne.n	800d78e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6812      	ldr	r2, [r2, #0]
 800d76e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d774:	1d1a      	adds	r2, r3, #4
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d780:	b29b      	uxth	r3, r3
 800d782:	3b01      	subs	r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d78c:	e023      	b.n	800d7d6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d78e:	f7f9 ffa7 	bl	80076e0 <HAL_GetTick>
 800d792:	4602      	mov	r2, r0
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	683a      	ldr	r2, [r7, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d803      	bhi.n	800d7a6 <HAL_SPI_Transmit+0x16a>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a4:	d102      	bne.n	800d7ac <HAL_SPI_Transmit+0x170>
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d114      	bne.n	800d7d6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f000 f937 	bl	800da20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e11f      	b.n	800da16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1b9      	bne.n	800d756 <HAL_SPI_Transmit+0x11a>
 800d7e2:	e0f2      	b.n	800d9ca <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	2b07      	cmp	r3, #7
 800d7ea:	f240 80e7 	bls.w	800d9bc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d7ee:	e05d      	b.n	800d8ac <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	695b      	ldr	r3, [r3, #20]
 800d7f6:	f003 0302 	and.w	r3, r3, #2
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d132      	bne.n	800d864 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d804:	b29b      	uxth	r3, r3
 800d806:	2b01      	cmp	r3, #1
 800d808:	d918      	bls.n	800d83c <HAL_SPI_Transmit+0x200>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d014      	beq.n	800d83c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6812      	ldr	r2, [r2, #0]
 800d81c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d822:	1d1a      	adds	r2, r3, #4
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d82e:	b29b      	uxth	r3, r3
 800d830:	3b02      	subs	r3, #2
 800d832:	b29a      	uxth	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d83a:	e037      	b.n	800d8ac <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d840:	881a      	ldrh	r2, [r3, #0]
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d84a:	1c9a      	adds	r2, r3, #2
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d856:	b29b      	uxth	r3, r3
 800d858:	3b01      	subs	r3, #1
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d862:	e023      	b.n	800d8ac <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d864:	f7f9 ff3c 	bl	80076e0 <HAL_GetTick>
 800d868:	4602      	mov	r2, r0
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	1ad3      	subs	r3, r2, r3
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	429a      	cmp	r2, r3
 800d872:	d803      	bhi.n	800d87c <HAL_SPI_Transmit+0x240>
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87a:	d102      	bne.n	800d882 <HAL_SPI_Transmit+0x246>
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d114      	bne.n	800d8ac <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f000 f8cc 	bl	800da20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d896:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e0b4      	b.n	800da16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d19b      	bne.n	800d7f0 <HAL_SPI_Transmit+0x1b4>
 800d8b8:	e087      	b.n	800d9ca <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	695b      	ldr	r3, [r3, #20]
 800d8c0:	f003 0302 	and.w	r3, r3, #2
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d155      	bne.n	800d974 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d918      	bls.n	800d906 <HAL_SPI_Transmit+0x2ca>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d8:	2b40      	cmp	r3, #64	; 0x40
 800d8da:	d914      	bls.n	800d906 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6812      	ldr	r2, [r2, #0]
 800d8e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ec:	1d1a      	adds	r2, r3, #4
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	3b04      	subs	r3, #4
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d904:	e05a      	b.n	800d9bc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d917      	bls.n	800d942 <HAL_SPI_Transmit+0x306>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d916:	2b00      	cmp	r3, #0
 800d918:	d013      	beq.n	800d942 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d91e:	881a      	ldrh	r2, [r3, #0]
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d928:	1c9a      	adds	r2, r3, #2
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d934:	b29b      	uxth	r3, r3
 800d936:	3b02      	subs	r3, #2
 800d938:	b29a      	uxth	r2, r3
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d940:	e03c      	b.n	800d9bc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3320      	adds	r3, #32
 800d94c:	7812      	ldrb	r2, [r2, #0]
 800d94e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d954:	1c5a      	adds	r2, r3, #1
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d960:	b29b      	uxth	r3, r3
 800d962:	3b01      	subs	r3, #1
 800d964:	b29a      	uxth	r2, r3
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d96c:	e026      	b.n	800d9bc <HAL_SPI_Transmit+0x380>
 800d96e:	bf00      	nop
 800d970:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d974:	f7f9 feb4 	bl	80076e0 <HAL_GetTick>
 800d978:	4602      	mov	r2, r0
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	429a      	cmp	r2, r3
 800d982:	d803      	bhi.n	800d98c <HAL_SPI_Transmit+0x350>
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98a:	d102      	bne.n	800d992 <HAL_SPI_Transmit+0x356>
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d114      	bne.n	800d9bc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 f844 	bl	800da20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d9b8:	2303      	movs	r3, #3
 800d9ba:	e02c      	b.n	800da16 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f47f af78 	bne.w	800d8ba <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2108      	movs	r1, #8
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f000 f8c3 	bl	800db60 <SPI_WaitOnFlagUntilTimeout>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d007      	beq.n	800d9f0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9e6:	f043 0220 	orr.w	r2, r3, #32
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 f815 	bl	800da20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800da10:	2301      	movs	r3, #1
 800da12:	e000      	b.n	800da16 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800da14:	7efb      	ldrb	r3, [r7, #27]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3720      	adds	r7, #32
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop

0800da20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	695b      	ldr	r3, [r3, #20]
 800da2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	699a      	ldr	r2, [r3, #24]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f042 0208 	orr.w	r2, r2, #8
 800da3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	699a      	ldr	r2, [r3, #24]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f042 0210 	orr.w	r2, r2, #16
 800da4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f022 0201 	bic.w	r2, r2, #1
 800da5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6919      	ldr	r1, [r3, #16]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	4b3c      	ldr	r3, [pc, #240]	; (800db5c <SPI_CloseTransfer+0x13c>)
 800da6c:	400b      	ands	r3, r1
 800da6e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	689a      	ldr	r2, [r3, #8]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800da7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b04      	cmp	r3, #4
 800da8a:	d014      	beq.n	800dab6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f003 0320 	and.w	r3, r3, #32
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00f      	beq.n	800dab6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	699a      	ldr	r2, [r3, #24]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f042 0220 	orr.w	r2, r2, #32
 800dab4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d014      	beq.n	800daec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00f      	beq.n	800daec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dad2:	f043 0204 	orr.w	r2, r3, #4
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	699a      	ldr	r2, [r3, #24]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800daea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00f      	beq.n	800db16 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dafc:	f043 0201 	orr.w	r2, r3, #1
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	699a      	ldr	r2, [r3, #24]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00f      	beq.n	800db40 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db26:	f043 0208 	orr.w	r2, r3, #8
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699a      	ldr	r2, [r3, #24]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800db50:	bf00      	nop
 800db52:	3714      	adds	r7, #20
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	fffffc90 	.word	0xfffffc90

0800db60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	603b      	str	r3, [r7, #0]
 800db6c:	4613      	mov	r3, r2
 800db6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800db70:	e010      	b.n	800db94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db72:	f7f9 fdb5 	bl	80076e0 <HAL_GetTick>
 800db76:	4602      	mov	r2, r0
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	1ad3      	subs	r3, r2, r3
 800db7c:	69ba      	ldr	r2, [r7, #24]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d803      	bhi.n	800db8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db88:	d102      	bne.n	800db90 <SPI_WaitOnFlagUntilTimeout+0x30>
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800db90:	2303      	movs	r3, #3
 800db92:	e00f      	b.n	800dbb4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	695a      	ldr	r2, [r3, #20]
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	4013      	ands	r3, r2
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	bf0c      	ite	eq
 800dba4:	2301      	moveq	r3, #1
 800dba6:	2300      	movne	r3, #0
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	461a      	mov	r2, r3
 800dbac:	79fb      	ldrb	r3, [r7, #7]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d0df      	beq.n	800db72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc8:	095b      	lsrs	r3, r3, #5
 800dbca:	3301      	adds	r3, #1
 800dbcc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	3307      	adds	r3, #7
 800dbda:	08db      	lsrs	r3, r3, #3
 800dbdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	fb02 f303 	mul.w	r3, r2, r3
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e049      	b.n	800dc98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d106      	bne.n	800dc1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7f9 fad5 	bl	80071c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2202      	movs	r2, #2
 800dc22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4610      	mov	r0, r2
 800dc32:	f000 fa23 	bl	800e07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2201      	movs	r2, #1
 800dc62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2201      	movs	r2, #1
 800dc92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d001      	beq.n	800dcb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e054      	b.n	800dd62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2202      	movs	r2, #2
 800dcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	68da      	ldr	r2, [r3, #12]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f042 0201 	orr.w	r2, r2, #1
 800dcce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a26      	ldr	r2, [pc, #152]	; (800dd70 <HAL_TIM_Base_Start_IT+0xd0>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d022      	beq.n	800dd20 <HAL_TIM_Base_Start_IT+0x80>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dce2:	d01d      	beq.n	800dd20 <HAL_TIM_Base_Start_IT+0x80>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a22      	ldr	r2, [pc, #136]	; (800dd74 <HAL_TIM_Base_Start_IT+0xd4>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d018      	beq.n	800dd20 <HAL_TIM_Base_Start_IT+0x80>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a21      	ldr	r2, [pc, #132]	; (800dd78 <HAL_TIM_Base_Start_IT+0xd8>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d013      	beq.n	800dd20 <HAL_TIM_Base_Start_IT+0x80>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a1f      	ldr	r2, [pc, #124]	; (800dd7c <HAL_TIM_Base_Start_IT+0xdc>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d00e      	beq.n	800dd20 <HAL_TIM_Base_Start_IT+0x80>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a1e      	ldr	r2, [pc, #120]	; (800dd80 <HAL_TIM_Base_Start_IT+0xe0>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d009      	beq.n	800dd20 <HAL_TIM_Base_Start_IT+0x80>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a1c      	ldr	r2, [pc, #112]	; (800dd84 <HAL_TIM_Base_Start_IT+0xe4>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d004      	beq.n	800dd20 <HAL_TIM_Base_Start_IT+0x80>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a1b      	ldr	r2, [pc, #108]	; (800dd88 <HAL_TIM_Base_Start_IT+0xe8>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d115      	bne.n	800dd4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	689a      	ldr	r2, [r3, #8]
 800dd26:	4b19      	ldr	r3, [pc, #100]	; (800dd8c <HAL_TIM_Base_Start_IT+0xec>)
 800dd28:	4013      	ands	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2b06      	cmp	r3, #6
 800dd30:	d015      	beq.n	800dd5e <HAL_TIM_Base_Start_IT+0xbe>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd38:	d011      	beq.n	800dd5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f042 0201 	orr.w	r2, r2, #1
 800dd48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd4a:	e008      	b.n	800dd5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f042 0201 	orr.w	r2, r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]
 800dd5c:	e000      	b.n	800dd60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3714      	adds	r7, #20
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	40010000 	.word	0x40010000
 800dd74:	40000400 	.word	0x40000400
 800dd78:	40000800 	.word	0x40000800
 800dd7c:	40000c00 	.word	0x40000c00
 800dd80:	40010400 	.word	0x40010400
 800dd84:	40001800 	.word	0x40001800
 800dd88:	40014000 	.word	0x40014000
 800dd8c:	00010007 	.word	0x00010007

0800dd90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b083      	sub	sp, #12
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68da      	ldr	r2, [r3, #12]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f022 0201 	bic.w	r2, r2, #1
 800dda6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6a1a      	ldr	r2, [r3, #32]
 800ddae:	f241 1311 	movw	r3, #4369	; 0x1111
 800ddb2:	4013      	ands	r3, r2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10f      	bne.n	800ddd8 <HAL_TIM_Base_Stop_IT+0x48>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6a1a      	ldr	r2, [r3, #32]
 800ddbe:	f240 4344 	movw	r3, #1092	; 0x444
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d107      	bne.n	800ddd8 <HAL_TIM_Base_Stop_IT+0x48>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f022 0201 	bic.w	r2, r2, #1
 800ddd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	370c      	adds	r7, #12
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b082      	sub	sp, #8
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	f003 0302 	and.w	r3, r3, #2
 800de00:	2b02      	cmp	r3, #2
 800de02:	d122      	bne.n	800de4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	f003 0302 	and.w	r3, r3, #2
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d11b      	bne.n	800de4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f06f 0202 	mvn.w	r2, #2
 800de1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	699b      	ldr	r3, [r3, #24]
 800de28:	f003 0303 	and.w	r3, r3, #3
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d003      	beq.n	800de38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 f905 	bl	800e040 <HAL_TIM_IC_CaptureCallback>
 800de36:	e005      	b.n	800de44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f8f7 	bl	800e02c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f908 	bl	800e054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	f003 0304 	and.w	r3, r3, #4
 800de54:	2b04      	cmp	r3, #4
 800de56:	d122      	bne.n	800de9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	f003 0304 	and.w	r3, r3, #4
 800de62:	2b04      	cmp	r3, #4
 800de64:	d11b      	bne.n	800de9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f06f 0204 	mvn.w	r2, #4
 800de6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	699b      	ldr	r3, [r3, #24]
 800de7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de80:	2b00      	cmp	r3, #0
 800de82:	d003      	beq.n	800de8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 f8db 	bl	800e040 <HAL_TIM_IC_CaptureCallback>
 800de8a:	e005      	b.n	800de98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f8cd 	bl	800e02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f8de 	bl	800e054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	f003 0308 	and.w	r3, r3, #8
 800dea8:	2b08      	cmp	r3, #8
 800deaa:	d122      	bne.n	800def2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	f003 0308 	and.w	r3, r3, #8
 800deb6:	2b08      	cmp	r3, #8
 800deb8:	d11b      	bne.n	800def2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f06f 0208 	mvn.w	r2, #8
 800dec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2204      	movs	r2, #4
 800dec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	69db      	ldr	r3, [r3, #28]
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d003      	beq.n	800dee0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 f8b1 	bl	800e040 <HAL_TIM_IC_CaptureCallback>
 800dede:	e005      	b.n	800deec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f8a3 	bl	800e02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 f8b4 	bl	800e054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	f003 0310 	and.w	r3, r3, #16
 800defc:	2b10      	cmp	r3, #16
 800defe:	d122      	bne.n	800df46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	f003 0310 	and.w	r3, r3, #16
 800df0a:	2b10      	cmp	r3, #16
 800df0c:	d11b      	bne.n	800df46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f06f 0210 	mvn.w	r2, #16
 800df16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2208      	movs	r2, #8
 800df1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	69db      	ldr	r3, [r3, #28]
 800df24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 f887 	bl	800e040 <HAL_TIM_IC_CaptureCallback>
 800df32:	e005      	b.n	800df40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 f879 	bl	800e02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f88a 	bl	800e054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	2b01      	cmp	r3, #1
 800df52:	d10e      	bne.n	800df72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	f003 0301 	and.w	r3, r3, #1
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d107      	bne.n	800df72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f06f 0201 	mvn.w	r2, #1
 800df6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7f8 fb95 	bl	800669c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df7c:	2b80      	cmp	r3, #128	; 0x80
 800df7e:	d10e      	bne.n	800df9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df8a:	2b80      	cmp	r3, #128	; 0x80
 800df8c:	d107      	bne.n	800df9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 f9a1 	bl	800e2e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfac:	d10e      	bne.n	800dfcc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfb8:	2b80      	cmp	r3, #128	; 0x80
 800dfba:	d107      	bne.n	800dfcc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dfc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f994 	bl	800e2f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	691b      	ldr	r3, [r3, #16]
 800dfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd6:	2b40      	cmp	r3, #64	; 0x40
 800dfd8:	d10e      	bne.n	800dff8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe4:	2b40      	cmp	r3, #64	; 0x40
 800dfe6:	d107      	bne.n	800dff8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 f838 	bl	800e068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	691b      	ldr	r3, [r3, #16]
 800dffe:	f003 0320 	and.w	r3, r3, #32
 800e002:	2b20      	cmp	r3, #32
 800e004:	d10e      	bne.n	800e024 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	f003 0320 	and.w	r3, r3, #32
 800e010:	2b20      	cmp	r3, #32
 800e012:	d107      	bne.n	800e024 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f06f 0220 	mvn.w	r2, #32
 800e01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 f954 	bl	800e2cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e024:	bf00      	nop
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e048:	bf00      	nop
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e05c:	bf00      	nop
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e070:	bf00      	nop
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4a40      	ldr	r2, [pc, #256]	; (800e190 <TIM_Base_SetConfig+0x114>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d013      	beq.n	800e0bc <TIM_Base_SetConfig+0x40>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e09a:	d00f      	beq.n	800e0bc <TIM_Base_SetConfig+0x40>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4a3d      	ldr	r2, [pc, #244]	; (800e194 <TIM_Base_SetConfig+0x118>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d00b      	beq.n	800e0bc <TIM_Base_SetConfig+0x40>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	4a3c      	ldr	r2, [pc, #240]	; (800e198 <TIM_Base_SetConfig+0x11c>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d007      	beq.n	800e0bc <TIM_Base_SetConfig+0x40>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4a3b      	ldr	r2, [pc, #236]	; (800e19c <TIM_Base_SetConfig+0x120>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d003      	beq.n	800e0bc <TIM_Base_SetConfig+0x40>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4a3a      	ldr	r2, [pc, #232]	; (800e1a0 <TIM_Base_SetConfig+0x124>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d108      	bne.n	800e0ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4a2f      	ldr	r2, [pc, #188]	; (800e190 <TIM_Base_SetConfig+0x114>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d01f      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0dc:	d01b      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4a2c      	ldr	r2, [pc, #176]	; (800e194 <TIM_Base_SetConfig+0x118>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d017      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4a2b      	ldr	r2, [pc, #172]	; (800e198 <TIM_Base_SetConfig+0x11c>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d013      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a2a      	ldr	r2, [pc, #168]	; (800e19c <TIM_Base_SetConfig+0x120>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d00f      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4a29      	ldr	r2, [pc, #164]	; (800e1a0 <TIM_Base_SetConfig+0x124>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d00b      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4a28      	ldr	r2, [pc, #160]	; (800e1a4 <TIM_Base_SetConfig+0x128>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d007      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4a27      	ldr	r2, [pc, #156]	; (800e1a8 <TIM_Base_SetConfig+0x12c>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d003      	beq.n	800e116 <TIM_Base_SetConfig+0x9a>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4a26      	ldr	r2, [pc, #152]	; (800e1ac <TIM_Base_SetConfig+0x130>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d108      	bne.n	800e128 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e11c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	4313      	orrs	r3, r2
 800e126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	695b      	ldr	r3, [r3, #20]
 800e132:	4313      	orrs	r3, r2
 800e134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a10      	ldr	r2, [pc, #64]	; (800e190 <TIM_Base_SetConfig+0x114>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d00f      	beq.n	800e174 <TIM_Base_SetConfig+0xf8>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a12      	ldr	r2, [pc, #72]	; (800e1a0 <TIM_Base_SetConfig+0x124>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d00b      	beq.n	800e174 <TIM_Base_SetConfig+0xf8>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a11      	ldr	r2, [pc, #68]	; (800e1a4 <TIM_Base_SetConfig+0x128>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d007      	beq.n	800e174 <TIM_Base_SetConfig+0xf8>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a10      	ldr	r2, [pc, #64]	; (800e1a8 <TIM_Base_SetConfig+0x12c>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d003      	beq.n	800e174 <TIM_Base_SetConfig+0xf8>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a0f      	ldr	r2, [pc, #60]	; (800e1ac <TIM_Base_SetConfig+0x130>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d103      	bne.n	800e17c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	691a      	ldr	r2, [r3, #16]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	615a      	str	r2, [r3, #20]
}
 800e182:	bf00      	nop
 800e184:	3714      	adds	r7, #20
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	40010000 	.word	0x40010000
 800e194:	40000400 	.word	0x40000400
 800e198:	40000800 	.word	0x40000800
 800e19c:	40000c00 	.word	0x40000c00
 800e1a0:	40010400 	.word	0x40010400
 800e1a4:	40014000 	.word	0x40014000
 800e1a8:	40014400 	.word	0x40014400
 800e1ac:	40014800 	.word	0x40014800

0800e1b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d101      	bne.n	800e1c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	e06d      	b.n	800e2a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a30      	ldr	r2, [pc, #192]	; (800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d004      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a2f      	ldr	r2, [pc, #188]	; (800e2b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d108      	bne.n	800e20e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	4313      	orrs	r3, r2
 800e20c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a20      	ldr	r2, [pc, #128]	; (800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d022      	beq.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e23a:	d01d      	beq.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4a1d      	ldr	r2, [pc, #116]	; (800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d018      	beq.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a1c      	ldr	r2, [pc, #112]	; (800e2bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d013      	beq.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a1a      	ldr	r2, [pc, #104]	; (800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d00e      	beq.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4a15      	ldr	r2, [pc, #84]	; (800e2b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d009      	beq.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a16      	ldr	r2, [pc, #88]	; (800e2c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d004      	beq.n	800e278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a15      	ldr	r2, [pc, #84]	; (800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d10c      	bne.n	800e292 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e27e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	4313      	orrs	r3, r2
 800e288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2201      	movs	r2, #1
 800e296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3714      	adds	r7, #20
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	40010000 	.word	0x40010000
 800e2b4:	40010400 	.word	0x40010400
 800e2b8:	40000400 	.word	0x40000400
 800e2bc:	40000800 	.word	0x40000800
 800e2c0:	40000c00 	.word	0x40000c00
 800e2c4:	40001800 	.word	0x40001800
 800e2c8:	40014000 	.word	0x40014000

0800e2cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2d4:	bf00      	nop
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2e8:	bf00      	nop
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d101      	bne.n	800e31a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e316:	2301      	movs	r3, #1
 800e318:	e042      	b.n	800e3a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e320:	2b00      	cmp	r3, #0
 800e322:	d106      	bne.n	800e332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7f8 ff73 	bl	8007218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2224      	movs	r2, #36	; 0x24
 800e336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f022 0201 	bic.w	r2, r2, #1
 800e348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fbea 	bl	800eb24 <UART_SetConfig>
 800e350:	4603      	mov	r3, r0
 800e352:	2b01      	cmp	r3, #1
 800e354:	d101      	bne.n	800e35a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e022      	b.n	800e3a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d002      	beq.n	800e368 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f001 f946 	bl	800f5f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	685a      	ldr	r2, [r3, #4]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	689a      	ldr	r2, [r3, #8]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f042 0201 	orr.w	r2, r2, #1
 800e396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f001 f9cd 	bl	800f738 <UART_CheckIdleState>
 800e39e:	4603      	mov	r3, r0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b0ba      	sub	sp, #232	; 0xe8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	69db      	ldr	r3, [r3, #28]
 800e3b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e3ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e3d2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e3dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d11b      	bne.n	800e41c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3e8:	f003 0320 	and.w	r3, r3, #32
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d015      	beq.n	800e41c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f4:	f003 0320 	and.w	r3, r3, #32
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d105      	bne.n	800e408 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d009      	beq.n	800e41c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f000 835a 	beq.w	800eac6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	4798      	blx	r3
      }
      return;
 800e41a:	e354      	b.n	800eac6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e41c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 811f 	beq.w	800e664 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e426:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e42a:	4b8b      	ldr	r3, [pc, #556]	; (800e658 <HAL_UART_IRQHandler+0x2b0>)
 800e42c:	4013      	ands	r3, r2
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e436:	4b89      	ldr	r3, [pc, #548]	; (800e65c <HAL_UART_IRQHandler+0x2b4>)
 800e438:	4013      	ands	r3, r2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f000 8112 	beq.w	800e664 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e444:	f003 0301 	and.w	r3, r3, #1
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d011      	beq.n	800e470 <HAL_UART_IRQHandler+0xc8>
 800e44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00b      	beq.n	800e470 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2201      	movs	r2, #1
 800e45e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e466:	f043 0201 	orr.w	r2, r3, #1
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e474:	f003 0302 	and.w	r3, r3, #2
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d011      	beq.n	800e4a0 <HAL_UART_IRQHandler+0xf8>
 800e47c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e480:	f003 0301 	and.w	r3, r3, #1
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00b      	beq.n	800e4a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2202      	movs	r2, #2
 800e48e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e496:	f043 0204 	orr.w	r2, r3, #4
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4a4:	f003 0304 	and.w	r3, r3, #4
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d011      	beq.n	800e4d0 <HAL_UART_IRQHandler+0x128>
 800e4ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4b0:	f003 0301 	and.w	r3, r3, #1
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00b      	beq.n	800e4d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2204      	movs	r2, #4
 800e4be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4c6:	f043 0202 	orr.w	r2, r3, #2
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e4d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4d4:	f003 0308 	and.w	r3, r3, #8
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d017      	beq.n	800e50c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4e0:	f003 0320 	and.w	r3, r3, #32
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d105      	bne.n	800e4f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e4e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e4ec:	4b5a      	ldr	r3, [pc, #360]	; (800e658 <HAL_UART_IRQHandler+0x2b0>)
 800e4ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00b      	beq.n	800e50c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2208      	movs	r2, #8
 800e4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e502:	f043 0208 	orr.w	r2, r3, #8
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e514:	2b00      	cmp	r3, #0
 800e516:	d012      	beq.n	800e53e <HAL_UART_IRQHandler+0x196>
 800e518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e51c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00c      	beq.n	800e53e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e52c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e534:	f043 0220 	orr.w	r2, r3, #32
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 82c0 	beq.w	800eaca <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e54e:	f003 0320 	and.w	r3, r3, #32
 800e552:	2b00      	cmp	r3, #0
 800e554:	d013      	beq.n	800e57e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e55a:	f003 0320 	and.w	r3, r3, #32
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d105      	bne.n	800e56e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d007      	beq.n	800e57e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e584:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e592:	2b40      	cmp	r3, #64	; 0x40
 800e594:	d005      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e59a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d04f      	beq.n	800e642 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f001 f9dc 	bl	800f960 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5b2:	2b40      	cmp	r3, #64	; 0x40
 800e5b4:	d141      	bne.n	800e63a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	3308      	adds	r3, #8
 800e5bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5c4:	e853 3f00 	ldrex	r3, [r3]
 800e5c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e5cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3308      	adds	r3, #8
 800e5de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e5e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e5e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e5ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e5f2:	e841 2300 	strex	r3, r2, [r1]
 800e5f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1d9      	bne.n	800e5b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e606:	2b00      	cmp	r3, #0
 800e608:	d013      	beq.n	800e632 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e60e:	4a14      	ldr	r2, [pc, #80]	; (800e660 <HAL_UART_IRQHandler+0x2b8>)
 800e610:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e616:	4618      	mov	r0, r3
 800e618:	f7fa f83c 	bl	8008694 <HAL_DMA_Abort_IT>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d017      	beq.n	800e652 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e62c:	4610      	mov	r0, r2
 800e62e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e630:	e00f      	b.n	800e652 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 fa60 	bl	800eaf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e638:	e00b      	b.n	800e652 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fa5c 	bl	800eaf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e640:	e007      	b.n	800e652 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fa58 	bl	800eaf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e650:	e23b      	b.n	800eaca <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e652:	bf00      	nop
    return;
 800e654:	e239      	b.n	800eaca <HAL_UART_IRQHandler+0x722>
 800e656:	bf00      	nop
 800e658:	10000001 	.word	0x10000001
 800e65c:	04000120 	.word	0x04000120
 800e660:	0800fa2d 	.word	0x0800fa2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e668:	2b01      	cmp	r3, #1
 800e66a:	f040 81ce 	bne.w	800ea0a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e672:	f003 0310 	and.w	r3, r3, #16
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 81c7 	beq.w	800ea0a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e680:	f003 0310 	and.w	r3, r3, #16
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 81c0 	beq.w	800ea0a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2210      	movs	r2, #16
 800e690:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e69c:	2b40      	cmp	r3, #64	; 0x40
 800e69e:	f040 813b 	bne.w	800e918 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a8b      	ldr	r2, [pc, #556]	; (800e8d8 <HAL_UART_IRQHandler+0x530>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d059      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a89      	ldr	r2, [pc, #548]	; (800e8dc <HAL_UART_IRQHandler+0x534>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d053      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a87      	ldr	r2, [pc, #540]	; (800e8e0 <HAL_UART_IRQHandler+0x538>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d04d      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a85      	ldr	r2, [pc, #532]	; (800e8e4 <HAL_UART_IRQHandler+0x53c>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d047      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a83      	ldr	r2, [pc, #524]	; (800e8e8 <HAL_UART_IRQHandler+0x540>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d041      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4a81      	ldr	r2, [pc, #516]	; (800e8ec <HAL_UART_IRQHandler+0x544>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d03b      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a7f      	ldr	r2, [pc, #508]	; (800e8f0 <HAL_UART_IRQHandler+0x548>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d035      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a7d      	ldr	r2, [pc, #500]	; (800e8f4 <HAL_UART_IRQHandler+0x54c>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d02f      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a7b      	ldr	r2, [pc, #492]	; (800e8f8 <HAL_UART_IRQHandler+0x550>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d029      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a79      	ldr	r2, [pc, #484]	; (800e8fc <HAL_UART_IRQHandler+0x554>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d023      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a77      	ldr	r2, [pc, #476]	; (800e900 <HAL_UART_IRQHandler+0x558>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d01d      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a75      	ldr	r2, [pc, #468]	; (800e904 <HAL_UART_IRQHandler+0x55c>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d017      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a73      	ldr	r2, [pc, #460]	; (800e908 <HAL_UART_IRQHandler+0x560>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d011      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a71      	ldr	r2, [pc, #452]	; (800e90c <HAL_UART_IRQHandler+0x564>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d00b      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a6f      	ldr	r2, [pc, #444]	; (800e910 <HAL_UART_IRQHandler+0x568>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d005      	beq.n	800e762 <HAL_UART_IRQHandler+0x3ba>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a6d      	ldr	r2, [pc, #436]	; (800e914 <HAL_UART_IRQHandler+0x56c>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d105      	bne.n	800e76e <HAL_UART_IRQHandler+0x3c6>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	e004      	b.n	800e778 <HAL_UART_IRQHandler+0x3d0>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	b29b      	uxth	r3, r3
 800e778:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e77c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 81a4 	beq.w	800eace <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e78c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e790:	429a      	cmp	r2, r3
 800e792:	f080 819c 	bcs.w	800eace <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e79c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7a4:	69db      	ldr	r3, [r3, #28]
 800e7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7aa:	f000 8086 	beq.w	800e8ba <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e7ba:	e853 3f00 	ldrex	r3, [r3]
 800e7be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e7c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e7c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e7dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e7e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e7e8:	e841 2300 	strex	r3, r2, [r1]
 800e7ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e7f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1da      	bne.n	800e7ae <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3308      	adds	r3, #8
 800e7fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e802:	e853 3f00 	ldrex	r3, [r3]
 800e806:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e80a:	f023 0301 	bic.w	r3, r3, #1
 800e80e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3308      	adds	r3, #8
 800e818:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e81c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e820:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e822:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e824:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e828:	e841 2300 	strex	r3, r2, [r1]
 800e82c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e82e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1e1      	bne.n	800e7f8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3308      	adds	r3, #8
 800e83a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e83c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e83e:	e853 3f00 	ldrex	r3, [r3]
 800e842:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e84a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	3308      	adds	r3, #8
 800e854:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e858:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e85a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e85c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e85e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e860:	e841 2300 	strex	r3, r2, [r1]
 800e864:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1e3      	bne.n	800e834 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2220      	movs	r2, #32
 800e870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e882:	e853 3f00 	ldrex	r3, [r3]
 800e886:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e88a:	f023 0310 	bic.w	r3, r3, #16
 800e88e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e89c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e89e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8a4:	e841 2300 	strex	r3, r2, [r1]
 800e8a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d1e4      	bne.n	800e87a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7f9 fbcf 	bl	8008058 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 f91c 	bl	800eb0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e8d4:	e0fb      	b.n	800eace <HAL_UART_IRQHandler+0x726>
 800e8d6:	bf00      	nop
 800e8d8:	40020010 	.word	0x40020010
 800e8dc:	40020028 	.word	0x40020028
 800e8e0:	40020040 	.word	0x40020040
 800e8e4:	40020058 	.word	0x40020058
 800e8e8:	40020070 	.word	0x40020070
 800e8ec:	40020088 	.word	0x40020088
 800e8f0:	400200a0 	.word	0x400200a0
 800e8f4:	400200b8 	.word	0x400200b8
 800e8f8:	40020410 	.word	0x40020410
 800e8fc:	40020428 	.word	0x40020428
 800e900:	40020440 	.word	0x40020440
 800e904:	40020458 	.word	0x40020458
 800e908:	40020470 	.word	0x40020470
 800e90c:	40020488 	.word	0x40020488
 800e910:	400204a0 	.word	0x400204a0
 800e914:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e924:	b29b      	uxth	r3, r3
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e932:	b29b      	uxth	r3, r3
 800e934:	2b00      	cmp	r3, #0
 800e936:	f000 80cc 	beq.w	800ead2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e93a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f000 80c7 	beq.w	800ead2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94c:	e853 3f00 	ldrex	r3, [r3]
 800e950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	461a      	mov	r2, r3
 800e962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e966:	647b      	str	r3, [r7, #68]	; 0x44
 800e968:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e96c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e96e:	e841 2300 	strex	r3, r2, [r1]
 800e972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1e4      	bne.n	800e944 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	3308      	adds	r3, #8
 800e980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	e853 3f00 	ldrex	r3, [r3]
 800e988:	623b      	str	r3, [r7, #32]
   return(result);
 800e98a:	6a3a      	ldr	r2, [r7, #32]
 800e98c:	4b54      	ldr	r3, [pc, #336]	; (800eae0 <HAL_UART_IRQHandler+0x738>)
 800e98e:	4013      	ands	r3, r2
 800e990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3308      	adds	r3, #8
 800e99a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e99e:	633a      	str	r2, [r7, #48]	; 0x30
 800e9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9a6:	e841 2300 	strex	r3, r2, [r1]
 800e9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d1e3      	bne.n	800e97a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2220      	movs	r2, #32
 800e9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	e853 3f00 	ldrex	r3, [r3]
 800e9d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f023 0310 	bic.w	r3, r3, #16
 800e9da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e9e8:	61fb      	str	r3, [r7, #28]
 800e9ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ec:	69b9      	ldr	r1, [r7, #24]
 800e9ee:	69fa      	ldr	r2, [r7, #28]
 800e9f0:	e841 2300 	strex	r3, r2, [r1]
 800e9f4:	617b      	str	r3, [r7, #20]
   return(result);
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1e4      	bne.n	800e9c6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e9fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 f882 	bl	800eb0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea08:	e063      	b.n	800ead2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ea0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00e      	beq.n	800ea34 <HAL_UART_IRQHandler+0x68c>
 800ea16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d008      	beq.n	800ea34 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ea2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f001 f83e 	bl	800faae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea32:	e051      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ea34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d014      	beq.n	800ea6a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ea40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d105      	bne.n	800ea58 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ea4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d008      	beq.n	800ea6a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d03a      	beq.n	800ead6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	4798      	blx	r3
    }
    return;
 800ea68:	e035      	b.n	800ead6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ea6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d009      	beq.n	800ea8a <HAL_UART_IRQHandler+0x6e2>
 800ea76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 ffe8 	bl	800fa58 <UART_EndTransmit_IT>
    return;
 800ea88:	e026      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ea8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d009      	beq.n	800eaaa <HAL_UART_IRQHandler+0x702>
 800ea96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d003      	beq.n	800eaaa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f001 f817 	bl	800fad6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eaa8:	e016      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d010      	beq.n	800ead8 <HAL_UART_IRQHandler+0x730>
 800eab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	da0c      	bge.n	800ead8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 ffff 	bl	800fac2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eac4:	e008      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
      return;
 800eac6:	bf00      	nop
 800eac8:	e006      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
    return;
 800eaca:	bf00      	nop
 800eacc:	e004      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
      return;
 800eace:	bf00      	nop
 800ead0:	e002      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
      return;
 800ead2:	bf00      	nop
 800ead4:	e000      	b.n	800ead8 <HAL_UART_IRQHandler+0x730>
    return;
 800ead6:	bf00      	nop
  }
}
 800ead8:	37e8      	adds	r7, #232	; 0xe8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	effffffe 	.word	0xeffffffe

0800eae4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eb00:	bf00      	nop
 800eb02:	370c      	adds	r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	460b      	mov	r3, r1
 800eb16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eb18:	bf00      	nop
 800eb1a:	370c      	adds	r7, #12
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb28:	b092      	sub	sp, #72	; 0x48
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	431a      	orrs	r2, r3
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	431a      	orrs	r2, r3
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	4bbe      	ldr	r3, [pc, #760]	; (800ee4c <UART_SetConfig+0x328>)
 800eb54:	4013      	ands	r3, r2
 800eb56:	697a      	ldr	r2, [r7, #20]
 800eb58:	6812      	ldr	r2, [r2, #0]
 800eb5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	685b      	ldr	r3, [r3, #4]
 800eb66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	68da      	ldr	r2, [r3, #12]
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	430a      	orrs	r2, r1
 800eb74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4ab3      	ldr	r2, [pc, #716]	; (800ee50 <UART_SetConfig+0x32c>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d004      	beq.n	800eb90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	689a      	ldr	r2, [r3, #8]
 800eb96:	4baf      	ldr	r3, [pc, #700]	; (800ee54 <UART_SetConfig+0x330>)
 800eb98:	4013      	ands	r3, r2
 800eb9a:	697a      	ldr	r2, [r7, #20]
 800eb9c:	6812      	ldr	r2, [r2, #0]
 800eb9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eba0:	430b      	orrs	r3, r1
 800eba2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebaa:	f023 010f 	bic.w	r1, r3, #15
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	430a      	orrs	r2, r1
 800ebb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4aa6      	ldr	r2, [pc, #664]	; (800ee58 <UART_SetConfig+0x334>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d177      	bne.n	800ecb4 <UART_SetConfig+0x190>
 800ebc4:	4ba5      	ldr	r3, [pc, #660]	; (800ee5c <UART_SetConfig+0x338>)
 800ebc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebcc:	2b28      	cmp	r3, #40	; 0x28
 800ebce:	d86d      	bhi.n	800ecac <UART_SetConfig+0x188>
 800ebd0:	a201      	add	r2, pc, #4	; (adr r2, 800ebd8 <UART_SetConfig+0xb4>)
 800ebd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd6:	bf00      	nop
 800ebd8:	0800ec7d 	.word	0x0800ec7d
 800ebdc:	0800ecad 	.word	0x0800ecad
 800ebe0:	0800ecad 	.word	0x0800ecad
 800ebe4:	0800ecad 	.word	0x0800ecad
 800ebe8:	0800ecad 	.word	0x0800ecad
 800ebec:	0800ecad 	.word	0x0800ecad
 800ebf0:	0800ecad 	.word	0x0800ecad
 800ebf4:	0800ecad 	.word	0x0800ecad
 800ebf8:	0800ec85 	.word	0x0800ec85
 800ebfc:	0800ecad 	.word	0x0800ecad
 800ec00:	0800ecad 	.word	0x0800ecad
 800ec04:	0800ecad 	.word	0x0800ecad
 800ec08:	0800ecad 	.word	0x0800ecad
 800ec0c:	0800ecad 	.word	0x0800ecad
 800ec10:	0800ecad 	.word	0x0800ecad
 800ec14:	0800ecad 	.word	0x0800ecad
 800ec18:	0800ec8d 	.word	0x0800ec8d
 800ec1c:	0800ecad 	.word	0x0800ecad
 800ec20:	0800ecad 	.word	0x0800ecad
 800ec24:	0800ecad 	.word	0x0800ecad
 800ec28:	0800ecad 	.word	0x0800ecad
 800ec2c:	0800ecad 	.word	0x0800ecad
 800ec30:	0800ecad 	.word	0x0800ecad
 800ec34:	0800ecad 	.word	0x0800ecad
 800ec38:	0800ec95 	.word	0x0800ec95
 800ec3c:	0800ecad 	.word	0x0800ecad
 800ec40:	0800ecad 	.word	0x0800ecad
 800ec44:	0800ecad 	.word	0x0800ecad
 800ec48:	0800ecad 	.word	0x0800ecad
 800ec4c:	0800ecad 	.word	0x0800ecad
 800ec50:	0800ecad 	.word	0x0800ecad
 800ec54:	0800ecad 	.word	0x0800ecad
 800ec58:	0800ec9d 	.word	0x0800ec9d
 800ec5c:	0800ecad 	.word	0x0800ecad
 800ec60:	0800ecad 	.word	0x0800ecad
 800ec64:	0800ecad 	.word	0x0800ecad
 800ec68:	0800ecad 	.word	0x0800ecad
 800ec6c:	0800ecad 	.word	0x0800ecad
 800ec70:	0800ecad 	.word	0x0800ecad
 800ec74:	0800ecad 	.word	0x0800ecad
 800ec78:	0800eca5 	.word	0x0800eca5
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec82:	e222      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ec84:	2304      	movs	r3, #4
 800ec86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8a:	e21e      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ec8c:	2308      	movs	r3, #8
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec92:	e21a      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ec94:	2310      	movs	r3, #16
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9a:	e216      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ec9c:	2320      	movs	r3, #32
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca2:	e212      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800eca4:	2340      	movs	r3, #64	; 0x40
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecaa:	e20e      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ecac:	2380      	movs	r3, #128	; 0x80
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb2:	e20a      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a69      	ldr	r2, [pc, #420]	; (800ee60 <UART_SetConfig+0x33c>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d130      	bne.n	800ed20 <UART_SetConfig+0x1fc>
 800ecbe:	4b67      	ldr	r3, [pc, #412]	; (800ee5c <UART_SetConfig+0x338>)
 800ecc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc2:	f003 0307 	and.w	r3, r3, #7
 800ecc6:	2b05      	cmp	r3, #5
 800ecc8:	d826      	bhi.n	800ed18 <UART_SetConfig+0x1f4>
 800ecca:	a201      	add	r2, pc, #4	; (adr r2, 800ecd0 <UART_SetConfig+0x1ac>)
 800eccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd0:	0800ece9 	.word	0x0800ece9
 800ecd4:	0800ecf1 	.word	0x0800ecf1
 800ecd8:	0800ecf9 	.word	0x0800ecf9
 800ecdc:	0800ed01 	.word	0x0800ed01
 800ece0:	0800ed09 	.word	0x0800ed09
 800ece4:	0800ed11 	.word	0x0800ed11
 800ece8:	2300      	movs	r3, #0
 800ecea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecee:	e1ec      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ecf0:	2304      	movs	r3, #4
 800ecf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf6:	e1e8      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ecf8:	2308      	movs	r3, #8
 800ecfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfe:	e1e4      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed00:	2310      	movs	r3, #16
 800ed02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed06:	e1e0      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed08:	2320      	movs	r3, #32
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0e:	e1dc      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed10:	2340      	movs	r3, #64	; 0x40
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed16:	e1d8      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed18:	2380      	movs	r3, #128	; 0x80
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1e:	e1d4      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a4f      	ldr	r2, [pc, #316]	; (800ee64 <UART_SetConfig+0x340>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d130      	bne.n	800ed8c <UART_SetConfig+0x268>
 800ed2a:	4b4c      	ldr	r3, [pc, #304]	; (800ee5c <UART_SetConfig+0x338>)
 800ed2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	2b05      	cmp	r3, #5
 800ed34:	d826      	bhi.n	800ed84 <UART_SetConfig+0x260>
 800ed36:	a201      	add	r2, pc, #4	; (adr r2, 800ed3c <UART_SetConfig+0x218>)
 800ed38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed3c:	0800ed55 	.word	0x0800ed55
 800ed40:	0800ed5d 	.word	0x0800ed5d
 800ed44:	0800ed65 	.word	0x0800ed65
 800ed48:	0800ed6d 	.word	0x0800ed6d
 800ed4c:	0800ed75 	.word	0x0800ed75
 800ed50:	0800ed7d 	.word	0x0800ed7d
 800ed54:	2300      	movs	r3, #0
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5a:	e1b6      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed5c:	2304      	movs	r3, #4
 800ed5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed62:	e1b2      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed64:	2308      	movs	r3, #8
 800ed66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6a:	e1ae      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed6c:	2310      	movs	r3, #16
 800ed6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed72:	e1aa      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed74:	2320      	movs	r3, #32
 800ed76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7a:	e1a6      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed7c:	2340      	movs	r3, #64	; 0x40
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e1a2      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed84:	2380      	movs	r3, #128	; 0x80
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8a:	e19e      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a35      	ldr	r2, [pc, #212]	; (800ee68 <UART_SetConfig+0x344>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d130      	bne.n	800edf8 <UART_SetConfig+0x2d4>
 800ed96:	4b31      	ldr	r3, [pc, #196]	; (800ee5c <UART_SetConfig+0x338>)
 800ed98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed9a:	f003 0307 	and.w	r3, r3, #7
 800ed9e:	2b05      	cmp	r3, #5
 800eda0:	d826      	bhi.n	800edf0 <UART_SetConfig+0x2cc>
 800eda2:	a201      	add	r2, pc, #4	; (adr r2, 800eda8 <UART_SetConfig+0x284>)
 800eda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda8:	0800edc1 	.word	0x0800edc1
 800edac:	0800edc9 	.word	0x0800edc9
 800edb0:	0800edd1 	.word	0x0800edd1
 800edb4:	0800edd9 	.word	0x0800edd9
 800edb8:	0800ede1 	.word	0x0800ede1
 800edbc:	0800ede9 	.word	0x0800ede9
 800edc0:	2300      	movs	r3, #0
 800edc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc6:	e180      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800edc8:	2304      	movs	r3, #4
 800edca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edce:	e17c      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800edd0:	2308      	movs	r3, #8
 800edd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd6:	e178      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800edd8:	2310      	movs	r3, #16
 800edda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edde:	e174      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ede0:	2320      	movs	r3, #32
 800ede2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede6:	e170      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ede8:	2340      	movs	r3, #64	; 0x40
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edee:	e16c      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800edf0:	2380      	movs	r3, #128	; 0x80
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf6:	e168      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4a1b      	ldr	r2, [pc, #108]	; (800ee6c <UART_SetConfig+0x348>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d142      	bne.n	800ee88 <UART_SetConfig+0x364>
 800ee02:	4b16      	ldr	r3, [pc, #88]	; (800ee5c <UART_SetConfig+0x338>)
 800ee04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee06:	f003 0307 	and.w	r3, r3, #7
 800ee0a:	2b05      	cmp	r3, #5
 800ee0c:	d838      	bhi.n	800ee80 <UART_SetConfig+0x35c>
 800ee0e:	a201      	add	r2, pc, #4	; (adr r2, 800ee14 <UART_SetConfig+0x2f0>)
 800ee10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee14:	0800ee2d 	.word	0x0800ee2d
 800ee18:	0800ee35 	.word	0x0800ee35
 800ee1c:	0800ee3d 	.word	0x0800ee3d
 800ee20:	0800ee45 	.word	0x0800ee45
 800ee24:	0800ee71 	.word	0x0800ee71
 800ee28:	0800ee79 	.word	0x0800ee79
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee32:	e14a      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ee34:	2304      	movs	r3, #4
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3a:	e146      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ee3c:	2308      	movs	r3, #8
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee42:	e142      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ee44:	2310      	movs	r3, #16
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4a:	e13e      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ee4c:	cfff69f3 	.word	0xcfff69f3
 800ee50:	58000c00 	.word	0x58000c00
 800ee54:	11fff4ff 	.word	0x11fff4ff
 800ee58:	40011000 	.word	0x40011000
 800ee5c:	58024400 	.word	0x58024400
 800ee60:	40004400 	.word	0x40004400
 800ee64:	40004800 	.word	0x40004800
 800ee68:	40004c00 	.word	0x40004c00
 800ee6c:	40005000 	.word	0x40005000
 800ee70:	2320      	movs	r3, #32
 800ee72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee76:	e128      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ee78:	2340      	movs	r3, #64	; 0x40
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7e:	e124      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ee80:	2380      	movs	r3, #128	; 0x80
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee86:	e120      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4acb      	ldr	r2, [pc, #812]	; (800f1bc <UART_SetConfig+0x698>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d176      	bne.n	800ef80 <UART_SetConfig+0x45c>
 800ee92:	4bcb      	ldr	r3, [pc, #812]	; (800f1c0 <UART_SetConfig+0x69c>)
 800ee94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee9a:	2b28      	cmp	r3, #40	; 0x28
 800ee9c:	d86c      	bhi.n	800ef78 <UART_SetConfig+0x454>
 800ee9e:	a201      	add	r2, pc, #4	; (adr r2, 800eea4 <UART_SetConfig+0x380>)
 800eea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea4:	0800ef49 	.word	0x0800ef49
 800eea8:	0800ef79 	.word	0x0800ef79
 800eeac:	0800ef79 	.word	0x0800ef79
 800eeb0:	0800ef79 	.word	0x0800ef79
 800eeb4:	0800ef79 	.word	0x0800ef79
 800eeb8:	0800ef79 	.word	0x0800ef79
 800eebc:	0800ef79 	.word	0x0800ef79
 800eec0:	0800ef79 	.word	0x0800ef79
 800eec4:	0800ef51 	.word	0x0800ef51
 800eec8:	0800ef79 	.word	0x0800ef79
 800eecc:	0800ef79 	.word	0x0800ef79
 800eed0:	0800ef79 	.word	0x0800ef79
 800eed4:	0800ef79 	.word	0x0800ef79
 800eed8:	0800ef79 	.word	0x0800ef79
 800eedc:	0800ef79 	.word	0x0800ef79
 800eee0:	0800ef79 	.word	0x0800ef79
 800eee4:	0800ef59 	.word	0x0800ef59
 800eee8:	0800ef79 	.word	0x0800ef79
 800eeec:	0800ef79 	.word	0x0800ef79
 800eef0:	0800ef79 	.word	0x0800ef79
 800eef4:	0800ef79 	.word	0x0800ef79
 800eef8:	0800ef79 	.word	0x0800ef79
 800eefc:	0800ef79 	.word	0x0800ef79
 800ef00:	0800ef79 	.word	0x0800ef79
 800ef04:	0800ef61 	.word	0x0800ef61
 800ef08:	0800ef79 	.word	0x0800ef79
 800ef0c:	0800ef79 	.word	0x0800ef79
 800ef10:	0800ef79 	.word	0x0800ef79
 800ef14:	0800ef79 	.word	0x0800ef79
 800ef18:	0800ef79 	.word	0x0800ef79
 800ef1c:	0800ef79 	.word	0x0800ef79
 800ef20:	0800ef79 	.word	0x0800ef79
 800ef24:	0800ef69 	.word	0x0800ef69
 800ef28:	0800ef79 	.word	0x0800ef79
 800ef2c:	0800ef79 	.word	0x0800ef79
 800ef30:	0800ef79 	.word	0x0800ef79
 800ef34:	0800ef79 	.word	0x0800ef79
 800ef38:	0800ef79 	.word	0x0800ef79
 800ef3c:	0800ef79 	.word	0x0800ef79
 800ef40:	0800ef79 	.word	0x0800ef79
 800ef44:	0800ef71 	.word	0x0800ef71
 800ef48:	2301      	movs	r3, #1
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4e:	e0bc      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ef50:	2304      	movs	r3, #4
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e0b8      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ef58:	2308      	movs	r3, #8
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e0b4      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ef60:	2310      	movs	r3, #16
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e0b0      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ef68:	2320      	movs	r3, #32
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e0ac      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ef70:	2340      	movs	r3, #64	; 0x40
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e0a8      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ef78:	2380      	movs	r3, #128	; 0x80
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e0a4      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a8f      	ldr	r2, [pc, #572]	; (800f1c4 <UART_SetConfig+0x6a0>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d130      	bne.n	800efec <UART_SetConfig+0x4c8>
 800ef8a:	4b8d      	ldr	r3, [pc, #564]	; (800f1c0 <UART_SetConfig+0x69c>)
 800ef8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8e:	f003 0307 	and.w	r3, r3, #7
 800ef92:	2b05      	cmp	r3, #5
 800ef94:	d826      	bhi.n	800efe4 <UART_SetConfig+0x4c0>
 800ef96:	a201      	add	r2, pc, #4	; (adr r2, 800ef9c <UART_SetConfig+0x478>)
 800ef98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9c:	0800efb5 	.word	0x0800efb5
 800efa0:	0800efbd 	.word	0x0800efbd
 800efa4:	0800efc5 	.word	0x0800efc5
 800efa8:	0800efcd 	.word	0x0800efcd
 800efac:	0800efd5 	.word	0x0800efd5
 800efb0:	0800efdd 	.word	0x0800efdd
 800efb4:	2300      	movs	r3, #0
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efba:	e086      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800efbc:	2304      	movs	r3, #4
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc2:	e082      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800efc4:	2308      	movs	r3, #8
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efca:	e07e      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800efcc:	2310      	movs	r3, #16
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e07a      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800efd4:	2320      	movs	r3, #32
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e076      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800efdc:	2340      	movs	r3, #64	; 0x40
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e072      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800efe4:	2380      	movs	r3, #128	; 0x80
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e06e      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a75      	ldr	r2, [pc, #468]	; (800f1c8 <UART_SetConfig+0x6a4>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d130      	bne.n	800f058 <UART_SetConfig+0x534>
 800eff6:	4b72      	ldr	r3, [pc, #456]	; (800f1c0 <UART_SetConfig+0x69c>)
 800eff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800effa:	f003 0307 	and.w	r3, r3, #7
 800effe:	2b05      	cmp	r3, #5
 800f000:	d826      	bhi.n	800f050 <UART_SetConfig+0x52c>
 800f002:	a201      	add	r2, pc, #4	; (adr r2, 800f008 <UART_SetConfig+0x4e4>)
 800f004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f008:	0800f021 	.word	0x0800f021
 800f00c:	0800f029 	.word	0x0800f029
 800f010:	0800f031 	.word	0x0800f031
 800f014:	0800f039 	.word	0x0800f039
 800f018:	0800f041 	.word	0x0800f041
 800f01c:	0800f049 	.word	0x0800f049
 800f020:	2300      	movs	r3, #0
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f026:	e050      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f028:	2304      	movs	r3, #4
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e04c      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f030:	2308      	movs	r3, #8
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f036:	e048      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f038:	2310      	movs	r3, #16
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e044      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f040:	2320      	movs	r3, #32
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e040      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e03c      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f050:	2380      	movs	r3, #128	; 0x80
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e038      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a5b      	ldr	r2, [pc, #364]	; (800f1cc <UART_SetConfig+0x6a8>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d130      	bne.n	800f0c4 <UART_SetConfig+0x5a0>
 800f062:	4b57      	ldr	r3, [pc, #348]	; (800f1c0 <UART_SetConfig+0x69c>)
 800f064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b05      	cmp	r3, #5
 800f06c:	d826      	bhi.n	800f0bc <UART_SetConfig+0x598>
 800f06e:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <UART_SetConfig+0x550>)
 800f070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f074:	0800f08d 	.word	0x0800f08d
 800f078:	0800f095 	.word	0x0800f095
 800f07c:	0800f09d 	.word	0x0800f09d
 800f080:	0800f0a5 	.word	0x0800f0a5
 800f084:	0800f0ad 	.word	0x0800f0ad
 800f088:	0800f0b5 	.word	0x0800f0b5
 800f08c:	2302      	movs	r3, #2
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f092:	e01a      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e016      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a2:	e012      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0aa:	e00e      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e00a      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f0b4:	2340      	movs	r3, #64	; 0x40
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e006      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e002      	b.n	800f0ca <UART_SetConfig+0x5a6>
 800f0c4:	2380      	movs	r3, #128	; 0x80
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a3f      	ldr	r2, [pc, #252]	; (800f1cc <UART_SetConfig+0x6a8>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	f040 80f8 	bne.w	800f2c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f0d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0da:	2b20      	cmp	r3, #32
 800f0dc:	dc46      	bgt.n	800f16c <UART_SetConfig+0x648>
 800f0de:	2b02      	cmp	r3, #2
 800f0e0:	f2c0 8082 	blt.w	800f1e8 <UART_SetConfig+0x6c4>
 800f0e4:	3b02      	subs	r3, #2
 800f0e6:	2b1e      	cmp	r3, #30
 800f0e8:	d87e      	bhi.n	800f1e8 <UART_SetConfig+0x6c4>
 800f0ea:	a201      	add	r2, pc, #4	; (adr r2, 800f0f0 <UART_SetConfig+0x5cc>)
 800f0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f0:	0800f173 	.word	0x0800f173
 800f0f4:	0800f1e9 	.word	0x0800f1e9
 800f0f8:	0800f17b 	.word	0x0800f17b
 800f0fc:	0800f1e9 	.word	0x0800f1e9
 800f100:	0800f1e9 	.word	0x0800f1e9
 800f104:	0800f1e9 	.word	0x0800f1e9
 800f108:	0800f18b 	.word	0x0800f18b
 800f10c:	0800f1e9 	.word	0x0800f1e9
 800f110:	0800f1e9 	.word	0x0800f1e9
 800f114:	0800f1e9 	.word	0x0800f1e9
 800f118:	0800f1e9 	.word	0x0800f1e9
 800f11c:	0800f1e9 	.word	0x0800f1e9
 800f120:	0800f1e9 	.word	0x0800f1e9
 800f124:	0800f1e9 	.word	0x0800f1e9
 800f128:	0800f19b 	.word	0x0800f19b
 800f12c:	0800f1e9 	.word	0x0800f1e9
 800f130:	0800f1e9 	.word	0x0800f1e9
 800f134:	0800f1e9 	.word	0x0800f1e9
 800f138:	0800f1e9 	.word	0x0800f1e9
 800f13c:	0800f1e9 	.word	0x0800f1e9
 800f140:	0800f1e9 	.word	0x0800f1e9
 800f144:	0800f1e9 	.word	0x0800f1e9
 800f148:	0800f1e9 	.word	0x0800f1e9
 800f14c:	0800f1e9 	.word	0x0800f1e9
 800f150:	0800f1e9 	.word	0x0800f1e9
 800f154:	0800f1e9 	.word	0x0800f1e9
 800f158:	0800f1e9 	.word	0x0800f1e9
 800f15c:	0800f1e9 	.word	0x0800f1e9
 800f160:	0800f1e9 	.word	0x0800f1e9
 800f164:	0800f1e9 	.word	0x0800f1e9
 800f168:	0800f1db 	.word	0x0800f1db
 800f16c:	2b40      	cmp	r3, #64	; 0x40
 800f16e:	d037      	beq.n	800f1e0 <UART_SetConfig+0x6bc>
 800f170:	e03a      	b.n	800f1e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f172:	f7fd fd3b 	bl	800cbec <HAL_RCCEx_GetD3PCLK1Freq>
 800f176:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f178:	e03c      	b.n	800f1f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f17a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fd fd4a 	bl	800cc18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f188:	e034      	b.n	800f1f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f18a:	f107 0318 	add.w	r3, r7, #24
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fd fe96 	bl	800cec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f198:	e02c      	b.n	800f1f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f19a:	4b09      	ldr	r3, [pc, #36]	; (800f1c0 <UART_SetConfig+0x69c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f003 0320 	and.w	r3, r3, #32
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d016      	beq.n	800f1d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1a6:	4b06      	ldr	r3, [pc, #24]	; (800f1c0 <UART_SetConfig+0x69c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	08db      	lsrs	r3, r3, #3
 800f1ac:	f003 0303 	and.w	r3, r3, #3
 800f1b0:	4a07      	ldr	r2, [pc, #28]	; (800f1d0 <UART_SetConfig+0x6ac>)
 800f1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1b8:	e01c      	b.n	800f1f4 <UART_SetConfig+0x6d0>
 800f1ba:	bf00      	nop
 800f1bc:	40011400 	.word	0x40011400
 800f1c0:	58024400 	.word	0x58024400
 800f1c4:	40007800 	.word	0x40007800
 800f1c8:	40007c00 	.word	0x40007c00
 800f1cc:	58000c00 	.word	0x58000c00
 800f1d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f1d4:	4b9d      	ldr	r3, [pc, #628]	; (800f44c <UART_SetConfig+0x928>)
 800f1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d8:	e00c      	b.n	800f1f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1da:	4b9d      	ldr	r3, [pc, #628]	; (800f450 <UART_SetConfig+0x92c>)
 800f1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1de:	e009      	b.n	800f1f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1e6:	e005      	b.n	800f1f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	f000 81de 	beq.w	800f5b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f200:	4a94      	ldr	r2, [pc, #592]	; (800f454 <UART_SetConfig+0x930>)
 800f202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f206:	461a      	mov	r2, r3
 800f208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f20e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	685a      	ldr	r2, [r3, #4]
 800f214:	4613      	mov	r3, r2
 800f216:	005b      	lsls	r3, r3, #1
 800f218:	4413      	add	r3, r2
 800f21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d305      	bcc.n	800f22c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f228:	429a      	cmp	r2, r3
 800f22a:	d903      	bls.n	800f234 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f22c:	2301      	movs	r3, #1
 800f22e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f232:	e1c1      	b.n	800f5b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f236:	2200      	movs	r2, #0
 800f238:	60bb      	str	r3, [r7, #8]
 800f23a:	60fa      	str	r2, [r7, #12]
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f240:	4a84      	ldr	r2, [pc, #528]	; (800f454 <UART_SetConfig+0x930>)
 800f242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f246:	b29b      	uxth	r3, r3
 800f248:	2200      	movs	r2, #0
 800f24a:	603b      	str	r3, [r7, #0]
 800f24c:	607a      	str	r2, [r7, #4]
 800f24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f256:	f7f1 f893 	bl	8000380 <__aeabi_uldivmod>
 800f25a:	4602      	mov	r2, r0
 800f25c:	460b      	mov	r3, r1
 800f25e:	4610      	mov	r0, r2
 800f260:	4619      	mov	r1, r3
 800f262:	f04f 0200 	mov.w	r2, #0
 800f266:	f04f 0300 	mov.w	r3, #0
 800f26a:	020b      	lsls	r3, r1, #8
 800f26c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f270:	0202      	lsls	r2, r0, #8
 800f272:	6979      	ldr	r1, [r7, #20]
 800f274:	6849      	ldr	r1, [r1, #4]
 800f276:	0849      	lsrs	r1, r1, #1
 800f278:	2000      	movs	r0, #0
 800f27a:	460c      	mov	r4, r1
 800f27c:	4605      	mov	r5, r0
 800f27e:	eb12 0804 	adds.w	r8, r2, r4
 800f282:	eb43 0905 	adc.w	r9, r3, r5
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	469a      	mov	sl, r3
 800f28e:	4693      	mov	fp, r2
 800f290:	4652      	mov	r2, sl
 800f292:	465b      	mov	r3, fp
 800f294:	4640      	mov	r0, r8
 800f296:	4649      	mov	r1, r9
 800f298:	f7f1 f872 	bl	8000380 <__aeabi_uldivmod>
 800f29c:	4602      	mov	r2, r0
 800f29e:	460b      	mov	r3, r1
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2aa:	d308      	bcc.n	800f2be <UART_SetConfig+0x79a>
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2b2:	d204      	bcs.n	800f2be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ba:	60da      	str	r2, [r3, #12]
 800f2bc:	e17c      	b.n	800f5b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2c4:	e178      	b.n	800f5b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2ce:	f040 80c5 	bne.w	800f45c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f2d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2d6:	2b20      	cmp	r3, #32
 800f2d8:	dc48      	bgt.n	800f36c <UART_SetConfig+0x848>
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	db7b      	blt.n	800f3d6 <UART_SetConfig+0x8b2>
 800f2de:	2b20      	cmp	r3, #32
 800f2e0:	d879      	bhi.n	800f3d6 <UART_SetConfig+0x8b2>
 800f2e2:	a201      	add	r2, pc, #4	; (adr r2, 800f2e8 <UART_SetConfig+0x7c4>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f373 	.word	0x0800f373
 800f2ec:	0800f37b 	.word	0x0800f37b
 800f2f0:	0800f3d7 	.word	0x0800f3d7
 800f2f4:	0800f3d7 	.word	0x0800f3d7
 800f2f8:	0800f383 	.word	0x0800f383
 800f2fc:	0800f3d7 	.word	0x0800f3d7
 800f300:	0800f3d7 	.word	0x0800f3d7
 800f304:	0800f3d7 	.word	0x0800f3d7
 800f308:	0800f393 	.word	0x0800f393
 800f30c:	0800f3d7 	.word	0x0800f3d7
 800f310:	0800f3d7 	.word	0x0800f3d7
 800f314:	0800f3d7 	.word	0x0800f3d7
 800f318:	0800f3d7 	.word	0x0800f3d7
 800f31c:	0800f3d7 	.word	0x0800f3d7
 800f320:	0800f3d7 	.word	0x0800f3d7
 800f324:	0800f3d7 	.word	0x0800f3d7
 800f328:	0800f3a3 	.word	0x0800f3a3
 800f32c:	0800f3d7 	.word	0x0800f3d7
 800f330:	0800f3d7 	.word	0x0800f3d7
 800f334:	0800f3d7 	.word	0x0800f3d7
 800f338:	0800f3d7 	.word	0x0800f3d7
 800f33c:	0800f3d7 	.word	0x0800f3d7
 800f340:	0800f3d7 	.word	0x0800f3d7
 800f344:	0800f3d7 	.word	0x0800f3d7
 800f348:	0800f3d7 	.word	0x0800f3d7
 800f34c:	0800f3d7 	.word	0x0800f3d7
 800f350:	0800f3d7 	.word	0x0800f3d7
 800f354:	0800f3d7 	.word	0x0800f3d7
 800f358:	0800f3d7 	.word	0x0800f3d7
 800f35c:	0800f3d7 	.word	0x0800f3d7
 800f360:	0800f3d7 	.word	0x0800f3d7
 800f364:	0800f3d7 	.word	0x0800f3d7
 800f368:	0800f3c9 	.word	0x0800f3c9
 800f36c:	2b40      	cmp	r3, #64	; 0x40
 800f36e:	d02e      	beq.n	800f3ce <UART_SetConfig+0x8aa>
 800f370:	e031      	b.n	800f3d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f372:	f7fc fcc9 	bl	800bd08 <HAL_RCC_GetPCLK1Freq>
 800f376:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f378:	e033      	b.n	800f3e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f37a:	f7fc fcdb 	bl	800bd34 <HAL_RCC_GetPCLK2Freq>
 800f37e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f380:	e02f      	b.n	800f3e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f386:	4618      	mov	r0, r3
 800f388:	f7fd fc46 	bl	800cc18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f390:	e027      	b.n	800f3e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f392:	f107 0318 	add.w	r3, r7, #24
 800f396:	4618      	mov	r0, r3
 800f398:	f7fd fd92 	bl	800cec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3a0:	e01f      	b.n	800f3e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3a2:	4b2d      	ldr	r3, [pc, #180]	; (800f458 <UART_SetConfig+0x934>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f003 0320 	and.w	r3, r3, #32
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d009      	beq.n	800f3c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3ae:	4b2a      	ldr	r3, [pc, #168]	; (800f458 <UART_SetConfig+0x934>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	08db      	lsrs	r3, r3, #3
 800f3b4:	f003 0303 	and.w	r3, r3, #3
 800f3b8:	4a24      	ldr	r2, [pc, #144]	; (800f44c <UART_SetConfig+0x928>)
 800f3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3c0:	e00f      	b.n	800f3e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f3c2:	4b22      	ldr	r3, [pc, #136]	; (800f44c <UART_SetConfig+0x928>)
 800f3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3c6:	e00c      	b.n	800f3e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3c8:	4b21      	ldr	r3, [pc, #132]	; (800f450 <UART_SetConfig+0x92c>)
 800f3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3cc:	e009      	b.n	800f3e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3d4:	e005      	b.n	800f3e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f3e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f000 80e7 	beq.w	800f5b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ee:	4a19      	ldr	r2, [pc, #100]	; (800f454 <UART_SetConfig+0x930>)
 800f3f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3fc:	005a      	lsls	r2, r3, #1
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	085b      	lsrs	r3, r3, #1
 800f404:	441a      	add	r2, r3
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f40e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f412:	2b0f      	cmp	r3, #15
 800f414:	d916      	bls.n	800f444 <UART_SetConfig+0x920>
 800f416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f41c:	d212      	bcs.n	800f444 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f420:	b29b      	uxth	r3, r3
 800f422:	f023 030f 	bic.w	r3, r3, #15
 800f426:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42a:	085b      	lsrs	r3, r3, #1
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	f003 0307 	and.w	r3, r3, #7
 800f432:	b29a      	uxth	r2, r3
 800f434:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f436:	4313      	orrs	r3, r2
 800f438:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f440:	60da      	str	r2, [r3, #12]
 800f442:	e0b9      	b.n	800f5b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f444:	2301      	movs	r3, #1
 800f446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f44a:	e0b5      	b.n	800f5b8 <UART_SetConfig+0xa94>
 800f44c:	03d09000 	.word	0x03d09000
 800f450:	003d0900 	.word	0x003d0900
 800f454:	080125c8 	.word	0x080125c8
 800f458:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f45c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f460:	2b20      	cmp	r3, #32
 800f462:	dc49      	bgt.n	800f4f8 <UART_SetConfig+0x9d4>
 800f464:	2b00      	cmp	r3, #0
 800f466:	db7c      	blt.n	800f562 <UART_SetConfig+0xa3e>
 800f468:	2b20      	cmp	r3, #32
 800f46a:	d87a      	bhi.n	800f562 <UART_SetConfig+0xa3e>
 800f46c:	a201      	add	r2, pc, #4	; (adr r2, 800f474 <UART_SetConfig+0x950>)
 800f46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f472:	bf00      	nop
 800f474:	0800f4ff 	.word	0x0800f4ff
 800f478:	0800f507 	.word	0x0800f507
 800f47c:	0800f563 	.word	0x0800f563
 800f480:	0800f563 	.word	0x0800f563
 800f484:	0800f50f 	.word	0x0800f50f
 800f488:	0800f563 	.word	0x0800f563
 800f48c:	0800f563 	.word	0x0800f563
 800f490:	0800f563 	.word	0x0800f563
 800f494:	0800f51f 	.word	0x0800f51f
 800f498:	0800f563 	.word	0x0800f563
 800f49c:	0800f563 	.word	0x0800f563
 800f4a0:	0800f563 	.word	0x0800f563
 800f4a4:	0800f563 	.word	0x0800f563
 800f4a8:	0800f563 	.word	0x0800f563
 800f4ac:	0800f563 	.word	0x0800f563
 800f4b0:	0800f563 	.word	0x0800f563
 800f4b4:	0800f52f 	.word	0x0800f52f
 800f4b8:	0800f563 	.word	0x0800f563
 800f4bc:	0800f563 	.word	0x0800f563
 800f4c0:	0800f563 	.word	0x0800f563
 800f4c4:	0800f563 	.word	0x0800f563
 800f4c8:	0800f563 	.word	0x0800f563
 800f4cc:	0800f563 	.word	0x0800f563
 800f4d0:	0800f563 	.word	0x0800f563
 800f4d4:	0800f563 	.word	0x0800f563
 800f4d8:	0800f563 	.word	0x0800f563
 800f4dc:	0800f563 	.word	0x0800f563
 800f4e0:	0800f563 	.word	0x0800f563
 800f4e4:	0800f563 	.word	0x0800f563
 800f4e8:	0800f563 	.word	0x0800f563
 800f4ec:	0800f563 	.word	0x0800f563
 800f4f0:	0800f563 	.word	0x0800f563
 800f4f4:	0800f555 	.word	0x0800f555
 800f4f8:	2b40      	cmp	r3, #64	; 0x40
 800f4fa:	d02e      	beq.n	800f55a <UART_SetConfig+0xa36>
 800f4fc:	e031      	b.n	800f562 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4fe:	f7fc fc03 	bl	800bd08 <HAL_RCC_GetPCLK1Freq>
 800f502:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f504:	e033      	b.n	800f56e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f506:	f7fc fc15 	bl	800bd34 <HAL_RCC_GetPCLK2Freq>
 800f50a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f50c:	e02f      	b.n	800f56e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f50e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f512:	4618      	mov	r0, r3
 800f514:	f7fd fb80 	bl	800cc18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f51c:	e027      	b.n	800f56e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f51e:	f107 0318 	add.w	r3, r7, #24
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fccc 	bl	800cec0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f52c:	e01f      	b.n	800f56e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f52e:	4b2d      	ldr	r3, [pc, #180]	; (800f5e4 <UART_SetConfig+0xac0>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f003 0320 	and.w	r3, r3, #32
 800f536:	2b00      	cmp	r3, #0
 800f538:	d009      	beq.n	800f54e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f53a:	4b2a      	ldr	r3, [pc, #168]	; (800f5e4 <UART_SetConfig+0xac0>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	08db      	lsrs	r3, r3, #3
 800f540:	f003 0303 	and.w	r3, r3, #3
 800f544:	4a28      	ldr	r2, [pc, #160]	; (800f5e8 <UART_SetConfig+0xac4>)
 800f546:	fa22 f303 	lsr.w	r3, r2, r3
 800f54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f54c:	e00f      	b.n	800f56e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f54e:	4b26      	ldr	r3, [pc, #152]	; (800f5e8 <UART_SetConfig+0xac4>)
 800f550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f552:	e00c      	b.n	800f56e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f554:	4b25      	ldr	r3, [pc, #148]	; (800f5ec <UART_SetConfig+0xac8>)
 800f556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f558:	e009      	b.n	800f56e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f55a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f560:	e005      	b.n	800f56e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f562:	2300      	movs	r3, #0
 800f564:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f566:	2301      	movs	r3, #1
 800f568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f56c:	bf00      	nop
    }

    if (pclk != 0U)
 800f56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f570:	2b00      	cmp	r3, #0
 800f572:	d021      	beq.n	800f5b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f578:	4a1d      	ldr	r2, [pc, #116]	; (800f5f0 <UART_SetConfig+0xacc>)
 800f57a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f57e:	461a      	mov	r2, r3
 800f580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f582:	fbb3 f2f2 	udiv	r2, r3, r2
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	085b      	lsrs	r3, r3, #1
 800f58c:	441a      	add	r2, r3
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	fbb2 f3f3 	udiv	r3, r2, r3
 800f596:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59a:	2b0f      	cmp	r3, #15
 800f59c:	d909      	bls.n	800f5b2 <UART_SetConfig+0xa8e>
 800f59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5a4:	d205      	bcs.n	800f5b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	60da      	str	r2, [r3, #12]
 800f5b0:	e002      	b.n	800f5b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f5d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3748      	adds	r7, #72	; 0x48
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5e2:	bf00      	nop
 800f5e4:	58024400 	.word	0x58024400
 800f5e8:	03d09000 	.word	0x03d09000
 800f5ec:	003d0900 	.word	0x003d0900
 800f5f0:	080125c8 	.word	0x080125c8

0800f5f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f600:	f003 0301 	and.w	r3, r3, #1
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00a      	beq.n	800f61e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	430a      	orrs	r2, r1
 800f61c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f622:	f003 0302 	and.w	r3, r3, #2
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00a      	beq.n	800f640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	430a      	orrs	r2, r1
 800f63e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f644:	f003 0304 	and.w	r3, r3, #4
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d00a      	beq.n	800f662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	430a      	orrs	r2, r1
 800f660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f666:	f003 0308 	and.w	r3, r3, #8
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00a      	beq.n	800f684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	685b      	ldr	r3, [r3, #4]
 800f674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	430a      	orrs	r2, r1
 800f682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f688:	f003 0310 	and.w	r3, r3, #16
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d00a      	beq.n	800f6a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	430a      	orrs	r2, r1
 800f6a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6aa:	f003 0320 	and.w	r3, r3, #32
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00a      	beq.n	800f6c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	430a      	orrs	r2, r1
 800f6c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d01a      	beq.n	800f70a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	430a      	orrs	r2, r1
 800f6e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6f2:	d10a      	bne.n	800f70a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00a      	beq.n	800f72c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	430a      	orrs	r2, r1
 800f72a:	605a      	str	r2, [r3, #4]
  }
}
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af02      	add	r7, sp, #8
 800f73e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f748:	f7f7 ffca 	bl	80076e0 <HAL_GetTick>
 800f74c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f003 0308 	and.w	r3, r3, #8
 800f758:	2b08      	cmp	r3, #8
 800f75a:	d10e      	bne.n	800f77a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f75c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2200      	movs	r2, #0
 800f766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 f82f 	bl	800f7ce <UART_WaitOnFlagUntilTimeout>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d001      	beq.n	800f77a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f776:	2303      	movs	r3, #3
 800f778:	e025      	b.n	800f7c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f003 0304 	and.w	r3, r3, #4
 800f784:	2b04      	cmp	r3, #4
 800f786:	d10e      	bne.n	800f7a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2200      	movs	r2, #0
 800f792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f819 	bl	800f7ce <UART_WaitOnFlagUntilTimeout>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	e00f      	b.n	800f7c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2220      	movs	r2, #32
 800f7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2220      	movs	r2, #32
 800f7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b09c      	sub	sp, #112	; 0x70
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	60f8      	str	r0, [r7, #12]
 800f7d6:	60b9      	str	r1, [r7, #8]
 800f7d8:	603b      	str	r3, [r7, #0]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7de:	e0a9      	b.n	800f934 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e6:	f000 80a5 	beq.w	800f934 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7ea:	f7f7 ff79 	bl	80076e0 <HAL_GetTick>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d302      	bcc.n	800f800 <UART_WaitOnFlagUntilTimeout+0x32>
 800f7fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d140      	bne.n	800f882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f808:	e853 3f00 	ldrex	r3, [r3]
 800f80c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f814:	667b      	str	r3, [r7, #100]	; 0x64
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f81e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f820:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f826:	e841 2300 	strex	r3, r2, [r1]
 800f82a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f82c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1e6      	bne.n	800f800 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	3308      	adds	r3, #8
 800f838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f83c:	e853 3f00 	ldrex	r3, [r3]
 800f840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f844:	f023 0301 	bic.w	r3, r3, #1
 800f848:	663b      	str	r3, [r7, #96]	; 0x60
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f852:	64ba      	str	r2, [r7, #72]	; 0x48
 800f854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f85a:	e841 2300 	strex	r3, r2, [r1]
 800f85e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e5      	bne.n	800f832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2220      	movs	r2, #32
 800f86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2220      	movs	r2, #32
 800f872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	e069      	b.n	800f956 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f003 0304 	and.w	r3, r3, #4
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d051      	beq.n	800f934 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	69db      	ldr	r3, [r3, #28]
 800f896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f89a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f89e:	d149      	bne.n	800f934 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b2:	e853 3f00 	ldrex	r3, [r3]
 800f8b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800f8ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8d0:	e841 2300 	strex	r3, r2, [r1]
 800f8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d1e6      	bne.n	800f8aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	e853 3f00 	ldrex	r3, [r3]
 800f8ea:	613b      	str	r3, [r7, #16]
   return(result);
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	f023 0301 	bic.w	r3, r3, #1
 800f8f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	3308      	adds	r3, #8
 800f8fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f8fc:	623a      	str	r2, [r7, #32]
 800f8fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f900:	69f9      	ldr	r1, [r7, #28]
 800f902:	6a3a      	ldr	r2, [r7, #32]
 800f904:	e841 2300 	strex	r3, r2, [r1]
 800f908:	61bb      	str	r3, [r7, #24]
   return(result);
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1e5      	bne.n	800f8dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2220      	movs	r2, #32
 800f914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2220      	movs	r2, #32
 800f91c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2220      	movs	r2, #32
 800f924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f930:	2303      	movs	r3, #3
 800f932:	e010      	b.n	800f956 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	69da      	ldr	r2, [r3, #28]
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	4013      	ands	r3, r2
 800f93e:	68ba      	ldr	r2, [r7, #8]
 800f940:	429a      	cmp	r2, r3
 800f942:	bf0c      	ite	eq
 800f944:	2301      	moveq	r3, #1
 800f946:	2300      	movne	r3, #0
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	461a      	mov	r2, r3
 800f94c:	79fb      	ldrb	r3, [r7, #7]
 800f94e:	429a      	cmp	r2, r3
 800f950:	f43f af46 	beq.w	800f7e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3770      	adds	r7, #112	; 0x70
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
	...

0800f960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f960:	b480      	push	{r7}
 800f962:	b095      	sub	sp, #84	; 0x54
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f970:	e853 3f00 	ldrex	r3, [r3]
 800f974:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f97c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f986:	643b      	str	r3, [r7, #64]	; 0x40
 800f988:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f98c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f98e:	e841 2300 	strex	r3, r2, [r1]
 800f992:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f996:	2b00      	cmp	r3, #0
 800f998:	d1e6      	bne.n	800f968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	3308      	adds	r3, #8
 800f9a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a2:	6a3b      	ldr	r3, [r7, #32]
 800f9a4:	e853 3f00 	ldrex	r3, [r3]
 800f9a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9aa:	69fa      	ldr	r2, [r7, #28]
 800f9ac:	4b1e      	ldr	r3, [pc, #120]	; (800fa28 <UART_EndRxTransfer+0xc8>)
 800f9ae:	4013      	ands	r3, r2
 800f9b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	3308      	adds	r3, #8
 800f9b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f9bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9c2:	e841 2300 	strex	r3, r2, [r1]
 800f9c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1e5      	bne.n	800f99a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d118      	bne.n	800fa08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	e853 3f00 	ldrex	r3, [r3]
 800f9e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	f023 0310 	bic.w	r3, r3, #16
 800f9ea:	647b      	str	r3, [r7, #68]	; 0x44
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9f4:	61bb      	str	r3, [r7, #24]
 800f9f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f8:	6979      	ldr	r1, [r7, #20]
 800f9fa:	69ba      	ldr	r2, [r7, #24]
 800f9fc:	e841 2300 	strex	r3, r2, [r1]
 800fa00:	613b      	str	r3, [r7, #16]
   return(result);
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d1e6      	bne.n	800f9d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2220      	movs	r2, #32
 800fa0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fa1c:	bf00      	nop
 800fa1e:	3754      	adds	r7, #84	; 0x54
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr
 800fa28:	effffffe 	.word	0xeffffffe

0800fa2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f7ff f854 	bl	800eaf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa50:	bf00      	nop
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b088      	sub	sp, #32
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	e853 3f00 	ldrex	r3, [r3]
 800fa6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa74:	61fb      	str	r3, [r7, #28]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	61bb      	str	r3, [r7, #24]
 800fa80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa82:	6979      	ldr	r1, [r7, #20]
 800fa84:	69ba      	ldr	r2, [r7, #24]
 800fa86:	e841 2300 	strex	r3, r2, [r1]
 800fa8a:	613b      	str	r3, [r7, #16]
   return(result);
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d1e6      	bne.n	800fa60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2220      	movs	r2, #32
 800fa96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff f81f 	bl	800eae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800faa6:	bf00      	nop
 800faa8:	3720      	adds	r7, #32
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800faae:	b480      	push	{r7}
 800fab0:	b083      	sub	sp, #12
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fab6:	bf00      	nop
 800fab8:	370c      	adds	r7, #12
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr

0800fac2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fac2:	b480      	push	{r7}
 800fac4:	b083      	sub	sp, #12
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800faca:	bf00      	nop
 800facc:	370c      	adds	r7, #12
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr

0800fad6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fad6:	b480      	push	{r7}
 800fad8:	b083      	sub	sp, #12
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fade:	bf00      	nop
 800fae0:	370c      	adds	r7, #12
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800faea:	b480      	push	{r7}
 800faec:	b085      	sub	sp, #20
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d101      	bne.n	800fb00 <HAL_UARTEx_DisableFifoMode+0x16>
 800fafc:	2302      	movs	r3, #2
 800fafe:	e027      	b.n	800fb50 <HAL_UARTEx_DisableFifoMode+0x66>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2201      	movs	r2, #1
 800fb04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2224      	movs	r2, #36	; 0x24
 800fb0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f022 0201 	bic.w	r2, r2, #1
 800fb26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2200      	movs	r2, #0
 800fb34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2220      	movs	r2, #32
 800fb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3714      	adds	r7, #20
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr

0800fb5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d101      	bne.n	800fb74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb70:	2302      	movs	r3, #2
 800fb72:	e02d      	b.n	800fbd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2224      	movs	r2, #36	; 0x24
 800fb80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f022 0201 	bic.w	r2, r2, #1
 800fb9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	683a      	ldr	r2, [r7, #0]
 800fbac:	430a      	orrs	r2, r1
 800fbae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 f84f 	bl	800fc54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2220      	movs	r2, #32
 800fbc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3710      	adds	r7, #16
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d101      	bne.n	800fbf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fbec:	2302      	movs	r3, #2
 800fbee:	e02d      	b.n	800fc4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2224      	movs	r2, #36	; 0x24
 800fbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f022 0201 	bic.w	r2, r2, #1
 800fc16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	430a      	orrs	r2, r1
 800fc2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 f811 	bl	800fc54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	68fa      	ldr	r2, [r7, #12]
 800fc38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2220      	movs	r2, #32
 800fc3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc4a:	2300      	movs	r3, #0
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3710      	adds	r7, #16
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d108      	bne.n	800fc76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2201      	movs	r2, #1
 800fc68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fc74:	e031      	b.n	800fcda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fc76:	2310      	movs	r3, #16
 800fc78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fc7a:	2310      	movs	r3, #16
 800fc7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	689b      	ldr	r3, [r3, #8]
 800fc84:	0e5b      	lsrs	r3, r3, #25
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	f003 0307 	and.w	r3, r3, #7
 800fc8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	0f5b      	lsrs	r3, r3, #29
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	f003 0307 	and.w	r3, r3, #7
 800fc9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc9e:	7bbb      	ldrb	r3, [r7, #14]
 800fca0:	7b3a      	ldrb	r2, [r7, #12]
 800fca2:	4911      	ldr	r1, [pc, #68]	; (800fce8 <UARTEx_SetNbDataToProcess+0x94>)
 800fca4:	5c8a      	ldrb	r2, [r1, r2]
 800fca6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fcaa:	7b3a      	ldrb	r2, [r7, #12]
 800fcac:	490f      	ldr	r1, [pc, #60]	; (800fcec <UARTEx_SetNbDataToProcess+0x98>)
 800fcae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcbc:	7bfb      	ldrb	r3, [r7, #15]
 800fcbe:	7b7a      	ldrb	r2, [r7, #13]
 800fcc0:	4909      	ldr	r1, [pc, #36]	; (800fce8 <UARTEx_SetNbDataToProcess+0x94>)
 800fcc2:	5c8a      	ldrb	r2, [r1, r2]
 800fcc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fcc8:	7b7a      	ldrb	r2, [r7, #13]
 800fcca:	4908      	ldr	r1, [pc, #32]	; (800fcec <UARTEx_SetNbDataToProcess+0x98>)
 800fccc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcce:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fcda:	bf00      	nop
 800fcdc:	3714      	adds	r7, #20
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	080125e0 	.word	0x080125e0
 800fcec:	080125e8 	.word	0x080125e8

0800fcf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fcf0:	b084      	sub	sp, #16
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b084      	sub	sp, #16
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
 800fcfa:	f107 001c 	add.w	r0, r7, #28
 800fcfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d120      	bne.n	800fd4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	68da      	ldr	r2, [r3, #12]
 800fd18:	4b2a      	ldr	r3, [pc, #168]	; (800fdc4 <USB_CoreInit+0xd4>)
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fd2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d105      	bne.n	800fd3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 faac 	bl	801029c <USB_CoreReset>
 800fd44:	4603      	mov	r3, r0
 800fd46:	73fb      	strb	r3, [r7, #15]
 800fd48:	e01a      	b.n	800fd80 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 faa0 	bl	801029c <USB_CoreReset>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fd60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d106      	bne.n	800fd74 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	639a      	str	r2, [r3, #56]	; 0x38
 800fd72:	e005      	b.n	800fd80 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d116      	bne.n	800fdb4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd94:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <USB_CoreInit+0xd8>)
 800fd96:	4313      	orrs	r3, r2
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	f043 0206 	orr.w	r2, r3, #6
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	f043 0220 	orr.w	r2, r3, #32
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fdc0:	b004      	add	sp, #16
 800fdc2:	4770      	bx	lr
 800fdc4:	ffbdffbf 	.word	0xffbdffbf
 800fdc8:	03ee0000 	.word	0x03ee0000

0800fdcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	689b      	ldr	r3, [r3, #8]
 800fdd8:	f023 0201 	bic.w	r2, r3, #1
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fde0:	2300      	movs	r3, #0
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	370c      	adds	r7, #12
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b084      	sub	sp, #16
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fe0a:	78fb      	ldrb	r3, [r7, #3]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d115      	bne.n	800fe3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fe1c:	2001      	movs	r0, #1
 800fe1e:	f7f7 fc6b 	bl	80076f8 <HAL_Delay>
      ms++;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3301      	adds	r3, #1
 800fe26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fa29 	bl	8010280 <USB_GetMode>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d01e      	beq.n	800fe72 <USB_SetCurrentMode+0x84>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2b31      	cmp	r3, #49	; 0x31
 800fe38:	d9f0      	bls.n	800fe1c <USB_SetCurrentMode+0x2e>
 800fe3a:	e01a      	b.n	800fe72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fe3c:	78fb      	ldrb	r3, [r7, #3]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d115      	bne.n	800fe6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fe4e:	2001      	movs	r0, #1
 800fe50:	f7f7 fc52 	bl	80076f8 <HAL_Delay>
      ms++;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	3301      	adds	r3, #1
 800fe58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fa10 	bl	8010280 <USB_GetMode>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d005      	beq.n	800fe72 <USB_SetCurrentMode+0x84>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2b31      	cmp	r3, #49	; 0x31
 800fe6a:	d9f0      	bls.n	800fe4e <USB_SetCurrentMode+0x60>
 800fe6c:	e001      	b.n	800fe72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e005      	b.n	800fe7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2b32      	cmp	r3, #50	; 0x32
 800fe76:	d101      	bne.n	800fe7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	e000      	b.n	800fe7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe88:	b084      	sub	sp, #16
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b086      	sub	sp, #24
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
 800fe92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fea2:	2300      	movs	r3, #0
 800fea4:	613b      	str	r3, [r7, #16]
 800fea6:	e009      	b.n	800febc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	3340      	adds	r3, #64	; 0x40
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	4413      	add	r3, r2
 800feb2:	2200      	movs	r2, #0
 800feb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	3301      	adds	r3, #1
 800feba:	613b      	str	r3, [r7, #16]
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	2b0e      	cmp	r3, #14
 800fec0:	d9f2      	bls.n	800fea8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d11c      	bne.n	800ff02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	68fa      	ldr	r2, [r7, #12]
 800fed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fed6:	f043 0302 	orr.w	r3, r3, #2
 800feda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	601a      	str	r2, [r3, #0]
 800ff00:	e005      	b.n	800ff0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff14:	461a      	mov	r2, r3
 800ff16:	2300      	movs	r3, #0
 800ff18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff20:	4619      	mov	r1, r3
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff28:	461a      	mov	r2, r3
 800ff2a:	680b      	ldr	r3, [r1, #0]
 800ff2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d10c      	bne.n	800ff4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d104      	bne.n	800ff44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f965 	bl	801020c <USB_SetDevSpeed>
 800ff42:	e008      	b.n	800ff56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff44:	2101      	movs	r1, #1
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 f960 	bl	801020c <USB_SetDevSpeed>
 800ff4c:	e003      	b.n	800ff56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ff4e:	2103      	movs	r1, #3
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f95b 	bl	801020c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ff56:	2110      	movs	r1, #16
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f8f3 	bl	8010144 <USB_FlushTxFifo>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d001      	beq.n	800ff68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ff64:	2301      	movs	r3, #1
 800ff66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 f91f 	bl	80101ac <USB_FlushRxFifo>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d001      	beq.n	800ff78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ff74:	2301      	movs	r3, #1
 800ff76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7e:	461a      	mov	r2, r3
 800ff80:	2300      	movs	r3, #0
 800ff82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff96:	461a      	mov	r2, r3
 800ff98:	2300      	movs	r3, #0
 800ff9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	613b      	str	r3, [r7, #16]
 800ffa0:	e043      	b.n	801002a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	015a      	lsls	r2, r3, #5
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	4413      	add	r3, r2
 800ffaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffb8:	d118      	bne.n	800ffec <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10a      	bne.n	800ffd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	015a      	lsls	r2, r3, #5
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffcc:	461a      	mov	r2, r3
 800ffce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ffd2:	6013      	str	r3, [r2, #0]
 800ffd4:	e013      	b.n	800fffe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	015a      	lsls	r2, r3, #5
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4413      	add	r3, r2
 800ffde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ffe8:	6013      	str	r3, [r2, #0]
 800ffea:	e008      	b.n	800fffe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	015a      	lsls	r2, r3, #5
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	4413      	add	r3, r2
 800fff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff8:	461a      	mov	r2, r3
 800fffa:	2300      	movs	r3, #0
 800fffc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	4413      	add	r3, r2
 8010006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801000a:	461a      	mov	r2, r3
 801000c:	2300      	movs	r3, #0
 801000e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	015a      	lsls	r2, r3, #5
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	4413      	add	r3, r2
 8010018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001c:	461a      	mov	r2, r3
 801001e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010022:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	3301      	adds	r3, #1
 8010028:	613b      	str	r3, [r7, #16]
 801002a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002c:	693a      	ldr	r2, [r7, #16]
 801002e:	429a      	cmp	r2, r3
 8010030:	d3b7      	bcc.n	800ffa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010032:	2300      	movs	r3, #0
 8010034:	613b      	str	r3, [r7, #16]
 8010036:	e043      	b.n	80100c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	015a      	lsls	r2, r3, #5
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	4413      	add	r3, r2
 8010040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801004a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801004e:	d118      	bne.n	8010082 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d10a      	bne.n	801006c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	015a      	lsls	r2, r3, #5
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	4413      	add	r3, r2
 801005e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010062:	461a      	mov	r2, r3
 8010064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010068:	6013      	str	r3, [r2, #0]
 801006a:	e013      	b.n	8010094 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	4413      	add	r3, r2
 8010074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010078:	461a      	mov	r2, r3
 801007a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801007e:	6013      	str	r3, [r2, #0]
 8010080:	e008      	b.n	8010094 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	015a      	lsls	r2, r3, #5
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	4413      	add	r3, r2
 801008a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801008e:	461a      	mov	r2, r3
 8010090:	2300      	movs	r3, #0
 8010092:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	015a      	lsls	r2, r3, #5
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	4413      	add	r3, r2
 801009c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100a0:	461a      	mov	r2, r3
 80100a2:	2300      	movs	r3, #0
 80100a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	015a      	lsls	r2, r3, #5
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	4413      	add	r3, r2
 80100ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b2:	461a      	mov	r2, r3
 80100b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80100b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	3301      	adds	r3, #1
 80100be:	613b      	str	r3, [r7, #16]
 80100c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d3b7      	bcc.n	8010038 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	68fa      	ldr	r2, [r7, #12]
 80100d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80100e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80100ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d105      	bne.n	80100fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	699b      	ldr	r3, [r3, #24]
 80100f4:	f043 0210 	orr.w	r2, r3, #16
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	699a      	ldr	r2, [r3, #24]
 8010100:	4b0e      	ldr	r3, [pc, #56]	; (801013c <USB_DevInit+0x2b4>)
 8010102:	4313      	orrs	r3, r2
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801010a:	2b00      	cmp	r3, #0
 801010c:	d005      	beq.n	801011a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	699b      	ldr	r3, [r3, #24]
 8010112:	f043 0208 	orr.w	r2, r3, #8
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801011a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801011c:	2b01      	cmp	r3, #1
 801011e:	d105      	bne.n	801012c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	699a      	ldr	r2, [r3, #24]
 8010124:	4b06      	ldr	r3, [pc, #24]	; (8010140 <USB_DevInit+0x2b8>)
 8010126:	4313      	orrs	r3, r2
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801012c:	7dfb      	ldrb	r3, [r7, #23]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3718      	adds	r7, #24
 8010132:	46bd      	mov	sp, r7
 8010134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010138:	b004      	add	sp, #16
 801013a:	4770      	bx	lr
 801013c:	803c3800 	.word	0x803c3800
 8010140:	40000004 	.word	0x40000004

08010144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010144:	b480      	push	{r7}
 8010146:	b085      	sub	sp, #20
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801014e:	2300      	movs	r3, #0
 8010150:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	3301      	adds	r3, #1
 8010156:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	4a13      	ldr	r2, [pc, #76]	; (80101a8 <USB_FlushTxFifo+0x64>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d901      	bls.n	8010164 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010160:	2303      	movs	r3, #3
 8010162:	e01b      	b.n	801019c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	691b      	ldr	r3, [r3, #16]
 8010168:	2b00      	cmp	r3, #0
 801016a:	daf2      	bge.n	8010152 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801016c:	2300      	movs	r3, #0
 801016e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	019b      	lsls	r3, r3, #6
 8010174:	f043 0220 	orr.w	r2, r3, #32
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	3301      	adds	r3, #1
 8010180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	4a08      	ldr	r2, [pc, #32]	; (80101a8 <USB_FlushTxFifo+0x64>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d901      	bls.n	801018e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801018a:	2303      	movs	r3, #3
 801018c:	e006      	b.n	801019c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	f003 0320 	and.w	r3, r3, #32
 8010196:	2b20      	cmp	r3, #32
 8010198:	d0f0      	beq.n	801017c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	3714      	adds	r7, #20
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr
 80101a8:	00030d40 	.word	0x00030d40

080101ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101b4:	2300      	movs	r3, #0
 80101b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	3301      	adds	r3, #1
 80101bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	4a11      	ldr	r2, [pc, #68]	; (8010208 <USB_FlushRxFifo+0x5c>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d901      	bls.n	80101ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80101c6:	2303      	movs	r3, #3
 80101c8:	e018      	b.n	80101fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	691b      	ldr	r3, [r3, #16]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	daf2      	bge.n	80101b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80101d2:	2300      	movs	r3, #0
 80101d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2210      	movs	r2, #16
 80101da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	3301      	adds	r3, #1
 80101e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	4a08      	ldr	r2, [pc, #32]	; (8010208 <USB_FlushRxFifo+0x5c>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d901      	bls.n	80101ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80101ea:	2303      	movs	r3, #3
 80101ec:	e006      	b.n	80101fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	691b      	ldr	r3, [r3, #16]
 80101f2:	f003 0310 	and.w	r3, r3, #16
 80101f6:	2b10      	cmp	r3, #16
 80101f8:	d0f0      	beq.n	80101dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3714      	adds	r7, #20
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr
 8010208:	00030d40 	.word	0x00030d40

0801020c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	460b      	mov	r3, r1
 8010216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	78fb      	ldrb	r3, [r7, #3]
 8010226:	68f9      	ldr	r1, [r7, #12]
 8010228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801022c:	4313      	orrs	r3, r2
 801022e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3714      	adds	r7, #20
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr

0801023e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801023e:	b480      	push	{r7}
 8010240:	b085      	sub	sp, #20
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010258:	f023 0303 	bic.w	r3, r3, #3
 801025c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801026c:	f043 0302 	orr.w	r3, r3, #2
 8010270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010272:	2300      	movs	r3, #0
}
 8010274:	4618      	mov	r0, r3
 8010276:	3714      	adds	r7, #20
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	695b      	ldr	r3, [r3, #20]
 801028c:	f003 0301 	and.w	r3, r3, #1
}
 8010290:	4618      	mov	r0, r3
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801029c:	b480      	push	{r7}
 801029e:	b085      	sub	sp, #20
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80102a4:	2300      	movs	r3, #0
 80102a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	3301      	adds	r3, #1
 80102ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	4a13      	ldr	r2, [pc, #76]	; (8010300 <USB_CoreReset+0x64>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d901      	bls.n	80102ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80102b6:	2303      	movs	r3, #3
 80102b8:	e01b      	b.n	80102f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	daf2      	bge.n	80102a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80102c2:	2300      	movs	r3, #0
 80102c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	691b      	ldr	r3, [r3, #16]
 80102ca:	f043 0201 	orr.w	r2, r3, #1
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3301      	adds	r3, #1
 80102d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	4a09      	ldr	r2, [pc, #36]	; (8010300 <USB_CoreReset+0x64>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d901      	bls.n	80102e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80102e0:	2303      	movs	r3, #3
 80102e2:	e006      	b.n	80102f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	691b      	ldr	r3, [r3, #16]
 80102e8:	f003 0301 	and.w	r3, r3, #1
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d0f0      	beq.n	80102d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3714      	adds	r7, #20
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	00030d40 	.word	0x00030d40

08010304 <__errno>:
 8010304:	4b01      	ldr	r3, [pc, #4]	; (801030c <__errno+0x8>)
 8010306:	6818      	ldr	r0, [r3, #0]
 8010308:	4770      	bx	lr
 801030a:	bf00      	nop
 801030c:	24000024 	.word	0x24000024

08010310 <__libc_init_array>:
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	4d0d      	ldr	r5, [pc, #52]	; (8010348 <__libc_init_array+0x38>)
 8010314:	4c0d      	ldr	r4, [pc, #52]	; (801034c <__libc_init_array+0x3c>)
 8010316:	1b64      	subs	r4, r4, r5
 8010318:	10a4      	asrs	r4, r4, #2
 801031a:	2600      	movs	r6, #0
 801031c:	42a6      	cmp	r6, r4
 801031e:	d109      	bne.n	8010334 <__libc_init_array+0x24>
 8010320:	4d0b      	ldr	r5, [pc, #44]	; (8010350 <__libc_init_array+0x40>)
 8010322:	4c0c      	ldr	r4, [pc, #48]	; (8010354 <__libc_init_array+0x44>)
 8010324:	f000 fc8e 	bl	8010c44 <_init>
 8010328:	1b64      	subs	r4, r4, r5
 801032a:	10a4      	asrs	r4, r4, #2
 801032c:	2600      	movs	r6, #0
 801032e:	42a6      	cmp	r6, r4
 8010330:	d105      	bne.n	801033e <__libc_init_array+0x2e>
 8010332:	bd70      	pop	{r4, r5, r6, pc}
 8010334:	f855 3b04 	ldr.w	r3, [r5], #4
 8010338:	4798      	blx	r3
 801033a:	3601      	adds	r6, #1
 801033c:	e7ee      	b.n	801031c <__libc_init_array+0xc>
 801033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010342:	4798      	blx	r3
 8010344:	3601      	adds	r6, #1
 8010346:	e7f2      	b.n	801032e <__libc_init_array+0x1e>
 8010348:	0801262c 	.word	0x0801262c
 801034c:	0801262c 	.word	0x0801262c
 8010350:	0801262c 	.word	0x0801262c
 8010354:	08012630 	.word	0x08012630

08010358 <memset>:
 8010358:	4402      	add	r2, r0
 801035a:	4603      	mov	r3, r0
 801035c:	4293      	cmp	r3, r2
 801035e:	d100      	bne.n	8010362 <memset+0xa>
 8010360:	4770      	bx	lr
 8010362:	f803 1b01 	strb.w	r1, [r3], #1
 8010366:	e7f9      	b.n	801035c <memset+0x4>

08010368 <_free_r>:
 8010368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801036a:	2900      	cmp	r1, #0
 801036c:	d044      	beq.n	80103f8 <_free_r+0x90>
 801036e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010372:	9001      	str	r0, [sp, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	f1a1 0404 	sub.w	r4, r1, #4
 801037a:	bfb8      	it	lt
 801037c:	18e4      	addlt	r4, r4, r3
 801037e:	f000 f903 	bl	8010588 <__malloc_lock>
 8010382:	4a1e      	ldr	r2, [pc, #120]	; (80103fc <_free_r+0x94>)
 8010384:	9801      	ldr	r0, [sp, #4]
 8010386:	6813      	ldr	r3, [r2, #0]
 8010388:	b933      	cbnz	r3, 8010398 <_free_r+0x30>
 801038a:	6063      	str	r3, [r4, #4]
 801038c:	6014      	str	r4, [r2, #0]
 801038e:	b003      	add	sp, #12
 8010390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010394:	f000 b8fe 	b.w	8010594 <__malloc_unlock>
 8010398:	42a3      	cmp	r3, r4
 801039a:	d908      	bls.n	80103ae <_free_r+0x46>
 801039c:	6825      	ldr	r5, [r4, #0]
 801039e:	1961      	adds	r1, r4, r5
 80103a0:	428b      	cmp	r3, r1
 80103a2:	bf01      	itttt	eq
 80103a4:	6819      	ldreq	r1, [r3, #0]
 80103a6:	685b      	ldreq	r3, [r3, #4]
 80103a8:	1949      	addeq	r1, r1, r5
 80103aa:	6021      	streq	r1, [r4, #0]
 80103ac:	e7ed      	b.n	801038a <_free_r+0x22>
 80103ae:	461a      	mov	r2, r3
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	b10b      	cbz	r3, 80103b8 <_free_r+0x50>
 80103b4:	42a3      	cmp	r3, r4
 80103b6:	d9fa      	bls.n	80103ae <_free_r+0x46>
 80103b8:	6811      	ldr	r1, [r2, #0]
 80103ba:	1855      	adds	r5, r2, r1
 80103bc:	42a5      	cmp	r5, r4
 80103be:	d10b      	bne.n	80103d8 <_free_r+0x70>
 80103c0:	6824      	ldr	r4, [r4, #0]
 80103c2:	4421      	add	r1, r4
 80103c4:	1854      	adds	r4, r2, r1
 80103c6:	42a3      	cmp	r3, r4
 80103c8:	6011      	str	r1, [r2, #0]
 80103ca:	d1e0      	bne.n	801038e <_free_r+0x26>
 80103cc:	681c      	ldr	r4, [r3, #0]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	6053      	str	r3, [r2, #4]
 80103d2:	4421      	add	r1, r4
 80103d4:	6011      	str	r1, [r2, #0]
 80103d6:	e7da      	b.n	801038e <_free_r+0x26>
 80103d8:	d902      	bls.n	80103e0 <_free_r+0x78>
 80103da:	230c      	movs	r3, #12
 80103dc:	6003      	str	r3, [r0, #0]
 80103de:	e7d6      	b.n	801038e <_free_r+0x26>
 80103e0:	6825      	ldr	r5, [r4, #0]
 80103e2:	1961      	adds	r1, r4, r5
 80103e4:	428b      	cmp	r3, r1
 80103e6:	bf04      	itt	eq
 80103e8:	6819      	ldreq	r1, [r3, #0]
 80103ea:	685b      	ldreq	r3, [r3, #4]
 80103ec:	6063      	str	r3, [r4, #4]
 80103ee:	bf04      	itt	eq
 80103f0:	1949      	addeq	r1, r1, r5
 80103f2:	6021      	streq	r1, [r4, #0]
 80103f4:	6054      	str	r4, [r2, #4]
 80103f6:	e7ca      	b.n	801038e <_free_r+0x26>
 80103f8:	b003      	add	sp, #12
 80103fa:	bd30      	pop	{r4, r5, pc}
 80103fc:	24000eb8 	.word	0x24000eb8

08010400 <sbrk_aligned>:
 8010400:	b570      	push	{r4, r5, r6, lr}
 8010402:	4e0e      	ldr	r6, [pc, #56]	; (801043c <sbrk_aligned+0x3c>)
 8010404:	460c      	mov	r4, r1
 8010406:	6831      	ldr	r1, [r6, #0]
 8010408:	4605      	mov	r5, r0
 801040a:	b911      	cbnz	r1, 8010412 <sbrk_aligned+0x12>
 801040c:	f000 f88c 	bl	8010528 <_sbrk_r>
 8010410:	6030      	str	r0, [r6, #0]
 8010412:	4621      	mov	r1, r4
 8010414:	4628      	mov	r0, r5
 8010416:	f000 f887 	bl	8010528 <_sbrk_r>
 801041a:	1c43      	adds	r3, r0, #1
 801041c:	d00a      	beq.n	8010434 <sbrk_aligned+0x34>
 801041e:	1cc4      	adds	r4, r0, #3
 8010420:	f024 0403 	bic.w	r4, r4, #3
 8010424:	42a0      	cmp	r0, r4
 8010426:	d007      	beq.n	8010438 <sbrk_aligned+0x38>
 8010428:	1a21      	subs	r1, r4, r0
 801042a:	4628      	mov	r0, r5
 801042c:	f000 f87c 	bl	8010528 <_sbrk_r>
 8010430:	3001      	adds	r0, #1
 8010432:	d101      	bne.n	8010438 <sbrk_aligned+0x38>
 8010434:	f04f 34ff 	mov.w	r4, #4294967295
 8010438:	4620      	mov	r0, r4
 801043a:	bd70      	pop	{r4, r5, r6, pc}
 801043c:	24000ebc 	.word	0x24000ebc

08010440 <_malloc_r>:
 8010440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010444:	1ccd      	adds	r5, r1, #3
 8010446:	f025 0503 	bic.w	r5, r5, #3
 801044a:	3508      	adds	r5, #8
 801044c:	2d0c      	cmp	r5, #12
 801044e:	bf38      	it	cc
 8010450:	250c      	movcc	r5, #12
 8010452:	2d00      	cmp	r5, #0
 8010454:	4607      	mov	r7, r0
 8010456:	db01      	blt.n	801045c <_malloc_r+0x1c>
 8010458:	42a9      	cmp	r1, r5
 801045a:	d905      	bls.n	8010468 <_malloc_r+0x28>
 801045c:	230c      	movs	r3, #12
 801045e:	603b      	str	r3, [r7, #0]
 8010460:	2600      	movs	r6, #0
 8010462:	4630      	mov	r0, r6
 8010464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010468:	4e2e      	ldr	r6, [pc, #184]	; (8010524 <_malloc_r+0xe4>)
 801046a:	f000 f88d 	bl	8010588 <__malloc_lock>
 801046e:	6833      	ldr	r3, [r6, #0]
 8010470:	461c      	mov	r4, r3
 8010472:	bb34      	cbnz	r4, 80104c2 <_malloc_r+0x82>
 8010474:	4629      	mov	r1, r5
 8010476:	4638      	mov	r0, r7
 8010478:	f7ff ffc2 	bl	8010400 <sbrk_aligned>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	4604      	mov	r4, r0
 8010480:	d14d      	bne.n	801051e <_malloc_r+0xde>
 8010482:	6834      	ldr	r4, [r6, #0]
 8010484:	4626      	mov	r6, r4
 8010486:	2e00      	cmp	r6, #0
 8010488:	d140      	bne.n	801050c <_malloc_r+0xcc>
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	4631      	mov	r1, r6
 801048e:	4638      	mov	r0, r7
 8010490:	eb04 0803 	add.w	r8, r4, r3
 8010494:	f000 f848 	bl	8010528 <_sbrk_r>
 8010498:	4580      	cmp	r8, r0
 801049a:	d13a      	bne.n	8010512 <_malloc_r+0xd2>
 801049c:	6821      	ldr	r1, [r4, #0]
 801049e:	3503      	adds	r5, #3
 80104a0:	1a6d      	subs	r5, r5, r1
 80104a2:	f025 0503 	bic.w	r5, r5, #3
 80104a6:	3508      	adds	r5, #8
 80104a8:	2d0c      	cmp	r5, #12
 80104aa:	bf38      	it	cc
 80104ac:	250c      	movcc	r5, #12
 80104ae:	4629      	mov	r1, r5
 80104b0:	4638      	mov	r0, r7
 80104b2:	f7ff ffa5 	bl	8010400 <sbrk_aligned>
 80104b6:	3001      	adds	r0, #1
 80104b8:	d02b      	beq.n	8010512 <_malloc_r+0xd2>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	442b      	add	r3, r5
 80104be:	6023      	str	r3, [r4, #0]
 80104c0:	e00e      	b.n	80104e0 <_malloc_r+0xa0>
 80104c2:	6822      	ldr	r2, [r4, #0]
 80104c4:	1b52      	subs	r2, r2, r5
 80104c6:	d41e      	bmi.n	8010506 <_malloc_r+0xc6>
 80104c8:	2a0b      	cmp	r2, #11
 80104ca:	d916      	bls.n	80104fa <_malloc_r+0xba>
 80104cc:	1961      	adds	r1, r4, r5
 80104ce:	42a3      	cmp	r3, r4
 80104d0:	6025      	str	r5, [r4, #0]
 80104d2:	bf18      	it	ne
 80104d4:	6059      	strne	r1, [r3, #4]
 80104d6:	6863      	ldr	r3, [r4, #4]
 80104d8:	bf08      	it	eq
 80104da:	6031      	streq	r1, [r6, #0]
 80104dc:	5162      	str	r2, [r4, r5]
 80104de:	604b      	str	r3, [r1, #4]
 80104e0:	4638      	mov	r0, r7
 80104e2:	f104 060b 	add.w	r6, r4, #11
 80104e6:	f000 f855 	bl	8010594 <__malloc_unlock>
 80104ea:	f026 0607 	bic.w	r6, r6, #7
 80104ee:	1d23      	adds	r3, r4, #4
 80104f0:	1af2      	subs	r2, r6, r3
 80104f2:	d0b6      	beq.n	8010462 <_malloc_r+0x22>
 80104f4:	1b9b      	subs	r3, r3, r6
 80104f6:	50a3      	str	r3, [r4, r2]
 80104f8:	e7b3      	b.n	8010462 <_malloc_r+0x22>
 80104fa:	6862      	ldr	r2, [r4, #4]
 80104fc:	42a3      	cmp	r3, r4
 80104fe:	bf0c      	ite	eq
 8010500:	6032      	streq	r2, [r6, #0]
 8010502:	605a      	strne	r2, [r3, #4]
 8010504:	e7ec      	b.n	80104e0 <_malloc_r+0xa0>
 8010506:	4623      	mov	r3, r4
 8010508:	6864      	ldr	r4, [r4, #4]
 801050a:	e7b2      	b.n	8010472 <_malloc_r+0x32>
 801050c:	4634      	mov	r4, r6
 801050e:	6876      	ldr	r6, [r6, #4]
 8010510:	e7b9      	b.n	8010486 <_malloc_r+0x46>
 8010512:	230c      	movs	r3, #12
 8010514:	603b      	str	r3, [r7, #0]
 8010516:	4638      	mov	r0, r7
 8010518:	f000 f83c 	bl	8010594 <__malloc_unlock>
 801051c:	e7a1      	b.n	8010462 <_malloc_r+0x22>
 801051e:	6025      	str	r5, [r4, #0]
 8010520:	e7de      	b.n	80104e0 <_malloc_r+0xa0>
 8010522:	bf00      	nop
 8010524:	24000eb8 	.word	0x24000eb8

08010528 <_sbrk_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d06      	ldr	r5, [pc, #24]	; (8010544 <_sbrk_r+0x1c>)
 801052c:	2300      	movs	r3, #0
 801052e:	4604      	mov	r4, r0
 8010530:	4608      	mov	r0, r1
 8010532:	602b      	str	r3, [r5, #0]
 8010534:	f7f6 ffee 	bl	8007514 <_sbrk>
 8010538:	1c43      	adds	r3, r0, #1
 801053a:	d102      	bne.n	8010542 <_sbrk_r+0x1a>
 801053c:	682b      	ldr	r3, [r5, #0]
 801053e:	b103      	cbz	r3, 8010542 <_sbrk_r+0x1a>
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	24000ec0 	.word	0x24000ec0

08010548 <siprintf>:
 8010548:	b40e      	push	{r1, r2, r3}
 801054a:	b500      	push	{lr}
 801054c:	b09c      	sub	sp, #112	; 0x70
 801054e:	ab1d      	add	r3, sp, #116	; 0x74
 8010550:	9002      	str	r0, [sp, #8]
 8010552:	9006      	str	r0, [sp, #24]
 8010554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010558:	4809      	ldr	r0, [pc, #36]	; (8010580 <siprintf+0x38>)
 801055a:	9107      	str	r1, [sp, #28]
 801055c:	9104      	str	r1, [sp, #16]
 801055e:	4909      	ldr	r1, [pc, #36]	; (8010584 <siprintf+0x3c>)
 8010560:	f853 2b04 	ldr.w	r2, [r3], #4
 8010564:	9105      	str	r1, [sp, #20]
 8010566:	6800      	ldr	r0, [r0, #0]
 8010568:	9301      	str	r3, [sp, #4]
 801056a:	a902      	add	r1, sp, #8
 801056c:	f000 f874 	bl	8010658 <_svfiprintf_r>
 8010570:	9b02      	ldr	r3, [sp, #8]
 8010572:	2200      	movs	r2, #0
 8010574:	701a      	strb	r2, [r3, #0]
 8010576:	b01c      	add	sp, #112	; 0x70
 8010578:	f85d eb04 	ldr.w	lr, [sp], #4
 801057c:	b003      	add	sp, #12
 801057e:	4770      	bx	lr
 8010580:	24000024 	.word	0x24000024
 8010584:	ffff0208 	.word	0xffff0208

08010588 <__malloc_lock>:
 8010588:	4801      	ldr	r0, [pc, #4]	; (8010590 <__malloc_lock+0x8>)
 801058a:	f000 baf9 	b.w	8010b80 <__retarget_lock_acquire_recursive>
 801058e:	bf00      	nop
 8010590:	24000ec4 	.word	0x24000ec4

08010594 <__malloc_unlock>:
 8010594:	4801      	ldr	r0, [pc, #4]	; (801059c <__malloc_unlock+0x8>)
 8010596:	f000 baf4 	b.w	8010b82 <__retarget_lock_release_recursive>
 801059a:	bf00      	nop
 801059c:	24000ec4 	.word	0x24000ec4

080105a0 <__ssputs_r>:
 80105a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105a4:	688e      	ldr	r6, [r1, #8]
 80105a6:	429e      	cmp	r6, r3
 80105a8:	4682      	mov	sl, r0
 80105aa:	460c      	mov	r4, r1
 80105ac:	4690      	mov	r8, r2
 80105ae:	461f      	mov	r7, r3
 80105b0:	d838      	bhi.n	8010624 <__ssputs_r+0x84>
 80105b2:	898a      	ldrh	r2, [r1, #12]
 80105b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80105b8:	d032      	beq.n	8010620 <__ssputs_r+0x80>
 80105ba:	6825      	ldr	r5, [r4, #0]
 80105bc:	6909      	ldr	r1, [r1, #16]
 80105be:	eba5 0901 	sub.w	r9, r5, r1
 80105c2:	6965      	ldr	r5, [r4, #20]
 80105c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105cc:	3301      	adds	r3, #1
 80105ce:	444b      	add	r3, r9
 80105d0:	106d      	asrs	r5, r5, #1
 80105d2:	429d      	cmp	r5, r3
 80105d4:	bf38      	it	cc
 80105d6:	461d      	movcc	r5, r3
 80105d8:	0553      	lsls	r3, r2, #21
 80105da:	d531      	bpl.n	8010640 <__ssputs_r+0xa0>
 80105dc:	4629      	mov	r1, r5
 80105de:	f7ff ff2f 	bl	8010440 <_malloc_r>
 80105e2:	4606      	mov	r6, r0
 80105e4:	b950      	cbnz	r0, 80105fc <__ssputs_r+0x5c>
 80105e6:	230c      	movs	r3, #12
 80105e8:	f8ca 3000 	str.w	r3, [sl]
 80105ec:	89a3      	ldrh	r3, [r4, #12]
 80105ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105f2:	81a3      	strh	r3, [r4, #12]
 80105f4:	f04f 30ff 	mov.w	r0, #4294967295
 80105f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105fc:	6921      	ldr	r1, [r4, #16]
 80105fe:	464a      	mov	r2, r9
 8010600:	f000 fac0 	bl	8010b84 <memcpy>
 8010604:	89a3      	ldrh	r3, [r4, #12]
 8010606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801060e:	81a3      	strh	r3, [r4, #12]
 8010610:	6126      	str	r6, [r4, #16]
 8010612:	6165      	str	r5, [r4, #20]
 8010614:	444e      	add	r6, r9
 8010616:	eba5 0509 	sub.w	r5, r5, r9
 801061a:	6026      	str	r6, [r4, #0]
 801061c:	60a5      	str	r5, [r4, #8]
 801061e:	463e      	mov	r6, r7
 8010620:	42be      	cmp	r6, r7
 8010622:	d900      	bls.n	8010626 <__ssputs_r+0x86>
 8010624:	463e      	mov	r6, r7
 8010626:	6820      	ldr	r0, [r4, #0]
 8010628:	4632      	mov	r2, r6
 801062a:	4641      	mov	r1, r8
 801062c:	f000 fab8 	bl	8010ba0 <memmove>
 8010630:	68a3      	ldr	r3, [r4, #8]
 8010632:	1b9b      	subs	r3, r3, r6
 8010634:	60a3      	str	r3, [r4, #8]
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	4433      	add	r3, r6
 801063a:	6023      	str	r3, [r4, #0]
 801063c:	2000      	movs	r0, #0
 801063e:	e7db      	b.n	80105f8 <__ssputs_r+0x58>
 8010640:	462a      	mov	r2, r5
 8010642:	f000 fac7 	bl	8010bd4 <_realloc_r>
 8010646:	4606      	mov	r6, r0
 8010648:	2800      	cmp	r0, #0
 801064a:	d1e1      	bne.n	8010610 <__ssputs_r+0x70>
 801064c:	6921      	ldr	r1, [r4, #16]
 801064e:	4650      	mov	r0, sl
 8010650:	f7ff fe8a 	bl	8010368 <_free_r>
 8010654:	e7c7      	b.n	80105e6 <__ssputs_r+0x46>
	...

08010658 <_svfiprintf_r>:
 8010658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	4698      	mov	r8, r3
 801065e:	898b      	ldrh	r3, [r1, #12]
 8010660:	061b      	lsls	r3, r3, #24
 8010662:	b09d      	sub	sp, #116	; 0x74
 8010664:	4607      	mov	r7, r0
 8010666:	460d      	mov	r5, r1
 8010668:	4614      	mov	r4, r2
 801066a:	d50e      	bpl.n	801068a <_svfiprintf_r+0x32>
 801066c:	690b      	ldr	r3, [r1, #16]
 801066e:	b963      	cbnz	r3, 801068a <_svfiprintf_r+0x32>
 8010670:	2140      	movs	r1, #64	; 0x40
 8010672:	f7ff fee5 	bl	8010440 <_malloc_r>
 8010676:	6028      	str	r0, [r5, #0]
 8010678:	6128      	str	r0, [r5, #16]
 801067a:	b920      	cbnz	r0, 8010686 <_svfiprintf_r+0x2e>
 801067c:	230c      	movs	r3, #12
 801067e:	603b      	str	r3, [r7, #0]
 8010680:	f04f 30ff 	mov.w	r0, #4294967295
 8010684:	e0d1      	b.n	801082a <_svfiprintf_r+0x1d2>
 8010686:	2340      	movs	r3, #64	; 0x40
 8010688:	616b      	str	r3, [r5, #20]
 801068a:	2300      	movs	r3, #0
 801068c:	9309      	str	r3, [sp, #36]	; 0x24
 801068e:	2320      	movs	r3, #32
 8010690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010694:	f8cd 800c 	str.w	r8, [sp, #12]
 8010698:	2330      	movs	r3, #48	; 0x30
 801069a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010844 <_svfiprintf_r+0x1ec>
 801069e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106a2:	f04f 0901 	mov.w	r9, #1
 80106a6:	4623      	mov	r3, r4
 80106a8:	469a      	mov	sl, r3
 80106aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ae:	b10a      	cbz	r2, 80106b4 <_svfiprintf_r+0x5c>
 80106b0:	2a25      	cmp	r2, #37	; 0x25
 80106b2:	d1f9      	bne.n	80106a8 <_svfiprintf_r+0x50>
 80106b4:	ebba 0b04 	subs.w	fp, sl, r4
 80106b8:	d00b      	beq.n	80106d2 <_svfiprintf_r+0x7a>
 80106ba:	465b      	mov	r3, fp
 80106bc:	4622      	mov	r2, r4
 80106be:	4629      	mov	r1, r5
 80106c0:	4638      	mov	r0, r7
 80106c2:	f7ff ff6d 	bl	80105a0 <__ssputs_r>
 80106c6:	3001      	adds	r0, #1
 80106c8:	f000 80aa 	beq.w	8010820 <_svfiprintf_r+0x1c8>
 80106cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106ce:	445a      	add	r2, fp
 80106d0:	9209      	str	r2, [sp, #36]	; 0x24
 80106d2:	f89a 3000 	ldrb.w	r3, [sl]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 80a2 	beq.w	8010820 <_svfiprintf_r+0x1c8>
 80106dc:	2300      	movs	r3, #0
 80106de:	f04f 32ff 	mov.w	r2, #4294967295
 80106e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106e6:	f10a 0a01 	add.w	sl, sl, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	9307      	str	r3, [sp, #28]
 80106ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106f2:	931a      	str	r3, [sp, #104]	; 0x68
 80106f4:	4654      	mov	r4, sl
 80106f6:	2205      	movs	r2, #5
 80106f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106fc:	4851      	ldr	r0, [pc, #324]	; (8010844 <_svfiprintf_r+0x1ec>)
 80106fe:	f7ef fdef 	bl	80002e0 <memchr>
 8010702:	9a04      	ldr	r2, [sp, #16]
 8010704:	b9d8      	cbnz	r0, 801073e <_svfiprintf_r+0xe6>
 8010706:	06d0      	lsls	r0, r2, #27
 8010708:	bf44      	itt	mi
 801070a:	2320      	movmi	r3, #32
 801070c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010710:	0711      	lsls	r1, r2, #28
 8010712:	bf44      	itt	mi
 8010714:	232b      	movmi	r3, #43	; 0x2b
 8010716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801071a:	f89a 3000 	ldrb.w	r3, [sl]
 801071e:	2b2a      	cmp	r3, #42	; 0x2a
 8010720:	d015      	beq.n	801074e <_svfiprintf_r+0xf6>
 8010722:	9a07      	ldr	r2, [sp, #28]
 8010724:	4654      	mov	r4, sl
 8010726:	2000      	movs	r0, #0
 8010728:	f04f 0c0a 	mov.w	ip, #10
 801072c:	4621      	mov	r1, r4
 801072e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010732:	3b30      	subs	r3, #48	; 0x30
 8010734:	2b09      	cmp	r3, #9
 8010736:	d94e      	bls.n	80107d6 <_svfiprintf_r+0x17e>
 8010738:	b1b0      	cbz	r0, 8010768 <_svfiprintf_r+0x110>
 801073a:	9207      	str	r2, [sp, #28]
 801073c:	e014      	b.n	8010768 <_svfiprintf_r+0x110>
 801073e:	eba0 0308 	sub.w	r3, r0, r8
 8010742:	fa09 f303 	lsl.w	r3, r9, r3
 8010746:	4313      	orrs	r3, r2
 8010748:	9304      	str	r3, [sp, #16]
 801074a:	46a2      	mov	sl, r4
 801074c:	e7d2      	b.n	80106f4 <_svfiprintf_r+0x9c>
 801074e:	9b03      	ldr	r3, [sp, #12]
 8010750:	1d19      	adds	r1, r3, #4
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	9103      	str	r1, [sp, #12]
 8010756:	2b00      	cmp	r3, #0
 8010758:	bfbb      	ittet	lt
 801075a:	425b      	neglt	r3, r3
 801075c:	f042 0202 	orrlt.w	r2, r2, #2
 8010760:	9307      	strge	r3, [sp, #28]
 8010762:	9307      	strlt	r3, [sp, #28]
 8010764:	bfb8      	it	lt
 8010766:	9204      	strlt	r2, [sp, #16]
 8010768:	7823      	ldrb	r3, [r4, #0]
 801076a:	2b2e      	cmp	r3, #46	; 0x2e
 801076c:	d10c      	bne.n	8010788 <_svfiprintf_r+0x130>
 801076e:	7863      	ldrb	r3, [r4, #1]
 8010770:	2b2a      	cmp	r3, #42	; 0x2a
 8010772:	d135      	bne.n	80107e0 <_svfiprintf_r+0x188>
 8010774:	9b03      	ldr	r3, [sp, #12]
 8010776:	1d1a      	adds	r2, r3, #4
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	9203      	str	r2, [sp, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	bfb8      	it	lt
 8010780:	f04f 33ff 	movlt.w	r3, #4294967295
 8010784:	3402      	adds	r4, #2
 8010786:	9305      	str	r3, [sp, #20]
 8010788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010854 <_svfiprintf_r+0x1fc>
 801078c:	7821      	ldrb	r1, [r4, #0]
 801078e:	2203      	movs	r2, #3
 8010790:	4650      	mov	r0, sl
 8010792:	f7ef fda5 	bl	80002e0 <memchr>
 8010796:	b140      	cbz	r0, 80107aa <_svfiprintf_r+0x152>
 8010798:	2340      	movs	r3, #64	; 0x40
 801079a:	eba0 000a 	sub.w	r0, r0, sl
 801079e:	fa03 f000 	lsl.w	r0, r3, r0
 80107a2:	9b04      	ldr	r3, [sp, #16]
 80107a4:	4303      	orrs	r3, r0
 80107a6:	3401      	adds	r4, #1
 80107a8:	9304      	str	r3, [sp, #16]
 80107aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ae:	4826      	ldr	r0, [pc, #152]	; (8010848 <_svfiprintf_r+0x1f0>)
 80107b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80107b4:	2206      	movs	r2, #6
 80107b6:	f7ef fd93 	bl	80002e0 <memchr>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d038      	beq.n	8010830 <_svfiprintf_r+0x1d8>
 80107be:	4b23      	ldr	r3, [pc, #140]	; (801084c <_svfiprintf_r+0x1f4>)
 80107c0:	bb1b      	cbnz	r3, 801080a <_svfiprintf_r+0x1b2>
 80107c2:	9b03      	ldr	r3, [sp, #12]
 80107c4:	3307      	adds	r3, #7
 80107c6:	f023 0307 	bic.w	r3, r3, #7
 80107ca:	3308      	adds	r3, #8
 80107cc:	9303      	str	r3, [sp, #12]
 80107ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d0:	4433      	add	r3, r6
 80107d2:	9309      	str	r3, [sp, #36]	; 0x24
 80107d4:	e767      	b.n	80106a6 <_svfiprintf_r+0x4e>
 80107d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80107da:	460c      	mov	r4, r1
 80107dc:	2001      	movs	r0, #1
 80107de:	e7a5      	b.n	801072c <_svfiprintf_r+0xd4>
 80107e0:	2300      	movs	r3, #0
 80107e2:	3401      	adds	r4, #1
 80107e4:	9305      	str	r3, [sp, #20]
 80107e6:	4619      	mov	r1, r3
 80107e8:	f04f 0c0a 	mov.w	ip, #10
 80107ec:	4620      	mov	r0, r4
 80107ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107f2:	3a30      	subs	r2, #48	; 0x30
 80107f4:	2a09      	cmp	r2, #9
 80107f6:	d903      	bls.n	8010800 <_svfiprintf_r+0x1a8>
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d0c5      	beq.n	8010788 <_svfiprintf_r+0x130>
 80107fc:	9105      	str	r1, [sp, #20]
 80107fe:	e7c3      	b.n	8010788 <_svfiprintf_r+0x130>
 8010800:	fb0c 2101 	mla	r1, ip, r1, r2
 8010804:	4604      	mov	r4, r0
 8010806:	2301      	movs	r3, #1
 8010808:	e7f0      	b.n	80107ec <_svfiprintf_r+0x194>
 801080a:	ab03      	add	r3, sp, #12
 801080c:	9300      	str	r3, [sp, #0]
 801080e:	462a      	mov	r2, r5
 8010810:	4b0f      	ldr	r3, [pc, #60]	; (8010850 <_svfiprintf_r+0x1f8>)
 8010812:	a904      	add	r1, sp, #16
 8010814:	4638      	mov	r0, r7
 8010816:	f3af 8000 	nop.w
 801081a:	1c42      	adds	r2, r0, #1
 801081c:	4606      	mov	r6, r0
 801081e:	d1d6      	bne.n	80107ce <_svfiprintf_r+0x176>
 8010820:	89ab      	ldrh	r3, [r5, #12]
 8010822:	065b      	lsls	r3, r3, #25
 8010824:	f53f af2c 	bmi.w	8010680 <_svfiprintf_r+0x28>
 8010828:	9809      	ldr	r0, [sp, #36]	; 0x24
 801082a:	b01d      	add	sp, #116	; 0x74
 801082c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010830:	ab03      	add	r3, sp, #12
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	462a      	mov	r2, r5
 8010836:	4b06      	ldr	r3, [pc, #24]	; (8010850 <_svfiprintf_r+0x1f8>)
 8010838:	a904      	add	r1, sp, #16
 801083a:	4638      	mov	r0, r7
 801083c:	f000 f87a 	bl	8010934 <_printf_i>
 8010840:	e7eb      	b.n	801081a <_svfiprintf_r+0x1c2>
 8010842:	bf00      	nop
 8010844:	080125f0 	.word	0x080125f0
 8010848:	080125fa 	.word	0x080125fa
 801084c:	00000000 	.word	0x00000000
 8010850:	080105a1 	.word	0x080105a1
 8010854:	080125f6 	.word	0x080125f6

08010858 <_printf_common>:
 8010858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801085c:	4616      	mov	r6, r2
 801085e:	4699      	mov	r9, r3
 8010860:	688a      	ldr	r2, [r1, #8]
 8010862:	690b      	ldr	r3, [r1, #16]
 8010864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010868:	4293      	cmp	r3, r2
 801086a:	bfb8      	it	lt
 801086c:	4613      	movlt	r3, r2
 801086e:	6033      	str	r3, [r6, #0]
 8010870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010874:	4607      	mov	r7, r0
 8010876:	460c      	mov	r4, r1
 8010878:	b10a      	cbz	r2, 801087e <_printf_common+0x26>
 801087a:	3301      	adds	r3, #1
 801087c:	6033      	str	r3, [r6, #0]
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	0699      	lsls	r1, r3, #26
 8010882:	bf42      	ittt	mi
 8010884:	6833      	ldrmi	r3, [r6, #0]
 8010886:	3302      	addmi	r3, #2
 8010888:	6033      	strmi	r3, [r6, #0]
 801088a:	6825      	ldr	r5, [r4, #0]
 801088c:	f015 0506 	ands.w	r5, r5, #6
 8010890:	d106      	bne.n	80108a0 <_printf_common+0x48>
 8010892:	f104 0a19 	add.w	sl, r4, #25
 8010896:	68e3      	ldr	r3, [r4, #12]
 8010898:	6832      	ldr	r2, [r6, #0]
 801089a:	1a9b      	subs	r3, r3, r2
 801089c:	42ab      	cmp	r3, r5
 801089e:	dc26      	bgt.n	80108ee <_printf_common+0x96>
 80108a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80108a4:	1e13      	subs	r3, r2, #0
 80108a6:	6822      	ldr	r2, [r4, #0]
 80108a8:	bf18      	it	ne
 80108aa:	2301      	movne	r3, #1
 80108ac:	0692      	lsls	r2, r2, #26
 80108ae:	d42b      	bmi.n	8010908 <_printf_common+0xb0>
 80108b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108b4:	4649      	mov	r1, r9
 80108b6:	4638      	mov	r0, r7
 80108b8:	47c0      	blx	r8
 80108ba:	3001      	adds	r0, #1
 80108bc:	d01e      	beq.n	80108fc <_printf_common+0xa4>
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	68e5      	ldr	r5, [r4, #12]
 80108c2:	6832      	ldr	r2, [r6, #0]
 80108c4:	f003 0306 	and.w	r3, r3, #6
 80108c8:	2b04      	cmp	r3, #4
 80108ca:	bf08      	it	eq
 80108cc:	1aad      	subeq	r5, r5, r2
 80108ce:	68a3      	ldr	r3, [r4, #8]
 80108d0:	6922      	ldr	r2, [r4, #16]
 80108d2:	bf0c      	ite	eq
 80108d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108d8:	2500      	movne	r5, #0
 80108da:	4293      	cmp	r3, r2
 80108dc:	bfc4      	itt	gt
 80108de:	1a9b      	subgt	r3, r3, r2
 80108e0:	18ed      	addgt	r5, r5, r3
 80108e2:	2600      	movs	r6, #0
 80108e4:	341a      	adds	r4, #26
 80108e6:	42b5      	cmp	r5, r6
 80108e8:	d11a      	bne.n	8010920 <_printf_common+0xc8>
 80108ea:	2000      	movs	r0, #0
 80108ec:	e008      	b.n	8010900 <_printf_common+0xa8>
 80108ee:	2301      	movs	r3, #1
 80108f0:	4652      	mov	r2, sl
 80108f2:	4649      	mov	r1, r9
 80108f4:	4638      	mov	r0, r7
 80108f6:	47c0      	blx	r8
 80108f8:	3001      	adds	r0, #1
 80108fa:	d103      	bne.n	8010904 <_printf_common+0xac>
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010904:	3501      	adds	r5, #1
 8010906:	e7c6      	b.n	8010896 <_printf_common+0x3e>
 8010908:	18e1      	adds	r1, r4, r3
 801090a:	1c5a      	adds	r2, r3, #1
 801090c:	2030      	movs	r0, #48	; 0x30
 801090e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010912:	4422      	add	r2, r4
 8010914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801091c:	3302      	adds	r3, #2
 801091e:	e7c7      	b.n	80108b0 <_printf_common+0x58>
 8010920:	2301      	movs	r3, #1
 8010922:	4622      	mov	r2, r4
 8010924:	4649      	mov	r1, r9
 8010926:	4638      	mov	r0, r7
 8010928:	47c0      	blx	r8
 801092a:	3001      	adds	r0, #1
 801092c:	d0e6      	beq.n	80108fc <_printf_common+0xa4>
 801092e:	3601      	adds	r6, #1
 8010930:	e7d9      	b.n	80108e6 <_printf_common+0x8e>
	...

08010934 <_printf_i>:
 8010934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010938:	7e0f      	ldrb	r7, [r1, #24]
 801093a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801093c:	2f78      	cmp	r7, #120	; 0x78
 801093e:	4691      	mov	r9, r2
 8010940:	4680      	mov	r8, r0
 8010942:	460c      	mov	r4, r1
 8010944:	469a      	mov	sl, r3
 8010946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801094a:	d807      	bhi.n	801095c <_printf_i+0x28>
 801094c:	2f62      	cmp	r7, #98	; 0x62
 801094e:	d80a      	bhi.n	8010966 <_printf_i+0x32>
 8010950:	2f00      	cmp	r7, #0
 8010952:	f000 80d8 	beq.w	8010b06 <_printf_i+0x1d2>
 8010956:	2f58      	cmp	r7, #88	; 0x58
 8010958:	f000 80a3 	beq.w	8010aa2 <_printf_i+0x16e>
 801095c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010964:	e03a      	b.n	80109dc <_printf_i+0xa8>
 8010966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801096a:	2b15      	cmp	r3, #21
 801096c:	d8f6      	bhi.n	801095c <_printf_i+0x28>
 801096e:	a101      	add	r1, pc, #4	; (adr r1, 8010974 <_printf_i+0x40>)
 8010970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010974:	080109cd 	.word	0x080109cd
 8010978:	080109e1 	.word	0x080109e1
 801097c:	0801095d 	.word	0x0801095d
 8010980:	0801095d 	.word	0x0801095d
 8010984:	0801095d 	.word	0x0801095d
 8010988:	0801095d 	.word	0x0801095d
 801098c:	080109e1 	.word	0x080109e1
 8010990:	0801095d 	.word	0x0801095d
 8010994:	0801095d 	.word	0x0801095d
 8010998:	0801095d 	.word	0x0801095d
 801099c:	0801095d 	.word	0x0801095d
 80109a0:	08010aed 	.word	0x08010aed
 80109a4:	08010a11 	.word	0x08010a11
 80109a8:	08010acf 	.word	0x08010acf
 80109ac:	0801095d 	.word	0x0801095d
 80109b0:	0801095d 	.word	0x0801095d
 80109b4:	08010b0f 	.word	0x08010b0f
 80109b8:	0801095d 	.word	0x0801095d
 80109bc:	08010a11 	.word	0x08010a11
 80109c0:	0801095d 	.word	0x0801095d
 80109c4:	0801095d 	.word	0x0801095d
 80109c8:	08010ad7 	.word	0x08010ad7
 80109cc:	682b      	ldr	r3, [r5, #0]
 80109ce:	1d1a      	adds	r2, r3, #4
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	602a      	str	r2, [r5, #0]
 80109d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109dc:	2301      	movs	r3, #1
 80109de:	e0a3      	b.n	8010b28 <_printf_i+0x1f4>
 80109e0:	6820      	ldr	r0, [r4, #0]
 80109e2:	6829      	ldr	r1, [r5, #0]
 80109e4:	0606      	lsls	r6, r0, #24
 80109e6:	f101 0304 	add.w	r3, r1, #4
 80109ea:	d50a      	bpl.n	8010a02 <_printf_i+0xce>
 80109ec:	680e      	ldr	r6, [r1, #0]
 80109ee:	602b      	str	r3, [r5, #0]
 80109f0:	2e00      	cmp	r6, #0
 80109f2:	da03      	bge.n	80109fc <_printf_i+0xc8>
 80109f4:	232d      	movs	r3, #45	; 0x2d
 80109f6:	4276      	negs	r6, r6
 80109f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109fc:	485e      	ldr	r0, [pc, #376]	; (8010b78 <_printf_i+0x244>)
 80109fe:	230a      	movs	r3, #10
 8010a00:	e019      	b.n	8010a36 <_printf_i+0x102>
 8010a02:	680e      	ldr	r6, [r1, #0]
 8010a04:	602b      	str	r3, [r5, #0]
 8010a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a0a:	bf18      	it	ne
 8010a0c:	b236      	sxthne	r6, r6
 8010a0e:	e7ef      	b.n	80109f0 <_printf_i+0xbc>
 8010a10:	682b      	ldr	r3, [r5, #0]
 8010a12:	6820      	ldr	r0, [r4, #0]
 8010a14:	1d19      	adds	r1, r3, #4
 8010a16:	6029      	str	r1, [r5, #0]
 8010a18:	0601      	lsls	r1, r0, #24
 8010a1a:	d501      	bpl.n	8010a20 <_printf_i+0xec>
 8010a1c:	681e      	ldr	r6, [r3, #0]
 8010a1e:	e002      	b.n	8010a26 <_printf_i+0xf2>
 8010a20:	0646      	lsls	r6, r0, #25
 8010a22:	d5fb      	bpl.n	8010a1c <_printf_i+0xe8>
 8010a24:	881e      	ldrh	r6, [r3, #0]
 8010a26:	4854      	ldr	r0, [pc, #336]	; (8010b78 <_printf_i+0x244>)
 8010a28:	2f6f      	cmp	r7, #111	; 0x6f
 8010a2a:	bf0c      	ite	eq
 8010a2c:	2308      	moveq	r3, #8
 8010a2e:	230a      	movne	r3, #10
 8010a30:	2100      	movs	r1, #0
 8010a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a36:	6865      	ldr	r5, [r4, #4]
 8010a38:	60a5      	str	r5, [r4, #8]
 8010a3a:	2d00      	cmp	r5, #0
 8010a3c:	bfa2      	ittt	ge
 8010a3e:	6821      	ldrge	r1, [r4, #0]
 8010a40:	f021 0104 	bicge.w	r1, r1, #4
 8010a44:	6021      	strge	r1, [r4, #0]
 8010a46:	b90e      	cbnz	r6, 8010a4c <_printf_i+0x118>
 8010a48:	2d00      	cmp	r5, #0
 8010a4a:	d04d      	beq.n	8010ae8 <_printf_i+0x1b4>
 8010a4c:	4615      	mov	r5, r2
 8010a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010a52:	fb03 6711 	mls	r7, r3, r1, r6
 8010a56:	5dc7      	ldrb	r7, [r0, r7]
 8010a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010a5c:	4637      	mov	r7, r6
 8010a5e:	42bb      	cmp	r3, r7
 8010a60:	460e      	mov	r6, r1
 8010a62:	d9f4      	bls.n	8010a4e <_printf_i+0x11a>
 8010a64:	2b08      	cmp	r3, #8
 8010a66:	d10b      	bne.n	8010a80 <_printf_i+0x14c>
 8010a68:	6823      	ldr	r3, [r4, #0]
 8010a6a:	07de      	lsls	r6, r3, #31
 8010a6c:	d508      	bpl.n	8010a80 <_printf_i+0x14c>
 8010a6e:	6923      	ldr	r3, [r4, #16]
 8010a70:	6861      	ldr	r1, [r4, #4]
 8010a72:	4299      	cmp	r1, r3
 8010a74:	bfde      	ittt	le
 8010a76:	2330      	movle	r3, #48	; 0x30
 8010a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a80:	1b52      	subs	r2, r2, r5
 8010a82:	6122      	str	r2, [r4, #16]
 8010a84:	f8cd a000 	str.w	sl, [sp]
 8010a88:	464b      	mov	r3, r9
 8010a8a:	aa03      	add	r2, sp, #12
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	4640      	mov	r0, r8
 8010a90:	f7ff fee2 	bl	8010858 <_printf_common>
 8010a94:	3001      	adds	r0, #1
 8010a96:	d14c      	bne.n	8010b32 <_printf_i+0x1fe>
 8010a98:	f04f 30ff 	mov.w	r0, #4294967295
 8010a9c:	b004      	add	sp, #16
 8010a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa2:	4835      	ldr	r0, [pc, #212]	; (8010b78 <_printf_i+0x244>)
 8010aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010aa8:	6829      	ldr	r1, [r5, #0]
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8010ab0:	6029      	str	r1, [r5, #0]
 8010ab2:	061d      	lsls	r5, r3, #24
 8010ab4:	d514      	bpl.n	8010ae0 <_printf_i+0x1ac>
 8010ab6:	07df      	lsls	r7, r3, #31
 8010ab8:	bf44      	itt	mi
 8010aba:	f043 0320 	orrmi.w	r3, r3, #32
 8010abe:	6023      	strmi	r3, [r4, #0]
 8010ac0:	b91e      	cbnz	r6, 8010aca <_printf_i+0x196>
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	f023 0320 	bic.w	r3, r3, #32
 8010ac8:	6023      	str	r3, [r4, #0]
 8010aca:	2310      	movs	r3, #16
 8010acc:	e7b0      	b.n	8010a30 <_printf_i+0xfc>
 8010ace:	6823      	ldr	r3, [r4, #0]
 8010ad0:	f043 0320 	orr.w	r3, r3, #32
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	2378      	movs	r3, #120	; 0x78
 8010ad8:	4828      	ldr	r0, [pc, #160]	; (8010b7c <_printf_i+0x248>)
 8010ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ade:	e7e3      	b.n	8010aa8 <_printf_i+0x174>
 8010ae0:	0659      	lsls	r1, r3, #25
 8010ae2:	bf48      	it	mi
 8010ae4:	b2b6      	uxthmi	r6, r6
 8010ae6:	e7e6      	b.n	8010ab6 <_printf_i+0x182>
 8010ae8:	4615      	mov	r5, r2
 8010aea:	e7bb      	b.n	8010a64 <_printf_i+0x130>
 8010aec:	682b      	ldr	r3, [r5, #0]
 8010aee:	6826      	ldr	r6, [r4, #0]
 8010af0:	6961      	ldr	r1, [r4, #20]
 8010af2:	1d18      	adds	r0, r3, #4
 8010af4:	6028      	str	r0, [r5, #0]
 8010af6:	0635      	lsls	r5, r6, #24
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	d501      	bpl.n	8010b00 <_printf_i+0x1cc>
 8010afc:	6019      	str	r1, [r3, #0]
 8010afe:	e002      	b.n	8010b06 <_printf_i+0x1d2>
 8010b00:	0670      	lsls	r0, r6, #25
 8010b02:	d5fb      	bpl.n	8010afc <_printf_i+0x1c8>
 8010b04:	8019      	strh	r1, [r3, #0]
 8010b06:	2300      	movs	r3, #0
 8010b08:	6123      	str	r3, [r4, #16]
 8010b0a:	4615      	mov	r5, r2
 8010b0c:	e7ba      	b.n	8010a84 <_printf_i+0x150>
 8010b0e:	682b      	ldr	r3, [r5, #0]
 8010b10:	1d1a      	adds	r2, r3, #4
 8010b12:	602a      	str	r2, [r5, #0]
 8010b14:	681d      	ldr	r5, [r3, #0]
 8010b16:	6862      	ldr	r2, [r4, #4]
 8010b18:	2100      	movs	r1, #0
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f7ef fbe0 	bl	80002e0 <memchr>
 8010b20:	b108      	cbz	r0, 8010b26 <_printf_i+0x1f2>
 8010b22:	1b40      	subs	r0, r0, r5
 8010b24:	6060      	str	r0, [r4, #4]
 8010b26:	6863      	ldr	r3, [r4, #4]
 8010b28:	6123      	str	r3, [r4, #16]
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b30:	e7a8      	b.n	8010a84 <_printf_i+0x150>
 8010b32:	6923      	ldr	r3, [r4, #16]
 8010b34:	462a      	mov	r2, r5
 8010b36:	4649      	mov	r1, r9
 8010b38:	4640      	mov	r0, r8
 8010b3a:	47d0      	blx	sl
 8010b3c:	3001      	adds	r0, #1
 8010b3e:	d0ab      	beq.n	8010a98 <_printf_i+0x164>
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	079b      	lsls	r3, r3, #30
 8010b44:	d413      	bmi.n	8010b6e <_printf_i+0x23a>
 8010b46:	68e0      	ldr	r0, [r4, #12]
 8010b48:	9b03      	ldr	r3, [sp, #12]
 8010b4a:	4298      	cmp	r0, r3
 8010b4c:	bfb8      	it	lt
 8010b4e:	4618      	movlt	r0, r3
 8010b50:	e7a4      	b.n	8010a9c <_printf_i+0x168>
 8010b52:	2301      	movs	r3, #1
 8010b54:	4632      	mov	r2, r6
 8010b56:	4649      	mov	r1, r9
 8010b58:	4640      	mov	r0, r8
 8010b5a:	47d0      	blx	sl
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	d09b      	beq.n	8010a98 <_printf_i+0x164>
 8010b60:	3501      	adds	r5, #1
 8010b62:	68e3      	ldr	r3, [r4, #12]
 8010b64:	9903      	ldr	r1, [sp, #12]
 8010b66:	1a5b      	subs	r3, r3, r1
 8010b68:	42ab      	cmp	r3, r5
 8010b6a:	dcf2      	bgt.n	8010b52 <_printf_i+0x21e>
 8010b6c:	e7eb      	b.n	8010b46 <_printf_i+0x212>
 8010b6e:	2500      	movs	r5, #0
 8010b70:	f104 0619 	add.w	r6, r4, #25
 8010b74:	e7f5      	b.n	8010b62 <_printf_i+0x22e>
 8010b76:	bf00      	nop
 8010b78:	08012601 	.word	0x08012601
 8010b7c:	08012612 	.word	0x08012612

08010b80 <__retarget_lock_acquire_recursive>:
 8010b80:	4770      	bx	lr

08010b82 <__retarget_lock_release_recursive>:
 8010b82:	4770      	bx	lr

08010b84 <memcpy>:
 8010b84:	440a      	add	r2, r1
 8010b86:	4291      	cmp	r1, r2
 8010b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b8c:	d100      	bne.n	8010b90 <memcpy+0xc>
 8010b8e:	4770      	bx	lr
 8010b90:	b510      	push	{r4, lr}
 8010b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b9a:	4291      	cmp	r1, r2
 8010b9c:	d1f9      	bne.n	8010b92 <memcpy+0xe>
 8010b9e:	bd10      	pop	{r4, pc}

08010ba0 <memmove>:
 8010ba0:	4288      	cmp	r0, r1
 8010ba2:	b510      	push	{r4, lr}
 8010ba4:	eb01 0402 	add.w	r4, r1, r2
 8010ba8:	d902      	bls.n	8010bb0 <memmove+0x10>
 8010baa:	4284      	cmp	r4, r0
 8010bac:	4623      	mov	r3, r4
 8010bae:	d807      	bhi.n	8010bc0 <memmove+0x20>
 8010bb0:	1e43      	subs	r3, r0, #1
 8010bb2:	42a1      	cmp	r1, r4
 8010bb4:	d008      	beq.n	8010bc8 <memmove+0x28>
 8010bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010bbe:	e7f8      	b.n	8010bb2 <memmove+0x12>
 8010bc0:	4402      	add	r2, r0
 8010bc2:	4601      	mov	r1, r0
 8010bc4:	428a      	cmp	r2, r1
 8010bc6:	d100      	bne.n	8010bca <memmove+0x2a>
 8010bc8:	bd10      	pop	{r4, pc}
 8010bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bd2:	e7f7      	b.n	8010bc4 <memmove+0x24>

08010bd4 <_realloc_r>:
 8010bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd8:	4680      	mov	r8, r0
 8010bda:	4614      	mov	r4, r2
 8010bdc:	460e      	mov	r6, r1
 8010bde:	b921      	cbnz	r1, 8010bea <_realloc_r+0x16>
 8010be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010be4:	4611      	mov	r1, r2
 8010be6:	f7ff bc2b 	b.w	8010440 <_malloc_r>
 8010bea:	b92a      	cbnz	r2, 8010bf8 <_realloc_r+0x24>
 8010bec:	f7ff fbbc 	bl	8010368 <_free_r>
 8010bf0:	4625      	mov	r5, r4
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf8:	f000 f81b 	bl	8010c32 <_malloc_usable_size_r>
 8010bfc:	4284      	cmp	r4, r0
 8010bfe:	4607      	mov	r7, r0
 8010c00:	d802      	bhi.n	8010c08 <_realloc_r+0x34>
 8010c02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c06:	d812      	bhi.n	8010c2e <_realloc_r+0x5a>
 8010c08:	4621      	mov	r1, r4
 8010c0a:	4640      	mov	r0, r8
 8010c0c:	f7ff fc18 	bl	8010440 <_malloc_r>
 8010c10:	4605      	mov	r5, r0
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d0ed      	beq.n	8010bf2 <_realloc_r+0x1e>
 8010c16:	42bc      	cmp	r4, r7
 8010c18:	4622      	mov	r2, r4
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	bf28      	it	cs
 8010c1e:	463a      	movcs	r2, r7
 8010c20:	f7ff ffb0 	bl	8010b84 <memcpy>
 8010c24:	4631      	mov	r1, r6
 8010c26:	4640      	mov	r0, r8
 8010c28:	f7ff fb9e 	bl	8010368 <_free_r>
 8010c2c:	e7e1      	b.n	8010bf2 <_realloc_r+0x1e>
 8010c2e:	4635      	mov	r5, r6
 8010c30:	e7df      	b.n	8010bf2 <_realloc_r+0x1e>

08010c32 <_malloc_usable_size_r>:
 8010c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c36:	1f18      	subs	r0, r3, #4
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	bfbc      	itt	lt
 8010c3c:	580b      	ldrlt	r3, [r1, r0]
 8010c3e:	18c0      	addlt	r0, r0, r3
 8010c40:	4770      	bx	lr
	...

08010c44 <_init>:
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	bf00      	nop
 8010c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c4a:	bc08      	pop	{r3}
 8010c4c:	469e      	mov	lr, r3
 8010c4e:	4770      	bx	lr

08010c50 <_fini>:
 8010c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c52:	bf00      	nop
 8010c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c56:	bc08      	pop	{r3}
 8010c58:	469e      	mov	lr, r3
 8010c5a:	4770      	bx	lr
