
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b330  0800b330  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b338  0800b338  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b338  0800b338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800b340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800b350  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800b3b0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d00  240000d0  0800b410  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000dd0  0800b410  00020dd0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fa63  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003510  00000000  00000000  0003fb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001458  00000000  00000000  00043078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013a8  00000000  00000000  000444d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c1ba  00000000  00000000  00045878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b8b4  00000000  00000000  00081a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186f7f  00000000  00000000  0009d2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00224265  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000056a8  00000000  00000000  002242b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b260 	.word	0x0800b260

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800b260 	.word	0x0800b260

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789a      	ldrb	r2, [r3, #2]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	785a      	ldrb	r2, [r3, #1]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78da      	ldrb	r2, [r3, #3]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795a      	ldrb	r2, [r3, #5]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	799a      	ldrb	r2, [r3, #6]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	79da      	ldrb	r2, [r3, #7]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a1a      	ldrb	r2, [r3, #8]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a5a      	ldrb	r2, [r3, #9]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	725a      	strb	r2, [r3, #9]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffb8 	bl	80005dc <YUGIOH_card_copy>
}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3318      	adds	r3, #24
 8000680:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000682:	2300      	movs	r3, #0
 8000684:	72fb      	strb	r3, [r7, #11]
 8000686:	e008      	b.n	800069a <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ffde 	bl	800064a <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3310      	adds	r3, #16
 8000692:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	3301      	adds	r3, #1
 8000698:	72fb      	strb	r3, [r7, #11]
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d9f3      	bls.n	8000688 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3328      	adds	r3, #40	; 0x28
 80006bc:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	2358      	movs	r3, #88	; 0x58
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	3328      	adds	r3, #40	; 0x28
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3318      	adds	r3, #24
 80006d6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80006de:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d126      	bne.n	8000736 <Player_Reading_Card+0x8a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f8aa 	bl	8000842 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80006ee:	6979      	ldr	r1, [r7, #20]
 80006f0:	69b8      	ldr	r0, [r7, #24]
 80006f2:	f7ff ff73 	bl	80005dc <YUGIOH_card_copy>

		// Mod standPosition in case off 2 player
		ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	799a      	ldrb	r2, [r3, #6]
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <Player_Reading_Card+0x94>)
 80006fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000700:	0899      	lsrs	r1, r3, #2
 8000702:	460b      	mov	r3, r1
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	440b      	add	r3, r1
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b2da      	uxtb	r2, r3
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	719a      	strb	r2, [r3, #6]
		// Card Reading So it can't attack
		ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2200      	movs	r2, #0
 8000716:	721a      	strb	r2, [r3, #8]
		// Card Reading Then it can use it Effect
		ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	2201      	movs	r2, #1
 800071c:	725a      	strb	r2, [r3, #9]
		RFID_Clear_Card_Bufffer(ptrRFID);
 800071e:	69f8      	ldr	r0, [r7, #28]
 8000720:	f7ff ffa8 	bl	8000674 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
		state_game->action += 1;
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	701a      	strb	r2, [r3, #0]
	}
}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	aaaaaaab 	.word	0xaaaaaaab

08000744 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000760:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000762:	2300      	movs	r3, #0
 8000764:	76fb      	strb	r3, [r7, #27]
 8000766:	e00b      	b.n	8000780 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	69f9      	ldr	r1, [r7, #28]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff34 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3310      	adds	r3, #16
 8000778:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800077a:	7efb      	ldrb	r3, [r7, #27]
 800077c:	3301      	adds	r3, #1
 800077e:	76fb      	strb	r3, [r7, #27]
 8000780:	7efb      	ldrb	r3, [r7, #27]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d9f0      	bls.n	8000768 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80007ac:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	76fb      	strb	r3, [r7, #27]
 80007b2:	e00b      	b.n	80007cc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	69f9      	ldr	r1, [r7, #28]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff0e 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3310      	adds	r3, #16
 80007c4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007c6:	7efb      	ldrb	r3, [r7, #27]
 80007c8:	3301      	adds	r3, #1
 80007ca:	76fb      	strb	r3, [r7, #27]
 80007cc:	7efb      	ldrb	r3, [r7, #27]
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	d9f0      	bls.n	80007b4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3368      	adds	r3, #104	; 0x68
 80007d6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007d8:	2300      	movs	r3, #0
 80007da:	76bb      	strb	r3, [r7, #26]
 80007dc:	e00b      	b.n	80007f6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	69f9      	ldr	r1, [r7, #28]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fef9 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3310      	adds	r3, #16
 80007ee:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007f0:	7ebb      	ldrb	r3, [r7, #26]
 80007f2:	3301      	adds	r3, #1
 80007f4:	76bb      	strb	r3, [r7, #26]
 80007f6:	7ebb      	ldrb	r3, [r7, #26]
 80007f8:	2b13      	cmp	r3, #19
 80007fa:	d9f0      	bls.n	80007de <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3308      	adds	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000802:	2300      	movs	r3, #0
 8000804:	767b      	strb	r3, [r7, #25]
 8000806:	e00b      	b.n	8000820 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	69f9      	ldr	r1, [r7, #28]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fee4 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	3310      	adds	r3, #16
 8000818:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800081a:	7e7b      	ldrb	r3, [r7, #25]
 800081c:	3301      	adds	r3, #1
 800081e:	767b      	strb	r3, [r7, #25]
 8000820:	7e7b      	ldrb	r3, [r7, #25]
 8000822:	2b05      	cmp	r3, #5
 8000824:	d9f0      	bls.n	8000808 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800082c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	69f9      	ldr	r1, [r7, #28]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fed1 	bl	80005dc <YUGIOH_card_copy>
}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000850:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000858:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000860:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000868:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800086a:	2306      	movs	r3, #6
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e00c      	b.n	800088a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000870:	6939      	ldr	r1, [r7, #16]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff feb2 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3b10      	subs	r3, #16
 800087c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	3b10      	subs	r3, #16
 8000882:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3b01      	subs	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dcef      	bgt.n	8000870 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80008a8:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80008b0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80008b8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80008c0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80008c2:	2306      	movs	r3, #6
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e02c      	b.n	8000922 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80008c8:	6939      	ldr	r1, [r7, #16]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff fe86 	bl	80005dc <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3b02      	subs	r3, #2
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	1e50      	subs	r0, r2, #1
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	440b      	add	r3, r1
 80008ee:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3b02      	subs	r3, #2
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	1e50      	subs	r0, r2, #1
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3b10      	subs	r3, #16
 8000914:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	3b10      	subs	r3, #16
 800091a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3b01      	subs	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dccf      	bgt.n	80008c8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8000932:	b580      	push	{r7, lr}
 8000934:	b08a      	sub	sp, #40	; 0x28
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3368      	adds	r3, #104	; 0x68
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3368      	adds	r3, #104	; 0x68
 800095c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000964:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000966:	2314      	movs	r3, #20
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	e00c      	b.n	8000986 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800096c:	6a39      	ldr	r1, [r7, #32]
 800096e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000970:	f7ff fe34 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	3b10      	subs	r3, #16
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	3b10      	subs	r3, #16
 800097e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	3b01      	subs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	2b00      	cmp	r3, #0
 800098a:	dcef      	bgt.n	800096c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3368      	adds	r3, #104	; 0x68
 8000994:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000996:	6a39      	ldr	r1, [r7, #32]
 8000998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800099a:	f7ff fe1f 	bl	80005dc <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 80009a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009a6:	6a38      	ldr	r0, [r7, #32]
 80009a8:	f7ff fe18 	bl	80005dc <YUGIOH_card_copy>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	3304      	adds	r3, #4
 80009c2:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3304      	adds	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	3304      	adds	r3, #4
 80009ce:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80009d6:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->displayNSS = 0;
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 1;
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 80009e4:	2108      	movs	r1, #8
 80009e6:	4848      	ldr	r0, [pc, #288]	; (8000b08 <GAME_PLAY_Management+0x154>)
 80009e8:	f005 fae0 	bl	8005fac <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 80009f4:	2102      	movs	r1, #2
 80009f6:	4845      	ldr	r0, [pc, #276]	; (8000b0c <GAME_PLAY_Management+0x158>)
 80009f8:	f005 fad8 	bl	8005fac <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000a04:	2104      	movs	r1, #4
 8000a06:	4840      	ldr	r0, [pc, #256]	; (8000b08 <GAME_PLAY_Management+0x154>)
 8000a08:	f005 fad0 	bl	8005fac <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a18:	483d      	ldr	r0, [pc, #244]	; (8000b10 <GAME_PLAY_Management+0x15c>)
 8000a1a:	f005 fac7 	bl	8005fac <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000a2c:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	3304      	adds	r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	3304      	adds	r3, #4
 8000a38:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d85e      	bhi.n	8000afe <GAME_PLAY_Management+0x14a>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <GAME_PLAY_Management+0x94>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a5d 	.word	0x08000a5d
 8000a4c:	08000a97 	.word	0x08000a97
 8000a50:	08000ac5 	.word	0x08000ac5
 8000a54:	08000ae1 	.word	0x08000ae1
 8000a58:	08000afd 	.word	0x08000afd
	case Game_not_start:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	482d      	ldr	r0, [pc, #180]	; (8000b14 <GAME_PLAY_Management+0x160>)
 8000a60:	f005 faa4 	bl	8005fac <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d104      	bne.n	8000a74 <GAME_PLAY_Management+0xc0>
				== GPIO_PIN_RESET) {
			state_game->MainGame_State = Game_init;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8000a72:	e044      	b.n	8000afe <GAME_PLAY_Management+0x14a>
			state_game->PlyerAction_State = PS_AFK;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8000a94:	e033      	b.n	8000afe <GAME_PLAY_Management+0x14a>
	case Game_init:

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a9c:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000aa4:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8000aa6:	69f8      	ldr	r0, [r7, #28]
 8000aa8:	f7ff fe72 	bl	8000790 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8000aac:	69b8      	ldr	r0, [r7, #24]
 8000aae:	f7ff fe6f 	bl	8000790 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8000ac2:	e01c      	b.n	8000afe <GAME_PLAY_Management+0x14a>
	case first_player:
		ptrPlayerAtk = &state_game->player[0];
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000ad0:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	6839      	ldr	r1, [r7, #0]
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f81d 	bl	8000b18 <GAME_PLAY_Phase_Management>
		break;
 8000ade:	e00e      	b.n	8000afe <GAME_PLAY_Management+0x14a>
	case second_player:
		ptrPlayerAtk = &state_game->player[1];
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000ae6:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	3304      	adds	r3, #4
 8000aec:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f80f 	bl	8000b18 <GAME_PLAY_Phase_Management>
		break;
 8000afa:	e000      	b.n	8000afe <GAME_PLAY_Management+0x14a>
	case Game_Ended:
		break;
 8000afc:	bf00      	nop
	}
}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	58020800 	.word	0x58020800
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	58021400 	.word	0x58021400
 8000b14:	58020000 	.word	0x58020000

08000b18 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8000b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8000b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8000b40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 8000b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	f200 8589 	bhi.w	8001660 <GAME_PLAY_Phase_Management+0xb48>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <GAME_PLAY_Phase_Management+0x3c>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08001653 	.word	0x08001653
 8000b58:	08000b65 	.word	0x08000b65
 8000b5c:	08000b97 	.word	0x08000b97
 8000b60:	080012b9 	.word	0x080012b9
	case PS_AFK:
		break;
	case Drawn_Phase:
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000b64:	2101      	movs	r1, #1
 8000b66:	48b2      	ldr	r0, [pc, #712]	; (8000e30 <GAME_PLAY_Phase_Management+0x318>)
 8000b68:	f005 fa20 	bl	8005fac <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8571 	bne.w	8001656 <GAME_PLAY_Phase_Management+0xb3e>
				== GPIO_PIN_RESET) {
			state_game->PlyerAction_State = Main_Phase;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2202      	movs	r2, #2
 8000b78:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000b8a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b8e:	f002 f8bf 	bl	8002d10 <HAL_Delay>
		}
		break;
 8000b92:	f000 bd60 	b.w	8001656 <GAME_PLAY_Phase_Management+0xb3e>
	case Main_Phase:

		switch (PMS)
 8000b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	f200 855d 	bhi.w	800165a <GAME_PLAY_Phase_Management+0xb42>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <GAME_PLAY_Phase_Management+0x90>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08001299 	.word	0x08001299
 8000bac:	08000bc9 	.word	0x08000bc9
 8000bb0:	08000c2d 	.word	0x08000c2d
 8000bb4:	08000c95 	.word	0x08000c95
 8000bb8:	08000e4f 	.word	0x08000e4f
 8000bbc:	08001053 	.word	0x08001053
 8000bc0:	08000fd1 	.word	0x08000fd1
 8000bc4:	08000f51 	.word	0x08000f51
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d11f      	bne.n	8000c10 <GAME_PLAY_Phase_Management+0xf8>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4897      	ldr	r0, [pc, #604]	; (8000e30 <GAME_PLAY_Phase_Management+0x318>)
 8000bd4:	f005 f9ea 	bl	8005fac <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d112      	bne.n	8000c04 <GAME_PLAY_Phase_Management+0xec>
						== GPIO_PIN_RESET){
					state_game->action = 50;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2232      	movs	r2, #50	; 0x32
 8000be2:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->PlyerAction_State = Battle_Phase;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	2203      	movs	r2, #3
 8000bf0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1500);
 8000bfc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c00:	f002 f886 	bl	8002d10 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff fd4f 	bl	80006ac <Player_Reading_Card>
			{
				// Reset Chain count
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8000c0e:	e345      	b.n	800129c <GAME_PLAY_Phase_Management+0x784>
			else if (state_game->action == 1)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	f040 8341 	bne.w	800129c <GAME_PLAY_Phase_Management+0x784>
				state_game->ChainCount = 0;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	2202      	movs	r2, #2
 8000c26:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000c2a:	e337      	b.n	800129c <GAME_PLAY_Phase_Management+0x784>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c32:	623b      	str	r3, [r7, #32]
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (state_game->action == 1)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d116      	bne.n	8000c72 <GAME_PLAY_Phase_Management+0x15a>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	789b      	ldrb	r3, [r3, #2]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d106      	bne.n	8000c5a <GAME_PLAY_Phase_Management+0x142>
					ptrYugiohCard_src->cardState = 0;
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8000c58:	e322      	b.n	80012a0 <GAME_PLAY_Phase_Management+0x788>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 831e 	bne.w	80012a0 <GAME_PLAY_Phase_Management+0x788>
					ptrYugiohCard_src->cardState = 1;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	2201      	movs	r2, #1
 8000c68:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	701a      	strb	r2, [r3, #0]
			break;
 8000c70:	e316      	b.n	80012a0 <GAME_PLAY_Phase_Management+0x788>
			else if (state_game->action == 2)
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	f040 8312 	bne.w	80012a0 <GAME_PLAY_Phase_Management+0x788>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000c7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c7e:	6a38      	ldr	r0, [r7, #32]
 8000c80:	f7ff fcac 	bl	80005dc <YUGIOH_card_copy>
				state_game->action = 3;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2203      	movs	r2, #3
 8000c88:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000c92:	e305      	b.n	80012a0 <GAME_PLAY_Phase_Management+0x788>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000c9a:	623b      	str	r3, [r7, #32]

			if (state_game->action == 3)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	f040 82ff 	bne.w	80012a4 <GAME_PLAY_Phase_Management+0x78c>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	785b      	ldrb	r3, [r3, #1]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d127      	bne.n	8000cfe <GAME_PLAY_Phase_Management+0x1e6>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	799a      	ldrb	r2, [r3, #6]
 8000cb2:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <GAME_PLAY_Phase_Management+0x31c>)
 8000cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb8:	0899      	lsrs	r1, r3, #2
 8000cba:	460b      	mov	r3, r1
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	440b      	add	r3, r1
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	743b      	strb	r3, [r7, #16]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000cc6:	7c3b      	ldrb	r3, [r7, #16]
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	3308      	adds	r3, #8
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cd4:	6a38      	ldr	r0, [r7, #32]
 8000cd6:	f7ff fc81 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fd32 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ce6:	6a39      	ldr	r1, [r7, #32]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc77 	bl	80005dc <YUGIOH_card_copy>

					state_game->action = 0;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8000cfc:	e2d2      	b.n	80012a4 <GAME_PLAY_Phase_Management+0x78c>
				else if (ptrYugiohCard_src->cardType == 2)
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	785b      	ldrb	r3, [r3, #1]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d15a      	bne.n	8000dbc <GAME_PLAY_Phase_Management+0x2a4>
					state_game->count_chain = 1;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d12b      	bne.n	8000d6c <GAME_PLAY_Phase_Management+0x254>
						state_game->action = 4;
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2204      	movs	r2, #4
 8000d18:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8000d1a:	68b8      	ldr	r0, [r7, #8]
 8000d1c:	f7ff fdbd 	bl	800089a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000d26:	4619      	mov	r1, r3
 8000d28:	6a38      	ldr	r0, [r7, #32]
 8000d2a:	f7ff fc57 	bl	80005dc <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8000d44:	3301      	adds	r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fcf8 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000d5a:	6a39      	ldr	r1, [r7, #32]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fc3d 	bl	80005dc <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2207      	movs	r2, #7
 8000d66:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000d6a:	e29b      	b.n	80012a4 <GAME_PLAY_Phase_Management+0x78c>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	799a      	ldrb	r2, [r3, #6]
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <GAME_PLAY_Phase_Management+0x31c>)
 8000d72:	fba3 1302 	umull	r1, r3, r3, r2
 8000d76:	0899      	lsrs	r1, r3, #2
 8000d78:	460b      	mov	r3, r1
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	440b      	add	r3, r1
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	747b      	strb	r3, [r7, #17]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000d84:	7c7b      	ldrb	r3, [r7, #17]
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	3308      	adds	r3, #8
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d92:	6a38      	ldr	r0, [r7, #32]
 8000d94:	f7ff fc22 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fcd3 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000da4:	6a39      	ldr	r1, [r7, #32]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc18 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000dba:	e273      	b.n	80012a4 <GAME_PLAY_Phase_Management+0x78c>
				else if (ptrYugiohCard_src->cardType == 1)
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	f040 826f 	bne.w	80012a4 <GAME_PLAY_Phase_Management+0x78c>
					state_game->test = 2;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2202      	movs	r2, #2
 8000dca:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	78db      	ldrb	r3, [r3, #3]
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d830      	bhi.n	8000e38 <GAME_PLAY_Phase_Management+0x320>
						state_game->test = 1;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	799a      	ldrb	r2, [r3, #6]
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <GAME_PLAY_Phase_Management+0x31c>)
 8000de4:	fba3 1302 	umull	r1, r3, r3, r2
 8000de8:	0899      	lsrs	r1, r3, #2
 8000dea:	460b      	mov	r3, r1
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	440b      	add	r3, r1
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	74bb      	strb	r3, [r7, #18]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000df6:	7cbb      	ldrb	r3, [r7, #18]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e04:	6a38      	ldr	r0, [r7, #32]
 8000e06:	f7ff fbe9 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fc9a 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e16:	6a39      	ldr	r1, [r7, #32]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbdf 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000e2c:	e23a      	b.n	80012a4 <GAME_PLAY_Phase_Management+0x78c>
 8000e2e:	bf00      	nop
 8000e30:	58020800 	.word	0x58020800
 8000e34:	aaaaaaab 	.word	0xaaaaaaab
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fc83 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2204      	movs	r2, #4
 8000e42:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2204      	movs	r2, #4
 8000e48:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000e4c:	e22a      	b.n	80012a4 <GAME_PLAY_Phase_Management+0x78c>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e54:	623b      	str	r3, [r7, #32]

			if (state_game->action == 4)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d105      	bne.n	8000e6a <GAME_PLAY_Phase_Management+0x352>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f7ff fc22 	bl	80006ac <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
				}
			}
			break;
 8000e68:	e21e      	b.n	80012a8 <GAME_PLAY_Phase_Management+0x790>
			else if (state_game->action == 5)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d105      	bne.n	8000e7e <GAME_PLAY_Phase_Management+0x366>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff fc18 	bl	80006ac <Player_Reading_Card>
			break;
 8000e7c:	e214      	b.n	80012a8 <GAME_PLAY_Phase_Management+0x790>
			else if (state_game->action == 6)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	f040 8210 	bne.w	80012a8 <GAME_PLAY_Phase_Management+0x790>
				uint8_t monsterflag = 0 ;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e98:	78db      	ldrb	r3, [r3, #3]
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d804      	bhi.n	8000ea8 <GAME_PLAY_Phase_Management+0x390>
					monsterflag += 1;
 8000e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				ptrYugiohCard_dst++;
 8000ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eaa:	3310      	adds	r3, #16
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	78db      	ldrb	r3, [r3, #3]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d804      	bhi.n	8000ec0 <GAME_PLAY_Phase_Management+0x3a8>
					monsterflag += 1;
 8000eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000eba:	3301      	adds	r3, #1
 8000ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (monsterflag == 2)
 8000ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d135      	bne.n	8000f34 <GAME_PLAY_Phase_Management+0x41c>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	799a      	ldrb	r2, [r3, #6]
 8000ecc:	4ba5      	ldr	r3, [pc, #660]	; (8001164 <GAME_PLAY_Phase_Management+0x64c>)
 8000ece:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed2:	0899      	lsrs	r1, r3, #2
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	440b      	add	r3, r1
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	74fb      	strb	r3, [r7, #19]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000ee0:	7cfb      	ldrb	r3, [r7, #19]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	3308      	adds	r3, #8
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000eee:	6a38      	ldr	r0, [r7, #32]
 8000ef0:	f7ff fb74 	bl	80005dc <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000efa:	4619      	mov	r1, r3
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fd18 	bl	8000932 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fd11 	bl	8000932 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fc17 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f1c:	6a39      	ldr	r1, [r7, #32]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb5c 	bl	80005dc <YUGIOH_card_copy>
					state_game->action = 0;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000f32:	e1b9      	b.n	80012a8 <GAME_PLAY_Phase_Management+0x790>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff fc05 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f7ff fb47 	bl	80005dc <YUGIOH_card_copy>
			break;
 8000f4e:	e1ab      	b.n	80012a8 <GAME_PLAY_Phase_Management+0x790>
		case chaining_main_DEF:

			// Current state_game->action = 4

			if(state_game->action == 4)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d110      	bne.n	8000f7a <GAME_PLAY_Phase_Management+0x462>
			{
				if (playerDef->noBTN == GPIO_PIN_RESET){
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	789b      	ldrb	r3, [r3, #2]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d106      	bne.n	8000f6e <GAME_PLAY_Phase_Management+0x456>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2205      	movs	r2, #5
 8000f64:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff fb9a 	bl	80006ac <Player_Reading_Card>
				state_game->ChainCount++;

				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 8000f78:	e198      	b.n	80012ac <GAME_PLAY_Phase_Management+0x794>
			else if ((state_game->action == 5 )){
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	f040 8194 	bne.w	80012ac <GAME_PLAY_Phase_Management+0x794>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f8a:	623b      	str	r3, [r7, #32]
				YUGIOH_card_Buffer_Update_Chain(state_game);
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f7ff fc84 	bl	800089a <YUGIOH_card_Buffer_Update_Chain>
				YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6a38      	ldr	r0, [r7, #32]
 8000f9c:	f7ff fb1e 	bl	80005dc <YUGIOH_card_copy>
				state_game->ptrChainUser[0] = playerDef;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
				state_game->ptrChainOpponent[0] = playerAtk;
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
				state_game->ChainCount++;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2206      	movs	r2, #6
 8000fc4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	701a      	strb	r2, [r3, #0]
			break;
 8000fce:	e16d      	b.n	80012ac <GAME_PLAY_Phase_Management+0x794>
		case chaining_main_ATK:
			if(state_game->action == 4)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d111      	bne.n	8000ffc <GAME_PLAY_Phase_Management+0x4e4>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff fb65 	bl	80006ac <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 8162 	bne.w	80012b0 <GAME_PLAY_Phase_Management+0x798>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	705a      	strb	r2, [r3, #1]
				state_game->ChainCount++;

				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 8000ffa:	e159      	b.n	80012b0 <GAME_PLAY_Phase_Management+0x798>
			else if ((state_game->action == 5 )){
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b05      	cmp	r3, #5
 8001002:	f040 8155 	bne.w	80012b0 <GAME_PLAY_Phase_Management+0x798>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800100c:	623b      	str	r3, [r7, #32]
				YUGIOH_card_Buffer_Update_Chain(state_game);
 800100e:	68b8      	ldr	r0, [r7, #8]
 8001010:	f7ff fc43 	bl	800089a <YUGIOH_card_Buffer_Update_Chain>
				YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800101a:	4619      	mov	r1, r3
 800101c:	6a38      	ldr	r0, [r7, #32]
 800101e:	f7ff fadd 	bl	80005dc <YUGIOH_card_copy>
				state_game->ptrChainUser[0] = playerAtk;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
				state_game->ptrChainOpponent[0] = playerDef;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
				state_game->ChainCount++;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2207      	movs	r2, #7
 8001046:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2204      	movs	r2, #4
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e12e      	b.n	80012b0 <GAME_PLAY_Phase_Management+0x798>
		case activate_effect:
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	4413      	add	r3, r2
 8001060:	3304      	adds	r3, #4
 8001062:	61bb      	str	r3, [r7, #24]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	4413      	add	r3, r2
 8001072:	3304      	adds	r3, #4
 8001074:	617b      	str	r3, [r7, #20]

			if(state_game->action == 4)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d174      	bne.n	8001168 <GAME_PLAY_Phase_Management+0x650>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	785a      	ldrb	r2, [r3, #1]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001088:	429a      	cmp	r2, r3
 800108a:	d262      	bcs.n	8001152 <GAME_PLAY_Phase_Management+0x63a>
				{
					state_game->test = 165;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	22a5      	movs	r2, #165	; 0xa5
 8001090:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	3344      	adds	r3, #68	; 0x44
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	4413      	add	r3, r2
 80010a0:	3304      	adds	r3, #4
 80010a2:	623b      	str	r3, [r7, #32]

					if (ptrYugiohCard_src->cardSignature == 11)
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b0b      	cmp	r3, #11
 80010aa:	d10b      	bne.n	80010c4 <GAME_PLAY_Phase_Management+0x5ac>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 faf1 	bl	8001698 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						state_game->count_chain++;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	705a      	strb	r2, [r3, #1]
					YUGIOH_Ancient_Rules(*ptrUser);
					state_game->action = 4;
					state_game->count_chain++;
				}
			}
			break;
 80010c2:	e0f7      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
					else if (ptrYugiohCard_src->cardSignature == 12)
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b0c      	cmp	r3, #12
 80010ca:	d10e      	bne.n	80010ea <GAME_PLAY_Phase_Management+0x5d2>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f000 fafe 	bl	80016d8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						state_game->count_chain++;
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	705a      	strb	r2, [r3, #1]
			break;
 80010e8:	e0e4      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
					else if (ptrYugiohCard_src->cardSignature == 13)
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b0d      	cmp	r3, #13
 80010f0:	d107      	bne.n	8001102 <GAME_PLAY_Phase_Management+0x5ea>
						state_game->test = 166;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	22a6      	movs	r2, #166	; 0xa6
 80010f6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2205      	movs	r2, #5
 80010fe:	701a      	strb	r2, [r3, #0]
			break;
 8001100:	e0d8      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b0e      	cmp	r3, #14
 8001108:	d003      	beq.n	8001112 <GAME_PLAY_Phase_Management+0x5fa>
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	d112      	bne.n	8001138 <GAME_PLAY_Phase_Management+0x620>
						state_game->test = 133;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2285      	movs	r2, #133	; 0x85
 8001116:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f000 fbab 	bl	8001880 <YUGIOH_Gift_of_the_Mystical_Elf>
						state_game->count_chain++;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	705a      	strb	r2, [r3, #1]
			break;
 8001136:	e0bd      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b10      	cmp	r3, #16
 800113e:	f040 80b9 	bne.w	80012b4 <GAME_PLAY_Phase_Management+0x79c>
						state_game->test = 124;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	227c      	movs	r2, #124	; 0x7c
 8001146:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2205      	movs	r2, #5
 800114e:	701a      	strb	r2, [r3, #0]
			break;
 8001150:	e0b0      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
					state_game->action = 0;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001160:	e0a8      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
 8001162:	bf00      	nop
 8001164:	aaaaaaab 	.word	0xaaaaaaab
			else if (state_game->action == 5)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d10b      	bne.n	8001188 <GAME_PLAY_Phase_Management+0x670>
				state_game->test = 167;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	22a7      	movs	r2, #167	; 0xa7
 8001174:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				Player_Reading_Card(RFIDmain, state_game, *ptrUser);
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff fa93 	bl	80006ac <Player_Reading_Card>
			break;
 8001186:	e095      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
			else if (state_game->action == 6)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b06      	cmp	r3, #6
 800118e:	f040 8091 	bne.w	80012b4 <GAME_PLAY_Phase_Management+0x79c>
				state_game->test = 169;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	22a9      	movs	r2, #169	; 0xa9
 8001196:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	3344      	adds	r3, #68	; 0x44
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4413      	add	r3, r2
 80011a6:	3304      	adds	r3, #4
 80011a8:	623b      	str	r3, [r7, #32]
				if (ptrYugiohCard_src->cardSignature == 13)
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b0d      	cmp	r3, #13
 80011b0:	d15f      	bne.n	8001272 <GAME_PLAY_Phase_Management+0x75a>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	789b      	ldrb	r3, [r3, #2]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d12a      	bne.n	8001212 <GAME_PLAY_Phase_Management+0x6fa>
						state_game->test = 170;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	22aa      	movs	r2, #170	; 0xaa
 80011c0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
						ptrYugiohCard_dst->cardState = 0;
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	2200      	movs	r2, #0
 80011d2:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011dc:	4619      	mov	r1, r3
 80011de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011e0:	f7ff f9fc 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fab3 	bl	8001754 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4610      	mov	r0, r2
 80011fa:	f000 fa35 	bl	8001668 <Test_EFF>
						state_game->action = 4;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2204      	movs	r2, #4
 8001202:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	705a      	strb	r2, [r3, #1]
			break;
 8001210:	e050      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d14b      	bne.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
						state_game->test = 171;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	22ab      	movs	r2, #171	; 0xab
 8001220:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
						ptrYugiohCard_dst->cardState = 1;
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	2201      	movs	r2, #1
 8001232:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800123c:	4619      	mov	r1, r3
 800123e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001240:	f7ff f9cc 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fa83 	bl	8001754 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	4610      	mov	r0, r2
 800125a:	f000 fa05 	bl	8001668 <Test_EFF>
						state_game->action = 4;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2204      	movs	r2, #4
 8001262:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	785b      	ldrb	r3, [r3, #1]
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	705a      	strb	r2, [r3, #1]
			break;
 8001270:	e020      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b10      	cmp	r3, #16
 8001278:	d11c      	bne.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
					YUGIOH_Ancient_Rules(*ptrUser);
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fad2 	bl	8001828 <YUGIOH_Ancient_Rules>
					state_game->action = 4;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2204      	movs	r2, #4
 8001288:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	705a      	strb	r2, [r3, #1]
			break;
 8001296:	e00d      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x79c>
			break;
 8001298:	bf00      	nop
 800129a:	e1de      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
			break;
 800129c:	bf00      	nop
 800129e:	e1dc      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
			break;
 80012a0:	bf00      	nop
 80012a2:	e1da      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
			break;
 80012a4:	bf00      	nop
 80012a6:	e1d8      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
			break;
 80012a8:	bf00      	nop
 80012aa:	e1d6      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
			break;
 80012ac:	bf00      	nop
 80012ae:	e1d4      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
			break;
 80012b0:	bf00      	nop
 80012b2:	e1d2      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
			break;
 80012b4:	bf00      	nop
		}
		break;
 80012b6:	e1d0      	b.n	800165a <GAME_PLAY_Phase_Management+0xb42>
		case Battle_Phase:

			switch(PBS){
 80012b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012bc:	2b06      	cmp	r3, #6
 80012be:	f200 81ce 	bhi.w	800165e <GAME_PLAY_Phase_Management+0xb46>
 80012c2:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <GAME_PLAY_Phase_Management+0x7b0>)
 80012c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c8:	0800163f 	.word	0x0800163f
 80012cc:	080012e5 	.word	0x080012e5
 80012d0:	0800144d 	.word	0x0800144d
 80012d4:	08001401 	.word	0x08001401
 80012d8:	0800163f 	.word	0x0800163f
 80012dc:	08001499 	.word	0x08001499
 80012e0:	08001603 	.word	0x08001603
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b32      	cmp	r3, #50	; 0x32
 80012ea:	d122      	bne.n	8001332 <GAME_PLAY_Phase_Management+0x81a>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f7ff f9db 	bl	80006ac <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80012f6:	2101      	movs	r1, #1
 80012f8:	4897      	ldr	r0, [pc, #604]	; (8001558 <GAME_PLAY_Phase_Management+0xa40>)
 80012fa:	f004 fe57 	bl	8005fac <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 819e 	bne.w	8001642 <GAME_PLAY_Phase_Management+0xb2a>
							== GPIO_PIN_RESET){
						state_game->action = 0;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
						if(state_game->MainGame_State == first_player){
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001312:	2b02      	cmp	r3, #2
 8001314:	d104      	bne.n	8001320 <GAME_PLAY_Phase_Management+0x808>
							state_game->MainGame_State = second_player;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2203      	movs	r2, #3
 800131a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800131e:	e003      	b.n	8001328 <GAME_PLAY_Phase_Management+0x810>
						}
						else{
							state_game->MainGame_State = first_player;
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
							break;
						}
						ptrYugiohCard_dst++;
					}
				}
				break;
 8001330:	e187      	b.n	8001642 <GAME_PLAY_Phase_Management+0xb2a>
				else if(state_game->action == 51){
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b33      	cmp	r3, #51	; 0x33
 8001338:	f040 8183 	bne.w	8001642 <GAME_PLAY_Phase_Management+0xb2a>
					uint8_t check_def_mon = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					ptrYugiohCard_src = &playerDef->cardOnBoard[3];
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	3338      	adds	r3, #56	; 0x38
 8001346:	623b      	str	r3, [r7, #32]
					for(uint8_t i = 0;i < 3; ++i){
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800134e:	e00d      	b.n	800136c <GAME_PLAY_Phase_Management+0x854>
						if(ptrYugiohCard_src->cardData == 0){
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d104      	bne.n	8001362 <GAME_PLAY_Phase_Management+0x84a>
							check_def_mon++;
 8001358:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800135c:	3301      	adds	r3, #1
 800135e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					for(uint8_t i = 0;i < 3; ++i){
 8001362:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001366:	3301      	adds	r3, #1
 8001368:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800136c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001370:	2b02      	cmp	r3, #2
 8001372:	d9ed      	bls.n	8001350 <GAME_PLAY_Phase_Management+0x838>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800137a:	623b      	str	r3, [r7, #32]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3338      	adds	r3, #56	; 0x38
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
					for (uint8_t i = 0;i < 3; ++i) {
 8001382:	2300      	movs	r3, #0
 8001384:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001388:	e033      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x8da>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	429a      	cmp	r2, r3
 8001394:	d125      	bne.n	80013e2 <GAME_PLAY_Phase_Management+0x8ca>
							if(ptrYugiohCard_dst->cardState == 1){
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	789b      	ldrb	r3, [r3, #2]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d12e      	bne.n	80013fc <GAME_PLAY_Phase_Management+0x8e4>
								YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013a4:	4619      	mov	r1, r3
 80013a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013a8:	f7ff f918 	bl	80005dc <YUGIOH_card_copy>
								ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
								if(check_def_mon == 3){
 80013b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d103      	bne.n	80013c4 <GAME_PLAY_Phase_Management+0x8ac>
									ptrYugiohCard_dst->targetPosition = 99;
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	2263      	movs	r2, #99	; 0x63
 80013c0:	71da      	strb	r2, [r3, #7]
 80013c2:	e003      	b.n	80013cc <GAME_PLAY_Phase_Management+0x8b4>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	799a      	ldrb	r2, [r3, #6]
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	f7ff f9b9 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2234      	movs	r2, #52	; 0x34
 80013d6:	701a      	strb	r2, [r3, #0]
								state_game->PlyerAction_Battle_Substate = counter_DEF;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							break;
 80013e0:	e00c      	b.n	80013fc <GAME_PLAY_Phase_Management+0x8e4>
						ptrYugiohCard_dst++;
 80013e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e4:	3310      	adds	r3, #16
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					for (uint8_t i = 0;i < 3; ++i) {
 80013e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ec:	3301      	adds	r3, #1
 80013ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80013f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d9c7      	bls.n	800138a <GAME_PLAY_Phase_Management+0x872>
				break;
 80013fa:	e122      	b.n	8001642 <GAME_PLAY_Phase_Management+0xb2a>
							break;
 80013fc:	bf00      	nop
				break;
 80013fe:	e120      	b.n	8001642 <GAME_PLAY_Phase_Management+0xb2a>
			case counter_DEF:
				//action 52
				//				state_game->test = 34;
				if(state_game->action == 52)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b34      	cmp	r3, #52	; 0x34
 8001406:	d10e      	bne.n	8001426 <GAME_PLAY_Phase_Management+0x90e>
				{
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff f94d 	bl	80006ac <Player_Reading_Card>
					//					state_game->test = 35;
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	789b      	ldrb	r3, [r3, #2]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 8115 	bne.w	8001646 <GAME_PLAY_Phase_Management+0xb2e>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2205      	movs	r2, #5
 8001420:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}
				break;
 8001424:	e10f      	b.n	8001646 <GAME_PLAY_Phase_Management+0xb2e>
				else if ((state_game->action == 53 )){
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b35      	cmp	r3, #53	; 0x35
 800142c:	f040 810b 	bne.w	8001646 <GAME_PLAY_Phase_Management+0xb2e>
					state_game->count_chain += 1;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	3301      	adds	r3, #1
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2236      	movs	r2, #54	; 0x36
 8001448:	701a      	strb	r2, [r3, #0]
				break;
 800144a:	e0fc      	b.n	8001646 <GAME_PLAY_Phase_Management+0xb2e>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b36      	cmp	r3, #54	; 0x36
 8001452:	d10e      	bne.n	8001472 <GAME_PLAY_Phase_Management+0x95a>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff f927 	bl	80006ac <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	789b      	ldrb	r3, [r3, #2]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80f1 	bne.w	800164a <GAME_PLAY_Phase_Management+0xb32>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2205      	movs	r2, #5
 800146c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 52;
				}
				break;
 8001470:	e0eb      	b.n	800164a <GAME_PLAY_Phase_Management+0xb32>
				else if ((state_game->action == 55 )){
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b37      	cmp	r3, #55	; 0x37
 8001478:	f040 80e7 	bne.w	800164a <GAME_PLAY_Phase_Management+0xb32>
					state_game->count_chain += 1;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	785b      	ldrb	r3, [r3, #1]
 8001480:	3301      	adds	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2203      	movs	r2, #3
 800148c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 52;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2234      	movs	r2, #52	; 0x34
 8001494:	701a      	strb	r2, [r3, #0]
				break;
 8001496:	e0d8      	b.n	800164a <GAME_PLAY_Phase_Management+0xb32>
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800149e:	623b      	str	r3, [r7, #32]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	791b      	ldrb	r3, [r3, #4]
 80014a4:	77fb      	strb	r3, [r7, #31]

				if(ptrYugiohCard_src->targetPosition == 99){
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	79db      	ldrb	r3, [r3, #7]
 80014aa:	2b63      	cmp	r3, #99	; 0x63
 80014ac:	d114      	bne.n	80014d8 <GAME_PLAY_Phase_Management+0x9c0>
					playerDef->life_point -= atk*100;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	889a      	ldrh	r2, [r3, #4]
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4619      	mov	r1, r3
 80014b8:	0249      	lsls	r1, r1, #9
 80014ba:	1ac9      	subs	r1, r1, r3
 80014bc:	0089      	lsls	r1, r1, #2
 80014be:	4419      	add	r1, r3
 80014c0:	00c9      	lsls	r1, r1, #3
 80014c2:	1acb      	subs	r3, r1, r3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2206      	movs	r2, #6
 80014d4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				}

				ptrYugiohCard_dst = playerDef->cardOnBoard;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3308      	adds	r3, #8
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c

				ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	799b      	ldrb	r3, [r3, #6]
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	3308      	adds	r3, #8
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				state_game->test = 54;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2236      	movs	r2, #54	; 0x36
 80014f0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				if(ptrYugiohCard_dst->cardState == 0){
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d12f      	bne.n	800155c <GAME_PLAY_Phase_Management+0xa44>
					//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 80014fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fe:	795b      	ldrb	r3, [r3, #5]
 8001500:	777b      	strb	r3, [r7, #29]
					if(atk < def){
 8001502:	7ffa      	ldrb	r2, [r7, #31]
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	429a      	cmp	r2, r3
 8001508:	d217      	bcs.n	800153a <GAME_PLAY_Phase_Management+0xa22>
						playerAtk->life_point -= (def-atk)*100;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	889a      	ldrh	r2, [r3, #4]
 800150e:	7f79      	ldrb	r1, [r7, #29]
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	1acb      	subs	r3, r1, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	4619      	mov	r1, r3
 8001518:	0249      	lsls	r1, r1, #9
 800151a:	1ac9      	subs	r1, r1, r3
 800151c:	0089      	lsls	r1, r1, #2
 800151e:	4419      	add	r1, r3
 8001520:	00c9      	lsls	r1, r1, #3
 8001522:	1acb      	subs	r3, r1, r3
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	b29b      	uxth	r3, r3
 8001528:	4413      	add	r3, r2
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2206      	movs	r2, #6
 8001534:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						playerDef->life_point -= (atk-atk2)*100;
						state_game->PlyerAction_Battle_Substate = after_calculate;
					}

				}
				break;
 8001538:	e089      	b.n	800164e <GAME_PLAY_Phase_Management+0xb36>
					else if(atk > def){
 800153a:	7ffa      	ldrb	r2, [r7, #31]
 800153c:	7f7b      	ldrb	r3, [r7, #29]
 800153e:	429a      	cmp	r2, r3
 8001540:	f240 8085 	bls.w	800164e <GAME_PLAY_Phase_Management+0xb36>
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8001544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f7ff f9f3 	bl	8000932 <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2206      	movs	r2, #6
 8001550:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001554:	e07b      	b.n	800164e <GAME_PLAY_Phase_Management+0xb36>
 8001556:	bf00      	nop
 8001558:	58020800 	.word	0x58020800
				else if(ptrYugiohCard_dst->cardState == 1){
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	789b      	ldrb	r3, [r3, #2]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d174      	bne.n	800164e <GAME_PLAY_Phase_Management+0xb36>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	77bb      	strb	r3, [r7, #30]
					state_game->test = 60;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	223c      	movs	r2, #60	; 0x3c
 800156e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(atk < atk2){
 8001572:	7ffa      	ldrb	r2, [r7, #31]
 8001574:	7fbb      	ldrb	r3, [r7, #30]
 8001576:	429a      	cmp	r2, r3
 8001578:	d21f      	bcs.n	80015ba <GAME_PLAY_Phase_Management+0xaa2>
						state_game->test = 61;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	223d      	movs	r2, #61	; 0x3d
 800157e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						playerAtk->life_point -= (atk2-atk)*100;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	889a      	ldrh	r2, [r3, #4]
 8001586:	7fb9      	ldrb	r1, [r7, #30]
 8001588:	7ffb      	ldrb	r3, [r7, #31]
 800158a:	1acb      	subs	r3, r1, r3
 800158c:	b29b      	uxth	r3, r3
 800158e:	4619      	mov	r1, r3
 8001590:	0249      	lsls	r1, r1, #9
 8001592:	1ac9      	subs	r1, r1, r3
 8001594:	0089      	lsls	r1, r1, #2
 8001596:	4419      	add	r1, r3
 8001598:	00c9      	lsls	r1, r1, #3
 800159a:	1acb      	subs	r3, r1, r3
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	809a      	strh	r2, [r3, #4]
						YUGIOH_To_GY(playerAtk, ptrYugiohCard_src);
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff f9c1 	bl	8000932 <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2206      	movs	r2, #6
 80015b4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80015b8:	e049      	b.n	800164e <GAME_PLAY_Phase_Management+0xb36>
					else if(atk > atk2){
 80015ba:	7ffa      	ldrb	r2, [r7, #31]
 80015bc:	7fbb      	ldrb	r3, [r7, #30]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d945      	bls.n	800164e <GAME_PLAY_Phase_Management+0xb36>
						state_game->test = 70;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2246      	movs	r2, #70	; 0x46
 80015c6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80015ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f7ff f9b0 	bl	8000932 <YUGIOH_To_GY>
						playerDef->life_point -= (atk-atk2)*100;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	889a      	ldrh	r2, [r3, #4]
 80015d6:	7ff9      	ldrb	r1, [r7, #31]
 80015d8:	7fbb      	ldrb	r3, [r7, #30]
 80015da:	1acb      	subs	r3, r1, r3
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	1ac9      	subs	r1, r1, r3
 80015e4:	0089      	lsls	r1, r1, #2
 80015e6:	4419      	add	r1, r3
 80015e8:	00c9      	lsls	r1, r1, #3
 80015ea:	1acb      	subs	r3, r1, r3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2206      	movs	r2, #6
 80015fc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001600:	e025      	b.n	800164e <GAME_PLAY_Phase_Management+0xb36>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001608:	623b      	str	r3, [r7, #32]
				YUGIOH_card_clear(ptrYugiohCard_src);
 800160a:	6a38      	ldr	r0, [r7, #32]
 800160c:	f7ff f81d 	bl	800064a <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <GAME_PLAY_Phase_Management+0xb0c>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	889b      	ldrh	r3, [r3, #4]
 800161c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001620:	4293      	cmp	r3, r2
 8001622:	d904      	bls.n	800162e <GAME_PLAY_Phase_Management+0xb16>
					state_game->MainGame_State = Game_Ended;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2204      	movs	r2, #4
 8001628:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 800162c:	e010      	b.n	8001650 <GAME_PLAY_Phase_Management+0xb38>
					state_game->action = 50;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2232      	movs	r2, #50	; 0x32
 8001632:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800163c:	e008      	b.n	8001650 <GAME_PLAY_Phase_Management+0xb38>
				break;
 800163e:	bf00      	nop
 8001640:	e00d      	b.n	800165e <GAME_PLAY_Phase_Management+0xb46>
				break;
 8001642:	bf00      	nop
 8001644:	e00b      	b.n	800165e <GAME_PLAY_Phase_Management+0xb46>
				break;
 8001646:	bf00      	nop
 8001648:	e009      	b.n	800165e <GAME_PLAY_Phase_Management+0xb46>
				break;
 800164a:	bf00      	nop
 800164c:	e007      	b.n	800165e <GAME_PLAY_Phase_Management+0xb46>
				break;
 800164e:	bf00      	nop
			}
			break;
 8001650:	e005      	b.n	800165e <GAME_PLAY_Phase_Management+0xb46>
		break;
 8001652:	bf00      	nop
 8001654:	e004      	b.n	8001660 <GAME_PLAY_Phase_Management+0xb48>
		break;
 8001656:	bf00      	nop
 8001658:	e002      	b.n	8001660 <GAME_PLAY_Phase_Management+0xb48>
		break;
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <GAME_PLAY_Phase_Management+0xb48>
			break;
 800165e:	bf00      	nop

	}
}
 8001660:	bf00      	nop
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <Test_EFF>:

void Test_EFF(Player *playerUser,Player *playerOpponent)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	playerUser->life_point += 1000;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	889b      	ldrh	r3, [r3, #4]
 8001676:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	809a      	strh	r2, [r3, #4]
	playerOpponent->life_point -=100;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	889b      	ldrh	r3, [r3, #4]
 8001684:	3b64      	subs	r3, #100	; 0x64
 8001686:	b29a      	uxth	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	809a      	strh	r2, [r3, #4]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3338      	adds	r3, #56	; 0x38
 80016a4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	72fb      	strb	r3, [r7, #11]
 80016aa:	e00d      	b.n	80016c8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80016b4:	68f9      	ldr	r1, [r7, #12]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff f93b 	bl	8000932 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3310      	adds	r3, #16
 80016c0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016c2:	7afb      	ldrb	r3, [r7, #11]
 80016c4:	3301      	adds	r3, #1
 80016c6:	72fb      	strb	r3, [r7, #11]
 80016c8:	7afb      	ldrb	r3, [r7, #11]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d9ee      	bls.n	80016ac <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3308      	adds	r3, #8
 80016e6:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3338      	adds	r3, #56	; 0x38
 80016ec:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3308      	adds	r3, #8
 80016f2:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e00d      	b.n	800171c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8001708:	6979      	ldr	r1, [r7, #20]
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff f911 	bl	8000932 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3310      	adds	r3, #16
 8001714:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	3301      	adds	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d9ee      	bls.n	8001700 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001722:	2300      	movs	r3, #0
 8001724:	73bb      	strb	r3, [r7, #14]
 8001726:	e00d      	b.n	8001744 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f7ff f8fd 	bl	8000932 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3310      	adds	r3, #16
 800173c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	3301      	adds	r3, #1
 8001742:	73bb      	strb	r3, [r7, #14]
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d9ee      	bls.n	8001728 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800176a:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3368      	adds	r3, #104	; 0x68
 8001770:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3368      	adds	r3, #104	; 0x68
 8001776:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001778:	2300      	movs	r3, #0
 800177a:	74fb      	strb	r3, [r7, #19]
 800177c:	e010      	b.n	80017a0 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	429a      	cmp	r2, r3
 8001788:	d104      	bne.n	8001794 <YUGIOH_Reborn+0x40>
			flag = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800178e:	7cfb      	ldrb	r3, [r7, #19]
 8001790:	77bb      	strb	r3, [r7, #30]
			break;
 8001792:	e008      	b.n	80017a6 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3310      	adds	r3, #16
 8001798:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	3301      	adds	r3, #1
 800179e:	74fb      	strb	r3, [r7, #19]
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
 80017a2:	2b13      	cmp	r3, #19
 80017a4:	d9eb      	bls.n	800177e <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3338      	adds	r3, #56	; 0x38
 80017aa:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80017ac:	7ffb      	ldrb	r3, [r7, #31]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d134      	bne.n	800181c <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	799a      	ldrb	r2, [r3, #6]
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <YUGIOH_Reborn+0xd0>)
 80017b8:	fba3 1302 	umull	r1, r3, r3, r2
 80017bc:	0899      	lsrs	r1, r3, #2
 80017be:	460b      	mov	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	440b      	add	r3, r1
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	3308      	adds	r3, #8
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	69b8      	ldr	r0, [r7, #24]
 80017d8:	f7fe ff00 	bl	80005dc <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80017dc:	7fbb      	ldrb	r3, [r7, #30]
 80017de:	3301      	adds	r3, #1
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	3368      	adds	r3, #104	; 0x68
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80017ea:	7fbb      	ldrb	r3, [r7, #30]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3368      	adds	r3, #104	; 0x68
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e00c      	b.n	8001816 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	69b8      	ldr	r0, [r7, #24]
 8001800:	f7fe feec 	bl	80005dc <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	3310      	adds	r3, #16
 8001808:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3310      	adds	r3, #16
 800180e:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b13      	cmp	r3, #19
 800181a:	ddef      	ble.n	80017fc <YUGIOH_Reborn+0xa8>
		}


	}
}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	aaaaaaab 	.word	0xaaaaaaab

08001828 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001836:	617b      	str	r3, [r7, #20]
    ptrYugiohCard_src = &player->ActtionBuffer[0];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800183e:	617b      	str	r3, [r7, #20]

    uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	799a      	ldrb	r2, [r3, #6]
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <YUGIOH_Ancient_Rules+0x54>)
 8001846:	fba3 1302 	umull	r1, r3, r3, r2
 800184a:	0899      	lsrs	r1, r3, #2
 800184c:	460b      	mov	r3, r1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	440b      	add	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	74fb      	strb	r3, [r7, #19]

    YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3308      	adds	r3, #8
 800185c:	60fb      	str	r3, [r7, #12]
    ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800185e:	7cfb      	ldrb	r3, [r7, #19]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	3308      	adds	r3, #8
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

    YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	6978      	ldr	r0, [r7, #20]
 800186e:	f7fe feb5 	bl	80005dc <YUGIOH_card_copy>

}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	aaaaaaab 	.word	0xaaaaaaab

08001880 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3308      	adds	r3, #8
 800188e:	617b      	str	r3, [r7, #20]
    ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3338      	adds	r3, #56	; 0x38
 8001894:	617b      	str	r3, [r7, #20]

    //player2
    YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3308      	adds	r3, #8
 800189a:	613b      	str	r3, [r7, #16]
    ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	613b      	str	r3, [r7, #16]

    uint8_t count_monster = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	73bb      	strb	r3, [r7, #14]
 80018aa:	e00c      	b.n	80018c6 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
        if(ptrYUGIOHCard_player1->cardType == 1){
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
            count_monster += 1;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	3301      	adds	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
        }
        ptrYUGIOHCard_player1++;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3310      	adds	r3, #16
 80018be:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73bb      	strb	r3, [r7, #14]
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d9ef      	bls.n	80018ac <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
    }
    for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	737b      	strb	r3, [r7, #13]
 80018d0:	e00c      	b.n	80018ec <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
        if(ptrYUGIOHCard_player2->cardType == 1){
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
            count_monster += 1;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
        }
        ptrYUGIOHCard_player2++;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3310      	adds	r3, #16
 80018e4:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	3301      	adds	r3, #1
 80018ea:	737b      	strb	r3, [r7, #13]
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d9ef      	bls.n	80018d2 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
    }

    player1->life_point += 300*count_monster;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	889a      	ldrh	r2, [r3, #4]
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4619      	mov	r1, r3
 80018fc:	0089      	lsls	r1, r1, #2
 80018fe:	440b      	add	r3, r1
 8001900:	4619      	mov	r1, r3
 8001902:	0109      	lsls	r1, r1, #4
 8001904:	1acb      	subs	r3, r1, r3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	b29b      	uxth	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	809a      	strh	r2, [r3, #4]

}
 8001912:	bf00      	nop
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <SystemInit+0xfc>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a3c      	ldr	r2, [pc, #240]	; (8001a1c <SystemInit+0xfc>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001934:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <SystemInit+0xfc>)
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <SystemInit+0xfc>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <SystemInit+0x100>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	2b06      	cmp	r3, #6
 800194a:	d807      	bhi.n	800195c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <SystemInit+0x100>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 030f 	bic.w	r3, r3, #15
 8001954:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <SystemInit+0x100>)
 8001956:	f043 0307 	orr.w	r3, r3, #7
 800195a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <SystemInit+0x104>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <SystemInit+0x104>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <SystemInit+0x104>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <SystemInit+0x104>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	492c      	ldr	r1, [pc, #176]	; (8001a24 <SystemInit+0x104>)
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <SystemInit+0x108>)
 8001976:	4013      	ands	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <SystemInit+0x100>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <SystemInit+0x100>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 030f 	bic.w	r3, r3, #15
 800198e:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <SystemInit+0x100>)
 8001990:	f043 0307 	orr.w	r3, r3, #7
 8001994:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <SystemInit+0x104>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <SystemInit+0x104>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <SystemInit+0x104>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <SystemInit+0x104>)
 80019aa:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <SystemInit+0x10c>)
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <SystemInit+0x104>)
 80019b0:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <SystemInit+0x110>)
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <SystemInit+0x104>)
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <SystemInit+0x114>)
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <SystemInit+0x104>)
 80019bc:	2200      	movs	r2, #0
 80019be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <SystemInit+0x104>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <SystemInit+0x114>)
 80019c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <SystemInit+0x104>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <SystemInit+0x104>)
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <SystemInit+0x114>)
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <SystemInit+0x104>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <SystemInit+0x104>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <SystemInit+0x104>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <SystemInit+0x104>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <SystemInit+0x118>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <SystemInit+0x118>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <SystemInit+0x11c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <SystemInit+0x120>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a02:	d202      	bcs.n	8001a0a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <SystemInit+0x124>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <SystemInit+0x128>)
 8001a0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a10:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	52002000 	.word	0x52002000
 8001a24:	58024400 	.word	0x58024400
 8001a28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a2c:	02020200 	.word	0x02020200
 8001a30:	01ff0000 	.word	0x01ff0000
 8001a34:	01010280 	.word	0x01010280
 8001a38:	580000c0 	.word	0x580000c0
 8001a3c:	5c001000 	.word	0x5c001000
 8001a40:	ffff0000 	.word	0xffff0000
 8001a44:	51008108 	.word	0x51008108
 8001a48:	52004000 	.word	0x52004000

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a56:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001a58:	bf00      	nop
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <main+0xe8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <main+0x24>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dcf4      	bgt.n	8001a5a <main+0xe>
	if ( timeout < 0 )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da01      	bge.n	8001a7a <main+0x2e>
	{
		Error_Handler();
 8001a76:	f000 fb97 	bl	80021a8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7a:	f001 f8b7 	bl	8002bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a7e:	f000 f861 	bl	8001b44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a82:	f000 f8e3 	bl	8001c4c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <main+0xe8>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <main+0xe8>)
 8001a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <main+0xe8>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f004 facd 	bl	8006044 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2000      	movs	r0, #0
 8001aae:	f004 fae3 	bl	8006078 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ab8:	bf00      	nop
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <main+0xe8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d104      	bne.n	8001ad0 <main+0x84>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	1e5a      	subs	r2, r3, #1
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dcf4      	bgt.n	8001aba <main+0x6e>
	if ( timeout < 0 )
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da01      	bge.n	8001ada <main+0x8e>
	{
		Error_Handler();
 8001ad6:	f000 fb67 	bl	80021a8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ada:	f000 fa35 	bl	8001f48 <MX_GPIO_Init>
  MX_ETH_Init();
 8001ade:	f000 f8e7 	bl	8001cb0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001ae2:	f000 f989 	bl	8001df8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001ae6:	f000 fa07 	bl	8001ef8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001aea:	f000 f9d3 	bl	8001e94 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001aee:	f000 f92b 	bl	8001d48 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8001af2:	f000 fc61 	bl	80023b8 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 fd75 	bl	80025e6 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 fd61 	bl	80025c4 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8001b02:	f001 f8f9 	bl	8002cf8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <main+0xec>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2bc8      	cmp	r3, #200	; 0xc8
 8001b10:	d9f7      	bls.n	8001b02 <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 8001b12:	f001 f8f1 	bl	8002cf8 <HAL_GetTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <main+0xec>)
 8001b1a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b20:	4806      	ldr	r0, [pc, #24]	; (8001b3c <main+0xf0>)
 8001b22:	f004 fa74 	bl	800600e <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8001b26:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001b2a:	4905      	ldr	r1, [pc, #20]	; (8001b40 <main+0xf4>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe ff41 	bl	80009b4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8001b32:	e7e6      	b.n	8001b02 <main+0xb6>
 8001b34:	58024400 	.word	0x58024400
 8001b38:	24000dc0 	.word	0x24000dc0
 8001b3c:	58020400 	.word	0x58020400
 8001b40:	240008e8 	.word	0x240008e8

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b09c      	sub	sp, #112	; 0x70
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	224c      	movs	r2, #76	; 0x4c
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f009 fb7c 	bl	800b250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f009 fb76 	bl	800b250 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b64:	2004      	movs	r0, #4
 8001b66:	f004 fbe3 	bl	8006330 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <SystemClock_Config+0xfc>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	4a33      	ldr	r2, [pc, #204]	; (8001c40 <SystemClock_Config+0xfc>)
 8001b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b78:	6193      	str	r3, [r2, #24]
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <SystemClock_Config+0xfc>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <SystemClock_Config+0x100>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <SystemClock_Config+0x100>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <SystemClock_Config+0x100>)
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b9c:	bf00      	nop
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <SystemClock_Config+0xfc>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001baa:	d1f8      	bne.n	8001b9e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <SystemClock_Config+0x104>)
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f023 0303 	bic.w	r3, r3, #3
 8001bb4:	4a24      	ldr	r2, [pc, #144]	; (8001c48 <SystemClock_Config+0x104>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001bd2:	2378      	movs	r3, #120	; 0x78
 8001bd4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001be2:	230c      	movs	r3, #12
 8001be4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fc06 	bl	8006404 <HAL_RCC_OscConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001bfe:	f000 fad3 	bl	80021a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c02:	233f      	movs	r3, #63	; 0x3f
 8001c04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c06:	2303      	movs	r3, #3
 8001c08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c0e:	2308      	movs	r3, #8
 8001c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c16:	2340      	movs	r3, #64	; 0x40
 8001c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2104      	movs	r1, #4
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 f819 	bl	8006c60 <HAL_RCC_ClockConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c34:	f000 fab8 	bl	80021a8 <Error_Handler>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3770      	adds	r7, #112	; 0x70
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	58024800 	.word	0x58024800
 8001c44:	58000400 	.word	0x58000400
 8001c48:	58024400 	.word	0x58024400

08001c4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0b0      	sub	sp, #192	; 0xc0
 8001c50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	22bc      	movs	r2, #188	; 0xbc
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f009 faf9 	bl	800b250 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001c5e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8001c62:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001c68:	2318      	movs	r3, #24
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001c78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001c8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 fb6e 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001ca2:	f000 fa81 	bl	80021a8 <Error_Handler>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	37c0      	adds	r7, #192	; 0xc0
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_ETH_Init+0x80>)
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <MX_ETH_Init+0x84>)
 8001cb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cba:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <MX_ETH_Init+0x88>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <MX_ETH_Init+0x88>)
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_ETH_Init+0x88>)
 8001cc8:	22e1      	movs	r2, #225	; 0xe1
 8001cca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_ETH_Init+0x88>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_ETH_Init+0x88>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_ETH_Init+0x88>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_ETH_Init+0x80>)
 8001ce0:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <MX_ETH_Init+0x88>)
 8001ce2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_ETH_Init+0x80>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_ETH_Init+0x80>)
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <MX_ETH_Init+0x8c>)
 8001cee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_ETH_Init+0x80>)
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <MX_ETH_Init+0x90>)
 8001cf4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_ETH_Init+0x80>)
 8001cf8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001cfc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MX_ETH_Init+0x80>)
 8001d00:	f003 fb80 	bl	8005404 <HAL_ETH_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001d0a:	f000 fa4d 	bl	80021a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d0e:	2238      	movs	r2, #56	; 0x38
 8001d10:	2100      	movs	r1, #0
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_ETH_Init+0x94>)
 8001d14:	f009 fa9c 	bl	800b250 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <MX_ETH_Init+0x94>)
 8001d1a:	2221      	movs	r2, #33	; 0x21
 8001d1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_ETH_Init+0x94>)
 8001d20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_ETH_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	24000124 	.word	0x24000124
 8001d34:	40028000 	.word	0x40028000
 8001d38:	24000dc4 	.word	0x24000dc4
 8001d3c:	24000070 	.word	0x24000070
 8001d40:	24000010 	.word	0x24000010
 8001d44:	240000ec 	.word	0x240000ec

08001d48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d4c:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d4e:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <MX_SPI3_Init+0xac>)
 8001d50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d52:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d60:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d82:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_SPI3_Init+0xa8>)
 8001ddc:	f006 fe34 	bl	8008a48 <HAL_SPI_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001de6:	f000 f9df 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	240001d4 	.word	0x240001d4
 8001df4:	40003c00 	.word	0x40003c00

08001df8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001dfe:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <MX_USART3_UART_Init+0x94>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e04:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <MX_USART3_UART_Init+0x98>)
 8001e06:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e40:	f007 f9e3 	bl	800920a <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001e4a:	f000 f9ad 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e52:	f008 fe05 	bl	800aa60 <HAL_UARTEx_SetTxFifoThreshold>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001e5c:	f000 f9a4 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e60:	2100      	movs	r1, #0
 8001e62:	4809      	ldr	r0, [pc, #36]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e64:	f008 fe3a 	bl	800aadc <HAL_UARTEx_SetRxFifoThreshold>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001e6e:	f000 f99b 	bl	80021a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART3_UART_Init+0x90>)
 8001e74:	f008 fdbb 	bl	800a9ee <HAL_UARTEx_DisableFifoMode>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001e7e:	f000 f993 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2400025c 	.word	0x2400025c
 8001e8c:	40004800 	.word	0x40004800
 8001e90:	0005dc00 	.word	0x0005dc00

08001e94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ea0:	2209      	movs	r2, #9
 8001ea2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001edc:	f004 f8e0 	bl	80060a0 <HAL_PCD_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001ee6:	f000 f95f 	bl	80021a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	240003dc 	.word	0x240003dc
 8001ef4:	40080000 	.word	0x40080000

08001ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_DMA_Init+0x4c>)
 8001f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <MX_DMA_Init+0x4c>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <MX_DMA_Init+0x4c>)
 8001f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	200c      	movs	r0, #12
 8001f22:	f001 f814 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f26:	200c      	movs	r0, #12
 8001f28:	f001 f82b 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	200f      	movs	r0, #15
 8001f32:	f001 f80c 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f36:	200f      	movs	r0, #15
 8001f38:	f001 f823 	bl	8002f82 <HAL_NVIC_EnableIRQ>

}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	58024400 	.word	0x58024400

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	4b8a      	ldr	r3, [pc, #552]	; (8002188 <MX_GPIO_Init+0x240>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a88      	ldr	r2, [pc, #544]	; (8002188 <MX_GPIO_Init+0x240>)
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b86      	ldr	r3, [pc, #536]	; (8002188 <MX_GPIO_Init+0x240>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7c:	4b82      	ldr	r3, [pc, #520]	; (8002188 <MX_GPIO_Init+0x240>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	4a81      	ldr	r2, [pc, #516]	; (8002188 <MX_GPIO_Init+0x240>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8c:	4b7e      	ldr	r3, [pc, #504]	; (8002188 <MX_GPIO_Init+0x240>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <MX_GPIO_Init+0x240>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa0:	4a79      	ldr	r2, [pc, #484]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001faa:	4b77      	ldr	r3, [pc, #476]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	4b73      	ldr	r3, [pc, #460]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	4a72      	ldr	r2, [pc, #456]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc8:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd6:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b68      	ldr	r3, [pc, #416]	; (8002188 <MX_GPIO_Init+0x240>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff4:	4b64      	ldr	r3, [pc, #400]	; (8002188 <MX_GPIO_Init+0x240>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a63      	ldr	r2, [pc, #396]	; (8002188 <MX_GPIO_Init+0x240>)
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b60      	ldr	r3, [pc, #384]	; (8002188 <MX_GPIO_Init+0x240>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <MX_GPIO_Init+0x240>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002018:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <MX_GPIO_Init+0x240>)
 800201a:	f043 0308 	orr.w	r3, r3, #8
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <MX_GPIO_Init+0x240>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002030:	4b55      	ldr	r3, [pc, #340]	; (8002188 <MX_GPIO_Init+0x240>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a54      	ldr	r2, [pc, #336]	; (8002188 <MX_GPIO_Init+0x240>)
 8002038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b51      	ldr	r3, [pc, #324]	; (8002188 <MX_GPIO_Init+0x240>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002054:	484d      	ldr	r0, [pc, #308]	; (800218c <MX_GPIO_Init+0x244>)
 8002056:	f003 ffc1 	bl	8005fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002060:	484a      	ldr	r0, [pc, #296]	; (800218c <MX_GPIO_Init+0x244>)
 8002062:	f003 ffbb 	bl	8005fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800206c:	4848      	ldr	r0, [pc, #288]	; (8002190 <MX_GPIO_Init+0x248>)
 800206e:	f003 ffb5 	bl	8005fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002078:	4846      	ldr	r0, [pc, #280]	; (8002194 <MX_GPIO_Init+0x24c>)
 800207a:	f003 ffaf 	bl	8005fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800207e:	2201      	movs	r2, #1
 8002080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002084:	4844      	ldr	r0, [pc, #272]	; (8002198 <MX_GPIO_Init+0x250>)
 8002086:	f003 ffa9 	bl	8005fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 800208a:	230d      	movs	r3, #13
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208e:	2300      	movs	r3, #0
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209a:	4619      	mov	r1, r3
 800209c:	483f      	ldr	r0, [pc, #252]	; (800219c <MX_GPIO_Init+0x254>)
 800209e:	f003 fdd5 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80020a2:	2308      	movs	r3, #8
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b2:	4619      	mov	r1, r3
 80020b4:	483a      	ldr	r0, [pc, #232]	; (80021a0 <MX_GPIO_Init+0x258>)
 80020b6:	f003 fdc9 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80020ba:	2302      	movs	r3, #2
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4830      	ldr	r0, [pc, #192]	; (8002190 <MX_GPIO_Init+0x248>)
 80020ce:	f003 fdbd 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 80020d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80020e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	482f      	ldr	r0, [pc, #188]	; (80021a4 <MX_GPIO_Init+0x25c>)
 80020e8:	f003 fdb0 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80020ec:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002102:	4619      	mov	r1, r3
 8002104:	4821      	ldr	r0, [pc, #132]	; (800218c <MX_GPIO_Init+0x244>)
 8002106:	f003 fda1 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800210a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002110:	2301      	movs	r3, #1
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	4619      	mov	r1, r3
 8002122:	481b      	ldr	r0, [pc, #108]	; (8002190 <MX_GPIO_Init+0x248>)
 8002124:	f003 fd92 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	4814      	ldr	r0, [pc, #80]	; (8002194 <MX_GPIO_Init+0x24c>)
 8002142:	f003 fd83 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800214a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	4619      	mov	r1, r3
 800215a:	480f      	ldr	r0, [pc, #60]	; (8002198 <MX_GPIO_Init+0x250>)
 800215c:	f003 fd76 	bl	8005c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002166:	2301      	movs	r3, #1
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	4619      	mov	r1, r3
 8002178:	4807      	ldr	r0, [pc, #28]	; (8002198 <MX_GPIO_Init+0x250>)
 800217a:	f003 fd67 	bl	8005c4c <HAL_GPIO_Init>

}
 800217e:	bf00      	nop
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	58024400 	.word	0x58024400
 800218c:	58021000 	.word	0x58021000
 8002190:	58020400 	.word	0x58020400
 8002194:	58020c00 	.word	0x58020c00
 8002198:	58021800 	.word	0x58021800
 800219c:	58020800 	.word	0x58020800
 80021a0:	58020000 	.word	0x58020000
 80021a4:	58021400 	.word	0x58021400

080021a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ac:	b672      	cpsid	i
}
 80021ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80021b0:	e7fe      	b.n	80021b0 <Error_Handler+0x8>
	...

080021b4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021be:	4802      	ldr	r0, [pc, #8]	; (80021c8 <ST7735_Select+0x14>)
 80021c0:	f003 ff0c 	bl	8005fdc <HAL_GPIO_WritePin>
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	58021000 	.word	0x58021000

080021cc <ST7735_Unselect>:

void ST7735_Unselect() {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d6:	4802      	ldr	r0, [pc, #8]	; (80021e0 <ST7735_Unselect+0x14>)
 80021d8:	f003 ff00 	bl	8005fdc <HAL_GPIO_WritePin>
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	58021000 	.word	0x58021000

080021e4 <ST7735_Select1>:
static void ST7735_Select1() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ee:	4802      	ldr	r0, [pc, #8]	; (80021f8 <ST7735_Select1+0x14>)
 80021f0:	f003 fef4 	bl	8005fdc <HAL_GPIO_WritePin>
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58021000 	.word	0x58021000

080021fc <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8002200:	2201      	movs	r2, #1
 8002202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002206:	4802      	ldr	r0, [pc, #8]	; (8002210 <ST7735_Unselect1+0x14>)
 8002208:	f003 fee8 	bl	8005fdc <HAL_GPIO_WritePin>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	58021000 	.word	0x58021000

08002214 <ST7735_Reset>:

static void ST7735_Reset() {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <ST7735_Reset+0x28>)
 8002220:	f003 fedc 	bl	8005fdc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002224:	2005      	movs	r0, #5
 8002226:	f000 fd73 	bl	8002d10 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800222a:	2201      	movs	r2, #1
 800222c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <ST7735_Reset+0x28>)
 8002232:	f003 fed3 	bl	8005fdc <HAL_GPIO_WritePin>
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	58021000 	.word	0x58021000

08002240 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <ST7735_WriteCommand+0x2c>)
 8002252:	f003 fec3 	bl	8005fdc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002256:	1df9      	adds	r1, r7, #7
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	2201      	movs	r2, #1
 800225e:	4804      	ldr	r0, [pc, #16]	; (8002270 <ST7735_WriteCommand+0x30>)
 8002260:	f006 fcf8 	bl	8008c54 <HAL_SPI_Transmit>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	58021800 	.word	0x58021800
 8002270:	240001d4 	.word	0x240001d4

08002274 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002284:	4807      	ldr	r0, [pc, #28]	; (80022a4 <ST7735_WriteData+0x30>)
 8002286:	f003 fea9 	bl	8005fdc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b29a      	uxth	r2, r3
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <ST7735_WriteData+0x34>)
 8002296:	f006 fcdd 	bl	8008c54 <HAL_SPI_Transmit>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	58021800 	.word	0x58021800
 80022a8:	240001d4 	.word	0x240001d4

080022ac <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80022be:	e034      	b.n	800232a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ffb7 	bl	8002240 <ST7735_WriteCommand>

        numArgs = *addr++;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80022dc:	7abb      	ldrb	r3, [r7, #10]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80022e6:	7abb      	ldrb	r3, [r7, #10]
 80022e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ec:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80022f4:	7abb      	ldrb	r3, [r7, #10]
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ffbb 	bl	8002274 <ST7735_WriteData>
            addr += numArgs;
 80022fe:	7abb      	ldrb	r3, [r7, #10]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002306:	89bb      	ldrh	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002316:	89bb      	ldrh	r3, [r7, #12]
 8002318:	2bff      	cmp	r3, #255	; 0xff
 800231a:	d102      	bne.n	8002322 <ST7735_ExecuteCommandList+0x76>
 800231c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002320:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002322:	89bb      	ldrh	r3, [r7, #12]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fcf3 	bl	8002d10 <HAL_Delay>
    while(numCommands--) {
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	73fa      	strb	r2, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1c5      	bne.n	80022c0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	4604      	mov	r4, r0
 8002346:	4608      	mov	r0, r1
 8002348:	4611      	mov	r1, r2
 800234a:	461a      	mov	r2, r3
 800234c:	4623      	mov	r3, r4
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	4603      	mov	r3, r0
 8002352:	71bb      	strb	r3, [r7, #6]
 8002354:	460b      	mov	r3, r1
 8002356:	717b      	strb	r3, [r7, #5]
 8002358:	4613      	mov	r3, r2
 800235a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800235c:	202a      	movs	r0, #42	; 0x2a
 800235e:	f7ff ff6f 	bl	8002240 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002362:	2300      	movs	r3, #0
 8002364:	733b      	strb	r3, [r7, #12]
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	3302      	adds	r3, #2
 800236a:	b2db      	uxtb	r3, r3
 800236c:	737b      	strb	r3, [r7, #13]
 800236e:	2300      	movs	r3, #0
 8002370:	73bb      	strb	r3, [r7, #14]
 8002372:	797b      	ldrb	r3, [r7, #5]
 8002374:	3302      	adds	r3, #2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	2104      	movs	r1, #4
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff77 	bl	8002274 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002386:	202b      	movs	r0, #43	; 0x2b
 8002388:	f7ff ff5a 	bl	8002240 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	3301      	adds	r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002394:	793b      	ldrb	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2104      	movs	r1, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff66 	bl	8002274 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80023a8:	202c      	movs	r0, #44	; 0x2c
 80023aa:	f7ff ff49 	bl	8002240 <ST7735_WriteCommand>
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}
	...

080023b8 <ST7735_Init>:

void ST7735_Init() {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
    ST7735_Select();
 80023bc:	f7ff fefa 	bl	80021b4 <ST7735_Select>
    ST7735_Select1();
 80023c0:	f7ff ff10 	bl	80021e4 <ST7735_Select1>
    ST7735_Reset();
 80023c4:	f7ff ff26 	bl	8002214 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80023c8:	4807      	ldr	r0, [pc, #28]	; (80023e8 <ST7735_Init+0x30>)
 80023ca:	f7ff ff6f 	bl	80022ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80023ce:	4807      	ldr	r0, [pc, #28]	; (80023ec <ST7735_Init+0x34>)
 80023d0:	f7ff ff6c 	bl	80022ac <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <ST7735_Init+0x38>)
 80023d6:	f7ff ff69 	bl	80022ac <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80023da:	f7ff fef7 	bl	80021cc <ST7735_Unselect>
    ST7735_Unselect1();
 80023de:	f7ff ff0d 	bl	80021fc <ST7735_Unselect1>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	0800b288 	.word	0x0800b288
 80023ec:	0800b2c4 	.word	0x0800b2c4
 80023f0:	0800b2d4 	.word	0x0800b2d4

080023f4 <ST7735_FillRectangle>:
    }

    ST7735_Unselect1();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4604      	mov	r4, r0
 80023fc:	4608      	mov	r0, r1
 80023fe:	4611      	mov	r1, r2
 8002400:	461a      	mov	r2, r3
 8002402:	4623      	mov	r3, r4
 8002404:	80fb      	strh	r3, [r7, #6]
 8002406:	4603      	mov	r3, r0
 8002408:	80bb      	strh	r3, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]
 800240e:	4613      	mov	r3, r2
 8002410:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b7f      	cmp	r3, #127	; 0x7f
 8002416:	d858      	bhi.n	80024ca <ST7735_FillRectangle+0xd6>
 8002418:	88bb      	ldrh	r3, [r7, #4]
 800241a:	2b7f      	cmp	r3, #127	; 0x7f
 800241c:	d855      	bhi.n	80024ca <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4413      	add	r3, r2
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	dd03      	ble.n	8002430 <ST7735_FillRectangle+0x3c>
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800242e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002430:	88ba      	ldrh	r2, [r7, #4]
 8002432:	883b      	ldrh	r3, [r7, #0]
 8002434:	4413      	add	r3, r2
 8002436:	2b80      	cmp	r3, #128	; 0x80
 8002438:	dd03      	ble.n	8002442 <ST7735_FillRectangle+0x4e>
 800243a:	88bb      	ldrh	r3, [r7, #4]
 800243c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002440:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002442:	f7ff feb7 	bl	80021b4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	b2d8      	uxtb	r0, r3
 800244a:	88bb      	ldrh	r3, [r7, #4]
 800244c:	b2d9      	uxtb	r1, r3
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4413      	add	r3, r2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b2dc      	uxtb	r4, r3
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	883b      	ldrh	r3, [r7, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4413      	add	r3, r2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4622      	mov	r2, r4
 8002470:	f7ff ff65 	bl	800233e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002474:	8c3b      	ldrh	r3, [r7, #32]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	b29b      	uxth	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	733b      	strb	r3, [r7, #12]
 800247e:	8c3b      	ldrh	r3, [r7, #32]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800248a:	4812      	ldr	r0, [pc, #72]	; (80024d4 <ST7735_FillRectangle+0xe0>)
 800248c:	f003 fda6 	bl	8005fdc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002490:	883b      	ldrh	r3, [r7, #0]
 8002492:	80bb      	strh	r3, [r7, #4]
 8002494:	e013      	b.n	80024be <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	80fb      	strh	r3, [r7, #6]
 800249a:	e00a      	b.n	80024b2 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800249c:	f107 010c 	add.w	r1, r7, #12
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
 80024a4:	2202      	movs	r2, #2
 80024a6:	480c      	ldr	r0, [pc, #48]	; (80024d8 <ST7735_FillRectangle+0xe4>)
 80024a8:	f006 fbd4 	bl	8008c54 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	80fb      	strh	r3, [r7, #6]
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f1      	bne.n	800249c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80024b8:	88bb      	ldrh	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	80bb      	strh	r3, [r7, #4]
 80024be:	88bb      	ldrh	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e8      	bne.n	8002496 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80024c4:	f7ff fe82 	bl	80021cc <ST7735_Unselect>
 80024c8:	e000      	b.n	80024cc <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024ca:	bf00      	nop
}
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	58021800 	.word	0x58021800
 80024d8:	240001d4 	.word	0x240001d4

080024dc <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4604      	mov	r4, r0
 80024e4:	4608      	mov	r0, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	461a      	mov	r2, r3
 80024ea:	4623      	mov	r3, r4
 80024ec:	80fb      	strh	r3, [r7, #6]
 80024ee:	4603      	mov	r3, r0
 80024f0:	80bb      	strh	r3, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	807b      	strh	r3, [r7, #2]
 80024f6:	4613      	mov	r3, r2
 80024f8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	2b7f      	cmp	r3, #127	; 0x7f
 80024fe:	d858      	bhi.n	80025b2 <ST7735_FillRectangle1+0xd6>
 8002500:	88bb      	ldrh	r3, [r7, #4]
 8002502:	2b7f      	cmp	r3, #127	; 0x7f
 8002504:	d855      	bhi.n	80025b2 <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	4413      	add	r3, r2
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	dd03      	ble.n	8002518 <ST7735_FillRectangle1+0x3c>
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002516:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002518:	88ba      	ldrh	r2, [r7, #4]
 800251a:	883b      	ldrh	r3, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	dd03      	ble.n	800252a <ST7735_FillRectangle1+0x4e>
 8002522:	88bb      	ldrh	r3, [r7, #4]
 8002524:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002528:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 800252a:	f7ff fe5b 	bl	80021e4 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	b2d8      	uxtb	r0, r3
 8002532:	88bb      	ldrh	r3, [r7, #4]
 8002534:	b2d9      	uxtb	r1, r3
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4413      	add	r3, r2
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b2dc      	uxtb	r4, r3
 8002546:	88bb      	ldrh	r3, [r7, #4]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	883b      	ldrh	r3, [r7, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4413      	add	r3, r2
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4622      	mov	r2, r4
 8002558:	f7ff fef1 	bl	800233e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800255c:	8c3b      	ldrh	r3, [r7, #32]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	733b      	strb	r3, [r7, #12]
 8002566:	8c3b      	ldrh	r3, [r7, #32]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002572:	4812      	ldr	r0, [pc, #72]	; (80025bc <ST7735_FillRectangle1+0xe0>)
 8002574:	f003 fd32 	bl	8005fdc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002578:	883b      	ldrh	r3, [r7, #0]
 800257a:	80bb      	strh	r3, [r7, #4]
 800257c:	e013      	b.n	80025a6 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	80fb      	strh	r3, [r7, #6]
 8002582:	e00a      	b.n	800259a <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002584:	f107 010c 	add.w	r1, r7, #12
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
 800258c:	2202      	movs	r2, #2
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <ST7735_FillRectangle1+0xe4>)
 8002590:	f006 fb60 	bl	8008c54 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	3b01      	subs	r3, #1
 8002598:	80fb      	strh	r3, [r7, #6]
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f1      	bne.n	8002584 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	80bb      	strh	r3, [r7, #4]
 80025a6:	88bb      	ldrh	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e8      	bne.n	800257e <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 80025ac:	f7ff fe26 	bl	80021fc <ST7735_Unselect1>
 80025b0:	e000      	b.n	80025b4 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80025b2:	bf00      	nop
}
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd90      	pop	{r4, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	58021800 	.word	0x58021800
 80025c0:	240001d4 	.word	0x240001d4

080025c4 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	2100      	movs	r1, #0
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff ff0b 	bl	80023f4 <ST7735_FillRectangle>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af02      	add	r7, sp, #8
 80025ec:	4603      	mov	r3, r0
 80025ee:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff ff6e 	bl	80024dc <ST7735_FillRectangle1>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_MspInit+0x30>)
 8002610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002614:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_MspInit+0x30>)
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_MspInit+0x30>)
 8002620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	58024400 	.word	0x58024400

0800263c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	; 0x38
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a59      	ldr	r2, [pc, #356]	; (80027c0 <HAL_ETH_MspInit+0x184>)
 800265a:	4293      	cmp	r3, r2
 800265c:	f040 80ab 	bne.w	80027b6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002660:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002662:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002666:	4a57      	ldr	r2, [pc, #348]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002670:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002672:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800267a:	623b      	str	r3, [r7, #32]
 800267c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800267e:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002684:	4a4f      	ldr	r2, [pc, #316]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800268e:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800269c:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 800269e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026a2:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026ac:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	4a40      	ldr	r2, [pc, #256]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	4a39      	ldr	r2, [pc, #228]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	4a31      	ldr	r2, [pc, #196]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_ETH_MspInit+0x188>)
 8002726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002732:	2332      	movs	r3, #50	; 0x32
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002742:	230b      	movs	r3, #11
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274a:	4619      	mov	r1, r3
 800274c:	481e      	ldr	r0, [pc, #120]	; (80027c8 <HAL_ETH_MspInit+0x18c>)
 800274e:	f003 fa7d 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002752:	2386      	movs	r3, #134	; 0x86
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002762:	230b      	movs	r3, #11
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276a:	4619      	mov	r1, r3
 800276c:	4817      	ldr	r0, [pc, #92]	; (80027cc <HAL_ETH_MspInit+0x190>)
 800276e:	f003 fa6d 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002784:	230b      	movs	r3, #11
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4619      	mov	r1, r3
 800278e:	4810      	ldr	r0, [pc, #64]	; (80027d0 <HAL_ETH_MspInit+0x194>)
 8002790:	f003 fa5c 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002794:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027a6:	230b      	movs	r3, #11
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <HAL_ETH_MspInit+0x198>)
 80027b2:	f003 fa4b 	bl	8005c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3738      	adds	r7, #56	; 0x38
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40028000 	.word	0x40028000
 80027c4:	58024400 	.word	0x58024400
 80027c8:	58020800 	.word	0x58020800
 80027cc:	58020000 	.word	0x58020000
 80027d0:	58020400 	.word	0x58020400
 80027d4:	58021800 	.word	0x58021800

080027d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_SPI_MspInit+0xc8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d14d      	bne.n	8002896 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 80027fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 800280c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 800281a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 800282a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_SPI_MspInit+0xcc>)
 8002848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002854:	2304      	movs	r3, #4
 8002856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800285c:	2302      	movs	r3, #2
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002864:	2307      	movs	r3, #7
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	480e      	ldr	r0, [pc, #56]	; (80028a8 <HAL_SPI_MspInit+0xd0>)
 8002870:	f003 f9ec 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800287e:	2302      	movs	r3, #2
 8002880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002886:	2306      	movs	r3, #6
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	4806      	ldr	r0, [pc, #24]	; (80028ac <HAL_SPI_MspInit+0xd4>)
 8002892:	f003 f9db 	bl	8005c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40003c00 	.word	0x40003c00
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58020400 	.word	0x58020400
 80028ac:	58020800 	.word	0x58020800

080028b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0b8      	sub	sp, #224	; 0xe0
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	22bc      	movs	r2, #188	; 0xbc
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f008 fcbd 	bl	800b250 <memset>
  if(huart->Instance==USART3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <HAL_UART_MspInit+0x188>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	f040 80a6 	bne.w	8002a2e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028e2:	2302      	movs	r3, #2
 80028e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 fd41 	bl	8007378 <HAL_RCCEx_PeriphCLKConfig>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80028fc:	f7ff fc54 	bl	80021a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002900:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_UART_MspInit+0x18c>)
 8002902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002906:	4a4d      	ldr	r2, [pc, #308]	; (8002a3c <HAL_UART_MspInit+0x18c>)
 8002908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_UART_MspInit+0x18c>)
 8002912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_UART_MspInit+0x18c>)
 8002920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002924:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <HAL_UART_MspInit+0x18c>)
 8002926:	f043 0308 	orr.w	r3, r3, #8
 800292a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292e:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <HAL_UART_MspInit+0x18c>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800293c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002940:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002956:	2307      	movs	r3, #7
 8002958:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002960:	4619      	mov	r1, r3
 8002962:	4837      	ldr	r0, [pc, #220]	; (8002a40 <HAL_UART_MspInit+0x190>)
 8002964:	f003 f972 	bl	8005c4c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_UART_MspInit+0x194>)
 800296a:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <HAL_UART_MspInit+0x198>)
 800296c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800296e:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <HAL_UART_MspInit+0x194>)
 8002970:	222d      	movs	r2, #45	; 0x2d
 8002972:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002974:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <HAL_UART_MspInit+0x194>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_UART_MspInit+0x194>)
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_UART_MspInit+0x194>)
 8002982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002986:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002988:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_UART_MspInit+0x194>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_UART_MspInit+0x194>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_UART_MspInit+0x194>)
 8002996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_UART_MspInit+0x194>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_UART_MspInit+0x194>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029a8:	4826      	ldr	r0, [pc, #152]	; (8002a44 <HAL_UART_MspInit+0x194>)
 80029aa:	f000 fb05 	bl	8002fb8 <HAL_DMA_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80029b4:	f7ff fbf8 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <HAL_UART_MspInit+0x194>)
 80029bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80029be:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_UART_MspInit+0x194>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029c6:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <HAL_UART_MspInit+0x1a0>)
 80029c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029cc:	222e      	movs	r2, #46	; 0x2e
 80029ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002a02:	4812      	ldr	r0, [pc, #72]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 8002a04:	f000 fad8 	bl	8002fb8 <HAL_DMA_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002a0e:	f7ff fbcb 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 8002a16:	679a      	str	r2, [r3, #120]	; 0x78
 8002a18:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <HAL_UART_MspInit+0x19c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	2027      	movs	r0, #39	; 0x27
 8002a24:	f000 fa93 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a28:	2027      	movs	r0, #39	; 0x27
 8002a2a:	f000 faaa 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	37e0      	adds	r7, #224	; 0xe0
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40004800 	.word	0x40004800
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	58020c00 	.word	0x58020c00
 8002a44:	240002ec 	.word	0x240002ec
 8002a48:	40020028 	.word	0x40020028
 8002a4c:	24000364 	.word	0x24000364
 8002a50:	40020070 	.word	0x40020070

08002a54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <HAL_PCD_MspInit+0xa8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d13d      	bne.n	8002af2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002a76:	f003 fcb5 	bl	80063e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <HAL_PCD_MspInit+0xac>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_PCD_MspInit+0xac>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_PCD_MspInit+0xac>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002a98:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002aaa:	230a      	movs	r3, #10
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4813      	ldr	r0, [pc, #76]	; (8002b04 <HAL_PCD_MspInit+0xb0>)
 8002ab6:	f003 f8c9 	bl	8005c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4619      	mov	r1, r3
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <HAL_PCD_MspInit+0xb0>)
 8002ad0:	f003 f8bc 	bl	8005c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_PCD_MspInit+0xac>)
 8002ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ada:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_PCD_MspInit+0xac>)
 8002adc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ae0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_PCD_MspInit+0xac>)
 8002ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002aea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3728      	adds	r7, #40	; 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40080000 	.word	0x40080000
 8002b00:	58024400 	.word	0x58024400
 8002b04:	58020000 	.word	0x58020000

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 f8bc 	bl	8002cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Stream1_IRQHandler+0x10>)
 8002b62:	f001 fae9 	bl	8004138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	240002ec 	.word	0x240002ec

08002b70 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <DMA1_Stream4_IRQHandler+0x10>)
 8002b76:	f001 fadf 	bl	8004138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	24000364 	.word	0x24000364

08002b84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <USART3_IRQHandler+0x10>)
 8002b8a:	f006 fb8f 	bl	80092ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2400025c 	.word	0x2400025c

08002b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b9c:	f7fe fec0 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba0:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ba2:	490d      	ldr	r1, [pc, #52]	; (8002bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	; (8002bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc6:	f008 fb1f 	bl	800b208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bca:	f7fe ff3f 	bl	8001a4c <main>
  bx  lr
 8002bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002bd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bd8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002bdc:	0800b340 	.word	0x0800b340
  ldr r2, =_sbss
 8002be0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8002be4:	24000dd0 	.word	0x24000dd0

08002be8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <ADC3_IRQHandler>
	...

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf2:	2003      	movs	r0, #3
 8002bf4:	f000 f9a0 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf8:	f004 f9e8 	bl	8006fcc <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_Init+0x68>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	4913      	ldr	r1, [pc, #76]	; (8002c58 <HAL_Init+0x6c>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_Init+0x68>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <HAL_Init+0x6c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <HAL_Init+0x70>)
 8002c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c30:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <HAL_Init+0x74>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 f814 	bl	8002c64 <HAL_InitTick>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e002      	b.n	8002c4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c46:	f7ff fcdf 	bl	8002608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	58024400 	.word	0x58024400
 8002c58:	0800b278 	.word	0x0800b278
 8002c5c:	24000004 	.word	0x24000004
 8002c60:	24000000 	.word	0x24000000

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_InitTick+0x60>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e021      	b.n	8002cbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_InitTick+0x64>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_InitTick+0x60>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f985 	bl	8002f9e <HAL_SYSTICK_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00e      	b.n	8002cbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b0f      	cmp	r3, #15
 8002ca2:	d80a      	bhi.n	8002cba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f000 f94f 	bl	8002f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb0:	4a06      	ldr	r2, [pc, #24]	; (8002ccc <HAL_InitTick+0x68>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	2400000c 	.word	0x2400000c
 8002cc8:	24000000 	.word	0x24000000
 8002ccc:	24000008 	.word	0x24000008

08002cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_IncTick+0x20>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_IncTick+0x24>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_IncTick+0x24>)
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2400000c 	.word	0x2400000c
 8002cf4:	24000dcc 	.word	0x24000dcc

08002cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_GetTick+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	24000dcc 	.word	0x24000dcc

08002d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff ffee 	bl	8002cf8 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_Delay+0x44>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffde 	bl	8002cf8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	2400000c 	.word	0x2400000c

08002d58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetREVID+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0c1b      	lsrs	r3, r3, #16
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	5c001000 	.word	0x5c001000

08002d70 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002d80:	4904      	ldr	r1, [pc, #16]	; (8002d94 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	58000400 	.word	0x58000400

08002d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00
 8002ddc:	05fa0000 	.word	0x05fa0000

08002de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <__NVIC_GetPriorityGrouping+0x18>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 0307 	and.w	r3, r3, #7
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db0b      	blt.n	8002e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	4907      	ldr	r1, [pc, #28]	; (8002e34 <__NVIC_EnableIRQ+0x38>)
 8002e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db0a      	blt.n	8002e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	490c      	ldr	r1, [pc, #48]	; (8002e84 <__NVIC_SetPriority+0x4c>)
 8002e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e60:	e00a      	b.n	8002e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4908      	ldr	r1, [pc, #32]	; (8002e88 <__NVIC_SetPriority+0x50>)
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	440b      	add	r3, r1
 8002e76:	761a      	strb	r2, [r3, #24]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	; 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f1c3 0307 	rsb	r3, r3, #7
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	bf28      	it	cs
 8002eaa:	2304      	movcs	r3, #4
 8002eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d902      	bls.n	8002ebc <NVIC_EncodePriority+0x30>
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3b03      	subs	r3, #3
 8002eba:	e000      	b.n	8002ebe <NVIC_EncodePriority+0x32>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43d9      	mvns	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	4313      	orrs	r3, r2
         );
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f04:	d301      	bcc.n	8002f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <SysTick_Config+0x40>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f12:	210f      	movs	r1, #15
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f7ff ff8e 	bl	8002e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SysTick_Config+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <SysTick_Config+0x40>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff29 	bl	8002d98 <__NVIC_SetPriorityGrouping>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff40 	bl	8002de0 <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff90 	bl	8002e8c <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5f 	bl	8002e38 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff33 	bl	8002dfc <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa4 	bl	8002ef4 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff fe9a 	bl	8002cf8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e316      	b.n	80035fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a66      	ldr	r2, [pc, #408]	; (8003170 <HAL_DMA_Init+0x1b8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d04a      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a65      	ldr	r2, [pc, #404]	; (8003174 <HAL_DMA_Init+0x1bc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d045      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_DMA_Init+0x1c0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d040      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a62      	ldr	r2, [pc, #392]	; (800317c <HAL_DMA_Init+0x1c4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d03b      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a60      	ldr	r2, [pc, #384]	; (8003180 <HAL_DMA_Init+0x1c8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d036      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5f      	ldr	r2, [pc, #380]	; (8003184 <HAL_DMA_Init+0x1cc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d031      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5d      	ldr	r2, [pc, #372]	; (8003188 <HAL_DMA_Init+0x1d0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02c      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_DMA_Init+0x1d4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d027      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <HAL_DMA_Init+0x1d8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a59      	ldr	r2, [pc, #356]	; (8003194 <HAL_DMA_Init+0x1dc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d01d      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_DMA_Init+0x1e0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_DMA_Init+0x1e4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <HAL_DMA_Init+0x1e8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a53      	ldr	r2, [pc, #332]	; (80031a4 <HAL_DMA_Init+0x1ec>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_DMA_Init+0x1f0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_DMA_Init+0xb8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_DMA_Init+0x1f4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Init+0xbc>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_DMA_Init+0xbe>
 8003074:	2300      	movs	r3, #0
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 813b 	beq.w	80032f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a37      	ldr	r2, [pc, #220]	; (8003170 <HAL_DMA_Init+0x1b8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04a      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_DMA_Init+0x1bc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d045      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a34      	ldr	r2, [pc, #208]	; (8003178 <HAL_DMA_Init+0x1c0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d040      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a33      	ldr	r2, [pc, #204]	; (800317c <HAL_DMA_Init+0x1c4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d03b      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a31      	ldr	r2, [pc, #196]	; (8003180 <HAL_DMA_Init+0x1c8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d036      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a30      	ldr	r2, [pc, #192]	; (8003184 <HAL_DMA_Init+0x1cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d031      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <HAL_DMA_Init+0x1d0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02c      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_DMA_Init+0x1d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d027      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_DMA_Init+0x1d8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d022      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_DMA_Init+0x1dc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d01d      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a28      	ldr	r2, [pc, #160]	; (8003198 <HAL_DMA_Init+0x1e0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d018      	beq.n	800312c <HAL_DMA_Init+0x174>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_DMA_Init+0x1e4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_DMA_Init+0x1e8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_DMA_Init+0x174>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_DMA_Init+0x1ec>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_DMA_Init+0x1f0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_DMA_Init+0x174>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_DMA_Init+0x1f4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <HAL_DMA_Init+0x186>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_DMA_Init+0x196>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800314e:	e02f      	b.n	80031b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003150:	f7ff fdd2 	bl	8002cf8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b05      	cmp	r3, #5
 800315c:	d928      	bls.n	80031b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e246      	b.n	80035fe <HAL_DMA_Init+0x646>
 8003170:	40020010 	.word	0x40020010
 8003174:	40020028 	.word	0x40020028
 8003178:	40020040 	.word	0x40020040
 800317c:	40020058 	.word	0x40020058
 8003180:	40020070 	.word	0x40020070
 8003184:	40020088 	.word	0x40020088
 8003188:	400200a0 	.word	0x400200a0
 800318c:	400200b8 	.word	0x400200b8
 8003190:	40020410 	.word	0x40020410
 8003194:	40020428 	.word	0x40020428
 8003198:	40020440 	.word	0x40020440
 800319c:	40020458 	.word	0x40020458
 80031a0:	40020470 	.word	0x40020470
 80031a4:	40020488 	.word	0x40020488
 80031a8:	400204a0 	.word	0x400204a0
 80031ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1c8      	bne.n	8003150 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4b83      	ldr	r3, [pc, #524]	; (80033d8 <HAL_DMA_Init+0x420>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003214:	4b71      	ldr	r3, [pc, #452]	; (80033dc <HAL_DMA_Init+0x424>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b71      	ldr	r3, [pc, #452]	; (80033e0 <HAL_DMA_Init+0x428>)
 800321a:	4013      	ands	r3, r2
 800321c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003220:	d328      	bcc.n	8003274 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b28      	cmp	r3, #40	; 0x28
 8003228:	d903      	bls.n	8003232 <HAL_DMA_Init+0x27a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b2e      	cmp	r3, #46	; 0x2e
 8003230:	d917      	bls.n	8003262 <HAL_DMA_Init+0x2aa>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b3e      	cmp	r3, #62	; 0x3e
 8003238:	d903      	bls.n	8003242 <HAL_DMA_Init+0x28a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b42      	cmp	r3, #66	; 0x42
 8003240:	d90f      	bls.n	8003262 <HAL_DMA_Init+0x2aa>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b46      	cmp	r3, #70	; 0x46
 8003248:	d903      	bls.n	8003252 <HAL_DMA_Init+0x29a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b48      	cmp	r3, #72	; 0x48
 8003250:	d907      	bls.n	8003262 <HAL_DMA_Init+0x2aa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b4e      	cmp	r3, #78	; 0x4e
 8003258:	d905      	bls.n	8003266 <HAL_DMA_Init+0x2ae>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b52      	cmp	r3, #82	; 0x52
 8003260:	d801      	bhi.n	8003266 <HAL_DMA_Init+0x2ae>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_DMA_Init+0x2b0>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003272:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b04      	cmp	r3, #4
 800329c:	d117      	bne.n	80032ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f001 ff1d 	bl	80050f0 <DMA_CheckFifoParam>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e197      	b.n	80035fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f001 fe58 	bl	8004f8c <DMA_CalcBaseAndBitshift>
 80032dc:	4603      	mov	r3, r0
 80032de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	223f      	movs	r2, #63	; 0x3f
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	e0cd      	b.n	800348e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3b      	ldr	r2, [pc, #236]	; (80033e4 <HAL_DMA_Init+0x42c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <HAL_DMA_Init+0x38a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a39      	ldr	r2, [pc, #228]	; (80033e8 <HAL_DMA_Init+0x430>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01d      	beq.n	8003342 <HAL_DMA_Init+0x38a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a38      	ldr	r2, [pc, #224]	; (80033ec <HAL_DMA_Init+0x434>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d018      	beq.n	8003342 <HAL_DMA_Init+0x38a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a36      	ldr	r2, [pc, #216]	; (80033f0 <HAL_DMA_Init+0x438>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_DMA_Init+0x38a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a35      	ldr	r2, [pc, #212]	; (80033f4 <HAL_DMA_Init+0x43c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_Init+0x38a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a33      	ldr	r2, [pc, #204]	; (80033f8 <HAL_DMA_Init+0x440>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_DMA_Init+0x38a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a32      	ldr	r2, [pc, #200]	; (80033fc <HAL_DMA_Init+0x444>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_DMA_Init+0x38a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a30      	ldr	r2, [pc, #192]	; (8003400 <HAL_DMA_Init+0x448>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <HAL_DMA_Init+0x38e>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_DMA_Init+0x390>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8097 	beq.w	800347c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a24      	ldr	r2, [pc, #144]	; (80033e4 <HAL_DMA_Init+0x42c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d021      	beq.n	800339c <HAL_DMA_Init+0x3e4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <HAL_DMA_Init+0x430>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01c      	beq.n	800339c <HAL_DMA_Init+0x3e4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a21      	ldr	r2, [pc, #132]	; (80033ec <HAL_DMA_Init+0x434>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d017      	beq.n	800339c <HAL_DMA_Init+0x3e4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <HAL_DMA_Init+0x438>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d012      	beq.n	800339c <HAL_DMA_Init+0x3e4>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <HAL_DMA_Init+0x43c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00d      	beq.n	800339c <HAL_DMA_Init+0x3e4>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <HAL_DMA_Init+0x440>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d008      	beq.n	800339c <HAL_DMA_Init+0x3e4>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <HAL_DMA_Init+0x444>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <HAL_DMA_Init+0x3e4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_DMA_Init+0x448>)
 800339a:	4293      	cmp	r3, r2
 800339c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_DMA_Init+0x44c>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d020      	beq.n	8003408 <HAL_DMA_Init+0x450>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d102      	bne.n	80033d4 <HAL_DMA_Init+0x41c>
 80033ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033d2:	e01a      	b.n	800340a <HAL_DMA_Init+0x452>
 80033d4:	2300      	movs	r3, #0
 80033d6:	e018      	b.n	800340a <HAL_DMA_Init+0x452>
 80033d8:	fe10803f 	.word	0xfe10803f
 80033dc:	5c001000 	.word	0x5c001000
 80033e0:	ffff0000 	.word	0xffff0000
 80033e4:	58025408 	.word	0x58025408
 80033e8:	5802541c 	.word	0x5802541c
 80033ec:	58025430 	.word	0x58025430
 80033f0:	58025444 	.word	0x58025444
 80033f4:	58025458 	.word	0x58025458
 80033f8:	5802546c 	.word	0x5802546c
 80033fc:	58025480 	.word	0x58025480
 8003400:	58025494 	.word	0x58025494
 8003404:	fffe000f 	.word	0xfffe000f
 8003408:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003410:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003418:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003420:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003438:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b6e      	ldr	r3, [pc, #440]	; (8003608 <HAL_DMA_Init+0x650>)
 8003450:	4413      	add	r3, r2
 8003452:	4a6e      	ldr	r2, [pc, #440]	; (800360c <HAL_DMA_Init+0x654>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	009a      	lsls	r2, r3, #2
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 fd93 	bl	8004f8c <DMA_CalcBaseAndBitshift>
 8003466:	4603      	mov	r3, r0
 8003468:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2201      	movs	r2, #1
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	e008      	b.n	800348e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0b7      	b.n	80035fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5f      	ldr	r2, [pc, #380]	; (8003610 <HAL_DMA_Init+0x658>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d072      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a5d      	ldr	r2, [pc, #372]	; (8003614 <HAL_DMA_Init+0x65c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d06d      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a5c      	ldr	r2, [pc, #368]	; (8003618 <HAL_DMA_Init+0x660>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d068      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5a      	ldr	r2, [pc, #360]	; (800361c <HAL_DMA_Init+0x664>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d063      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a59      	ldr	r2, [pc, #356]	; (8003620 <HAL_DMA_Init+0x668>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d05e      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_DMA_Init+0x66c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d059      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a56      	ldr	r2, [pc, #344]	; (8003628 <HAL_DMA_Init+0x670>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d054      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a54      	ldr	r2, [pc, #336]	; (800362c <HAL_DMA_Init+0x674>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04f      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a53      	ldr	r2, [pc, #332]	; (8003630 <HAL_DMA_Init+0x678>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d04a      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a51      	ldr	r2, [pc, #324]	; (8003634 <HAL_DMA_Init+0x67c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d045      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a50      	ldr	r2, [pc, #320]	; (8003638 <HAL_DMA_Init+0x680>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d040      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a4e      	ldr	r2, [pc, #312]	; (800363c <HAL_DMA_Init+0x684>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d03b      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4d      	ldr	r2, [pc, #308]	; (8003640 <HAL_DMA_Init+0x688>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d036      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_DMA_Init+0x68c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d031      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_DMA_Init+0x690>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d02c      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_DMA_Init+0x694>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d027      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_DMA_Init+0x698>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a45      	ldr	r2, [pc, #276]	; (8003654 <HAL_DMA_Init+0x69c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01d      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a44      	ldr	r2, [pc, #272]	; (8003658 <HAL_DMA_Init+0x6a0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_DMA_Init+0x6a4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a41      	ldr	r2, [pc, #260]	; (8003660 <HAL_DMA_Init+0x6a8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a3f      	ldr	r2, [pc, #252]	; (8003664 <HAL_DMA_Init+0x6ac>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a3e      	ldr	r2, [pc, #248]	; (8003668 <HAL_DMA_Init+0x6b0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_DMA_Init+0x5c6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a3c      	ldr	r2, [pc, #240]	; (800366c <HAL_DMA_Init+0x6b4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_DMA_Init+0x5ca>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_DMA_Init+0x5cc>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d032      	beq.n	80035ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f001 fe2d 	bl	80051e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d102      	bne.n	800359c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <HAL_DMA_Init+0x624>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d80c      	bhi.n	80035dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f001 feaa 	bl	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	e008      	b.n	80035ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	a7fdabf8 	.word	0xa7fdabf8
 800360c:	cccccccd 	.word	0xcccccccd
 8003610:	40020010 	.word	0x40020010
 8003614:	40020028 	.word	0x40020028
 8003618:	40020040 	.word	0x40020040
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8
 8003630:	40020410 	.word	0x40020410
 8003634:	40020428 	.word	0x40020428
 8003638:	40020440 	.word	0x40020440
 800363c:	40020458 	.word	0x40020458
 8003640:	40020470 	.word	0x40020470
 8003644:	40020488 	.word	0x40020488
 8003648:	400204a0 	.word	0x400204a0
 800364c:	400204b8 	.word	0x400204b8
 8003650:	58025408 	.word	0x58025408
 8003654:	5802541c 	.word	0x5802541c
 8003658:	58025430 	.word	0x58025430
 800365c:	58025444 	.word	0x58025444
 8003660:	58025458 	.word	0x58025458
 8003664:	5802546c 	.word	0x5802546c
 8003668:	58025480 	.word	0x58025480
 800366c:	58025494 	.word	0x58025494

08003670 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff fb3e 	bl	8002cf8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e2dc      	b.n	8003c42 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d008      	beq.n	80036a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e2cd      	b.n	8003c42 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a76      	ldr	r2, [pc, #472]	; (8003884 <HAL_DMA_Abort+0x214>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d04a      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a74      	ldr	r2, [pc, #464]	; (8003888 <HAL_DMA_Abort+0x218>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d045      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a73      	ldr	r2, [pc, #460]	; (800388c <HAL_DMA_Abort+0x21c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d040      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a71      	ldr	r2, [pc, #452]	; (8003890 <HAL_DMA_Abort+0x220>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d03b      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a70      	ldr	r2, [pc, #448]	; (8003894 <HAL_DMA_Abort+0x224>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d036      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a6e      	ldr	r2, [pc, #440]	; (8003898 <HAL_DMA_Abort+0x228>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d031      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6d      	ldr	r2, [pc, #436]	; (800389c <HAL_DMA_Abort+0x22c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02c      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6b      	ldr	r2, [pc, #428]	; (80038a0 <HAL_DMA_Abort+0x230>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6a      	ldr	r2, [pc, #424]	; (80038a4 <HAL_DMA_Abort+0x234>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a68      	ldr	r2, [pc, #416]	; (80038a8 <HAL_DMA_Abort+0x238>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a67      	ldr	r2, [pc, #412]	; (80038ac <HAL_DMA_Abort+0x23c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d018      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_DMA_Abort+0x240>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a64      	ldr	r2, [pc, #400]	; (80038b4 <HAL_DMA_Abort+0x244>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a62      	ldr	r2, [pc, #392]	; (80038b8 <HAL_DMA_Abort+0x248>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a61      	ldr	r2, [pc, #388]	; (80038bc <HAL_DMA_Abort+0x24c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_DMA_Abort+0xd6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5f      	ldr	r2, [pc, #380]	; (80038c0 <HAL_DMA_Abort+0x250>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_DMA_Abort+0xda>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_DMA_Abort+0xdc>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 021e 	bic.w	r2, r2, #30
 800375e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e00a      	b.n	800378e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 020e 	bic.w	r2, r2, #14
 8003786:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <HAL_DMA_Abort+0x214>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d072      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3a      	ldr	r2, [pc, #232]	; (8003888 <HAL_DMA_Abort+0x218>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d06d      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a39      	ldr	r2, [pc, #228]	; (800388c <HAL_DMA_Abort+0x21c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d068      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a37      	ldr	r2, [pc, #220]	; (8003890 <HAL_DMA_Abort+0x220>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d063      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a36      	ldr	r2, [pc, #216]	; (8003894 <HAL_DMA_Abort+0x224>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d05e      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a34      	ldr	r2, [pc, #208]	; (8003898 <HAL_DMA_Abort+0x228>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d059      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a33      	ldr	r2, [pc, #204]	; (800389c <HAL_DMA_Abort+0x22c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d054      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a31      	ldr	r2, [pc, #196]	; (80038a0 <HAL_DMA_Abort+0x230>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d04f      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <HAL_DMA_Abort+0x234>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d04a      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2e      	ldr	r2, [pc, #184]	; (80038a8 <HAL_DMA_Abort+0x238>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d045      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2d      	ldr	r2, [pc, #180]	; (80038ac <HAL_DMA_Abort+0x23c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d040      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2b      	ldr	r2, [pc, #172]	; (80038b0 <HAL_DMA_Abort+0x240>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d03b      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <HAL_DMA_Abort+0x244>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d036      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_DMA_Abort+0x248>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d031      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a27      	ldr	r2, [pc, #156]	; (80038bc <HAL_DMA_Abort+0x24c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d02c      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <HAL_DMA_Abort+0x250>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d027      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <HAL_DMA_Abort+0x254>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_DMA_Abort+0x258>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01d      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <HAL_DMA_Abort+0x25c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1f      	ldr	r2, [pc, #124]	; (80038d0 <HAL_DMA_Abort+0x260>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_DMA_Abort+0x264>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_DMA_Abort+0x268>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <HAL_DMA_Abort+0x26c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_DMA_Abort+0x20e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_DMA_Abort+0x270>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d132      	bne.n	80038e4 <HAL_DMA_Abort+0x274>
 800387e:	2301      	movs	r3, #1
 8003880:	e031      	b.n	80038e6 <HAL_DMA_Abort+0x276>
 8003882:	bf00      	nop
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8
 80038c4:	58025408 	.word	0x58025408
 80038c8:	5802541c 	.word	0x5802541c
 80038cc:	58025430 	.word	0x58025430
 80038d0:	58025444 	.word	0x58025444
 80038d4:	58025458 	.word	0x58025458
 80038d8:	5802546c 	.word	0x5802546c
 80038dc:	58025480 	.word	0x58025480
 80038e0:	58025494 	.word	0x58025494
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6d      	ldr	r2, [pc, #436]	; (8003ab4 <HAL_DMA_Abort+0x444>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d04a      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6b      	ldr	r2, [pc, #428]	; (8003ab8 <HAL_DMA_Abort+0x448>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d045      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6a      	ldr	r2, [pc, #424]	; (8003abc <HAL_DMA_Abort+0x44c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d040      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a68      	ldr	r2, [pc, #416]	; (8003ac0 <HAL_DMA_Abort+0x450>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d03b      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a67      	ldr	r2, [pc, #412]	; (8003ac4 <HAL_DMA_Abort+0x454>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <HAL_DMA_Abort+0x458>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d031      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a64      	ldr	r2, [pc, #400]	; (8003acc <HAL_DMA_Abort+0x45c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a62      	ldr	r2, [pc, #392]	; (8003ad0 <HAL_DMA_Abort+0x460>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a61      	ldr	r2, [pc, #388]	; (8003ad4 <HAL_DMA_Abort+0x464>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5f      	ldr	r2, [pc, #380]	; (8003ad8 <HAL_DMA_Abort+0x468>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5e      	ldr	r2, [pc, #376]	; (8003adc <HAL_DMA_Abort+0x46c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a5c      	ldr	r2, [pc, #368]	; (8003ae0 <HAL_DMA_Abort+0x470>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a5b      	ldr	r2, [pc, #364]	; (8003ae4 <HAL_DMA_Abort+0x474>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a59      	ldr	r2, [pc, #356]	; (8003ae8 <HAL_DMA_Abort+0x478>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a58      	ldr	r2, [pc, #352]	; (8003aec <HAL_DMA_Abort+0x47c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort+0x32a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a56      	ldr	r2, [pc, #344]	; (8003af0 <HAL_DMA_Abort+0x480>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <HAL_DMA_Abort+0x33c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e007      	b.n	80039bc <HAL_DMA_Abort+0x34c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039bc:	e013      	b.n	80039e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039be:	f7ff f99b 	bl	8002cf8 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d90c      	bls.n	80039e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e12d      	b.n	8003c42 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e5      	bne.n	80039be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <HAL_DMA_Abort+0x444>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2d      	ldr	r2, [pc, #180]	; (8003ab8 <HAL_DMA_Abort+0x448>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2c      	ldr	r2, [pc, #176]	; (8003abc <HAL_DMA_Abort+0x44c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_DMA_Abort+0x450>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <HAL_DMA_Abort+0x454>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_DMA_Abort+0x458>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a26      	ldr	r2, [pc, #152]	; (8003acc <HAL_DMA_Abort+0x45c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_DMA_Abort+0x460>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <HAL_DMA_Abort+0x464>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_DMA_Abort+0x468>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a20      	ldr	r2, [pc, #128]	; (8003adc <HAL_DMA_Abort+0x46c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_DMA_Abort+0x470>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_DMA_Abort+0x474>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_DMA_Abort+0x478>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_DMA_Abort+0x47c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_Abort+0x422>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_DMA_Abort+0x480>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_Abort+0x426>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_DMA_Abort+0x428>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02b      	beq.n	8003af4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	223f      	movs	r2, #63	; 0x3f
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	e02a      	b.n	8003b0a <HAL_DMA_Abort+0x49a>
 8003ab4:	40020010 	.word	0x40020010
 8003ab8:	40020028 	.word	0x40020028
 8003abc:	40020040 	.word	0x40020040
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020070 	.word	0x40020070
 8003ac8:	40020088 	.word	0x40020088
 8003acc:	400200a0 	.word	0x400200a0
 8003ad0:	400200b8 	.word	0x400200b8
 8003ad4:	40020410 	.word	0x40020410
 8003ad8:	40020428 	.word	0x40020428
 8003adc:	40020440 	.word	0x40020440
 8003ae0:	40020458 	.word	0x40020458
 8003ae4:	40020470 	.word	0x40020470
 8003ae8:	40020488 	.word	0x40020488
 8003aec:	400204a0 	.word	0x400204a0
 8003af0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2201      	movs	r2, #1
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4f      	ldr	r2, [pc, #316]	; (8003c4c <HAL_DMA_Abort+0x5dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d072      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <HAL_DMA_Abort+0x5e0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d06d      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <HAL_DMA_Abort+0x5e4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d068      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	; (8003c58 <HAL_DMA_Abort+0x5e8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d063      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a49      	ldr	r2, [pc, #292]	; (8003c5c <HAL_DMA_Abort+0x5ec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d05e      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a47      	ldr	r2, [pc, #284]	; (8003c60 <HAL_DMA_Abort+0x5f0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d059      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a46      	ldr	r2, [pc, #280]	; (8003c64 <HAL_DMA_Abort+0x5f4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d054      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a44      	ldr	r2, [pc, #272]	; (8003c68 <HAL_DMA_Abort+0x5f8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04f      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a43      	ldr	r2, [pc, #268]	; (8003c6c <HAL_DMA_Abort+0x5fc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04a      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a41      	ldr	r2, [pc, #260]	; (8003c70 <HAL_DMA_Abort+0x600>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d045      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a40      	ldr	r2, [pc, #256]	; (8003c74 <HAL_DMA_Abort+0x604>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d040      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3e      	ldr	r2, [pc, #248]	; (8003c78 <HAL_DMA_Abort+0x608>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d03b      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3d      	ldr	r2, [pc, #244]	; (8003c7c <HAL_DMA_Abort+0x60c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d036      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3b      	ldr	r2, [pc, #236]	; (8003c80 <HAL_DMA_Abort+0x610>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d031      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a3a      	ldr	r2, [pc, #232]	; (8003c84 <HAL_DMA_Abort+0x614>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d02c      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a38      	ldr	r2, [pc, #224]	; (8003c88 <HAL_DMA_Abort+0x618>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d027      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <HAL_DMA_Abort+0x61c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d022      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a35      	ldr	r2, [pc, #212]	; (8003c90 <HAL_DMA_Abort+0x620>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01d      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a34      	ldr	r2, [pc, #208]	; (8003c94 <HAL_DMA_Abort+0x624>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d018      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a32      	ldr	r2, [pc, #200]	; (8003c98 <HAL_DMA_Abort+0x628>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <HAL_DMA_Abort+0x62c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00e      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <HAL_DMA_Abort+0x630>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_DMA_Abort+0x634>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_DMA_Abort+0x58a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <HAL_DMA_Abort+0x638>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_DMA_Abort+0x58e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_DMA_Abort+0x590>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c0c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c24:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c2e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40020010 	.word	0x40020010
 8003c50:	40020028 	.word	0x40020028
 8003c54:	40020040 	.word	0x40020040
 8003c58:	40020058 	.word	0x40020058
 8003c5c:	40020070 	.word	0x40020070
 8003c60:	40020088 	.word	0x40020088
 8003c64:	400200a0 	.word	0x400200a0
 8003c68:	400200b8 	.word	0x400200b8
 8003c6c:	40020410 	.word	0x40020410
 8003c70:	40020428 	.word	0x40020428
 8003c74:	40020440 	.word	0x40020440
 8003c78:	40020458 	.word	0x40020458
 8003c7c:	40020470 	.word	0x40020470
 8003c80:	40020488 	.word	0x40020488
 8003c84:	400204a0 	.word	0x400204a0
 8003c88:	400204b8 	.word	0x400204b8
 8003c8c:	58025408 	.word	0x58025408
 8003c90:	5802541c 	.word	0x5802541c
 8003c94:	58025430 	.word	0x58025430
 8003c98:	58025444 	.word	0x58025444
 8003c9c:	58025458 	.word	0x58025458
 8003ca0:	5802546c 	.word	0x5802546c
 8003ca4:	58025480 	.word	0x58025480
 8003ca8:	58025494 	.word	0x58025494

08003cac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e237      	b.n	800412e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e22c      	b.n	800412e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5c      	ldr	r2, [pc, #368]	; (8003e4c <HAL_DMA_Abort_IT+0x1a0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04a      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a5b      	ldr	r2, [pc, #364]	; (8003e50 <HAL_DMA_Abort_IT+0x1a4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d045      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a59      	ldr	r2, [pc, #356]	; (8003e54 <HAL_DMA_Abort_IT+0x1a8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d040      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_DMA_Abort_IT+0x1ac>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d03b      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a56      	ldr	r2, [pc, #344]	; (8003e5c <HAL_DMA_Abort_IT+0x1b0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d036      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a55      	ldr	r2, [pc, #340]	; (8003e60 <HAL_DMA_Abort_IT+0x1b4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d031      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a53      	ldr	r2, [pc, #332]	; (8003e64 <HAL_DMA_Abort_IT+0x1b8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02c      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_DMA_Abort_IT+0x1bc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d027      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a50      	ldr	r2, [pc, #320]	; (8003e6c <HAL_DMA_Abort_IT+0x1c0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d022      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a4f      	ldr	r2, [pc, #316]	; (8003e70 <HAL_DMA_Abort_IT+0x1c4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d01d      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a4d      	ldr	r2, [pc, #308]	; (8003e74 <HAL_DMA_Abort_IT+0x1c8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d018      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a4c      	ldr	r2, [pc, #304]	; (8003e78 <HAL_DMA_Abort_IT+0x1cc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a4a      	ldr	r2, [pc, #296]	; (8003e7c <HAL_DMA_Abort_IT+0x1d0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a49      	ldr	r2, [pc, #292]	; (8003e80 <HAL_DMA_Abort_IT+0x1d4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a47      	ldr	r2, [pc, #284]	; (8003e84 <HAL_DMA_Abort_IT+0x1d8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_DMA_Abort_IT+0xc8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a46      	ldr	r2, [pc, #280]	; (8003e88 <HAL_DMA_Abort_IT+0x1dc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_DMA_Abort_IT+0xcc>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_DMA_Abort_IT+0xce>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8086 	beq.w	8003e8c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2204      	movs	r2, #4
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <HAL_DMA_Abort_IT+0x1a0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04a      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2e      	ldr	r2, [pc, #184]	; (8003e50 <HAL_DMA_Abort_IT+0x1a4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d045      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <HAL_DMA_Abort_IT+0x1a8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d040      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <HAL_DMA_Abort_IT+0x1ac>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d03b      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <HAL_DMA_Abort_IT+0x1b0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d036      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <HAL_DMA_Abort_IT+0x1b4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d031      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_DMA_Abort_IT+0x1b8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02c      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <HAL_DMA_Abort_IT+0x1bc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d027      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_DMA_Abort_IT+0x1c0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <HAL_DMA_Abort_IT+0x1c4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01d      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <HAL_DMA_Abort_IT+0x1c8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <HAL_DMA_Abort_IT+0x1cc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_DMA_Abort_IT+0x1d0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_DMA_Abort_IT+0x1d4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <HAL_DMA_Abort_IT+0x1d8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x17c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_DMA_Abort_IT+0x1dc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <HAL_DMA_Abort_IT+0x18e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e178      	b.n	800412c <HAL_DMA_Abort_IT+0x480>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e16f      	b.n	800412c <HAL_DMA_Abort_IT+0x480>
 8003e4c:	40020010 	.word	0x40020010
 8003e50:	40020028 	.word	0x40020028
 8003e54:	40020040 	.word	0x40020040
 8003e58:	40020058 	.word	0x40020058
 8003e5c:	40020070 	.word	0x40020070
 8003e60:	40020088 	.word	0x40020088
 8003e64:	400200a0 	.word	0x400200a0
 8003e68:	400200b8 	.word	0x400200b8
 8003e6c:	40020410 	.word	0x40020410
 8003e70:	40020428 	.word	0x40020428
 8003e74:	40020440 	.word	0x40020440
 8003e78:	40020458 	.word	0x40020458
 8003e7c:	40020470 	.word	0x40020470
 8003e80:	40020488 	.word	0x40020488
 8003e84:	400204a0 	.word	0x400204a0
 8003e88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 020e 	bic.w	r2, r2, #14
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a6c      	ldr	r2, [pc, #432]	; (8004054 <HAL_DMA_Abort_IT+0x3a8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6b      	ldr	r2, [pc, #428]	; (8004058 <HAL_DMA_Abort_IT+0x3ac>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a69      	ldr	r2, [pc, #420]	; (800405c <HAL_DMA_Abort_IT+0x3b0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a68      	ldr	r2, [pc, #416]	; (8004060 <HAL_DMA_Abort_IT+0x3b4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a66      	ldr	r2, [pc, #408]	; (8004064 <HAL_DMA_Abort_IT+0x3b8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a65      	ldr	r2, [pc, #404]	; (8004068 <HAL_DMA_Abort_IT+0x3bc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a63      	ldr	r2, [pc, #396]	; (800406c <HAL_DMA_Abort_IT+0x3c0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a62      	ldr	r2, [pc, #392]	; (8004070 <HAL_DMA_Abort_IT+0x3c4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a60      	ldr	r2, [pc, #384]	; (8004074 <HAL_DMA_Abort_IT+0x3c8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a5f      	ldr	r2, [pc, #380]	; (8004078 <HAL_DMA_Abort_IT+0x3cc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a5d      	ldr	r2, [pc, #372]	; (800407c <HAL_DMA_Abort_IT+0x3d0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	; (8004080 <HAL_DMA_Abort_IT+0x3d4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5a      	ldr	r2, [pc, #360]	; (8004084 <HAL_DMA_Abort_IT+0x3d8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a59      	ldr	r2, [pc, #356]	; (8004088 <HAL_DMA_Abort_IT+0x3dc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a57      	ldr	r2, [pc, #348]	; (800408c <HAL_DMA_Abort_IT+0x3e0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x290>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a56      	ldr	r2, [pc, #344]	; (8004090 <HAL_DMA_Abort_IT+0x3e4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <HAL_DMA_Abort_IT+0x2a2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e007      	b.n	8003f5e <HAL_DMA_Abort_IT+0x2b2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a3c      	ldr	r2, [pc, #240]	; (8004054 <HAL_DMA_Abort_IT+0x3a8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d072      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a3a      	ldr	r2, [pc, #232]	; (8004058 <HAL_DMA_Abort_IT+0x3ac>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d06d      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a39      	ldr	r2, [pc, #228]	; (800405c <HAL_DMA_Abort_IT+0x3b0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d068      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a37      	ldr	r2, [pc, #220]	; (8004060 <HAL_DMA_Abort_IT+0x3b4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d063      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a36      	ldr	r2, [pc, #216]	; (8004064 <HAL_DMA_Abort_IT+0x3b8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d05e      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a34      	ldr	r2, [pc, #208]	; (8004068 <HAL_DMA_Abort_IT+0x3bc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d059      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a33      	ldr	r2, [pc, #204]	; (800406c <HAL_DMA_Abort_IT+0x3c0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d054      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a31      	ldr	r2, [pc, #196]	; (8004070 <HAL_DMA_Abort_IT+0x3c4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d04f      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a30      	ldr	r2, [pc, #192]	; (8004074 <HAL_DMA_Abort_IT+0x3c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d04a      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <HAL_DMA_Abort_IT+0x3cc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d045      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2d      	ldr	r2, [pc, #180]	; (800407c <HAL_DMA_Abort_IT+0x3d0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d040      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <HAL_DMA_Abort_IT+0x3d4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d03b      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <HAL_DMA_Abort_IT+0x3d8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d036      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a28      	ldr	r2, [pc, #160]	; (8004088 <HAL_DMA_Abort_IT+0x3dc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d031      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a27      	ldr	r2, [pc, #156]	; (800408c <HAL_DMA_Abort_IT+0x3e0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d02c      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a25      	ldr	r2, [pc, #148]	; (8004090 <HAL_DMA_Abort_IT+0x3e4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d027      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a24      	ldr	r2, [pc, #144]	; (8004094 <HAL_DMA_Abort_IT+0x3e8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d022      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a22      	ldr	r2, [pc, #136]	; (8004098 <HAL_DMA_Abort_IT+0x3ec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01d      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a21      	ldr	r2, [pc, #132]	; (800409c <HAL_DMA_Abort_IT+0x3f0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d018      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <HAL_DMA_Abort_IT+0x3f4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_DMA_Abort_IT+0x3f8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <HAL_DMA_Abort_IT+0x3fc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_DMA_Abort_IT+0x400>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_DMA_Abort_IT+0x3a2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_DMA_Abort_IT+0x404>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d132      	bne.n	80040b4 <HAL_DMA_Abort_IT+0x408>
 800404e:	2301      	movs	r3, #1
 8004050:	e031      	b.n	80040b6 <HAL_DMA_Abort_IT+0x40a>
 8004052:	bf00      	nop
 8004054:	40020010 	.word	0x40020010
 8004058:	40020028 	.word	0x40020028
 800405c:	40020040 	.word	0x40020040
 8004060:	40020058 	.word	0x40020058
 8004064:	40020070 	.word	0x40020070
 8004068:	40020088 	.word	0x40020088
 800406c:	400200a0 	.word	0x400200a0
 8004070:	400200b8 	.word	0x400200b8
 8004074:	40020410 	.word	0x40020410
 8004078:	40020428 	.word	0x40020428
 800407c:	40020440 	.word	0x40020440
 8004080:	40020458 	.word	0x40020458
 8004084:	40020470 	.word	0x40020470
 8004088:	40020488 	.word	0x40020488
 800408c:	400204a0 	.word	0x400204a0
 8004090:	400204b8 	.word	0x400204b8
 8004094:	58025408 	.word	0x58025408
 8004098:	5802541c 	.word	0x5802541c
 800409c:	58025430 	.word	0x58025430
 80040a0:	58025444 	.word	0x58025444
 80040a4:	58025458 	.word	0x58025458
 80040a8:	5802546c 	.word	0x5802546c
 80040ac:	58025480 	.word	0x58025480
 80040b0:	58025494 	.word	0x58025494
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d028      	beq.n	800410c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2201      	movs	r2, #1
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004100:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800410a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004144:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <HAL_DMA_IRQHandler+0x1ac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a67      	ldr	r2, [pc, #412]	; (80042e8 <HAL_DMA_IRQHandler+0x1b0>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0a9b      	lsrs	r3, r3, #10
 8004150:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a5f      	ldr	r2, [pc, #380]	; (80042ec <HAL_DMA_IRQHandler+0x1b4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d04a      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5d      	ldr	r2, [pc, #372]	; (80042f0 <HAL_DMA_IRQHandler+0x1b8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d045      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a5c      	ldr	r2, [pc, #368]	; (80042f4 <HAL_DMA_IRQHandler+0x1bc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d040      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a5a      	ldr	r2, [pc, #360]	; (80042f8 <HAL_DMA_IRQHandler+0x1c0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d03b      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a59      	ldr	r2, [pc, #356]	; (80042fc <HAL_DMA_IRQHandler+0x1c4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d036      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_DMA_IRQHandler+0x1c8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d031      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a56      	ldr	r2, [pc, #344]	; (8004304 <HAL_DMA_IRQHandler+0x1cc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d02c      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a54      	ldr	r2, [pc, #336]	; (8004308 <HAL_DMA_IRQHandler+0x1d0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d027      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a53      	ldr	r2, [pc, #332]	; (800430c <HAL_DMA_IRQHandler+0x1d4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d022      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a51      	ldr	r2, [pc, #324]	; (8004310 <HAL_DMA_IRQHandler+0x1d8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a50      	ldr	r2, [pc, #320]	; (8004314 <HAL_DMA_IRQHandler+0x1dc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d018      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a4e      	ldr	r2, [pc, #312]	; (8004318 <HAL_DMA_IRQHandler+0x1e0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a4d      	ldr	r2, [pc, #308]	; (800431c <HAL_DMA_IRQHandler+0x1e4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a4b      	ldr	r2, [pc, #300]	; (8004320 <HAL_DMA_IRQHandler+0x1e8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a4a      	ldr	r2, [pc, #296]	; (8004324 <HAL_DMA_IRQHandler+0x1ec>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_DMA_IRQHandler+0xd2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a48      	ldr	r2, [pc, #288]	; (8004328 <HAL_DMA_IRQHandler+0x1f0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_DMA_IRQHandler+0xd6>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_DMA_IRQHandler+0xd8>
 800420e:	2300      	movs	r3, #0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 842b 	beq.w	8004a6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2208      	movs	r2, #8
 8004220:	409a      	lsls	r2, r3
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80a2 	beq.w	8004370 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2e      	ldr	r2, [pc, #184]	; (80042ec <HAL_DMA_IRQHandler+0x1b4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d04a      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2d      	ldr	r2, [pc, #180]	; (80042f0 <HAL_DMA_IRQHandler+0x1b8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d045      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <HAL_DMA_IRQHandler+0x1bc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d040      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <HAL_DMA_IRQHandler+0x1c0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d03b      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a28      	ldr	r2, [pc, #160]	; (80042fc <HAL_DMA_IRQHandler+0x1c4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d036      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a27      	ldr	r2, [pc, #156]	; (8004300 <HAL_DMA_IRQHandler+0x1c8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d031      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a25      	ldr	r2, [pc, #148]	; (8004304 <HAL_DMA_IRQHandler+0x1cc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02c      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a24      	ldr	r2, [pc, #144]	; (8004308 <HAL_DMA_IRQHandler+0x1d0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d027      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a22      	ldr	r2, [pc, #136]	; (800430c <HAL_DMA_IRQHandler+0x1d4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d022      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a21      	ldr	r2, [pc, #132]	; (8004310 <HAL_DMA_IRQHandler+0x1d8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d01d      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <HAL_DMA_IRQHandler+0x1dc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <HAL_DMA_IRQHandler+0x1e0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_DMA_IRQHandler+0x1e4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_DMA_IRQHandler+0x1e8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_DMA_IRQHandler+0x1ec>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_DMA_IRQHandler+0x194>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <HAL_DMA_IRQHandler+0x1f0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d12f      	bne.n	800432c <HAL_DMA_IRQHandler+0x1f4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e02e      	b.n	8004340 <HAL_DMA_IRQHandler+0x208>
 80042e2:	bf00      	nop
 80042e4:	24000000 	.word	0x24000000
 80042e8:	1b4e81b5 	.word	0x1b4e81b5
 80042ec:	40020010 	.word	0x40020010
 80042f0:	40020028 	.word	0x40020028
 80042f4:	40020040 	.word	0x40020040
 80042f8:	40020058 	.word	0x40020058
 80042fc:	40020070 	.word	0x40020070
 8004300:	40020088 	.word	0x40020088
 8004304:	400200a0 	.word	0x400200a0
 8004308:	400200b8 	.word	0x400200b8
 800430c:	40020410 	.word	0x40020410
 8004310:	40020428 	.word	0x40020428
 8004314:	40020440 	.word	0x40020440
 8004318:	40020458 	.word	0x40020458
 800431c:	40020470 	.word	0x40020470
 8004320:	40020488 	.word	0x40020488
 8004324:	400204a0 	.word	0x400204a0
 8004328:	400204b8 	.word	0x400204b8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0204 	bic.w	r2, r2, #4
 8004352:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2208      	movs	r2, #8
 800435e:	409a      	lsls	r2, r3
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d06e      	beq.n	8004464 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a69      	ldr	r2, [pc, #420]	; (8004530 <HAL_DMA_IRQHandler+0x3f8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d04a      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a67      	ldr	r2, [pc, #412]	; (8004534 <HAL_DMA_IRQHandler+0x3fc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d045      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a66      	ldr	r2, [pc, #408]	; (8004538 <HAL_DMA_IRQHandler+0x400>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d040      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a64      	ldr	r2, [pc, #400]	; (800453c <HAL_DMA_IRQHandler+0x404>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d03b      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a63      	ldr	r2, [pc, #396]	; (8004540 <HAL_DMA_IRQHandler+0x408>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d036      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a61      	ldr	r2, [pc, #388]	; (8004544 <HAL_DMA_IRQHandler+0x40c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d031      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a60      	ldr	r2, [pc, #384]	; (8004548 <HAL_DMA_IRQHandler+0x410>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d02c      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a5e      	ldr	r2, [pc, #376]	; (800454c <HAL_DMA_IRQHandler+0x414>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d027      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5d      	ldr	r2, [pc, #372]	; (8004550 <HAL_DMA_IRQHandler+0x418>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d022      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a5b      	ldr	r2, [pc, #364]	; (8004554 <HAL_DMA_IRQHandler+0x41c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01d      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5a      	ldr	r2, [pc, #360]	; (8004558 <HAL_DMA_IRQHandler+0x420>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d018      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a58      	ldr	r2, [pc, #352]	; (800455c <HAL_DMA_IRQHandler+0x424>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a57      	ldr	r2, [pc, #348]	; (8004560 <HAL_DMA_IRQHandler+0x428>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a55      	ldr	r2, [pc, #340]	; (8004564 <HAL_DMA_IRQHandler+0x42c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a54      	ldr	r2, [pc, #336]	; (8004568 <HAL_DMA_IRQHandler+0x430>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_IRQHandler+0x2ee>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a52      	ldr	r2, [pc, #328]	; (800456c <HAL_DMA_IRQHandler+0x434>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10a      	bne.n	800443c <HAL_DMA_IRQHandler+0x304>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e003      	b.n	8004444 <HAL_DMA_IRQHandler+0x30c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2201      	movs	r2, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f043 0202 	orr.w	r2, r3, #2
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2204      	movs	r2, #4
 800446e:	409a      	lsls	r2, r3
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 808f 	beq.w	8004598 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <HAL_DMA_IRQHandler+0x3f8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d04a      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <HAL_DMA_IRQHandler+0x3fc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d045      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a29      	ldr	r2, [pc, #164]	; (8004538 <HAL_DMA_IRQHandler+0x400>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d040      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_DMA_IRQHandler+0x404>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d03b      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a26      	ldr	r2, [pc, #152]	; (8004540 <HAL_DMA_IRQHandler+0x408>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d036      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a24      	ldr	r2, [pc, #144]	; (8004544 <HAL_DMA_IRQHandler+0x40c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d031      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a23      	ldr	r2, [pc, #140]	; (8004548 <HAL_DMA_IRQHandler+0x410>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d02c      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a21      	ldr	r2, [pc, #132]	; (800454c <HAL_DMA_IRQHandler+0x414>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d027      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a20      	ldr	r2, [pc, #128]	; (8004550 <HAL_DMA_IRQHandler+0x418>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_DMA_IRQHandler+0x41c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01d      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_DMA_IRQHandler+0x420>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d018      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <HAL_DMA_IRQHandler+0x424>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_DMA_IRQHandler+0x428>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00e      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_DMA_IRQHandler+0x42c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <HAL_DMA_IRQHandler+0x430>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_DMA_IRQHandler+0x3e2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_DMA_IRQHandler+0x434>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d12a      	bne.n	8004570 <HAL_DMA_IRQHandler+0x438>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf14      	ite	ne
 8004528:	2301      	movne	r3, #1
 800452a:	2300      	moveq	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e023      	b.n	8004578 <HAL_DMA_IRQHandler+0x440>
 8004530:	40020010 	.word	0x40020010
 8004534:	40020028 	.word	0x40020028
 8004538:	40020040 	.word	0x40020040
 800453c:	40020058 	.word	0x40020058
 8004540:	40020070 	.word	0x40020070
 8004544:	40020088 	.word	0x40020088
 8004548:	400200a0 	.word	0x400200a0
 800454c:	400200b8 	.word	0x400200b8
 8004550:	40020410 	.word	0x40020410
 8004554:	40020428 	.word	0x40020428
 8004558:	40020440 	.word	0x40020440
 800455c:	40020458 	.word	0x40020458
 8004560:	40020470 	.word	0x40020470
 8004564:	40020488 	.word	0x40020488
 8004568:	400204a0 	.word	0x400204a0
 800456c:	400204b8 	.word	0x400204b8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00d      	beq.n	8004598 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2204      	movs	r2, #4
 8004586:	409a      	lsls	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	f043 0204 	orr.w	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2210      	movs	r2, #16
 80045a2:	409a      	lsls	r2, r3
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80a6 	beq.w	80046fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a85      	ldr	r2, [pc, #532]	; (80047c8 <HAL_DMA_IRQHandler+0x690>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d04a      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a83      	ldr	r2, [pc, #524]	; (80047cc <HAL_DMA_IRQHandler+0x694>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d045      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a82      	ldr	r2, [pc, #520]	; (80047d0 <HAL_DMA_IRQHandler+0x698>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d040      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a80      	ldr	r2, [pc, #512]	; (80047d4 <HAL_DMA_IRQHandler+0x69c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d03b      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7f      	ldr	r2, [pc, #508]	; (80047d8 <HAL_DMA_IRQHandler+0x6a0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d036      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a7d      	ldr	r2, [pc, #500]	; (80047dc <HAL_DMA_IRQHandler+0x6a4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d031      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7c      	ldr	r2, [pc, #496]	; (80047e0 <HAL_DMA_IRQHandler+0x6a8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d02c      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a7a      	ldr	r2, [pc, #488]	; (80047e4 <HAL_DMA_IRQHandler+0x6ac>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d027      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a79      	ldr	r2, [pc, #484]	; (80047e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d022      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a77      	ldr	r2, [pc, #476]	; (80047ec <HAL_DMA_IRQHandler+0x6b4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01d      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a76      	ldr	r2, [pc, #472]	; (80047f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d018      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a74      	ldr	r2, [pc, #464]	; (80047f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a73      	ldr	r2, [pc, #460]	; (80047f8 <HAL_DMA_IRQHandler+0x6c0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a71      	ldr	r2, [pc, #452]	; (80047fc <HAL_DMA_IRQHandler+0x6c4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a70      	ldr	r2, [pc, #448]	; (8004800 <HAL_DMA_IRQHandler+0x6c8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_DMA_IRQHandler+0x516>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a6e      	ldr	r2, [pc, #440]	; (8004804 <HAL_DMA_IRQHandler+0x6cc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10a      	bne.n	8004664 <HAL_DMA_IRQHandler+0x52c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e009      	b.n	8004678 <HAL_DMA_IRQHandler+0x540>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf14      	ite	ne
 8004672:	2301      	movne	r3, #1
 8004674:	2300      	moveq	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d03e      	beq.n	80046fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2210      	movs	r2, #16
 8004686:	409a      	lsls	r2, r3
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d018      	beq.n	80046cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d108      	bne.n	80046ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d024      	beq.n	80046fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
 80046b8:	e01f      	b.n	80046fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01b      	beq.n	80046fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
 80046ca:	e016      	b.n	80046fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0208 	bic.w	r2, r2, #8
 80046e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2220      	movs	r2, #32
 8004704:	409a      	lsls	r2, r3
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8110 	beq.w	8004930 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <HAL_DMA_IRQHandler+0x690>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d04a      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2b      	ldr	r2, [pc, #172]	; (80047cc <HAL_DMA_IRQHandler+0x694>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d045      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a29      	ldr	r2, [pc, #164]	; (80047d0 <HAL_DMA_IRQHandler+0x698>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d040      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a28      	ldr	r2, [pc, #160]	; (80047d4 <HAL_DMA_IRQHandler+0x69c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d03b      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <HAL_DMA_IRQHandler+0x6a0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d036      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a25      	ldr	r2, [pc, #148]	; (80047dc <HAL_DMA_IRQHandler+0x6a4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d031      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d02c      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <HAL_DMA_IRQHandler+0x6ac>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d027      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a20      	ldr	r2, [pc, #128]	; (80047e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d022      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1f      	ldr	r2, [pc, #124]	; (80047ec <HAL_DMA_IRQHandler+0x6b4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d01d      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <HAL_DMA_IRQHandler+0x6b8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d018      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_DMA_IRQHandler+0x6c0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00e      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_DMA_IRQHandler+0x6c4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a17      	ldr	r2, [pc, #92]	; (8004800 <HAL_DMA_IRQHandler+0x6c8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x678>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a16      	ldr	r2, [pc, #88]	; (8004804 <HAL_DMA_IRQHandler+0x6cc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d12b      	bne.n	8004808 <HAL_DMA_IRQHandler+0x6d0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e02a      	b.n	800481c <HAL_DMA_IRQHandler+0x6e4>
 80047c6:	bf00      	nop
 80047c8:	40020010 	.word	0x40020010
 80047cc:	40020028 	.word	0x40020028
 80047d0:	40020040 	.word	0x40020040
 80047d4:	40020058 	.word	0x40020058
 80047d8:	40020070 	.word	0x40020070
 80047dc:	40020088 	.word	0x40020088
 80047e0:	400200a0 	.word	0x400200a0
 80047e4:	400200b8 	.word	0x400200b8
 80047e8:	40020410 	.word	0x40020410
 80047ec:	40020428 	.word	0x40020428
 80047f0:	40020440 	.word	0x40020440
 80047f4:	40020458 	.word	0x40020458
 80047f8:	40020470 	.word	0x40020470
 80047fc:	40020488 	.word	0x40020488
 8004800:	400204a0 	.word	0x400204a0
 8004804:	400204b8 	.word	0x400204b8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf14      	ite	ne
 8004816:	2301      	movne	r3, #1
 8004818:	2300      	moveq	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8087 	beq.w	8004930 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2220      	movs	r2, #32
 800482c:	409a      	lsls	r2, r3
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b04      	cmp	r3, #4
 800483c:	d139      	bne.n	80048b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0216 	bic.w	r2, r2, #22
 800484c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <HAL_DMA_IRQHandler+0x736>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0208 	bic.w	r2, r2, #8
 800487c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	223f      	movs	r2, #63	; 0x3f
 8004888:	409a      	lsls	r2, r3
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 834a 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
          }
          return;
 80048b0:	e344      	b.n	8004f3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d018      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d108      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d02c      	beq.n	8004930 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
 80048de:	e027      	b.n	8004930 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d023      	beq.n	8004930 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
 80048f0:	e01e      	b.n	8004930 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0210 	bic.w	r2, r2, #16
 800490e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8306 	beq.w	8004f46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8088 	beq.w	8004a58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2204      	movs	r2, #4
 800494c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a7a      	ldr	r2, [pc, #488]	; (8004b40 <HAL_DMA_IRQHandler+0xa08>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d04a      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a79      	ldr	r2, [pc, #484]	; (8004b44 <HAL_DMA_IRQHandler+0xa0c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d045      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a77      	ldr	r2, [pc, #476]	; (8004b48 <HAL_DMA_IRQHandler+0xa10>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d040      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a76      	ldr	r2, [pc, #472]	; (8004b4c <HAL_DMA_IRQHandler+0xa14>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d03b      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a74      	ldr	r2, [pc, #464]	; (8004b50 <HAL_DMA_IRQHandler+0xa18>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d036      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a73      	ldr	r2, [pc, #460]	; (8004b54 <HAL_DMA_IRQHandler+0xa1c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d031      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a71      	ldr	r2, [pc, #452]	; (8004b58 <HAL_DMA_IRQHandler+0xa20>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02c      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a70      	ldr	r2, [pc, #448]	; (8004b5c <HAL_DMA_IRQHandler+0xa24>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d027      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a6e      	ldr	r2, [pc, #440]	; (8004b60 <HAL_DMA_IRQHandler+0xa28>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6d      	ldr	r2, [pc, #436]	; (8004b64 <HAL_DMA_IRQHandler+0xa2c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01d      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a6b      	ldr	r2, [pc, #428]	; (8004b68 <HAL_DMA_IRQHandler+0xa30>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6a      	ldr	r2, [pc, #424]	; (8004b6c <HAL_DMA_IRQHandler+0xa34>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a68      	ldr	r2, [pc, #416]	; (8004b70 <HAL_DMA_IRQHandler+0xa38>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a67      	ldr	r2, [pc, #412]	; (8004b74 <HAL_DMA_IRQHandler+0xa3c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a65      	ldr	r2, [pc, #404]	; (8004b78 <HAL_DMA_IRQHandler+0xa40>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x8b8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a64      	ldr	r2, [pc, #400]	; (8004b7c <HAL_DMA_IRQHandler+0xa44>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <HAL_DMA_IRQHandler+0x8ca>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e007      	b.n	8004a12 <HAL_DMA_IRQHandler+0x8da>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d307      	bcc.n	8004a2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f2      	bne.n	8004a12 <HAL_DMA_IRQHandler+0x8da>
 8004a2c:	e000      	b.n	8004a30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2203      	movs	r2, #3
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a46:	e003      	b.n	8004a50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8272 	beq.w	8004f46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
 8004a6a:	e26c      	b.n	8004f46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a43      	ldr	r2, [pc, #268]	; (8004b80 <HAL_DMA_IRQHandler+0xa48>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d022      	beq.n	8004abc <HAL_DMA_IRQHandler+0x984>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a42      	ldr	r2, [pc, #264]	; (8004b84 <HAL_DMA_IRQHandler+0xa4c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d01d      	beq.n	8004abc <HAL_DMA_IRQHandler+0x984>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a40      	ldr	r2, [pc, #256]	; (8004b88 <HAL_DMA_IRQHandler+0xa50>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d018      	beq.n	8004abc <HAL_DMA_IRQHandler+0x984>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3f      	ldr	r2, [pc, #252]	; (8004b8c <HAL_DMA_IRQHandler+0xa54>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d013      	beq.n	8004abc <HAL_DMA_IRQHandler+0x984>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3d      	ldr	r2, [pc, #244]	; (8004b90 <HAL_DMA_IRQHandler+0xa58>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00e      	beq.n	8004abc <HAL_DMA_IRQHandler+0x984>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <HAL_DMA_IRQHandler+0xa5c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d009      	beq.n	8004abc <HAL_DMA_IRQHandler+0x984>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3a      	ldr	r2, [pc, #232]	; (8004b98 <HAL_DMA_IRQHandler+0xa60>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_DMA_IRQHandler+0x984>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a39      	ldr	r2, [pc, #228]	; (8004b9c <HAL_DMA_IRQHandler+0xa64>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d101      	bne.n	8004ac0 <HAL_DMA_IRQHandler+0x988>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_DMA_IRQHandler+0x98a>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 823f 	beq.w	8004f46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	2204      	movs	r2, #4
 8004ada:	409a      	lsls	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80cd 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xb48>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80c7 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2204      	movs	r2, #4
 8004afc:	409a      	lsls	r2, r3
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d049      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8210 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b28:	e20a      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8206 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b3c:	e200      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe08>
 8004b3e:	bf00      	nop
 8004b40:	40020010 	.word	0x40020010
 8004b44:	40020028 	.word	0x40020028
 8004b48:	40020040 	.word	0x40020040
 8004b4c:	40020058 	.word	0x40020058
 8004b50:	40020070 	.word	0x40020070
 8004b54:	40020088 	.word	0x40020088
 8004b58:	400200a0 	.word	0x400200a0
 8004b5c:	400200b8 	.word	0x400200b8
 8004b60:	40020410 	.word	0x40020410
 8004b64:	40020428 	.word	0x40020428
 8004b68:	40020440 	.word	0x40020440
 8004b6c:	40020458 	.word	0x40020458
 8004b70:	40020470 	.word	0x40020470
 8004b74:	40020488 	.word	0x40020488
 8004b78:	400204a0 	.word	0x400204a0
 8004b7c:	400204b8 	.word	0x400204b8
 8004b80:	58025408 	.word	0x58025408
 8004b84:	5802541c 	.word	0x5802541c
 8004b88:	58025430 	.word	0x58025430
 8004b8c:	58025444 	.word	0x58025444
 8004b90:	58025458 	.word	0x58025458
 8004b94:	5802546c 	.word	0x5802546c
 8004b98:	58025480 	.word	0x58025480
 8004b9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d160      	bne.n	8004c6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a7f      	ldr	r2, [pc, #508]	; (8004dac <HAL_DMA_IRQHandler+0xc74>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d04a      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a7d      	ldr	r2, [pc, #500]	; (8004db0 <HAL_DMA_IRQHandler+0xc78>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d045      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7c      	ldr	r2, [pc, #496]	; (8004db4 <HAL_DMA_IRQHandler+0xc7c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d040      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7a      	ldr	r2, [pc, #488]	; (8004db8 <HAL_DMA_IRQHandler+0xc80>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d03b      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a79      	ldr	r2, [pc, #484]	; (8004dbc <HAL_DMA_IRQHandler+0xc84>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d036      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a77      	ldr	r2, [pc, #476]	; (8004dc0 <HAL_DMA_IRQHandler+0xc88>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d031      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a76      	ldr	r2, [pc, #472]	; (8004dc4 <HAL_DMA_IRQHandler+0xc8c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d02c      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a74      	ldr	r2, [pc, #464]	; (8004dc8 <HAL_DMA_IRQHandler+0xc90>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d027      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a73      	ldr	r2, [pc, #460]	; (8004dcc <HAL_DMA_IRQHandler+0xc94>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d022      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a71      	ldr	r2, [pc, #452]	; (8004dd0 <HAL_DMA_IRQHandler+0xc98>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01d      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a70      	ldr	r2, [pc, #448]	; (8004dd4 <HAL_DMA_IRQHandler+0xc9c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d018      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6e      	ldr	r2, [pc, #440]	; (8004dd8 <HAL_DMA_IRQHandler+0xca0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6d      	ldr	r2, [pc, #436]	; (8004ddc <HAL_DMA_IRQHandler+0xca4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00e      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6b      	ldr	r2, [pc, #428]	; (8004de0 <HAL_DMA_IRQHandler+0xca8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6a      	ldr	r2, [pc, #424]	; (8004de4 <HAL_DMA_IRQHandler+0xcac>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xb12>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a68      	ldr	r2, [pc, #416]	; (8004de8 <HAL_DMA_IRQHandler+0xcb0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <HAL_DMA_IRQHandler+0xb24>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0208 	bic.w	r2, r2, #8
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e007      	b.n	8004c6c <HAL_DMA_IRQHandler+0xb34>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0204 	bic.w	r2, r2, #4
 8004c6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8165 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c7e:	e15f      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	2202      	movs	r2, #2
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80c5 	beq.w	8004e20 <HAL_DMA_IRQHandler+0xce8>
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80bf 	beq.w	8004e20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2202      	movs	r2, #2
 8004cac:	409a      	lsls	r2, r3
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d018      	beq.n	8004cee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 813a 	beq.w	8004f44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd8:	e134      	b.n	8004f44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8130 	beq.w	8004f44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cec:	e12a      	b.n	8004f44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 8089 	bne.w	8004e0c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2b      	ldr	r2, [pc, #172]	; (8004dac <HAL_DMA_IRQHandler+0xc74>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d04a      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <HAL_DMA_IRQHandler+0xc78>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d045      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <HAL_DMA_IRQHandler+0xc7c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d040      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a26      	ldr	r2, [pc, #152]	; (8004db8 <HAL_DMA_IRQHandler+0xc80>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d03b      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a25      	ldr	r2, [pc, #148]	; (8004dbc <HAL_DMA_IRQHandler+0xc84>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d036      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <HAL_DMA_IRQHandler+0xc88>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d031      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <HAL_DMA_IRQHandler+0xc8c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d02c      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a20      	ldr	r2, [pc, #128]	; (8004dc8 <HAL_DMA_IRQHandler+0xc90>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d027      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_DMA_IRQHandler+0xc94>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d022      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1d      	ldr	r2, [pc, #116]	; (8004dd0 <HAL_DMA_IRQHandler+0xc98>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01d      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1c      	ldr	r2, [pc, #112]	; (8004dd4 <HAL_DMA_IRQHandler+0xc9c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_DMA_IRQHandler+0xca0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_DMA_IRQHandler+0xca4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <HAL_DMA_IRQHandler+0xca8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a16      	ldr	r2, [pc, #88]	; (8004de4 <HAL_DMA_IRQHandler+0xcac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xc62>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <HAL_DMA_IRQHandler+0xcb0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d128      	bne.n	8004dec <HAL_DMA_IRQHandler+0xcb4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0214 	bic.w	r2, r2, #20
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e027      	b.n	8004dfc <HAL_DMA_IRQHandler+0xcc4>
 8004dac:	40020010 	.word	0x40020010
 8004db0:	40020028 	.word	0x40020028
 8004db4:	40020040 	.word	0x40020040
 8004db8:	40020058 	.word	0x40020058
 8004dbc:	40020070 	.word	0x40020070
 8004dc0:	40020088 	.word	0x40020088
 8004dc4:	400200a0 	.word	0x400200a0
 8004dc8:	400200b8 	.word	0x400200b8
 8004dcc:	40020410 	.word	0x40020410
 8004dd0:	40020428 	.word	0x40020428
 8004dd4:	40020440 	.word	0x40020440
 8004dd8:	40020458 	.word	0x40020458
 8004ddc:	40020470 	.word	0x40020470
 8004de0:	40020488 	.word	0x40020488
 8004de4:	400204a0 	.word	0x400204a0
 8004de8:	400204b8 	.word	0x400204b8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 020a 	bic.w	r2, r2, #10
 8004dfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8097 	beq.w	8004f44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e1e:	e091      	b.n	8004f44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	2208      	movs	r2, #8
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8088 	beq.w	8004f46 <HAL_DMA_IRQHandler+0xe0e>
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8082 	beq.w	8004f46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a41      	ldr	r2, [pc, #260]	; (8004f4c <HAL_DMA_IRQHandler+0xe14>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d04a      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3f      	ldr	r2, [pc, #252]	; (8004f50 <HAL_DMA_IRQHandler+0xe18>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d045      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a3e      	ldr	r2, [pc, #248]	; (8004f54 <HAL_DMA_IRQHandler+0xe1c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d040      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3c      	ldr	r2, [pc, #240]	; (8004f58 <HAL_DMA_IRQHandler+0xe20>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d03b      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3b      	ldr	r2, [pc, #236]	; (8004f5c <HAL_DMA_IRQHandler+0xe24>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d036      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a39      	ldr	r2, [pc, #228]	; (8004f60 <HAL_DMA_IRQHandler+0xe28>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d031      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a38      	ldr	r2, [pc, #224]	; (8004f64 <HAL_DMA_IRQHandler+0xe2c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d02c      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a36      	ldr	r2, [pc, #216]	; (8004f68 <HAL_DMA_IRQHandler+0xe30>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d027      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a35      	ldr	r2, [pc, #212]	; (8004f6c <HAL_DMA_IRQHandler+0xe34>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d022      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a33      	ldr	r2, [pc, #204]	; (8004f70 <HAL_DMA_IRQHandler+0xe38>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01d      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a32      	ldr	r2, [pc, #200]	; (8004f74 <HAL_DMA_IRQHandler+0xe3c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d018      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a30      	ldr	r2, [pc, #192]	; (8004f78 <HAL_DMA_IRQHandler+0xe40>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2f      	ldr	r2, [pc, #188]	; (8004f7c <HAL_DMA_IRQHandler+0xe44>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2d      	ldr	r2, [pc, #180]	; (8004f80 <HAL_DMA_IRQHandler+0xe48>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d009      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	; (8004f84 <HAL_DMA_IRQHandler+0xe4c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0xdaa>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <HAL_DMA_IRQHandler+0xe50>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d108      	bne.n	8004ef4 <HAL_DMA_IRQHandler+0xdbc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 021c 	bic.w	r2, r2, #28
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e007      	b.n	8004f04 <HAL_DMA_IRQHandler+0xdcc>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 020e 	bic.w	r2, r2, #14
 8004f02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
 8004f3a:	e004      	b.n	8004f46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f3c:	bf00      	nop
 8004f3e:	e002      	b.n	8004f46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f46:	3728      	adds	r7, #40	; 0x28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40020010 	.word	0x40020010
 8004f50:	40020028 	.word	0x40020028
 8004f54:	40020040 	.word	0x40020040
 8004f58:	40020058 	.word	0x40020058
 8004f5c:	40020070 	.word	0x40020070
 8004f60:	40020088 	.word	0x40020088
 8004f64:	400200a0 	.word	0x400200a0
 8004f68:	400200b8 	.word	0x400200b8
 8004f6c:	40020410 	.word	0x40020410
 8004f70:	40020428 	.word	0x40020428
 8004f74:	40020440 	.word	0x40020440
 8004f78:	40020458 	.word	0x40020458
 8004f7c:	40020470 	.word	0x40020470
 8004f80:	40020488 	.word	0x40020488
 8004f84:	400204a0 	.word	0x400204a0
 8004f88:	400204b8 	.word	0x400204b8

08004f8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a42      	ldr	r2, [pc, #264]	; (80050a4 <DMA_CalcBaseAndBitshift+0x118>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d04a      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a41      	ldr	r2, [pc, #260]	; (80050a8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d045      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3f      	ldr	r2, [pc, #252]	; (80050ac <DMA_CalcBaseAndBitshift+0x120>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d040      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3e      	ldr	r2, [pc, #248]	; (80050b0 <DMA_CalcBaseAndBitshift+0x124>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d03b      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a3c      	ldr	r2, [pc, #240]	; (80050b4 <DMA_CalcBaseAndBitshift+0x128>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d036      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3b      	ldr	r2, [pc, #236]	; (80050b8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d031      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a39      	ldr	r2, [pc, #228]	; (80050bc <DMA_CalcBaseAndBitshift+0x130>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d02c      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a38      	ldr	r2, [pc, #224]	; (80050c0 <DMA_CalcBaseAndBitshift+0x134>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d027      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a36      	ldr	r2, [pc, #216]	; (80050c4 <DMA_CalcBaseAndBitshift+0x138>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d022      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a35      	ldr	r2, [pc, #212]	; (80050c8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d01d      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a33      	ldr	r2, [pc, #204]	; (80050cc <DMA_CalcBaseAndBitshift+0x140>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d018      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a32      	ldr	r2, [pc, #200]	; (80050d0 <DMA_CalcBaseAndBitshift+0x144>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a30      	ldr	r2, [pc, #192]	; (80050d4 <DMA_CalcBaseAndBitshift+0x148>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d009      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2d      	ldr	r2, [pc, #180]	; (80050dc <DMA_CalcBaseAndBitshift+0x150>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <DMA_CalcBaseAndBitshift+0xa8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <DMA_CalcBaseAndBitshift+0x154>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <DMA_CalcBaseAndBitshift+0xac>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <DMA_CalcBaseAndBitshift+0xae>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d024      	beq.n	8005088 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	3b10      	subs	r3, #16
 8005046:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <DMA_CalcBaseAndBitshift+0x158>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	4a24      	ldr	r2, [pc, #144]	; (80050e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005058:	5cd3      	ldrb	r3, [r2, r3]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d908      	bls.n	8005078 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	4b1f      	ldr	r3, [pc, #124]	; (80050ec <DMA_CalcBaseAndBitshift+0x160>)
 800506e:	4013      	ands	r3, r2
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	659a      	str	r2, [r3, #88]	; 0x58
 8005076:	e00d      	b.n	8005094 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <DMA_CalcBaseAndBitshift+0x160>)
 8005080:	4013      	ands	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6593      	str	r3, [r2, #88]	; 0x58
 8005086:	e005      	b.n	8005094 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40020010 	.word	0x40020010
 80050a8:	40020028 	.word	0x40020028
 80050ac:	40020040 	.word	0x40020040
 80050b0:	40020058 	.word	0x40020058
 80050b4:	40020070 	.word	0x40020070
 80050b8:	40020088 	.word	0x40020088
 80050bc:	400200a0 	.word	0x400200a0
 80050c0:	400200b8 	.word	0x400200b8
 80050c4:	40020410 	.word	0x40020410
 80050c8:	40020428 	.word	0x40020428
 80050cc:	40020440 	.word	0x40020440
 80050d0:	40020458 	.word	0x40020458
 80050d4:	40020470 	.word	0x40020470
 80050d8:	40020488 	.word	0x40020488
 80050dc:	400204a0 	.word	0x400204a0
 80050e0:	400204b8 	.word	0x400204b8
 80050e4:	aaaaaaab 	.word	0xaaaaaaab
 80050e8:	0800b300 	.word	0x0800b300
 80050ec:	fffffc00 	.word	0xfffffc00

080050f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d120      	bne.n	8005146 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	2b03      	cmp	r3, #3
 800510a:	d858      	bhi.n	80051be <DMA_CheckFifoParam+0xce>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <DMA_CheckFifoParam+0x24>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005125 	.word	0x08005125
 8005118:	08005137 	.word	0x08005137
 800511c:	08005125 	.word	0x08005125
 8005120:	080051bf 	.word	0x080051bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d048      	beq.n	80051c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005134:	e045      	b.n	80051c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800513e:	d142      	bne.n	80051c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005144:	e03f      	b.n	80051c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514e:	d123      	bne.n	8005198 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	2b03      	cmp	r3, #3
 8005156:	d838      	bhi.n	80051ca <DMA_CheckFifoParam+0xda>
 8005158:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <DMA_CheckFifoParam+0x70>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005171 	.word	0x08005171
 8005164:	08005177 	.word	0x08005177
 8005168:	08005171 	.word	0x08005171
 800516c:	08005189 	.word	0x08005189
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
        break;
 8005174:	e030      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d025      	beq.n	80051ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005186:	e022      	b.n	80051ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005190:	d11f      	bne.n	80051d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005196:	e01c      	b.n	80051d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	2b02      	cmp	r3, #2
 800519e:	d902      	bls.n	80051a6 <DMA_CheckFifoParam+0xb6>
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d003      	beq.n	80051ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80051a4:	e018      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
        break;
 80051aa:	e015      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00e      	beq.n	80051d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
    break;
 80051bc:	e00b      	b.n	80051d6 <DMA_CheckFifoParam+0xe6>
        break;
 80051be:	bf00      	nop
 80051c0:	e00a      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
        break;
 80051c2:	bf00      	nop
 80051c4:	e008      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
        break;
 80051c6:	bf00      	nop
 80051c8:	e006      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
        break;
 80051ca:	bf00      	nop
 80051cc:	e004      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
        break;
 80051ce:	bf00      	nop
 80051d0:	e002      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
        break;
 80051d2:	bf00      	nop
 80051d4:	e000      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
    break;
 80051d6:	bf00      	nop
    }
  }

  return status;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a38      	ldr	r2, [pc, #224]	; (80052dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d022      	beq.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a36      	ldr	r2, [pc, #216]	; (80052e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01d      	beq.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a35      	ldr	r2, [pc, #212]	; (80052e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d018      	beq.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a33      	ldr	r2, [pc, #204]	; (80052e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a32      	ldr	r2, [pc, #200]	; (80052ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a30      	ldr	r2, [pc, #192]	; (80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01a      	beq.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	3b08      	subs	r3, #8
 8005258:	4a28      	ldr	r2, [pc, #160]	; (80052fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	091b      	lsrs	r3, r3, #4
 8005260:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4b26      	ldr	r3, [pc, #152]	; (8005300 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a24      	ldr	r2, [pc, #144]	; (8005304 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005274:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	2201      	movs	r2, #1
 800527e:	409a      	lsls	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005284:	e024      	b.n	80052d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	3b10      	subs	r3, #16
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a1c      	ldr	r2, [pc, #112]	; (800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d806      	bhi.n	80052ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d902      	bls.n	80052ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3308      	adds	r3, #8
 80052ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4b18      	ldr	r3, [pc, #96]	; (8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a16      	ldr	r2, [pc, #88]	; (8005318 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2201      	movs	r2, #1
 80052ca:	409a      	lsls	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	58025408 	.word	0x58025408
 80052e0:	5802541c 	.word	0x5802541c
 80052e4:	58025430 	.word	0x58025430
 80052e8:	58025444 	.word	0x58025444
 80052ec:	58025458 	.word	0x58025458
 80052f0:	5802546c 	.word	0x5802546c
 80052f4:	58025480 	.word	0x58025480
 80052f8:	58025494 	.word	0x58025494
 80052fc:	cccccccd 	.word	0xcccccccd
 8005300:	16009600 	.word	0x16009600
 8005304:	58025880 	.word	0x58025880
 8005308:	aaaaaaab 	.word	0xaaaaaaab
 800530c:	400204b8 	.word	0x400204b8
 8005310:	4002040f 	.word	0x4002040f
 8005314:	10008200 	.word	0x10008200
 8005318:	40020880 	.word	0x40020880

0800531c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04a      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d847      	bhi.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a24      	ldr	r2, [pc, #144]	; (80053d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d01d      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d101      	bne.n	800538c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	461a      	mov	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80053a4:	671a      	str	r2, [r3, #112]	; 0x70
 80053a6:	e009      	b.n	80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	461a      	mov	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a11      	ldr	r2, [pc, #68]	; (8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3b01      	subs	r3, #1
 80053c0:	2201      	movs	r2, #1
 80053c2:	409a      	lsls	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	58025408 	.word	0x58025408
 80053d8:	5802541c 	.word	0x5802541c
 80053dc:	58025430 	.word	0x58025430
 80053e0:	58025444 	.word	0x58025444
 80053e4:	58025458 	.word	0x58025458
 80053e8:	5802546c 	.word	0x5802546c
 80053ec:	58025480 	.word	0x58025480
 80053f0:	58025494 	.word	0x58025494
 80053f4:	1600963f 	.word	0x1600963f
 80053f8:	58025940 	.word	0x58025940
 80053fc:	1000823f 	.word	0x1000823f
 8005400:	40020940 	.word	0x40020940

08005404 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e0cf      	b.n	80055b6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2223      	movs	r2, #35	; 0x23
 8005424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fd f907 	bl	800263c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800542e:	4b64      	ldr	r3, [pc, #400]	; (80055c0 <HAL_ETH_Init+0x1bc>)
 8005430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005434:	4a62      	ldr	r2, [pc, #392]	; (80055c0 <HAL_ETH_Init+0x1bc>)
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800543e:	4b60      	ldr	r3, [pc, #384]	; (80055c0 <HAL_ETH_Init+0x1bc>)
 8005440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	7a1b      	ldrb	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005454:	2000      	movs	r0, #0
 8005456:	f7fd fc8b 	bl	8002d70 <HAL_SYSCFG_ETHInterfaceSelect>
 800545a:	e003      	b.n	8005464 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800545c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005460:	f7fd fc86 	bl	8002d70 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005464:	4b57      	ldr	r3, [pc, #348]	; (80055c4 <HAL_ETH_Init+0x1c0>)
 8005466:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800547e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005480:	f7fd fc3a 	bl	8002cf8 <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005486:	e011      	b.n	80054ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005488:	f7fd fc36 	bl	8002cf8 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005496:	d909      	bls.n	80054ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2204      	movs	r2, #4
 800549c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	22e0      	movs	r2, #224	; 0xe0
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e084      	b.n	80055b6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e4      	bne.n	8005488 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f886 	bl	80055d0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80054c4:	f001 fefc 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80054c8:	4603      	mov	r3, r0
 80054ca:	4a3f      	ldr	r2, [pc, #252]	; (80055c8 <HAL_ETH_Init+0x1c4>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	0c9a      	lsrs	r2, r3, #18
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3a01      	subs	r2, #1
 80054d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa71 	bl	80059c4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80054ee:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054fe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	22e0      	movs	r2, #224	; 0xe0
 800551a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e049      	b.n	80055b6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800552e:	4b27      	ldr	r3, [pc, #156]	; (80055cc <HAL_ETH_Init+0x1c8>)
 8005530:	4013      	ands	r3, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6952      	ldr	r2, [r2, #20]
 8005536:	0051      	lsls	r1, r2, #1
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	430b      	orrs	r3, r1
 800553e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005542:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fad9 	bl	8005afe <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fb1f 	bl	8005b90 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	3305      	adds	r3, #5
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	3304      	adds	r3, #4
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	4619      	mov	r1, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	3303      	adds	r3, #3
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	061a      	lsls	r2, r3, #24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	3302      	adds	r3, #2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	3301      	adds	r3, #1
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005590:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800559e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2210      	movs	r2, #16
 80055b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
 80055c4:	58000400 	.word	0x58000400
 80055c8:	431bde83 	.word	0x431bde83
 80055cc:	ffff8001 	.word	0xffff8001

080055d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80055ea:	f001 fe69 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80055ee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d908      	bls.n	800560a <HAL_ETH_SetMDIOClockRange+0x3a>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d804      	bhi.n	800560a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e027      	b.n	800565a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4a18      	ldr	r2, [pc, #96]	; (8005670 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d908      	bls.n	8005624 <HAL_ETH_SetMDIOClockRange+0x54>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4a17      	ldr	r2, [pc, #92]	; (8005674 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d204      	bcs.n	8005624 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e01a      	b.n	800565a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d303      	bcc.n	8005634 <HAL_ETH_SetMDIOClockRange+0x64>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a12      	ldr	r2, [pc, #72]	; (8005678 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d911      	bls.n	8005658 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d908      	bls.n	800564e <HAL_ETH_SetMDIOClockRange+0x7e>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4a0f      	ldr	r2, [pc, #60]	; (800567c <HAL_ETH_SetMDIOClockRange+0xac>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d804      	bhi.n	800564e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e005      	b.n	800565a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	e000      	b.n	800565a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005658:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	01312cff 	.word	0x01312cff
 8005670:	02160ebf 	.word	0x02160ebf
 8005674:	03938700 	.word	0x03938700
 8005678:	05f5e0ff 	.word	0x05f5e0ff
 800567c:	08f0d17f 	.word	0x08f0d17f

08005680 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	791b      	ldrb	r3, [r3, #4]
 8005698:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800569a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	7b1b      	ldrb	r3, [r3, #12]
 80056a0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80056a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	7b5b      	ldrb	r3, [r3, #13]
 80056a8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80056aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	7b9b      	ldrb	r3, [r3, #14]
 80056b0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80056b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	7bdb      	ldrb	r3, [r3, #15]
 80056b8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	7c12      	ldrb	r2, [r2, #16]
 80056c0:	2a00      	cmp	r2, #0
 80056c2:	d102      	bne.n	80056ca <ETH_SetMACConfig+0x4a>
 80056c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80056c8:	e000      	b.n	80056cc <ETH_SetMACConfig+0x4c>
 80056ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	7c52      	ldrb	r2, [r2, #17]
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d102      	bne.n	80056dc <ETH_SetMACConfig+0x5c>
 80056d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056da:	e000      	b.n	80056de <ETH_SetMACConfig+0x5e>
 80056dc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	7c9b      	ldrb	r3, [r3, #18]
 80056e4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056e6:	431a      	orrs	r2, r3
               macconf->Speed |
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80056ec:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80056f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	7f1b      	ldrb	r3, [r3, #28]
 80056f8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80056fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	7f5b      	ldrb	r3, [r3, #29]
 8005700:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005702:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	7f92      	ldrb	r2, [r2, #30]
 8005708:	2a00      	cmp	r2, #0
 800570a:	d102      	bne.n	8005712 <ETH_SetMACConfig+0x92>
 800570c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005710:	e000      	b.n	8005714 <ETH_SetMACConfig+0x94>
 8005712:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005714:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	7fdb      	ldrb	r3, [r3, #31]
 800571a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800571c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005724:	2a00      	cmp	r2, #0
 8005726:	d102      	bne.n	800572e <ETH_SetMACConfig+0xae>
 8005728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572c:	e000      	b.n	8005730 <ETH_SetMACConfig+0xb0>
 800572e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005730:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005736:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800573e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005740:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b56      	ldr	r3, [pc, #344]	; (80058ac <ETH_SetMACConfig+0x22c>)
 8005752:	4013      	ands	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	430b      	orrs	r3, r1
 800575c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800576a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800576c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005774:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005776:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800577e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005780:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005788:	2a00      	cmp	r2, #0
 800578a:	d102      	bne.n	8005792 <ETH_SetMACConfig+0x112>
 800578c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005790:	e000      	b.n	8005794 <ETH_SetMACConfig+0x114>
 8005792:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005794:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	4b42      	ldr	r3, [pc, #264]	; (80058b0 <ETH_SetMACConfig+0x230>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	68f9      	ldr	r1, [r7, #12]
 80057ae:	430b      	orrs	r3, r1
 80057b0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057b8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	4b3a      	ldr	r3, [pc, #232]	; (80058b4 <ETH_SetMACConfig+0x234>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	68f9      	ldr	r1, [r7, #12]
 80057d2:	430b      	orrs	r3, r1
 80057d4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80057dc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80057ea:	2a00      	cmp	r2, #0
 80057ec:	d101      	bne.n	80057f2 <ETH_SetMACConfig+0x172>
 80057ee:	2280      	movs	r2, #128	; 0x80
 80057f0:	e000      	b.n	80057f4 <ETH_SetMACConfig+0x174>
 80057f2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80057f4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005806:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800580a:	4013      	ands	r3, r2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	68f9      	ldr	r1, [r7, #12]
 8005812:	430b      	orrs	r3, r1
 8005814:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800581c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005824:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f023 0103 	bic.w	r1, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	430a      	orrs	r2, r1
 800583e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800584a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005866:	2a00      	cmp	r2, #0
 8005868:	d101      	bne.n	800586e <ETH_SetMACConfig+0x1ee>
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	e000      	b.n	8005870 <ETH_SetMACConfig+0x1f0>
 800586e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005870:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005878:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800587a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005882:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005890:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	430a      	orrs	r2, r1
 800589c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	00048083 	.word	0x00048083
 80058b0:	c0f88000 	.word	0xc0f88000
 80058b4:	fffffef0 	.word	0xfffffef0

080058b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b38      	ldr	r3, [pc, #224]	; (80059b0 <ETH_SetDMAConfig+0xf8>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	6811      	ldr	r1, [r2, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	430b      	orrs	r3, r1
 80058da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058de:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	791b      	ldrb	r3, [r3, #4]
 80058e4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	7b1b      	ldrb	r3, [r3, #12]
 80058f0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <ETH_SetDMAConfig+0xfc>)
 8005902:	4013      	ands	r3, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	430b      	orrs	r3, r1
 800590c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005910:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	7b5b      	ldrb	r3, [r3, #13]
 8005916:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005928:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800592c:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <ETH_SetDMAConfig+0x100>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	430b      	orrs	r3, r1
 8005938:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800593c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	7d1b      	ldrb	r3, [r3, #20]
 8005948:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800594a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	7f5b      	ldrb	r3, [r3, #29]
 8005950:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005962:	4b16      	ldr	r3, [pc, #88]	; (80059bc <ETH_SetDMAConfig+0x104>)
 8005964:	4013      	ands	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	68f9      	ldr	r1, [r7, #12]
 800596c:	430b      	orrs	r3, r1
 800596e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005972:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	7f1b      	ldrb	r3, [r3, #28]
 800597a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <ETH_SetDMAConfig+0x108>)
 8005992:	4013      	ands	r3, r2
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	430b      	orrs	r3, r1
 800599c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059a0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	ffff87fd 	.word	0xffff87fd
 80059b4:	ffff2ffe 	.word	0xffff2ffe
 80059b8:	fffec000 	.word	0xfffec000
 80059bc:	ffc0efef 	.word	0xffc0efef
 80059c0:	7fc0ffff 	.word	0x7fc0ffff

080059c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b0a4      	sub	sp, #144	; 0x90
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80059d2:	2300      	movs	r3, #0
 80059d4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a04:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005a1c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005a20:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005a46:	2300      	movs	r3, #0
 8005a48:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a6e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a78:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005a80:	2302      	movs	r3, #2
 8005a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fde6 	bl	8005680 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005ace:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ad2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005ad8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005adc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005ae4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fee1 	bl	80058b8 <ETH_SetDMAConfig>
}
 8005af6:	bf00      	nop
 8005af8:	3790      	adds	r7, #144	; 0x90
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e01d      	b.n	8005b48 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68d9      	ldr	r1, [r3, #12]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	440b      	add	r3, r1
 8005b1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	3206      	adds	r2, #6
 8005b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d9de      	bls.n	8005b0c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2303      	movs	r3, #3
 8005b60:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b70:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b80:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e023      	b.n	8005be6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6919      	ldr	r1, [r3, #16]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	440b      	add	r3, r1
 8005bae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	3212      	adds	r2, #18
 8005bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d9d8      	bls.n	8005b9e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c12:	461a      	mov	r2, r3
 8005c14:	2303      	movs	r3, #3
 8005c16:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c26:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
	...

08005c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	; 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c5a:	4b89      	ldr	r3, [pc, #548]	; (8005e80 <HAL_GPIO_Init+0x234>)
 8005c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c5e:	e194      	b.n	8005f8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	2101      	movs	r1, #1
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8186 	beq.w	8005f84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d005      	beq.n	8005c90 <HAL_GPIO_Init+0x44>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d130      	bne.n	8005cf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f003 0201 	and.w	r2, r3, #1
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d017      	beq.n	8005d2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	2203      	movs	r2, #3
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d123      	bne.n	8005d82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	08da      	lsrs	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3208      	adds	r2, #8
 8005d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	220f      	movs	r2, #15
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	43db      	mvns	r3, r3
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	08da      	lsrs	r2, r3, #3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3208      	adds	r2, #8
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43db      	mvns	r3, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4013      	ands	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 0203 	and.w	r2, r3, #3
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80e0 	beq.w	8005f84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dc4:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <HAL_GPIO_Init+0x238>)
 8005dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dca:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <HAL_GPIO_Init+0x238>)
 8005dcc:	f043 0302 	orr.w	r3, r3, #2
 8005dd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	; (8005e84 <HAL_GPIO_Init+0x238>)
 8005dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005de2:	4a29      	ldr	r2, [pc, #164]	; (8005e88 <HAL_GPIO_Init+0x23c>)
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	3302      	adds	r3, #2
 8005dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	220f      	movs	r2, #15
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <HAL_GPIO_Init+0x240>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d052      	beq.n	8005eb4 <HAL_GPIO_Init+0x268>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <HAL_GPIO_Init+0x244>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d031      	beq.n	8005e7a <HAL_GPIO_Init+0x22e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <HAL_GPIO_Init+0x248>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d02b      	beq.n	8005e76 <HAL_GPIO_Init+0x22a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <HAL_GPIO_Init+0x24c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d025      	beq.n	8005e72 <HAL_GPIO_Init+0x226>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <HAL_GPIO_Init+0x250>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01f      	beq.n	8005e6e <HAL_GPIO_Init+0x222>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <HAL_GPIO_Init+0x254>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d019      	beq.n	8005e6a <HAL_GPIO_Init+0x21e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <HAL_GPIO_Init+0x258>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <HAL_GPIO_Init+0x21a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <HAL_GPIO_Init+0x25c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00d      	beq.n	8005e62 <HAL_GPIO_Init+0x216>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a18      	ldr	r2, [pc, #96]	; (8005eac <HAL_GPIO_Init+0x260>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <HAL_GPIO_Init+0x212>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <HAL_GPIO_Init+0x264>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d101      	bne.n	8005e5a <HAL_GPIO_Init+0x20e>
 8005e56:	2309      	movs	r3, #9
 8005e58:	e02d      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e5a:	230a      	movs	r3, #10
 8005e5c:	e02b      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	e029      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e62:	2307      	movs	r3, #7
 8005e64:	e027      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e66:	2306      	movs	r3, #6
 8005e68:	e025      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e6a:	2305      	movs	r3, #5
 8005e6c:	e023      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e6e:	2304      	movs	r3, #4
 8005e70:	e021      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e72:	2303      	movs	r3, #3
 8005e74:	e01f      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e01d      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e01b      	b.n	8005eb6 <HAL_GPIO_Init+0x26a>
 8005e7e:	bf00      	nop
 8005e80:	58000080 	.word	0x58000080
 8005e84:	58024400 	.word	0x58024400
 8005e88:	58000400 	.word	0x58000400
 8005e8c:	58020000 	.word	0x58020000
 8005e90:	58020400 	.word	0x58020400
 8005e94:	58020800 	.word	0x58020800
 8005e98:	58020c00 	.word	0x58020c00
 8005e9c:	58021000 	.word	0x58021000
 8005ea0:	58021400 	.word	0x58021400
 8005ea4:	58021800 	.word	0x58021800
 8005ea8:	58021c00 	.word	0x58021c00
 8005eac:	58022000 	.word	0x58022000
 8005eb0:	58022400 	.word	0x58022400
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	f002 0203 	and.w	r2, r2, #3
 8005ebc:	0092      	lsls	r2, r2, #2
 8005ebe:	4093      	lsls	r3, r2
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ec6:	4938      	ldr	r1, [pc, #224]	; (8005fa8 <HAL_GPIO_Init+0x35c>)
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	089b      	lsrs	r3, r3, #2
 8005ecc:	3302      	adds	r3, #2
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	3301      	adds	r3, #1
 8005f88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f47f ae63 	bne.w	8005c60 <HAL_GPIO_Init+0x14>
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	3724      	adds	r7, #36	; 0x24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	58000400 	.word	0x58000400

08005fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	887b      	ldrh	r3, [r7, #2]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e001      	b.n	8005fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	807b      	strh	r3, [r7, #2]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fec:	787b      	ldrb	r3, [r7, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ff2:	887a      	ldrh	r2, [r7, #2]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ff8:	e003      	b.n	8006002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	041a      	lsls	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	619a      	str	r2, [r3, #24]
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006020:	887a      	ldrh	r2, [r7, #2]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4013      	ands	r3, r2
 8006026:	041a      	lsls	r2, r3, #16
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	43d9      	mvns	r1, r3
 800602c:	887b      	ldrh	r3, [r7, #2]
 800602e:	400b      	ands	r3, r1
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	619a      	str	r2, [r3, #24]
}
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <HAL_HSEM_FastTake+0x2c>)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3320      	adds	r3, #32
 8006052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006056:	4a07      	ldr	r2, [pc, #28]	; (8006074 <HAL_HSEM_FastTake+0x30>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d101      	bne.n	8006060 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	e000      	b.n	8006062 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
}
 8006062:	4618      	mov	r0, r3
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	58026400 	.word	0x58026400
 8006074:	80000300 	.word	0x80000300

08006078 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006082:	4906      	ldr	r1, [pc, #24]	; (800609c <HAL_HSEM_Release+0x24>)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	58026400 	.word	0x58026400

080060a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	b08f      	sub	sp, #60	; 0x3c
 80060a4:	af0a      	add	r7, sp, #40	; 0x28
 80060a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e116      	b.n	80062e0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7fc fcc1 	bl	8002a54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2203      	movs	r2, #3
 80060d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f004 fded 	bl	800acd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	687e      	ldr	r6, [r7, #4]
 80060fe:	466d      	mov	r5, sp
 8006100:	f106 0410 	add.w	r4, r6, #16
 8006104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800610a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800610c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006110:	e885 0003 	stmia.w	r5, {r0, r1}
 8006114:	1d33      	adds	r3, r6, #4
 8006116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006118:	6838      	ldr	r0, [r7, #0]
 800611a:	f004 fd6b 	bl	800abf4 <USB_CoreInit>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0d7      	b.n	80062e0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f004 fddb 	bl	800acf2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	e04a      	b.n	80061d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006142:	7bfa      	ldrb	r2, [r7, #15]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	333d      	adds	r3, #61	; 0x3d
 8006152:	2201      	movs	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006156:	7bfa      	ldrb	r2, [r7, #15]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	333c      	adds	r3, #60	; 0x3c
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	b298      	uxth	r0, r3
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	3344      	adds	r3, #68	; 0x44
 800617e:	4602      	mov	r2, r0
 8006180:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006182:	7bfa      	ldrb	r2, [r7, #15]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	3340      	adds	r3, #64	; 0x40
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	3348      	adds	r3, #72	; 0x48
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	334c      	adds	r3, #76	; 0x4c
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061be:	7bfa      	ldrb	r2, [r7, #15]
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	3354      	adds	r3, #84	; 0x54
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	3301      	adds	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d3af      	bcc.n	8006142 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]
 80061e6:	e044      	b.n	8006272 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061e8:	7bfa      	ldrb	r2, [r7, #15]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061fe:	7bfa      	ldrb	r2, [r7, #15]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006210:	7bfa      	ldrb	r2, [r7, #15]
 8006212:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006214:	7bfa      	ldrb	r2, [r7, #15]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800622a:	7bfa      	ldrb	r2, [r7, #15]
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006240:	7bfa      	ldrb	r2, [r7, #15]
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006256:	7bfa      	ldrb	r2, [r7, #15]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	3301      	adds	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
 8006272:	7bfa      	ldrb	r2, [r7, #15]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	429a      	cmp	r2, r3
 800627a:	d3b5      	bcc.n	80061e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	687e      	ldr	r6, [r7, #4]
 8006284:	466d      	mov	r5, sp
 8006286:	f106 0410 	add.w	r4, r6, #16
 800628a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800628c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800628e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006296:	e885 0003 	stmia.w	r5, {r0, r1}
 800629a:	1d33      	adds	r3, r6, #4
 800629c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800629e:	6838      	ldr	r0, [r7, #0]
 80062a0:	f004 fd74 	bl	800ad8c <USB_DevInit>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e014      	b.n	80062e0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d102      	bne.n	80062d4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f80a 	bl	80062e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f004 ff32 	bl	800b142 <USB_DevDisconnect>

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_PCDEx_ActivateLPM+0x44>)
 8006318:	4313      	orrs	r3, r2
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	10000003 	.word	0x10000003

08006330 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006338:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	2b06      	cmp	r3, #6
 8006342:	d00a      	beq.n	800635a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006344:	4b26      	ldr	r3, [pc, #152]	; (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d001      	beq.n	8006356 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e040      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e03e      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800635a:	4b21      	ldr	r3, [pc, #132]	; (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006362:	491f      	ldr	r1, [pc, #124]	; (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4313      	orrs	r3, r2
 8006368:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800636a:	f7fc fcc5 	bl	8002cf8 <HAL_GetTick>
 800636e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006370:	e009      	b.n	8006386 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006372:	f7fc fcc1 	bl	8002cf8 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006380:	d901      	bls.n	8006386 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e028      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006386:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800638e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006392:	d1ee      	bne.n	8006372 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b1e      	cmp	r3, #30
 8006398:	d008      	beq.n	80063ac <HAL_PWREx_ConfigSupply+0x7c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b2e      	cmp	r3, #46	; 0x2e
 800639e:	d005      	beq.n	80063ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b1d      	cmp	r3, #29
 80063a4:	d002      	beq.n	80063ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b2d      	cmp	r3, #45	; 0x2d
 80063aa:	d114      	bne.n	80063d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80063ac:	f7fc fca4 	bl	8002cf8 <HAL_GetTick>
 80063b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063b2:	e009      	b.n	80063c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063b4:	f7fc fca0 	bl	8002cf8 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c2:	d901      	bls.n	80063c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e007      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d1ee      	bne.n	80063b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	58024800 	.word	0x58024800

080063e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a04      	ldr	r2, [pc, #16]	; (8006400 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063f2:	60d3      	str	r3, [r2, #12]
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	58024800 	.word	0x58024800

08006404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	; 0x30
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d102      	bne.n	8006418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f000 bc1d 	b.w	8006c52 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8087 	beq.w	8006534 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006426:	4b99      	ldr	r3, [pc, #612]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006430:	4b96      	ldr	r3, [pc, #600]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	2b10      	cmp	r3, #16
 800643a:	d007      	beq.n	800644c <HAL_RCC_OscConfig+0x48>
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b18      	cmp	r3, #24
 8006440:	d110      	bne.n	8006464 <HAL_RCC_OscConfig+0x60>
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d10b      	bne.n	8006464 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800644c:	4b8f      	ldr	r3, [pc, #572]	; (800668c <HAL_RCC_OscConfig+0x288>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d06c      	beq.n	8006532 <HAL_RCC_OscConfig+0x12e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d168      	bne.n	8006532 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e3f6      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646c:	d106      	bne.n	800647c <HAL_RCC_OscConfig+0x78>
 800646e:	4b87      	ldr	r3, [pc, #540]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a86      	ldr	r2, [pc, #536]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e02e      	b.n	80064da <HAL_RCC_OscConfig+0xd6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10c      	bne.n	800649e <HAL_RCC_OscConfig+0x9a>
 8006484:	4b81      	ldr	r3, [pc, #516]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a80      	ldr	r2, [pc, #512]	; (800668c <HAL_RCC_OscConfig+0x288>)
 800648a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	4b7e      	ldr	r3, [pc, #504]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a7d      	ldr	r2, [pc, #500]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e01d      	b.n	80064da <HAL_RCC_OscConfig+0xd6>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064a6:	d10c      	bne.n	80064c2 <HAL_RCC_OscConfig+0xbe>
 80064a8:	4b78      	ldr	r3, [pc, #480]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a77      	ldr	r2, [pc, #476]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	4b75      	ldr	r3, [pc, #468]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a74      	ldr	r2, [pc, #464]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	e00b      	b.n	80064da <HAL_RCC_OscConfig+0xd6>
 80064c2:	4b72      	ldr	r3, [pc, #456]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a71      	ldr	r2, [pc, #452]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b6f      	ldr	r3, [pc, #444]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a6e      	ldr	r2, [pc, #440]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d013      	beq.n	800650a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fc fc09 	bl	8002cf8 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064ea:	f7fc fc05 	bl	8002cf8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b64      	cmp	r3, #100	; 0x64
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e3aa      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064fc:	4b63      	ldr	r3, [pc, #396]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f0      	beq.n	80064ea <HAL_RCC_OscConfig+0xe6>
 8006508:	e014      	b.n	8006534 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650a:	f7fc fbf5 	bl	8002cf8 <HAL_GetTick>
 800650e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006510:	e008      	b.n	8006524 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006512:	f7fc fbf1 	bl	8002cf8 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b64      	cmp	r3, #100	; 0x64
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e396      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1f0      	bne.n	8006512 <HAL_RCC_OscConfig+0x10e>
 8006530:	e000      	b.n	8006534 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006532:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80cb 	beq.w	80066d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006542:	4b52      	ldr	r3, [pc, #328]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800654a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800654c:	4b4f      	ldr	r3, [pc, #316]	; (800668c <HAL_RCC_OscConfig+0x288>)
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <HAL_RCC_OscConfig+0x164>
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b18      	cmp	r3, #24
 800655c:	d156      	bne.n	800660c <HAL_RCC_OscConfig+0x208>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d151      	bne.n	800660c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006568:	4b48      	ldr	r3, [pc, #288]	; (800668c <HAL_RCC_OscConfig+0x288>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <HAL_RCC_OscConfig+0x17c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e368      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006580:	4b42      	ldr	r3, [pc, #264]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f023 0219 	bic.w	r2, r3, #25
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	493f      	ldr	r1, [pc, #252]	; (800668c <HAL_RCC_OscConfig+0x288>)
 800658e:	4313      	orrs	r3, r2
 8006590:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006592:	f7fc fbb1 	bl	8002cf8 <HAL_GetTick>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800659a:	f7fc fbad 	bl	8002cf8 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e352      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ac:	4b37      	ldr	r3, [pc, #220]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b8:	f7fc fbce 	bl	8002d58 <HAL_GetREVID>
 80065bc:	4603      	mov	r3, r0
 80065be:	f241 0203 	movw	r2, #4099	; 0x1003
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d817      	bhi.n	80065f6 <HAL_RCC_OscConfig+0x1f2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d108      	bne.n	80065e0 <HAL_RCC_OscConfig+0x1dc>
 80065ce:	4b2f      	ldr	r3, [pc, #188]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065d6:	4a2d      	ldr	r2, [pc, #180]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065de:	e07b      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e0:	4b2a      	ldr	r3, [pc, #168]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	031b      	lsls	r3, r3, #12
 80065ee:	4927      	ldr	r1, [pc, #156]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065f4:	e070      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f6:	4b25      	ldr	r3, [pc, #148]	; (800668c <HAL_RCC_OscConfig+0x288>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	4921      	ldr	r1, [pc, #132]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800660a:	e065      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d048      	beq.n	80066a6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006614:	4b1d      	ldr	r3, [pc, #116]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f023 0219 	bic.w	r2, r3, #25
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	491a      	ldr	r1, [pc, #104]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006626:	f7fc fb67 	bl	8002cf8 <HAL_GetTick>
 800662a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800662e:	f7fc fb63 	bl	8002cf8 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e308      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006640:	4b12      	ldr	r3, [pc, #72]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664c:	f7fc fb84 	bl	8002d58 <HAL_GetREVID>
 8006650:	4603      	mov	r3, r0
 8006652:	f241 0203 	movw	r2, #4099	; 0x1003
 8006656:	4293      	cmp	r3, r2
 8006658:	d81a      	bhi.n	8006690 <HAL_RCC_OscConfig+0x28c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d108      	bne.n	8006674 <HAL_RCC_OscConfig+0x270>
 8006662:	4b0a      	ldr	r3, [pc, #40]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800666a:	4a08      	ldr	r2, [pc, #32]	; (800668c <HAL_RCC_OscConfig+0x288>)
 800666c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006670:	6053      	str	r3, [r2, #4]
 8006672:	e031      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	4902      	ldr	r1, [pc, #8]	; (800668c <HAL_RCC_OscConfig+0x288>)
 8006684:	4313      	orrs	r3, r2
 8006686:	604b      	str	r3, [r1, #4]
 8006688:	e026      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
 800668a:	bf00      	nop
 800668c:	58024400 	.word	0x58024400
 8006690:	4b9a      	ldr	r3, [pc, #616]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	061b      	lsls	r3, r3, #24
 800669e:	4997      	ldr	r1, [pc, #604]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	604b      	str	r3, [r1, #4]
 80066a4:	e018      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066a6:	4b95      	ldr	r3, [pc, #596]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a94      	ldr	r2, [pc, #592]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fc fb21 	bl	8002cf8 <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066ba:	f7fc fb1d 	bl	8002cf8 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e2c2      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066cc:	4b8b      	ldr	r3, [pc, #556]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80a9 	beq.w	8006838 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066e6:	4b85      	ldr	r3, [pc, #532]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066f0:	4b82      	ldr	r3, [pc, #520]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d007      	beq.n	800670c <HAL_RCC_OscConfig+0x308>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b18      	cmp	r3, #24
 8006700:	d13a      	bne.n	8006778 <HAL_RCC_OscConfig+0x374>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d135      	bne.n	8006778 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800670c:	4b7b      	ldr	r3, [pc, #492]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_RCC_OscConfig+0x320>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	d001      	beq.n	8006724 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e296      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006724:	f7fc fb18 	bl	8002d58 <HAL_GetREVID>
 8006728:	4603      	mov	r3, r0
 800672a:	f241 0203 	movw	r2, #4099	; 0x1003
 800672e:	4293      	cmp	r3, r2
 8006730:	d817      	bhi.n	8006762 <HAL_RCC_OscConfig+0x35e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	2b20      	cmp	r3, #32
 8006738:	d108      	bne.n	800674c <HAL_RCC_OscConfig+0x348>
 800673a:	4b70      	ldr	r3, [pc, #448]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006742:	4a6e      	ldr	r2, [pc, #440]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006748:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800674a:	e075      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800674c:	4b6b      	ldr	r3, [pc, #428]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	069b      	lsls	r3, r3, #26
 800675a:	4968      	ldr	r1, [pc, #416]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006760:	e06a      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006762:	4b66      	ldr	r3, [pc, #408]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	061b      	lsls	r3, r3, #24
 8006770:	4962      	ldr	r1, [pc, #392]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006772:	4313      	orrs	r3, r2
 8006774:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006776:	e05f      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d042      	beq.n	8006806 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006780:	4b5e      	ldr	r3, [pc, #376]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a5d      	ldr	r2, [pc, #372]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fc fab4 	bl	8002cf8 <HAL_GetTick>
 8006790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006794:	f7fc fab0 	bl	8002cf8 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e255      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067a6:	4b55      	ldr	r3, [pc, #340]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067b2:	f7fc fad1 	bl	8002d58 <HAL_GetREVID>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80067bc:	4293      	cmp	r3, r2
 80067be:	d817      	bhi.n	80067f0 <HAL_RCC_OscConfig+0x3ec>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d108      	bne.n	80067da <HAL_RCC_OscConfig+0x3d6>
 80067c8:	4b4c      	ldr	r3, [pc, #304]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80067d0:	4a4a      	ldr	r2, [pc, #296]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d6:	6053      	str	r3, [r2, #4]
 80067d8:	e02e      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
 80067da:	4b48      	ldr	r3, [pc, #288]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	069b      	lsls	r3, r3, #26
 80067e8:	4944      	ldr	r1, [pc, #272]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	604b      	str	r3, [r1, #4]
 80067ee:	e023      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
 80067f0:	4b42      	ldr	r3, [pc, #264]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	061b      	lsls	r3, r3, #24
 80067fe:	493f      	ldr	r1, [pc, #252]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006800:	4313      	orrs	r3, r2
 8006802:	60cb      	str	r3, [r1, #12]
 8006804:	e018      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006806:	4b3d      	ldr	r3, [pc, #244]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800680c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fc fa71 	bl	8002cf8 <HAL_GetTick>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800681a:	f7fc fa6d 	bl	8002cf8 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e212      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800682c:	4b33      	ldr	r3, [pc, #204]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d036      	beq.n	80068b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d019      	beq.n	8006880 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684c:	4b2b      	ldr	r3, [pc, #172]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800684e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006850:	4a2a      	ldr	r2, [pc, #168]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fc fa4e 	bl	8002cf8 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006860:	f7fc fa4a 	bl	8002cf8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e1ef      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006872:	4b22      	ldr	r3, [pc, #136]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x45c>
 800687e:	e018      	b.n	80068b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006884:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fc fa34 	bl	8002cf8 <HAL_GetTick>
 8006890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006894:	f7fc fa30 	bl	8002cf8 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e1d5      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068a6:	4b15      	ldr	r3, [pc, #84]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d039      	beq.n	8006932 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01c      	beq.n	8006900 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068c6:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a0c      	ldr	r2, [pc, #48]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068d2:	f7fc fa11 	bl	8002cf8 <HAL_GetTick>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068da:	f7fc fa0d 	bl	8002cf8 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e1b2      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068ec:	4b03      	ldr	r3, [pc, #12]	; (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x4d6>
 80068f8:	e01b      	b.n	8006932 <HAL_RCC_OscConfig+0x52e>
 80068fa:	bf00      	nop
 80068fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006900:	4b9b      	ldr	r3, [pc, #620]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a9a      	ldr	r2, [pc, #616]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800690a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800690c:	f7fc f9f4 	bl	8002cf8 <HAL_GetTick>
 8006910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006914:	f7fc f9f0 	bl	8002cf8 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e195      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006926:	4b92      	ldr	r3, [pc, #584]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f0      	bne.n	8006914 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8081 	beq.w	8006a42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006940:	4b8c      	ldr	r3, [pc, #560]	; (8006b74 <HAL_RCC_OscConfig+0x770>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a8b      	ldr	r2, [pc, #556]	; (8006b74 <HAL_RCC_OscConfig+0x770>)
 8006946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800694c:	f7fc f9d4 	bl	8002cf8 <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006954:	f7fc f9d0 	bl	8002cf8 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e175      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006966:	4b83      	ldr	r3, [pc, #524]	; (8006b74 <HAL_RCC_OscConfig+0x770>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d106      	bne.n	8006988 <HAL_RCC_OscConfig+0x584>
 800697a:	4b7d      	ldr	r3, [pc, #500]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	4a7c      	ldr	r2, [pc, #496]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	6713      	str	r3, [r2, #112]	; 0x70
 8006986:	e02d      	b.n	80069e4 <HAL_RCC_OscConfig+0x5e0>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10c      	bne.n	80069aa <HAL_RCC_OscConfig+0x5a6>
 8006990:	4b77      	ldr	r3, [pc, #476]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006994:	4a76      	ldr	r2, [pc, #472]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	6713      	str	r3, [r2, #112]	; 0x70
 800699c:	4b74      	ldr	r3, [pc, #464]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a73      	ldr	r2, [pc, #460]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069a2:	f023 0304 	bic.w	r3, r3, #4
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
 80069a8:	e01c      	b.n	80069e4 <HAL_RCC_OscConfig+0x5e0>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x5c8>
 80069b2:	4b6f      	ldr	r3, [pc, #444]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	4a6e      	ldr	r2, [pc, #440]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069b8:	f043 0304 	orr.w	r3, r3, #4
 80069bc:	6713      	str	r3, [r2, #112]	; 0x70
 80069be:	4b6c      	ldr	r3, [pc, #432]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	4a6b      	ldr	r2, [pc, #428]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ca:	e00b      	b.n	80069e4 <HAL_RCC_OscConfig+0x5e0>
 80069cc:	4b68      	ldr	r3, [pc, #416]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d0:	4a67      	ldr	r2, [pc, #412]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	6713      	str	r3, [r2, #112]	; 0x70
 80069d8:	4b65      	ldr	r3, [pc, #404]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	4a64      	ldr	r2, [pc, #400]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069de:	f023 0304 	bic.w	r3, r3, #4
 80069e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ec:	f7fc f984 	bl	8002cf8 <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fc f980 	bl	8002cf8 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e123      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a0a:	4b59      	ldr	r3, [pc, #356]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0ee      	beq.n	80069f4 <HAL_RCC_OscConfig+0x5f0>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fc f96e 	bl	8002cf8 <HAL_GetTick>
 8006a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a20:	f7fc f96a 	bl	8002cf8 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e10d      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a36:	4b4e      	ldr	r3, [pc, #312]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1ee      	bne.n	8006a20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8102 	beq.w	8006c50 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a4c:	4b48      	ldr	r3, [pc, #288]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a54:	2b18      	cmp	r3, #24
 8006a56:	f000 80bd 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	f040 809e 	bne.w	8006ba0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a64:	4b42      	ldr	r3, [pc, #264]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a41      	ldr	r2, [pc, #260]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fc f942 	bl	8002cf8 <HAL_GetTick>
 8006a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a78:	f7fc f93e 	bl	8002cf8 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e0e3      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a8a:	4b39      	ldr	r3, [pc, #228]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a96:	4b36      	ldr	r3, [pc, #216]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9a:	4b37      	ldr	r3, [pc, #220]	; (8006b78 <HAL_RCC_OscConfig+0x774>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006aa6:	0112      	lsls	r2, r2, #4
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	4931      	ldr	r1, [pc, #196]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	628b      	str	r3, [r1, #40]	; 0x28
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	025b      	lsls	r3, r3, #9
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	3b01      	subs	r3, #1
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	061b      	lsls	r3, r3, #24
 8006adc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ae0:	4923      	ldr	r1, [pc, #140]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006ae6:	4b22      	ldr	r3, [pc, #136]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	4a21      	ldr	r2, [pc, #132]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006af2:	4b1f      	ldr	r3, [pc, #124]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af6:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006afe:	00d2      	lsls	r2, r2, #3
 8006b00:	491b      	ldr	r1, [pc, #108]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b06:	4b1a      	ldr	r3, [pc, #104]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	f023 020c 	bic.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	4917      	ldr	r1, [pc, #92]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b18:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	f023 0202 	bic.w	r2, r3, #2
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	4912      	ldr	r1, [pc, #72]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b36:	4b0e      	ldr	r3, [pc, #56]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	4a0d      	ldr	r2, [pc, #52]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b4e:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	4a07      	ldr	r2, [pc, #28]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a04      	ldr	r2, [pc, #16]	; (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fc f8c7 	bl	8002cf8 <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b6c:	e011      	b.n	8006b92 <HAL_RCC_OscConfig+0x78e>
 8006b6e:	bf00      	nop
 8006b70:	58024400 	.word	0x58024400
 8006b74:	58024800 	.word	0x58024800
 8006b78:	fffffc0c 	.word	0xfffffc0c
 8006b7c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b80:	f7fc f8ba 	bl	8002cf8 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e05f      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b92:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <HAL_RCC_OscConfig+0x858>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f0      	beq.n	8006b80 <HAL_RCC_OscConfig+0x77c>
 8006b9e:	e057      	b.n	8006c50 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba0:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <HAL_RCC_OscConfig+0x858>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2d      	ldr	r2, [pc, #180]	; (8006c5c <HAL_RCC_OscConfig+0x858>)
 8006ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fc f8a4 	bl	8002cf8 <HAL_GetTick>
 8006bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fc f8a0 	bl	8002cf8 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e045      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bc6:	4b25      	ldr	r3, [pc, #148]	; (8006c5c <HAL_RCC_OscConfig+0x858>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x7b0>
 8006bd2:	e03d      	b.n	8006c50 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bd4:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <HAL_RCC_OscConfig+0x858>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bda:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <HAL_RCC_OscConfig+0x858>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d031      	beq.n	8006c4c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f003 0203 	and.w	r2, r3, #3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d12a      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d122      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d11a      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	0a5b      	lsrs	r3, r3, #9
 8006c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d111      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d108      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	0e1b      	lsrs	r3, r3, #24
 8006c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d001      	beq.n	8006c50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3730      	adds	r7, #48	; 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	58024400 	.word	0x58024400

08006c60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e19c      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c74:	4b8a      	ldr	r3, [pc, #552]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d910      	bls.n	8006ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c82:	4b87      	ldr	r3, [pc, #540]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f023 020f 	bic.w	r2, r3, #15
 8006c8a:	4985      	ldr	r1, [pc, #532]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b83      	ldr	r3, [pc, #524]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e184      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d010      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	4b7b      	ldr	r3, [pc, #492]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d908      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cc0:	4b78      	ldr	r3, [pc, #480]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	4975      	ldr	r1, [pc, #468]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d010      	beq.n	8006d00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695a      	ldr	r2, [r3, #20]
 8006ce2:	4b70      	ldr	r3, [pc, #448]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d908      	bls.n	8006d00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cee:	4b6d      	ldr	r3, [pc, #436]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	496a      	ldr	r1, [pc, #424]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d010      	beq.n	8006d2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d908      	bls.n	8006d2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d1c:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	495e      	ldr	r1, [pc, #376]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d010      	beq.n	8006d5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69da      	ldr	r2, [r3, #28]
 8006d3e:	4b59      	ldr	r3, [pc, #356]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d908      	bls.n	8006d5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d4a:	4b56      	ldr	r3, [pc, #344]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	4953      	ldr	r1, [pc, #332]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d010      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d908      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d78:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f023 020f 	bic.w	r2, r3, #15
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4947      	ldr	r1, [pc, #284]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d055      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d96:	4b43      	ldr	r3, [pc, #268]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	4940      	ldr	r1, [pc, #256]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006db0:	4b3c      	ldr	r3, [pc, #240]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d121      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0f6      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dc8:	4b36      	ldr	r3, [pc, #216]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d115      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0ea      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d107      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006de0:	4b30      	ldr	r3, [pc, #192]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0de      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006df0:	4b2c      	ldr	r3, [pc, #176]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0d6      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f023 0207 	bic.w	r2, r3, #7
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	4925      	ldr	r1, [pc, #148]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e12:	f7fb ff71 	bl	8002cf8 <HAL_GetTick>
 8006e16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e18:	e00a      	b.n	8006e30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e1a:	f7fb ff6d 	bl	8002cf8 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e0be      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e30:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d1eb      	bne.n	8006e1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d010      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d208      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e5e:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	f023 020f 	bic.w	r2, r3, #15
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	490e      	ldr	r1, [pc, #56]	; (8006ea4 <HAL_RCC_ClockConfig+0x244>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d214      	bcs.n	8006ea8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7e:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f023 020f 	bic.w	r2, r3, #15
 8006e86:	4906      	ldr	r1, [pc, #24]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8e:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <HAL_RCC_ClockConfig+0x240>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d005      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e086      	b.n	8006fae <HAL_RCC_ClockConfig+0x34e>
 8006ea0:	52002000 	.word	0x52002000
 8006ea4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d208      	bcs.n	8006ed6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ec4:	4b3c      	ldr	r3, [pc, #240]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	4939      	ldr	r1, [pc, #228]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d010      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695a      	ldr	r2, [r3, #20]
 8006ee6:	4b34      	ldr	r3, [pc, #208]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d208      	bcs.n	8006f04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ef2:	4b31      	ldr	r3, [pc, #196]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	492e      	ldr	r1, [pc, #184]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d010      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699a      	ldr	r2, [r3, #24]
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d208      	bcs.n	8006f32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	4922      	ldr	r1, [pc, #136]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d010      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69da      	ldr	r2, [r3, #28]
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d208      	bcs.n	8006f60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	4917      	ldr	r1, [pc, #92]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f60:	f000 f834 	bl	8006fcc <HAL_RCC_GetSysClockFreq>
 8006f64:	4602      	mov	r2, r0
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	4912      	ldr	r1, [pc, #72]	; (8006fbc <HAL_RCC_ClockConfig+0x35c>)
 8006f72:	5ccb      	ldrb	r3, [r1, r3]
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <HAL_RCC_ClockConfig+0x358>)
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <HAL_RCC_ClockConfig+0x35c>)
 8006f88:	5cd3      	ldrb	r3, [r2, r3]
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	4a0a      	ldr	r2, [pc, #40]	; (8006fc0 <HAL_RCC_ClockConfig+0x360>)
 8006f96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f98:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <HAL_RCC_ClockConfig+0x364>)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <HAL_RCC_ClockConfig+0x368>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fb fe5e 	bl	8002c64 <HAL_InitTick>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	0800b278 	.word	0x0800b278
 8006fc0:	24000004 	.word	0x24000004
 8006fc4:	24000000 	.word	0x24000000
 8006fc8:	24000008 	.word	0x24000008

08006fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b089      	sub	sp, #36	; 0x24
 8006fd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fd2:	4bb3      	ldr	r3, [pc, #716]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fda:	2b18      	cmp	r3, #24
 8006fdc:	f200 8155 	bhi.w	800728a <HAL_RCC_GetSysClockFreq+0x2be>
 8006fe0:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	0800704d 	.word	0x0800704d
 8006fec:	0800728b 	.word	0x0800728b
 8006ff0:	0800728b 	.word	0x0800728b
 8006ff4:	0800728b 	.word	0x0800728b
 8006ff8:	0800728b 	.word	0x0800728b
 8006ffc:	0800728b 	.word	0x0800728b
 8007000:	0800728b 	.word	0x0800728b
 8007004:	0800728b 	.word	0x0800728b
 8007008:	08007073 	.word	0x08007073
 800700c:	0800728b 	.word	0x0800728b
 8007010:	0800728b 	.word	0x0800728b
 8007014:	0800728b 	.word	0x0800728b
 8007018:	0800728b 	.word	0x0800728b
 800701c:	0800728b 	.word	0x0800728b
 8007020:	0800728b 	.word	0x0800728b
 8007024:	0800728b 	.word	0x0800728b
 8007028:	08007079 	.word	0x08007079
 800702c:	0800728b 	.word	0x0800728b
 8007030:	0800728b 	.word	0x0800728b
 8007034:	0800728b 	.word	0x0800728b
 8007038:	0800728b 	.word	0x0800728b
 800703c:	0800728b 	.word	0x0800728b
 8007040:	0800728b 	.word	0x0800728b
 8007044:	0800728b 	.word	0x0800728b
 8007048:	0800707f 	.word	0x0800707f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800704c:	4b94      	ldr	r3, [pc, #592]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007058:	4b91      	ldr	r3, [pc, #580]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	4a90      	ldr	r2, [pc, #576]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800706a:	e111      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800706c:	4b8d      	ldr	r3, [pc, #564]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800706e:	61bb      	str	r3, [r7, #24]
    break;
 8007070:	e10e      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007072:	4b8d      	ldr	r3, [pc, #564]	; (80072a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007074:	61bb      	str	r3, [r7, #24]
    break;
 8007076:	e10b      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007078:	4b8c      	ldr	r3, [pc, #560]	; (80072ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800707a:	61bb      	str	r3, [r7, #24]
    break;
 800707c:	e108      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800707e:	4b88      	ldr	r3, [pc, #544]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007088:	4b85      	ldr	r3, [pc, #532]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	091b      	lsrs	r3, r3, #4
 800708e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007092:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007094:	4b82      	ldr	r3, [pc, #520]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800709e:	4b80      	ldr	r3, [pc, #512]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80e1 	beq.w	8007284 <HAL_RCC_GetSysClockFreq+0x2b8>
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	f000 8083 	beq.w	80071d0 <HAL_RCC_GetSysClockFreq+0x204>
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	f200 80a1 	bhi.w	8007214 <HAL_RCC_GetSysClockFreq+0x248>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x114>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d056      	beq.n	800718c <HAL_RCC_GetSysClockFreq+0x1c0>
 80070de:	e099      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e0:	4b6f      	ldr	r3, [pc, #444]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02d      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070ec:	4b6c      	ldr	r3, [pc, #432]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	08db      	lsrs	r3, r3, #3
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	4a6b      	ldr	r2, [pc, #428]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b62      	ldr	r3, [pc, #392]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a02 	vldr	s12, [r7, #8]
 800712a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80072b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007146:	e087      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b51      	ldr	r3, [pc, #324]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a02 	vldr	s12, [r7, #8]
 800716e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80072b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800718a:	e065      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a48 	vldr	s13, [pc, #288]	; 80072b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b40      	ldr	r3, [pc, #256]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80072b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ce:	e043      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80072bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b2f      	ldr	r3, [pc, #188]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80072b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007212:	e021      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80072b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007236:	ed97 6a02 	vldr	s12, [r7, #8]
 800723a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80072b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007256:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007258:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	0a5b      	lsrs	r3, r3, #9
 800725e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007262:	3301      	adds	r3, #1
 8007264:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007270:	edd7 6a07 	vldr	s13, [r7, #28]
 8007274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727c:	ee17 3a90 	vmov	r3, s15
 8007280:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007282:	e005      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
    break;
 8007288:	e002      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800728c:	61bb      	str	r3, [r7, #24]
    break;
 800728e:	bf00      	nop
  }

  return sysclockfreq;
 8007290:	69bb      	ldr	r3, [r7, #24]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3724      	adds	r7, #36	; 0x24
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	58024400 	.word	0x58024400
 80072a4:	03d09000 	.word	0x03d09000
 80072a8:	003d0900 	.word	0x003d0900
 80072ac:	007a1200 	.word	0x007a1200
 80072b0:	46000000 	.word	0x46000000
 80072b4:	4c742400 	.word	0x4c742400
 80072b8:	4a742400 	.word	0x4a742400
 80072bc:	4af42400 	.word	0x4af42400

080072c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072c6:	f7ff fe81 	bl	8006fcc <HAL_RCC_GetSysClockFreq>
 80072ca:	4602      	mov	r2, r0
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <HAL_RCC_GetHCLKFreq+0x50>)
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	0a1b      	lsrs	r3, r3, #8
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	490f      	ldr	r1, [pc, #60]	; (8007314 <HAL_RCC_GetHCLKFreq+0x54>)
 80072d8:	5ccb      	ldrb	r3, [r1, r3]
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	fa22 f303 	lsr.w	r3, r2, r3
 80072e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <HAL_RCC_GetHCLKFreq+0x50>)
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	4a09      	ldr	r2, [pc, #36]	; (8007314 <HAL_RCC_GetHCLKFreq+0x54>)
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	4a07      	ldr	r2, [pc, #28]	; (8007318 <HAL_RCC_GetHCLKFreq+0x58>)
 80072fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072fe:	4a07      	ldr	r2, [pc, #28]	; (800731c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007304:	4b04      	ldr	r3, [pc, #16]	; (8007318 <HAL_RCC_GetHCLKFreq+0x58>)
 8007306:	681b      	ldr	r3, [r3, #0]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	58024400 	.word	0x58024400
 8007314:	0800b278 	.word	0x0800b278
 8007318:	24000004 	.word	0x24000004
 800731c:	24000000 	.word	0x24000000

08007320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007324:	f7ff ffcc 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 8007328:	4602      	mov	r2, r0
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	4904      	ldr	r1, [pc, #16]	; (8007348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007336:	5ccb      	ldrb	r3, [r1, r3]
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007340:	4618      	mov	r0, r3
 8007342:	bd80      	pop	{r7, pc}
 8007344:	58024400 	.word	0x58024400
 8007348:	0800b278 	.word	0x0800b278

0800734c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007350:	f7ff ffb6 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 8007354:	4602      	mov	r2, r0
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	4904      	ldr	r1, [pc, #16]	; (8007374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007362:	5ccb      	ldrb	r3, [r1, r3]
 8007364:	f003 031f 	and.w	r3, r3, #31
 8007368:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800736c:	4618      	mov	r0, r3
 800736e:	bd80      	pop	{r7, pc}
 8007370:	58024400 	.word	0x58024400
 8007374:	0800b278 	.word	0x0800b278

08007378 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007380:	2300      	movs	r3, #0
 8007382:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007384:	2300      	movs	r3, #0
 8007386:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d03f      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800739c:	d02a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800739e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073a2:	d824      	bhi.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073a8:	d018      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ae:	d81e      	bhi.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073b8:	d007      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073ba:	e018      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073bc:	4ba3      	ldr	r3, [pc, #652]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4aa2      	ldr	r2, [pc, #648]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073c8:	e015      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3304      	adds	r3, #4
 80073ce:	2102      	movs	r1, #2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 f9d5 	bl	8008780 <RCCEx_PLL2_Config>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073da:	e00c      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3324      	adds	r3, #36	; 0x24
 80073e0:	2102      	movs	r1, #2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 fa7e 	bl	80088e4 <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073ec:	e003      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
      break;
 80073f2:	e000      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80073f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073fc:	4b93      	ldr	r3, [pc, #588]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007408:	4990      	ldr	r1, [pc, #576]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800740a:	4313      	orrs	r3, r2
 800740c:	650b      	str	r3, [r1, #80]	; 0x50
 800740e:	e001      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d03d      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007424:	2b04      	cmp	r3, #4
 8007426:	d826      	bhi.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007428:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007445 	.word	0x08007445
 8007434:	08007453 	.word	0x08007453
 8007438:	08007465 	.word	0x08007465
 800743c:	0800747d 	.word	0x0800747d
 8007440:	0800747d 	.word	0x0800747d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007444:	4b81      	ldr	r3, [pc, #516]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	4a80      	ldr	r2, [pc, #512]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007450:	e015      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f001 f991 	bl	8008780 <RCCEx_PLL2_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007462:	e00c      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fa3a 	bl	80088e4 <RCCEx_PLL3_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007474:	e003      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]
      break;
 800747a:	e000      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800747c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007484:	4b71      	ldr	r3, [pc, #452]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007488:	f023 0207 	bic.w	r2, r3, #7
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007490:	496e      	ldr	r1, [pc, #440]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007492:	4313      	orrs	r3, r2
 8007494:	650b      	str	r3, [r1, #80]	; 0x50
 8007496:	e001      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	7dfb      	ldrb	r3, [r7, #23]
 800749a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d042      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b0:	d02b      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80074b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b6:	d825      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074b8:	2bc0      	cmp	r3, #192	; 0xc0
 80074ba:	d028      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074bc:	2bc0      	cmp	r3, #192	; 0xc0
 80074be:	d821      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074c0:	2b80      	cmp	r3, #128	; 0x80
 80074c2:	d016      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80074c4:	2b80      	cmp	r3, #128	; 0x80
 80074c6:	d81d      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d007      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80074d0:	e018      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d2:	4b5e      	ldr	r3, [pc, #376]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	4a5d      	ldr	r2, [pc, #372]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074de:	e017      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3304      	adds	r3, #4
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f001 f94a 	bl	8008780 <RCCEx_PLL2_Config>
 80074ec:	4603      	mov	r3, r0
 80074ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074f0:	e00e      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3324      	adds	r3, #36	; 0x24
 80074f6:	2100      	movs	r1, #0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 f9f3 	bl	80088e4 <RCCEx_PLL3_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007502:	e005      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75fb      	strb	r3, [r7, #23]
      break;
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800750e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007516:	4b4d      	ldr	r3, [pc, #308]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007522:	494a      	ldr	r1, [pc, #296]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007524:	4313      	orrs	r3, r2
 8007526:	650b      	str	r3, [r1, #80]	; 0x50
 8007528:	e001      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007536:	2b00      	cmp	r3, #0
 8007538:	d049      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007544:	d030      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800754a:	d82a      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800754c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007550:	d02c      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007552:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007556:	d824      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800755c:	d018      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800755e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007562:	d81e      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800756c:	d007      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800756e:	e018      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007570:	4b36      	ldr	r3, [pc, #216]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	4a35      	ldr	r2, [pc, #212]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800757c:	e017      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3304      	adds	r3, #4
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f8fb 	bl	8008780 <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800758e:	e00e      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3324      	adds	r3, #36	; 0x24
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f001 f9a4 	bl	80088e4 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075a0:	e005      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	75fb      	strb	r3, [r7, #23]
      break;
 80075a6:	e002      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075b4:	4b25      	ldr	r3, [pc, #148]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075c2:	4922      	ldr	r1, [pc, #136]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	658b      	str	r3, [r1, #88]	; 0x58
 80075c8:	e001      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d04b      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075e4:	d030      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80075e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075ea:	d82a      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80075ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075f0:	d02e      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80075f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075f6:	d824      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80075f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075fc:	d018      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80075fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007602:	d81e      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800760c:	d007      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800760e:	e018      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	4b0e      	ldr	r3, [pc, #56]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4a0d      	ldr	r2, [pc, #52]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800761a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800761c:	e019      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3304      	adds	r3, #4
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f001 f8ab 	bl	8008780 <RCCEx_PLL2_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800762e:	e010      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f001 f954 	bl	80088e4 <RCCEx_PLL3_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007640:	e007      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	75fb      	strb	r3, [r7, #23]
      break;
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007648:	bf00      	nop
 800764a:	e002      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800764c:	58024400 	.word	0x58024400
      break;
 8007650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007658:	4b99      	ldr	r3, [pc, #612]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800765a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007666:	4996      	ldr	r1, [pc, #600]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007668:	4313      	orrs	r3, r2
 800766a:	658b      	str	r3, [r1, #88]	; 0x58
 800766c:	e001      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d032      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007682:	2b30      	cmp	r3, #48	; 0x30
 8007684:	d01c      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007686:	2b30      	cmp	r3, #48	; 0x30
 8007688:	d817      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d00c      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800768e:	2b20      	cmp	r3, #32
 8007690:	d813      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d016      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007696:	2b10      	cmp	r3, #16
 8007698:	d10f      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769a:	4b89      	ldr	r3, [pc, #548]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	4a88      	ldr	r2, [pc, #544]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076a6:	e00e      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	2102      	movs	r1, #2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 f866 	bl	8008780 <RCCEx_PLL2_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076b8:	e005      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
      break;
 80076be:	e002      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80076c0:	bf00      	nop
 80076c2:	e000      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80076c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d109      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076cc:	4b7c      	ldr	r3, [pc, #496]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d8:	4979      	ldr	r1, [pc, #484]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076de:	e001      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d047      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076f8:	d030      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80076fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076fe:	d82a      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007704:	d02c      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800770a:	d824      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800770c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007710:	d018      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007716:	d81e      	bhi.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007720:	d007      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007722:	e018      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007724:	4b66      	ldr	r3, [pc, #408]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4a65      	ldr	r2, [pc, #404]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800772a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007730:	e017      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3304      	adds	r3, #4
 8007736:	2100      	movs	r1, #0
 8007738:	4618      	mov	r0, r3
 800773a:	f001 f821 	bl	8008780 <RCCEx_PLL2_Config>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007742:	e00e      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3324      	adds	r3, #36	; 0x24
 8007748:	2100      	movs	r1, #0
 800774a:	4618      	mov	r0, r3
 800774c:	f001 f8ca 	bl	80088e4 <RCCEx_PLL3_Config>
 8007750:	4603      	mov	r3, r0
 8007752:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007754:	e005      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
      break;
 800775a:	e002      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d109      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007768:	4b55      	ldr	r3, [pc, #340]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007774:	4952      	ldr	r1, [pc, #328]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007776:	4313      	orrs	r3, r2
 8007778:	650b      	str	r3, [r1, #80]	; 0x50
 800777a:	e001      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d049      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007794:	d02e      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800779a:	d828      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 800779c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077a0:	d02a      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80077a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077a6:	d822      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077ac:	d026      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80077ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077b2:	d81c      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077b8:	d010      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80077ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077be:	d816      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01d      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c8:	d111      	bne.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3304      	adds	r3, #4
 80077ce:	2101      	movs	r1, #1
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 ffd5 	bl	8008780 <RCCEx_PLL2_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077da:	e012      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3324      	adds	r3, #36	; 0x24
 80077e0:	2101      	movs	r1, #1
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 f87e 	bl	80088e4 <RCCEx_PLL3_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077ec:	e009      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
      break;
 80077f2:	e006      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80077f4:	bf00      	nop
 80077f6:	e004      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80077f8:	bf00      	nop
 80077fa:	e002      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007808:	4b2d      	ldr	r3, [pc, #180]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007814:	492a      	ldr	r1, [pc, #168]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007816:	4313      	orrs	r3, r2
 8007818:	650b      	str	r3, [r1, #80]	; 0x50
 800781a:	e001      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d04d      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007836:	d02e      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800783c:	d828      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800783e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007842:	d02a      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007848:	d822      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800784a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800784e:	d026      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007850:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007854:	d81c      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800785a:	d010      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800785c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007860:	d816      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01d      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786a:	d111      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2101      	movs	r1, #1
 8007872:	4618      	mov	r0, r3
 8007874:	f000 ff84 	bl	8008780 <RCCEx_PLL2_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800787c:	e012      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3324      	adds	r3, #36	; 0x24
 8007882:	2101      	movs	r1, #1
 8007884:	4618      	mov	r0, r3
 8007886:	f001 f82d 	bl	80088e4 <RCCEx_PLL3_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800788e:	e009      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
      break;
 8007894:	e006      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80078a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10c      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078b8:	4901      	ldr	r1, [pc, #4]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	658b      	str	r3, [r1, #88]	; 0x58
 80078be:	e003      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80078c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02f      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078dc:	d00e      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80078de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e2:	d814      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d015      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80078e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ec:	d10f      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ee:	4baf      	ldr	r3, [pc, #700]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	4aae      	ldr	r2, [pc, #696]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078fa:	e00c      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	2101      	movs	r1, #1
 8007902:	4618      	mov	r0, r3
 8007904:	f000 ff3c 	bl	8008780 <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800790c:	e003      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
      break;
 8007912:	e000      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d109      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800791c:	4ba3      	ldr	r3, [pc, #652]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007920:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007928:	49a0      	ldr	r1, [pc, #640]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800792a:	4313      	orrs	r3, r2
 800792c:	650b      	str	r3, [r1, #80]	; 0x50
 800792e:	e001      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d032      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007944:	2b03      	cmp	r3, #3
 8007946:	d81b      	bhi.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007948:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007987 	.word	0x08007987
 8007954:	08007961 	.word	0x08007961
 8007958:	0800796f 	.word	0x0800796f
 800795c:	08007987 	.word	0x08007987
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007960:	4b92      	ldr	r3, [pc, #584]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	4a91      	ldr	r2, [pc, #580]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800796a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800796c:	e00c      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	2102      	movs	r1, #2
 8007974:	4618      	mov	r0, r3
 8007976:	f000 ff03 	bl	8008780 <RCCEx_PLL2_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800797e:	e003      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
      break;
 8007984:	e000      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800798e:	4b87      	ldr	r3, [pc, #540]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007992:	f023 0203 	bic.w	r2, r3, #3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800799a:	4984      	ldr	r1, [pc, #528]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800799c:	4313      	orrs	r3, r2
 800799e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079a0:	e001      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8086 	beq.w	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079b4:	4b7e      	ldr	r3, [pc, #504]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a7d      	ldr	r2, [pc, #500]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80079ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079c0:	f7fb f99a 	bl	8002cf8 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079c6:	e009      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079c8:	f7fb f996 	bl	8002cf8 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b64      	cmp	r3, #100	; 0x64
 80079d4:	d902      	bls.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	75fb      	strb	r3, [r7, #23]
        break;
 80079da:	e005      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079dc:	4b74      	ldr	r3, [pc, #464]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0ef      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d166      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079ee:	4b6f      	ldr	r3, [pc, #444]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079f8:	4053      	eors	r3, r2
 80079fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d013      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a02:	4b6a      	ldr	r3, [pc, #424]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a0c:	4b67      	ldr	r3, [pc, #412]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	4a66      	ldr	r2, [pc, #408]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a16:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a18:	4b64      	ldr	r3, [pc, #400]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1c:	4a63      	ldr	r2, [pc, #396]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a22:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a24:	4a61      	ldr	r2, [pc, #388]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a34:	d115      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a36:	f7fb f95f 	bl	8002cf8 <HAL_GetTick>
 8007a3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a3c:	e00b      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3e:	f7fb f95b 	bl	8002cf8 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d902      	bls.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	75fb      	strb	r3, [r7, #23]
            break;
 8007a54:	e005      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a56:	4b55      	ldr	r3, [pc, #340]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0ed      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d126      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a76:	d10d      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007a78:	4b4c      	ldr	r3, [pc, #304]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a86:	0919      	lsrs	r1, r3, #4
 8007a88:	4b4a      	ldr	r3, [pc, #296]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007a8a:	400b      	ands	r3, r1
 8007a8c:	4947      	ldr	r1, [pc, #284]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	610b      	str	r3, [r1, #16]
 8007a92:	e005      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007a94:	4b45      	ldr	r3, [pc, #276]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	4a44      	ldr	r2, [pc, #272]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a9e:	6113      	str	r3, [r2, #16]
 8007aa0:	4b42      	ldr	r3, [pc, #264]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aae:	493f      	ldr	r1, [pc, #252]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	670b      	str	r3, [r1, #112]	; 0x70
 8007ab4:	e004      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	75bb      	strb	r3, [r7, #22]
 8007aba:	e001      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8085 	beq.w	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ad2:	2b28      	cmp	r3, #40	; 0x28
 8007ad4:	d866      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007bb9 	.word	0x08007bb9
 8007ae0:	08007ba5 	.word	0x08007ba5
 8007ae4:	08007ba5 	.word	0x08007ba5
 8007ae8:	08007ba5 	.word	0x08007ba5
 8007aec:	08007ba5 	.word	0x08007ba5
 8007af0:	08007ba5 	.word	0x08007ba5
 8007af4:	08007ba5 	.word	0x08007ba5
 8007af8:	08007ba5 	.word	0x08007ba5
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007ba5 	.word	0x08007ba5
 8007b04:	08007ba5 	.word	0x08007ba5
 8007b08:	08007ba5 	.word	0x08007ba5
 8007b0c:	08007ba5 	.word	0x08007ba5
 8007b10:	08007ba5 	.word	0x08007ba5
 8007b14:	08007ba5 	.word	0x08007ba5
 8007b18:	08007ba5 	.word	0x08007ba5
 8007b1c:	08007b93 	.word	0x08007b93
 8007b20:	08007ba5 	.word	0x08007ba5
 8007b24:	08007ba5 	.word	0x08007ba5
 8007b28:	08007ba5 	.word	0x08007ba5
 8007b2c:	08007ba5 	.word	0x08007ba5
 8007b30:	08007ba5 	.word	0x08007ba5
 8007b34:	08007ba5 	.word	0x08007ba5
 8007b38:	08007ba5 	.word	0x08007ba5
 8007b3c:	08007bb9 	.word	0x08007bb9
 8007b40:	08007ba5 	.word	0x08007ba5
 8007b44:	08007ba5 	.word	0x08007ba5
 8007b48:	08007ba5 	.word	0x08007ba5
 8007b4c:	08007ba5 	.word	0x08007ba5
 8007b50:	08007ba5 	.word	0x08007ba5
 8007b54:	08007ba5 	.word	0x08007ba5
 8007b58:	08007ba5 	.word	0x08007ba5
 8007b5c:	08007bb9 	.word	0x08007bb9
 8007b60:	08007ba5 	.word	0x08007ba5
 8007b64:	08007ba5 	.word	0x08007ba5
 8007b68:	08007ba5 	.word	0x08007ba5
 8007b6c:	08007ba5 	.word	0x08007ba5
 8007b70:	08007ba5 	.word	0x08007ba5
 8007b74:	08007ba5 	.word	0x08007ba5
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	08007bb9 	.word	0x08007bb9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	2101      	movs	r1, #1
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fdfa 	bl	8008780 <RCCEx_PLL2_Config>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b90:	e013      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3324      	adds	r3, #36	; 0x24
 8007b96:	2101      	movs	r1, #1
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fea3 	bl	80088e4 <RCCEx_PLL3_Config>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ba2:	e00a      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba8:	e007      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007baa:	bf00      	nop
 8007bac:	58024400 	.word	0x58024400
 8007bb0:	58024800 	.word	0x58024800
 8007bb4:	00ffffcf 	.word	0x00ffffcf
      break;
 8007bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d109      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bc0:	4b96      	ldr	r3, [pc, #600]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bcc:	4993      	ldr	r1, [pc, #588]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	654b      	str	r3, [r1, #84]	; 0x54
 8007bd2:	e001      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d038      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	d821      	bhi.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c37 	.word	0x08007c37
 8007bf8:	08007c0d 	.word	0x08007c0d
 8007bfc:	08007c1f 	.word	0x08007c1f
 8007c00:	08007c37 	.word	0x08007c37
 8007c04:	08007c37 	.word	0x08007c37
 8007c08:	08007c37 	.word	0x08007c37
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	2101      	movs	r1, #1
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fdb4 	bl	8008780 <RCCEx_PLL2_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c1c:	e00c      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3324      	adds	r3, #36	; 0x24
 8007c22:	2101      	movs	r1, #1
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fe5d 	bl	80088e4 <RCCEx_PLL3_Config>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c2e:	e003      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	75fb      	strb	r3, [r7, #23]
      break;
 8007c34:	e000      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c3e:	4b77      	ldr	r3, [pc, #476]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	f023 0207 	bic.w	r2, r3, #7
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4a:	4974      	ldr	r1, [pc, #464]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	654b      	str	r3, [r1, #84]	; 0x54
 8007c50:	e001      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d03a      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d821      	bhi.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007cb7 	.word	0x08007cb7
 8007c78:	08007c8d 	.word	0x08007c8d
 8007c7c:	08007c9f 	.word	0x08007c9f
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007cb7 	.word	0x08007cb7
 8007c88:	08007cb7 	.word	0x08007cb7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	2101      	movs	r1, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fd74 	bl	8008780 <RCCEx_PLL2_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c9c:	e00c      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3324      	adds	r3, #36	; 0x24
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fe1d 	bl	80088e4 <RCCEx_PLL3_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cae:	e003      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb4:	e000      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cbe:	4b57      	ldr	r3, [pc, #348]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	f023 0207 	bic.w	r2, r3, #7
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ccc:	4953      	ldr	r1, [pc, #332]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8007cd2:	e001      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d04b      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cee:	d02e      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cf4:	d828      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfa:	d02a      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d00:	d822      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d06:	d026      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d0c:	d81c      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d12:	d010      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d18:	d816      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01d      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d22:	d111      	bne.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3304      	adds	r3, #4
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fd28 	bl	8008780 <RCCEx_PLL2_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d34:	e012      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3324      	adds	r3, #36	; 0x24
 8007d3a:	2102      	movs	r1, #2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fdd1 	bl	80088e4 <RCCEx_PLL3_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d46:	e009      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4c:	e006      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d4e:	bf00      	nop
 8007d50:	e004      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d62:	4b2e      	ldr	r3, [pc, #184]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d70:	492a      	ldr	r1, [pc, #168]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	654b      	str	r3, [r1, #84]	; 0x54
 8007d76:	e001      	b.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d04d      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d92:	d02e      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007d94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d98:	d828      	bhi.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9e:	d02a      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da4:	d822      	bhi.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007daa:	d026      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db0:	d81c      	bhi.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db6:	d010      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dbc:	d816      	bhi.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01d      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc6:	d111      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fcd6 	bl	8008780 <RCCEx_PLL2_Config>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007dd8:	e012      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3324      	adds	r3, #36	; 0x24
 8007dde:	2102      	movs	r1, #2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fd7f 	bl	80088e4 <RCCEx_PLL3_Config>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007dea:	e009      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	75fb      	strb	r3, [r7, #23]
      break;
 8007df0:	e006      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007df2:	bf00      	nop
 8007df4:	e004      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007df6:	bf00      	nop
 8007df8:	e002      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007dfa:	bf00      	nop
 8007dfc:	e000      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10c      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e14:	4901      	ldr	r1, [pc, #4]	; (8007e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	658b      	str	r3, [r1, #88]	; 0x58
 8007e1a:	e003      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d04b      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e3a:	d02e      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007e3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e40:	d828      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e46:	d02a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e4c:	d822      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e52:	d026      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007e54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e58:	d81c      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e5e:	d010      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e64:	d816      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01d      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6e:	d111      	bne.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fc82 	bl	8008780 <RCCEx_PLL2_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e80:	e012      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3324      	adds	r3, #36	; 0x24
 8007e86:	2102      	movs	r1, #2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fd2b 	bl	80088e4 <RCCEx_PLL3_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e92:	e009      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	e006      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e9a:	bf00      	nop
 8007e9c:	e004      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e9e:	bf00      	nop
 8007ea0:	e002      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ea2:	bf00      	nop
 8007ea4:	e000      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007eae:	4b9d      	ldr	r3, [pc, #628]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ebc:	4999      	ldr	r1, [pc, #612]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ec2:	e001      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01a      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ede:	d10a      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3324      	adds	r3, #36	; 0x24
 8007ee4:	2102      	movs	r1, #2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fcfc 	bl	80088e4 <RCCEx_PLL3_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ef6:	4b8b      	ldr	r3, [pc, #556]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f04:	4987      	ldr	r1, [pc, #540]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0310 	and.w	r3, r3, #16
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01a      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f20:	d10a      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3324      	adds	r3, #36	; 0x24
 8007f26:	2102      	movs	r1, #2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fcdb 	bl	80088e4 <RCCEx_PLL3_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f38:	4b7a      	ldr	r3, [pc, #488]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f46:	4977      	ldr	r1, [pc, #476]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d034      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f62:	d01d      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f68:	d817      	bhi.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f72:	d009      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007f74:	e011      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fbff 	bl	8008780 <RCCEx_PLL2_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f86:	e00c      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3324      	adds	r3, #36	; 0x24
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fca8 	bl	80088e4 <RCCEx_PLL3_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f98:	e003      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9e:	e000      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fa8:	4b5e      	ldr	r3, [pc, #376]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fb6:	495b      	ldr	r1, [pc, #364]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	658b      	str	r3, [r1, #88]	; 0x58
 8007fbc:	e001      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d033      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fd8:	d01c      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007fda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fde:	d816      	bhi.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe4:	d003      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fea:	d007      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007fec:	e00f      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fee:	4b4d      	ldr	r3, [pc, #308]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	4a4c      	ldr	r2, [pc, #304]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ffa:	e00c      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3324      	adds	r3, #36	; 0x24
 8008000:	2101      	movs	r1, #1
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fc6e 	bl	80088e4 <RCCEx_PLL3_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800800c:	e003      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
      break;
 8008012:	e000      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10a      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800801c:	4b41      	ldr	r3, [pc, #260]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802a:	493e      	ldr	r1, [pc, #248]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800802c:	4313      	orrs	r3, r2
 800802e:	654b      	str	r3, [r1, #84]	; 0x54
 8008030:	e001      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d029      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800804a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804e:	d007      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008050:	e00f      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008052:	4b34      	ldr	r3, [pc, #208]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	4a33      	ldr	r2, [pc, #204]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800805c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800805e:	e00b      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3304      	adds	r3, #4
 8008064:	2102      	movs	r1, #2
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fb8a 	bl	8008780 <RCCEx_PLL2_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008070:	e002      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	75fb      	strb	r3, [r7, #23]
      break;
 8008076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800807e:	4b29      	ldr	r3, [pc, #164]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808a:	4926      	ldr	r1, [pc, #152]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800808c:	4313      	orrs	r3, r2
 800808e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008090:	e001      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3324      	adds	r3, #36	; 0x24
 80080a6:	2102      	movs	r1, #2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fc1b 	bl	80088e4 <RCCEx_PLL3_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d033      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080cc:	d017      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80080ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080d2:	d811      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80080d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d8:	d013      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80080da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080de:	d80b      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d010      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80080e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e8:	d106      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ea:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a0d      	ldr	r2, [pc, #52]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80080f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80080f6:	e007      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
      break;
 80080fc:	e004      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80080fe:	bf00      	nop
 8008100:	e002      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008102:	bf00      	nop
 8008104:	e000      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10c      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800810e:	4b05      	ldr	r3, [pc, #20]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800811a:	4902      	ldr	r1, [pc, #8]	; (8008124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800811c:	4313      	orrs	r3, r2
 800811e:	654b      	str	r3, [r1, #84]	; 0x54
 8008120:	e004      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008122:	bf00      	nop
 8008124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008138:	4b31      	ldr	r3, [pc, #196]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008144:	492e      	ldr	r1, [pc, #184]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008146:	4313      	orrs	r3, r2
 8008148:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008156:	4b2a      	ldr	r3, [pc, #168]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008164:	4926      	ldr	r1, [pc, #152]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008166:	4313      	orrs	r3, r2
 8008168:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d008      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008176:	4b22      	ldr	r3, [pc, #136]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008182:	491f      	ldr	r1, [pc, #124]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008184:	4313      	orrs	r3, r2
 8008186:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008194:	4b1a      	ldr	r3, [pc, #104]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	4a19      	ldr	r2, [pc, #100]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800819a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800819e:	6113      	str	r3, [r2, #16]
 80081a0:	4b17      	ldr	r3, [pc, #92]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081aa:	4915      	ldr	r1, [pc, #84]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	da08      	bge.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081b8:	4b11      	ldr	r3, [pc, #68]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c4:	490e      	ldr	r1, [pc, #56]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081d6:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	4906      	ldr	r1, [pc, #24]	; (8008200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80081ea:	7dbb      	ldrb	r3, [r7, #22]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	e000      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	58024400 	.word	0x58024400

08008204 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008208:	f7ff f85a 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 800820c:	4602      	mov	r2, r0
 800820e:	4b06      	ldr	r3, [pc, #24]	; (8008228 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	4904      	ldr	r1, [pc, #16]	; (800822c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800821a:	5ccb      	ldrb	r3, [r1, r3]
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58024400 	.word	0x58024400
 800822c:	0800b278 	.word	0x0800b278

08008230 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008230:	b480      	push	{r7}
 8008232:	b089      	sub	sp, #36	; 0x24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008238:	4ba1      	ldr	r3, [pc, #644]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008242:	4b9f      	ldr	r3, [pc, #636]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	0b1b      	lsrs	r3, r3, #12
 8008248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800824c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800824e:	4b9c      	ldr	r3, [pc, #624]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	091b      	lsrs	r3, r3, #4
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800825a:	4b99      	ldr	r3, [pc, #612]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	08db      	lsrs	r3, r3, #3
 8008260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	fb02 f303 	mul.w	r3, r2, r3
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 8111 	beq.w	80084a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b02      	cmp	r3, #2
 8008282:	f000 8083 	beq.w	800838c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b02      	cmp	r3, #2
 800828a:	f200 80a1 	bhi.w	80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d056      	beq.n	8008348 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800829a:	e099      	b.n	80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800829c:	4b88      	ldr	r3, [pc, #544]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d02d      	beq.n	8008304 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082a8:	4b85      	ldr	r3, [pc, #532]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	08db      	lsrs	r3, r3, #3
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	4a84      	ldr	r2, [pc, #528]	; (80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082b4:	fa22 f303 	lsr.w	r3, r2, r3
 80082b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	ee07 3a90 	vmov	s15, r3
 80082c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d2:	4b7b      	ldr	r3, [pc, #492]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008302:	e087      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008316:	4b6a      	ldr	r3, [pc, #424]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008326:	ed97 6a03 	vldr	s12, [r7, #12]
 800832a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800832e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800833a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008346:	e065      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008352:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835a:	4b59      	ldr	r3, [pc, #356]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836a:	ed97 6a03 	vldr	s12, [r7, #12]
 800836e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800838a:	e043      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008396:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800839a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839e:	4b48      	ldr	r3, [pc, #288]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ce:	e021      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e2:	4b37      	ldr	r3, [pc, #220]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008412:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008414:	4b2a      	ldr	r3, [pc, #168]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	0a5b      	lsrs	r3, r3, #9
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800842a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843a:	ee17 2a90 	vmov	r2, s15
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008442:	4b1f      	ldr	r3, [pc, #124]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	0c1b      	lsrs	r3, r3, #16
 8008448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844c:	ee07 3a90 	vmov	s15, r3
 8008450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800845c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008468:	ee17 2a90 	vmov	r2, s15
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008470:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	0e1b      	lsrs	r3, r3, #24
 8008476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800848a:	edd7 6a07 	vldr	s13, [r7, #28]
 800848e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008496:	ee17 2a90 	vmov	r2, s15
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800849e:	e008      	b.n	80084b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	609a      	str	r2, [r3, #8]
}
 80084b2:	bf00      	nop
 80084b4:	3724      	adds	r7, #36	; 0x24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	58024400 	.word	0x58024400
 80084c4:	03d09000 	.word	0x03d09000
 80084c8:	46000000 	.word	0x46000000
 80084cc:	4c742400 	.word	0x4c742400
 80084d0:	4a742400 	.word	0x4a742400
 80084d4:	4af42400 	.word	0x4af42400

080084d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80084d8:	b480      	push	{r7}
 80084da:	b089      	sub	sp, #36	; 0x24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084e0:	4ba1      	ldr	r3, [pc, #644]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80084ea:	4b9f      	ldr	r3, [pc, #636]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	0d1b      	lsrs	r3, r3, #20
 80084f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084f6:	4b9c      	ldr	r3, [pc, #624]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008502:	4b99      	ldr	r3, [pc, #612]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	08db      	lsrs	r3, r3, #3
 8008508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8111 	beq.w	8008748 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f000 8083 	beq.w	8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b02      	cmp	r3, #2
 8008532:	f200 80a1 	bhi.w	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d056      	beq.n	80085f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008542:	e099      	b.n	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008544:	4b88      	ldr	r3, [pc, #544]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d02d      	beq.n	80085ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008550:	4b85      	ldr	r3, [pc, #532]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	08db      	lsrs	r3, r3, #3
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	4a84      	ldr	r2, [pc, #528]	; (800876c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
 8008560:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857a:	4b7b      	ldr	r3, [pc, #492]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858a:	ed97 6a03 	vldr	s12, [r7, #12]
 800858e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800859e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085aa:	e087      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085be:	4b6a      	ldr	r3, [pc, #424]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ee:	e065      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008602:	4b59      	ldr	r3, [pc, #356]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008612:	ed97 6a03 	vldr	s12, [r7, #12]
 8008616:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800861a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008632:	e043      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800877c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008646:	4b48      	ldr	r3, [pc, #288]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008656:	ed97 6a03 	vldr	s12, [r7, #12]
 800865a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008676:	e021      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b37      	ldr	r3, [pc, #220]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80086bc:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	0a5b      	lsrs	r3, r3, #9
 80086c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e2:	ee17 2a90 	vmov	r2, s15
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80086ea:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	0c1b      	lsrs	r3, r3, #16
 80086f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008704:	edd7 6a07 	vldr	s13, [r7, #28]
 8008708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800870c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008710:	ee17 2a90 	vmov	r2, s15
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008718:	4b13      	ldr	r3, [pc, #76]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	0e1b      	lsrs	r3, r3, #24
 800871e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800872e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008732:	edd7 6a07 	vldr	s13, [r7, #28]
 8008736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800873a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800873e:	ee17 2a90 	vmov	r2, s15
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008746:	e008      	b.n	800875a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	609a      	str	r2, [r3, #8]
}
 800875a:	bf00      	nop
 800875c:	3724      	adds	r7, #36	; 0x24
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	58024400 	.word	0x58024400
 800876c:	03d09000 	.word	0x03d09000
 8008770:	46000000 	.word	0x46000000
 8008774:	4c742400 	.word	0x4c742400
 8008778:	4a742400 	.word	0x4a742400
 800877c:	4af42400 	.word	0x4af42400

08008780 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800878e:	4b53      	ldr	r3, [pc, #332]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d101      	bne.n	800879e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e099      	b.n	80088d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800879e:	4b4f      	ldr	r3, [pc, #316]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a4e      	ldr	r2, [pc, #312]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80087a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087aa:	f7fa faa5 	bl	8002cf8 <HAL_GetTick>
 80087ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087b0:	e008      	b.n	80087c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087b2:	f7fa faa1 	bl	8002cf8 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d901      	bls.n	80087c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e086      	b.n	80088d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087c4:	4b45      	ldr	r3, [pc, #276]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f0      	bne.n	80087b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087d0:	4b42      	ldr	r3, [pc, #264]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	031b      	lsls	r3, r3, #12
 80087de:	493f      	ldr	r1, [pc, #252]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	628b      	str	r3, [r1, #40]	; 0x28
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	025b      	lsls	r3, r3, #9
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	3b01      	subs	r3, #1
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	3b01      	subs	r3, #1
 800880e:	061b      	lsls	r3, r3, #24
 8008810:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008814:	4931      	ldr	r1, [pc, #196]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800881a:	4b30      	ldr	r3, [pc, #192]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	492d      	ldr	r1, [pc, #180]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008828:	4313      	orrs	r3, r2
 800882a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800882c:	4b2b      	ldr	r3, [pc, #172]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	f023 0220 	bic.w	r2, r3, #32
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	4928      	ldr	r1, [pc, #160]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 800883a:	4313      	orrs	r3, r2
 800883c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800883e:	4b27      	ldr	r3, [pc, #156]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	4a26      	ldr	r2, [pc, #152]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008844:	f023 0310 	bic.w	r3, r3, #16
 8008848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800884a:	4b24      	ldr	r3, [pc, #144]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 800884c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <RCCEx_PLL2_Config+0x160>)
 8008850:	4013      	ands	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	69d2      	ldr	r2, [r2, #28]
 8008856:	00d2      	lsls	r2, r2, #3
 8008858:	4920      	ldr	r1, [pc, #128]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 800885a:	4313      	orrs	r3, r2
 800885c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800885e:	4b1f      	ldr	r3, [pc, #124]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008864:	f043 0310 	orr.w	r3, r3, #16
 8008868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008870:	4b1a      	ldr	r3, [pc, #104]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	4a19      	ldr	r2, [pc, #100]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800887a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800887c:	e00f      	b.n	800889e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d106      	bne.n	8008892 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008884:	4b15      	ldr	r3, [pc, #84]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4a14      	ldr	r2, [pc, #80]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 800888a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800888e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008890:	e005      	b.n	800889e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	4a11      	ldr	r2, [pc, #68]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 8008898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800889c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800889e:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a0e      	ldr	r2, [pc, #56]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80088a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088aa:	f7fa fa25 	bl	8002cf8 <HAL_GetTick>
 80088ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088b0:	e008      	b.n	80088c4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088b2:	f7fa fa21 	bl	8002cf8 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e006      	b.n	80088d2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088c4:	4b05      	ldr	r3, [pc, #20]	; (80088dc <RCCEx_PLL2_Config+0x15c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f0      	beq.n	80088b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	58024400 	.word	0x58024400
 80088e0:	ffff0007 	.word	0xffff0007

080088e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088f2:	4b53      	ldr	r3, [pc, #332]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d101      	bne.n	8008902 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e099      	b.n	8008a36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008902:	4b4f      	ldr	r3, [pc, #316]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a4e      	ldr	r2, [pc, #312]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800890c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800890e:	f7fa f9f3 	bl	8002cf8 <HAL_GetTick>
 8008912:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008914:	e008      	b.n	8008928 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008916:	f7fa f9ef 	bl	8002cf8 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	2b02      	cmp	r3, #2
 8008922:	d901      	bls.n	8008928 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e086      	b.n	8008a36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008928:	4b45      	ldr	r3, [pc, #276]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1f0      	bne.n	8008916 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008934:	4b42      	ldr	r3, [pc, #264]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008938:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	051b      	lsls	r3, r3, #20
 8008942:	493f      	ldr	r1, [pc, #252]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008944:	4313      	orrs	r3, r2
 8008946:	628b      	str	r3, [r1, #40]	; 0x28
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	3b01      	subs	r3, #1
 800894e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	3b01      	subs	r3, #1
 8008958:	025b      	lsls	r3, r3, #9
 800895a:	b29b      	uxth	r3, r3
 800895c:	431a      	orrs	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	3b01      	subs	r3, #1
 8008964:	041b      	lsls	r3, r3, #16
 8008966:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	3b01      	subs	r3, #1
 8008972:	061b      	lsls	r3, r3, #24
 8008974:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008978:	4931      	ldr	r1, [pc, #196]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 800897a:	4313      	orrs	r3, r2
 800897c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800897e:	4b30      	ldr	r3, [pc, #192]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	492d      	ldr	r1, [pc, #180]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 800898c:	4313      	orrs	r3, r2
 800898e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008990:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	4928      	ldr	r1, [pc, #160]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089a2:	4b27      	ldr	r3, [pc, #156]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	4a26      	ldr	r2, [pc, #152]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089ae:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b2:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <RCCEx_PLL3_Config+0x160>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	69d2      	ldr	r2, [r2, #28]
 80089ba:	00d2      	lsls	r2, r2, #3
 80089bc:	4920      	ldr	r1, [pc, #128]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089c2:	4b1f      	ldr	r3, [pc, #124]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	4a1e      	ldr	r2, [pc, #120]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d106      	bne.n	80089e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089d4:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a19      	ldr	r2, [pc, #100]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089e0:	e00f      	b.n	8008a02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d106      	bne.n	80089f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089e8:	4b15      	ldr	r3, [pc, #84]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	4a14      	ldr	r2, [pc, #80]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089f4:	e005      	b.n	8008a02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089f6:	4b12      	ldr	r3, [pc, #72]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	4a11      	ldr	r2, [pc, #68]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 80089fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a02:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a0e      	ldr	r2, [pc, #56]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a0e:	f7fa f973 	bl	8002cf8 <HAL_GetTick>
 8008a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a14:	e008      	b.n	8008a28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a16:	f7fa f96f 	bl	8002cf8 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d901      	bls.n	8008a28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e006      	b.n	8008a36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <RCCEx_PLL3_Config+0x15c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0f0      	beq.n	8008a16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	58024400 	.word	0x58024400
 8008a44:	ffff0007 	.word	0xffff0007

08008a48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e0f1      	b.n	8008c3e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a78      	ldr	r2, [pc, #480]	; (8008c48 <HAL_SPI_Init+0x200>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00f      	beq.n	8008a8a <HAL_SPI_Init+0x42>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a77      	ldr	r2, [pc, #476]	; (8008c4c <HAL_SPI_Init+0x204>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d00a      	beq.n	8008a8a <HAL_SPI_Init+0x42>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a75      	ldr	r2, [pc, #468]	; (8008c50 <HAL_SPI_Init+0x208>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d005      	beq.n	8008a8a <HAL_SPI_Init+0x42>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b0f      	cmp	r3, #15
 8008a84:	d901      	bls.n	8008a8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e0d9      	b.n	8008c3e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fba2 	bl	80091d4 <SPI_GetPacketSize>
 8008a90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a6c      	ldr	r2, [pc, #432]	; (8008c48 <HAL_SPI_Init+0x200>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00c      	beq.n	8008ab6 <HAL_SPI_Init+0x6e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a6a      	ldr	r2, [pc, #424]	; (8008c4c <HAL_SPI_Init+0x204>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d007      	beq.n	8008ab6 <HAL_SPI_Init+0x6e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a69      	ldr	r2, [pc, #420]	; (8008c50 <HAL_SPI_Init+0x208>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d002      	beq.n	8008ab6 <HAL_SPI_Init+0x6e>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d811      	bhi.n	8008ada <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008aba:	4a63      	ldr	r2, [pc, #396]	; (8008c48 <HAL_SPI_Init+0x200>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d009      	beq.n	8008ad4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a61      	ldr	r2, [pc, #388]	; (8008c4c <HAL_SPI_Init+0x204>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <HAL_SPI_Init+0x8c>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a60      	ldr	r2, [pc, #384]	; (8008c50 <HAL_SPI_Init+0x208>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d104      	bne.n	8008ade <HAL_SPI_Init+0x96>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d901      	bls.n	8008ade <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e0af      	b.n	8008c3e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d106      	bne.n	8008af8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7f9 fe70 	bl	80027d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0201 	bic.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008b1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b24:	d119      	bne.n	8008b5a <HAL_SPI_Init+0x112>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b2e:	d103      	bne.n	8008b38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d008      	beq.n	8008b4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10c      	bne.n	8008b5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b48:	d107      	bne.n	8008b5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69da      	ldr	r2, [r3, #28]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	431a      	orrs	r2, r3
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6c:	ea42 0103 	orr.w	r1, r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	431a      	orrs	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	431a      	orrs	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bba:	ea42 0103 	orr.w	r1, r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d113      	bne.n	8008bfa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008be4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bf8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0201 	bic.w	r2, r2, #1
 8008c08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	40013000 	.word	0x40013000
 8008c4c:	40003800 	.word	0x40003800
 8008c50:	40003c00 	.word	0x40003c00

08008c54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	; 0x28
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3320      	adds	r3, #32
 8008c6a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d101      	bne.n	8008c7e <HAL_SPI_Transmit+0x2a>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e1d7      	b.n	800902e <HAL_SPI_Transmit+0x3da>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c86:	f7fa f837 	bl	8002cf8 <HAL_GetTick>
 8008c8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d007      	beq.n	8008ca8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008ca4:	7efb      	ldrb	r3, [r7, #27]
 8008ca6:	e1c2      	b.n	800902e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <HAL_SPI_Transmit+0x60>
 8008cae:	88fb      	ldrh	r3, [r7, #6]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008cc0:	7efb      	ldrb	r3, [r7, #27]
 8008cc2:	e1b4      	b.n	800902e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	88fa      	ldrh	r2, [r7, #6]
 8008ce6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008d14:	d107      	bne.n	8008d26 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	4b96      	ldr	r3, [pc, #600]	; (8008f88 <HAL_SPI_Transmit+0x334>)
 8008d2e:	4013      	ands	r3, r2
 8008d30:	88f9      	ldrh	r1, [r7, #6]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	430b      	orrs	r3, r1
 8008d38:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0201 	orr.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d52:	d107      	bne.n	8008d64 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b0f      	cmp	r3, #15
 8008d6a:	d947      	bls.n	8008dfc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008d6c:	e03f      	b.n	8008dee <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d114      	bne.n	8008da6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8c:	1d1a      	adds	r2, r3, #4
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008da4:	e023      	b.n	8008dee <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008da6:	f7f9 ffa7 	bl	8002cf8 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d803      	bhi.n	8008dbe <HAL_SPI_Transmit+0x16a>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbc:	d102      	bne.n	8008dc4 <HAL_SPI_Transmit+0x170>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d114      	bne.n	8008dee <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 f937 	bl	8009038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e11f      	b.n	800902e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1b9      	bne.n	8008d6e <HAL_SPI_Transmit+0x11a>
 8008dfa:	e0f2      	b.n	8008fe2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	2b07      	cmp	r3, #7
 8008e02:	f240 80e7 	bls.w	8008fd4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008e06:	e05d      	b.n	8008ec4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d132      	bne.n	8008e7c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d918      	bls.n	8008e54 <HAL_SPI_Transmit+0x200>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d014      	beq.n	8008e54 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3a:	1d1a      	adds	r2, r3, #4
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	3b02      	subs	r3, #2
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008e52:	e037      	b.n	8008ec4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e58:	881a      	ldrh	r2, [r3, #0]
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e62:	1c9a      	adds	r2, r3, #2
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008e7a:	e023      	b.n	8008ec4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e7c:	f7f9 ff3c 	bl	8002cf8 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d803      	bhi.n	8008e94 <HAL_SPI_Transmit+0x240>
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e92:	d102      	bne.n	8008e9a <HAL_SPI_Transmit+0x246>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d114      	bne.n	8008ec4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 f8cc 	bl	8009038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e0b4      	b.n	800902e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d19b      	bne.n	8008e08 <HAL_SPI_Transmit+0x1b4>
 8008ed0:	e087      	b.n	8008fe2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d155      	bne.n	8008f8c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d918      	bls.n	8008f1e <HAL_SPI_Transmit+0x2ca>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef0:	2b40      	cmp	r3, #64	; 0x40
 8008ef2:	d914      	bls.n	8008f1e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f04:	1d1a      	adds	r2, r3, #4
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b04      	subs	r3, #4
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f1c:	e05a      	b.n	8008fd4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d917      	bls.n	8008f5a <HAL_SPI_Transmit+0x306>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d013      	beq.n	8008f5a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f36:	881a      	ldrh	r2, [r3, #0]
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f40:	1c9a      	adds	r2, r3, #2
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b02      	subs	r3, #2
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f58:	e03c      	b.n	8008fd4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3320      	adds	r3, #32
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f84:	e026      	b.n	8008fd4 <HAL_SPI_Transmit+0x380>
 8008f86:	bf00      	nop
 8008f88:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f8c:	f7f9 feb4 	bl	8002cf8 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d803      	bhi.n	8008fa4 <HAL_SPI_Transmit+0x350>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d102      	bne.n	8008faa <HAL_SPI_Transmit+0x356>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d114      	bne.n	8008fd4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f844 	bl	8009038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e02c      	b.n	800902e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f47f af78 	bne.w	8008ed2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2108      	movs	r1, #8
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f8c3 	bl	8009178 <SPI_WaitOnFlagUntilTimeout>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d007      	beq.n	8009008 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ffe:	f043 0220 	orr.w	r2, r3, #32
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 f815 	bl	8009038 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800902c:	7efb      	ldrb	r3, [r7, #27]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop

08009038 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0208 	orr.w	r2, r2, #8
 8009056:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0210 	orr.w	r2, r2, #16
 8009066:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0201 	bic.w	r2, r2, #1
 8009076:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6919      	ldr	r1, [r3, #16]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	4b3c      	ldr	r3, [pc, #240]	; (8009174 <SPI_CloseTransfer+0x13c>)
 8009084:	400b      	ands	r3, r1
 8009086:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009096:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d014      	beq.n	80090ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00f      	beq.n	80090ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	699a      	ldr	r2, [r3, #24]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0220 	orr.w	r2, r2, #32
 80090cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d014      	beq.n	8009104 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00f      	beq.n	8009104 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ea:	f043 0204 	orr.w	r2, r3, #4
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009102:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00f      	beq.n	800912e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009114:	f043 0201 	orr.w	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699a      	ldr	r2, [r3, #24]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800912c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00f      	beq.n	8009158 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800913e:	f043 0208 	orr.w	r2, r3, #8
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	699a      	ldr	r2, [r3, #24]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009156:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009168:	bf00      	nop
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	fffffc90 	.word	0xfffffc90

08009178 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009188:	e010      	b.n	80091ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800918a:	f7f9 fdb5 	bl	8002cf8 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	429a      	cmp	r2, r3
 8009198:	d803      	bhi.n	80091a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d102      	bne.n	80091a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e00f      	b.n	80091cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695a      	ldr	r2, [r3, #20]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	4013      	ands	r3, r2
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	bf0c      	ite	eq
 80091bc:	2301      	moveq	r3, #1
 80091be:	2300      	movne	r3, #0
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	461a      	mov	r2, r3
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d0df      	beq.n	800918a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e0:	095b      	lsrs	r3, r3, #5
 80091e2:	3301      	adds	r3, #1
 80091e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	3307      	adds	r3, #7
 80091f2:	08db      	lsrs	r3, r3, #3
 80091f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e042      	b.n	80092a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f9 fb3e 	bl	80028b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2224      	movs	r2, #36	; 0x24
 8009238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0201 	bic.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fbeb 	bl	8009a28 <UART_SetConfig>
 8009252:	4603      	mov	r3, r0
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e022      	b.n	80092a2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 f947 	bl	800a4f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009278:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009288:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f042 0201 	orr.w	r2, r2, #1
 8009298:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 f9ce 	bl	800a63c <UART_CheckIdleState>
 80092a0:	4603      	mov	r3, r0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b0ba      	sub	sp, #232	; 0xe8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80092d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80092da:	4013      	ands	r3, r2
 80092dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80092e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d11b      	bne.n	8009320 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ec:	f003 0320 	and.w	r3, r3, #32
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d015      	beq.n	8009320 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d105      	bne.n	800930c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d009      	beq.n	8009320 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 835a 	beq.w	80099ca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
      }
      return;
 800931e:	e354      	b.n	80099ca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 811f 	beq.w	8009568 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800932a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800932e:	4b8b      	ldr	r3, [pc, #556]	; (800955c <HAL_UART_IRQHandler+0x2b0>)
 8009330:	4013      	ands	r3, r2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d106      	bne.n	8009344 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009336:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800933a:	4b89      	ldr	r3, [pc, #548]	; (8009560 <HAL_UART_IRQHandler+0x2b4>)
 800933c:	4013      	ands	r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 8112 	beq.w	8009568 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d011      	beq.n	8009374 <HAL_UART_IRQHandler+0xc8>
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2201      	movs	r2, #1
 8009362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936a:	f043 0201 	orr.w	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d011      	beq.n	80093a4 <HAL_UART_IRQHandler+0xf8>
 8009380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2202      	movs	r2, #2
 8009392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800939a:	f043 0204 	orr.w	r2, r3, #4
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d011      	beq.n	80093d4 <HAL_UART_IRQHandler+0x128>
 80093b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2204      	movs	r2, #4
 80093c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ca:	f043 0202 	orr.w	r2, r3, #2
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d017      	beq.n	8009410 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e4:	f003 0320 	and.w	r3, r3, #32
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d105      	bne.n	80093f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80093ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80093f0:	4b5a      	ldr	r3, [pc, #360]	; (800955c <HAL_UART_IRQHandler+0x2b0>)
 80093f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2208      	movs	r2, #8
 80093fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009406:	f043 0208 	orr.w	r2, r3, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009418:	2b00      	cmp	r3, #0
 800941a:	d012      	beq.n	8009442 <HAL_UART_IRQHandler+0x196>
 800941c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00c      	beq.n	8009442 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009438:	f043 0220 	orr.w	r2, r3, #32
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 82c0 	beq.w	80099ce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800944e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b00      	cmp	r3, #0
 8009458:	d013      	beq.n	8009482 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800945a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d105      	bne.n	8009472 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800946a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b40      	cmp	r3, #64	; 0x40
 8009498:	d005      	beq.n	80094a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800949a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800949e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d04f      	beq.n	8009546 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 f9dc 	bl	800a864 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d141      	bne.n	800953e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1d9      	bne.n	80094ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d013      	beq.n	8009536 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009512:	4a14      	ldr	r2, [pc, #80]	; (8009564 <HAL_UART_IRQHandler+0x2b8>)
 8009514:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951a:	4618      	mov	r0, r3
 800951c:	f7fa fbc6 	bl	8003cac <HAL_DMA_Abort_IT>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d017      	beq.n	8009556 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009534:	e00f      	b.n	8009556 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa60 	bl	80099fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953c:	e00b      	b.n	8009556 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa5c 	bl	80099fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009544:	e007      	b.n	8009556 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fa58 	bl	80099fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009554:	e23b      	b.n	80099ce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009556:	bf00      	nop
    return;
 8009558:	e239      	b.n	80099ce <HAL_UART_IRQHandler+0x722>
 800955a:	bf00      	nop
 800955c:	10000001 	.word	0x10000001
 8009560:	04000120 	.word	0x04000120
 8009564:	0800a931 	.word	0x0800a931

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956c:	2b01      	cmp	r3, #1
 800956e:	f040 81ce 	bne.w	800990e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 81c7 	beq.w	800990e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009584:	f003 0310 	and.w	r3, r3, #16
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 81c0 	beq.w	800990e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2210      	movs	r2, #16
 8009594:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a0:	2b40      	cmp	r3, #64	; 0x40
 80095a2:	f040 813b 	bne.w	800981c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a8b      	ldr	r2, [pc, #556]	; (80097dc <HAL_UART_IRQHandler+0x530>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d059      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a89      	ldr	r2, [pc, #548]	; (80097e0 <HAL_UART_IRQHandler+0x534>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d053      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a87      	ldr	r2, [pc, #540]	; (80097e4 <HAL_UART_IRQHandler+0x538>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d04d      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a85      	ldr	r2, [pc, #532]	; (80097e8 <HAL_UART_IRQHandler+0x53c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d047      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a83      	ldr	r2, [pc, #524]	; (80097ec <HAL_UART_IRQHandler+0x540>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d041      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a81      	ldr	r2, [pc, #516]	; (80097f0 <HAL_UART_IRQHandler+0x544>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d03b      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a7f      	ldr	r2, [pc, #508]	; (80097f4 <HAL_UART_IRQHandler+0x548>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d035      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a7d      	ldr	r2, [pc, #500]	; (80097f8 <HAL_UART_IRQHandler+0x54c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d02f      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a7b      	ldr	r2, [pc, #492]	; (80097fc <HAL_UART_IRQHandler+0x550>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d029      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a79      	ldr	r2, [pc, #484]	; (8009800 <HAL_UART_IRQHandler+0x554>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d023      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a77      	ldr	r2, [pc, #476]	; (8009804 <HAL_UART_IRQHandler+0x558>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d01d      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a75      	ldr	r2, [pc, #468]	; (8009808 <HAL_UART_IRQHandler+0x55c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d017      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a73      	ldr	r2, [pc, #460]	; (800980c <HAL_UART_IRQHandler+0x560>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d011      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a71      	ldr	r2, [pc, #452]	; (8009810 <HAL_UART_IRQHandler+0x564>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00b      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a6f      	ldr	r2, [pc, #444]	; (8009814 <HAL_UART_IRQHandler+0x568>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d005      	beq.n	8009666 <HAL_UART_IRQHandler+0x3ba>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a6d      	ldr	r2, [pc, #436]	; (8009818 <HAL_UART_IRQHandler+0x56c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d105      	bne.n	8009672 <HAL_UART_IRQHandler+0x3c6>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	b29b      	uxth	r3, r3
 8009670:	e004      	b.n	800967c <HAL_UART_IRQHandler+0x3d0>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	b29b      	uxth	r3, r3
 800967c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 81a4 	beq.w	80099d2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009690:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009694:	429a      	cmp	r2, r3
 8009696:	f080 819c 	bcs.w	80099d2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ae:	f000 8086 	beq.w	80097be <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80096e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80096f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1da      	bne.n	80096b2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3308      	adds	r3, #8
 8009702:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800970c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800970e:	f023 0301 	bic.w	r3, r3, #1
 8009712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3308      	adds	r3, #8
 800971c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009720:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009724:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009728:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e1      	bne.n	80096fc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	3308      	adds	r3, #8
 800973e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800974a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800974e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800975c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800975e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009762:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800976a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e3      	bne.n	8009738 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2220      	movs	r2, #32
 8009774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800978c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800978e:	f023 0310 	bic.w	r3, r3, #16
 8009792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80097a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e4      	bne.n	800977e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7f9 ff59 	bl	8003670 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f91c 	bl	8009a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097d8:	e0fb      	b.n	80099d2 <HAL_UART_IRQHandler+0x726>
 80097da:	bf00      	nop
 80097dc:	40020010 	.word	0x40020010
 80097e0:	40020028 	.word	0x40020028
 80097e4:	40020040 	.word	0x40020040
 80097e8:	40020058 	.word	0x40020058
 80097ec:	40020070 	.word	0x40020070
 80097f0:	40020088 	.word	0x40020088
 80097f4:	400200a0 	.word	0x400200a0
 80097f8:	400200b8 	.word	0x400200b8
 80097fc:	40020410 	.word	0x40020410
 8009800:	40020428 	.word	0x40020428
 8009804:	40020440 	.word	0x40020440
 8009808:	40020458 	.word	0x40020458
 800980c:	40020470 	.word	0x40020470
 8009810:	40020488 	.word	0x40020488
 8009814:	400204a0 	.word	0x400204a0
 8009818:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009828:	b29b      	uxth	r3, r3
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009836:	b29b      	uxth	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80cc 	beq.w	80099d6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800983e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 80c7 	beq.w	80099d6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800985c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800986a:	647b      	str	r3, [r7, #68]	; 0x44
 800986c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e4      	bne.n	8009848 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3308      	adds	r3, #8
 8009884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	623b      	str	r3, [r7, #32]
   return(result);
 800988e:	6a3a      	ldr	r2, [r7, #32]
 8009890:	4b54      	ldr	r3, [pc, #336]	; (80099e4 <HAL_UART_IRQHandler+0x738>)
 8009892:	4013      	ands	r3, r2
 8009894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3308      	adds	r3, #8
 800989e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098a2:	633a      	str	r2, [r7, #48]	; 0x30
 80098a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e3      	bne.n	800987e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2220      	movs	r2, #32
 80098ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0310 	bic.w	r3, r3, #16
 80098de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098ec:	61fb      	str	r3, [r7, #28]
 80098ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	69b9      	ldr	r1, [r7, #24]
 80098f2:	69fa      	ldr	r2, [r7, #28]
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	617b      	str	r3, [r7, #20]
   return(result);
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e4      	bne.n	80098ca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f882 	bl	8009a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800990c:	e063      	b.n	80099d6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800990e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00e      	beq.n	8009938 <HAL_UART_IRQHandler+0x68c>
 800991a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800991e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d008      	beq.n	8009938 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800992e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 f83e 	bl	800a9b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009936:	e051      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009940:	2b00      	cmp	r3, #0
 8009942:	d014      	beq.n	800996e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	2b00      	cmp	r3, #0
 800994e:	d105      	bne.n	800995c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009958:	2b00      	cmp	r3, #0
 800995a:	d008      	beq.n	800996e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009960:	2b00      	cmp	r3, #0
 8009962:	d03a      	beq.n	80099da <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	4798      	blx	r3
    }
    return;
 800996c:	e035      	b.n	80099da <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800996e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009976:	2b00      	cmp	r3, #0
 8009978:	d009      	beq.n	800998e <HAL_UART_IRQHandler+0x6e2>
 800997a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800997e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 ffe8 	bl	800a95c <UART_EndTransmit_IT>
    return;
 800998c:	e026      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d009      	beq.n	80099ae <HAL_UART_IRQHandler+0x702>
 800999a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 f817 	bl	800a9da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ac:	e016      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80099ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <HAL_UART_IRQHandler+0x730>
 80099ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	da0c      	bge.n	80099dc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 ffff 	bl	800a9c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099c8:	e008      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
      return;
 80099ca:	bf00      	nop
 80099cc:	e006      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
    return;
 80099ce:	bf00      	nop
 80099d0:	e004      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
      return;
 80099d2:	bf00      	nop
 80099d4:	e002      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
      return;
 80099d6:	bf00      	nop
 80099d8:	e000      	b.n	80099dc <HAL_UART_IRQHandler+0x730>
    return;
 80099da:	bf00      	nop
  }
}
 80099dc:	37e8      	adds	r7, #232	; 0xe8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	effffffe 	.word	0xeffffffe

080099e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a2c:	b092      	sub	sp, #72	; 0x48
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	431a      	orrs	r2, r3
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4bbe      	ldr	r3, [pc, #760]	; (8009d50 <UART_SetConfig+0x328>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a60:	430b      	orrs	r3, r1
 8009a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4ab3      	ldr	r2, [pc, #716]	; (8009d54 <UART_SetConfig+0x32c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a90:	4313      	orrs	r3, r2
 8009a92:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689a      	ldr	r2, [r3, #8]
 8009a9a:	4baf      	ldr	r3, [pc, #700]	; (8009d58 <UART_SetConfig+0x330>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	6812      	ldr	r2, [r2, #0]
 8009aa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aae:	f023 010f 	bic.w	r1, r3, #15
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4aa6      	ldr	r2, [pc, #664]	; (8009d5c <UART_SetConfig+0x334>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d177      	bne.n	8009bb8 <UART_SetConfig+0x190>
 8009ac8:	4ba5      	ldr	r3, [pc, #660]	; (8009d60 <UART_SetConfig+0x338>)
 8009aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad0:	2b28      	cmp	r3, #40	; 0x28
 8009ad2:	d86d      	bhi.n	8009bb0 <UART_SetConfig+0x188>
 8009ad4:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <UART_SetConfig+0xb4>)
 8009ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ada:	bf00      	nop
 8009adc:	08009b81 	.word	0x08009b81
 8009ae0:	08009bb1 	.word	0x08009bb1
 8009ae4:	08009bb1 	.word	0x08009bb1
 8009ae8:	08009bb1 	.word	0x08009bb1
 8009aec:	08009bb1 	.word	0x08009bb1
 8009af0:	08009bb1 	.word	0x08009bb1
 8009af4:	08009bb1 	.word	0x08009bb1
 8009af8:	08009bb1 	.word	0x08009bb1
 8009afc:	08009b89 	.word	0x08009b89
 8009b00:	08009bb1 	.word	0x08009bb1
 8009b04:	08009bb1 	.word	0x08009bb1
 8009b08:	08009bb1 	.word	0x08009bb1
 8009b0c:	08009bb1 	.word	0x08009bb1
 8009b10:	08009bb1 	.word	0x08009bb1
 8009b14:	08009bb1 	.word	0x08009bb1
 8009b18:	08009bb1 	.word	0x08009bb1
 8009b1c:	08009b91 	.word	0x08009b91
 8009b20:	08009bb1 	.word	0x08009bb1
 8009b24:	08009bb1 	.word	0x08009bb1
 8009b28:	08009bb1 	.word	0x08009bb1
 8009b2c:	08009bb1 	.word	0x08009bb1
 8009b30:	08009bb1 	.word	0x08009bb1
 8009b34:	08009bb1 	.word	0x08009bb1
 8009b38:	08009bb1 	.word	0x08009bb1
 8009b3c:	08009b99 	.word	0x08009b99
 8009b40:	08009bb1 	.word	0x08009bb1
 8009b44:	08009bb1 	.word	0x08009bb1
 8009b48:	08009bb1 	.word	0x08009bb1
 8009b4c:	08009bb1 	.word	0x08009bb1
 8009b50:	08009bb1 	.word	0x08009bb1
 8009b54:	08009bb1 	.word	0x08009bb1
 8009b58:	08009bb1 	.word	0x08009bb1
 8009b5c:	08009ba1 	.word	0x08009ba1
 8009b60:	08009bb1 	.word	0x08009bb1
 8009b64:	08009bb1 	.word	0x08009bb1
 8009b68:	08009bb1 	.word	0x08009bb1
 8009b6c:	08009bb1 	.word	0x08009bb1
 8009b70:	08009bb1 	.word	0x08009bb1
 8009b74:	08009bb1 	.word	0x08009bb1
 8009b78:	08009bb1 	.word	0x08009bb1
 8009b7c:	08009ba9 	.word	0x08009ba9
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e222      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8e:	e21e      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009b90:	2308      	movs	r3, #8
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b96:	e21a      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009b98:	2310      	movs	r3, #16
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9e:	e216      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ba0:	2320      	movs	r3, #32
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba6:	e212      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ba8:	2340      	movs	r3, #64	; 0x40
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bae:	e20e      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009bb0:	2380      	movs	r3, #128	; 0x80
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb6:	e20a      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a69      	ldr	r2, [pc, #420]	; (8009d64 <UART_SetConfig+0x33c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d130      	bne.n	8009c24 <UART_SetConfig+0x1fc>
 8009bc2:	4b67      	ldr	r3, [pc, #412]	; (8009d60 <UART_SetConfig+0x338>)
 8009bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b05      	cmp	r3, #5
 8009bcc:	d826      	bhi.n	8009c1c <UART_SetConfig+0x1f4>
 8009bce:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <UART_SetConfig+0x1ac>)
 8009bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd4:	08009bed 	.word	0x08009bed
 8009bd8:	08009bf5 	.word	0x08009bf5
 8009bdc:	08009bfd 	.word	0x08009bfd
 8009be0:	08009c05 	.word	0x08009c05
 8009be4:	08009c0d 	.word	0x08009c0d
 8009be8:	08009c15 	.word	0x08009c15
 8009bec:	2300      	movs	r3, #0
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e1ec      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e1e8      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e1e4      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c04:	2310      	movs	r3, #16
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0a:	e1e0      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c0c:	2320      	movs	r3, #32
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c12:	e1dc      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1a:	e1d8      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c22:	e1d4      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a4f      	ldr	r2, [pc, #316]	; (8009d68 <UART_SetConfig+0x340>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d130      	bne.n	8009c90 <UART_SetConfig+0x268>
 8009c2e:	4b4c      	ldr	r3, [pc, #304]	; (8009d60 <UART_SetConfig+0x338>)
 8009c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	2b05      	cmp	r3, #5
 8009c38:	d826      	bhi.n	8009c88 <UART_SetConfig+0x260>
 8009c3a:	a201      	add	r2, pc, #4	; (adr r2, 8009c40 <UART_SetConfig+0x218>)
 8009c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c40:	08009c59 	.word	0x08009c59
 8009c44:	08009c61 	.word	0x08009c61
 8009c48:	08009c69 	.word	0x08009c69
 8009c4c:	08009c71 	.word	0x08009c71
 8009c50:	08009c79 	.word	0x08009c79
 8009c54:	08009c81 	.word	0x08009c81
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e1b6      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c60:	2304      	movs	r3, #4
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c66:	e1b2      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c68:	2308      	movs	r3, #8
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6e:	e1ae      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c70:	2310      	movs	r3, #16
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c76:	e1aa      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c78:	2320      	movs	r3, #32
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7e:	e1a6      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c80:	2340      	movs	r3, #64	; 0x40
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c86:	e1a2      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c88:	2380      	movs	r3, #128	; 0x80
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8e:	e19e      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a35      	ldr	r2, [pc, #212]	; (8009d6c <UART_SetConfig+0x344>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d130      	bne.n	8009cfc <UART_SetConfig+0x2d4>
 8009c9a:	4b31      	ldr	r3, [pc, #196]	; (8009d60 <UART_SetConfig+0x338>)
 8009c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9e:	f003 0307 	and.w	r3, r3, #7
 8009ca2:	2b05      	cmp	r3, #5
 8009ca4:	d826      	bhi.n	8009cf4 <UART_SetConfig+0x2cc>
 8009ca6:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <UART_SetConfig+0x284>)
 8009ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cac:	08009cc5 	.word	0x08009cc5
 8009cb0:	08009ccd 	.word	0x08009ccd
 8009cb4:	08009cd5 	.word	0x08009cd5
 8009cb8:	08009cdd 	.word	0x08009cdd
 8009cbc:	08009ce5 	.word	0x08009ce5
 8009cc0:	08009ced 	.word	0x08009ced
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e180      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ccc:	2304      	movs	r3, #4
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e17c      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cda:	e178      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce2:	e174      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ce4:	2320      	movs	r3, #32
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e170      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009cec:	2340      	movs	r3, #64	; 0x40
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e16c      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009cf4:	2380      	movs	r3, #128	; 0x80
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfa:	e168      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a1b      	ldr	r2, [pc, #108]	; (8009d70 <UART_SetConfig+0x348>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d142      	bne.n	8009d8c <UART_SetConfig+0x364>
 8009d06:	4b16      	ldr	r3, [pc, #88]	; (8009d60 <UART_SetConfig+0x338>)
 8009d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	2b05      	cmp	r3, #5
 8009d10:	d838      	bhi.n	8009d84 <UART_SetConfig+0x35c>
 8009d12:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <UART_SetConfig+0x2f0>)
 8009d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d18:	08009d31 	.word	0x08009d31
 8009d1c:	08009d39 	.word	0x08009d39
 8009d20:	08009d41 	.word	0x08009d41
 8009d24:	08009d49 	.word	0x08009d49
 8009d28:	08009d75 	.word	0x08009d75
 8009d2c:	08009d7d 	.word	0x08009d7d
 8009d30:	2300      	movs	r3, #0
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d36:	e14a      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009d38:	2304      	movs	r3, #4
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3e:	e146      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009d40:	2308      	movs	r3, #8
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d46:	e142      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009d48:	2310      	movs	r3, #16
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4e:	e13e      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009d50:	cfff69f3 	.word	0xcfff69f3
 8009d54:	58000c00 	.word	0x58000c00
 8009d58:	11fff4ff 	.word	0x11fff4ff
 8009d5c:	40011000 	.word	0x40011000
 8009d60:	58024400 	.word	0x58024400
 8009d64:	40004400 	.word	0x40004400
 8009d68:	40004800 	.word	0x40004800
 8009d6c:	40004c00 	.word	0x40004c00
 8009d70:	40005000 	.word	0x40005000
 8009d74:	2320      	movs	r3, #32
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7a:	e128      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009d7c:	2340      	movs	r3, #64	; 0x40
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d82:	e124      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009d84:	2380      	movs	r3, #128	; 0x80
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8a:	e120      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4acb      	ldr	r2, [pc, #812]	; (800a0c0 <UART_SetConfig+0x698>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d176      	bne.n	8009e84 <UART_SetConfig+0x45c>
 8009d96:	4bcb      	ldr	r3, [pc, #812]	; (800a0c4 <UART_SetConfig+0x69c>)
 8009d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d9e:	2b28      	cmp	r3, #40	; 0x28
 8009da0:	d86c      	bhi.n	8009e7c <UART_SetConfig+0x454>
 8009da2:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <UART_SetConfig+0x380>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009e4d 	.word	0x08009e4d
 8009dac:	08009e7d 	.word	0x08009e7d
 8009db0:	08009e7d 	.word	0x08009e7d
 8009db4:	08009e7d 	.word	0x08009e7d
 8009db8:	08009e7d 	.word	0x08009e7d
 8009dbc:	08009e7d 	.word	0x08009e7d
 8009dc0:	08009e7d 	.word	0x08009e7d
 8009dc4:	08009e7d 	.word	0x08009e7d
 8009dc8:	08009e55 	.word	0x08009e55
 8009dcc:	08009e7d 	.word	0x08009e7d
 8009dd0:	08009e7d 	.word	0x08009e7d
 8009dd4:	08009e7d 	.word	0x08009e7d
 8009dd8:	08009e7d 	.word	0x08009e7d
 8009ddc:	08009e7d 	.word	0x08009e7d
 8009de0:	08009e7d 	.word	0x08009e7d
 8009de4:	08009e7d 	.word	0x08009e7d
 8009de8:	08009e5d 	.word	0x08009e5d
 8009dec:	08009e7d 	.word	0x08009e7d
 8009df0:	08009e7d 	.word	0x08009e7d
 8009df4:	08009e7d 	.word	0x08009e7d
 8009df8:	08009e7d 	.word	0x08009e7d
 8009dfc:	08009e7d 	.word	0x08009e7d
 8009e00:	08009e7d 	.word	0x08009e7d
 8009e04:	08009e7d 	.word	0x08009e7d
 8009e08:	08009e65 	.word	0x08009e65
 8009e0c:	08009e7d 	.word	0x08009e7d
 8009e10:	08009e7d 	.word	0x08009e7d
 8009e14:	08009e7d 	.word	0x08009e7d
 8009e18:	08009e7d 	.word	0x08009e7d
 8009e1c:	08009e7d 	.word	0x08009e7d
 8009e20:	08009e7d 	.word	0x08009e7d
 8009e24:	08009e7d 	.word	0x08009e7d
 8009e28:	08009e6d 	.word	0x08009e6d
 8009e2c:	08009e7d 	.word	0x08009e7d
 8009e30:	08009e7d 	.word	0x08009e7d
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009e7d 	.word	0x08009e7d
 8009e3c:	08009e7d 	.word	0x08009e7d
 8009e40:	08009e7d 	.word	0x08009e7d
 8009e44:	08009e7d 	.word	0x08009e7d
 8009e48:	08009e75 	.word	0x08009e75
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e0bc      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009e54:	2304      	movs	r3, #4
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5a:	e0b8      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e62:	e0b4      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009e64:	2310      	movs	r3, #16
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6a:	e0b0      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009e6c:	2320      	movs	r3, #32
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e72:	e0ac      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009e74:	2340      	movs	r3, #64	; 0x40
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7a:	e0a8      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009e7c:	2380      	movs	r3, #128	; 0x80
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e82:	e0a4      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a8f      	ldr	r2, [pc, #572]	; (800a0c8 <UART_SetConfig+0x6a0>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d130      	bne.n	8009ef0 <UART_SetConfig+0x4c8>
 8009e8e:	4b8d      	ldr	r3, [pc, #564]	; (800a0c4 <UART_SetConfig+0x69c>)
 8009e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d826      	bhi.n	8009ee8 <UART_SetConfig+0x4c0>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <UART_SetConfig+0x478>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009eb9 	.word	0x08009eb9
 8009ea4:	08009ec1 	.word	0x08009ec1
 8009ea8:	08009ec9 	.word	0x08009ec9
 8009eac:	08009ed1 	.word	0x08009ed1
 8009eb0:	08009ed9 	.word	0x08009ed9
 8009eb4:	08009ee1 	.word	0x08009ee1
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e086      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ec0:	2304      	movs	r3, #4
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec6:	e082      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ec8:	2308      	movs	r3, #8
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ece:	e07e      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed6:	e07a      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ed8:	2320      	movs	r3, #32
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ede:	e076      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ee0:	2340      	movs	r3, #64	; 0x40
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee6:	e072      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ee8:	2380      	movs	r3, #128	; 0x80
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eee:	e06e      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a75      	ldr	r2, [pc, #468]	; (800a0cc <UART_SetConfig+0x6a4>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d130      	bne.n	8009f5c <UART_SetConfig+0x534>
 8009efa:	4b72      	ldr	r3, [pc, #456]	; (800a0c4 <UART_SetConfig+0x69c>)
 8009efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	2b05      	cmp	r3, #5
 8009f04:	d826      	bhi.n	8009f54 <UART_SetConfig+0x52c>
 8009f06:	a201      	add	r2, pc, #4	; (adr r2, 8009f0c <UART_SetConfig+0x4e4>)
 8009f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0c:	08009f25 	.word	0x08009f25
 8009f10:	08009f2d 	.word	0x08009f2d
 8009f14:	08009f35 	.word	0x08009f35
 8009f18:	08009f3d 	.word	0x08009f3d
 8009f1c:	08009f45 	.word	0x08009f45
 8009f20:	08009f4d 	.word	0x08009f4d
 8009f24:	2300      	movs	r3, #0
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e050      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f2c:	2304      	movs	r3, #4
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f32:	e04c      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f34:	2308      	movs	r3, #8
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3a:	e048      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f42:	e044      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f44:	2320      	movs	r3, #32
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4a:	e040      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f4c:	2340      	movs	r3, #64	; 0x40
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f52:	e03c      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f54:	2380      	movs	r3, #128	; 0x80
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5a:	e038      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a5b      	ldr	r2, [pc, #364]	; (800a0d0 <UART_SetConfig+0x6a8>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d130      	bne.n	8009fc8 <UART_SetConfig+0x5a0>
 8009f66:	4b57      	ldr	r3, [pc, #348]	; (800a0c4 <UART_SetConfig+0x69c>)
 8009f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6a:	f003 0307 	and.w	r3, r3, #7
 8009f6e:	2b05      	cmp	r3, #5
 8009f70:	d826      	bhi.n	8009fc0 <UART_SetConfig+0x598>
 8009f72:	a201      	add	r2, pc, #4	; (adr r2, 8009f78 <UART_SetConfig+0x550>)
 8009f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009f99 	.word	0x08009f99
 8009f80:	08009fa1 	.word	0x08009fa1
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fb1 	.word	0x08009fb1
 8009f8c:	08009fb9 	.word	0x08009fb9
 8009f90:	2302      	movs	r3, #2
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e01a      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009f98:	2304      	movs	r3, #4
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9e:	e016      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa6:	e012      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fae:	e00e      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e00a      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e006      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e002      	b.n	8009fce <UART_SetConfig+0x5a6>
 8009fc8:	2380      	movs	r3, #128	; 0x80
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a3f      	ldr	r2, [pc, #252]	; (800a0d0 <UART_SetConfig+0x6a8>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	f040 80f8 	bne.w	800a1ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	dc46      	bgt.n	800a070 <UART_SetConfig+0x648>
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	f2c0 8082 	blt.w	800a0ec <UART_SetConfig+0x6c4>
 8009fe8:	3b02      	subs	r3, #2
 8009fea:	2b1e      	cmp	r3, #30
 8009fec:	d87e      	bhi.n	800a0ec <UART_SetConfig+0x6c4>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x5cc>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a077 	.word	0x0800a077
 8009ff8:	0800a0ed 	.word	0x0800a0ed
 8009ffc:	0800a07f 	.word	0x0800a07f
 800a000:	0800a0ed 	.word	0x0800a0ed
 800a004:	0800a0ed 	.word	0x0800a0ed
 800a008:	0800a0ed 	.word	0x0800a0ed
 800a00c:	0800a08f 	.word	0x0800a08f
 800a010:	0800a0ed 	.word	0x0800a0ed
 800a014:	0800a0ed 	.word	0x0800a0ed
 800a018:	0800a0ed 	.word	0x0800a0ed
 800a01c:	0800a0ed 	.word	0x0800a0ed
 800a020:	0800a0ed 	.word	0x0800a0ed
 800a024:	0800a0ed 	.word	0x0800a0ed
 800a028:	0800a0ed 	.word	0x0800a0ed
 800a02c:	0800a09f 	.word	0x0800a09f
 800a030:	0800a0ed 	.word	0x0800a0ed
 800a034:	0800a0ed 	.word	0x0800a0ed
 800a038:	0800a0ed 	.word	0x0800a0ed
 800a03c:	0800a0ed 	.word	0x0800a0ed
 800a040:	0800a0ed 	.word	0x0800a0ed
 800a044:	0800a0ed 	.word	0x0800a0ed
 800a048:	0800a0ed 	.word	0x0800a0ed
 800a04c:	0800a0ed 	.word	0x0800a0ed
 800a050:	0800a0ed 	.word	0x0800a0ed
 800a054:	0800a0ed 	.word	0x0800a0ed
 800a058:	0800a0ed 	.word	0x0800a0ed
 800a05c:	0800a0ed 	.word	0x0800a0ed
 800a060:	0800a0ed 	.word	0x0800a0ed
 800a064:	0800a0ed 	.word	0x0800a0ed
 800a068:	0800a0ed 	.word	0x0800a0ed
 800a06c:	0800a0df 	.word	0x0800a0df
 800a070:	2b40      	cmp	r3, #64	; 0x40
 800a072:	d037      	beq.n	800a0e4 <UART_SetConfig+0x6bc>
 800a074:	e03a      	b.n	800a0ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a076:	f7fe f8c5 	bl	8008204 <HAL_RCCEx_GetD3PCLK1Freq>
 800a07a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a07c:	e03c      	b.n	800a0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe f8d4 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a08c:	e034      	b.n	800a0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08e:	f107 0318 	add.w	r3, r7, #24
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fa20 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a09c:	e02c      	b.n	800a0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a09e:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <UART_SetConfig+0x69c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d016      	beq.n	800a0d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0aa:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <UART_SetConfig+0x69c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	08db      	lsrs	r3, r3, #3
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	4a07      	ldr	r2, [pc, #28]	; (800a0d4 <UART_SetConfig+0x6ac>)
 800a0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0bc:	e01c      	b.n	800a0f8 <UART_SetConfig+0x6d0>
 800a0be:	bf00      	nop
 800a0c0:	40011400 	.word	0x40011400
 800a0c4:	58024400 	.word	0x58024400
 800a0c8:	40007800 	.word	0x40007800
 800a0cc:	40007c00 	.word	0x40007c00
 800a0d0:	58000c00 	.word	0x58000c00
 800a0d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a0d8:	4b9d      	ldr	r3, [pc, #628]	; (800a350 <UART_SetConfig+0x928>)
 800a0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0dc:	e00c      	b.n	800a0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0de:	4b9d      	ldr	r3, [pc, #628]	; (800a354 <UART_SetConfig+0x92c>)
 800a0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e2:	e009      	b.n	800a0f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ea:	e005      	b.n	800a0f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 81de 	beq.w	800a4bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	4a94      	ldr	r2, [pc, #592]	; (800a358 <UART_SetConfig+0x930>)
 800a106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a10a:	461a      	mov	r2, r3
 800a10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a112:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	4613      	mov	r3, r2
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	4413      	add	r3, r2
 800a11e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a120:	429a      	cmp	r2, r3
 800a122:	d305      	bcc.n	800a130 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d903      	bls.n	800a138 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a136:	e1c1      	b.n	800a4bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13a:	2200      	movs	r2, #0
 800a13c:	60bb      	str	r3, [r7, #8]
 800a13e:	60fa      	str	r2, [r7, #12]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	4a84      	ldr	r2, [pc, #528]	; (800a358 <UART_SetConfig+0x930>)
 800a146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	2200      	movs	r2, #0
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a15a:	f7f6 f8bd 	bl	80002d8 <__aeabi_uldivmod>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4610      	mov	r0, r2
 800a164:	4619      	mov	r1, r3
 800a166:	f04f 0200 	mov.w	r2, #0
 800a16a:	f04f 0300 	mov.w	r3, #0
 800a16e:	020b      	lsls	r3, r1, #8
 800a170:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a174:	0202      	lsls	r2, r0, #8
 800a176:	6979      	ldr	r1, [r7, #20]
 800a178:	6849      	ldr	r1, [r1, #4]
 800a17a:	0849      	lsrs	r1, r1, #1
 800a17c:	2000      	movs	r0, #0
 800a17e:	460c      	mov	r4, r1
 800a180:	4605      	mov	r5, r0
 800a182:	eb12 0804 	adds.w	r8, r2, r4
 800a186:	eb43 0905 	adc.w	r9, r3, r5
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	469a      	mov	sl, r3
 800a192:	4693      	mov	fp, r2
 800a194:	4652      	mov	r2, sl
 800a196:	465b      	mov	r3, fp
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	f7f6 f89c 	bl	80002d8 <__aeabi_uldivmod>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ae:	d308      	bcc.n	800a1c2 <UART_SetConfig+0x79a>
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b6:	d204      	bcs.n	800a1c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1be:	60da      	str	r2, [r3, #12]
 800a1c0:	e17c      	b.n	800a4bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1c8:	e178      	b.n	800a4bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d2:	f040 80c5 	bne.w	800a360 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a1d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1da:	2b20      	cmp	r3, #32
 800a1dc:	dc48      	bgt.n	800a270 <UART_SetConfig+0x848>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	db7b      	blt.n	800a2da <UART_SetConfig+0x8b2>
 800a1e2:	2b20      	cmp	r3, #32
 800a1e4:	d879      	bhi.n	800a2da <UART_SetConfig+0x8b2>
 800a1e6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <UART_SetConfig+0x7c4>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a277 	.word	0x0800a277
 800a1f0:	0800a27f 	.word	0x0800a27f
 800a1f4:	0800a2db 	.word	0x0800a2db
 800a1f8:	0800a2db 	.word	0x0800a2db
 800a1fc:	0800a287 	.word	0x0800a287
 800a200:	0800a2db 	.word	0x0800a2db
 800a204:	0800a2db 	.word	0x0800a2db
 800a208:	0800a2db 	.word	0x0800a2db
 800a20c:	0800a297 	.word	0x0800a297
 800a210:	0800a2db 	.word	0x0800a2db
 800a214:	0800a2db 	.word	0x0800a2db
 800a218:	0800a2db 	.word	0x0800a2db
 800a21c:	0800a2db 	.word	0x0800a2db
 800a220:	0800a2db 	.word	0x0800a2db
 800a224:	0800a2db 	.word	0x0800a2db
 800a228:	0800a2db 	.word	0x0800a2db
 800a22c:	0800a2a7 	.word	0x0800a2a7
 800a230:	0800a2db 	.word	0x0800a2db
 800a234:	0800a2db 	.word	0x0800a2db
 800a238:	0800a2db 	.word	0x0800a2db
 800a23c:	0800a2db 	.word	0x0800a2db
 800a240:	0800a2db 	.word	0x0800a2db
 800a244:	0800a2db 	.word	0x0800a2db
 800a248:	0800a2db 	.word	0x0800a2db
 800a24c:	0800a2db 	.word	0x0800a2db
 800a250:	0800a2db 	.word	0x0800a2db
 800a254:	0800a2db 	.word	0x0800a2db
 800a258:	0800a2db 	.word	0x0800a2db
 800a25c:	0800a2db 	.word	0x0800a2db
 800a260:	0800a2db 	.word	0x0800a2db
 800a264:	0800a2db 	.word	0x0800a2db
 800a268:	0800a2db 	.word	0x0800a2db
 800a26c:	0800a2cd 	.word	0x0800a2cd
 800a270:	2b40      	cmp	r3, #64	; 0x40
 800a272:	d02e      	beq.n	800a2d2 <UART_SetConfig+0x8aa>
 800a274:	e031      	b.n	800a2da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a276:	f7fd f853 	bl	8007320 <HAL_RCC_GetPCLK1Freq>
 800a27a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a27c:	e033      	b.n	800a2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a27e:	f7fd f865 	bl	800734c <HAL_RCC_GetPCLK2Freq>
 800a282:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a284:	e02f      	b.n	800a2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fd ffd0 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a294:	e027      	b.n	800a2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a296:	f107 0318 	add.w	r3, r7, #24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe f91c 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a4:	e01f      	b.n	800a2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a6:	4b2d      	ldr	r3, [pc, #180]	; (800a35c <UART_SetConfig+0x934>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d009      	beq.n	800a2c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2b2:	4b2a      	ldr	r3, [pc, #168]	; (800a35c <UART_SetConfig+0x934>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	08db      	lsrs	r3, r3, #3
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	4a24      	ldr	r2, [pc, #144]	; (800a350 <UART_SetConfig+0x928>)
 800a2be:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c4:	e00f      	b.n	800a2e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a2c6:	4b22      	ldr	r3, [pc, #136]	; (800a350 <UART_SetConfig+0x928>)
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ca:	e00c      	b.n	800a2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2cc:	4b21      	ldr	r3, [pc, #132]	; (800a354 <UART_SetConfig+0x92c>)
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d0:	e009      	b.n	800a2e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d8:	e005      	b.n	800a2e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 80e7 	beq.w	800a4bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	4a19      	ldr	r2, [pc, #100]	; (800a358 <UART_SetConfig+0x930>)
 800a2f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a300:	005a      	lsls	r2, r3, #1
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	441a      	add	r2, r3
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a312:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	2b0f      	cmp	r3, #15
 800a318:	d916      	bls.n	800a348 <UART_SetConfig+0x920>
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a320:	d212      	bcs.n	800a348 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	b29b      	uxth	r3, r3
 800a326:	f023 030f 	bic.w	r3, r3, #15
 800a32a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	085b      	lsrs	r3, r3, #1
 800a330:	b29b      	uxth	r3, r3
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	b29a      	uxth	r2, r3
 800a338:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a33a:	4313      	orrs	r3, r2
 800a33c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a344:	60da      	str	r2, [r3, #12]
 800a346:	e0b9      	b.n	800a4bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a34e:	e0b5      	b.n	800a4bc <UART_SetConfig+0xa94>
 800a350:	03d09000 	.word	0x03d09000
 800a354:	003d0900 	.word	0x003d0900
 800a358:	0800b308 	.word	0x0800b308
 800a35c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a360:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a364:	2b20      	cmp	r3, #32
 800a366:	dc49      	bgt.n	800a3fc <UART_SetConfig+0x9d4>
 800a368:	2b00      	cmp	r3, #0
 800a36a:	db7c      	blt.n	800a466 <UART_SetConfig+0xa3e>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d87a      	bhi.n	800a466 <UART_SetConfig+0xa3e>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <UART_SetConfig+0x950>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a403 	.word	0x0800a403
 800a37c:	0800a40b 	.word	0x0800a40b
 800a380:	0800a467 	.word	0x0800a467
 800a384:	0800a467 	.word	0x0800a467
 800a388:	0800a413 	.word	0x0800a413
 800a38c:	0800a467 	.word	0x0800a467
 800a390:	0800a467 	.word	0x0800a467
 800a394:	0800a467 	.word	0x0800a467
 800a398:	0800a423 	.word	0x0800a423
 800a39c:	0800a467 	.word	0x0800a467
 800a3a0:	0800a467 	.word	0x0800a467
 800a3a4:	0800a467 	.word	0x0800a467
 800a3a8:	0800a467 	.word	0x0800a467
 800a3ac:	0800a467 	.word	0x0800a467
 800a3b0:	0800a467 	.word	0x0800a467
 800a3b4:	0800a467 	.word	0x0800a467
 800a3b8:	0800a433 	.word	0x0800a433
 800a3bc:	0800a467 	.word	0x0800a467
 800a3c0:	0800a467 	.word	0x0800a467
 800a3c4:	0800a467 	.word	0x0800a467
 800a3c8:	0800a467 	.word	0x0800a467
 800a3cc:	0800a467 	.word	0x0800a467
 800a3d0:	0800a467 	.word	0x0800a467
 800a3d4:	0800a467 	.word	0x0800a467
 800a3d8:	0800a467 	.word	0x0800a467
 800a3dc:	0800a467 	.word	0x0800a467
 800a3e0:	0800a467 	.word	0x0800a467
 800a3e4:	0800a467 	.word	0x0800a467
 800a3e8:	0800a467 	.word	0x0800a467
 800a3ec:	0800a467 	.word	0x0800a467
 800a3f0:	0800a467 	.word	0x0800a467
 800a3f4:	0800a467 	.word	0x0800a467
 800a3f8:	0800a459 	.word	0x0800a459
 800a3fc:	2b40      	cmp	r3, #64	; 0x40
 800a3fe:	d02e      	beq.n	800a45e <UART_SetConfig+0xa36>
 800a400:	e031      	b.n	800a466 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a402:	f7fc ff8d 	bl	8007320 <HAL_RCC_GetPCLK1Freq>
 800a406:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a408:	e033      	b.n	800a472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a40a:	f7fc ff9f 	bl	800734c <HAL_RCC_GetPCLK2Freq>
 800a40e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a410:	e02f      	b.n	800a472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a416:	4618      	mov	r0, r3
 800a418:	f7fd ff0a 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a420:	e027      	b.n	800a472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a422:	f107 0318 	add.w	r3, r7, #24
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe f856 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a430:	e01f      	b.n	800a472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a432:	4b2d      	ldr	r3, [pc, #180]	; (800a4e8 <UART_SetConfig+0xac0>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d009      	beq.n	800a452 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a43e:	4b2a      	ldr	r3, [pc, #168]	; (800a4e8 <UART_SetConfig+0xac0>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	08db      	lsrs	r3, r3, #3
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	4a28      	ldr	r2, [pc, #160]	; (800a4ec <UART_SetConfig+0xac4>)
 800a44a:	fa22 f303 	lsr.w	r3, r2, r3
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a450:	e00f      	b.n	800a472 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a452:	4b26      	ldr	r3, [pc, #152]	; (800a4ec <UART_SetConfig+0xac4>)
 800a454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a456:	e00c      	b.n	800a472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a458:	4b25      	ldr	r3, [pc, #148]	; (800a4f0 <UART_SetConfig+0xac8>)
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a45c:	e009      	b.n	800a472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a45e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a464:	e005      	b.n	800a472 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a466:	2300      	movs	r3, #0
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a470:	bf00      	nop
    }

    if (pclk != 0U)
 800a472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a474:	2b00      	cmp	r3, #0
 800a476:	d021      	beq.n	800a4bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	4a1d      	ldr	r2, [pc, #116]	; (800a4f4 <UART_SetConfig+0xacc>)
 800a47e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a482:	461a      	mov	r2, r3
 800a484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a486:	fbb3 f2f2 	udiv	r2, r3, r2
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	441a      	add	r2, r3
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	2b0f      	cmp	r3, #15
 800a4a0:	d909      	bls.n	800a4b6 <UART_SetConfig+0xa8e>
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a8:	d205      	bcs.n	800a4b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	60da      	str	r2, [r3, #12]
 800a4b4:	e002      	b.n	800a4bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a4d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3748      	adds	r7, #72	; 0x48
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4e6:	bf00      	nop
 800a4e8:	58024400 	.word	0x58024400
 800a4ec:	03d09000 	.word	0x03d09000
 800a4f0:	003d0900 	.word	0x003d0900
 800a4f4:	0800b308 	.word	0x0800b308

0800a4f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00a      	beq.n	800a522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00a      	beq.n	800a566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	f003 0308 	and.w	r3, r3, #8
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	430a      	orrs	r2, r1
 800a586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01a      	beq.n	800a60e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5f6:	d10a      	bne.n	800a60e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	605a      	str	r2, [r3, #4]
  }
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af02      	add	r7, sp, #8
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a64c:	f7f8 fb54 	bl	8002cf8 <HAL_GetTick>
 800a650:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0308 	and.w	r3, r3, #8
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d10e      	bne.n	800a67e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f82f 	bl	800a6d2 <UART_WaitOnFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e025      	b.n	800a6ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b04      	cmp	r3, #4
 800a68a:	d10e      	bne.n	800a6aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a68c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f819 	bl	800a6d2 <UART_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e00f      	b.n	800a6ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b09c      	sub	sp, #112	; 0x70
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60f8      	str	r0, [r7, #12]
 800a6da:	60b9      	str	r1, [r7, #8]
 800a6dc:	603b      	str	r3, [r7, #0]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e2:	e0a9      	b.n	800a838 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ea:	f000 80a5 	beq.w	800a838 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ee:	f7f8 fb03 	bl	8002cf8 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d302      	bcc.n	800a704 <UART_WaitOnFlagUntilTimeout+0x32>
 800a6fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a700:	2b00      	cmp	r3, #0
 800a702:	d140      	bne.n	800a786 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a70c:	e853 3f00 	ldrex	r3, [r3]
 800a710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a718:	667b      	str	r3, [r7, #100]	; 0x64
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a722:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a724:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a72a:	e841 2300 	strex	r3, r2, [r1]
 800a72e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1e6      	bne.n	800a704 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a740:	e853 3f00 	ldrex	r3, [r3]
 800a744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	f023 0301 	bic.w	r3, r3, #1
 800a74c:	663b      	str	r3, [r7, #96]	; 0x60
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3308      	adds	r3, #8
 800a754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a756:	64ba      	str	r2, [r7, #72]	; 0x48
 800a758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a75c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e5      	bne.n	800a736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e069      	b.n	800a85a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d051      	beq.n	800a838 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a79e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a2:	d149      	bne.n	800a838 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d4:	e841 2300 	strex	r3, r2, [r1]
 800a7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e6      	bne.n	800a7ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	e853 3f00 	ldrex	r3, [r3]
 800a7ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f023 0301 	bic.w	r3, r3, #1
 800a7f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a800:	623a      	str	r2, [r7, #32]
 800a802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a804:	69f9      	ldr	r1, [r7, #28]
 800a806:	6a3a      	ldr	r2, [r7, #32]
 800a808:	e841 2300 	strex	r3, r2, [r1]
 800a80c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1e5      	bne.n	800a7e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2220      	movs	r2, #32
 800a818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2220      	movs	r2, #32
 800a820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2220      	movs	r2, #32
 800a828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e010      	b.n	800a85a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	69da      	ldr	r2, [r3, #28]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	4013      	ands	r3, r2
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	429a      	cmp	r2, r3
 800a846:	bf0c      	ite	eq
 800a848:	2301      	moveq	r3, #1
 800a84a:	2300      	movne	r3, #0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	461a      	mov	r2, r3
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	429a      	cmp	r2, r3
 800a854:	f43f af46 	beq.w	800a6e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3770      	adds	r7, #112	; 0x70
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
	...

0800a864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a864:	b480      	push	{r7}
 800a866:	b095      	sub	sp, #84	; 0x54
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a880:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a88a:	643b      	str	r3, [r7, #64]	; 0x40
 800a88c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e6      	bne.n	800a86c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ae:	69fa      	ldr	r2, [r7, #28]
 800a8b0:	4b1e      	ldr	r3, [pc, #120]	; (800a92c <UART_EndRxTransfer+0xc8>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e5      	bne.n	800a89e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d118      	bne.n	800a90c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f023 0310 	bic.w	r3, r3, #16
 800a8ee:	647b      	str	r3, [r7, #68]	; 0x44
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f8:	61bb      	str	r3, [r7, #24]
 800a8fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fc:	6979      	ldr	r1, [r7, #20]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	e841 2300 	strex	r3, r2, [r1]
 800a904:	613b      	str	r3, [r7, #16]
   return(result);
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e6      	bne.n	800a8da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2220      	movs	r2, #32
 800a910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a920:	bf00      	nop
 800a922:	3754      	adds	r7, #84	; 0x54
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	effffffe 	.word	0xeffffffe

0800a930 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7ff f854 	bl	80099fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b088      	sub	sp, #32
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	e853 3f00 	ldrex	r3, [r3]
 800a970:	60bb      	str	r3, [r7, #8]
   return(result);
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a978:	61fb      	str	r3, [r7, #28]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	61bb      	str	r3, [r7, #24]
 800a984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a986:	6979      	ldr	r1, [r7, #20]
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	e841 2300 	strex	r3, r2, [r1]
 800a98e:	613b      	str	r3, [r7, #16]
   return(result);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1e6      	bne.n	800a964 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2220      	movs	r2, #32
 800a99a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff f81f 	bl	80099e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9aa:	bf00      	nop
 800a9ac:	3720      	adds	r7, #32
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a9e2:	bf00      	nop
 800a9e4:	370c      	adds	r7, #12
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e027      	b.n	800aa54 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2224      	movs	r2, #36	; 0x24
 800aa10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 0201 	bic.w	r2, r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d101      	bne.n	800aa78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa74:	2302      	movs	r3, #2
 800aa76:	e02d      	b.n	800aad4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2224      	movs	r2, #36	; 0x24
 800aa84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0201 	bic.w	r2, r2, #1
 800aa9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	430a      	orrs	r2, r1
 800aab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f84f 	bl	800ab58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e02d      	b.n	800ab50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2224      	movs	r2, #36	; 0x24
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0201 	bic.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f811 	bl	800ab58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2220      	movs	r2, #32
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d108      	bne.n	800ab7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab78:	e031      	b.n	800abde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab7a:	2310      	movs	r3, #16
 800ab7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab7e:	2310      	movs	r3, #16
 800ab80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	0e5b      	lsrs	r3, r3, #25
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	f003 0307 	and.w	r3, r3, #7
 800ab90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	0f5b      	lsrs	r3, r3, #29
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	7b3a      	ldrb	r2, [r7, #12]
 800aba6:	4911      	ldr	r1, [pc, #68]	; (800abec <UARTEx_SetNbDataToProcess+0x94>)
 800aba8:	5c8a      	ldrb	r2, [r1, r2]
 800abaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abae:	7b3a      	ldrb	r2, [r7, #12]
 800abb0:	490f      	ldr	r1, [pc, #60]	; (800abf0 <UARTEx_SetNbDataToProcess+0x98>)
 800abb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800abb8:	b29a      	uxth	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	7b7a      	ldrb	r2, [r7, #13]
 800abc4:	4909      	ldr	r1, [pc, #36]	; (800abec <UARTEx_SetNbDataToProcess+0x94>)
 800abc6:	5c8a      	ldrb	r2, [r1, r2]
 800abc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abcc:	7b7a      	ldrb	r2, [r7, #13]
 800abce:	4908      	ldr	r1, [pc, #32]	; (800abf0 <UARTEx_SetNbDataToProcess+0x98>)
 800abd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800abde:	bf00      	nop
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	0800b320 	.word	0x0800b320
 800abf0:	0800b328 	.word	0x0800b328

0800abf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abf4:	b084      	sub	sp, #16
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	f107 001c 	add.w	r0, r7, #28
 800ac02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d120      	bne.n	800ac4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68da      	ldr	r2, [r3, #12]
 800ac1c:	4b2a      	ldr	r3, [pc, #168]	; (800acc8 <USB_CoreInit+0xd4>)
 800ac1e:	4013      	ands	r3, r2
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ac30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d105      	bne.n	800ac42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 faac 	bl	800b1a0 <USB_CoreReset>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73fb      	strb	r3, [r7, #15]
 800ac4c:	e01a      	b.n	800ac84 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 faa0 	bl	800b1a0 <USB_CoreReset>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ac64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38
 800ac76:	e005      	b.n	800ac84 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d116      	bne.n	800acb8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac98:	4b0c      	ldr	r3, [pc, #48]	; (800accc <USB_CoreInit+0xd8>)
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f043 0206 	orr.w	r2, r3, #6
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f043 0220 	orr.w	r2, r3, #32
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acc4:	b004      	add	sp, #16
 800acc6:	4770      	bx	lr
 800acc8:	ffbdffbf 	.word	0xffbdffbf
 800accc:	03ee0000 	.word	0x03ee0000

0800acd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f023 0201 	bic.w	r2, r3, #1
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d115      	bne.n	800ad40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad20:	2001      	movs	r0, #1
 800ad22:	f7f7 fff5 	bl	8002d10 <HAL_Delay>
      ms++;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fa29 	bl	800b184 <USB_GetMode>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d01e      	beq.n	800ad76 <USB_SetCurrentMode+0x84>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b31      	cmp	r3, #49	; 0x31
 800ad3c:	d9f0      	bls.n	800ad20 <USB_SetCurrentMode+0x2e>
 800ad3e:	e01a      	b.n	800ad76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d115      	bne.n	800ad72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad52:	2001      	movs	r0, #1
 800ad54:	f7f7 ffdc 	bl	8002d10 <HAL_Delay>
      ms++;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa10 	bl	800b184 <USB_GetMode>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <USB_SetCurrentMode+0x84>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b31      	cmp	r3, #49	; 0x31
 800ad6e:	d9f0      	bls.n	800ad52 <USB_SetCurrentMode+0x60>
 800ad70:	e001      	b.n	800ad76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e005      	b.n	800ad82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b32      	cmp	r3, #50	; 0x32
 800ad7a:	d101      	bne.n	800ad80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e000      	b.n	800ad82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b086      	sub	sp, #24
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ad9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ada6:	2300      	movs	r3, #0
 800ada8:	613b      	str	r3, [r7, #16]
 800adaa:	e009      	b.n	800adc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	3340      	adds	r3, #64	; 0x40
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	2200      	movs	r2, #0
 800adb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	3301      	adds	r3, #1
 800adbe:	613b      	str	r3, [r7, #16]
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2b0e      	cmp	r3, #14
 800adc4:	d9f2      	bls.n	800adac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800adc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d11c      	bne.n	800ae06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adda:	f043 0302 	orr.w	r3, r3, #2
 800adde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e005      	b.n	800ae12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae18:	461a      	mov	r2, r3
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae24:	4619      	mov	r1, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	680b      	ldr	r3, [r1, #0]
 800ae30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d10c      	bne.n	800ae52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d104      	bne.n	800ae48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae3e:	2100      	movs	r1, #0
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f965 	bl	800b110 <USB_SetDevSpeed>
 800ae46:	e008      	b.n	800ae5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae48:	2101      	movs	r1, #1
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f960 	bl	800b110 <USB_SetDevSpeed>
 800ae50:	e003      	b.n	800ae5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae52:	2103      	movs	r1, #3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f95b 	bl	800b110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae5a:	2110      	movs	r1, #16
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f8f3 	bl	800b048 <USB_FlushTxFifo>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f91f 	bl	800b0b0 <USB_FlushRxFifo>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae82:	461a      	mov	r2, r3
 800ae84:	2300      	movs	r3, #0
 800ae86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8e:	461a      	mov	r2, r3
 800ae90:	2300      	movs	r3, #0
 800ae92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aea0:	2300      	movs	r3, #0
 800aea2:	613b      	str	r3, [r7, #16]
 800aea4:	e043      	b.n	800af2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	015a      	lsls	r2, r3, #5
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aebc:	d118      	bne.n	800aef0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10a      	bne.n	800aeda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed0:	461a      	mov	r2, r3
 800aed2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	e013      	b.n	800af02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee6:	461a      	mov	r2, r3
 800aee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	e008      	b.n	800af02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefc:	461a      	mov	r2, r3
 800aefe:	2300      	movs	r3, #0
 800af00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	015a      	lsls	r2, r3, #5
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	4413      	add	r3, r2
 800af0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0e:	461a      	mov	r2, r3
 800af10:	2300      	movs	r3, #0
 800af12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af20:	461a      	mov	r2, r3
 800af22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	3301      	adds	r3, #1
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	429a      	cmp	r2, r3
 800af34:	d3b7      	bcc.n	800aea6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af36:	2300      	movs	r3, #0
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	e043      	b.n	800afc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af52:	d118      	bne.n	800af86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10a      	bne.n	800af70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	4413      	add	r3, r2
 800af62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af66:	461a      	mov	r2, r3
 800af68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	e013      	b.n	800af98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7c:	461a      	mov	r2, r3
 800af7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af82:	6013      	str	r3, [r2, #0]
 800af84:	e008      	b.n	800af98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af92:	461a      	mov	r2, r3
 800af94:	2300      	movs	r3, #0
 800af96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	461a      	mov	r2, r3
 800afa6:	2300      	movs	r3, #0
 800afa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	015a      	lsls	r2, r3, #5
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	4413      	add	r3, r2
 800afb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb6:	461a      	mov	r2, r3
 800afb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800afbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	3301      	adds	r3, #1
 800afc2:	613b      	str	r3, [r7, #16]
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d3b7      	bcc.n	800af3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800afec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d105      	bne.n	800b000 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	f043 0210 	orr.w	r2, r3, #16
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	699a      	ldr	r2, [r3, #24]
 800b004:	4b0e      	ldr	r3, [pc, #56]	; (800b040 <USB_DevInit+0x2b4>)
 800b006:	4313      	orrs	r3, r2
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	f043 0208 	orr.w	r2, r3, #8
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b020:	2b01      	cmp	r3, #1
 800b022:	d105      	bne.n	800b030 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	699a      	ldr	r2, [r3, #24]
 800b028:	4b06      	ldr	r3, [pc, #24]	; (800b044 <USB_DevInit+0x2b8>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b030:	7dfb      	ldrb	r3, [r7, #23]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b03c:	b004      	add	sp, #16
 800b03e:	4770      	bx	lr
 800b040:	803c3800 	.word	0x803c3800
 800b044:	40000004 	.word	0x40000004

0800b048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3301      	adds	r3, #1
 800b05a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4a13      	ldr	r2, [pc, #76]	; (800b0ac <USB_FlushTxFifo+0x64>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d901      	bls.n	800b068 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e01b      	b.n	800b0a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	daf2      	bge.n	800b056 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	019b      	lsls	r3, r3, #6
 800b078:	f043 0220 	orr.w	r2, r3, #32
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3301      	adds	r3, #1
 800b084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	4a08      	ldr	r2, [pc, #32]	; (800b0ac <USB_FlushTxFifo+0x64>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d901      	bls.n	800b092 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b08e:	2303      	movs	r3, #3
 800b090:	e006      	b.n	800b0a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	f003 0320 	and.w	r3, r3, #32
 800b09a:	2b20      	cmp	r3, #32
 800b09c:	d0f0      	beq.n	800b080 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	00030d40 	.word	0x00030d40

0800b0b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	4a11      	ldr	r2, [pc, #68]	; (800b10c <USB_FlushRxFifo+0x5c>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d901      	bls.n	800b0ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e018      	b.n	800b100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	daf2      	bge.n	800b0bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2210      	movs	r2, #16
 800b0de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4a08      	ldr	r2, [pc, #32]	; (800b10c <USB_FlushRxFifo+0x5c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d901      	bls.n	800b0f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e006      	b.n	800b100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	f003 0310 	and.w	r3, r3, #16
 800b0fa:	2b10      	cmp	r3, #16
 800b0fc:	d0f0      	beq.n	800b0e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	00030d40 	.word	0x00030d40

0800b110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b130:	4313      	orrs	r3, r2
 800b132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3714      	adds	r7, #20
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b15c:	f023 0303 	bic.w	r3, r3, #3
 800b160:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b170:	f043 0302 	orr.w	r3, r3, #2
 800b174:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	f003 0301 	and.w	r3, r3, #1
}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4a13      	ldr	r2, [pc, #76]	; (800b204 <USB_CoreReset+0x64>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d901      	bls.n	800b1be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e01b      	b.n	800b1f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	daf2      	bge.n	800b1ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	f043 0201 	orr.w	r2, r3, #1
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4a09      	ldr	r2, [pc, #36]	; (800b204 <USB_CoreReset+0x64>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d901      	bls.n	800b1e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e006      	b.n	800b1f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d0f0      	beq.n	800b1d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	00030d40 	.word	0x00030d40

0800b208 <__libc_init_array>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	4d0d      	ldr	r5, [pc, #52]	; (800b240 <__libc_init_array+0x38>)
 800b20c:	4c0d      	ldr	r4, [pc, #52]	; (800b244 <__libc_init_array+0x3c>)
 800b20e:	1b64      	subs	r4, r4, r5
 800b210:	10a4      	asrs	r4, r4, #2
 800b212:	2600      	movs	r6, #0
 800b214:	42a6      	cmp	r6, r4
 800b216:	d109      	bne.n	800b22c <__libc_init_array+0x24>
 800b218:	4d0b      	ldr	r5, [pc, #44]	; (800b248 <__libc_init_array+0x40>)
 800b21a:	4c0c      	ldr	r4, [pc, #48]	; (800b24c <__libc_init_array+0x44>)
 800b21c:	f000 f820 	bl	800b260 <_init>
 800b220:	1b64      	subs	r4, r4, r5
 800b222:	10a4      	asrs	r4, r4, #2
 800b224:	2600      	movs	r6, #0
 800b226:	42a6      	cmp	r6, r4
 800b228:	d105      	bne.n	800b236 <__libc_init_array+0x2e>
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b230:	4798      	blx	r3
 800b232:	3601      	adds	r6, #1
 800b234:	e7ee      	b.n	800b214 <__libc_init_array+0xc>
 800b236:	f855 3b04 	ldr.w	r3, [r5], #4
 800b23a:	4798      	blx	r3
 800b23c:	3601      	adds	r6, #1
 800b23e:	e7f2      	b.n	800b226 <__libc_init_array+0x1e>
 800b240:	0800b338 	.word	0x0800b338
 800b244:	0800b338 	.word	0x0800b338
 800b248:	0800b338 	.word	0x0800b338
 800b24c:	0800b33c 	.word	0x0800b33c

0800b250 <memset>:
 800b250:	4402      	add	r2, r0
 800b252:	4603      	mov	r3, r0
 800b254:	4293      	cmp	r3, r2
 800b256:	d100      	bne.n	800b25a <memset+0xa>
 800b258:	4770      	bx	lr
 800b25a:	f803 1b01 	strb.w	r1, [r3], #1
 800b25e:	e7f9      	b.n	800b254 <memset+0x4>

0800b260 <_init>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr

0800b26c <_fini>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr
