
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c270  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016f0  0800c510  0800c510  0001c510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc00  0800dc00  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc00  0800dc00  0001dc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc08  0800dc08  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc08  0800dc08  0001dc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc0c  0800dc0c  0001dc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800dc10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800dc94  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800dcf4  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c88  24000144  0800dd54  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000dcc  0800dd54  00020dcc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fdc8  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003694  00000000  00000000  0003ff3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001490  00000000  00000000  000435d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013a8  00000000  00000000  00044a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c561  00000000  00000000  00045e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c668  00000000  00000000  00082369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001873f1  00000000  00000000  0009e9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00225dc2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005b04  00000000  00000000  00225e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c4f8 	.word	0x0800c4f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800c4f8 	.word	0x0800c4f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	3318      	adds	r3, #24
 800077e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d17f      	bne.n	800089c <Player_Reading_Card+0x148>
	{

		for (int i  = 0;  i < 6; ++i) {
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	e00f      	b.n	80007c2 <Player_Reading_Card+0x6e>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d103      	bne.n	80007b6 <Player_Reading_Card+0x62>
				flag_played = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 80007b4:	e008      	b.n	80007c8 <Player_Reading_Card+0x74>
			}
			ptrYugiohCard_played++;
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	3310      	adds	r3, #16
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	3301      	adds	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	2b05      	cmp	r3, #5
 80007c6:	ddec      	ble.n	80007a2 <Player_Reading_Card+0x4e>
		}

		if (player->turnSignature == first && flag_played == 0) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d12f      	bne.n	8000832 <Player_Reading_Card+0xde>
 80007d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d12b      	bne.n	8000832 <Player_Reading_Card+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	799b      	ldrb	r3, [r3, #6]
 80007de:	2b05      	cmp	r3, #5
 80007e0:	d85c      	bhi.n	800089c <Player_Reading_Card+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f8df 	bl	80009a6 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80007e8:	6939      	ldr	r1, [r7, #16]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff4a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	799a      	ldrb	r2, [r3, #6]
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <Player_Reading_Card+0x150>)
 80007f6:	fba3 1302 	umull	r1, r3, r3, r2
 80007fa:	0899      	lsrs	r1, r3, #2
 80007fc:	460b      	mov	r3, r1
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	b2da      	uxtb	r2, r3
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2200      	movs	r2, #0
 8000810:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	2201      	movs	r2, #1
 8000816:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000818:	69b8      	ldr	r0, [r7, #24]
 800081a:	f7ff ff7f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	2200      	movs	r2, #0
 8000822:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000830:	e034      	b.n	800089c <Player_Reading_Card+0x148>
			}

		}
		else if (player->turnSignature == second && flag_played == 0) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000838:	2b01      	cmp	r3, #1
 800083a:	d12f      	bne.n	800089c <Player_Reading_Card+0x148>
 800083c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000840:	2b00      	cmp	r3, #0
 8000842:	d12b      	bne.n	800089c <Player_Reading_Card+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	799b      	ldrb	r3, [r3, #6]
 8000848:	2b05      	cmp	r3, #5
 800084a:	d927      	bls.n	800089c <Player_Reading_Card+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f8aa 	bl	80009a6 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000852:	6939      	ldr	r1, [r7, #16]
 8000854:	6978      	ldr	r0, [r7, #20]
 8000856:	f7ff ff15 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	799a      	ldrb	r2, [r3, #6]
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <Player_Reading_Card+0x150>)
 8000860:	fba3 1302 	umull	r1, r3, r3, r2
 8000864:	0899      	lsrs	r1, r3, #2
 8000866:	460b      	mov	r3, r1
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	440b      	add	r3, r1
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	2200      	movs	r2, #0
 800087a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	2201      	movs	r2, #1
 8000880:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000882:	69b8      	ldr	r0, [r7, #24]
 8000884:	f7ff ff4a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	2200      	movs	r2, #0
 800088c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 800089a:	e7ff      	b.n	800089c <Player_Reading_Card+0x148>
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	aaaaaaab 	.word	0xaaaaaaab

080008a8 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80008c4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	76fb      	strb	r3, [r7, #27]
 80008ca:	e00b      	b.n	80008e4 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	69f9      	ldr	r1, [r7, #28]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fed6 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	3310      	adds	r3, #16
 80008dc:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80008de:	7efb      	ldrb	r3, [r7, #27]
 80008e0:	3301      	adds	r3, #1
 80008e2:	76fb      	strb	r3, [r7, #27]
 80008e4:	7efb      	ldrb	r3, [r7, #27]
 80008e6:	2b05      	cmp	r3, #5
 80008e8:	d9f0      	bls.n	80008cc <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000910:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000912:	2300      	movs	r3, #0
 8000914:	76fb      	strb	r3, [r7, #27]
 8000916:	e00b      	b.n	8000930 <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	69f9      	ldr	r1, [r7, #28]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff feb0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	3310      	adds	r3, #16
 8000928:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800092a:	7efb      	ldrb	r3, [r7, #27]
 800092c:	3301      	adds	r3, #1
 800092e:	76fb      	strb	r3, [r7, #27]
 8000930:	7efb      	ldrb	r3, [r7, #27]
 8000932:	2b05      	cmp	r3, #5
 8000934:	d9f0      	bls.n	8000918 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3368      	adds	r3, #104	; 0x68
 800093a:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 800093c:	2300      	movs	r3, #0
 800093e:	76bb      	strb	r3, [r7, #26]
 8000940:	e00b      	b.n	800095a <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	69f9      	ldr	r1, [r7, #28]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fe9b 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3310      	adds	r3, #16
 8000952:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000954:	7ebb      	ldrb	r3, [r7, #26]
 8000956:	3301      	adds	r3, #1
 8000958:	76bb      	strb	r3, [r7, #26]
 800095a:	7ebb      	ldrb	r3, [r7, #26]
 800095c:	2b13      	cmp	r3, #19
 800095e:	d9f0      	bls.n	8000942 <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3308      	adds	r3, #8
 8000964:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000966:	2300      	movs	r3, #0
 8000968:	767b      	strb	r3, [r7, #25]
 800096a:	e00b      	b.n	8000984 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	69f9      	ldr	r1, [r7, #28]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe86 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	3310      	adds	r3, #16
 800097c:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800097e:	7e7b      	ldrb	r3, [r7, #25]
 8000980:	3301      	adds	r3, #1
 8000982:	767b      	strb	r3, [r7, #25]
 8000984:	7e7b      	ldrb	r3, [r7, #25]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d9f0      	bls.n	800096c <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000990:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	69f9      	ldr	r1, [r7, #28]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe73 	bl	8000684 <YUGIOH_card_copy>
}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009b4:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80009bc:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009c4:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80009cc:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80009ce:	2306      	movs	r3, #6
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e00c      	b.n	80009ee <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80009d4:	6939      	ldr	r1, [r7, #16]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fe54 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3b10      	subs	r3, #16
 80009e0:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	3b10      	subs	r3, #16
 80009e6:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dcef      	bgt.n	80009d4 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b08a      	sub	sp, #40	; 0x28
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3368      	adds	r3, #104	; 0x68
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3368      	adds	r3, #104	; 0x68
 8000a28:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000a30:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a32:	2314      	movs	r3, #20
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	e00c      	b.n	8000a52 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a38:	6a39      	ldr	r1, [r7, #32]
 8000a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a3c:	f7ff fe22 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	3b10      	subs	r3, #16
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	3b10      	subs	r3, #16
 8000a4a:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	dcef      	bgt.n	8000a38 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3368      	adds	r3, #104	; 0x68
 8000a60:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a62:	6a39      	ldr	r1, [r7, #32]
 8000a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a66:	f7ff fe0d 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8000a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a72:	6a38      	ldr	r0, [r7, #32]
 8000a74:	f7ff fe06 	bl	8000684 <YUGIOH_card_copy>

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	3304      	adds	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000aa2:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->displayNSS = 1;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	48ab      	ldr	r0, [pc, #684]	; (8000d60 <GAME_PLAY_Management+0x2e0>)
 8000ab4:	f005 ff52 	bl	800695c <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	48a8      	ldr	r0, [pc, #672]	; (8000d64 <GAME_PLAY_Management+0x2e4>)
 8000ac4:	f005 ff4a 	bl	800695c <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	48a3      	ldr	r0, [pc, #652]	; (8000d60 <GAME_PLAY_Management+0x2e0>)
 8000ad4:	f005 ff42 	bl	800695c <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae4:	48a0      	ldr	r0, [pc, #640]	; (8000d68 <GAME_PLAY_Management+0x2e8>)
 8000ae6:	f005 ff39 	bl	800695c <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000af8:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3304      	adds	r3, #4
 8000afe:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3304      	adds	r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	f200 8271 	bhi.w	8000ff0 <GAME_PLAY_Management+0x570>
 8000b0e:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <GAME_PLAY_Management+0x94>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b29 	.word	0x08000b29
 8000b18:	08000d9d 	.word	0x08000d9d
 8000b1c:	08000f0b 	.word	0x08000f0b
 8000b20:	08000f7d 	.word	0x08000f7d
 8000b24:	08000fef 	.word	0x08000fef
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b28:	4b90      	ldr	r3, [pc, #576]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	9202      	str	r2, [sp, #8]
 8000b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b32:	9201      	str	r2, [sp, #4]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	9200      	str	r2, [sp, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a8d      	ldr	r2, [pc, #564]	; (8000d70 <GAME_PLAY_Management+0x2f0>)
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	2005      	movs	r0, #5
 8000b40:	f001 ff7b 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b44:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	9202      	str	r2, [sp, #8]
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	9201      	str	r2, [sp, #4]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	9200      	str	r2, [sp, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a87      	ldr	r2, [pc, #540]	; (8000d74 <GAME_PLAY_Management+0x2f4>)
 8000b58:	210f      	movs	r1, #15
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f001 ff6d 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b60:	4b85      	ldr	r3, [pc, #532]	; (8000d78 <GAME_PLAY_Management+0x2f8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	9202      	str	r2, [sp, #8]
 8000b66:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b6a:	9201      	str	r2, [sp, #4]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	9200      	str	r2, [sp, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a82      	ldr	r2, [pc, #520]	; (8000d7c <GAME_PLAY_Management+0x2fc>)
 8000b74:	2123      	movs	r1, #35	; 0x23
 8000b76:	2008      	movs	r0, #8
 8000b78:	f001 ff5f 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b7c:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <GAME_PLAY_Management+0x2f8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	9202      	str	r2, [sp, #8]
 8000b82:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	9200      	str	r2, [sp, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a7c      	ldr	r2, [pc, #496]	; (8000d80 <GAME_PLAY_Management+0x300>)
 8000b90:	213c      	movs	r1, #60	; 0x3c
 8000b92:	2019      	movs	r0, #25
 8000b94:	f001 ff51 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b98:	4b74      	ldr	r3, [pc, #464]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	9202      	str	r2, [sp, #8]
 8000b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba2:	9201      	str	r2, [sp, #4]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	9200      	str	r2, [sp, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a72      	ldr	r2, [pc, #456]	; (8000d74 <GAME_PLAY_Management+0x2f4>)
 8000bac:	214b      	movs	r1, #75	; 0x4b
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f001 ff43 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bb4:	4b6d      	ldr	r3, [pc, #436]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	9202      	str	r2, [sp, #8]
 8000bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	9200      	str	r2, [sp, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a6f      	ldr	r2, [pc, #444]	; (8000d84 <GAME_PLAY_Management+0x304>)
 8000bc8:	215a      	movs	r1, #90	; 0x5a
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f001 ff35 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000bd0:	4b66      	ldr	r3, [pc, #408]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	9202      	str	r2, [sp, #8]
 8000bd6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bda:	9201      	str	r2, [sp, #4]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a69      	ldr	r2, [pc, #420]	; (8000d88 <GAME_PLAY_Management+0x308>)
 8000be4:	215a      	movs	r1, #90	; 0x5a
 8000be6:	205d      	movs	r0, #93	; 0x5d
 8000be8:	f001 ff27 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	9202      	str	r2, [sp, #8]
 8000bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf6:	9201      	str	r2, [sp, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	9200      	str	r2, [sp, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a63      	ldr	r2, [pc, #396]	; (8000d8c <GAME_PLAY_Management+0x30c>)
 8000c00:	2169      	movs	r1, #105	; 0x69
 8000c02:	2000      	movs	r0, #0
 8000c04:	f001 ff19 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	9202      	str	r2, [sp, #8]
 8000c0e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c12:	9201      	str	r2, [sp, #4]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	9200      	str	r2, [sp, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a5d      	ldr	r2, [pc, #372]	; (8000d90 <GAME_PLAY_Management+0x310>)
 8000c1c:	2169      	movs	r1, #105	; 0x69
 8000c1e:	2064      	movs	r0, #100	; 0x64
 8000c20:	f001 ff0b 	bl	8002a3a <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	9202      	str	r2, [sp, #8]
 8000c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	9200      	str	r2, [sp, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <GAME_PLAY_Management+0x314>)
 8000c38:	2105      	movs	r1, #5
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f001 ff47 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c40:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	9202      	str	r2, [sp, #8]
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	9201      	str	r2, [sp, #4]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	9200      	str	r2, [sp, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <GAME_PLAY_Management+0x2f4>)
 8000c54:	210f      	movs	r1, #15
 8000c56:	2000      	movs	r0, #0
 8000c58:	f001 ff39 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000c5c:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <GAME_PLAY_Management+0x2f8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	9202      	str	r2, [sp, #8]
 8000c62:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	9200      	str	r2, [sp, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <GAME_PLAY_Management+0x2fc>)
 8000c70:	2123      	movs	r1, #35	; 0x23
 8000c72:	2008      	movs	r0, #8
 8000c74:	f001 ff2b 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <GAME_PLAY_Management+0x2f8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	9202      	str	r2, [sp, #8]
 8000c7e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	9200      	str	r2, [sp, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a3d      	ldr	r2, [pc, #244]	; (8000d80 <GAME_PLAY_Management+0x300>)
 8000c8c:	213c      	movs	r1, #60	; 0x3c
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f001 ff1d 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c94:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	9202      	str	r2, [sp, #8]
 8000c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a33      	ldr	r2, [pc, #204]	; (8000d74 <GAME_PLAY_Management+0x2f4>)
 8000ca8:	214b      	movs	r1, #75	; 0x4b
 8000caa:	2000      	movs	r0, #0
 8000cac:	f001 ff0f 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	9202      	str	r2, [sp, #8]
 8000cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cba:	9201      	str	r2, [sp, #4]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	9200      	str	r2, [sp, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a30      	ldr	r2, [pc, #192]	; (8000d84 <GAME_PLAY_Management+0x304>)
 8000cc4:	215a      	movs	r1, #90	; 0x5a
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 ff01 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	9200      	str	r2, [sp, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a2a      	ldr	r2, [pc, #168]	; (8000d88 <GAME_PLAY_Management+0x308>)
 8000ce0:	215a      	movs	r1, #90	; 0x5a
 8000ce2:	205d      	movs	r0, #93	; 0x5d
 8000ce4:	f001 fef3 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ce8:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	9202      	str	r2, [sp, #8]
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <GAME_PLAY_Management+0x30c>)
 8000cfc:	2169      	movs	r1, #105	; 0x69
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f001 fee5 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <GAME_PLAY_Management+0x2ec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	9202      	str	r2, [sp, #8]
 8000d0a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <GAME_PLAY_Management+0x310>)
 8000d18:	2169      	movs	r1, #105	; 0x69
 8000d1a:	2064      	movs	r0, #100	; 0x64
 8000d1c:	f001 fed7 	bl	8002ace <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000d20:	2108      	movs	r1, #8
 8000d22:	481d      	ldr	r0, [pc, #116]	; (8000d98 <GAME_PLAY_Management+0x318>)
 8000d24:	f005 fe1a 	bl	800695c <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10a      	bne.n	8000d44 <GAME_PLAY_Management+0x2c4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f002 f8ea 	bl	8002f08 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f002 f8f8 	bl	8002f2a <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		{
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
		}
		break;
 8000d42:	e155      	b.n	8000ff0 <GAME_PLAY_Management+0x570>
			state_game->PlyerAction_State = PS_AFK;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
		break;
 8000d5c:	e148      	b.n	8000ff0 <GAME_PLAY_Management+0x570>
 8000d5e:	bf00      	nop
 8000d60:	58020800 	.word	0x58020800
 8000d64:	58020400 	.word	0x58020400
 8000d68:	58021400 	.word	0x58021400
 8000d6c:	24000008 	.word	0x24000008
 8000d70:	0800c510 	.word	0x0800c510
 8000d74:	0800c51c 	.word	0x0800c51c
 8000d78:	24000010 	.word	0x24000010
 8000d7c:	0800c530 	.word	0x0800c530
 8000d80:	0800c53c 	.word	0x0800c53c
 8000d84:	0800c544 	.word	0x0800c544
 8000d88:	0800c554 	.word	0x0800c554
 8000d8c:	0800c55c 	.word	0x0800c55c
 8000d90:	0800c56c 	.word	0x0800c56c
 8000d94:	0800c570 	.word	0x0800c570
 8000d98:	58020000 	.word	0x58020000
	case Game_init:

		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d9c:	4b96      	ldr	r3, [pc, #600]	; (8000ff8 <GAME_PLAY_Management+0x578>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	9202      	str	r2, [sp, #8]
 8000da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da6:	9201      	str	r2, [sp, #4]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a93      	ldr	r2, [pc, #588]	; (8000ffc <GAME_PLAY_Management+0x57c>)
 8000db0:	2105      	movs	r1, #5
 8000db2:	2005      	movs	r0, #5
 8000db4:	f001 fe41 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000db8:	4b8f      	ldr	r3, [pc, #572]	; (8000ff8 <GAME_PLAY_Management+0x578>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	9202      	str	r2, [sp, #8]
 8000dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc2:	9201      	str	r2, [sp, #4]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	9200      	str	r2, [sp, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a8d      	ldr	r2, [pc, #564]	; (8001000 <GAME_PLAY_Management+0x580>)
 8000dcc:	210f      	movs	r1, #15
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f001 fe33 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000dd4:	4b8b      	ldr	r3, [pc, #556]	; (8001004 <GAME_PLAY_Management+0x584>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	9202      	str	r2, [sp, #8]
 8000dda:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000dde:	9201      	str	r2, [sp, #4]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	9200      	str	r2, [sp, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a88      	ldr	r2, [pc, #544]	; (8001008 <GAME_PLAY_Management+0x588>)
 8000de8:	2123      	movs	r1, #35	; 0x23
 8000dea:	2019      	movs	r0, #25
 8000dec:	f001 fe25 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000df0:	4b84      	ldr	r3, [pc, #528]	; (8001004 <GAME_PLAY_Management+0x584>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	9202      	str	r2, [sp, #8]
 8000df6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dfa:	9201      	str	r2, [sp, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a82      	ldr	r2, [pc, #520]	; (800100c <GAME_PLAY_Management+0x58c>)
 8000e04:	213c      	movs	r1, #60	; 0x3c
 8000e06:	2021      	movs	r0, #33	; 0x21
 8000e08:	f001 fe17 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e0c:	4b7a      	ldr	r3, [pc, #488]	; (8000ff8 <GAME_PLAY_Management+0x578>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	9202      	str	r2, [sp, #8]
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a78      	ldr	r2, [pc, #480]	; (8001000 <GAME_PLAY_Management+0x580>)
 8000e20:	214b      	movs	r1, #75	; 0x4b
 8000e22:	2000      	movs	r0, #0
 8000e24:	f001 fe09 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e28:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <GAME_PLAY_Management+0x578>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	9202      	str	r2, [sp, #8]
 8000e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a75      	ldr	r2, [pc, #468]	; (8001010 <GAME_PLAY_Management+0x590>)
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2005      	movs	r0, #5
 8000e40:	f001 fe45 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e44:	4b6c      	ldr	r3, [pc, #432]	; (8000ff8 <GAME_PLAY_Management+0x578>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	9202      	str	r2, [sp, #8]
 8000e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a6a      	ldr	r2, [pc, #424]	; (8001000 <GAME_PLAY_Management+0x580>)
 8000e58:	210f      	movs	r1, #15
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f001 fe37 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000e60:	4b68      	ldr	r3, [pc, #416]	; (8001004 <GAME_PLAY_Management+0x584>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	9202      	str	r2, [sp, #8]
 8000e66:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000e6a:	9201      	str	r2, [sp, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a65      	ldr	r2, [pc, #404]	; (8001008 <GAME_PLAY_Management+0x588>)
 8000e74:	2123      	movs	r1, #35	; 0x23
 8000e76:	2019      	movs	r0, #25
 8000e78:	f001 fe29 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000e7c:	4b61      	ldr	r3, [pc, #388]	; (8001004 <GAME_PLAY_Management+0x584>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	9202      	str	r2, [sp, #8]
 8000e82:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e86:	9201      	str	r2, [sp, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	9200      	str	r2, [sp, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a61      	ldr	r2, [pc, #388]	; (8001014 <GAME_PLAY_Management+0x594>)
 8000e90:	213c      	movs	r1, #60	; 0x3c
 8000e92:	2025      	movs	r0, #37	; 0x25
 8000e94:	f001 fe1b 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e98:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <GAME_PLAY_Management+0x578>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	9202      	str	r2, [sp, #8]
 8000e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea2:	9201      	str	r2, [sp, #4]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a55      	ldr	r2, [pc, #340]	; (8001000 <GAME_PLAY_Management+0x580>)
 8000eac:	214b      	movs	r1, #75	; 0x4b
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f001 fe0d 	bl	8002ace <ST7735_WriteString1>
		HAL_Delay(3000);
 8000eb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eb8:	f002 fc02 	bl	80036c0 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f002 f823 	bl	8002f08 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f002 f831 	bl	8002f2a <ST7735_FillScreen1>
		MainGUI();
 8000ec8:	f000 feac 	bl	8001c24 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ed2:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000eda:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8000edc:	69f8      	ldr	r0, [r7, #28]
 8000ede:	f7ff fd09 	bl	80008f4 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8000ee2:	69b8      	ldr	r0, [r7, #24]
 8000ee4:	f7ff fd06 	bl	80008f4 <YUGIOH_Clear_Card_All>

		ptrPlayer1->turnSignature = first;
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		ptrPlayer2->turnSignature = second;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

		state_game->MainGame_State = first_player;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2202      	movs	r2, #2
 8000efc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8000f08:	e072      	b.n	8000ff0 <GAME_PLAY_Management+0x570>
	case first_player:
		if (state_game -> F_flag == 0){
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f893 3441 	ldrb.w	r3, [r3, #1089]	; 0x441
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d125      	bne.n	8000f60 <GAME_PLAY_Management+0x4e0>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <GAME_PLAY_Management+0x584>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	9202      	str	r2, [sp, #8]
 8000f1a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f1e:	9201      	str	r2, [sp, #4]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a3c      	ldr	r2, [pc, #240]	; (8001018 <GAME_PLAY_Management+0x598>)
 8000f28:	215a      	movs	r1, #90	; 0x5a
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f001 fdcf 	bl	8002ace <ST7735_WriteString1>
			HAL_Delay(2000);
 8000f30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f34:	f002 fbc4 	bl	80036c0 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2326      	movs	r3, #38	; 0x26
 8000f3e:	2280      	movs	r2, #128	; 0x80
 8000f40:	215a      	movs	r1, #90	; 0x5a
 8000f42:	2000      	movs	r0, #0
 8000f44:	f001 fee2 	bl	8002d0c <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f893 3441 	ldrb.w	r3, [r3, #1089]	; 0x441
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
			state_game->S_flag = 0;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
		}
		ptrPlayerAtk = &state_game->player[0];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	3304      	adds	r3, #4
 8000f64:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f6c:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	6839      	ldr	r1, [r7, #0]
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f851 	bl	800101c <GAME_PLAY_Phase_Management>
		break;
 8000f7a:	e039      	b.n	8000ff0 <GAME_PLAY_Management+0x570>
	case second_player:
		if (state_game -> S_flag == 0){
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f893 3442 	ldrb.w	r3, [r3, #1090]	; 0x442
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d125      	bne.n	8000fd2 <GAME_PLAY_Management+0x552>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <GAME_PLAY_Management+0x584>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9202      	str	r2, [sp, #8]
 8000f8c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f90:	9201      	str	r2, [sp, #4]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	9200      	str	r2, [sp, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <GAME_PLAY_Management+0x598>)
 8000f9a:	215a      	movs	r1, #90	; 0x5a
 8000f9c:	200f      	movs	r0, #15
 8000f9e:	f001 fd4c 	bl	8002a3a <ST7735_WriteString>
			HAL_Delay(2000);
 8000fa2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fa6:	f002 fb8b 	bl	80036c0 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2326      	movs	r3, #38	; 0x26
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	215a      	movs	r1, #90	; 0x5a
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f001 fe35 	bl	8002c24 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f893 3442 	ldrb.w	r3, [r3, #1090]	; 0x442
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
			state_game->F_flag = 0;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
		}
		ptrPlayerAtk = &state_game->player[1];
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000fd8:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f818 	bl	800101c <GAME_PLAY_Phase_Management>
		break;
 8000fec:	e000      	b.n	8000ff0 <GAME_PLAY_Management+0x570>
	case Game_Ended:
		break;
 8000fee:	bf00      	nop
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	24000008 	.word	0x24000008
 8000ffc:	0800c510 	.word	0x0800c510
 8001000:	0800c51c 	.word	0x0800c51c
 8001004:	24000010 	.word	0x24000010
 8001008:	0800c57c 	.word	0x0800c57c
 800100c:	0800c584 	.word	0x0800c584
 8001010:	0800c570 	.word	0x0800c570
 8001014:	0800c58c 	.word	0x0800c58c
 8001018:	0800c594 	.word	0x0800c594

0800101c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af04      	add	r7, sp, #16
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001030:	77bb      	strb	r3, [r7, #30]

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8001038:	777b      	strb	r3, [r7, #29]

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001040:	773b      	strb	r3, [r7, #28]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (PAS) {
 8001042:	7fbb      	ldrb	r3, [r7, #30]
 8001044:	2b03      	cmp	r3, #3
 8001046:	f200 854b 	bhi.w	8001ae0 <GAME_PLAY_Phase_Management+0xac4>
 800104a:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <GAME_PLAY_Phase_Management+0x34>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	08001ad3 	.word	0x08001ad3
 8001054:	08001061 	.word	0x08001061
 8001058:	0800112f 	.word	0x0800112f
 800105c:	080015d9 	.word	0x080015d9
	case PS_AFK:
		break;
	case Drawn_Phase:
		LCDvalue(playerAtk,playerDef);
 8001060:	6839      	ldr	r1, [r7, #0]
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fe7e 	bl	8001d64 <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001068:	4ba0      	ldr	r3, [pc, #640]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 800106a:	2200      	movs	r2, #0
 800106c:	9202      	str	r2, [sp, #8]
 800106e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a9d      	ldr	r2, [pc, #628]	; (80012f0 <GAME_PLAY_Phase_Management+0x2d4>)
 800107c:	2123      	movs	r1, #35	; 0x23
 800107e:	203c      	movs	r0, #60	; 0x3c
 8001080:	f001 fcdb 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001084:	4b99      	ldr	r3, [pc, #612]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 8001086:	2200      	movs	r2, #0
 8001088:	9202      	str	r2, [sp, #8]
 800108a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800108e:	9201      	str	r2, [sp, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a96      	ldr	r2, [pc, #600]	; (80012f0 <GAME_PLAY_Phase_Management+0x2d4>)
 8001098:	2123      	movs	r1, #35	; 0x23
 800109a:	203c      	movs	r0, #60	; 0x3c
 800109c:	f001 fd17 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	4b91      	ldr	r3, [pc, #580]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 80010a6:	9203      	str	r2, [sp, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	9202      	str	r2, [sp, #8]
 80010ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a8e      	ldr	r2, [pc, #568]	; (80012f4 <GAME_PLAY_Phase_Management+0x2d8>)
 80010ba:	215a      	movs	r1, #90	; 0x5a
 80010bc:	2005      	movs	r0, #5
 80010be:	f001 fd50 	bl	8002b62 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	4b89      	ldr	r3, [pc, #548]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 80010c8:	9203      	str	r2, [sp, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	9202      	str	r2, [sp, #8]
 80010ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a87      	ldr	r2, [pc, #540]	; (80012f8 <GAME_PLAY_Phase_Management+0x2dc>)
 80010dc:	215a      	movs	r1, #90	; 0x5a
 80010de:	2005      	movs	r0, #5
 80010e0:	f001 fd3f 	bl	8002b62 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80010e4:	2101      	movs	r1, #1
 80010e6:	4885      	ldr	r0, [pc, #532]	; (80012fc <GAME_PLAY_Phase_Management+0x2e0>)
 80010e8:	f005 fc38 	bl	800695c <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 84f1 	bne.w	8001ad6 <GAME_PLAY_Phase_Management+0xaba>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 ff07 	bl	8002f08 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f001 ff15 	bl	8002f2a <ST7735_FillScreen1>
			MainGUI();
 8001100:	f000 fd90 	bl	8001c24 <MainGUI>
			LCDvalue(playerAtk,playerDef);
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fe2c 	bl	8001d64 <LCDvalue>
			state_game->PlyerAction_State = Main_Phase;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2202      	movs	r2, #2
 8001110:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8001122:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001126:	f002 facb 	bl	80036c0 <HAL_Delay>
		}
		break;
 800112a:	f000 bcd4 	b.w	8001ad6 <GAME_PLAY_Phase_Management+0xaba>
	case Main_Phase:
		ST7735_WriteString(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800112e:	4b6f      	ldr	r3, [pc, #444]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 8001130:	2200      	movs	r2, #0
 8001132:	9202      	str	r2, [sp, #8]
 8001134:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6f      	ldr	r2, [pc, #444]	; (8001300 <GAME_PLAY_Phase_Management+0x2e4>)
 8001142:	2123      	movs	r1, #35	; 0x23
 8001144:	203c      	movs	r0, #60	; 0x3c
 8001146:	f001 fc78 	bl	8002a3a <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800114a:	4b68      	ldr	r3, [pc, #416]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 800114c:	2200      	movs	r2, #0
 800114e:	9202      	str	r2, [sp, #8]
 8001150:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001154:	9201      	str	r2, [sp, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	9200      	str	r2, [sp, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a68      	ldr	r2, [pc, #416]	; (8001300 <GAME_PLAY_Phase_Management+0x2e4>)
 800115e:	2123      	movs	r1, #35	; 0x23
 8001160:	203c      	movs	r0, #60	; 0x3c
 8001162:	f001 fcb4 	bl	8002ace <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	4b60      	ldr	r3, [pc, #384]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 800116c:	9203      	str	r2, [sp, #12]
 800116e:	2200      	movs	r2, #0
 8001170:	9202      	str	r2, [sp, #8]
 8001172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001176:	9201      	str	r2, [sp, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <GAME_PLAY_Phase_Management+0x2d8>)
 8001180:	215a      	movs	r1, #90	; 0x5a
 8001182:	2005      	movs	r0, #5
 8001184:	f001 fced 	bl	8002b62 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	4b57      	ldr	r3, [pc, #348]	; (80012ec <GAME_PLAY_Phase_Management+0x2d0>)
 800118e:	9203      	str	r2, [sp, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	9202      	str	r2, [sp, #8]
 8001194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001198:	9201      	str	r2, [sp, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a58      	ldr	r2, [pc, #352]	; (8001304 <GAME_PLAY_Phase_Management+0x2e8>)
 80011a2:	215a      	movs	r1, #90	; 0x5a
 80011a4:	2005      	movs	r0, #5
 80011a6:	f001 fcdc 	bl	8002b62 <ST7735_WriteStringNSS>
		switch (PMS)
 80011aa:	7f7b      	ldrb	r3, [r7, #29]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	f200 8494 	bhi.w	8001ada <GAME_PLAY_Phase_Management+0xabe>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <GAME_PLAY_Phase_Management+0x19c>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080015b9 	.word	0x080015b9
 80011bc:	080011d9 	.word	0x080011d9
 80011c0:	08001253 	.word	0x08001253
 80011c4:	080012bb 	.word	0x080012bb
 80011c8:	0800141d 	.word	0x0800141d
 80011cc:	080015b9 	.word	0x080015b9
 80011d0:	08001571 	.word	0x08001571
 80011d4:	0800151f 	.word	0x0800151f
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d12e      	bne.n	800123e <GAME_PLAY_Phase_Management+0x222>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80011e0:	2101      	movs	r1, #1
 80011e2:	4846      	ldr	r0, [pc, #280]	; (80012fc <GAME_PLAY_Phase_Management+0x2e0>)
 80011e4:	f005 fbba 	bl	800695c <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d121      	bne.n	8001232 <GAME_PLAY_Phase_Management+0x216>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f001 fe8a 	bl	8002f08 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f001 fe98 	bl	8002f2a <ST7735_FillScreen1>
					MainGUI();
 80011fa:	f000 fd13 	bl	8001c24 <MainGUI>
					LCDvalue(playerAtk,playerDef);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fdaf 	bl	8001d64 <LCDvalue>
					state_game->action = 50;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2232      	movs	r2, #50	; 0x32
 800120a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->PlyerAction_State = Battle_Phase;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2203      	movs	r2, #3
 8001218:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					// ADD ATK point to all Monster
					GAME_PLAY_Add_ATK_Point(playerAtk);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fc5f 	bl	8001ae8 <GAME_PLAY_Add_ATK_Point>

					HAL_Delay(1500);
 800122a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800122e:	f002 fa47 	bl	80036c0 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f7ff fa8c 	bl	8000754 <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 800123c:	e1be      	b.n	80015bc <GAME_PLAY_Phase_Management+0x5a0>
			else if (state_game->action == 1)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	f040 81ba 	bne.w	80015bc <GAME_PLAY_Phase_Management+0x5a0>
				state_game->PlyerAction_Main_Substate = select_position;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001250:	e1b4      	b.n	80015bc <GAME_PLAY_Phase_Management+0x5a0>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ChainBuffer[0];
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001258:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001260:	627b      	str	r3, [r7, #36]	; 0x24

			if (state_game->action == 1)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d116      	bne.n	8001298 <GAME_PLAY_Phase_Management+0x27c>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <GAME_PLAY_Phase_Management+0x264>
					ptrYugiohCard_src->cardState = 0;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2200      	movs	r2, #0
 8001276:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2202      	movs	r2, #2
 800127c:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 800127e:	e19f      	b.n	80015c0 <GAME_PLAY_Phase_Management+0x5a4>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	2b00      	cmp	r3, #0
 8001286:	f040 819b 	bne.w	80015c0 <GAME_PLAY_Phase_Management+0x5a4>
					ptrYugiohCard_src->cardState = 1;
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	2201      	movs	r2, #1
 800128e:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
			break;
 8001296:	e193      	b.n	80015c0 <GAME_PLAY_Phase_Management+0x5a4>
			else if (state_game->action == 2)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b02      	cmp	r3, #2
 800129e:	f040 818f 	bne.w	80015c0 <GAME_PLAY_Phase_Management+0x5a4>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80012a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012a4:	69b8      	ldr	r0, [r7, #24]
 80012a6:	f7ff f9ed 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2203      	movs	r2, #3
 80012ae:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2203      	movs	r2, #3
 80012b4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80012b8:	e182      	b.n	80015c0 <GAME_PLAY_Phase_Management+0x5a4>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012c0:	61bb      	str	r3, [r7, #24]

			if (state_game->action == 3)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	f040 817c 	bne.w	80015c4 <GAME_PLAY_Phase_Management+0x5a8>
			{
				if (ptrYugiohCard_src->cardType == 3)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d119      	bne.n	8001308 <GAME_PLAY_Phase_Management+0x2ec>

					//					state_game->action = 0;
					//					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;

					//for check
					YUGIOH_Gift_of_the_Mystical_Elf(playerAtk,playerDef);
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fc2b 	bl	8001b32 <YUGIOH_Gift_of_the_Mystical_Elf>

					state_game->action = 0;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 80012ea:	e16b      	b.n	80015c4 <GAME_PLAY_Phase_Management+0x5a8>
 80012ec:	24000008 	.word	0x24000008
 80012f0:	0800c5a0 	.word	0x0800c5a0
 80012f4:	0800c5ac 	.word	0x0800c5ac
 80012f8:	0800c5bc 	.word	0x0800c5bc
 80012fc:	58020800 	.word	0x58020800
 8001300:	0800c5c8 	.word	0x0800c5c8
 8001304:	0800c5d4 	.word	0x0800c5d4
				else if (ptrYugiohCard_src->cardType == 2)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d141      	bne.n	8001394 <GAME_PLAY_Phase_Management+0x378>
					state_game->count_chain = 1;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2201      	movs	r2, #1
 8001314:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d112      	bne.n	8001344 <GAME_PLAY_Phase_Management+0x328>
						state_game->test = 33;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2221      	movs	r2, #33	; 0x21
 8001322:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fabe 	bl	80008a8 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2204      	movs	r2, #4
 8001330:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &playerAtk->ChainBuffer[0];
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2207      	movs	r2, #7
 800133e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001342:	e13f      	b.n	80015c4 <GAME_PLAY_Phase_Management+0x5a8>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	799a      	ldrb	r2, [r3, #6]
 8001348:	4ba2      	ldr	r3, [pc, #648]	; (80015d4 <GAME_PLAY_Phase_Management+0x5b8>)
 800134a:	fba3 1302 	umull	r1, r3, r3, r2
 800134e:	0899      	lsrs	r1, r3, #2
 8001350:	460b      	mov	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	440b      	add	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	74bb      	strb	r3, [r7, #18]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 800135c:	7cbb      	ldrb	r3, [r7, #18]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	3308      	adds	r3, #8
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136a:	69b8      	ldr	r0, [r7, #24]
 800136c:	f7ff f98a 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fa99 	bl	80008a8 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800137c:	69b9      	ldr	r1, [r7, #24]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f980 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001392:	e117      	b.n	80015c4 <GAME_PLAY_Phase_Management+0x5a8>
				else if (ptrYugiohCard_src->cardType == 1)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	2b01      	cmp	r3, #1
 800139a:	f040 8113 	bne.w	80015c4 <GAME_PLAY_Phase_Management+0x5a8>
					state_game->test = 2;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2202      	movs	r2, #2
 80013a2:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
					if (ptrYugiohCard_src->cardLevel < 7)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d82b      	bhi.n	8001406 <GAME_PLAY_Phase_Management+0x3ea>
						state_game->test = 1;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	799a      	ldrb	r2, [r3, #6]
 80013ba:	4b86      	ldr	r3, [pc, #536]	; (80015d4 <GAME_PLAY_Phase_Management+0x5b8>)
 80013bc:	fba3 1302 	umull	r1, r3, r3, r2
 80013c0:	0899      	lsrs	r1, r3, #2
 80013c2:	460b      	mov	r3, r1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	440b      	add	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	74fb      	strb	r3, [r7, #19]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	3308      	adds	r3, #8
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013dc:	69b8      	ldr	r0, [r7, #24]
 80013de:	f7ff f951 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fa60 	bl	80008a8 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f947 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001404:	e0de      	b.n	80015c4 <GAME_PLAY_Phase_Management+0x5a8>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fa4e 	bl	80008a8 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2204      	movs	r2, #4
 8001410:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2204      	movs	r2, #4
 8001416:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800141a:	e0d3      	b.n	80015c4 <GAME_PLAY_Phase_Management+0x5a8>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001422:	61bb      	str	r3, [r7, #24]

			if (state_game->action == 4)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d105      	bne.n	8001438 <GAME_PLAY_Phase_Management+0x41c>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff f98f 	bl	8000754 <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], &playerAtk->CardInPlayed);
				}
			}
			break;
 8001436:	e0c7      	b.n	80015c8 <GAME_PLAY_Phase_Management+0x5ac>
			else if (state_game->action == 5)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b05      	cmp	r3, #5
 800143e:	d105      	bne.n	800144c <GAME_PLAY_Phase_Management+0x430>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7ff f985 	bl	8000754 <Player_Reading_Card>
			break;
 800144a:	e0bd      	b.n	80015c8 <GAME_PLAY_Phase_Management+0x5ac>
			else if (state_game->action == 6)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b06      	cmp	r3, #6
 8001452:	f040 80b9 	bne.w	80015c8 <GAME_PLAY_Phase_Management+0x5ac>
				uint8_t monsterflag = 0 ;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst = &playerAtk->ChainBuffer[0];
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	78db      	ldrb	r3, [r3, #3]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d804      	bhi.n	8001476 <GAME_PLAY_Phase_Management+0x45a>
					monsterflag += 1;
 800146c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001470:	3301      	adds	r3, #1
 8001472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst++;
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	3310      	adds	r3, #16
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	78db      	ldrb	r3, [r3, #3]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d804      	bhi.n	800148e <GAME_PLAY_Phase_Management+0x472>
					monsterflag += 1;
 8001484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001488:	3301      	adds	r3, #1
 800148a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (monsterflag == 2)
 800148e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001492:	2b02      	cmp	r3, #2
 8001494:	d135      	bne.n	8001502 <GAME_PLAY_Phase_Management+0x4e6>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	799a      	ldrb	r2, [r3, #6]
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <GAME_PLAY_Phase_Management+0x5b8>)
 800149c:	fba3 1302 	umull	r1, r3, r3, r2
 80014a0:	0899      	lsrs	r1, r3, #2
 80014a2:	460b      	mov	r3, r1
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	440b      	add	r3, r1
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	753b      	strb	r3, [r7, #20]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80014ae:	7d3b      	ldrb	r3, [r7, #20]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	3308      	adds	r3, #8
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80014ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014bc:	69b8      	ldr	r0, [r7, #24]
 80014be:	f7ff f8e1 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ChainBuffer[0]);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fa97 	bl	80009fe <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ChainBuffer[1]);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fa90 	bl	80009fe <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff f9e2 	bl	80008a8 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f8c9 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001500:	e062      	b.n	80015c8 <GAME_PLAY_Phase_Management+0x5ac>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff f9d0 	bl	80008a8 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], &playerAtk->CardInPlayed);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f7ff f8b4 	bl	8000684 <YUGIOH_card_copy>
			break;
 800151c:	e054      	b.n	80015c8 <GAME_PLAY_Phase_Management+0x5ac>
		case chaining_main_DEF:
			state_game->test = 34;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2222      	movs	r2, #34	; 0x22
 8001522:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
			if(state_game->action == 4)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b04      	cmp	r3, #4
 800152c:	d111      	bne.n	8001552 <GAME_PLAY_Phase_Management+0x536>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff f90e 	bl	8000754 <Player_Reading_Card>
				state_game->test = 35;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2223      	movs	r2, #35	; 0x23
 800153c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d141      	bne.n	80015cc <GAME_PLAY_Phase_Management+0x5b0>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2205      	movs	r2, #5
 800154c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				//				state_game->action = 4;
				YUGIOH_Ancient_Rules(playerAtk);
				state_game->action = 0;
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
			}
			break;
 8001550:	e03c      	b.n	80015cc <GAME_PLAY_Phase_Management+0x5b0>
			else if ((state_game->action == 5 )){
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d138      	bne.n	80015cc <GAME_PLAY_Phase_Management+0x5b0>
				YUGIOH_Ancient_Rules(playerAtk);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fb36 	bl	8001bcc <YUGIOH_Ancient_Rules>
				state_game->action = 0;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800156e:	e02d      	b.n	80015cc <GAME_PLAY_Phase_Management+0x5b0>
		case chaining_main_ATK:
			if(state_game->action == 4)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d10d      	bne.n	8001594 <GAME_PLAY_Phase_Management+0x578>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff f8e9 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d122      	bne.n	80015d0 <GAME_PLAY_Phase_Management+0x5b4>
					state_game->PlyerAction_Main_Substate = activate_effect;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 8001592:	e01d      	b.n	80015d0 <GAME_PLAY_Phase_Management+0x5b4>
			else if ((state_game->action == 5 )){
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d119      	bne.n	80015d0 <GAME_PLAY_Phase_Management+0x5b4>
				state_game->count_chain += 1;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	705a      	strb	r2, [r3, #1]
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2207      	movs	r2, #7
 80015ac:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2204      	movs	r2, #4
 80015b4:	701a      	strb	r2, [r3, #0]
			break;
 80015b6:	e00b      	b.n	80015d0 <GAME_PLAY_Phase_Management+0x5b4>
			break;
 80015b8:	bf00      	nop
 80015ba:	e28e      	b.n	8001ada <GAME_PLAY_Phase_Management+0xabe>
			break;
 80015bc:	bf00      	nop
 80015be:	e28c      	b.n	8001ada <GAME_PLAY_Phase_Management+0xabe>
			break;
 80015c0:	bf00      	nop
 80015c2:	e28a      	b.n	8001ada <GAME_PLAY_Phase_Management+0xabe>
			break;
 80015c4:	bf00      	nop
 80015c6:	e288      	b.n	8001ada <GAME_PLAY_Phase_Management+0xabe>
			break;
 80015c8:	bf00      	nop
 80015ca:	e286      	b.n	8001ada <GAME_PLAY_Phase_Management+0xabe>
			break;
 80015cc:	bf00      	nop
 80015ce:	e284      	b.n	8001ada <GAME_PLAY_Phase_Management+0xabe>
			break;
 80015d0:	bf00      	nop
			//				state_game->action = 0;
			//				state_game->MAIN = await;
			//			}
			break;
		}
		break;
 80015d2:	e282      	b.n	8001ada <GAME_PLAY_Phase_Management+0xabe>
 80015d4:	aaaaaaab 	.word	0xaaaaaaab
		case Battle_Phase:
			ST7735_WriteString(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80015d8:	4bad      	ldr	r3, [pc, #692]	; (8001890 <GAME_PLAY_Phase_Management+0x874>)
 80015da:	2200      	movs	r2, #0
 80015dc:	9202      	str	r2, [sp, #8]
 80015de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	9200      	str	r2, [sp, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4aaa      	ldr	r2, [pc, #680]	; (8001894 <GAME_PLAY_Phase_Management+0x878>)
 80015ec:	2123      	movs	r1, #35	; 0x23
 80015ee:	203c      	movs	r0, #60	; 0x3c
 80015f0:	f001 fa23 	bl	8002a3a <ST7735_WriteString>
			ST7735_WriteString1(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80015f4:	4ba6      	ldr	r3, [pc, #664]	; (8001890 <GAME_PLAY_Phase_Management+0x874>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	9202      	str	r2, [sp, #8]
 80015fa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015fe:	9201      	str	r2, [sp, #4]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	9200      	str	r2, [sp, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4aa3      	ldr	r2, [pc, #652]	; (8001894 <GAME_PLAY_Phase_Management+0x878>)
 8001608:	2123      	movs	r1, #35	; 0x23
 800160a:	203c      	movs	r0, #60	; 0x3c
 800160c:	f001 fa5f 	bl	8002ace <ST7735_WriteString1>
			ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	4b9e      	ldr	r3, [pc, #632]	; (8001890 <GAME_PLAY_Phase_Management+0x874>)
 8001616:	9203      	str	r2, [sp, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	9202      	str	r2, [sp, #8]
 800161c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001620:	9201      	str	r2, [sp, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	9200      	str	r2, [sp, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a9b      	ldr	r2, [pc, #620]	; (8001898 <GAME_PLAY_Phase_Management+0x87c>)
 800162a:	215a      	movs	r1, #90	; 0x5a
 800162c:	2005      	movs	r0, #5
 800162e:	f001 fa98 	bl	8002b62 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	4b96      	ldr	r3, [pc, #600]	; (8001890 <GAME_PLAY_Phase_Management+0x874>)
 8001638:	9203      	str	r2, [sp, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	9202      	str	r2, [sp, #8]
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	9201      	str	r2, [sp, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	9200      	str	r2, [sp, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a94      	ldr	r2, [pc, #592]	; (800189c <GAME_PLAY_Phase_Management+0x880>)
 800164c:	215a      	movs	r1, #90	; 0x5a
 800164e:	2005      	movs	r0, #5
 8001650:	f001 fa87 	bl	8002b62 <ST7735_WriteStringNSS>
			switch(PBS){
 8001654:	7f3b      	ldrb	r3, [r7, #28]
 8001656:	2b06      	cmp	r3, #6
 8001658:	f200 8241 	bhi.w	8001ade <GAME_PLAY_Phase_Management+0xac2>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <GAME_PLAY_Phase_Management+0x648>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001abf 	.word	0x08001abf
 8001668:	08001681 	.word	0x08001681
 800166c:	080018d3 	.word	0x080018d3
 8001670:	08001869 	.word	0x08001869
 8001674:	08001abf 	.word	0x08001abf
 8001678:	0800191f 	.word	0x0800191f
 800167c:	08001a83 	.word	0x08001a83
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b32      	cmp	r3, #50	; 0x32
 8001686:	d158      	bne.n	800173a <GAME_PLAY_Phase_Management+0x71e>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff f861 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001692:	2101      	movs	r1, #1
 8001694:	4882      	ldr	r0, [pc, #520]	; (80018a0 <GAME_PLAY_Phase_Management+0x884>)
 8001696:	f005 f961 	bl	800695c <HAL_GPIO_ReadPin>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 8210 	bne.w	8001ac2 <GAME_PLAY_Phase_Management+0xaa6>
							== GPIO_PIN_RESET){
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2300      	movs	r3, #0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2326      	movs	r3, #38	; 0x26
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	215a      	movs	r1, #90	; 0x5a
 80016b2:	2000      	movs	r0, #0
 80016b4:	f001 fb9e 	bl	8002df4 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <GAME_PLAY_Phase_Management+0x888>)
 80016be:	9203      	str	r2, [sp, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	9202      	str	r2, [sp, #8]
 80016c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016c8:	9201      	str	r2, [sp, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	9200      	str	r2, [sp, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a75      	ldr	r2, [pc, #468]	; (80018a8 <GAME_PLAY_Phase_Management+0x88c>)
 80016d2:	215a      	movs	r1, #90	; 0x5a
 80016d4:	200f      	movs	r0, #15
 80016d6:	f001 fa44 	bl	8002b62 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 80016da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016de:	f001 ffef 	bl	80036c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2326      	movs	r3, #38	; 0x26
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	215a      	movs	r1, #90	; 0x5a
 80016f2:	2000      	movs	r0, #0
 80016f4:	f001 fb7e 	bl	8002df4 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	2300      	movs	r3, #0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2326      	movs	r3, #38	; 0x26
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	215a      	movs	r1, #90	; 0x5a
 8001708:	2000      	movs	r0, #0
 800170a:	f001 fb73 	bl	8002df4 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
						if(state_game->MainGame_State == first_player){
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800171a:	2b02      	cmp	r3, #2
 800171c:	d104      	bne.n	8001728 <GAME_PLAY_Phase_Management+0x70c>
							state_game->MainGame_State = second_player;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2203      	movs	r2, #3
 8001722:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8001726:	e003      	b.n	8001730 <GAME_PLAY_Phase_Management+0x714>
						}
						else{
							state_game->MainGame_State = first_player;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8001738:	e1c3      	b.n	8001ac2 <GAME_PLAY_Phase_Management+0xaa6>
				else if(state_game->action == 51){
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b33      	cmp	r3, #51	; 0x33
 8001740:	f040 81bf 	bne.w	8001ac2 <GAME_PLAY_Phase_Management+0xaa6>
					uint8_t check_def_mon = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3338      	adds	r3, #56	; 0x38
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
					for(uint8_t i = 0;i < 3; ++i){
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001756:	e010      	b.n	800177a <GAME_PLAY_Phase_Management+0x75e>
						if(ptrYugiohCard_dst->cardData == 0){
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d104      	bne.n	800176a <GAME_PLAY_Phase_Management+0x74e>
							check_def_mon++;
 8001760:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001764:	3301      	adds	r3, #1
 8001766:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						ptrYugiohCard_dst++;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	3310      	adds	r3, #16
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
					for(uint8_t i = 0;i < 3; ++i){
 8001770:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001774:	3301      	adds	r3, #1
 8001776:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800177a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800177e:	2b02      	cmp	r3, #2
 8001780:	d9ea      	bls.n	8001758 <GAME_PLAY_Phase_Management+0x73c>
					uint8_t flag_can_atk = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3020 	strb.w	r3, [r7, #32]
					ptrYugiohCard_src = &playerDef->ChainBuffer[0];
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800178e:	61bb      	str	r3, [r7, #24]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3338      	adds	r3, #56	; 0x38
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 8001796:	2300      	movs	r3, #0
 8001798:	77fb      	strb	r3, [r7, #31]
 800179a:	e016      	b.n	80017ca <GAME_PLAY_Phase_Management+0x7ae>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d10a      	bne.n	80017be <GAME_PLAY_Phase_Management+0x7a2>
							if(ptrYugiohCard_dst->cardState == 1){
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d103      	bne.n	80017b8 <GAME_PLAY_Phase_Management+0x79c>
								flag_can_atk = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f887 3020 	strb.w	r3, [r7, #32]
								break;
 80017b6:	e00b      	b.n	80017d0 <GAME_PLAY_Phase_Management+0x7b4>
								flag_can_atk = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 3020 	strb.w	r3, [r7, #32]
						ptrYugiohCard_dst++;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3310      	adds	r3, #16
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	3301      	adds	r3, #1
 80017c8:	77fb      	strb	r3, [r7, #31]
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d9e5      	bls.n	800179c <GAME_PLAY_Phase_Management+0x780>
					if (flag_can_atk == 2) {
 80017d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d13b      	bne.n	8001850 <GAME_PLAY_Phase_Management+0x834>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	7a1b      	ldrb	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d02b      	beq.n	8001838 <GAME_PLAY_Phase_Management+0x81c>
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d127      	bne.n	8001838 <GAME_PLAY_Phase_Management+0x81c>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	7a1b      	ldrb	r3, [r3, #8]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017fa:	4619      	mov	r1, r3
 80017fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017fe:	f7fe ff41 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
							if(check_def_mon == 3){
 800180a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800180e:	2b03      	cmp	r3, #3
 8001810:	d103      	bne.n	800181a <GAME_PLAY_Phase_Management+0x7fe>
								ptrYugiohCard_dst->targetPosition = 99;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	2263      	movs	r2, #99	; 0x63
 8001816:	71da      	strb	r2, [r3, #7]
 8001818:	e003      	b.n	8001822 <GAME_PLAY_Phase_Management+0x806>
								ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	799a      	ldrb	r2, [r3, #6]
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8001822:	6838      	ldr	r0, [r7, #0]
 8001824:	f7ff f840 	bl	80008a8 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2234      	movs	r2, #52	; 0x34
 800182c:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2203      	movs	r2, #3
 8001832:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001836:	e144      	b.n	8001ac2 <GAME_PLAY_Phase_Management+0xaa6>
							state_game->test = 222;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	22de      	movs	r2, #222	; 0xde
 800183c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
							state_game->action = 50;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2232      	movs	r2, #50	; 0x32
 8001844:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800184e:	e138      	b.n	8001ac2 <GAME_PLAY_Phase_Management+0xaa6>
						state_game->test = 223;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	22df      	movs	r2, #223	; 0xdf
 8001854:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						state_game->action = 50;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2232      	movs	r2, #50	; 0x32
 800185c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001866:	e12c      	b.n	8001ac2 <GAME_PLAY_Phase_Management+0xaa6>
			case counter_DEF:
				//action 52
				//				state_game->test = 34;
				if(state_game->action == 52)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b34      	cmp	r3, #52	; 0x34
 800186e:	d11d      	bne.n	80018ac <GAME_PLAY_Phase_Management+0x890>
				{
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7fe ff6d 	bl	8000754 <Player_Reading_Card>
					//					state_game->test = 35;
					if (playerDef->noBTN == GPIO_PIN_RESET){
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	789b      	ldrb	r3, [r3, #2]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 8121 	bne.w	8001ac6 <GAME_PLAY_Phase_Management+0xaaa>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2205      	movs	r2, #5
 8001888:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}
				break;
 800188c:	e11b      	b.n	8001ac6 <GAME_PLAY_Phase_Management+0xaaa>
 800188e:	bf00      	nop
 8001890:	24000008 	.word	0x24000008
 8001894:	0800c5e4 	.word	0x0800c5e4
 8001898:	0800c5f0 	.word	0x0800c5f0
 800189c:	0800c600 	.word	0x0800c600
 80018a0:	58020800 	.word	0x58020800
 80018a4:	24000010 	.word	0x24000010
 80018a8:	0800c610 	.word	0x0800c610
				else if ((state_game->action == 53 )){
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b35      	cmp	r3, #53	; 0x35
 80018b2:	f040 8108 	bne.w	8001ac6 <GAME_PLAY_Phase_Management+0xaaa>
					state_game->count_chain += 1;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2202      	movs	r2, #2
 80018c6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2236      	movs	r2, #54	; 0x36
 80018ce:	701a      	strb	r2, [r3, #0]
				break;
 80018d0:	e0f9      	b.n	8001ac6 <GAME_PLAY_Phase_Management+0xaaa>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b36      	cmp	r3, #54	; 0x36
 80018d8:	d10e      	bne.n	80018f8 <GAME_PLAY_Phase_Management+0x8dc>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7fe ff38 	bl	8000754 <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	789b      	ldrb	r3, [r3, #2]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 80ee 	bne.w	8001aca <GAME_PLAY_Phase_Management+0xaae>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 52;
				}
				break;
 80018f6:	e0e8      	b.n	8001aca <GAME_PLAY_Phase_Management+0xaae>
				else if ((state_game->action == 55 )){
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b37      	cmp	r3, #55	; 0x37
 80018fe:	f040 80e4 	bne.w	8001aca <GAME_PLAY_Phase_Management+0xaae>
					state_game->count_chain += 1;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2203      	movs	r2, #3
 8001912:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 52;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2234      	movs	r2, #52	; 0x34
 800191a:	701a      	strb	r2, [r3, #0]
				break;
 800191c:	e0d5      	b.n	8001aca <GAME_PLAY_Phase_Management+0xaae>
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001924:	61bb      	str	r3, [r7, #24]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	791b      	ldrb	r3, [r3, #4]
 800192a:	75fb      	strb	r3, [r7, #23]

				if(ptrYugiohCard_src->targetPosition == 99){
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	79db      	ldrb	r3, [r3, #7]
 8001930:	2b63      	cmp	r3, #99	; 0x63
 8001932:	d114      	bne.n	800195e <GAME_PLAY_Phase_Management+0x942>
					playerDef->life_point -= atk*100;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	889a      	ldrh	r2, [r3, #4]
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4619      	mov	r1, r3
 800193e:	0249      	lsls	r1, r1, #9
 8001940:	1ac9      	subs	r1, r1, r3
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	4419      	add	r1, r3
 8001946:	00c9      	lsls	r1, r1, #3
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	b29a      	uxth	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2206      	movs	r2, #6
 800195a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				}

				ptrYugiohCard_dst = playerDef->cardOnBoard;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3308      	adds	r3, #8
 8001962:	627b      	str	r3, [r7, #36]	; 0x24

				ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	799b      	ldrb	r3, [r3, #6]
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	3308      	adds	r3, #8
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

				state_game->test = 54;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2236      	movs	r2, #54	; 0x36
 8001976:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
				if(ptrYugiohCard_dst->cardState == 0){
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	789b      	ldrb	r3, [r3, #2]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d12c      	bne.n	80019dc <GAME_PLAY_Phase_Management+0x9c0>
					//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	795b      	ldrb	r3, [r3, #5]
 8001986:	757b      	strb	r3, [r7, #21]
					if(atk < def){
 8001988:	7dfa      	ldrb	r2, [r7, #23]
 800198a:	7d7b      	ldrb	r3, [r7, #21]
 800198c:	429a      	cmp	r2, r3
 800198e:	d217      	bcs.n	80019c0 <GAME_PLAY_Phase_Management+0x9a4>
						playerAtk->life_point -= (def-atk)*100;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	889a      	ldrh	r2, [r3, #4]
 8001994:	7d79      	ldrb	r1, [r7, #21]
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	1acb      	subs	r3, r1, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	4619      	mov	r1, r3
 800199e:	0249      	lsls	r1, r1, #9
 80019a0:	1ac9      	subs	r1, r1, r3
 80019a2:	0089      	lsls	r1, r1, #2
 80019a4:	4419      	add	r1, r3
 80019a6:	00c9      	lsls	r1, r1, #3
 80019a8:	1acb      	subs	r3, r1, r3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2206      	movs	r2, #6
 80019ba:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						playerDef->life_point -= (atk-atk2)*100;
						state_game->PlyerAction_Battle_Substate = after_calculate;
					}

				}
				break;
 80019be:	e086      	b.n	8001ace <GAME_PLAY_Phase_Management+0xab2>
					else if(atk > def){
 80019c0:	7dfa      	ldrb	r2, [r7, #23]
 80019c2:	7d7b      	ldrb	r3, [r7, #21]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f240 8082 	bls.w	8001ace <GAME_PLAY_Phase_Management+0xab2>
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80019ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019cc:	6838      	ldr	r0, [r7, #0]
 80019ce:	f7ff f816 	bl	80009fe <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2206      	movs	r2, #6
 80019d6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80019da:	e078      	b.n	8001ace <GAME_PLAY_Phase_Management+0xab2>
				else if(ptrYugiohCard_dst->cardState == 1){
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	789b      	ldrb	r3, [r3, #2]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d174      	bne.n	8001ace <GAME_PLAY_Phase_Management+0xab2>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	75bb      	strb	r3, [r7, #22]
					state_game->test = 60;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	223c      	movs	r2, #60	; 0x3c
 80019ee:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
					if(atk < atk2){
 80019f2:	7dfa      	ldrb	r2, [r7, #23]
 80019f4:	7dbb      	ldrb	r3, [r7, #22]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d21f      	bcs.n	8001a3a <GAME_PLAY_Phase_Management+0xa1e>
						state_game->test = 61;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	223d      	movs	r2, #61	; 0x3d
 80019fe:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						playerAtk->life_point -= (atk2-atk)*100;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	889a      	ldrh	r2, [r3, #4]
 8001a06:	7db9      	ldrb	r1, [r7, #22]
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	1acb      	subs	r3, r1, r3
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	0249      	lsls	r1, r1, #9
 8001a12:	1ac9      	subs	r1, r1, r3
 8001a14:	0089      	lsls	r1, r1, #2
 8001a16:	4419      	add	r1, r3
 8001a18:	00c9      	lsls	r1, r1, #3
 8001a1a:	1acb      	subs	r3, r1, r3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	809a      	strh	r2, [r3, #4]
						YUGIOH_To_GY(playerAtk, ptrYugiohCard_src);
 8001a28:	69b9      	ldr	r1, [r7, #24]
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe ffe7 	bl	80009fe <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2206      	movs	r2, #6
 8001a34:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001a38:	e049      	b.n	8001ace <GAME_PLAY_Phase_Management+0xab2>
					else if(atk > atk2){
 8001a3a:	7dfa      	ldrb	r2, [r7, #23]
 8001a3c:	7dbb      	ldrb	r3, [r7, #22]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d945      	bls.n	8001ace <GAME_PLAY_Phase_Management+0xab2>
						state_game->test = 70;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2246      	movs	r2, #70	; 0x46
 8001a46:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8001a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	f7fe ffd6 	bl	80009fe <YUGIOH_To_GY>
						playerDef->life_point -= (atk-atk2)*100;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	889a      	ldrh	r2, [r3, #4]
 8001a56:	7df9      	ldrb	r1, [r7, #23]
 8001a58:	7dbb      	ldrb	r3, [r7, #22]
 8001a5a:	1acb      	subs	r3, r1, r3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	0249      	lsls	r1, r1, #9
 8001a62:	1ac9      	subs	r1, r1, r3
 8001a64:	0089      	lsls	r1, r1, #2
 8001a66:	4419      	add	r1, r3
 8001a68:	00c9      	lsls	r1, r1, #3
 8001a6a:	1acb      	subs	r3, r1, r3
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2206      	movs	r2, #6
 8001a7c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001a80:	e025      	b.n	8001ace <GAME_PLAY_Phase_Management+0xab2>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a88:	61bb      	str	r3, [r7, #24]
				YUGIOH_card_clear(ptrYugiohCard_src);
 8001a8a:	69b8      	ldr	r0, [r7, #24]
 8001a8c:	f7fe fe31 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	889b      	ldrh	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <GAME_PLAY_Phase_Management+0xa88>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	889b      	ldrh	r3, [r3, #4]
 8001a9c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d904      	bls.n	8001aae <GAME_PLAY_Phase_Management+0xa92>
					state_game->MainGame_State = Game_Ended;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8001aac:	e010      	b.n	8001ad0 <GAME_PLAY_Phase_Management+0xab4>
					state_game->action = 50;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2232      	movs	r2, #50	; 0x32
 8001ab2:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001abc:	e008      	b.n	8001ad0 <GAME_PLAY_Phase_Management+0xab4>
				break;
 8001abe:	bf00      	nop
 8001ac0:	e00d      	b.n	8001ade <GAME_PLAY_Phase_Management+0xac2>
				break;
 8001ac2:	bf00      	nop
 8001ac4:	e00b      	b.n	8001ade <GAME_PLAY_Phase_Management+0xac2>
				break;
 8001ac6:	bf00      	nop
 8001ac8:	e009      	b.n	8001ade <GAME_PLAY_Phase_Management+0xac2>
				break;
 8001aca:	bf00      	nop
 8001acc:	e007      	b.n	8001ade <GAME_PLAY_Phase_Management+0xac2>
				break;
 8001ace:	bf00      	nop
			}
			break;
 8001ad0:	e005      	b.n	8001ade <GAME_PLAY_Phase_Management+0xac2>
		break;
 8001ad2:	bf00      	nop
 8001ad4:	e004      	b.n	8001ae0 <GAME_PLAY_Phase_Management+0xac4>
		break;
 8001ad6:	bf00      	nop
 8001ad8:	e002      	b.n	8001ae0 <GAME_PLAY_Phase_Management+0xac4>
		break;
 8001ada:	bf00      	nop
 8001adc:	e000      	b.n	8001ae0 <GAME_PLAY_Phase_Management+0xac4>
			break;
 8001ade:	bf00      	nop

	}
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <GAME_PLAY_Add_ATK_Point>:

void GAME_PLAY_Add_ATK_Point(Player *player)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3338      	adds	r3, #56	; 0x38
 8001af4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	72fb      	strb	r3, [r7, #11]
 8001afa:	e010      	b.n	8001b1e <GAME_PLAY_Add_ATK_Point+0x36>
		if (ptrYUGIOHCard->cardState == 1) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	789b      	ldrb	r3, [r3, #2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d103      	bne.n	8001b0c <GAME_PLAY_Add_ATK_Point+0x24>
			ptrYUGIOHCard->actionPoint_Atk = 1;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	721a      	strb	r2, [r3, #8]
 8001b0a:	e002      	b.n	8001b12 <GAME_PLAY_Add_ATK_Point+0x2a>
		}
		else{
			ptrYUGIOHCard->actionPoint_Atk = 0;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	721a      	strb	r2, [r3, #8]
		}
		ptrYUGIOHCard++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3310      	adds	r3, #16
 8001b16:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	72fb      	strb	r3, [r7, #11]
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d9eb      	bls.n	8001afc <GAME_PLAY_Add_ATK_Point+0x14>
	}
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <YUGIOH_Gift_of_the_Mystical_Elf>:
		ptrYUGIOHCard_player1++;
		ptrYUGIOHCard_player2++;
	}
}

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8001b32:	b480      	push	{r7}
 8001b34:	b087      	sub	sp, #28
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3338      	adds	r3, #56	; 0x38
 8001b46:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	3338      	adds	r3, #56	; 0x38
 8001b52:	60fb      	str	r3, [r7, #12]

	uint8_t count_monster = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	74bb      	strb	r3, [r7, #18]
 8001b5c:	e00c      	b.n	8001b78 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardSignature != 0){
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 8001b66:	7cfb      	ldrb	r3, [r7, #19]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	74fb      	strb	r3, [r7, #19]
		}
		ptrYUGIOHCard_player1++;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3310      	adds	r3, #16
 8001b70:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001b72:	7cbb      	ldrb	r3, [r7, #18]
 8001b74:	3301      	adds	r3, #1
 8001b76:	74bb      	strb	r3, [r7, #18]
 8001b78:	7cbb      	ldrb	r3, [r7, #18]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d9ef      	bls.n	8001b5e <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	747b      	strb	r3, [r7, #17]
 8001b82:	e009      	b.n	8001b98 <YUGIOH_Gift_of_the_Mystical_Elf+0x66>
		if(ptrYUGIOHCard_player1->cardSignature != 0){
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	74fb      	strb	r3, [r7, #19]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001b92:	7c7b      	ldrb	r3, [r7, #17]
 8001b94:	3301      	adds	r3, #1
 8001b96:	747b      	strb	r3, [r7, #17]
 8001b98:	7c7b      	ldrb	r3, [r7, #17]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d9f2      	bls.n	8001b84 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
		}
	}

	player1->life_point += 300*count_monster;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	889a      	ldrh	r2, [r3, #4]
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	0089      	lsls	r1, r1, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	4619      	mov	r1, r3
 8001bae:	0109      	lsls	r1, r1, #4
 8001bb0:	1acb      	subs	r3, r1, r3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	809a      	strh	r2, [r3, #4]

}
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ChainBuffer;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001bda:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ChainBuffer[0];
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001be2:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	799a      	ldrb	r2, [r3, #6]
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <YUGIOH_Ancient_Rules+0x54>)
 8001bea:	fba3 1302 	umull	r1, r3, r3, r2
 8001bee:	0899      	lsrs	r1, r3, #2
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	440b      	add	r3, r1
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3308      	adds	r3, #8
 8001c00:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 8001c02:	7cfb      	ldrb	r3, [r7, #19]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	3308      	adds	r3, #8
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001c0e:	68f9      	ldr	r1, [r7, #12]
 8001c10:	6978      	ldr	r0, [r7, #20]
 8001c12:	f7fe fd37 	bl	8000684 <YUGIOH_card_copy>

}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	aaaaaaab 	.word	0xaaaaaaab

08001c24 <MainGUI>:


void MainGUI(){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <MainGUI+0x124>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	9202      	str	r2, [sp, #8]
 8001c30:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	9200      	str	r2, [sp, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a43      	ldr	r2, [pc, #268]	; (8001d4c <MainGUI+0x128>)
 8001c3e:	2105      	movs	r1, #5
 8001c40:	2005      	movs	r0, #5
 8001c42:	f000 ff44 	bl	8002ace <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <MainGUI+0x124>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	9202      	str	r2, [sp, #8]
 8001c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c50:	9201      	str	r2, [sp, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	9200      	str	r2, [sp, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a3d      	ldr	r2, [pc, #244]	; (8001d50 <MainGUI+0x12c>)
 8001c5a:	2114      	movs	r1, #20
 8001c5c:	2005      	movs	r0, #5
 8001c5e:	f000 ff36 	bl	8002ace <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <MainGUI+0x124>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6c:	9201      	str	r2, [sp, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a37      	ldr	r2, [pc, #220]	; (8001d54 <MainGUI+0x130>)
 8001c76:	2123      	movs	r1, #35	; 0x23
 8001c78:	2005      	movs	r0, #5
 8001c7a:	f000 ff28 	bl	8002ace <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c7e:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <MainGUI+0x124>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	9202      	str	r2, [sp, #8]
 8001c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c88:	9201      	str	r2, [sp, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	9200      	str	r2, [sp, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <MainGUI+0x134>)
 8001c92:	2132      	movs	r1, #50	; 0x32
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 ff1a 	bl	8002ace <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <MainGUI+0x124>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca4:	9201      	str	r2, [sp, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <MainGUI+0x138>)
 8001cae:	213c      	movs	r1, #60	; 0x3c
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f000 ff0c 	bl	8002ace <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <MainGUI+0x124>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	9202      	str	r2, [sp, #8]
 8001cbc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001cc0:	9201      	str	r2, [sp, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	9200      	str	r2, [sp, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <MainGUI+0x13c>)
 8001cca:	2105      	movs	r1, #5
 8001ccc:	2005      	movs	r0, #5
 8001cce:	f000 feb4 	bl	8002a3a <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <MainGUI+0x124>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	9202      	str	r2, [sp, #8]
 8001cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cdc:	9201      	str	r2, [sp, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <MainGUI+0x12c>)
 8001ce6:	2114      	movs	r1, #20
 8001ce8:	2005      	movs	r0, #5
 8001cea:	f000 fea6 	bl	8002a3a <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <MainGUI+0x124>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	9202      	str	r2, [sp, #8]
 8001cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf8:	9201      	str	r2, [sp, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	9200      	str	r2, [sp, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <MainGUI+0x130>)
 8001d02:	2123      	movs	r1, #35	; 0x23
 8001d04:	2005      	movs	r0, #5
 8001d06:	f000 fe98 	bl	8002a3a <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MainGUI+0x124>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	9202      	str	r2, [sp, #8]
 8001d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	9200      	str	r2, [sp, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <MainGUI+0x134>)
 8001d1e:	2132      	movs	r1, #50	; 0x32
 8001d20:	2000      	movs	r0, #0
 8001d22:	f000 fe8a 	bl	8002a3a <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MainGUI+0x124>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	9202      	str	r2, [sp, #8]
 8001d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <MainGUI+0x138>)
 8001d3a:	213c      	movs	r1, #60	; 0x3c
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 fe7c 	bl	8002a3a <ST7735_WriteString>
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24000008 	.word	0x24000008
 8001d4c:	0800c570 	.word	0x0800c570
 8001d50:	0800c61c 	.word	0x0800c61c
 8001d54:	0800c62c 	.word	0x0800c62c
 8001d58:	0800c634 	.word	0x0800c634
 8001d5c:	0800c51c 	.word	0x0800c51c
 8001d60:	0800c510 	.word	0x0800c510

08001d64 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	889b      	ldrh	r3, [r3, #4]
 8001d72:	461a      	mov	r2, r3
 8001d74:	493b      	ldr	r1, [pc, #236]	; (8001e64 <LCDvalue+0x100>)
 8001d76:	483c      	ldr	r0, [pc, #240]	; (8001e68 <LCDvalue+0x104>)
 8001d78:	f00a f840 	bl	800bdfc <siprintf>
	if(C_LP_ATK[3] == 0){
 8001d7c:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <LCDvalue+0x104>)
 8001d7e:	78db      	ldrb	r3, [r3, #3]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10e      	bne.n	8001da2 <LCDvalue+0x3e>
		C_LP_ATK[3] = C_LP_ATK[2];
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <LCDvalue+0x104>)
 8001d86:	789a      	ldrb	r2, [r3, #2]
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <LCDvalue+0x104>)
 8001d8a:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <LCDvalue+0x104>)
 8001d8e:	785a      	ldrb	r2, [r3, #1]
 8001d90:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <LCDvalue+0x104>)
 8001d92:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <LCDvalue+0x104>)
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	4b33      	ldr	r3, [pc, #204]	; (8001e68 <LCDvalue+0x104>)
 8001d9a:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <LCDvalue+0x104>)
 8001d9e:	2220      	movs	r2, #32
 8001da0:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <LCDvalue+0x108>)
 8001da8:	9203      	str	r2, [sp, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	9202      	str	r2, [sp, #8]
 8001dae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001db2:	9201      	str	r2, [sp, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	9200      	str	r2, [sp, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <LCDvalue+0x104>)
 8001dbc:	2114      	movs	r1, #20
 8001dbe:	205a      	movs	r0, #90	; 0x5a
 8001dc0:	f000 fecf 	bl	8002b62 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <LCDvalue+0x108>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	9203      	str	r2, [sp, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	9202      	str	r2, [sp, #8]
 8001dce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001dd2:	9201      	str	r2, [sp, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	9200      	str	r2, [sp, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <LCDvalue+0x10c>)
 8001ddc:	2132      	movs	r1, #50	; 0x32
 8001dde:	2069      	movs	r0, #105	; 0x69
 8001de0:	f000 febf 	bl	8002b62 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	889b      	ldrh	r3, [r3, #4]
 8001de8:	461a      	mov	r2, r3
 8001dea:	491e      	ldr	r1, [pc, #120]	; (8001e64 <LCDvalue+0x100>)
 8001dec:	4821      	ldr	r0, [pc, #132]	; (8001e74 <LCDvalue+0x110>)
 8001dee:	f00a f805 	bl	800bdfc <siprintf>
	if(C_LP_DEF[3] == 0){
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <LCDvalue+0x110>)
 8001df4:	78db      	ldrb	r3, [r3, #3]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <LCDvalue+0xb4>
		C_LP_DEF[3] = C_LP_DEF[2];
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <LCDvalue+0x110>)
 8001dfc:	789a      	ldrb	r2, [r3, #2]
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <LCDvalue+0x110>)
 8001e00:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <LCDvalue+0x110>)
 8001e04:	785a      	ldrb	r2, [r3, #1]
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <LCDvalue+0x110>)
 8001e08:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <LCDvalue+0x110>)
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <LCDvalue+0x110>)
 8001e10:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <LCDvalue+0x110>)
 8001e14:	2220      	movs	r2, #32
 8001e16:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <LCDvalue+0x108>)
 8001e1e:	9203      	str	r2, [sp, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	9202      	str	r2, [sp, #8]
 8001e24:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001e28:	9201      	str	r2, [sp, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	9200      	str	r2, [sp, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <LCDvalue+0x110>)
 8001e32:	2114      	movs	r1, #20
 8001e34:	205a      	movs	r0, #90	; 0x5a
 8001e36:	f000 fe94 	bl	8002b62 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <LCDvalue+0x108>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	9203      	str	r2, [sp, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	9202      	str	r2, [sp, #8]
 8001e44:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001e48:	9201      	str	r2, [sp, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	9200      	str	r2, [sp, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <LCDvalue+0x10c>)
 8001e52:	2132      	movs	r1, #50	; 0x32
 8001e54:	2069      	movs	r0, #105	; 0x69
 8001e56:	f000 fe84 	bl	8002b62 <ST7735_WriteStringNSS>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	0800c648 	.word	0x0800c648
 8001e68:	24000160 	.word	0x24000160
 8001e6c:	24000008 	.word	0x24000008
 8001e70:	0800c56c 	.word	0x0800c56c
 8001e74:	24000164 	.word	0x24000164

08001e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <SystemInit+0xfc>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	4a3c      	ldr	r2, [pc, #240]	; (8001f74 <SystemInit+0xfc>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <SystemInit+0xfc>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <SystemInit+0xfc>)
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e98:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <SystemInit+0x100>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d807      	bhi.n	8001eb4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ea4:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <SystemInit+0x100>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 030f 	bic.w	r3, r3, #15
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <SystemInit+0x100>)
 8001eae:	f043 0307 	orr.w	r3, r3, #7
 8001eb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <SystemInit+0x104>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a30      	ldr	r2, [pc, #192]	; (8001f7c <SystemInit+0x104>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <SystemInit+0x104>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <SystemInit+0x104>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	492c      	ldr	r1, [pc, #176]	; (8001f7c <SystemInit+0x104>)
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <SystemInit+0x108>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <SystemInit+0x100>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ede:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <SystemInit+0x100>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 030f 	bic.w	r3, r3, #15
 8001ee6:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <SystemInit+0x100>)
 8001ee8:	f043 0307 	orr.w	r3, r3, #7
 8001eec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <SystemInit+0x104>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <SystemInit+0x104>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <SystemInit+0x104>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <SystemInit+0x104>)
 8001f02:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <SystemInit+0x10c>)
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <SystemInit+0x104>)
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <SystemInit+0x110>)
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <SystemInit+0x104>)
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <SystemInit+0x114>)
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <SystemInit+0x104>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <SystemInit+0x104>)
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <SystemInit+0x114>)
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <SystemInit+0x104>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <SystemInit+0x104>)
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <SystemInit+0x114>)
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <SystemInit+0x104>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <SystemInit+0x104>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <SystemInit+0x104>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <SystemInit+0x104>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <SystemInit+0x118>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <SystemInit+0x118>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <SystemInit+0x11c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <SystemInit+0x120>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f5a:	d202      	bcs.n	8001f62 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <SystemInit+0x124>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <SystemInit+0x128>)
 8001f64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f68:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	52002000 	.word	0x52002000
 8001f7c:	58024400 	.word	0x58024400
 8001f80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f84:	02020200 	.word	0x02020200
 8001f88:	01ff0000 	.word	0x01ff0000
 8001f8c:	01010280 	.word	0x01010280
 8001f90:	580000c0 	.word	0x580000c0
 8001f94:	5c001000 	.word	0x5c001000
 8001f98:	ffff0000 	.word	0xffff0000
 8001f9c:	51008108 	.word	0x51008108
 8001fa0:	52004000 	.word	0x52004000

08001fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fae:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001fb0:	bf00      	nop
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <main+0xe8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <main+0x24>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1e5a      	subs	r2, r3, #1
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	dcf4      	bgt.n	8001fb2 <main+0xe>
	if ( timeout < 0 )
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da01      	bge.n	8001fd2 <main+0x2e>
	{
		Error_Handler();
 8001fce:	f000 fb97 	bl	8002700 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd2:	f001 fae3 	bl	800359c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd6:	f000 f861 	bl	800209c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001fda:	f000 f8e3 	bl	80021a4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <main+0xe8>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	4a29      	ldr	r2, [pc, #164]	; (800208c <main+0xe8>)
 8001fe6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <main+0xe8>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f004 fcf9 	bl	80069f4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8002002:	2100      	movs	r1, #0
 8002004:	2000      	movs	r0, #0
 8002006:	f004 fd0f 	bl	8006a28 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800200a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800200e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002010:	bf00      	nop
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <main+0xe8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d104      	bne.n	8002028 <main+0x84>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dcf4      	bgt.n	8002012 <main+0x6e>
	if ( timeout < 0 )
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	da01      	bge.n	8002032 <main+0x8e>
	{
		Error_Handler();
 800202e:	f000 fb67 	bl	8002700 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002032:	f000 fa35 	bl	80024a0 <MX_GPIO_Init>
  MX_ETH_Init();
 8002036:	f000 f8e7 	bl	8002208 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800203a:	f000 f989 	bl	8002350 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800203e:	f000 fa07 	bl	8002450 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002042:	f000 f9d3 	bl	80023ec <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8002046:	f000 f92b 	bl	80022a0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800204a:	f000 fc61 	bl	8002910 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800204e:	2000      	movs	r0, #0
 8002050:	f000 ff6b 	bl	8002f2a <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8002054:	2000      	movs	r0, #0
 8002056:	f000 ff57 	bl	8002f08 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 800205a:	f001 fb25 	bl	80036a8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <main+0xec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2bc8      	cmp	r3, #200	; 0xc8
 8002068:	d9f7      	bls.n	800205a <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 800206a:	f001 fb1d 	bl	80036a8 <HAL_GetTick>
 800206e:	4603      	mov	r3, r0
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <main+0xec>)
 8002072:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002078:	4806      	ldr	r0, [pc, #24]	; (8002094 <main+0xf0>)
 800207a:	f004 fca0 	bl	80069be <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 800207e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002082:	4905      	ldr	r1, [pc, #20]	; (8002098 <main+0xf4>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fcfb 	bl	8000a80 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 800208a:	e7e6      	b.n	800205a <main+0xb6>
 800208c:	58024400 	.word	0x58024400
 8002090:	24000da8 	.word	0x24000da8
 8002094:	58020400 	.word	0x58020400
 8002098:	24000964 	.word	0x24000964

0800209c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b09c      	sub	sp, #112	; 0x70
 80020a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	224c      	movs	r2, #76	; 0x4c
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f009 fdae 	bl	800bc0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2220      	movs	r2, #32
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f009 fda8 	bl	800bc0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80020bc:	2004      	movs	r0, #4
 80020be:	f004 fe0f 	bl	8006ce0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4b34      	ldr	r3, [pc, #208]	; (8002198 <SystemClock_Config+0xfc>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	4a33      	ldr	r2, [pc, #204]	; (8002198 <SystemClock_Config+0xfc>)
 80020cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d0:	6193      	str	r3, [r2, #24]
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <SystemClock_Config+0xfc>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <SystemClock_Config+0x100>)
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	4a2e      	ldr	r2, [pc, #184]	; (800219c <SystemClock_Config+0x100>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80020e8:	4b2c      	ldr	r3, [pc, #176]	; (800219c <SystemClock_Config+0x100>)
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020f4:	bf00      	nop
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <SystemClock_Config+0xfc>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002102:	d1f8      	bne.n	80020f6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002104:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <SystemClock_Config+0x104>)
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	f023 0303 	bic.w	r3, r3, #3
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <SystemClock_Config+0x104>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002118:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211e:	2302      	movs	r3, #2
 8002120:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002122:	2302      	movs	r3, #2
 8002124:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002126:	2301      	movs	r3, #1
 8002128:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800212a:	2378      	movs	r3, #120	; 0x78
 800212c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800212e:	2302      	movs	r3, #2
 8002130:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002132:	2302      	movs	r3, #2
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002136:	2302      	movs	r3, #2
 8002138:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800213a:	230c      	movs	r3, #12
 800213c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800213e:	2300      	movs	r3, #0
 8002140:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fe32 	bl	8006db4 <HAL_RCC_OscConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002156:	f000 fad3 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215a:	233f      	movs	r3, #63	; 0x3f
 800215c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215e:	2303      	movs	r3, #3
 8002160:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002166:	2308      	movs	r3, #8
 8002168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800216a:	2340      	movs	r3, #64	; 0x40
 800216c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800216e:	2340      	movs	r3, #64	; 0x40
 8002170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002176:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002178:	2340      	movs	r3, #64	; 0x40
 800217a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2104      	movs	r1, #4
 8002180:	4618      	mov	r0, r3
 8002182:	f005 fa45 	bl	8007610 <HAL_RCC_ClockConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800218c:	f000 fab8 	bl	8002700 <Error_Handler>
  }
}
 8002190:	bf00      	nop
 8002192:	3770      	adds	r7, #112	; 0x70
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024800 	.word	0x58024800
 800219c:	58000400 	.word	0x58000400
 80021a0:	58024400 	.word	0x58024400

080021a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0b0      	sub	sp, #192	; 0xc0
 80021a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	22bc      	movs	r2, #188	; 0xbc
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f009 fd2b 	bl	800bc0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80021b6:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80021ba:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80021bc:	2301      	movs	r3, #1
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80021c0:	2318      	movs	r3, #24
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80021d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80021de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80021e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 fd9a 	bl	8007d28 <HAL_RCCEx_PeriphCLKConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80021fa:	f000 fa81 	bl	8002700 <Error_Handler>
  }
}
 80021fe:	bf00      	nop
 8002200:	37c0      	adds	r7, #192	; 0xc0
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <MX_ETH_Init+0x80>)
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <MX_ETH_Init+0x84>)
 8002210:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <MX_ETH_Init+0x88>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_ETH_Init+0x88>)
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <MX_ETH_Init+0x88>)
 8002220:	22e1      	movs	r2, #225	; 0xe1
 8002222:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_ETH_Init+0x88>)
 8002226:	2200      	movs	r2, #0
 8002228:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <MX_ETH_Init+0x88>)
 800222c:	2200      	movs	r2, #0
 800222e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <MX_ETH_Init+0x88>)
 8002232:	2200      	movs	r2, #0
 8002234:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_ETH_Init+0x80>)
 8002238:	4a15      	ldr	r2, [pc, #84]	; (8002290 <MX_ETH_Init+0x88>)
 800223a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_ETH_Init+0x80>)
 800223e:	2201      	movs	r2, #1
 8002240:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_ETH_Init+0x80>)
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <MX_ETH_Init+0x8c>)
 8002246:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_ETH_Init+0x80>)
 800224a:	4a13      	ldr	r2, [pc, #76]	; (8002298 <MX_ETH_Init+0x90>)
 800224c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_ETH_Init+0x80>)
 8002250:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002254:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <MX_ETH_Init+0x80>)
 8002258:	f003 fdac 	bl	8005db4 <HAL_ETH_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002262:	f000 fa4d 	bl	8002700 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002266:	2238      	movs	r2, #56	; 0x38
 8002268:	2100      	movs	r1, #0
 800226a:	480c      	ldr	r0, [pc, #48]	; (800229c <MX_ETH_Init+0x94>)
 800226c:	f009 fcce 	bl	800bc0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <MX_ETH_Init+0x94>)
 8002272:	2221      	movs	r2, #33	; 0x21
 8002274:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_ETH_Init+0x94>)
 8002278:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800227c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <MX_ETH_Init+0x94>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	240001a0 	.word	0x240001a0
 800228c:	40028000 	.word	0x40028000
 8002290:	24000dac 	.word	0x24000dac
 8002294:	240000e4 	.word	0x240000e4
 8002298:	24000084 	.word	0x24000084
 800229c:	24000168 	.word	0x24000168

080022a0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022a6:	4a29      	ldr	r2, [pc, #164]	; (800234c <MX_SPI3_Init+0xac>)
 80022a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022aa:	4b27      	ldr	r3, [pc, #156]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022b8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022bc:	2207      	movs	r2, #7
 80022be:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022d2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022da:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_SPI3_Init+0xa8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_SPI3_Init+0xa8>)
 8002304:	2200      	movs	r2, #0
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_SPI3_Init+0xa8>)
 800230a:	2200      	movs	r2, #0
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_SPI3_Init+0xa8>)
 8002310:	2200      	movs	r2, #0
 8002312:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_SPI3_Init+0xa8>)
 8002316:	2200      	movs	r2, #0
 8002318:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_SPI3_Init+0xa8>)
 800231c:	2200      	movs	r2, #0
 800231e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_SPI3_Init+0xa8>)
 8002322:	2200      	movs	r2, #0
 8002324:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_SPI3_Init+0xa8>)
 8002328:	2200      	movs	r2, #0
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_SPI3_Init+0xa8>)
 800232e:	2200      	movs	r2, #0
 8002330:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_SPI3_Init+0xa8>)
 8002334:	f007 f860 	bl	80093f8 <HAL_SPI_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800233e:	f000 f9df 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	24000250 	.word	0x24000250
 800234c:	40003c00 	.word	0x40003c00

08002350 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <MX_USART3_UART_Init+0x94>)
 8002358:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <MX_USART3_UART_Init+0x98>)
 800235e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002360:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800236c:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002374:	220c      	movs	r2, #12
 8002376:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002386:	2200      	movs	r2, #0
 8002388:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002392:	2200      	movs	r2, #0
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002396:	4812      	ldr	r0, [pc, #72]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 8002398:	f007 fc0f 	bl	8009bba <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80023a2:	f000 f9ad 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a6:	2100      	movs	r1, #0
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 80023aa:	f009 f831 	bl	800b410 <HAL_UARTEx_SetTxFifoThreshold>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80023b4:	f000 f9a4 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b8:	2100      	movs	r1, #0
 80023ba:	4809      	ldr	r0, [pc, #36]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 80023bc:	f009 f866 	bl	800b48c <HAL_UARTEx_SetRxFifoThreshold>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80023c6:	f000 f99b 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023ca:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_USART3_UART_Init+0x90>)
 80023cc:	f008 ffe7 	bl	800b39e <HAL_UARTEx_DisableFifoMode>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80023d6:	f000 f993 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	240002d8 	.word	0x240002d8
 80023e4:	40004800 	.word	0x40004800
 80023e8:	0005dc00 	.word	0x0005dc00

080023ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80023f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023f8:	2209      	movs	r2, #9
 80023fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023fe:	2202      	movs	r2, #2
 8002400:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800240a:	2202      	movs	r2, #2
 800240c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002422:	2201      	movs	r2, #1
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002428:	2201      	movs	r2, #1
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002434:	f004 fb0c 	bl	8006a50 <HAL_PCD_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800243e:	f000 f95f 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	24000458 	.word	0x24000458
 800244c:	40080000 	.word	0x40080000

08002450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_DMA_Init+0x4c>)
 8002458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <MX_DMA_Init+0x4c>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <MX_DMA_Init+0x4c>)
 8002468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	200c      	movs	r0, #12
 800247a:	f001 fa40 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800247e:	200c      	movs	r0, #12
 8002480:	f001 fa57 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	200f      	movs	r0, #15
 800248a:	f001 fa38 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800248e:	200f      	movs	r0, #15
 8002490:	f001 fa4f 	bl	8003932 <HAL_NVIC_EnableIRQ>

}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	58024400 	.word	0x58024400

080024a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b6:	4b8a      	ldr	r3, [pc, #552]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024bc:	4a88      	ldr	r2, [pc, #544]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c6:	4b86      	ldr	r3, [pc, #536]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d4:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024da:	4a81      	ldr	r2, [pc, #516]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e4:	4b7e      	ldr	r3, [pc, #504]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	4b7b      	ldr	r3, [pc, #492]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	4a79      	ldr	r2, [pc, #484]	; (80026e0 <MX_GPIO_Init+0x240>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002502:	4b77      	ldr	r3, [pc, #476]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002516:	4a72      	ldr	r2, [pc, #456]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002520:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002534:	4a6a      	ldr	r2, [pc, #424]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253e:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800254c:	4b64      	ldr	r3, [pc, #400]	; (80026e0 <MX_GPIO_Init+0x240>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002552:	4a63      	ldr	r2, [pc, #396]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002554:	f043 0310 	orr.w	r3, r3, #16
 8002558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255c:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <MX_GPIO_Init+0x240>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256a:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <MX_GPIO_Init+0x240>)
 800256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002570:	4a5b      	ldr	r2, [pc, #364]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800257a:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <MX_GPIO_Init+0x240>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002588:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <MX_GPIO_Init+0x240>)
 800258a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258e:	4a54      	ldr	r2, [pc, #336]	; (80026e0 <MX_GPIO_Init+0x240>)
 8002590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002598:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <MX_GPIO_Init+0x240>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80025ac:	484d      	ldr	r0, [pc, #308]	; (80026e4 <MX_GPIO_Init+0x244>)
 80025ae:	f004 f9ed 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b8:	484a      	ldr	r0, [pc, #296]	; (80026e4 <MX_GPIO_Init+0x244>)
 80025ba:	f004 f9e7 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c4:	4848      	ldr	r0, [pc, #288]	; (80026e8 <MX_GPIO_Init+0x248>)
 80025c6:	f004 f9e1 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025d0:	4846      	ldr	r0, [pc, #280]	; (80026ec <MX_GPIO_Init+0x24c>)
 80025d2:	f004 f9db 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025dc:	4844      	ldr	r0, [pc, #272]	; (80026f0 <MX_GPIO_Init+0x250>)
 80025de:	f004 f9d5 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 80025e2:	230d      	movs	r3, #13
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f2:	4619      	mov	r1, r3
 80025f4:	483f      	ldr	r0, [pc, #252]	; (80026f4 <MX_GPIO_Init+0x254>)
 80025f6:	f004 f801 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80025fa:	2308      	movs	r3, #8
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fe:	2300      	movs	r3, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260a:	4619      	mov	r1, r3
 800260c:	483a      	ldr	r0, [pc, #232]	; (80026f8 <MX_GPIO_Init+0x258>)
 800260e:	f003 fff5 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8002612:	2302      	movs	r3, #2
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002616:	2300      	movs	r3, #0
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	4830      	ldr	r0, [pc, #192]	; (80026e8 <MX_GPIO_Init+0x248>)
 8002626:	f003 ffe9 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 800262a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002630:	2300      	movs	r3, #0
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263c:	4619      	mov	r1, r3
 800263e:	482f      	ldr	r0, [pc, #188]	; (80026fc <MX_GPIO_Init+0x25c>)
 8002640:	f003 ffdc 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8002644:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265a:	4619      	mov	r1, r3
 800265c:	4821      	ldr	r0, [pc, #132]	; (80026e4 <MX_GPIO_Init+0x244>)
 800265e:	f003 ffcd 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002662:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	2301      	movs	r3, #1
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002678:	4619      	mov	r1, r3
 800267a:	481b      	ldr	r0, [pc, #108]	; (80026e8 <MX_GPIO_Init+0x248>)
 800267c:	f003 ffbe 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002686:	2301      	movs	r3, #1
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002696:	4619      	mov	r1, r3
 8002698:	4814      	ldr	r0, [pc, #80]	; (80026ec <MX_GPIO_Init+0x24c>)
 800269a:	f003 ffaf 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	480f      	ldr	r0, [pc, #60]	; (80026f0 <MX_GPIO_Init+0x250>)
 80026b4:	f003 ffa2 	bl	80065fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ce:	4619      	mov	r1, r3
 80026d0:	4807      	ldr	r0, [pc, #28]	; (80026f0 <MX_GPIO_Init+0x250>)
 80026d2:	f003 ff93 	bl	80065fc <HAL_GPIO_Init>

}
 80026d6:	bf00      	nop
 80026d8:	3738      	adds	r7, #56	; 0x38
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	58024400 	.word	0x58024400
 80026e4:	58021000 	.word	0x58021000
 80026e8:	58020400 	.word	0x58020400
 80026ec:	58020c00 	.word	0x58020c00
 80026f0:	58021800 	.word	0x58021800
 80026f4:	58020800 	.word	0x58020800
 80026f8:	58020000 	.word	0x58020000
 80026fc:	58021400 	.word	0x58021400

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002708:	e7fe      	b.n	8002708 <Error_Handler+0x8>
	...

0800270c <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002716:	4802      	ldr	r0, [pc, #8]	; (8002720 <ST7735_Select+0x14>)
 8002718:	f004 f938 	bl	800698c <HAL_GPIO_WritePin>
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58021000 	.word	0x58021000

08002724 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002728:	2201      	movs	r2, #1
 800272a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800272e:	4802      	ldr	r0, [pc, #8]	; (8002738 <ST7735_Unselect+0x14>)
 8002730:	f004 f92c 	bl	800698c <HAL_GPIO_WritePin>
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	58021000 	.word	0x58021000

0800273c <ST7735_Select1>:
static void ST7735_Select1() {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002746:	4802      	ldr	r0, [pc, #8]	; (8002750 <ST7735_Select1+0x14>)
 8002748:	f004 f920 	bl	800698c <HAL_GPIO_WritePin>
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	58021000 	.word	0x58021000

08002754 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800275e:	4802      	ldr	r0, [pc, #8]	; (8002768 <ST7735_Unselect1+0x14>)
 8002760:	f004 f914 	bl	800698c <HAL_GPIO_WritePin>
}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	58021000 	.word	0x58021000

0800276c <ST7735_Reset>:

static void ST7735_Reset() {
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002776:	4807      	ldr	r0, [pc, #28]	; (8002794 <ST7735_Reset+0x28>)
 8002778:	f004 f908 	bl	800698c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800277c:	2005      	movs	r0, #5
 800277e:	f000 ff9f 	bl	80036c0 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002782:	2201      	movs	r2, #1
 8002784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <ST7735_Reset+0x28>)
 800278a:	f004 f8ff 	bl	800698c <HAL_GPIO_WritePin>
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	58021000 	.word	0x58021000

08002798 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80027a2:	2200      	movs	r2, #0
 80027a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a8:	4806      	ldr	r0, [pc, #24]	; (80027c4 <ST7735_WriteCommand+0x2c>)
 80027aa:	f004 f8ef 	bl	800698c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80027ae:	1df9      	adds	r1, r7, #7
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	2201      	movs	r2, #1
 80027b6:	4804      	ldr	r0, [pc, #16]	; (80027c8 <ST7735_WriteCommand+0x30>)
 80027b8:	f006 ff24 	bl	8009604 <HAL_SPI_Transmit>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	58021800 	.word	0x58021800
 80027c8:	24000250 	.word	0x24000250

080027cc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80027d6:	2201      	movs	r2, #1
 80027d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027dc:	4807      	ldr	r0, [pc, #28]	; (80027fc <ST7735_WriteData+0x30>)
 80027de:	f004 f8d5 	bl	800698c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <ST7735_WriteData+0x34>)
 80027ee:	f006 ff09 	bl	8009604 <HAL_SPI_Transmit>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	58021800 	.word	0x58021800
 8002800:	24000250 	.word	0x24000250

08002804 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8002816:	e034      	b.n	8002882 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 8002822:	7afb      	ldrb	r3, [r7, #11]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ffb7 	bl	8002798 <ST7735_WriteCommand>

		numArgs = *addr++;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8002834:	7abb      	ldrb	r3, [r7, #10]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 800283e:	7abb      	ldrb	r3, [r7, #10]
 8002840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002844:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 8002846:	7abb      	ldrb	r3, [r7, #10]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 800284c:	7abb      	ldrb	r3, [r7, #10]
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ffbb 	bl	80027cc <ST7735_WriteData>
			addr += numArgs;
 8002856:	7abb      	ldrb	r3, [r7, #10]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 800285e:	89bb      	ldrh	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 800286e:	89bb      	ldrh	r3, [r7, #12]
 8002870:	2bff      	cmp	r3, #255	; 0xff
 8002872:	d102      	bne.n	800287a <ST7735_ExecuteCommandList+0x76>
 8002874:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002878:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 800287a:	89bb      	ldrh	r3, [r7, #12]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 ff1f 	bl	80036c0 <HAL_Delay>
	while(numCommands--) {
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	73fa      	strb	r2, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1c5      	bne.n	8002818 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002896:	b590      	push	{r4, r7, lr}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	4604      	mov	r4, r0
 800289e:	4608      	mov	r0, r1
 80028a0:	4611      	mov	r1, r2
 80028a2:	461a      	mov	r2, r3
 80028a4:	4623      	mov	r3, r4
 80028a6:	71fb      	strb	r3, [r7, #7]
 80028a8:	4603      	mov	r3, r0
 80028aa:	71bb      	strb	r3, [r7, #6]
 80028ac:	460b      	mov	r3, r1
 80028ae:	717b      	strb	r3, [r7, #5]
 80028b0:	4613      	mov	r3, r2
 80028b2:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 80028b4:	202a      	movs	r0, #42	; 0x2a
 80028b6:	f7ff ff6f 	bl	8002798 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80028ba:	2300      	movs	r3, #0
 80028bc:	733b      	strb	r3, [r7, #12]
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	3302      	adds	r3, #2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	737b      	strb	r3, [r7, #13]
 80028c6:	2300      	movs	r3, #0
 80028c8:	73bb      	strb	r3, [r7, #14]
 80028ca:	797b      	ldrb	r3, [r7, #5]
 80028cc:	3302      	adds	r3, #2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	2104      	movs	r1, #4
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff77 	bl	80027cc <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 80028de:	202b      	movs	r0, #43	; 0x2b
 80028e0:	f7ff ff5a 	bl	8002798 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 80028e4:	79bb      	ldrb	r3, [r7, #6]
 80028e6:	3301      	adds	r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 80028ec:	793b      	ldrb	r3, [r7, #4]
 80028ee:	3301      	adds	r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	2104      	movs	r1, #4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff66 	bl	80027cc <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8002900:	202c      	movs	r0, #44	; 0x2c
 8002902:	f7ff ff49 	bl	8002798 <ST7735_WriteCommand>
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bd90      	pop	{r4, r7, pc}
	...

08002910 <ST7735_Init>:

void ST7735_Init() {
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
	ST7735_Select();
 8002914:	f7ff fefa 	bl	800270c <ST7735_Select>
	ST7735_Select1();
 8002918:	f7ff ff10 	bl	800273c <ST7735_Select1>
	ST7735_Reset();
 800291c:	f7ff ff26 	bl	800276c <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8002920:	4807      	ldr	r0, [pc, #28]	; (8002940 <ST7735_Init+0x30>)
 8002922:	f7ff ff6f 	bl	8002804 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8002926:	4807      	ldr	r0, [pc, #28]	; (8002944 <ST7735_Init+0x34>)
 8002928:	f7ff ff6c 	bl	8002804 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 800292c:	4806      	ldr	r0, [pc, #24]	; (8002948 <ST7735_Init+0x38>)
 800292e:	f7ff ff69 	bl	8002804 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8002932:	f7ff fef7 	bl	8002724 <ST7735_Unselect>
	ST7735_Unselect1();
 8002936:	f7ff ff0d 	bl	8002754 <ST7735_Unselect1>
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	0800db24 	.word	0x0800db24
 8002944:	0800db60 	.word	0x0800db60
 8002948:	0800db70 	.word	0x0800db70

0800294c <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800294c:	b082      	sub	sp, #8
 800294e:	b590      	push	{r4, r7, lr}
 8002950:	b089      	sub	sp, #36	; 0x24
 8002952:	af00      	add	r7, sp, #0
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
 800295a:	460b      	mov	r3, r1
 800295c:	80bb      	strh	r3, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	b2d8      	uxtb	r0, r3
 8002966:	88bb      	ldrh	r3, [r7, #4]
 8002968:	b2d9      	uxtb	r1, r3
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002972:	4413      	add	r3, r2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b2dc      	uxtb	r4, r3
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002982:	4413      	add	r3, r2
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4622      	mov	r2, r4
 800298c:	f7ff ff83 	bl	8002896 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	e043      	b.n	8002a1e <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8002996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	3b20      	subs	r3, #32
 800299c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	440b      	add	r3, r1
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e029      	b.n	8002a0c <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 80029c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	743b      	strb	r3, [r7, #16]
 80029d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fef4 	bl	80027cc <ST7735_WriteData>
 80029e4:	e00f      	b.n	8002a06 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80029e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	733b      	strb	r3, [r7, #12]
 80029f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fee3 	bl	80027cc <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a10:	461a      	mov	r2, r3
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d3cf      	bcc.n	80029b8 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002a22:	461a      	mov	r2, r3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d3b5      	bcc.n	8002996 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	3724      	adds	r7, #36	; 0x24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002a36:	b002      	add	sp, #8
 8002a38:	4770      	bx	lr

08002a3a <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af04      	add	r7, sp, #16
 8002a42:	603a      	str	r2, [r7, #0]
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8002a4e:	f7ff fe5d 	bl	800270c <ST7735_Select>

	while(*str) {
 8002a52:	e02d      	b.n	8002ab0 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	7d3a      	ldrb	r2, [r7, #20]
 8002a58:	4413      	add	r3, r2
 8002a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a5c:	dd13      	ble.n	8002a86 <ST7735_WriteString+0x4c>
			x = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002a62:	7d7b      	ldrb	r3, [r7, #21]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	7d7a      	ldrb	r2, [r7, #21]
 8002a70:	4413      	add	r3, r2
 8002a72:	2b7f      	cmp	r3, #127	; 0x7f
 8002a74:	dc21      	bgt.n	8002aba <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d103      	bne.n	8002a86 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	603b      	str	r3, [r7, #0]
				continue;
 8002a84:	e014      	b.n	8002ab0 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	88b9      	ldrh	r1, [r7, #4]
 8002a8c:	88f8      	ldrh	r0, [r7, #6]
 8002a8e:	8c3b      	ldrh	r3, [r7, #32]
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	8bbb      	ldrh	r3, [r7, #28]
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f7ff ff56 	bl	800294c <ST7735_WriteChar>
		x += font.width;
 8002aa0:	7d3b      	ldrb	r3, [r7, #20]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
		str++;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	603b      	str	r3, [r7, #0]
	while(*str) {
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1cd      	bne.n	8002a54 <ST7735_WriteString+0x1a>
 8002ab8:	e000      	b.n	8002abc <ST7735_WriteString+0x82>
				break;
 8002aba:	bf00      	nop
	}

	ST7735_Unselect();
 8002abc:	f7ff fe32 	bl	8002724 <ST7735_Unselect>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aca:	b002      	add	sp, #8
 8002acc:	4770      	bx	lr

08002ace <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002ace:	b082      	sub	sp, #8
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af04      	add	r7, sp, #16
 8002ad6:	603a      	str	r2, [r7, #0]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8002ae2:	f7ff fe2b 	bl	800273c <ST7735_Select1>

	while(*str) {
 8002ae6:	e02d      	b.n	8002b44 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	7d3a      	ldrb	r2, [r7, #20]
 8002aec:	4413      	add	r3, r2
 8002aee:	2b7f      	cmp	r3, #127	; 0x7f
 8002af0:	dd13      	ble.n	8002b1a <ST7735_WriteString1+0x4c>
			x = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002af6:	7d7b      	ldrb	r3, [r7, #21]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	88bb      	ldrh	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	7d7a      	ldrb	r2, [r7, #21]
 8002b04:	4413      	add	r3, r2
 8002b06:	2b7f      	cmp	r3, #127	; 0x7f
 8002b08:	dc21      	bgt.n	8002b4e <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d103      	bne.n	8002b1a <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	603b      	str	r3, [r7, #0]
				continue;
 8002b18:	e014      	b.n	8002b44 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	88b9      	ldrh	r1, [r7, #4]
 8002b20:	88f8      	ldrh	r0, [r7, #6]
 8002b22:	8c3b      	ldrh	r3, [r7, #32]
 8002b24:	9302      	str	r3, [sp, #8]
 8002b26:	8bbb      	ldrh	r3, [r7, #28]
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f7ff ff0c 	bl	800294c <ST7735_WriteChar>
		x += font.width;
 8002b34:	7d3b      	ldrb	r3, [r7, #20]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
		str++;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	603b      	str	r3, [r7, #0]
	while(*str) {
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1cd      	bne.n	8002ae8 <ST7735_WriteString1+0x1a>
 8002b4c:	e000      	b.n	8002b50 <ST7735_WriteString1+0x82>
				break;
 8002b4e:	bf00      	nop
	}

	ST7735_Unselect1();
 8002b50:	f7ff fe00 	bl	8002754 <ST7735_Unselect1>
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b5e:	b002      	add	sp, #8
 8002b60:	4770      	bx	lr

08002b62 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8002b62:	b082      	sub	sp, #8
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af04      	add	r7, sp, #16
 8002b6a:	603a      	str	r2, [r7, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
 8002b72:	460b      	mov	r3, r1
 8002b74:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8002b76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8002b7e:	f7ff fdc5 	bl	800270c <ST7735_Select>
 8002b82:	e034      	b.n	8002bee <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8002b84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d130      	bne.n	8002bee <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8002b8c:	f7ff fdd6 	bl	800273c <ST7735_Select1>

	}


	while(*str) {
 8002b90:	e02d      	b.n	8002bee <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	7d3a      	ldrb	r2, [r7, #20]
 8002b96:	4413      	add	r3, r2
 8002b98:	2b7f      	cmp	r3, #127	; 0x7f
 8002b9a:	dd13      	ble.n	8002bc4 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002ba0:	7d7b      	ldrb	r3, [r7, #21]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8002baa:	88bb      	ldrh	r3, [r7, #4]
 8002bac:	7d7a      	ldrb	r2, [r7, #21]
 8002bae:	4413      	add	r3, r2
 8002bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8002bb2:	dc21      	bgt.n	8002bf8 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d103      	bne.n	8002bc4 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	603b      	str	r3, [r7, #0]
				continue;
 8002bc2:	e014      	b.n	8002bee <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	88b9      	ldrh	r1, [r7, #4]
 8002bca:	88f8      	ldrh	r0, [r7, #6]
 8002bcc:	8c3b      	ldrh	r3, [r7, #32]
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	8bbb      	ldrh	r3, [r7, #28]
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f7ff feb7 	bl	800294c <ST7735_WriteChar>
		x += font.width;
 8002bde:	7d3b      	ldrb	r3, [r7, #20]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	4413      	add	r3, r2
 8002be6:	80fb      	strh	r3, [r7, #6]
		str++;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	603b      	str	r3, [r7, #0]
	while(*str) {
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1cd      	bne.n	8002b92 <ST7735_WriteStringNSS+0x30>
 8002bf6:	e000      	b.n	8002bfa <ST7735_WriteStringNSS+0x98>
				break;
 8002bf8:	bf00      	nop
	}
	if(NSS == 0){
 8002bfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8002c02:	f7ff fd8f 	bl	8002724 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8002c06:	e005      	b.n	8002c14 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8002c08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 8002c10:	f7ff fda0 	bl	8002754 <ST7735_Unselect1>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c1e:	b002      	add	sp, #8
 8002c20:	4770      	bx	lr
	...

08002c24 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	80fb      	strh	r3, [r7, #6]
 8002c36:	4603      	mov	r3, r0
 8002c38:	80bb      	strh	r3, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	807b      	strh	r3, [r7, #2]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b7f      	cmp	r3, #127	; 0x7f
 8002c46:	d858      	bhi.n	8002cfa <ST7735_FillRectangle+0xd6>
 8002c48:	88bb      	ldrh	r3, [r7, #4]
 8002c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c4c:	d855      	bhi.n	8002cfa <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	887b      	ldrh	r3, [r7, #2]
 8002c52:	4413      	add	r3, r2
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	dd03      	ble.n	8002c60 <ST7735_FillRectangle+0x3c>
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c5e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002c60:	88ba      	ldrh	r2, [r7, #4]
 8002c62:	883b      	ldrh	r3, [r7, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	dd03      	ble.n	8002c72 <ST7735_FillRectangle+0x4e>
 8002c6a:	88bb      	ldrh	r3, [r7, #4]
 8002c6c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002c70:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8002c72:	f7ff fd4b 	bl	800270c <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	b2d8      	uxtb	r0, r3
 8002c7a:	88bb      	ldrh	r3, [r7, #4]
 8002c7c:	b2d9      	uxtb	r1, r3
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b2dc      	uxtb	r4, r3
 8002c8e:	88bb      	ldrh	r3, [r7, #4]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	883b      	ldrh	r3, [r7, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	f7ff fdf9 	bl	8002896 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8002ca4:	8c3b      	ldrh	r3, [r7, #32]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	733b      	strb	r3, [r7, #12]
 8002cae:	8c3b      	ldrh	r3, [r7, #32]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cba:	4812      	ldr	r0, [pc, #72]	; (8002d04 <ST7735_FillRectangle+0xe0>)
 8002cbc:	f003 fe66 	bl	800698c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8002cc0:	883b      	ldrh	r3, [r7, #0]
 8002cc2:	80bb      	strh	r3, [r7, #4]
 8002cc4:	e013      	b.n	8002cee <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	80fb      	strh	r3, [r7, #6]
 8002cca:	e00a      	b.n	8002ce2 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002ccc:	f107 010c 	add.w	r1, r7, #12
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <ST7735_FillRectangle+0xe4>)
 8002cd8:	f006 fc94 	bl	8009604 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	80fb      	strh	r3, [r7, #6]
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f1      	bne.n	8002ccc <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8002ce8:	88bb      	ldrh	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	80bb      	strh	r3, [r7, #4]
 8002cee:	88bb      	ldrh	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e8      	bne.n	8002cc6 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8002cf4:	f7ff fd16 	bl	8002724 <ST7735_Unselect>
 8002cf8:	e000      	b.n	8002cfc <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002cfa:	bf00      	nop
}
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	58021800 	.word	0x58021800
 8002d08:	24000250 	.word	0x24000250

08002d0c <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	80fb      	strh	r3, [r7, #6]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80bb      	strh	r3, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]
 8002d26:	4613      	mov	r3, r2
 8002d28:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d2e:	d858      	bhi.n	8002de2 <ST7735_FillRectangle1+0xd6>
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	2b7f      	cmp	r3, #127	; 0x7f
 8002d34:	d855      	bhi.n	8002de2 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	2b80      	cmp	r3, #128	; 0x80
 8002d3e:	dd03      	ble.n	8002d48 <ST7735_FillRectangle1+0x3c>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002d46:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002d48:	88ba      	ldrh	r2, [r7, #4]
 8002d4a:	883b      	ldrh	r3, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2b80      	cmp	r3, #128	; 0x80
 8002d50:	dd03      	ble.n	8002d5a <ST7735_FillRectangle1+0x4e>
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002d58:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8002d5a:	f7ff fcef 	bl	800273c <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	b2d8      	uxtb	r0, r3
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	b2d9      	uxtb	r1, r3
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b2dc      	uxtb	r4, r3
 8002d76:	88bb      	ldrh	r3, [r7, #4]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	883b      	ldrh	r3, [r7, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	4622      	mov	r2, r4
 8002d88:	f7ff fd85 	bl	8002896 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8002d8c:	8c3b      	ldrh	r3, [r7, #32]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	733b      	strb	r3, [r7, #12]
 8002d96:	8c3b      	ldrh	r3, [r7, #32]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da2:	4812      	ldr	r0, [pc, #72]	; (8002dec <ST7735_FillRectangle1+0xe0>)
 8002da4:	f003 fdf2 	bl	800698c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8002da8:	883b      	ldrh	r3, [r7, #0]
 8002daa:	80bb      	strh	r3, [r7, #4]
 8002dac:	e013      	b.n	8002dd6 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	80fb      	strh	r3, [r7, #6]
 8002db2:	e00a      	b.n	8002dca <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002db4:	f107 010c 	add.w	r1, r7, #12
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	480c      	ldr	r0, [pc, #48]	; (8002df0 <ST7735_FillRectangle1+0xe4>)
 8002dc0:	f006 fc20 	bl	8009604 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	80fb      	strh	r3, [r7, #6]
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f1      	bne.n	8002db4 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8002dd0:	88bb      	ldrh	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	80bb      	strh	r3, [r7, #4]
 8002dd6:	88bb      	ldrh	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e8      	bne.n	8002dae <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8002ddc:	f7ff fcba 	bl	8002754 <ST7735_Unselect1>
 8002de0:	e000      	b.n	8002de4 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002de2:	bf00      	nop
}
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	58021800 	.word	0x58021800
 8002df0:	24000250 	.word	0x24000250

08002df4 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4623      	mov	r3, r4
 8002e04:	80fb      	strh	r3, [r7, #6]
 8002e06:	4603      	mov	r3, r0
 8002e08:	80bb      	strh	r3, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	807b      	strh	r3, [r7, #2]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b7f      	cmp	r3, #127	; 0x7f
 8002e16:	d86e      	bhi.n	8002ef6 <ST7735_FillRectangleNSS+0x102>
 8002e18:	88bb      	ldrh	r3, [r7, #4]
 8002e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e1c:	d86b      	bhi.n	8002ef6 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	4413      	add	r3, r2
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	dd03      	ble.n	8002e30 <ST7735_FillRectangleNSS+0x3c>
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e2e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002e30:	88ba      	ldrh	r2, [r7, #4]
 8002e32:	883b      	ldrh	r3, [r7, #0]
 8002e34:	4413      	add	r3, r2
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	dd03      	ble.n	8002e42 <ST7735_FillRectangleNSS+0x4e>
 8002e3a:	88bb      	ldrh	r3, [r7, #4]
 8002e3c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002e40:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8002e42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8002e4a:	f7ff fc5f 	bl	800270c <ST7735_Select>
 8002e4e:	e005      	b.n	8002e5c <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8002e50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8002e58:	f7ff fc70 	bl	800273c <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	b2d8      	uxtb	r0, r3
 8002e60:	88bb      	ldrh	r3, [r7, #4]
 8002e62:	b2d9      	uxtb	r1, r3
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b2dc      	uxtb	r4, r3
 8002e74:	88bb      	ldrh	r3, [r7, #4]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	883b      	ldrh	r3, [r7, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4622      	mov	r2, r4
 8002e86:	f7ff fd06 	bl	8002896 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8002e8a:	8c3b      	ldrh	r3, [r7, #32]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	733b      	strb	r3, [r7, #12]
 8002e94:	8c3b      	ldrh	r3, [r7, #32]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ea0:	4817      	ldr	r0, [pc, #92]	; (8002f00 <ST7735_FillRectangleNSS+0x10c>)
 8002ea2:	f003 fd73 	bl	800698c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8002ea6:	883b      	ldrh	r3, [r7, #0]
 8002ea8:	80bb      	strh	r3, [r7, #4]
 8002eaa:	e013      	b.n	8002ed4 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	80fb      	strh	r3, [r7, #6]
 8002eb0:	e00a      	b.n	8002ec8 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002eb2:	f107 010c 	add.w	r1, r7, #12
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4811      	ldr	r0, [pc, #68]	; (8002f04 <ST7735_FillRectangleNSS+0x110>)
 8002ebe:	f006 fba1 	bl	8009604 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	80fb      	strh	r3, [r7, #6]
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f1      	bne.n	8002eb2 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8002ece:	88bb      	ldrh	r3, [r7, #4]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	80bb      	strh	r3, [r7, #4]
 8002ed4:	88bb      	ldrh	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e8      	bne.n	8002eac <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8002eda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8002ee2:	f7ff fc1f 	bl	8002724 <ST7735_Unselect>
 8002ee6:	e007      	b.n	8002ef8 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8002ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d103      	bne.n	8002ef8 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8002ef0:	f7ff fc30 	bl	8002754 <ST7735_Unselect1>
 8002ef4:	e000      	b.n	8002ef8 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002ef6:	bf00      	nop
	}
}
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	58021800 	.word	0x58021800
 8002f04:	24000250 	.word	0x24000250

08002f08 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff fe81 	bl	8002c24 <ST7735_FillRectangle>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	4603      	mov	r3, r0
 8002f32:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7ff fee4 	bl	8002d0c <ST7735_FillRectangle1>
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_MspInit+0x30>)
 8002f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f58:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <HAL_MspInit+0x30>)
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_MspInit+0x30>)
 8002f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	58024400 	.word	0x58024400

08002f80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	; 0x38
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a59      	ldr	r2, [pc, #356]	; (8003104 <HAL_ETH_MspInit+0x184>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	f040 80ab 	bne.w	80030fa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002fa4:	4b58      	ldr	r3, [pc, #352]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002faa:	4a57      	ldr	r2, [pc, #348]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fb4:	4b54      	ldr	r3, [pc, #336]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002fc2:	4b51      	ldr	r3, [pc, #324]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002fe0:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fe6:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ff0:	4b45      	ldr	r3, [pc, #276]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8002ff2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffe:	4b42      	ldr	r3, [pc, #264]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8003000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003004:	4a40      	ldr	r2, [pc, #256]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8003010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301c:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <HAL_ETH_MspInit+0x188>)
 800301e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003022:	4a39      	ldr	r2, [pc, #228]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_ETH_MspInit+0x188>)
 800302e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_ETH_MspInit+0x188>)
 800303c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003040:	4a31      	ldr	r2, [pc, #196]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <HAL_ETH_MspInit+0x188>)
 800304c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_ETH_MspInit+0x188>)
 800305a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305e:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <HAL_ETH_MspInit+0x188>)
 8003060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_ETH_MspInit+0x188>)
 800306a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003076:	2332      	movs	r3, #50	; 0x32
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003086:	230b      	movs	r3, #11
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800308e:	4619      	mov	r1, r3
 8003090:	481e      	ldr	r0, [pc, #120]	; (800310c <HAL_ETH_MspInit+0x18c>)
 8003092:	f003 fab3 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003096:	2386      	movs	r3, #134	; 0x86
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030a6:	230b      	movs	r3, #11
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ae:	4619      	mov	r1, r3
 80030b0:	4817      	ldr	r0, [pc, #92]	; (8003110 <HAL_ETH_MspInit+0x190>)
 80030b2:	f003 faa3 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80030b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030c8:	230b      	movs	r3, #11
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d0:	4619      	mov	r1, r3
 80030d2:	4810      	ldr	r0, [pc, #64]	; (8003114 <HAL_ETH_MspInit+0x194>)
 80030d4:	f003 fa92 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80030d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030ea:	230b      	movs	r3, #11
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	4619      	mov	r1, r3
 80030f4:	4808      	ldr	r0, [pc, #32]	; (8003118 <HAL_ETH_MspInit+0x198>)
 80030f6:	f003 fa81 	bl	80065fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80030fa:	bf00      	nop
 80030fc:	3738      	adds	r7, #56	; 0x38
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40028000 	.word	0x40028000
 8003108:	58024400 	.word	0x58024400
 800310c:	58020800 	.word	0x58020800
 8003110:	58020000 	.word	0x58020000
 8003114:	58020400 	.word	0x58020400
 8003118:	58021800 	.word	0x58021800

0800311c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <HAL_SPI_MspInit+0xc8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d14d      	bne.n	80031da <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 8003140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003144:	4a28      	ldr	r2, [pc, #160]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 8003146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 8003150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003162:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800316c:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 800316e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 800317c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_SPI_MspInit+0xcc>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003198:	2304      	movs	r3, #4
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031a0:	2302      	movs	r3, #2
 80031a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80031a8:	2307      	movs	r3, #7
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	480e      	ldr	r0, [pc, #56]	; (80031ec <HAL_SPI_MspInit+0xd0>)
 80031b4:	f003 fa22 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031ca:	2306      	movs	r3, #6
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	4619      	mov	r1, r3
 80031d4:	4806      	ldr	r0, [pc, #24]	; (80031f0 <HAL_SPI_MspInit+0xd4>)
 80031d6:	f003 fa11 	bl	80065fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031da:	bf00      	nop
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40003c00 	.word	0x40003c00
 80031e8:	58024400 	.word	0x58024400
 80031ec:	58020400 	.word	0x58020400
 80031f0:	58020800 	.word	0x58020800

080031f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b0b8      	sub	sp, #224	; 0xe0
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800320c:	f107 0310 	add.w	r3, r7, #16
 8003210:	22bc      	movs	r2, #188	; 0xbc
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f008 fcf9 	bl	800bc0c <memset>
  if(huart->Instance==USART3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_UART_MspInit+0x188>)
 8003220:	4293      	cmp	r3, r2
 8003222:	f040 80a6 	bne.w	8003372 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003226:	2302      	movs	r3, #2
 8003228:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fd77 	bl	8007d28 <HAL_RCCEx_PeriphCLKConfig>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003240:	f7ff fa5e 	bl	8002700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003244:	4b4e      	ldr	r3, [pc, #312]	; (8003380 <HAL_UART_MspInit+0x18c>)
 8003246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800324a:	4a4d      	ldr	r2, [pc, #308]	; (8003380 <HAL_UART_MspInit+0x18c>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003254:	4b4a      	ldr	r3, [pc, #296]	; (8003380 <HAL_UART_MspInit+0x18c>)
 8003256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800325a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_UART_MspInit+0x18c>)
 8003264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003268:	4a45      	ldr	r2, [pc, #276]	; (8003380 <HAL_UART_MspInit+0x18c>)
 800326a:	f043 0308 	orr.w	r3, r3, #8
 800326e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_UART_MspInit+0x18c>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003280:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800329a:	2307      	movs	r3, #7
 800329c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032a4:	4619      	mov	r1, r3
 80032a6:	4837      	ldr	r0, [pc, #220]	; (8003384 <HAL_UART_MspInit+0x190>)
 80032a8:	f003 f9a8 	bl	80065fc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032ae:	4a37      	ldr	r2, [pc, #220]	; (800338c <HAL_UART_MspInit+0x198>)
 80032b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80032b2:	4b35      	ldr	r3, [pc, #212]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032b4:	222d      	movs	r2, #45	; 0x2d
 80032b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b8:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032c4:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032de:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80032ec:	4826      	ldr	r0, [pc, #152]	; (8003388 <HAL_UART_MspInit+0x194>)
 80032ee:	f000 fb3b 	bl	8003968 <HAL_DMA_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80032f8:	f7ff fa02 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_UART_MspInit+0x194>)
 8003300:	67da      	str	r2, [r3, #124]	; 0x7c
 8003302:	4a21      	ldr	r2, [pc, #132]	; (8003388 <HAL_UART_MspInit+0x194>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_UART_MspInit+0x19c>)
 800330a:	4a22      	ldr	r2, [pc, #136]	; (8003394 <HAL_UART_MspInit+0x1a0>)
 800330c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_UART_MspInit+0x19c>)
 8003310:	222e      	movs	r2, #46	; 0x2e
 8003312:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003314:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_UART_MspInit+0x19c>)
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_UART_MspInit+0x19c>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_UART_MspInit+0x19c>)
 8003322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003326:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_UART_MspInit+0x19c>)
 800332a:	2200      	movs	r2, #0
 800332c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_UART_MspInit+0x19c>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_UART_MspInit+0x19c>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_UART_MspInit+0x19c>)
 800333c:	2200      	movs	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_UART_MspInit+0x19c>)
 8003342:	2200      	movs	r2, #0
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003346:	4812      	ldr	r0, [pc, #72]	; (8003390 <HAL_UART_MspInit+0x19c>)
 8003348:	f000 fb0e 	bl	8003968 <HAL_DMA_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003352:	f7ff f9d5 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_UART_MspInit+0x19c>)
 800335a:	679a      	str	r2, [r3, #120]	; 0x78
 800335c:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HAL_UART_MspInit+0x19c>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	2027      	movs	r0, #39	; 0x27
 8003368:	f000 fac9 	bl	80038fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800336c:	2027      	movs	r0, #39	; 0x27
 800336e:	f000 fae0 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003372:	bf00      	nop
 8003374:	37e0      	adds	r7, #224	; 0xe0
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40004800 	.word	0x40004800
 8003380:	58024400 	.word	0x58024400
 8003384:	58020c00 	.word	0x58020c00
 8003388:	24000368 	.word	0x24000368
 800338c:	40020028 	.word	0x40020028
 8003390:	240003e0 	.word	0x240003e0
 8003394:	40020070 	.word	0x40020070

08003398 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	; (8003440 <HAL_PCD_MspInit+0xa8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d13d      	bne.n	8003436 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80033ba:	f003 fceb 	bl	8006d94 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_PCD_MspInit+0xac>)
 80033c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c4:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_PCD_MspInit+0xac>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_PCD_MspInit+0xac>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80033dc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80033e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80033ee:	230a      	movs	r3, #10
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	4619      	mov	r1, r3
 80033f8:	4813      	ldr	r0, [pc, #76]	; (8003448 <HAL_PCD_MspInit+0xb0>)
 80033fa:	f003 f8ff 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	480d      	ldr	r0, [pc, #52]	; (8003448 <HAL_PCD_MspInit+0xb0>)
 8003414:	f003 f8f2 	bl	80065fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_PCD_MspInit+0xac>)
 800341a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_PCD_MspInit+0xac>)
 8003420:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003424:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_PCD_MspInit+0xac>)
 800342a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800342e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003436:	bf00      	nop
 8003438:	3728      	adds	r7, #40	; 0x28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40080000 	.word	0x40080000
 8003444:	58024400 	.word	0x58024400
 8003448:	58020000 	.word	0x58020000

0800344c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <NMI_Handler+0x4>

08003452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003456:	e7fe      	b.n	8003456 <HardFault_Handler+0x4>

08003458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800345c:	e7fe      	b.n	800345c <MemManage_Handler+0x4>

0800345e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003462:	e7fe      	b.n	8003462 <BusFault_Handler+0x4>

08003464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003468:	e7fe      	b.n	8003468 <UsageFault_Handler+0x4>

0800346a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003498:	f000 f8f2 	bl	8003680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}

080034a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <DMA1_Stream1_IRQHandler+0x10>)
 80034a6:	f001 fb1f 	bl	8004ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	24000368 	.word	0x24000368

080034b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80034b8:	4802      	ldr	r0, [pc, #8]	; (80034c4 <DMA1_Stream4_IRQHandler+0x10>)
 80034ba:	f001 fb15 	bl	8004ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	240003e0 	.word	0x240003e0

080034c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <USART3_IRQHandler+0x10>)
 80034ce:	f006 fbc5 	bl	8009c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	240002d8 	.word	0x240002d8

080034dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <_sbrk+0x5c>)
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <_sbrk+0x60>)
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <_sbrk+0x64>)
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <_sbrk+0x68>)
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	429a      	cmp	r2, r3
 800350a:	d207      	bcs.n	800351c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800350c:	f008 fb54 	bl	800bbb8 <__errno>
 8003510:	4603      	mov	r3, r0
 8003512:	220c      	movs	r2, #12
 8003514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	e009      	b.n	8003530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <_sbrk+0x64>)
 800352c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	24080000 	.word	0x24080000
 800353c:	00000400 	.word	0x00000400
 8003540:	24000db4 	.word	0x24000db4
 8003544:	24000dd0 	.word	0x24000dd0

08003548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003580 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800354c:	f7fe fc94 	bl	8001e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003550:	480c      	ldr	r0, [pc, #48]	; (8003584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003552:	490d      	ldr	r1, [pc, #52]	; (8003588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003554:	4a0d      	ldr	r2, [pc, #52]	; (800358c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003558:	e002      	b.n	8003560 <LoopCopyDataInit>

0800355a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800355c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355e:	3304      	adds	r3, #4

08003560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003564:	d3f9      	bcc.n	800355a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003568:	4c0a      	ldr	r4, [pc, #40]	; (8003594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800356c:	e001      	b.n	8003572 <LoopFillZerobss>

0800356e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003570:	3204      	adds	r2, #4

08003572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003574:	d3fb      	bcc.n	800356e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003576:	f008 fb25 	bl	800bbc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800357a:	f7fe fd13 	bl	8001fa4 <main>
  bx  lr
 800357e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003580:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003584:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003588:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 800358c:	0800dc10 	.word	0x0800dc10
  ldr r2, =_sbss
 8003590:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8003594:	24000dcc 	.word	0x24000dcc

08003598 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003598:	e7fe      	b.n	8003598 <ADC3_IRQHandler>
	...

0800359c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035a2:	2003      	movs	r0, #3
 80035a4:	f000 f9a0 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035a8:	f004 f9e8 	bl	800797c <HAL_RCC_GetSysClockFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_Init+0x68>)
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	4913      	ldr	r1, [pc, #76]	; (8003608 <HAL_Init+0x6c>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
 80035c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_Init+0x68>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <HAL_Init+0x6c>)
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	4a0b      	ldr	r2, [pc, #44]	; (800360c <HAL_Init+0x70>)
 80035de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035e0:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <HAL_Init+0x74>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035e6:	2000      	movs	r0, #0
 80035e8:	f000 f814 	bl	8003614 <HAL_InitTick>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e002      	b.n	80035fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035f6:	f7ff fca9 	bl	8002f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	0800c64c 	.word	0x0800c64c
 800360c:	24000004 	.word	0x24000004
 8003610:	24000000 	.word	0x24000000

08003614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_InitTick+0x60>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e021      	b.n	800366c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_InitTick+0x64>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_InitTick+0x60>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003636:	fbb3 f3f1 	udiv	r3, r3, r1
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f985 	bl	800394e <HAL_SYSTICK_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00e      	b.n	800366c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d80a      	bhi.n	800366a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003654:	2200      	movs	r2, #0
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f000 f94f 	bl	80038fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_InitTick+0x68>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	2400001c 	.word	0x2400001c
 8003678:	24000000 	.word	0x24000000
 800367c:	24000018 	.word	0x24000018

08003680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_IncTick+0x20>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_IncTick+0x24>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_IncTick+0x24>)
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	2400001c 	.word	0x2400001c
 80036a4:	24000db8 	.word	0x24000db8

080036a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_GetTick+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	24000db8 	.word	0x24000db8

080036c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff ffee 	bl	80036a8 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d005      	beq.n	80036e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_Delay+0x44>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036e6:	bf00      	nop
 80036e8:	f7ff ffde 	bl	80036a8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d8f7      	bhi.n	80036e8 <HAL_Delay+0x28>
  {
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2400001c 	.word	0x2400001c

08003708 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_GetREVID+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0c1b      	lsrs	r3, r3, #16
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	5c001000 	.word	0x5c001000

08003720 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003730:	4904      	ldr	r1, [pc, #16]	; (8003744 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	58000400 	.word	0x58000400

08003748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <__NVIC_SetPriorityGrouping+0x40>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 8003772:	4313      	orrs	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <__NVIC_SetPriorityGrouping+0x40>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	60d3      	str	r3, [r2, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00
 800378c:	05fa0000 	.word	0x05fa0000

08003790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f003 0307 	and.w	r3, r3, #7
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	db0b      	blt.n	80037d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4907      	ldr	r1, [pc, #28]	; (80037e4 <__NVIC_EnableIRQ+0x38>)
 80037c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2001      	movs	r0, #1
 80037ce:	fa00 f202 	lsl.w	r2, r0, r2
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	; (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	f7ff ff8e 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff29 	bl	8003748 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff40 	bl	8003790 <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff90 	bl	800383c <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5f 	bl	80037e8 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff33 	bl	80037ac <__NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffa4 	bl	80038a4 <SysTick_Config>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7ff fe9a 	bl	80036a8 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e316      	b.n	8003fae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a66      	ldr	r2, [pc, #408]	; (8003b20 <HAL_DMA_Init+0x1b8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04a      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a65      	ldr	r2, [pc, #404]	; (8003b24 <HAL_DMA_Init+0x1bc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d045      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a63      	ldr	r2, [pc, #396]	; (8003b28 <HAL_DMA_Init+0x1c0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d040      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a62      	ldr	r2, [pc, #392]	; (8003b2c <HAL_DMA_Init+0x1c4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d03b      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a60      	ldr	r2, [pc, #384]	; (8003b30 <HAL_DMA_Init+0x1c8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d036      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a5f      	ldr	r2, [pc, #380]	; (8003b34 <HAL_DMA_Init+0x1cc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d031      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5d      	ldr	r2, [pc, #372]	; (8003b38 <HAL_DMA_Init+0x1d0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02c      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a5c      	ldr	r2, [pc, #368]	; (8003b3c <HAL_DMA_Init+0x1d4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d027      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a5a      	ldr	r2, [pc, #360]	; (8003b40 <HAL_DMA_Init+0x1d8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a59      	ldr	r2, [pc, #356]	; (8003b44 <HAL_DMA_Init+0x1dc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d01d      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a57      	ldr	r2, [pc, #348]	; (8003b48 <HAL_DMA_Init+0x1e0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a56      	ldr	r2, [pc, #344]	; (8003b4c <HAL_DMA_Init+0x1e4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a54      	ldr	r2, [pc, #336]	; (8003b50 <HAL_DMA_Init+0x1e8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a53      	ldr	r2, [pc, #332]	; (8003b54 <HAL_DMA_Init+0x1ec>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a51      	ldr	r2, [pc, #324]	; (8003b58 <HAL_DMA_Init+0x1f0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_Init+0xb8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a50      	ldr	r2, [pc, #320]	; (8003b5c <HAL_DMA_Init+0x1f4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_DMA_Init+0xbc>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_DMA_Init+0xbe>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 813b 	beq.w	8003ca2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a37      	ldr	r2, [pc, #220]	; (8003b20 <HAL_DMA_Init+0x1b8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04a      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a36      	ldr	r2, [pc, #216]	; (8003b24 <HAL_DMA_Init+0x1bc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d045      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a34      	ldr	r2, [pc, #208]	; (8003b28 <HAL_DMA_Init+0x1c0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d040      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a33      	ldr	r2, [pc, #204]	; (8003b2c <HAL_DMA_Init+0x1c4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d03b      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a31      	ldr	r2, [pc, #196]	; (8003b30 <HAL_DMA_Init+0x1c8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d036      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a30      	ldr	r2, [pc, #192]	; (8003b34 <HAL_DMA_Init+0x1cc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d031      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <HAL_DMA_Init+0x1d0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02c      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2d      	ldr	r2, [pc, #180]	; (8003b3c <HAL_DMA_Init+0x1d4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d027      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_DMA_Init+0x1d8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <HAL_DMA_Init+0x1dc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01d      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a28      	ldr	r2, [pc, #160]	; (8003b48 <HAL_DMA_Init+0x1e0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <HAL_DMA_Init+0x1e4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <HAL_DMA_Init+0x1e8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <HAL_DMA_Init+0x1ec>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <HAL_DMA_Init+0x1f0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_Init+0x174>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <HAL_DMA_Init+0x1f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d108      	bne.n	8003aee <HAL_DMA_Init+0x186>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e007      	b.n	8003afe <HAL_DMA_Init+0x196>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003afe:	e02f      	b.n	8003b60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b00:	f7ff fdd2 	bl	80036a8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	d928      	bls.n	8003b60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2203      	movs	r2, #3
 8003b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e246      	b.n	8003fae <HAL_DMA_Init+0x646>
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	40020040 	.word	0x40020040
 8003b2c:	40020058 	.word	0x40020058
 8003b30:	40020070 	.word	0x40020070
 8003b34:	40020088 	.word	0x40020088
 8003b38:	400200a0 	.word	0x400200a0
 8003b3c:	400200b8 	.word	0x400200b8
 8003b40:	40020410 	.word	0x40020410
 8003b44:	40020428 	.word	0x40020428
 8003b48:	40020440 	.word	0x40020440
 8003b4c:	40020458 	.word	0x40020458
 8003b50:	40020470 	.word	0x40020470
 8003b54:	40020488 	.word	0x40020488
 8003b58:	400204a0 	.word	0x400204a0
 8003b5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1c8      	bne.n	8003b00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4b83      	ldr	r3, [pc, #524]	; (8003d88 <HAL_DMA_Init+0x420>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d107      	bne.n	8003bc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003bc4:	4b71      	ldr	r3, [pc, #452]	; (8003d8c <HAL_DMA_Init+0x424>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b71      	ldr	r3, [pc, #452]	; (8003d90 <HAL_DMA_Init+0x428>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd0:	d328      	bcc.n	8003c24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b28      	cmp	r3, #40	; 0x28
 8003bd8:	d903      	bls.n	8003be2 <HAL_DMA_Init+0x27a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b2e      	cmp	r3, #46	; 0x2e
 8003be0:	d917      	bls.n	8003c12 <HAL_DMA_Init+0x2aa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b3e      	cmp	r3, #62	; 0x3e
 8003be8:	d903      	bls.n	8003bf2 <HAL_DMA_Init+0x28a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b42      	cmp	r3, #66	; 0x42
 8003bf0:	d90f      	bls.n	8003c12 <HAL_DMA_Init+0x2aa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b46      	cmp	r3, #70	; 0x46
 8003bf8:	d903      	bls.n	8003c02 <HAL_DMA_Init+0x29a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b48      	cmp	r3, #72	; 0x48
 8003c00:	d907      	bls.n	8003c12 <HAL_DMA_Init+0x2aa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b4e      	cmp	r3, #78	; 0x4e
 8003c08:	d905      	bls.n	8003c16 <HAL_DMA_Init+0x2ae>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b52      	cmp	r3, #82	; 0x52
 8003c10:	d801      	bhi.n	8003c16 <HAL_DMA_Init+0x2ae>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_DMA_Init+0x2b0>
 8003c16:	2300      	movs	r3, #0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0307 	bic.w	r3, r3, #7
 8003c3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d117      	bne.n	8003c7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 ff1d 	bl	8005aa0 <DMA_CheckFifoParam>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2240      	movs	r2, #64	; 0x40
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e197      	b.n	8003fae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f001 fe58 	bl	800593c <DMA_CalcBaseAndBitshift>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	223f      	movs	r2, #63	; 0x3f
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	e0cd      	b.n	8003e3e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a3b      	ldr	r2, [pc, #236]	; (8003d94 <HAL_DMA_Init+0x42c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_Init+0x38a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a39      	ldr	r2, [pc, #228]	; (8003d98 <HAL_DMA_Init+0x430>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_DMA_Init+0x38a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <HAL_DMA_Init+0x434>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_Init+0x38a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a36      	ldr	r2, [pc, #216]	; (8003da0 <HAL_DMA_Init+0x438>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_DMA_Init+0x38a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a35      	ldr	r2, [pc, #212]	; (8003da4 <HAL_DMA_Init+0x43c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_DMA_Init+0x38a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a33      	ldr	r2, [pc, #204]	; (8003da8 <HAL_DMA_Init+0x440>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_DMA_Init+0x38a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a32      	ldr	r2, [pc, #200]	; (8003dac <HAL_DMA_Init+0x444>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_Init+0x38a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <HAL_DMA_Init+0x448>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_DMA_Init+0x38e>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_DMA_Init+0x390>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8097 	beq.w	8003e2c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <HAL_DMA_Init+0x42c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d021      	beq.n	8003d4c <HAL_DMA_Init+0x3e4>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a22      	ldr	r2, [pc, #136]	; (8003d98 <HAL_DMA_Init+0x430>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01c      	beq.n	8003d4c <HAL_DMA_Init+0x3e4>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <HAL_DMA_Init+0x434>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d017      	beq.n	8003d4c <HAL_DMA_Init+0x3e4>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_DMA_Init+0x438>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d012      	beq.n	8003d4c <HAL_DMA_Init+0x3e4>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_DMA_Init+0x43c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00d      	beq.n	8003d4c <HAL_DMA_Init+0x3e4>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1c      	ldr	r2, [pc, #112]	; (8003da8 <HAL_DMA_Init+0x440>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d008      	beq.n	8003d4c <HAL_DMA_Init+0x3e4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_DMA_Init+0x444>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <HAL_DMA_Init+0x3e4>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <HAL_DMA_Init+0x448>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <HAL_DMA_Init+0x44c>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d020      	beq.n	8003db8 <HAL_DMA_Init+0x450>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b80      	cmp	r3, #128	; 0x80
 8003d7c:	d102      	bne.n	8003d84 <HAL_DMA_Init+0x41c>
 8003d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d82:	e01a      	b.n	8003dba <HAL_DMA_Init+0x452>
 8003d84:	2300      	movs	r3, #0
 8003d86:	e018      	b.n	8003dba <HAL_DMA_Init+0x452>
 8003d88:	fe10803f 	.word	0xfe10803f
 8003d8c:	5c001000 	.word	0x5c001000
 8003d90:	ffff0000 	.word	0xffff0000
 8003d94:	58025408 	.word	0x58025408
 8003d98:	5802541c 	.word	0x5802541c
 8003d9c:	58025430 	.word	0x58025430
 8003da0:	58025444 	.word	0x58025444
 8003da4:	58025458 	.word	0x58025458
 8003da8:	5802546c 	.word	0x5802546c
 8003dac:	58025480 	.word	0x58025480
 8003db0:	58025494 	.word	0x58025494
 8003db4:	fffe000f 	.word	0xfffe000f
 8003db8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003de0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003de8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b6e      	ldr	r3, [pc, #440]	; (8003fb8 <HAL_DMA_Init+0x650>)
 8003e00:	4413      	add	r3, r2
 8003e02:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_DMA_Init+0x654>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	009a      	lsls	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f001 fd93 	bl	800593c <DMA_CalcBaseAndBitshift>
 8003e16:	4603      	mov	r3, r0
 8003e18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2201      	movs	r2, #1
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	e008      	b.n	8003e3e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2203      	movs	r2, #3
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0b7      	b.n	8003fae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5f      	ldr	r2, [pc, #380]	; (8003fc0 <HAL_DMA_Init+0x658>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d072      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5d      	ldr	r2, [pc, #372]	; (8003fc4 <HAL_DMA_Init+0x65c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d06d      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_DMA_Init+0x660>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d068      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a5a      	ldr	r2, [pc, #360]	; (8003fcc <HAL_DMA_Init+0x664>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d063      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a59      	ldr	r2, [pc, #356]	; (8003fd0 <HAL_DMA_Init+0x668>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d05e      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a57      	ldr	r2, [pc, #348]	; (8003fd4 <HAL_DMA_Init+0x66c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d059      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a56      	ldr	r2, [pc, #344]	; (8003fd8 <HAL_DMA_Init+0x670>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d054      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <HAL_DMA_Init+0x674>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d04f      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a53      	ldr	r2, [pc, #332]	; (8003fe0 <HAL_DMA_Init+0x678>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_DMA_Init+0x67c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a50      	ldr	r2, [pc, #320]	; (8003fe8 <HAL_DMA_Init+0x680>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a4e      	ldr	r2, [pc, #312]	; (8003fec <HAL_DMA_Init+0x684>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a4d      	ldr	r2, [pc, #308]	; (8003ff0 <HAL_DMA_Init+0x688>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a4b      	ldr	r2, [pc, #300]	; (8003ff4 <HAL_DMA_Init+0x68c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4a      	ldr	r2, [pc, #296]	; (8003ff8 <HAL_DMA_Init+0x690>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a48      	ldr	r2, [pc, #288]	; (8003ffc <HAL_DMA_Init+0x694>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a47      	ldr	r2, [pc, #284]	; (8004000 <HAL_DMA_Init+0x698>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a45      	ldr	r2, [pc, #276]	; (8004004 <HAL_DMA_Init+0x69c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a44      	ldr	r2, [pc, #272]	; (8004008 <HAL_DMA_Init+0x6a0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a42      	ldr	r2, [pc, #264]	; (800400c <HAL_DMA_Init+0x6a4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	; (8004010 <HAL_DMA_Init+0x6a8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a3f      	ldr	r2, [pc, #252]	; (8004014 <HAL_DMA_Init+0x6ac>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a3e      	ldr	r2, [pc, #248]	; (8004018 <HAL_DMA_Init+0x6b0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_Init+0x5c6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a3c      	ldr	r2, [pc, #240]	; (800401c <HAL_DMA_Init+0x6b4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_DMA_Init+0x5ca>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_DMA_Init+0x5cc>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d032      	beq.n	8003f9e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f001 fe2d 	bl	8005b98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d102      	bne.n	8003f4c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <HAL_DMA_Init+0x624>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d80c      	bhi.n	8003f8c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f001 feaa 	bl	8005ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	e008      	b.n	8003f9e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	a7fdabf8 	.word	0xa7fdabf8
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	58025408 	.word	0x58025408
 8004004:	5802541c 	.word	0x5802541c
 8004008:	58025430 	.word	0x58025430
 800400c:	58025444 	.word	0x58025444
 8004010:	58025458 	.word	0x58025458
 8004014:	5802546c 	.word	0x5802546c
 8004018:	58025480 	.word	0x58025480
 800401c:	58025494 	.word	0x58025494

08004020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004028:	f7ff fb3e 	bl	80036a8 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e2dc      	b.n	80045f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d008      	beq.n	8004056 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e2cd      	b.n	80045f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a76      	ldr	r2, [pc, #472]	; (8004234 <HAL_DMA_Abort+0x214>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d04a      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a74      	ldr	r2, [pc, #464]	; (8004238 <HAL_DMA_Abort+0x218>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d045      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a73      	ldr	r2, [pc, #460]	; (800423c <HAL_DMA_Abort+0x21c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d040      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a71      	ldr	r2, [pc, #452]	; (8004240 <HAL_DMA_Abort+0x220>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d03b      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a70      	ldr	r2, [pc, #448]	; (8004244 <HAL_DMA_Abort+0x224>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d036      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <HAL_DMA_Abort+0x228>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d031      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6d      	ldr	r2, [pc, #436]	; (800424c <HAL_DMA_Abort+0x22c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d02c      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6b      	ldr	r2, [pc, #428]	; (8004250 <HAL_DMA_Abort+0x230>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d027      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6a      	ldr	r2, [pc, #424]	; (8004254 <HAL_DMA_Abort+0x234>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a68      	ldr	r2, [pc, #416]	; (8004258 <HAL_DMA_Abort+0x238>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a67      	ldr	r2, [pc, #412]	; (800425c <HAL_DMA_Abort+0x23c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a65      	ldr	r2, [pc, #404]	; (8004260 <HAL_DMA_Abort+0x240>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a64      	ldr	r2, [pc, #400]	; (8004264 <HAL_DMA_Abort+0x244>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a62      	ldr	r2, [pc, #392]	; (8004268 <HAL_DMA_Abort+0x248>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a61      	ldr	r2, [pc, #388]	; (800426c <HAL_DMA_Abort+0x24c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_DMA_Abort+0xd6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5f      	ldr	r2, [pc, #380]	; (8004270 <HAL_DMA_Abort+0x250>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <HAL_DMA_Abort+0xda>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_DMA_Abort+0xdc>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 021e 	bic.w	r2, r2, #30
 800410e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800411e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e00a      	b.n	800413e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 020e 	bic.w	r2, r2, #14
 8004136:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3c      	ldr	r2, [pc, #240]	; (8004234 <HAL_DMA_Abort+0x214>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d072      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3a      	ldr	r2, [pc, #232]	; (8004238 <HAL_DMA_Abort+0x218>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d06d      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a39      	ldr	r2, [pc, #228]	; (800423c <HAL_DMA_Abort+0x21c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d068      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a37      	ldr	r2, [pc, #220]	; (8004240 <HAL_DMA_Abort+0x220>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d063      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a36      	ldr	r2, [pc, #216]	; (8004244 <HAL_DMA_Abort+0x224>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d05e      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a34      	ldr	r2, [pc, #208]	; (8004248 <HAL_DMA_Abort+0x228>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d059      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a33      	ldr	r2, [pc, #204]	; (800424c <HAL_DMA_Abort+0x22c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d054      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a31      	ldr	r2, [pc, #196]	; (8004250 <HAL_DMA_Abort+0x230>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d04f      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a30      	ldr	r2, [pc, #192]	; (8004254 <HAL_DMA_Abort+0x234>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d04a      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <HAL_DMA_Abort+0x238>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d045      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2d      	ldr	r2, [pc, #180]	; (800425c <HAL_DMA_Abort+0x23c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d040      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <HAL_DMA_Abort+0x240>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d03b      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <HAL_DMA_Abort+0x244>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d036      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a28      	ldr	r2, [pc, #160]	; (8004268 <HAL_DMA_Abort+0x248>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a27      	ldr	r2, [pc, #156]	; (800426c <HAL_DMA_Abort+0x24c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d02c      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <HAL_DMA_Abort+0x250>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d027      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a24      	ldr	r2, [pc, #144]	; (8004274 <HAL_DMA_Abort+0x254>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d022      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a22      	ldr	r2, [pc, #136]	; (8004278 <HAL_DMA_Abort+0x258>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01d      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a21      	ldr	r2, [pc, #132]	; (800427c <HAL_DMA_Abort+0x25c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_DMA_Abort+0x260>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <HAL_DMA_Abort+0x264>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_DMA_Abort+0x268>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1b      	ldr	r2, [pc, #108]	; (800428c <HAL_DMA_Abort+0x26c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_DMA_Abort+0x20e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a19      	ldr	r2, [pc, #100]	; (8004290 <HAL_DMA_Abort+0x270>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d132      	bne.n	8004294 <HAL_DMA_Abort+0x274>
 800422e:	2301      	movs	r3, #1
 8004230:	e031      	b.n	8004296 <HAL_DMA_Abort+0x276>
 8004232:	bf00      	nop
 8004234:	40020010 	.word	0x40020010
 8004238:	40020028 	.word	0x40020028
 800423c:	40020040 	.word	0x40020040
 8004240:	40020058 	.word	0x40020058
 8004244:	40020070 	.word	0x40020070
 8004248:	40020088 	.word	0x40020088
 800424c:	400200a0 	.word	0x400200a0
 8004250:	400200b8 	.word	0x400200b8
 8004254:	40020410 	.word	0x40020410
 8004258:	40020428 	.word	0x40020428
 800425c:	40020440 	.word	0x40020440
 8004260:	40020458 	.word	0x40020458
 8004264:	40020470 	.word	0x40020470
 8004268:	40020488 	.word	0x40020488
 800426c:	400204a0 	.word	0x400204a0
 8004270:	400204b8 	.word	0x400204b8
 8004274:	58025408 	.word	0x58025408
 8004278:	5802541c 	.word	0x5802541c
 800427c:	58025430 	.word	0x58025430
 8004280:	58025444 	.word	0x58025444
 8004284:	58025458 	.word	0x58025458
 8004288:	5802546c 	.word	0x5802546c
 800428c:	58025480 	.word	0x58025480
 8004290:	58025494 	.word	0x58025494
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6d      	ldr	r2, [pc, #436]	; (8004464 <HAL_DMA_Abort+0x444>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d04a      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a6b      	ldr	r2, [pc, #428]	; (8004468 <HAL_DMA_Abort+0x448>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d045      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6a      	ldr	r2, [pc, #424]	; (800446c <HAL_DMA_Abort+0x44c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d040      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a68      	ldr	r2, [pc, #416]	; (8004470 <HAL_DMA_Abort+0x450>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d03b      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a67      	ldr	r2, [pc, #412]	; (8004474 <HAL_DMA_Abort+0x454>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d036      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a65      	ldr	r2, [pc, #404]	; (8004478 <HAL_DMA_Abort+0x458>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d031      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a64      	ldr	r2, [pc, #400]	; (800447c <HAL_DMA_Abort+0x45c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d02c      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a62      	ldr	r2, [pc, #392]	; (8004480 <HAL_DMA_Abort+0x460>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d027      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a61      	ldr	r2, [pc, #388]	; (8004484 <HAL_DMA_Abort+0x464>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d022      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a5f      	ldr	r2, [pc, #380]	; (8004488 <HAL_DMA_Abort+0x468>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01d      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a5e      	ldr	r2, [pc, #376]	; (800448c <HAL_DMA_Abort+0x46c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d018      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5c      	ldr	r2, [pc, #368]	; (8004490 <HAL_DMA_Abort+0x470>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a5b      	ldr	r2, [pc, #364]	; (8004494 <HAL_DMA_Abort+0x474>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a59      	ldr	r2, [pc, #356]	; (8004498 <HAL_DMA_Abort+0x478>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a58      	ldr	r2, [pc, #352]	; (800449c <HAL_DMA_Abort+0x47c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_DMA_Abort+0x32a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a56      	ldr	r2, [pc, #344]	; (80044a0 <HAL_DMA_Abort+0x480>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <HAL_DMA_Abort+0x33c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e007      	b.n	800436c <HAL_DMA_Abort+0x34c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800436c:	e013      	b.n	8004396 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800436e:	f7ff f99b 	bl	80036a8 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b05      	cmp	r3, #5
 800437a:	d90c      	bls.n	8004396 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2203      	movs	r2, #3
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e12d      	b.n	80045f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2f      	ldr	r2, [pc, #188]	; (8004464 <HAL_DMA_Abort+0x444>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d04a      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2d      	ldr	r2, [pc, #180]	; (8004468 <HAL_DMA_Abort+0x448>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d045      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <HAL_DMA_Abort+0x44c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d040      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2a      	ldr	r2, [pc, #168]	; (8004470 <HAL_DMA_Abort+0x450>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d03b      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a29      	ldr	r2, [pc, #164]	; (8004474 <HAL_DMA_Abort+0x454>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d036      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a27      	ldr	r2, [pc, #156]	; (8004478 <HAL_DMA_Abort+0x458>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d031      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a26      	ldr	r2, [pc, #152]	; (800447c <HAL_DMA_Abort+0x45c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d02c      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <HAL_DMA_Abort+0x460>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d027      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a23      	ldr	r2, [pc, #140]	; (8004484 <HAL_DMA_Abort+0x464>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d022      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a21      	ldr	r2, [pc, #132]	; (8004488 <HAL_DMA_Abort+0x468>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01d      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a20      	ldr	r2, [pc, #128]	; (800448c <HAL_DMA_Abort+0x46c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <HAL_DMA_Abort+0x470>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <HAL_DMA_Abort+0x474>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_DMA_Abort+0x478>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1a      	ldr	r2, [pc, #104]	; (800449c <HAL_DMA_Abort+0x47c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_DMA_Abort+0x422>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <HAL_DMA_Abort+0x480>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_DMA_Abort+0x426>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_DMA_Abort+0x428>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02b      	beq.n	80044a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	223f      	movs	r2, #63	; 0x3f
 800445c:	409a      	lsls	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	e02a      	b.n	80044ba <HAL_DMA_Abort+0x49a>
 8004464:	40020010 	.word	0x40020010
 8004468:	40020028 	.word	0x40020028
 800446c:	40020040 	.word	0x40020040
 8004470:	40020058 	.word	0x40020058
 8004474:	40020070 	.word	0x40020070
 8004478:	40020088 	.word	0x40020088
 800447c:	400200a0 	.word	0x400200a0
 8004480:	400200b8 	.word	0x400200b8
 8004484:	40020410 	.word	0x40020410
 8004488:	40020428 	.word	0x40020428
 800448c:	40020440 	.word	0x40020440
 8004490:	40020458 	.word	0x40020458
 8004494:	40020470 	.word	0x40020470
 8004498:	40020488 	.word	0x40020488
 800449c:	400204a0 	.word	0x400204a0
 80044a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2201      	movs	r2, #1
 80044b4:	409a      	lsls	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a4f      	ldr	r2, [pc, #316]	; (80045fc <HAL_DMA_Abort+0x5dc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d072      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a4d      	ldr	r2, [pc, #308]	; (8004600 <HAL_DMA_Abort+0x5e0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d06d      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a4c      	ldr	r2, [pc, #304]	; (8004604 <HAL_DMA_Abort+0x5e4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d068      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a4a      	ldr	r2, [pc, #296]	; (8004608 <HAL_DMA_Abort+0x5e8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d063      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a49      	ldr	r2, [pc, #292]	; (800460c <HAL_DMA_Abort+0x5ec>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d05e      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a47      	ldr	r2, [pc, #284]	; (8004610 <HAL_DMA_Abort+0x5f0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d059      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_DMA_Abort+0x5f4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d054      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a44      	ldr	r2, [pc, #272]	; (8004618 <HAL_DMA_Abort+0x5f8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d04f      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a43      	ldr	r2, [pc, #268]	; (800461c <HAL_DMA_Abort+0x5fc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d04a      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a41      	ldr	r2, [pc, #260]	; (8004620 <HAL_DMA_Abort+0x600>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d045      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a40      	ldr	r2, [pc, #256]	; (8004624 <HAL_DMA_Abort+0x604>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d040      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3e      	ldr	r2, [pc, #248]	; (8004628 <HAL_DMA_Abort+0x608>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d03b      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a3d      	ldr	r2, [pc, #244]	; (800462c <HAL_DMA_Abort+0x60c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d036      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a3b      	ldr	r2, [pc, #236]	; (8004630 <HAL_DMA_Abort+0x610>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d031      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <HAL_DMA_Abort+0x614>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d02c      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a38      	ldr	r2, [pc, #224]	; (8004638 <HAL_DMA_Abort+0x618>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d027      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a37      	ldr	r2, [pc, #220]	; (800463c <HAL_DMA_Abort+0x61c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d022      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a35      	ldr	r2, [pc, #212]	; (8004640 <HAL_DMA_Abort+0x620>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01d      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a34      	ldr	r2, [pc, #208]	; (8004644 <HAL_DMA_Abort+0x624>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d018      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a32      	ldr	r2, [pc, #200]	; (8004648 <HAL_DMA_Abort+0x628>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a31      	ldr	r2, [pc, #196]	; (800464c <HAL_DMA_Abort+0x62c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00e      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <HAL_DMA_Abort+0x630>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2e      	ldr	r2, [pc, #184]	; (8004654 <HAL_DMA_Abort+0x634>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_DMA_Abort+0x58a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2c      	ldr	r2, [pc, #176]	; (8004658 <HAL_DMA_Abort+0x638>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d101      	bne.n	80045ae <HAL_DMA_Abort+0x58e>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_DMA_Abort+0x590>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d015      	beq.n	80045e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40020010 	.word	0x40020010
 8004600:	40020028 	.word	0x40020028
 8004604:	40020040 	.word	0x40020040
 8004608:	40020058 	.word	0x40020058
 800460c:	40020070 	.word	0x40020070
 8004610:	40020088 	.word	0x40020088
 8004614:	400200a0 	.word	0x400200a0
 8004618:	400200b8 	.word	0x400200b8
 800461c:	40020410 	.word	0x40020410
 8004620:	40020428 	.word	0x40020428
 8004624:	40020440 	.word	0x40020440
 8004628:	40020458 	.word	0x40020458
 800462c:	40020470 	.word	0x40020470
 8004630:	40020488 	.word	0x40020488
 8004634:	400204a0 	.word	0x400204a0
 8004638:	400204b8 	.word	0x400204b8
 800463c:	58025408 	.word	0x58025408
 8004640:	5802541c 	.word	0x5802541c
 8004644:	58025430 	.word	0x58025430
 8004648:	58025444 	.word	0x58025444
 800464c:	58025458 	.word	0x58025458
 8004650:	5802546c 	.word	0x5802546c
 8004654:	58025480 	.word	0x58025480
 8004658:	58025494 	.word	0x58025494

0800465c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e237      	b.n	8004ade <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d004      	beq.n	8004684 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e22c      	b.n	8004ade <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a5c      	ldr	r2, [pc, #368]	; (80047fc <HAL_DMA_Abort_IT+0x1a0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d04a      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a5b      	ldr	r2, [pc, #364]	; (8004800 <HAL_DMA_Abort_IT+0x1a4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d045      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a59      	ldr	r2, [pc, #356]	; (8004804 <HAL_DMA_Abort_IT+0x1a8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d040      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_DMA_Abort_IT+0x1ac>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03b      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a56      	ldr	r2, [pc, #344]	; (800480c <HAL_DMA_Abort_IT+0x1b0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d036      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a55      	ldr	r2, [pc, #340]	; (8004810 <HAL_DMA_Abort_IT+0x1b4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a53      	ldr	r2, [pc, #332]	; (8004814 <HAL_DMA_Abort_IT+0x1b8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02c      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a52      	ldr	r2, [pc, #328]	; (8004818 <HAL_DMA_Abort_IT+0x1bc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d027      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a50      	ldr	r2, [pc, #320]	; (800481c <HAL_DMA_Abort_IT+0x1c0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a4f      	ldr	r2, [pc, #316]	; (8004820 <HAL_DMA_Abort_IT+0x1c4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a4d      	ldr	r2, [pc, #308]	; (8004824 <HAL_DMA_Abort_IT+0x1c8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a4c      	ldr	r2, [pc, #304]	; (8004828 <HAL_DMA_Abort_IT+0x1cc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a4a      	ldr	r2, [pc, #296]	; (800482c <HAL_DMA_Abort_IT+0x1d0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a49      	ldr	r2, [pc, #292]	; (8004830 <HAL_DMA_Abort_IT+0x1d4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a47      	ldr	r2, [pc, #284]	; (8004834 <HAL_DMA_Abort_IT+0x1d8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_DMA_Abort_IT+0xc8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a46      	ldr	r2, [pc, #280]	; (8004838 <HAL_DMA_Abort_IT+0x1dc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_DMA_Abort_IT+0xcc>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_DMA_Abort_IT+0xce>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8086 	beq.w	800483c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2204      	movs	r2, #4
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <HAL_DMA_Abort_IT+0x1a0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d04a      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <HAL_DMA_Abort_IT+0x1a4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d045      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2c      	ldr	r2, [pc, #176]	; (8004804 <HAL_DMA_Abort_IT+0x1a8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d040      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2b      	ldr	r2, [pc, #172]	; (8004808 <HAL_DMA_Abort_IT+0x1ac>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d03b      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a29      	ldr	r2, [pc, #164]	; (800480c <HAL_DMA_Abort_IT+0x1b0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d036      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a28      	ldr	r2, [pc, #160]	; (8004810 <HAL_DMA_Abort_IT+0x1b4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d031      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <HAL_DMA_Abort_IT+0x1b8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02c      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a25      	ldr	r2, [pc, #148]	; (8004818 <HAL_DMA_Abort_IT+0x1bc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a23      	ldr	r2, [pc, #140]	; (800481c <HAL_DMA_Abort_IT+0x1c0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a22      	ldr	r2, [pc, #136]	; (8004820 <HAL_DMA_Abort_IT+0x1c4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a20      	ldr	r2, [pc, #128]	; (8004824 <HAL_DMA_Abort_IT+0x1c8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <HAL_DMA_Abort_IT+0x1cc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_DMA_Abort_IT+0x1d0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <HAL_DMA_Abort_IT+0x1d4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_DMA_Abort_IT+0x1d8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_DMA_Abort_IT+0x17c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_DMA_Abort_IT+0x1dc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d108      	bne.n	80047ea <HAL_DMA_Abort_IT+0x18e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e178      	b.n	8004adc <HAL_DMA_Abort_IT+0x480>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e16f      	b.n	8004adc <HAL_DMA_Abort_IT+0x480>
 80047fc:	40020010 	.word	0x40020010
 8004800:	40020028 	.word	0x40020028
 8004804:	40020040 	.word	0x40020040
 8004808:	40020058 	.word	0x40020058
 800480c:	40020070 	.word	0x40020070
 8004810:	40020088 	.word	0x40020088
 8004814:	400200a0 	.word	0x400200a0
 8004818:	400200b8 	.word	0x400200b8
 800481c:	40020410 	.word	0x40020410
 8004820:	40020428 	.word	0x40020428
 8004824:	40020440 	.word	0x40020440
 8004828:	40020458 	.word	0x40020458
 800482c:	40020470 	.word	0x40020470
 8004830:	40020488 	.word	0x40020488
 8004834:	400204a0 	.word	0x400204a0
 8004838:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 020e 	bic.w	r2, r2, #14
 800484a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6c      	ldr	r2, [pc, #432]	; (8004a04 <HAL_DMA_Abort_IT+0x3a8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d04a      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6b      	ldr	r2, [pc, #428]	; (8004a08 <HAL_DMA_Abort_IT+0x3ac>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d045      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <HAL_DMA_Abort_IT+0x3b0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d040      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a68      	ldr	r2, [pc, #416]	; (8004a10 <HAL_DMA_Abort_IT+0x3b4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d03b      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a66      	ldr	r2, [pc, #408]	; (8004a14 <HAL_DMA_Abort_IT+0x3b8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d036      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_DMA_Abort_IT+0x3bc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d031      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a63      	ldr	r2, [pc, #396]	; (8004a1c <HAL_DMA_Abort_IT+0x3c0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02c      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a62      	ldr	r2, [pc, #392]	; (8004a20 <HAL_DMA_Abort_IT+0x3c4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d027      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a60      	ldr	r2, [pc, #384]	; (8004a24 <HAL_DMA_Abort_IT+0x3c8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d022      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5f      	ldr	r2, [pc, #380]	; (8004a28 <HAL_DMA_Abort_IT+0x3cc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d01d      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a5d      	ldr	r2, [pc, #372]	; (8004a2c <HAL_DMA_Abort_IT+0x3d0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d018      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a5c      	ldr	r2, [pc, #368]	; (8004a30 <HAL_DMA_Abort_IT+0x3d4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5a      	ldr	r2, [pc, #360]	; (8004a34 <HAL_DMA_Abort_IT+0x3d8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <HAL_DMA_Abort_IT+0x3dc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a57      	ldr	r2, [pc, #348]	; (8004a3c <HAL_DMA_Abort_IT+0x3e0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_DMA_Abort_IT+0x290>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a56      	ldr	r2, [pc, #344]	; (8004a40 <HAL_DMA_Abort_IT+0x3e4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <HAL_DMA_Abort_IT+0x2a2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e007      	b.n	800490e <HAL_DMA_Abort_IT+0x2b2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <HAL_DMA_Abort_IT+0x3a8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d072      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <HAL_DMA_Abort_IT+0x3ac>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d06d      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a39      	ldr	r2, [pc, #228]	; (8004a0c <HAL_DMA_Abort_IT+0x3b0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d068      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a37      	ldr	r2, [pc, #220]	; (8004a10 <HAL_DMA_Abort_IT+0x3b4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d063      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a36      	ldr	r2, [pc, #216]	; (8004a14 <HAL_DMA_Abort_IT+0x3b8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d05e      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a34      	ldr	r2, [pc, #208]	; (8004a18 <HAL_DMA_Abort_IT+0x3bc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d059      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a33      	ldr	r2, [pc, #204]	; (8004a1c <HAL_DMA_Abort_IT+0x3c0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d054      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a31      	ldr	r2, [pc, #196]	; (8004a20 <HAL_DMA_Abort_IT+0x3c4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04f      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a30      	ldr	r2, [pc, #192]	; (8004a24 <HAL_DMA_Abort_IT+0x3c8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d04a      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2e      	ldr	r2, [pc, #184]	; (8004a28 <HAL_DMA_Abort_IT+0x3cc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d045      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2d      	ldr	r2, [pc, #180]	; (8004a2c <HAL_DMA_Abort_IT+0x3d0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d040      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2b      	ldr	r2, [pc, #172]	; (8004a30 <HAL_DMA_Abort_IT+0x3d4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d03b      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <HAL_DMA_Abort_IT+0x3d8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d036      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a28      	ldr	r2, [pc, #160]	; (8004a38 <HAL_DMA_Abort_IT+0x3dc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d031      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a27      	ldr	r2, [pc, #156]	; (8004a3c <HAL_DMA_Abort_IT+0x3e0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d02c      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a25      	ldr	r2, [pc, #148]	; (8004a40 <HAL_DMA_Abort_IT+0x3e4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d027      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a24      	ldr	r2, [pc, #144]	; (8004a44 <HAL_DMA_Abort_IT+0x3e8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a22      	ldr	r2, [pc, #136]	; (8004a48 <HAL_DMA_Abort_IT+0x3ec>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01d      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <HAL_DMA_Abort_IT+0x3f0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <HAL_DMA_Abort_IT+0x3f4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <HAL_DMA_Abort_IT+0x3f8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_DMA_Abort_IT+0x3fc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_DMA_Abort_IT+0x400>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_DMA_Abort_IT+0x3a2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_DMA_Abort_IT+0x404>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d132      	bne.n	8004a64 <HAL_DMA_Abort_IT+0x408>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e031      	b.n	8004a66 <HAL_DMA_Abort_IT+0x40a>
 8004a02:	bf00      	nop
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
 8004a44:	58025408 	.word	0x58025408
 8004a48:	5802541c 	.word	0x5802541c
 8004a4c:	58025430 	.word	0x58025430
 8004a50:	58025444 	.word	0x58025444
 8004a54:	58025458 	.word	0x58025458
 8004a58:	5802546c 	.word	0x5802546c
 8004a5c:	58025480 	.word	0x58025480
 8004a60:	58025494 	.word	0x58025494
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d028      	beq.n	8004abc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004aba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop

08004ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004af4:	4b67      	ldr	r3, [pc, #412]	; (8004c94 <HAL_DMA_IRQHandler+0x1ac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <HAL_DMA_IRQHandler+0x1b0>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a5f      	ldr	r2, [pc, #380]	; (8004c9c <HAL_DMA_IRQHandler+0x1b4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d04a      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a5d      	ldr	r2, [pc, #372]	; (8004ca0 <HAL_DMA_IRQHandler+0x1b8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d045      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a5c      	ldr	r2, [pc, #368]	; (8004ca4 <HAL_DMA_IRQHandler+0x1bc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d040      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5a      	ldr	r2, [pc, #360]	; (8004ca8 <HAL_DMA_IRQHandler+0x1c0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d03b      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a59      	ldr	r2, [pc, #356]	; (8004cac <HAL_DMA_IRQHandler+0x1c4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d036      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a57      	ldr	r2, [pc, #348]	; (8004cb0 <HAL_DMA_IRQHandler+0x1c8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d031      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a56      	ldr	r2, [pc, #344]	; (8004cb4 <HAL_DMA_IRQHandler+0x1cc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d02c      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a54      	ldr	r2, [pc, #336]	; (8004cb8 <HAL_DMA_IRQHandler+0x1d0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d027      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a53      	ldr	r2, [pc, #332]	; (8004cbc <HAL_DMA_IRQHandler+0x1d4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d022      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a51      	ldr	r2, [pc, #324]	; (8004cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01d      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a50      	ldr	r2, [pc, #320]	; (8004cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d018      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a4e      	ldr	r2, [pc, #312]	; (8004cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a4d      	ldr	r2, [pc, #308]	; (8004ccc <HAL_DMA_IRQHandler+0x1e4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00e      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a4b      	ldr	r2, [pc, #300]	; (8004cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a4a      	ldr	r2, [pc, #296]	; (8004cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_DMA_IRQHandler+0xd2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a48      	ldr	r2, [pc, #288]	; (8004cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_DMA_IRQHandler+0xd6>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xd8>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 842b 	beq.w	800541c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2208      	movs	r2, #8
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80a2 	beq.w	8004d20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2e      	ldr	r2, [pc, #184]	; (8004c9c <HAL_DMA_IRQHandler+0x1b4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d04a      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2d      	ldr	r2, [pc, #180]	; (8004ca0 <HAL_DMA_IRQHandler+0x1b8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d045      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2b      	ldr	r2, [pc, #172]	; (8004ca4 <HAL_DMA_IRQHandler+0x1bc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d040      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <HAL_DMA_IRQHandler+0x1c0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d03b      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a28      	ldr	r2, [pc, #160]	; (8004cac <HAL_DMA_IRQHandler+0x1c4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d036      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a27      	ldr	r2, [pc, #156]	; (8004cb0 <HAL_DMA_IRQHandler+0x1c8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d031      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <HAL_DMA_IRQHandler+0x1cc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d02c      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <HAL_DMA_IRQHandler+0x1d0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d027      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_DMA_IRQHandler+0x1d4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d022      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d01d      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d018      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <HAL_DMA_IRQHandler+0x1e4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d009      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x194>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d12f      	bne.n	8004cdc <HAL_DMA_IRQHandler+0x1f4>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	e02e      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x208>
 8004c92:	bf00      	nop
 8004c94:	24000000 	.word	0x24000000
 8004c98:	1b4e81b5 	.word	0x1b4e81b5
 8004c9c:	40020010 	.word	0x40020010
 8004ca0:	40020028 	.word	0x40020028
 8004ca4:	40020040 	.word	0x40020040
 8004ca8:	40020058 	.word	0x40020058
 8004cac:	40020070 	.word	0x40020070
 8004cb0:	40020088 	.word	0x40020088
 8004cb4:	400200a0 	.word	0x400200a0
 8004cb8:	400200b8 	.word	0x400200b8
 8004cbc:	40020410 	.word	0x40020410
 8004cc0:	40020428 	.word	0x40020428
 8004cc4:	40020440 	.word	0x40020440
 8004cc8:	40020458 	.word	0x40020458
 8004ccc:	40020470 	.word	0x40020470
 8004cd0:	40020488 	.word	0x40020488
 8004cd4:	400204a0 	.word	0x400204a0
 8004cd8:	400204b8 	.word	0x400204b8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0204 	bic.w	r2, r2, #4
 8004d02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f043 0201 	orr.w	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d06e      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a69      	ldr	r2, [pc, #420]	; (8004ee0 <HAL_DMA_IRQHandler+0x3f8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d04a      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a67      	ldr	r2, [pc, #412]	; (8004ee4 <HAL_DMA_IRQHandler+0x3fc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d045      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a66      	ldr	r2, [pc, #408]	; (8004ee8 <HAL_DMA_IRQHandler+0x400>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d040      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a64      	ldr	r2, [pc, #400]	; (8004eec <HAL_DMA_IRQHandler+0x404>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d03b      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a63      	ldr	r2, [pc, #396]	; (8004ef0 <HAL_DMA_IRQHandler+0x408>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d036      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a61      	ldr	r2, [pc, #388]	; (8004ef4 <HAL_DMA_IRQHandler+0x40c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d031      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a60      	ldr	r2, [pc, #384]	; (8004ef8 <HAL_DMA_IRQHandler+0x410>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d02c      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a5e      	ldr	r2, [pc, #376]	; (8004efc <HAL_DMA_IRQHandler+0x414>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d027      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a5d      	ldr	r2, [pc, #372]	; (8004f00 <HAL_DMA_IRQHandler+0x418>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a5b      	ldr	r2, [pc, #364]	; (8004f04 <HAL_DMA_IRQHandler+0x41c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5a      	ldr	r2, [pc, #360]	; (8004f08 <HAL_DMA_IRQHandler+0x420>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a58      	ldr	r2, [pc, #352]	; (8004f0c <HAL_DMA_IRQHandler+0x424>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a57      	ldr	r2, [pc, #348]	; (8004f10 <HAL_DMA_IRQHandler+0x428>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a55      	ldr	r2, [pc, #340]	; (8004f14 <HAL_DMA_IRQHandler+0x42c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a54      	ldr	r2, [pc, #336]	; (8004f18 <HAL_DMA_IRQHandler+0x430>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x2ee>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a52      	ldr	r2, [pc, #328]	; (8004f1c <HAL_DMA_IRQHandler+0x434>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10a      	bne.n	8004dec <HAL_DMA_IRQHandler+0x304>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf14      	ite	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	2300      	moveq	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e003      	b.n	8004df4 <HAL_DMA_IRQHandler+0x30c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2201      	movs	r2, #1
 8004e02:	409a      	lsls	r2, r3
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f043 0202 	orr.w	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 808f 	beq.w	8004f48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <HAL_DMA_IRQHandler+0x3f8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d04a      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <HAL_DMA_IRQHandler+0x3fc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d045      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <HAL_DMA_IRQHandler+0x400>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d040      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a27      	ldr	r2, [pc, #156]	; (8004eec <HAL_DMA_IRQHandler+0x404>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d03b      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <HAL_DMA_IRQHandler+0x408>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d036      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <HAL_DMA_IRQHandler+0x40c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d031      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <HAL_DMA_IRQHandler+0x410>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d02c      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a21      	ldr	r2, [pc, #132]	; (8004efc <HAL_DMA_IRQHandler+0x414>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d027      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <HAL_DMA_IRQHandler+0x418>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d022      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <HAL_DMA_IRQHandler+0x41c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <HAL_DMA_IRQHandler+0x420>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d018      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <HAL_DMA_IRQHandler+0x424>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_DMA_IRQHandler+0x428>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <HAL_DMA_IRQHandler+0x42c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <HAL_DMA_IRQHandler+0x430>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_DMA_IRQHandler+0x3e2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <HAL_DMA_IRQHandler+0x434>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d12a      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x438>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	e023      	b.n	8004f28 <HAL_DMA_IRQHandler+0x440>
 8004ee0:	40020010 	.word	0x40020010
 8004ee4:	40020028 	.word	0x40020028
 8004ee8:	40020040 	.word	0x40020040
 8004eec:	40020058 	.word	0x40020058
 8004ef0:	40020070 	.word	0x40020070
 8004ef4:	40020088 	.word	0x40020088
 8004ef8:	400200a0 	.word	0x400200a0
 8004efc:	400200b8 	.word	0x400200b8
 8004f00:	40020410 	.word	0x40020410
 8004f04:	40020428 	.word	0x40020428
 8004f08:	40020440 	.word	0x40020440
 8004f0c:	40020458 	.word	0x40020458
 8004f10:	40020470 	.word	0x40020470
 8004f14:	40020488 	.word	0x40020488
 8004f18:	400204a0 	.word	0x400204a0
 8004f1c:	400204b8 	.word	0x400204b8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00d      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2204      	movs	r2, #4
 8004f36:	409a      	lsls	r2, r3
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	f043 0204 	orr.w	r2, r3, #4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2210      	movs	r2, #16
 8004f52:	409a      	lsls	r2, r3
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80a6 	beq.w	80050aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a85      	ldr	r2, [pc, #532]	; (8005178 <HAL_DMA_IRQHandler+0x690>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d04a      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a83      	ldr	r2, [pc, #524]	; (800517c <HAL_DMA_IRQHandler+0x694>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d045      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a82      	ldr	r2, [pc, #520]	; (8005180 <HAL_DMA_IRQHandler+0x698>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d040      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a80      	ldr	r2, [pc, #512]	; (8005184 <HAL_DMA_IRQHandler+0x69c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a7f      	ldr	r2, [pc, #508]	; (8005188 <HAL_DMA_IRQHandler+0x6a0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d036      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a7d      	ldr	r2, [pc, #500]	; (800518c <HAL_DMA_IRQHandler+0x6a4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7c      	ldr	r2, [pc, #496]	; (8005190 <HAL_DMA_IRQHandler+0x6a8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d02c      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a7a      	ldr	r2, [pc, #488]	; (8005194 <HAL_DMA_IRQHandler+0x6ac>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d027      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a79      	ldr	r2, [pc, #484]	; (8005198 <HAL_DMA_IRQHandler+0x6b0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a77      	ldr	r2, [pc, #476]	; (800519c <HAL_DMA_IRQHandler+0x6b4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a76      	ldr	r2, [pc, #472]	; (80051a0 <HAL_DMA_IRQHandler+0x6b8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a74      	ldr	r2, [pc, #464]	; (80051a4 <HAL_DMA_IRQHandler+0x6bc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a73      	ldr	r2, [pc, #460]	; (80051a8 <HAL_DMA_IRQHandler+0x6c0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a71      	ldr	r2, [pc, #452]	; (80051ac <HAL_DMA_IRQHandler+0x6c4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a70      	ldr	r2, [pc, #448]	; (80051b0 <HAL_DMA_IRQHandler+0x6c8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x516>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a6e      	ldr	r2, [pc, #440]	; (80051b4 <HAL_DMA_IRQHandler+0x6cc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10a      	bne.n	8005014 <HAL_DMA_IRQHandler+0x52c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e009      	b.n	8005028 <HAL_DMA_IRQHandler+0x540>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	bf14      	ite	ne
 8005022:	2301      	movne	r3, #1
 8005024:	2300      	moveq	r3, #0
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d03e      	beq.n	80050aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2210      	movs	r2, #16
 8005036:	409a      	lsls	r2, r3
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d108      	bne.n	800506a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d024      	beq.n	80050aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
 8005068:	e01f      	b.n	80050aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01b      	beq.n	80050aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
 800507a:	e016      	b.n	80050aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0208 	bic.w	r2, r2, #8
 8005098:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2220      	movs	r2, #32
 80050b4:	409a      	lsls	r2, r3
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8110 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <HAL_DMA_IRQHandler+0x690>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d04a      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2b      	ldr	r2, [pc, #172]	; (800517c <HAL_DMA_IRQHandler+0x694>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d045      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a29      	ldr	r2, [pc, #164]	; (8005180 <HAL_DMA_IRQHandler+0x698>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d040      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a28      	ldr	r2, [pc, #160]	; (8005184 <HAL_DMA_IRQHandler+0x69c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d03b      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a26      	ldr	r2, [pc, #152]	; (8005188 <HAL_DMA_IRQHandler+0x6a0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d036      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a25      	ldr	r2, [pc, #148]	; (800518c <HAL_DMA_IRQHandler+0x6a4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d031      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a23      	ldr	r2, [pc, #140]	; (8005190 <HAL_DMA_IRQHandler+0x6a8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02c      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a22      	ldr	r2, [pc, #136]	; (8005194 <HAL_DMA_IRQHandler+0x6ac>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d027      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a20      	ldr	r2, [pc, #128]	; (8005198 <HAL_DMA_IRQHandler+0x6b0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_DMA_IRQHandler+0x6b4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d01d      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <HAL_DMA_IRQHandler+0x6b8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <HAL_DMA_IRQHandler+0x6bc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1a      	ldr	r2, [pc, #104]	; (80051a8 <HAL_DMA_IRQHandler+0x6c0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a19      	ldr	r2, [pc, #100]	; (80051ac <HAL_DMA_IRQHandler+0x6c4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <HAL_DMA_IRQHandler+0x6c8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_DMA_IRQHandler+0x678>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <HAL_DMA_IRQHandler+0x6cc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d12b      	bne.n	80051b8 <HAL_DMA_IRQHandler+0x6d0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	bf14      	ite	ne
 800516e:	2301      	movne	r3, #1
 8005170:	2300      	moveq	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	e02a      	b.n	80051cc <HAL_DMA_IRQHandler+0x6e4>
 8005176:	bf00      	nop
 8005178:	40020010 	.word	0x40020010
 800517c:	40020028 	.word	0x40020028
 8005180:	40020040 	.word	0x40020040
 8005184:	40020058 	.word	0x40020058
 8005188:	40020070 	.word	0x40020070
 800518c:	40020088 	.word	0x40020088
 8005190:	400200a0 	.word	0x400200a0
 8005194:	400200b8 	.word	0x400200b8
 8005198:	40020410 	.word	0x40020410
 800519c:	40020428 	.word	0x40020428
 80051a0:	40020440 	.word	0x40020440
 80051a4:	40020458 	.word	0x40020458
 80051a8:	40020470 	.word	0x40020470
 80051ac:	40020488 	.word	0x40020488
 80051b0:	400204a0 	.word	0x400204a0
 80051b4:	400204b8 	.word	0x400204b8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf14      	ite	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	2300      	moveq	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8087 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2220      	movs	r2, #32
 80051dc:	409a      	lsls	r2, r3
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d139      	bne.n	8005262 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0216 	bic.w	r2, r2, #22
 80051fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800520c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d103      	bne.n	800521e <HAL_DMA_IRQHandler+0x736>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0208 	bic.w	r2, r2, #8
 800522c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	223f      	movs	r2, #63	; 0x3f
 8005238:	409a      	lsls	r2, r3
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 834a 	beq.w	80058ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
          }
          return;
 8005260:	e344      	b.n	80058ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d018      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d108      	bne.n	8005290 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	2b00      	cmp	r3, #0
 8005284:	d02c      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
 800528e:	e027      	b.n	80052e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d023      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
 80052a0:	e01e      	b.n	80052e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10f      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0210 	bic.w	r2, r2, #16
 80052be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8306 	beq.w	80058f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8088 	beq.w	8005408 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2204      	movs	r2, #4
 80052fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a7a      	ldr	r2, [pc, #488]	; (80054f0 <HAL_DMA_IRQHandler+0xa08>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d04a      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a79      	ldr	r2, [pc, #484]	; (80054f4 <HAL_DMA_IRQHandler+0xa0c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d045      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a77      	ldr	r2, [pc, #476]	; (80054f8 <HAL_DMA_IRQHandler+0xa10>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d040      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a76      	ldr	r2, [pc, #472]	; (80054fc <HAL_DMA_IRQHandler+0xa14>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d03b      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a74      	ldr	r2, [pc, #464]	; (8005500 <HAL_DMA_IRQHandler+0xa18>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d036      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a73      	ldr	r2, [pc, #460]	; (8005504 <HAL_DMA_IRQHandler+0xa1c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d031      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a71      	ldr	r2, [pc, #452]	; (8005508 <HAL_DMA_IRQHandler+0xa20>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d02c      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a70      	ldr	r2, [pc, #448]	; (800550c <HAL_DMA_IRQHandler+0xa24>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d027      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a6e      	ldr	r2, [pc, #440]	; (8005510 <HAL_DMA_IRQHandler+0xa28>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d022      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a6d      	ldr	r2, [pc, #436]	; (8005514 <HAL_DMA_IRQHandler+0xa2c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d01d      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a6b      	ldr	r2, [pc, #428]	; (8005518 <HAL_DMA_IRQHandler+0xa30>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a6a      	ldr	r2, [pc, #424]	; (800551c <HAL_DMA_IRQHandler+0xa34>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a68      	ldr	r2, [pc, #416]	; (8005520 <HAL_DMA_IRQHandler+0xa38>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a67      	ldr	r2, [pc, #412]	; (8005524 <HAL_DMA_IRQHandler+0xa3c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a65      	ldr	r2, [pc, #404]	; (8005528 <HAL_DMA_IRQHandler+0xa40>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_DMA_IRQHandler+0x8b8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a64      	ldr	r2, [pc, #400]	; (800552c <HAL_DMA_IRQHandler+0xa44>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d108      	bne.n	80053b2 <HAL_DMA_IRQHandler+0x8ca>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e007      	b.n	80053c2 <HAL_DMA_IRQHandler+0x8da>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d307      	bcc.n	80053de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f2      	bne.n	80053c2 <HAL_DMA_IRQHandler+0x8da>
 80053dc:	e000      	b.n	80053e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80053de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2203      	movs	r2, #3
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80053f6:	e003      	b.n	8005400 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8272 	beq.w	80058f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
 800541a:	e26c      	b.n	80058f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a43      	ldr	r2, [pc, #268]	; (8005530 <HAL_DMA_IRQHandler+0xa48>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d022      	beq.n	800546c <HAL_DMA_IRQHandler+0x984>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a42      	ldr	r2, [pc, #264]	; (8005534 <HAL_DMA_IRQHandler+0xa4c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d01d      	beq.n	800546c <HAL_DMA_IRQHandler+0x984>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a40      	ldr	r2, [pc, #256]	; (8005538 <HAL_DMA_IRQHandler+0xa50>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d018      	beq.n	800546c <HAL_DMA_IRQHandler+0x984>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a3f      	ldr	r2, [pc, #252]	; (800553c <HAL_DMA_IRQHandler+0xa54>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_DMA_IRQHandler+0x984>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a3d      	ldr	r2, [pc, #244]	; (8005540 <HAL_DMA_IRQHandler+0xa58>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00e      	beq.n	800546c <HAL_DMA_IRQHandler+0x984>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a3c      	ldr	r2, [pc, #240]	; (8005544 <HAL_DMA_IRQHandler+0xa5c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_DMA_IRQHandler+0x984>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a3a      	ldr	r2, [pc, #232]	; (8005548 <HAL_DMA_IRQHandler+0xa60>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_DMA_IRQHandler+0x984>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a39      	ldr	r2, [pc, #228]	; (800554c <HAL_DMA_IRQHandler+0xa64>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_DMA_IRQHandler+0x988>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_DMA_IRQHandler+0x98a>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 823f 	beq.w	80058f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2204      	movs	r2, #4
 800548a:	409a      	lsls	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4013      	ands	r3, r2
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 80cd 	beq.w	8005630 <HAL_DMA_IRQHandler+0xb48>
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80c7 	beq.w	8005630 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	2204      	movs	r2, #4
 80054ac:	409a      	lsls	r2, r3
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d049      	beq.n	8005550 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8210 	beq.w	80058f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d8:	e20a      	b.n	80058f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8206 	beq.w	80058f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ec:	e200      	b.n	80058f0 <HAL_DMA_IRQHandler+0xe08>
 80054ee:	bf00      	nop
 80054f0:	40020010 	.word	0x40020010
 80054f4:	40020028 	.word	0x40020028
 80054f8:	40020040 	.word	0x40020040
 80054fc:	40020058 	.word	0x40020058
 8005500:	40020070 	.word	0x40020070
 8005504:	40020088 	.word	0x40020088
 8005508:	400200a0 	.word	0x400200a0
 800550c:	400200b8 	.word	0x400200b8
 8005510:	40020410 	.word	0x40020410
 8005514:	40020428 	.word	0x40020428
 8005518:	40020440 	.word	0x40020440
 800551c:	40020458 	.word	0x40020458
 8005520:	40020470 	.word	0x40020470
 8005524:	40020488 	.word	0x40020488
 8005528:	400204a0 	.word	0x400204a0
 800552c:	400204b8 	.word	0x400204b8
 8005530:	58025408 	.word	0x58025408
 8005534:	5802541c 	.word	0x5802541c
 8005538:	58025430 	.word	0x58025430
 800553c:	58025444 	.word	0x58025444
 8005540:	58025458 	.word	0x58025458
 8005544:	5802546c 	.word	0x5802546c
 8005548:	58025480 	.word	0x58025480
 800554c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d160      	bne.n	800561c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a7f      	ldr	r2, [pc, #508]	; (800575c <HAL_DMA_IRQHandler+0xc74>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d04a      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <HAL_DMA_IRQHandler+0xc78>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d045      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7c      	ldr	r2, [pc, #496]	; (8005764 <HAL_DMA_IRQHandler+0xc7c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d040      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a7a      	ldr	r2, [pc, #488]	; (8005768 <HAL_DMA_IRQHandler+0xc80>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d03b      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a79      	ldr	r2, [pc, #484]	; (800576c <HAL_DMA_IRQHandler+0xc84>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d036      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a77      	ldr	r2, [pc, #476]	; (8005770 <HAL_DMA_IRQHandler+0xc88>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d031      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a76      	ldr	r2, [pc, #472]	; (8005774 <HAL_DMA_IRQHandler+0xc8c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d02c      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a74      	ldr	r2, [pc, #464]	; (8005778 <HAL_DMA_IRQHandler+0xc90>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d027      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a73      	ldr	r2, [pc, #460]	; (800577c <HAL_DMA_IRQHandler+0xc94>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a71      	ldr	r2, [pc, #452]	; (8005780 <HAL_DMA_IRQHandler+0xc98>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01d      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a70      	ldr	r2, [pc, #448]	; (8005784 <HAL_DMA_IRQHandler+0xc9c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d018      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	; (8005788 <HAL_DMA_IRQHandler+0xca0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a6d      	ldr	r2, [pc, #436]	; (800578c <HAL_DMA_IRQHandler+0xca4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6b      	ldr	r2, [pc, #428]	; (8005790 <HAL_DMA_IRQHandler+0xca8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6a      	ldr	r2, [pc, #424]	; (8005794 <HAL_DMA_IRQHandler+0xcac>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_DMA_IRQHandler+0xb12>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a68      	ldr	r2, [pc, #416]	; (8005798 <HAL_DMA_IRQHandler+0xcb0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <HAL_DMA_IRQHandler+0xb24>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0208 	bic.w	r2, r2, #8
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e007      	b.n	800561c <HAL_DMA_IRQHandler+0xb34>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8165 	beq.w	80058f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800562e:	e15f      	b.n	80058f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2202      	movs	r2, #2
 800563a:	409a      	lsls	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80c5 	beq.w	80057d0 <HAL_DMA_IRQHandler+0xce8>
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80bf 	beq.w	80057d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2202      	movs	r2, #2
 800565c:	409a      	lsls	r2, r3
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d018      	beq.n	800569e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 813a 	beq.w	80058f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005688:	e134      	b.n	80058f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8130 	beq.w	80058f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800569c:	e12a      	b.n	80058f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f040 8089 	bne.w	80057bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2b      	ldr	r2, [pc, #172]	; (800575c <HAL_DMA_IRQHandler+0xc74>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d04a      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a29      	ldr	r2, [pc, #164]	; (8005760 <HAL_DMA_IRQHandler+0xc78>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d045      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a28      	ldr	r2, [pc, #160]	; (8005764 <HAL_DMA_IRQHandler+0xc7c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d040      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <HAL_DMA_IRQHandler+0xc80>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d03b      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a25      	ldr	r2, [pc, #148]	; (800576c <HAL_DMA_IRQHandler+0xc84>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d036      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a23      	ldr	r2, [pc, #140]	; (8005770 <HAL_DMA_IRQHandler+0xc88>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d031      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a22      	ldr	r2, [pc, #136]	; (8005774 <HAL_DMA_IRQHandler+0xc8c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d02c      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <HAL_DMA_IRQHandler+0xc90>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d027      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_DMA_IRQHandler+0xc94>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d022      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_DMA_IRQHandler+0xc98>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01d      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_DMA_IRQHandler+0xc9c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d018      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1a      	ldr	r2, [pc, #104]	; (8005788 <HAL_DMA_IRQHandler+0xca0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_DMA_IRQHandler+0xca4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00e      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a17      	ldr	r2, [pc, #92]	; (8005790 <HAL_DMA_IRQHandler+0xca8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a16      	ldr	r2, [pc, #88]	; (8005794 <HAL_DMA_IRQHandler+0xcac>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_DMA_IRQHandler+0xc62>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <HAL_DMA_IRQHandler+0xcb0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d128      	bne.n	800579c <HAL_DMA_IRQHandler+0xcb4>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0214 	bic.w	r2, r2, #20
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e027      	b.n	80057ac <HAL_DMA_IRQHandler+0xcc4>
 800575c:	40020010 	.word	0x40020010
 8005760:	40020028 	.word	0x40020028
 8005764:	40020040 	.word	0x40020040
 8005768:	40020058 	.word	0x40020058
 800576c:	40020070 	.word	0x40020070
 8005770:	40020088 	.word	0x40020088
 8005774:	400200a0 	.word	0x400200a0
 8005778:	400200b8 	.word	0x400200b8
 800577c:	40020410 	.word	0x40020410
 8005780:	40020428 	.word	0x40020428
 8005784:	40020440 	.word	0x40020440
 8005788:	40020458 	.word	0x40020458
 800578c:	40020470 	.word	0x40020470
 8005790:	40020488 	.word	0x40020488
 8005794:	400204a0 	.word	0x400204a0
 8005798:	400204b8 	.word	0x400204b8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 020a 	bic.w	r2, r2, #10
 80057aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8097 	beq.w	80058f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ce:	e091      	b.n	80058f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2208      	movs	r2, #8
 80057da:	409a      	lsls	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8088 	beq.w	80058f6 <HAL_DMA_IRQHandler+0xe0e>
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8082 	beq.w	80058f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a41      	ldr	r2, [pc, #260]	; (80058fc <HAL_DMA_IRQHandler+0xe14>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d04a      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a3f      	ldr	r2, [pc, #252]	; (8005900 <HAL_DMA_IRQHandler+0xe18>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d045      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a3e      	ldr	r2, [pc, #248]	; (8005904 <HAL_DMA_IRQHandler+0xe1c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d040      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3c      	ldr	r2, [pc, #240]	; (8005908 <HAL_DMA_IRQHandler+0xe20>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d03b      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3b      	ldr	r2, [pc, #236]	; (800590c <HAL_DMA_IRQHandler+0xe24>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d036      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a39      	ldr	r2, [pc, #228]	; (8005910 <HAL_DMA_IRQHandler+0xe28>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d031      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a38      	ldr	r2, [pc, #224]	; (8005914 <HAL_DMA_IRQHandler+0xe2c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d02c      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a36      	ldr	r2, [pc, #216]	; (8005918 <HAL_DMA_IRQHandler+0xe30>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d027      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a35      	ldr	r2, [pc, #212]	; (800591c <HAL_DMA_IRQHandler+0xe34>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a33      	ldr	r2, [pc, #204]	; (8005920 <HAL_DMA_IRQHandler+0xe38>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01d      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a32      	ldr	r2, [pc, #200]	; (8005924 <HAL_DMA_IRQHandler+0xe3c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d018      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a30      	ldr	r2, [pc, #192]	; (8005928 <HAL_DMA_IRQHandler+0xe40>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a2f      	ldr	r2, [pc, #188]	; (800592c <HAL_DMA_IRQHandler+0xe44>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2d      	ldr	r2, [pc, #180]	; (8005930 <HAL_DMA_IRQHandler+0xe48>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2c      	ldr	r2, [pc, #176]	; (8005934 <HAL_DMA_IRQHandler+0xe4c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_DMA_IRQHandler+0xdaa>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <HAL_DMA_IRQHandler+0xe50>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d108      	bne.n	80058a4 <HAL_DMA_IRQHandler+0xdbc>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 021c 	bic.w	r2, r2, #28
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e007      	b.n	80058b4 <HAL_DMA_IRQHandler+0xdcc>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 020e 	bic.w	r2, r2, #14
 80058b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	4798      	blx	r3
 80058ea:	e004      	b.n	80058f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058f6:	3728      	adds	r7, #40	; 0x28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40020010 	.word	0x40020010
 8005900:	40020028 	.word	0x40020028
 8005904:	40020040 	.word	0x40020040
 8005908:	40020058 	.word	0x40020058
 800590c:	40020070 	.word	0x40020070
 8005910:	40020088 	.word	0x40020088
 8005914:	400200a0 	.word	0x400200a0
 8005918:	400200b8 	.word	0x400200b8
 800591c:	40020410 	.word	0x40020410
 8005920:	40020428 	.word	0x40020428
 8005924:	40020440 	.word	0x40020440
 8005928:	40020458 	.word	0x40020458
 800592c:	40020470 	.word	0x40020470
 8005930:	40020488 	.word	0x40020488
 8005934:	400204a0 	.word	0x400204a0
 8005938:	400204b8 	.word	0x400204b8

0800593c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a42      	ldr	r2, [pc, #264]	; (8005a54 <DMA_CalcBaseAndBitshift+0x118>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d04a      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a41      	ldr	r2, [pc, #260]	; (8005a58 <DMA_CalcBaseAndBitshift+0x11c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d045      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3f      	ldr	r2, [pc, #252]	; (8005a5c <DMA_CalcBaseAndBitshift+0x120>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d040      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a3e      	ldr	r2, [pc, #248]	; (8005a60 <DMA_CalcBaseAndBitshift+0x124>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d03b      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a3c      	ldr	r2, [pc, #240]	; (8005a64 <DMA_CalcBaseAndBitshift+0x128>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d036      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3b      	ldr	r2, [pc, #236]	; (8005a68 <DMA_CalcBaseAndBitshift+0x12c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d031      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a39      	ldr	r2, [pc, #228]	; (8005a6c <DMA_CalcBaseAndBitshift+0x130>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02c      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a38      	ldr	r2, [pc, #224]	; (8005a70 <DMA_CalcBaseAndBitshift+0x134>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d027      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a36      	ldr	r2, [pc, #216]	; (8005a74 <DMA_CalcBaseAndBitshift+0x138>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d022      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a35      	ldr	r2, [pc, #212]	; (8005a78 <DMA_CalcBaseAndBitshift+0x13c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d01d      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a33      	ldr	r2, [pc, #204]	; (8005a7c <DMA_CalcBaseAndBitshift+0x140>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a32      	ldr	r2, [pc, #200]	; (8005a80 <DMA_CalcBaseAndBitshift+0x144>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a30      	ldr	r2, [pc, #192]	; (8005a84 <DMA_CalcBaseAndBitshift+0x148>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00e      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2f      	ldr	r2, [pc, #188]	; (8005a88 <DMA_CalcBaseAndBitshift+0x14c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a2d      	ldr	r2, [pc, #180]	; (8005a8c <DMA_CalcBaseAndBitshift+0x150>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <DMA_CalcBaseAndBitshift+0xa8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a2c      	ldr	r2, [pc, #176]	; (8005a90 <DMA_CalcBaseAndBitshift+0x154>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <DMA_CalcBaseAndBitshift+0xac>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <DMA_CalcBaseAndBitshift+0xae>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d024      	beq.n	8005a38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	3b10      	subs	r3, #16
 80059f6:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <DMA_CalcBaseAndBitshift+0x158>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a08:	5cd3      	ldrb	r3, [r2, r3]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d908      	bls.n	8005a28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <DMA_CalcBaseAndBitshift+0x160>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	1d1a      	adds	r2, r3, #4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	659a      	str	r2, [r3, #88]	; 0x58
 8005a26:	e00d      	b.n	8005a44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <DMA_CalcBaseAndBitshift+0x160>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6593      	str	r3, [r2, #88]	; 0x58
 8005a36:	e005      	b.n	8005a44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40020010 	.word	0x40020010
 8005a58:	40020028 	.word	0x40020028
 8005a5c:	40020040 	.word	0x40020040
 8005a60:	40020058 	.word	0x40020058
 8005a64:	40020070 	.word	0x40020070
 8005a68:	40020088 	.word	0x40020088
 8005a6c:	400200a0 	.word	0x400200a0
 8005a70:	400200b8 	.word	0x400200b8
 8005a74:	40020410 	.word	0x40020410
 8005a78:	40020428 	.word	0x40020428
 8005a7c:	40020440 	.word	0x40020440
 8005a80:	40020458 	.word	0x40020458
 8005a84:	40020470 	.word	0x40020470
 8005a88:	40020488 	.word	0x40020488
 8005a8c:	400204a0 	.word	0x400204a0
 8005a90:	400204b8 	.word	0x400204b8
 8005a94:	aaaaaaab 	.word	0xaaaaaaab
 8005a98:	0800db9c 	.word	0x0800db9c
 8005a9c:	fffffc00 	.word	0xfffffc00

08005aa0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d120      	bne.n	8005af6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d858      	bhi.n	8005b6e <DMA_CheckFifoParam+0xce>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <DMA_CheckFifoParam+0x24>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005ad5 	.word	0x08005ad5
 8005ac8:	08005ae7 	.word	0x08005ae7
 8005acc:	08005ad5 	.word	0x08005ad5
 8005ad0:	08005b6f 	.word	0x08005b6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d048      	beq.n	8005b72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ae4:	e045      	b.n	8005b72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005aee:	d142      	bne.n	8005b76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005af4:	e03f      	b.n	8005b76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afe:	d123      	bne.n	8005b48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d838      	bhi.n	8005b7a <DMA_CheckFifoParam+0xda>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <DMA_CheckFifoParam+0x70>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b21 	.word	0x08005b21
 8005b14:	08005b27 	.word	0x08005b27
 8005b18:	08005b21 	.word	0x08005b21
 8005b1c:	08005b39 	.word	0x08005b39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
        break;
 8005b24:	e030      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d025      	beq.n	8005b7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b36:	e022      	b.n	8005b7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b40:	d11f      	bne.n	8005b82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b46:	e01c      	b.n	8005b82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d902      	bls.n	8005b56 <DMA_CheckFifoParam+0xb6>
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d003      	beq.n	8005b5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005b54:	e018      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
        break;
 8005b5a:	e015      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00e      	beq.n	8005b86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8005b6c:	e00b      	b.n	8005b86 <DMA_CheckFifoParam+0xe6>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e00a      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
        break;
 8005b72:	bf00      	nop
 8005b74:	e008      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
        break;
 8005b76:	bf00      	nop
 8005b78:	e006      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
        break;
 8005b7a:	bf00      	nop
 8005b7c:	e004      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
        break;
 8005b7e:	bf00      	nop
 8005b80:	e002      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
        break;
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <DMA_CheckFifoParam+0xe8>
    break;
 8005b86:	bf00      	nop
    }
  }

  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop

08005b98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a38      	ldr	r2, [pc, #224]	; (8005c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d022      	beq.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a36      	ldr	r2, [pc, #216]	; (8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01d      	beq.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a35      	ldr	r2, [pc, #212]	; (8005c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d018      	beq.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a33      	ldr	r2, [pc, #204]	; (8005c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a32      	ldr	r2, [pc, #200]	; (8005c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00e      	beq.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a30      	ldr	r2, [pc, #192]	; (8005ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2f      	ldr	r2, [pc, #188]	; (8005ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d004      	beq.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2d      	ldr	r2, [pc, #180]	; (8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d101      	bne.n	8005bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01a      	beq.n	8005c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	3b08      	subs	r3, #8
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a24      	ldr	r2, [pc, #144]	; (8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c34:	e024      	b.n	8005c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	3b10      	subs	r3, #16
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d806      	bhi.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d902      	bls.n	8005c5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	461a      	mov	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	2201      	movs	r2, #1
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	58025408 	.word	0x58025408
 8005c90:	5802541c 	.word	0x5802541c
 8005c94:	58025430 	.word	0x58025430
 8005c98:	58025444 	.word	0x58025444
 8005c9c:	58025458 	.word	0x58025458
 8005ca0:	5802546c 	.word	0x5802546c
 8005ca4:	58025480 	.word	0x58025480
 8005ca8:	58025494 	.word	0x58025494
 8005cac:	cccccccd 	.word	0xcccccccd
 8005cb0:	16009600 	.word	0x16009600
 8005cb4:	58025880 	.word	0x58025880
 8005cb8:	aaaaaaab 	.word	0xaaaaaaab
 8005cbc:	400204b8 	.word	0x400204b8
 8005cc0:	4002040f 	.word	0x4002040f
 8005cc4:	10008200 	.word	0x10008200
 8005cc8:	40020880 	.word	0x40020880

08005ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d04a      	beq.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d847      	bhi.n	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d01d      	beq.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a21      	ldr	r2, [pc, #132]	; (8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d101      	bne.n	8005d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005d54:	671a      	str	r2, [r3, #112]	; 0x70
 8005d56:	e009      	b.n	8005d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4b14      	ldr	r3, [pc, #80]	; (8005dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d6a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	2201      	movs	r2, #1
 8005d72:	409a      	lsls	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	58025408 	.word	0x58025408
 8005d88:	5802541c 	.word	0x5802541c
 8005d8c:	58025430 	.word	0x58025430
 8005d90:	58025444 	.word	0x58025444
 8005d94:	58025458 	.word	0x58025458
 8005d98:	5802546c 	.word	0x5802546c
 8005d9c:	58025480 	.word	0x58025480
 8005da0:	58025494 	.word	0x58025494
 8005da4:	1600963f 	.word	0x1600963f
 8005da8:	58025940 	.word	0x58025940
 8005dac:	1000823f 	.word	0x1000823f
 8005db0:	40020940 	.word	0x40020940

08005db4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0cf      	b.n	8005f66 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2223      	movs	r2, #35	; 0x23
 8005dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fd f8d1 	bl	8002f80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dde:	4b64      	ldr	r3, [pc, #400]	; (8005f70 <HAL_ETH_Init+0x1bc>)
 8005de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005de4:	4a62      	ldr	r2, [pc, #392]	; (8005f70 <HAL_ETH_Init+0x1bc>)
 8005de6:	f043 0302 	orr.w	r3, r3, #2
 8005dea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dee:	4b60      	ldr	r3, [pc, #384]	; (8005f70 <HAL_ETH_Init+0x1bc>)
 8005df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7a1b      	ldrb	r3, [r3, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005e04:	2000      	movs	r0, #0
 8005e06:	f7fd fc8b 	bl	8003720 <HAL_SYSCFG_ETHInterfaceSelect>
 8005e0a:	e003      	b.n	8005e14 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005e0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005e10:	f7fd fc86 	bl	8003720 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005e14:	4b57      	ldr	r3, [pc, #348]	; (8005f74 <HAL_ETH_Init+0x1c0>)
 8005e16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e30:	f7fd fc3a 	bl	80036a8 <HAL_GetTick>
 8005e34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e36:	e011      	b.n	8005e5c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005e38:	f7fd fc36 	bl	80036a8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005e46:	d909      	bls.n	8005e5c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	22e0      	movs	r2, #224	; 0xe0
 8005e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e084      	b.n	8005f66 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e4      	bne.n	8005e38 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f886 	bl	8005f80 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005e74:	f001 fefc 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4a3f      	ldr	r2, [pc, #252]	; (8005f78 <HAL_ETH_Init+0x1c4>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	0c9a      	lsrs	r2, r3, #18
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3a01      	subs	r2, #1
 8005e88:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa71 	bl	8006374 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005e9e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005eae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	22e0      	movs	r2, #224	; 0xe0
 8005eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e049      	b.n	8005f66 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005ede:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <HAL_ETH_Init+0x1c8>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6952      	ldr	r2, [r2, #20]
 8005ee6:	0051      	lsls	r1, r2, #1
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ef2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fad9 	bl	80064ae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fb1f 	bl	8006540 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	3305      	adds	r3, #5
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	021a      	lsls	r2, r3, #8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	3303      	adds	r3, #3
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	061a      	lsls	r2, r3, #24
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	3302      	adds	r3, #2
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f40:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f4e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2210      	movs	r2, #16
 8005f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	58024400 	.word	0x58024400
 8005f74:	58000400 	.word	0x58000400
 8005f78:	431bde83 	.word	0x431bde83
 8005f7c:	ffff8001 	.word	0xffff8001

08005f80 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005f9a:	f001 fe69 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8005f9e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4a1e      	ldr	r2, [pc, #120]	; (800601c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d908      	bls.n	8005fba <HAL_ETH_SetMDIOClockRange+0x3a>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d804      	bhi.n	8005fba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e027      	b.n	800600a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4a18      	ldr	r2, [pc, #96]	; (8006020 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d908      	bls.n	8005fd4 <HAL_ETH_SetMDIOClockRange+0x54>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	; (8006024 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d204      	bcs.n	8005fd4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e01a      	b.n	800600a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4a13      	ldr	r2, [pc, #76]	; (8006024 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d303      	bcc.n	8005fe4 <HAL_ETH_SetMDIOClockRange+0x64>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4a12      	ldr	r2, [pc, #72]	; (8006028 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d911      	bls.n	8006008 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4a10      	ldr	r2, [pc, #64]	; (8006028 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d908      	bls.n	8005ffe <HAL_ETH_SetMDIOClockRange+0x7e>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a0f      	ldr	r2, [pc, #60]	; (800602c <HAL_ETH_SetMDIOClockRange+0xac>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d804      	bhi.n	8005ffe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e005      	b.n	800600a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e000      	b.n	800600a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006008:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	01312cff 	.word	0x01312cff
 8006020:	02160ebf 	.word	0x02160ebf
 8006024:	03938700 	.word	0x03938700
 8006028:	05f5e0ff 	.word	0x05f5e0ff
 800602c:	08f0d17f 	.word	0x08f0d17f

08006030 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	791b      	ldrb	r3, [r3, #4]
 8006048:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800604a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	7b1b      	ldrb	r3, [r3, #12]
 8006050:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006052:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	7b5b      	ldrb	r3, [r3, #13]
 8006058:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800605a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	7b9b      	ldrb	r3, [r3, #14]
 8006060:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006062:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	7bdb      	ldrb	r3, [r3, #15]
 8006068:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800606a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	7c12      	ldrb	r2, [r2, #16]
 8006070:	2a00      	cmp	r2, #0
 8006072:	d102      	bne.n	800607a <ETH_SetMACConfig+0x4a>
 8006074:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006078:	e000      	b.n	800607c <ETH_SetMACConfig+0x4c>
 800607a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800607c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	7c52      	ldrb	r2, [r2, #17]
 8006082:	2a00      	cmp	r2, #0
 8006084:	d102      	bne.n	800608c <ETH_SetMACConfig+0x5c>
 8006086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800608a:	e000      	b.n	800608e <ETH_SetMACConfig+0x5e>
 800608c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800608e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	7c9b      	ldrb	r3, [r3, #18]
 8006094:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006096:	431a      	orrs	r2, r3
               macconf->Speed |
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800609c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80060a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	7f1b      	ldrb	r3, [r3, #28]
 80060a8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80060aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	7f5b      	ldrb	r3, [r3, #29]
 80060b0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80060b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	7f92      	ldrb	r2, [r2, #30]
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	d102      	bne.n	80060c2 <ETH_SetMACConfig+0x92>
 80060bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060c0:	e000      	b.n	80060c4 <ETH_SetMACConfig+0x94>
 80060c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80060c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	7fdb      	ldrb	r3, [r3, #31]
 80060ca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80060cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	d102      	bne.n	80060de <ETH_SetMACConfig+0xae>
 80060d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060dc:	e000      	b.n	80060e0 <ETH_SetMACConfig+0xb0>
 80060de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80060e0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80060e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80060f0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4b56      	ldr	r3, [pc, #344]	; (800625c <ETH_SetMACConfig+0x22c>)
 8006102:	4013      	ands	r3, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	68f9      	ldr	r1, [r7, #12]
 800610a:	430b      	orrs	r3, r1
 800610c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800611a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800611c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006124:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006126:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800612e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006130:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006138:	2a00      	cmp	r2, #0
 800613a:	d102      	bne.n	8006142 <ETH_SetMACConfig+0x112>
 800613c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006140:	e000      	b.n	8006144 <ETH_SetMACConfig+0x114>
 8006142:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006144:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	4b42      	ldr	r3, [pc, #264]	; (8006260 <ETH_SetMACConfig+0x230>)
 8006156:	4013      	ands	r3, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	68f9      	ldr	r1, [r7, #12]
 800615e:	430b      	orrs	r3, r1
 8006160:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006168:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	4b3a      	ldr	r3, [pc, #232]	; (8006264 <ETH_SetMACConfig+0x234>)
 800617a:	4013      	ands	r3, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	430b      	orrs	r3, r1
 8006184:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800618c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006192:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800619a:	2a00      	cmp	r2, #0
 800619c:	d101      	bne.n	80061a2 <ETH_SetMACConfig+0x172>
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	e000      	b.n	80061a4 <ETH_SetMACConfig+0x174>
 80061a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80061a4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061b6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80061ba:	4013      	ands	r3, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	68f9      	ldr	r1, [r7, #12]
 80061c2:	430b      	orrs	r3, r1
 80061c4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80061cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80061d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f023 0103 	bic.w	r1, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80061fa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006216:	2a00      	cmp	r2, #0
 8006218:	d101      	bne.n	800621e <ETH_SetMACConfig+0x1ee>
 800621a:	2240      	movs	r2, #64	; 0x40
 800621c:	e000      	b.n	8006220 <ETH_SetMACConfig+0x1f0>
 800621e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006220:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006228:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800622a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006232:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006240:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	430a      	orrs	r2, r1
 800624c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	00048083 	.word	0x00048083
 8006260:	c0f88000 	.word	0xc0f88000
 8006264:	fffffef0 	.word	0xfffffef0

08006268 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b38      	ldr	r3, [pc, #224]	; (8006360 <ETH_SetDMAConfig+0xf8>)
 800627e:	4013      	ands	r3, r2
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	6811      	ldr	r1, [r2, #0]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	430b      	orrs	r3, r1
 800628a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800628e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	791b      	ldrb	r3, [r3, #4]
 8006294:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800629a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	7b1b      	ldrb	r3, [r3, #12]
 80062a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	4b2c      	ldr	r3, [pc, #176]	; (8006364 <ETH_SetDMAConfig+0xfc>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	68f9      	ldr	r1, [r7, #12]
 80062ba:	430b      	orrs	r3, r1
 80062bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062c0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	7b5b      	ldrb	r3, [r3, #13]
 80062c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80062dc:	4b22      	ldr	r3, [pc, #136]	; (8006368 <ETH_SetDMAConfig+0x100>)
 80062de:	4013      	ands	r3, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	68f9      	ldr	r1, [r7, #12]
 80062e6:	430b      	orrs	r3, r1
 80062e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	7d1b      	ldrb	r3, [r3, #20]
 80062f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80062fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	7f5b      	ldrb	r3, [r3, #29]
 8006300:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006312:	4b16      	ldr	r3, [pc, #88]	; (800636c <ETH_SetDMAConfig+0x104>)
 8006314:	4013      	ands	r3, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	430b      	orrs	r3, r1
 800631e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006322:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	7f1b      	ldrb	r3, [r3, #28]
 800632a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <ETH_SetDMAConfig+0x108>)
 8006342:	4013      	ands	r3, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	430b      	orrs	r3, r1
 800634c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006350:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	ffff87fd 	.word	0xffff87fd
 8006364:	ffff2ffe 	.word	0xffff2ffe
 8006368:	fffec000 	.word	0xfffec000
 800636c:	ffc0efef 	.word	0xffc0efef
 8006370:	7fc0ffff 	.word	0x7fc0ffff

08006374 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b0a4      	sub	sp, #144	; 0x90
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006382:	2300      	movs	r3, #0
 8006384:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006386:	2300      	movs	r3, #0
 8006388:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800638c:	2300      	movs	r3, #0
 800638e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80063b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063b4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80063bc:	2300      	movs	r3, #0
 80063be:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80063cc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80063d0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80063d8:	2300      	movs	r3, #0
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80063ee:	2300      	movs	r3, #0
 80063f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80063f6:	2300      	movs	r3, #0
 80063f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006400:	2300      	movs	r3, #0
 8006402:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800640c:	2320      	movs	r3, #32
 800640e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006418:	2300      	movs	r3, #0
 800641a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800641e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006428:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800642a:	2300      	movs	r3, #0
 800642c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006430:	2302      	movs	r3, #2
 8006432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006436:	2300      	movs	r3, #0
 8006438:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800644e:	2300      	movs	r3, #0
 8006450:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fde6 	bl	8006030 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006464:	2301      	movs	r3, #1
 8006466:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006468:	2301      	movs	r3, #1
 800646a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800646c:	2300      	movs	r3, #0
 800646e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006476:	2300      	movs	r3, #0
 8006478:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800647a:	2300      	movs	r3, #0
 800647c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800647e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006482:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006484:	2300      	movs	r3, #0
 8006486:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800648c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800648e:	2300      	movs	r3, #0
 8006490:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006494:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800649a:	f107 0308 	add.w	r3, r7, #8
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff fee1 	bl	8006268 <ETH_SetDMAConfig>
}
 80064a6:	bf00      	nop
 80064a8:	3790      	adds	r7, #144	; 0x90
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e01d      	b.n	80064f8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68d9      	ldr	r1, [r3, #12]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4613      	mov	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4413      	add	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	440b      	add	r3, r1
 80064cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2200      	movs	r2, #0
 80064de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2200      	movs	r2, #0
 80064e4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	3206      	adds	r2, #6
 80064ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d9de      	bls.n	80064bc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650c:	461a      	mov	r2, r3
 800650e:	2303      	movs	r3, #3
 8006510:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006520:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006530:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e023      	b.n	8006596 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6919      	ldr	r1, [r3, #16]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4613      	mov	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	440b      	add	r3, r1
 800655e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2200      	movs	r2, #0
 8006576:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2200      	movs	r2, #0
 800657c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2200      	movs	r2, #0
 8006582:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	3212      	adds	r2, #18
 800658c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d9d8      	bls.n	800654e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c2:	461a      	mov	r2, r3
 80065c4:	2303      	movs	r3, #3
 80065c6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b089      	sub	sp, #36	; 0x24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800660a:	4b89      	ldr	r3, [pc, #548]	; (8006830 <HAL_GPIO_Init+0x234>)
 800660c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800660e:	e194      	b.n	800693a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	2101      	movs	r1, #1
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	4013      	ands	r3, r2
 800661e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8186 	beq.w	8006934 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d005      	beq.n	8006640 <HAL_GPIO_Init+0x44>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d130      	bne.n	80066a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	2203      	movs	r2, #3
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4313      	orrs	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006676:	2201      	movs	r2, #1
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43db      	mvns	r3, r3
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	4013      	ands	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	f003 0201 	and.w	r2, r3, #1
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4313      	orrs	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d017      	beq.n	80066de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	2203      	movs	r2, #3
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d123      	bne.n	8006732 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	08da      	lsrs	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3208      	adds	r2, #8
 80066f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	220f      	movs	r2, #15
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4013      	ands	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	08da      	lsrs	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3208      	adds	r2, #8
 800672c:	69b9      	ldr	r1, [r7, #24]
 800672e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	2203      	movs	r2, #3
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43db      	mvns	r3, r3
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4013      	ands	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0203 	and.w	r2, r3, #3
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4313      	orrs	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80e0 	beq.w	8006934 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006774:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <HAL_GPIO_Init+0x238>)
 8006776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800677a:	4a2e      	ldr	r2, [pc, #184]	; (8006834 <HAL_GPIO_Init+0x238>)
 800677c:	f043 0302 	orr.w	r3, r3, #2
 8006780:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006784:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <HAL_GPIO_Init+0x238>)
 8006786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006792:	4a29      	ldr	r2, [pc, #164]	; (8006838 <HAL_GPIO_Init+0x23c>)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	3302      	adds	r3, #2
 800679a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	220f      	movs	r2, #15
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a20      	ldr	r2, [pc, #128]	; (800683c <HAL_GPIO_Init+0x240>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d052      	beq.n	8006864 <HAL_GPIO_Init+0x268>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <HAL_GPIO_Init+0x244>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d031      	beq.n	800682a <HAL_GPIO_Init+0x22e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <HAL_GPIO_Init+0x248>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02b      	beq.n	8006826 <HAL_GPIO_Init+0x22a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_GPIO_Init+0x24c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d025      	beq.n	8006822 <HAL_GPIO_Init+0x226>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1c      	ldr	r2, [pc, #112]	; (800684c <HAL_GPIO_Init+0x250>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d01f      	beq.n	800681e <HAL_GPIO_Init+0x222>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1b      	ldr	r2, [pc, #108]	; (8006850 <HAL_GPIO_Init+0x254>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d019      	beq.n	800681a <HAL_GPIO_Init+0x21e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <HAL_GPIO_Init+0x258>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d013      	beq.n	8006816 <HAL_GPIO_Init+0x21a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a19      	ldr	r2, [pc, #100]	; (8006858 <HAL_GPIO_Init+0x25c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00d      	beq.n	8006812 <HAL_GPIO_Init+0x216>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a18      	ldr	r2, [pc, #96]	; (800685c <HAL_GPIO_Init+0x260>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d007      	beq.n	800680e <HAL_GPIO_Init+0x212>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <HAL_GPIO_Init+0x264>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d101      	bne.n	800680a <HAL_GPIO_Init+0x20e>
 8006806:	2309      	movs	r3, #9
 8006808:	e02d      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 800680a:	230a      	movs	r3, #10
 800680c:	e02b      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 800680e:	2308      	movs	r3, #8
 8006810:	e029      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 8006812:	2307      	movs	r3, #7
 8006814:	e027      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 8006816:	2306      	movs	r3, #6
 8006818:	e025      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 800681a:	2305      	movs	r3, #5
 800681c:	e023      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 800681e:	2304      	movs	r3, #4
 8006820:	e021      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 8006822:	2303      	movs	r3, #3
 8006824:	e01f      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 8006826:	2302      	movs	r3, #2
 8006828:	e01d      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 800682a:	2301      	movs	r3, #1
 800682c:	e01b      	b.n	8006866 <HAL_GPIO_Init+0x26a>
 800682e:	bf00      	nop
 8006830:	58000080 	.word	0x58000080
 8006834:	58024400 	.word	0x58024400
 8006838:	58000400 	.word	0x58000400
 800683c:	58020000 	.word	0x58020000
 8006840:	58020400 	.word	0x58020400
 8006844:	58020800 	.word	0x58020800
 8006848:	58020c00 	.word	0x58020c00
 800684c:	58021000 	.word	0x58021000
 8006850:	58021400 	.word	0x58021400
 8006854:	58021800 	.word	0x58021800
 8006858:	58021c00 	.word	0x58021c00
 800685c:	58022000 	.word	0x58022000
 8006860:	58022400 	.word	0x58022400
 8006864:	2300      	movs	r3, #0
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	f002 0203 	and.w	r2, r2, #3
 800686c:	0092      	lsls	r2, r2, #2
 800686e:	4093      	lsls	r3, r2
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4313      	orrs	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006876:	4938      	ldr	r1, [pc, #224]	; (8006958 <HAL_GPIO_Init+0x35c>)
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	089b      	lsrs	r3, r3, #2
 800687c:	3302      	adds	r3, #2
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	43db      	mvns	r3, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	43db      	mvns	r3, r3
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4013      	ands	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80068d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4013      	ands	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	43db      	mvns	r3, r3
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	4013      	ands	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	3301      	adds	r3, #1
 8006938:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	f47f ae63 	bne.w	8006610 <HAL_GPIO_Init+0x14>
  }
}
 800694a:	bf00      	nop
 800694c:	bf00      	nop
 800694e:	3724      	adds	r7, #36	; 0x24
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	58000400 	.word	0x58000400

0800695c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	887b      	ldrh	r3, [r7, #2]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	e001      	b.n	800697e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800697a:	2300      	movs	r3, #0
 800697c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
 8006998:	4613      	mov	r3, r2
 800699a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800699c:	787b      	ldrb	r3, [r7, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069a2:	887a      	ldrh	r2, [r7, #2]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069a8:	e003      	b.n	80069b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069aa:	887b      	ldrh	r3, [r7, #2]
 80069ac:	041a      	lsls	r2, r3, #16
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	619a      	str	r2, [r3, #24]
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069d0:	887a      	ldrh	r2, [r7, #2]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4013      	ands	r3, r2
 80069d6:	041a      	lsls	r2, r3, #16
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	43d9      	mvns	r1, r3
 80069dc:	887b      	ldrh	r3, [r7, #2]
 80069de:	400b      	ands	r3, r1
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	619a      	str	r2, [r3, #24]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80069fc:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <HAL_HSEM_FastTake+0x2c>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3320      	adds	r3, #32
 8006a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a06:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <HAL_HSEM_FastTake+0x30>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e000      	b.n	8006a12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	58026400 	.word	0x58026400
 8006a24:	80000300 	.word	0x80000300

08006a28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006a32:	4906      	ldr	r1, [pc, #24]	; (8006a4c <HAL_HSEM_Release+0x24>)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	58026400 	.word	0x58026400

08006a50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a52:	b08f      	sub	sp, #60	; 0x3c
 8006a54:	af0a      	add	r7, sp, #40	; 0x28
 8006a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e116      	b.n	8006c90 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fc fc8b 	bl	8003398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2203      	movs	r2, #3
 8006a86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f004 fded 	bl	800b680 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	687e      	ldr	r6, [r7, #4]
 8006aae:	466d      	mov	r5, sp
 8006ab0:	f106 0410 	add.w	r4, r6, #16
 8006ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006abc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ac0:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ac4:	1d33      	adds	r3, r6, #4
 8006ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ac8:	6838      	ldr	r0, [r7, #0]
 8006aca:	f004 fd6b 	bl	800b5a4 <USB_CoreInit>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0d7      	b.n	8006c90 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f004 fddb 	bl	800b6a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e04a      	b.n	8006b88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006af2:	7bfa      	ldrb	r2, [r7, #15]
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	333d      	adds	r3, #61	; 0x3d
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b06:	7bfa      	ldrb	r2, [r7, #15]
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	333c      	adds	r3, #60	; 0x3c
 8006b16:	7bfa      	ldrb	r2, [r7, #15]
 8006b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b1a:	7bfa      	ldrb	r2, [r7, #15]
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	b298      	uxth	r0, r3
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3344      	adds	r3, #68	; 0x44
 8006b2e:	4602      	mov	r2, r0
 8006b30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b32:	7bfa      	ldrb	r2, [r7, #15]
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	00db      	lsls	r3, r3, #3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	3340      	adds	r3, #64	; 0x40
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b46:	7bfa      	ldrb	r2, [r7, #15]
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	3348      	adds	r3, #72	; 0x48
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b5a:	7bfa      	ldrb	r2, [r7, #15]
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	334c      	adds	r3, #76	; 0x4c
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b6e:	7bfa      	ldrb	r2, [r7, #15]
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	3354      	adds	r3, #84	; 0x54
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	3301      	adds	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
 8006b88:	7bfa      	ldrb	r2, [r7, #15]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d3af      	bcc.n	8006af2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
 8006b96:	e044      	b.n	8006c22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b98:	7bfa      	ldrb	r2, [r7, #15]
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006baa:	2200      	movs	r2, #0
 8006bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006bae:	7bfa      	ldrb	r2, [r7, #15]
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006bc0:	7bfa      	ldrb	r2, [r7, #15]
 8006bc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006bc4:	7bfa      	ldrb	r2, [r7, #15]
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006bda:	7bfa      	ldrb	r2, [r7, #15]
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006bf0:	7bfa      	ldrb	r2, [r7, #15]
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c06:	7bfa      	ldrb	r2, [r7, #15]
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	73fb      	strb	r3, [r7, #15]
 8006c22:	7bfa      	ldrb	r2, [r7, #15]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d3b5      	bcc.n	8006b98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	687e      	ldr	r6, [r7, #4]
 8006c34:	466d      	mov	r5, sp
 8006c36:	f106 0410 	add.w	r4, r6, #16
 8006c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c4a:	1d33      	adds	r3, r6, #4
 8006c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c4e:	6838      	ldr	r0, [r7, #0]
 8006c50:	f004 fd74 	bl	800b73c <USB_DevInit>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e014      	b.n	8006c90 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d102      	bne.n	8006c84 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f80a 	bl	8006c98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f004 ff32 	bl	800baf2 <USB_DevDisconnect>

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_PCDEx_ActivateLPM+0x44>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	10000003 	.word	0x10000003

08006ce0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006ce8:	4b29      	ldr	r3, [pc, #164]	; (8006d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	2b06      	cmp	r3, #6
 8006cf2:	d00a      	beq.n	8006d0a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cf4:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d001      	beq.n	8006d06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e040      	b.n	8006d88 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e03e      	b.n	8006d88 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d0a:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006d12:	491f      	ldr	r1, [pc, #124]	; (8006d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d1a:	f7fc fcc5 	bl	80036a8 <HAL_GetTick>
 8006d1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d20:	e009      	b.n	8006d36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d22:	f7fc fcc1 	bl	80036a8 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d30:	d901      	bls.n	8006d36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e028      	b.n	8006d88 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d36:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d42:	d1ee      	bne.n	8006d22 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b1e      	cmp	r3, #30
 8006d48:	d008      	beq.n	8006d5c <HAL_PWREx_ConfigSupply+0x7c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4e:	d005      	beq.n	8006d5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b1d      	cmp	r3, #29
 8006d54:	d002      	beq.n	8006d5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b2d      	cmp	r3, #45	; 0x2d
 8006d5a:	d114      	bne.n	8006d86 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006d5c:	f7fc fca4 	bl	80036a8 <HAL_GetTick>
 8006d60:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d62:	e009      	b.n	8006d78 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d64:	f7fc fca0 	bl	80036a8 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d72:	d901      	bls.n	8006d78 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e007      	b.n	8006d88 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d84:	d1ee      	bne.n	8006d64 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	58024800 	.word	0x58024800

08006d94 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da2:	60d3      	str	r3, [r2, #12]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	58024800 	.word	0x58024800

08006db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	f000 bc1d 	b.w	8007602 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8087 	beq.w	8006ee4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dd6:	4b99      	ldr	r3, [pc, #612]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006de0:	4b96      	ldr	r3, [pc, #600]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d007      	beq.n	8006dfc <HAL_RCC_OscConfig+0x48>
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	2b18      	cmp	r3, #24
 8006df0:	d110      	bne.n	8006e14 <HAL_RCC_OscConfig+0x60>
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d10b      	bne.n	8006e14 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfc:	4b8f      	ldr	r3, [pc, #572]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d06c      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x12e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d168      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e3f6      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCC_OscConfig+0x78>
 8006e1e:	4b87      	ldr	r3, [pc, #540]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a86      	ldr	r2, [pc, #536]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	e02e      	b.n	8006e8a <HAL_RCC_OscConfig+0xd6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10c      	bne.n	8006e4e <HAL_RCC_OscConfig+0x9a>
 8006e34:	4b81      	ldr	r3, [pc, #516]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a80      	ldr	r2, [pc, #512]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	4b7e      	ldr	r3, [pc, #504]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a7d      	ldr	r2, [pc, #500]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	e01d      	b.n	8006e8a <HAL_RCC_OscConfig+0xd6>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e56:	d10c      	bne.n	8006e72 <HAL_RCC_OscConfig+0xbe>
 8006e58:	4b78      	ldr	r3, [pc, #480]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a77      	ldr	r2, [pc, #476]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4b75      	ldr	r3, [pc, #468]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a74      	ldr	r2, [pc, #464]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	e00b      	b.n	8006e8a <HAL_RCC_OscConfig+0xd6>
 8006e72:	4b72      	ldr	r3, [pc, #456]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a71      	ldr	r2, [pc, #452]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	4b6f      	ldr	r3, [pc, #444]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a6e      	ldr	r2, [pc, #440]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d013      	beq.n	8006eba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e92:	f7fc fc09 	bl	80036a8 <HAL_GetTick>
 8006e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e9a:	f7fc fc05 	bl	80036a8 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b64      	cmp	r3, #100	; 0x64
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e3aa      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006eac:	4b63      	ldr	r3, [pc, #396]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCC_OscConfig+0xe6>
 8006eb8:	e014      	b.n	8006ee4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fc fbf5 	bl	80036a8 <HAL_GetTick>
 8006ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ec2:	f7fc fbf1 	bl	80036a8 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b64      	cmp	r3, #100	; 0x64
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e396      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ed4:	4b59      	ldr	r3, [pc, #356]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x10e>
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80cb 	beq.w	8007088 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ef2:	4b52      	ldr	r3, [pc, #328]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006efa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006efc:	4b4f      	ldr	r3, [pc, #316]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <HAL_RCC_OscConfig+0x164>
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	2b18      	cmp	r3, #24
 8006f0c:	d156      	bne.n	8006fbc <HAL_RCC_OscConfig+0x208>
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d151      	bne.n	8006fbc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f18:	4b48      	ldr	r3, [pc, #288]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <HAL_RCC_OscConfig+0x17c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e368      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f30:	4b42      	ldr	r3, [pc, #264]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f023 0219 	bic.w	r2, r3, #25
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	493f      	ldr	r1, [pc, #252]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f42:	f7fc fbb1 	bl	80036a8 <HAL_GetTick>
 8006f46:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f4a:	f7fc fbad 	bl	80036a8 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e352      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f5c:	4b37      	ldr	r3, [pc, #220]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f68:	f7fc fbce 	bl	8003708 <HAL_GetREVID>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d817      	bhi.n	8006fa6 <HAL_RCC_OscConfig+0x1f2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b40      	cmp	r3, #64	; 0x40
 8006f7c:	d108      	bne.n	8006f90 <HAL_RCC_OscConfig+0x1dc>
 8006f7e:	4b2f      	ldr	r3, [pc, #188]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f86:	4a2d      	ldr	r2, [pc, #180]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f8e:	e07b      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f90:	4b2a      	ldr	r3, [pc, #168]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	031b      	lsls	r3, r3, #12
 8006f9e:	4927      	ldr	r1, [pc, #156]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fa4:	e070      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa6:	4b25      	ldr	r3, [pc, #148]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	061b      	lsls	r3, r3, #24
 8006fb4:	4921      	ldr	r1, [pc, #132]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fba:	e065      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d048      	beq.n	8007056 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fc4:	4b1d      	ldr	r3, [pc, #116]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f023 0219 	bic.w	r2, r3, #25
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	491a      	ldr	r1, [pc, #104]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd6:	f7fc fb67 	bl	80036a8 <HAL_GetTick>
 8006fda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fde:	f7fc fb63 	bl	80036a8 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e308      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ff0:	4b12      	ldr	r3, [pc, #72]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ffc:	f7fc fb84 	bl	8003708 <HAL_GetREVID>
 8007000:	4603      	mov	r3, r0
 8007002:	f241 0203 	movw	r2, #4099	; 0x1003
 8007006:	4293      	cmp	r3, r2
 8007008:	d81a      	bhi.n	8007040 <HAL_RCC_OscConfig+0x28c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d108      	bne.n	8007024 <HAL_RCC_OscConfig+0x270>
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <HAL_RCC_OscConfig+0x288>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007020:	6053      	str	r3, [r2, #4]
 8007022:	e031      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	031b      	lsls	r3, r3, #12
 8007032:	4902      	ldr	r1, [pc, #8]	; (800703c <HAL_RCC_OscConfig+0x288>)
 8007034:	4313      	orrs	r3, r2
 8007036:	604b      	str	r3, [r1, #4]
 8007038:	e026      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
 8007040:	4b9a      	ldr	r3, [pc, #616]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	061b      	lsls	r3, r3, #24
 800704e:	4997      	ldr	r1, [pc, #604]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007050:	4313      	orrs	r3, r2
 8007052:	604b      	str	r3, [r1, #4]
 8007054:	e018      	b.n	8007088 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007056:	4b95      	ldr	r3, [pc, #596]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a94      	ldr	r2, [pc, #592]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007062:	f7fc fb21 	bl	80036a8 <HAL_GetTick>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800706a:	f7fc fb1d 	bl	80036a8 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e2c2      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800707c:	4b8b      	ldr	r3, [pc, #556]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f0      	bne.n	800706a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80a9 	beq.w	80071e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007096:	4b85      	ldr	r3, [pc, #532]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800709e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070a0:	4b82      	ldr	r3, [pc, #520]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d007      	beq.n	80070bc <HAL_RCC_OscConfig+0x308>
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b18      	cmp	r3, #24
 80070b0:	d13a      	bne.n	8007128 <HAL_RCC_OscConfig+0x374>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d135      	bne.n	8007128 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070bc:	4b7b      	ldr	r3, [pc, #492]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_OscConfig+0x320>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d001      	beq.n	80070d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e296      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070d4:	f7fc fb18 	bl	8003708 <HAL_GetREVID>
 80070d8:	4603      	mov	r3, r0
 80070da:	f241 0203 	movw	r2, #4099	; 0x1003
 80070de:	4293      	cmp	r3, r2
 80070e0:	d817      	bhi.n	8007112 <HAL_RCC_OscConfig+0x35e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d108      	bne.n	80070fc <HAL_RCC_OscConfig+0x348>
 80070ea:	4b70      	ldr	r3, [pc, #448]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070f2:	4a6e      	ldr	r2, [pc, #440]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070fa:	e075      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070fc:	4b6b      	ldr	r3, [pc, #428]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	069b      	lsls	r3, r3, #26
 800710a:	4968      	ldr	r1, [pc, #416]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800710c:	4313      	orrs	r3, r2
 800710e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007110:	e06a      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007112:	4b66      	ldr	r3, [pc, #408]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	061b      	lsls	r3, r3, #24
 8007120:	4962      	ldr	r1, [pc, #392]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007122:	4313      	orrs	r3, r2
 8007124:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007126:	e05f      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d042      	beq.n	80071b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007130:	4b5e      	ldr	r3, [pc, #376]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a5d      	ldr	r2, [pc, #372]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fc fab4 	bl	80036a8 <HAL_GetTick>
 8007140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007144:	f7fc fab0 	bl	80036a8 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e255      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007156:	4b55      	ldr	r3, [pc, #340]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007162:	f7fc fad1 	bl	8003708 <HAL_GetREVID>
 8007166:	4603      	mov	r3, r0
 8007168:	f241 0203 	movw	r2, #4099	; 0x1003
 800716c:	4293      	cmp	r3, r2
 800716e:	d817      	bhi.n	80071a0 <HAL_RCC_OscConfig+0x3ec>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	2b20      	cmp	r3, #32
 8007176:	d108      	bne.n	800718a <HAL_RCC_OscConfig+0x3d6>
 8007178:	4b4c      	ldr	r3, [pc, #304]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007180:	4a4a      	ldr	r2, [pc, #296]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007186:	6053      	str	r3, [r2, #4]
 8007188:	e02e      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
 800718a:	4b48      	ldr	r3, [pc, #288]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	069b      	lsls	r3, r3, #26
 8007198:	4944      	ldr	r1, [pc, #272]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800719a:	4313      	orrs	r3, r2
 800719c:	604b      	str	r3, [r1, #4]
 800719e:	e023      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
 80071a0:	4b42      	ldr	r3, [pc, #264]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	493f      	ldr	r1, [pc, #252]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60cb      	str	r3, [r1, #12]
 80071b4:	e018      	b.n	80071e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071b6:	4b3d      	ldr	r3, [pc, #244]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a3c      	ldr	r2, [pc, #240]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c2:	f7fc fa71 	bl	80036a8 <HAL_GetTick>
 80071c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071c8:	e008      	b.n	80071dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071ca:	f7fc fa6d 	bl	80036a8 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e212      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071dc:	4b33      	ldr	r3, [pc, #204]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f0      	bne.n	80071ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d036      	beq.n	8007262 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d019      	beq.n	8007230 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071fc:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 80071fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007200:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007208:	f7fc fa4e 	bl	80036a8 <HAL_GetTick>
 800720c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007210:	f7fc fa4a 	bl	80036a8 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1ef      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007222:	4b22      	ldr	r3, [pc, #136]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x45c>
 800722e:	e018      	b.n	8007262 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007230:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007234:	4a1d      	ldr	r2, [pc, #116]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723c:	f7fc fa34 	bl	80036a8 <HAL_GetTick>
 8007240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007244:	f7fc fa30 	bl	80036a8 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e1d5      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d039      	beq.n	80072e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01c      	beq.n	80072b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a0c      	ldr	r2, [pc, #48]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800727c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007282:	f7fc fa11 	bl	80036a8 <HAL_GetTick>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800728a:	f7fc fa0d 	bl	80036a8 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e1b2      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800729c:	4b03      	ldr	r3, [pc, #12]	; (80072ac <HAL_RCC_OscConfig+0x4f8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x4d6>
 80072a8:	e01b      	b.n	80072e2 <HAL_RCC_OscConfig+0x52e>
 80072aa:	bf00      	nop
 80072ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072b0:	4b9b      	ldr	r3, [pc, #620]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a9a      	ldr	r2, [pc, #616]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80072b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072bc:	f7fc f9f4 	bl	80036a8 <HAL_GetTick>
 80072c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072c4:	f7fc f9f0 	bl	80036a8 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e195      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072d6:	4b92      	ldr	r3, [pc, #584]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f0      	bne.n	80072c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8081 	beq.w	80073f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072f0:	4b8c      	ldr	r3, [pc, #560]	; (8007524 <HAL_RCC_OscConfig+0x770>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a8b      	ldr	r2, [pc, #556]	; (8007524 <HAL_RCC_OscConfig+0x770>)
 80072f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072fc:	f7fc f9d4 	bl	80036a8 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007304:	f7fc f9d0 	bl	80036a8 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b64      	cmp	r3, #100	; 0x64
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e175      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007316:	4b83      	ldr	r3, [pc, #524]	; (8007524 <HAL_RCC_OscConfig+0x770>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d106      	bne.n	8007338 <HAL_RCC_OscConfig+0x584>
 800732a:	4b7d      	ldr	r3, [pc, #500]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	4a7c      	ldr	r2, [pc, #496]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	6713      	str	r3, [r2, #112]	; 0x70
 8007336:	e02d      	b.n	8007394 <HAL_RCC_OscConfig+0x5e0>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <HAL_RCC_OscConfig+0x5a6>
 8007340:	4b77      	ldr	r3, [pc, #476]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007344:	4a76      	ldr	r2, [pc, #472]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	6713      	str	r3, [r2, #112]	; 0x70
 800734c:	4b74      	ldr	r3, [pc, #464]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	4a73      	ldr	r2, [pc, #460]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007352:	f023 0304 	bic.w	r3, r3, #4
 8007356:	6713      	str	r3, [r2, #112]	; 0x70
 8007358:	e01c      	b.n	8007394 <HAL_RCC_OscConfig+0x5e0>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b05      	cmp	r3, #5
 8007360:	d10c      	bne.n	800737c <HAL_RCC_OscConfig+0x5c8>
 8007362:	4b6f      	ldr	r3, [pc, #444]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	4a6e      	ldr	r2, [pc, #440]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007368:	f043 0304 	orr.w	r3, r3, #4
 800736c:	6713      	str	r3, [r2, #112]	; 0x70
 800736e:	4b6c      	ldr	r3, [pc, #432]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	4a6b      	ldr	r2, [pc, #428]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	6713      	str	r3, [r2, #112]	; 0x70
 800737a:	e00b      	b.n	8007394 <HAL_RCC_OscConfig+0x5e0>
 800737c:	4b68      	ldr	r3, [pc, #416]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	4a67      	ldr	r2, [pc, #412]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	6713      	str	r3, [r2, #112]	; 0x70
 8007388:	4b65      	ldr	r3, [pc, #404]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	4a64      	ldr	r2, [pc, #400]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800738e:	f023 0304 	bic.w	r3, r3, #4
 8007392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d015      	beq.n	80073c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739c:	f7fc f984 	bl	80036a8 <HAL_GetTick>
 80073a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073a2:	e00a      	b.n	80073ba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073a4:	f7fc f980 	bl	80036a8 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e123      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073ba:	4b59      	ldr	r3, [pc, #356]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0ee      	beq.n	80073a4 <HAL_RCC_OscConfig+0x5f0>
 80073c6:	e014      	b.n	80073f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c8:	f7fc f96e 	bl	80036a8 <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073ce:	e00a      	b.n	80073e6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d0:	f7fc f96a 	bl	80036a8 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f241 3288 	movw	r2, #5000	; 0x1388
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e10d      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073e6:	4b4e      	ldr	r3, [pc, #312]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1ee      	bne.n	80073d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8102 	beq.w	8007600 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073fc:	4b48      	ldr	r3, [pc, #288]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007404:	2b18      	cmp	r3, #24
 8007406:	f000 80bd 	beq.w	8007584 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	2b02      	cmp	r3, #2
 8007410:	f040 809e 	bne.w	8007550 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007414:	4b42      	ldr	r3, [pc, #264]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a41      	ldr	r2, [pc, #260]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800741a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800741e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fc f942 	bl	80036a8 <HAL_GetTick>
 8007424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007428:	f7fc f93e 	bl	80036a8 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e0e3      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800743a:	4b39      	ldr	r3, [pc, #228]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f0      	bne.n	8007428 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007446:	4b36      	ldr	r3, [pc, #216]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <HAL_RCC_OscConfig+0x774>)
 800744c:	4013      	ands	r3, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007456:	0112      	lsls	r2, r2, #4
 8007458:	430a      	orrs	r2, r1
 800745a:	4931      	ldr	r1, [pc, #196]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800745c:	4313      	orrs	r3, r2
 800745e:	628b      	str	r3, [r1, #40]	; 0x28
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	3b01      	subs	r3, #1
 8007466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	3b01      	subs	r3, #1
 8007470:	025b      	lsls	r3, r3, #9
 8007472:	b29b      	uxth	r3, r3
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	3b01      	subs	r3, #1
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007488:	3b01      	subs	r3, #1
 800748a:	061b      	lsls	r3, r3, #24
 800748c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007490:	4923      	ldr	r1, [pc, #140]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007492:	4313      	orrs	r3, r2
 8007494:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007496:	4b22      	ldr	r3, [pc, #136]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a21      	ldr	r2, [pc, #132]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074a2:	4b1f      	ldr	r3, [pc, #124]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a6:	4b21      	ldr	r3, [pc, #132]	; (800752c <HAL_RCC_OscConfig+0x778>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074ae:	00d2      	lsls	r2, r2, #3
 80074b0:	491b      	ldr	r1, [pc, #108]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074b6:	4b1a      	ldr	r3, [pc, #104]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	f023 020c 	bic.w	r2, r3, #12
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	4917      	ldr	r1, [pc, #92]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	f023 0202 	bic.w	r2, r3, #2
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	4912      	ldr	r1, [pc, #72]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074da:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	4a10      	ldr	r2, [pc, #64]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4a0d      	ldr	r2, [pc, #52]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 80074f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	4a07      	ldr	r2, [pc, #28]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800750a:	4b05      	ldr	r3, [pc, #20]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a04      	ldr	r2, [pc, #16]	; (8007520 <HAL_RCC_OscConfig+0x76c>)
 8007510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007516:	f7fc f8c7 	bl	80036a8 <HAL_GetTick>
 800751a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800751c:	e011      	b.n	8007542 <HAL_RCC_OscConfig+0x78e>
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400
 8007524:	58024800 	.word	0x58024800
 8007528:	fffffc0c 	.word	0xfffffc0c
 800752c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007530:	f7fc f8ba 	bl	80036a8 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e05f      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007542:	4b32      	ldr	r3, [pc, #200]	; (800760c <HAL_RCC_OscConfig+0x858>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f0      	beq.n	8007530 <HAL_RCC_OscConfig+0x77c>
 800754e:	e057      	b.n	8007600 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007550:	4b2e      	ldr	r3, [pc, #184]	; (800760c <HAL_RCC_OscConfig+0x858>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2d      	ldr	r2, [pc, #180]	; (800760c <HAL_RCC_OscConfig+0x858>)
 8007556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800755a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fc f8a4 	bl	80036a8 <HAL_GetTick>
 8007560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007564:	f7fc f8a0 	bl	80036a8 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e045      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007576:	4b25      	ldr	r3, [pc, #148]	; (800760c <HAL_RCC_OscConfig+0x858>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0x7b0>
 8007582:	e03d      	b.n	8007600 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007584:	4b21      	ldr	r3, [pc, #132]	; (800760c <HAL_RCC_OscConfig+0x858>)
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800758a:	4b20      	ldr	r3, [pc, #128]	; (800760c <HAL_RCC_OscConfig+0x858>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b01      	cmp	r3, #1
 8007596:	d031      	beq.n	80075fc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0203 	and.w	r2, r3, #3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d12a      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	091b      	lsrs	r3, r3, #4
 80075aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d122      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d11a      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	0a5b      	lsrs	r3, r3, #9
 80075ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d111      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	0c1b      	lsrs	r3, r3, #16
 80075dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d108      	bne.n	80075fc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3730      	adds	r7, #48	; 0x30
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	58024400 	.word	0x58024400

08007610 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e19c      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007624:	4b8a      	ldr	r3, [pc, #552]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d910      	bls.n	8007654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b87      	ldr	r3, [pc, #540]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 020f 	bic.w	r2, r3, #15
 800763a:	4985      	ldr	r1, [pc, #532]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	4313      	orrs	r3, r2
 8007640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007642:	4b83      	ldr	r3, [pc, #524]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d001      	beq.n	8007654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e184      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d010      	beq.n	8007682 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	4b7b      	ldr	r3, [pc, #492]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800766c:	429a      	cmp	r2, r3
 800766e:	d908      	bls.n	8007682 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007670:	4b78      	ldr	r3, [pc, #480]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	4975      	ldr	r1, [pc, #468]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 800767e:	4313      	orrs	r3, r2
 8007680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d010      	beq.n	80076b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695a      	ldr	r2, [r3, #20]
 8007692:	4b70      	ldr	r3, [pc, #448]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800769a:	429a      	cmp	r2, r3
 800769c:	d908      	bls.n	80076b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800769e:	4b6d      	ldr	r3, [pc, #436]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	496a      	ldr	r1, [pc, #424]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d010      	beq.n	80076de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	4b64      	ldr	r3, [pc, #400]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d908      	bls.n	80076de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076cc:	4b61      	ldr	r3, [pc, #388]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	495e      	ldr	r1, [pc, #376]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d010      	beq.n	800770c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69da      	ldr	r2, [r3, #28]
 80076ee:	4b59      	ldr	r3, [pc, #356]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d908      	bls.n	800770c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80076fa:	4b56      	ldr	r3, [pc, #344]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	4953      	ldr	r1, [pc, #332]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007708:	4313      	orrs	r3, r2
 800770a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d010      	beq.n	800773a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	4b4d      	ldr	r3, [pc, #308]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	429a      	cmp	r2, r3
 8007726:	d908      	bls.n	800773a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007728:	4b4a      	ldr	r3, [pc, #296]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f023 020f 	bic.w	r2, r3, #15
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	4947      	ldr	r1, [pc, #284]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007736:	4313      	orrs	r3, r2
 8007738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d055      	beq.n	80077f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007746:	4b43      	ldr	r3, [pc, #268]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4940      	ldr	r1, [pc, #256]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007754:	4313      	orrs	r3, r2
 8007756:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d107      	bne.n	8007770 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007760:	4b3c      	ldr	r3, [pc, #240]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d121      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0f6      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d107      	bne.n	8007788 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007778:	4b36      	ldr	r3, [pc, #216]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d115      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e0ea      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d107      	bne.n	80077a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007790:	4b30      	ldr	r3, [pc, #192]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e0de      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077a0:	4b2c      	ldr	r3, [pc, #176]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0d6      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077b0:	4b28      	ldr	r3, [pc, #160]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f023 0207 	bic.w	r2, r3, #7
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	4925      	ldr	r1, [pc, #148]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c2:	f7fb ff71 	bl	80036a8 <HAL_GetTick>
 80077c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c8:	e00a      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ca:	f7fb ff6d 	bl	80036a8 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d8:	4293      	cmp	r3, r2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e0be      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077e0:	4b1c      	ldr	r3, [pc, #112]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d1eb      	bne.n	80077ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d010      	beq.n	8007820 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	4b14      	ldr	r3, [pc, #80]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	429a      	cmp	r2, r3
 800780c:	d208      	bcs.n	8007820 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800780e:	4b11      	ldr	r3, [pc, #68]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f023 020f 	bic.w	r2, r3, #15
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	490e      	ldr	r1, [pc, #56]	; (8007854 <HAL_RCC_ClockConfig+0x244>)
 800781c:	4313      	orrs	r3, r2
 800781e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d214      	bcs.n	8007858 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800782e:	4b08      	ldr	r3, [pc, #32]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f023 020f 	bic.w	r2, r3, #15
 8007836:	4906      	ldr	r1, [pc, #24]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	4313      	orrs	r3, r2
 800783c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800783e:	4b04      	ldr	r3, [pc, #16]	; (8007850 <HAL_RCC_ClockConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d005      	beq.n	8007858 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e086      	b.n	800795e <HAL_RCC_ClockConfig+0x34e>
 8007850:	52002000 	.word	0x52002000
 8007854:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d010      	beq.n	8007886 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691a      	ldr	r2, [r3, #16]
 8007868:	4b3f      	ldr	r3, [pc, #252]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007870:	429a      	cmp	r2, r3
 8007872:	d208      	bcs.n	8007886 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007874:	4b3c      	ldr	r3, [pc, #240]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	4939      	ldr	r1, [pc, #228]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007882:	4313      	orrs	r3, r2
 8007884:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d010      	beq.n	80078b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695a      	ldr	r2, [r3, #20]
 8007896:	4b34      	ldr	r3, [pc, #208]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800789e:	429a      	cmp	r2, r3
 80078a0:	d208      	bcs.n	80078b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078a2:	4b31      	ldr	r3, [pc, #196]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	492e      	ldr	r1, [pc, #184]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d010      	beq.n	80078e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	4b28      	ldr	r3, [pc, #160]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d208      	bcs.n	80078e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078d0:	4b25      	ldr	r3, [pc, #148]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4922      	ldr	r1, [pc, #136]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	4b1d      	ldr	r3, [pc, #116]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d208      	bcs.n	8007910 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078fe:	4b1a      	ldr	r3, [pc, #104]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	4917      	ldr	r1, [pc, #92]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 800790c:	4313      	orrs	r3, r2
 800790e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007910:	f000 f834 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8007914:	4602      	mov	r2, r0
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	0a1b      	lsrs	r3, r3, #8
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	4912      	ldr	r1, [pc, #72]	; (800796c <HAL_RCC_ClockConfig+0x35c>)
 8007922:	5ccb      	ldrb	r3, [r1, r3]
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800792e:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <HAL_RCC_ClockConfig+0x358>)
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	4a0d      	ldr	r2, [pc, #52]	; (800796c <HAL_RCC_ClockConfig+0x35c>)
 8007938:	5cd3      	ldrb	r3, [r2, r3]
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	fa22 f303 	lsr.w	r3, r2, r3
 8007944:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_RCC_ClockConfig+0x360>)
 8007946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007948:	4a0a      	ldr	r2, [pc, #40]	; (8007974 <HAL_RCC_ClockConfig+0x364>)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800794e:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <HAL_RCC_ClockConfig+0x368>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fb fe5e 	bl	8003614 <HAL_InitTick>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
 800796c:	0800c64c 	.word	0x0800c64c
 8007970:	24000004 	.word	0x24000004
 8007974:	24000000 	.word	0x24000000
 8007978:	24000018 	.word	0x24000018

0800797c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	b480      	push	{r7}
 800797e:	b089      	sub	sp, #36	; 0x24
 8007980:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007982:	4bb3      	ldr	r3, [pc, #716]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800798a:	2b18      	cmp	r3, #24
 800798c:	f200 8155 	bhi.w	8007c3a <HAL_RCC_GetSysClockFreq+0x2be>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079fd 	.word	0x080079fd
 800799c:	08007c3b 	.word	0x08007c3b
 80079a0:	08007c3b 	.word	0x08007c3b
 80079a4:	08007c3b 	.word	0x08007c3b
 80079a8:	08007c3b 	.word	0x08007c3b
 80079ac:	08007c3b 	.word	0x08007c3b
 80079b0:	08007c3b 	.word	0x08007c3b
 80079b4:	08007c3b 	.word	0x08007c3b
 80079b8:	08007a23 	.word	0x08007a23
 80079bc:	08007c3b 	.word	0x08007c3b
 80079c0:	08007c3b 	.word	0x08007c3b
 80079c4:	08007c3b 	.word	0x08007c3b
 80079c8:	08007c3b 	.word	0x08007c3b
 80079cc:	08007c3b 	.word	0x08007c3b
 80079d0:	08007c3b 	.word	0x08007c3b
 80079d4:	08007c3b 	.word	0x08007c3b
 80079d8:	08007a29 	.word	0x08007a29
 80079dc:	08007c3b 	.word	0x08007c3b
 80079e0:	08007c3b 	.word	0x08007c3b
 80079e4:	08007c3b 	.word	0x08007c3b
 80079e8:	08007c3b 	.word	0x08007c3b
 80079ec:	08007c3b 	.word	0x08007c3b
 80079f0:	08007c3b 	.word	0x08007c3b
 80079f4:	08007c3b 	.word	0x08007c3b
 80079f8:	08007a2f 	.word	0x08007a2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079fc:	4b94      	ldr	r3, [pc, #592]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a08:	4b91      	ldr	r3, [pc, #580]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	08db      	lsrs	r3, r3, #3
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	4a90      	ldr	r2, [pc, #576]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007a1a:	e111      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a1c:	4b8d      	ldr	r3, [pc, #564]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a1e:	61bb      	str	r3, [r7, #24]
    break;
 8007a20:	e10e      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a22:	4b8d      	ldr	r3, [pc, #564]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a24:	61bb      	str	r3, [r7, #24]
    break;
 8007a26:	e10b      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a28:	4b8c      	ldr	r3, [pc, #560]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a2a:	61bb      	str	r3, [r7, #24]
    break;
 8007a2c:	e108      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a2e:	4b88      	ldr	r3, [pc, #544]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a38:	4b85      	ldr	r3, [pc, #532]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a44:	4b82      	ldr	r3, [pc, #520]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a4e:	4b80      	ldr	r3, [pc, #512]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80e1 	beq.w	8007c34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	f000 8083 	beq.w	8007b80 <HAL_RCC_GetSysClockFreq+0x204>
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	f200 80a1 	bhi.w	8007bc4 <HAL_RCC_GetSysClockFreq+0x248>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_RCC_GetSysClockFreq+0x114>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d056      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a8e:	e099      	b.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a90:	4b6f      	ldr	r3, [pc, #444]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d02d      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a9c:	4b6c      	ldr	r3, [pc, #432]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a6b      	ldr	r2, [pc, #428]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b62      	ldr	r3, [pc, #392]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ada:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007af6:	e087      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b51      	ldr	r3, [pc, #324]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b3a:	e065      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b7e:	e043      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b2f      	ldr	r3, [pc, #188]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ba6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc2:	e021      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c08:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	0a5b      	lsrs	r3, r3, #9
 8007c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c12:	3301      	adds	r3, #1
 8007c14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c2c:	ee17 3a90 	vmov	r3, s15
 8007c30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c32:	e005      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61bb      	str	r3, [r7, #24]
    break;
 8007c38:	e002      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007c3a:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c3c:	61bb      	str	r3, [r7, #24]
    break;
 8007c3e:	bf00      	nop
  }

  return sysclockfreq;
 8007c40:	69bb      	ldr	r3, [r7, #24]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3724      	adds	r7, #36	; 0x24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	58024400 	.word	0x58024400
 8007c54:	03d09000 	.word	0x03d09000
 8007c58:	003d0900 	.word	0x003d0900
 8007c5c:	007a1200 	.word	0x007a1200
 8007c60:	46000000 	.word	0x46000000
 8007c64:	4c742400 	.word	0x4c742400
 8007c68:	4a742400 	.word	0x4a742400
 8007c6c:	4af42400 	.word	0x4af42400

08007c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c76:	f7ff fe81 	bl	800797c <HAL_RCC_GetSysClockFreq>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	0a1b      	lsrs	r3, r3, #8
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	490f      	ldr	r1, [pc, #60]	; (8007cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c88:	5ccb      	ldrb	r3, [r1, r3]
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c9e:	5cd3      	ldrb	r3, [r2, r3]
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8007caa:	4a07      	ldr	r2, [pc, #28]	; (8007cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cae:	4a07      	ldr	r2, [pc, #28]	; (8007ccc <HAL_RCC_GetHCLKFreq+0x5c>)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	0800c64c 	.word	0x0800c64c
 8007cc8:	24000004 	.word	0x24000004
 8007ccc:	24000000 	.word	0x24000000

08007cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cd4:	f7ff ffcc 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	091b      	lsrs	r3, r3, #4
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	4904      	ldr	r1, [pc, #16]	; (8007cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ce6:	5ccb      	ldrb	r3, [r1, r3]
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	0800c64c 	.word	0x0800c64c

08007cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d00:	f7ff ffb6 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8007d04:	4602      	mov	r2, r0
 8007d06:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	4904      	ldr	r1, [pc, #16]	; (8007d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d12:	5ccb      	ldrb	r3, [r1, r3]
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	58024400 	.word	0x58024400
 8007d24:	0800c64c 	.word	0x0800c64c

08007d28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d30:	2300      	movs	r3, #0
 8007d32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d34:	2300      	movs	r3, #0
 8007d36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d03f      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d4c:	d02a      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d52:	d824      	bhi.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d58:	d018      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d5e:	d81e      	bhi.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d68:	d007      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007d6a:	e018      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6c:	4ba3      	ldr	r3, [pc, #652]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4aa2      	ldr	r2, [pc, #648]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d78:	e015      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	2102      	movs	r1, #2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 f9d5 	bl	8009130 <RCCEx_PLL2_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d8a:	e00c      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3324      	adds	r3, #36	; 0x24
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 fa7e 	bl	8009294 <RCCEx_PLL3_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d9c:	e003      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]
      break;
 8007da2:	e000      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007dac:	4b93      	ldr	r3, [pc, #588]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db8:	4990      	ldr	r1, [pc, #576]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	650b      	str	r3, [r1, #80]	; 0x50
 8007dbe:	e001      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d03d      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d826      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007df5 	.word	0x08007df5
 8007de4:	08007e03 	.word	0x08007e03
 8007de8:	08007e15 	.word	0x08007e15
 8007dec:	08007e2d 	.word	0x08007e2d
 8007df0:	08007e2d 	.word	0x08007e2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df4:	4b81      	ldr	r3, [pc, #516]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	4a80      	ldr	r2, [pc, #512]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e00:	e015      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3304      	adds	r3, #4
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f001 f991 	bl	8009130 <RCCEx_PLL2_Config>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e12:	e00c      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fa3a 	bl	8009294 <RCCEx_PLL3_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e24:	e003      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2a:	e000      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e34:	4b71      	ldr	r3, [pc, #452]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	f023 0207 	bic.w	r2, r3, #7
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e40:	496e      	ldr	r1, [pc, #440]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	650b      	str	r3, [r1, #80]	; 0x50
 8007e46:	e001      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d042      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e60:	d02b      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e66:	d825      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e68:	2bc0      	cmp	r3, #192	; 0xc0
 8007e6a:	d028      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e6c:	2bc0      	cmp	r3, #192	; 0xc0
 8007e6e:	d821      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e70:	2b80      	cmp	r3, #128	; 0x80
 8007e72:	d016      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007e74:	2b80      	cmp	r3, #128	; 0x80
 8007e76:	d81d      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007e7c:	2b40      	cmp	r3, #64	; 0x40
 8007e7e:	d007      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007e80:	e018      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e82:	4b5e      	ldr	r3, [pc, #376]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	4a5d      	ldr	r2, [pc, #372]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e8e:	e017      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3304      	adds	r3, #4
 8007e94:	2100      	movs	r1, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 f94a 	bl	8009130 <RCCEx_PLL2_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ea0:	e00e      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3324      	adds	r3, #36	; 0x24
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 f9f3 	bl	8009294 <RCCEx_PLL3_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007eb2:	e005      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb8:	e002      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007eba:	bf00      	nop
 8007ebc:	e000      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ec6:	4b4d      	ldr	r3, [pc, #308]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed2:	494a      	ldr	r1, [pc, #296]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	650b      	str	r3, [r1, #80]	; 0x50
 8007ed8:	e001      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d049      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ef0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ef4:	d030      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007efa:	d82a      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007efc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f00:	d02c      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007f02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f06:	d824      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f0c:	d018      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f12:	d81e      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007f18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f1c:	d007      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f1e:	e018      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f20:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	4a35      	ldr	r2, [pc, #212]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f2c:	e017      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3304      	adds	r3, #4
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f8fb 	bl	8009130 <RCCEx_PLL2_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f3e:	e00e      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3324      	adds	r3, #36	; 0x24
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f9a4 	bl	8009294 <RCCEx_PLL3_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f50:	e005      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	75fb      	strb	r3, [r7, #23]
      break;
 8007f56:	e002      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f58:	bf00      	nop
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f64:	4b25      	ldr	r3, [pc, #148]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f72:	4922      	ldr	r1, [pc, #136]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	658b      	str	r3, [r1, #88]	; 0x58
 8007f78:	e001      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d04b      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f94:	d030      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f9a:	d82a      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007f9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fa0:	d02e      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007fa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fa6:	d824      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fac:	d018      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fb2:	d81e      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fbc:	d007      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007fbe:	e018      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	4a0d      	ldr	r2, [pc, #52]	; (8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fcc:	e019      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 f8ab 	bl	8009130 <RCCEx_PLL2_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007fde:	e010      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3324      	adds	r3, #36	; 0x24
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 f954 	bl	8009294 <RCCEx_PLL3_Config>
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ff0:	e007      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff6:	e004      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e002      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007ffc:	58024400 	.word	0x58024400
      break;
 8008000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008008:	4b99      	ldr	r3, [pc, #612]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800800a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008016:	4996      	ldr	r1, [pc, #600]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008018:	4313      	orrs	r3, r2
 800801a:	658b      	str	r3, [r1, #88]	; 0x58
 800801c:	e001      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d032      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008032:	2b30      	cmp	r3, #48	; 0x30
 8008034:	d01c      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008036:	2b30      	cmp	r3, #48	; 0x30
 8008038:	d817      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800803a:	2b20      	cmp	r3, #32
 800803c:	d00c      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800803e:	2b20      	cmp	r3, #32
 8008040:	d813      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d016      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008046:	2b10      	cmp	r3, #16
 8008048:	d10f      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804a:	4b89      	ldr	r3, [pc, #548]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	4a88      	ldr	r2, [pc, #544]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008056:	e00e      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3304      	adds	r3, #4
 800805c:	2102      	movs	r1, #2
 800805e:	4618      	mov	r0, r3
 8008060:	f001 f866 	bl	8009130 <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008068:	e005      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]
      break;
 800806e:	e002      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008070:	bf00      	nop
 8008072:	e000      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800807c:	4b7c      	ldr	r3, [pc, #496]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008080:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008088:	4979      	ldr	r1, [pc, #484]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800808a:	4313      	orrs	r3, r2
 800808c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800808e:	e001      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d047      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080a8:	d030      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80080aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ae:	d82a      	bhi.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80080b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080b4:	d02c      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80080b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ba:	d824      	bhi.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80080bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c0:	d018      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80080c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c6:	d81e      	bhi.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80080cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d0:	d007      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80080d2:	e018      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d4:	4b66      	ldr	r3, [pc, #408]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	4a65      	ldr	r2, [pc, #404]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80080da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080e0:	e017      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 f821 	bl	8009130 <RCCEx_PLL2_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080f2:	e00e      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3324      	adds	r3, #36	; 0x24
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 f8ca 	bl	8009294 <RCCEx_PLL3_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008104:	e005      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	75fb      	strb	r3, [r7, #23]
      break;
 800810a:	e002      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800810c:	bf00      	nop
 800810e:	e000      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d109      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008118:	4b55      	ldr	r3, [pc, #340]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800811a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008124:	4952      	ldr	r1, [pc, #328]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008126:	4313      	orrs	r3, r2
 8008128:	650b      	str	r3, [r1, #80]	; 0x50
 800812a:	e001      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d049      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008144:	d02e      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008146:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800814a:	d828      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800814c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008150:	d02a      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008152:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008156:	d822      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800815c:	d026      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x484>
 800815e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008162:	d81c      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008168:	d010      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800816a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800816e:	d816      	bhi.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01d      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008178:	d111      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3304      	adds	r3, #4
 800817e:	2101      	movs	r1, #1
 8008180:	4618      	mov	r0, r3
 8008182:	f000 ffd5 	bl	8009130 <RCCEx_PLL2_Config>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800818a:	e012      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3324      	adds	r3, #36	; 0x24
 8008190:	2101      	movs	r1, #1
 8008192:	4618      	mov	r0, r3
 8008194:	f001 f87e 	bl	8009294 <RCCEx_PLL3_Config>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800819c:	e009      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
      break;
 80081a2:	e006      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081a4:	bf00      	nop
 80081a6:	e004      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081a8:	bf00      	nop
 80081aa:	e002      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081ac:	bf00      	nop
 80081ae:	e000      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80081b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d109      	bne.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081b8:	4b2d      	ldr	r3, [pc, #180]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c4:	492a      	ldr	r1, [pc, #168]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	650b      	str	r3, [r1, #80]	; 0x50
 80081ca:	e001      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d04d      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081e6:	d02e      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80081e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ec:	d828      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80081ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f2:	d02a      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80081f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f8:	d822      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80081fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081fe:	d026      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008200:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008204:	d81c      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820a:	d010      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800820c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008210:	d816      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01d      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800821a:	d111      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3304      	adds	r3, #4
 8008220:	2101      	movs	r1, #1
 8008222:	4618      	mov	r0, r3
 8008224:	f000 ff84 	bl	8009130 <RCCEx_PLL2_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800822c:	e012      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3324      	adds	r3, #36	; 0x24
 8008232:	2101      	movs	r1, #1
 8008234:	4618      	mov	r0, r3
 8008236:	f001 f82d 	bl	8009294 <RCCEx_PLL3_Config>
 800823a:	4603      	mov	r3, r0
 800823c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800823e:	e009      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
      break;
 8008244:	e006      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008246:	bf00      	nop
 8008248:	e004      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800824a:	bf00      	nop
 800824c:	e002      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800824e:	bf00      	nop
 8008250:	e000      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10c      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800825a:	4b05      	ldr	r3, [pc, #20]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008268:	4901      	ldr	r1, [pc, #4]	; (8008270 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800826a:	4313      	orrs	r3, r2
 800826c:	658b      	str	r3, [r1, #88]	; 0x58
 800826e:	e003      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d02f      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828c:	d00e      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x584>
 800828e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008292:	d814      	bhi.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d015      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800829c:	d10f      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800829e:	4baf      	ldr	r3, [pc, #700]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	4aae      	ldr	r2, [pc, #696]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082aa:	e00c      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3304      	adds	r3, #4
 80082b0:	2101      	movs	r1, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 ff3c 	bl	8009130 <RCCEx_PLL2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082bc:	e003      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]
      break;
 80082c2:	e000      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80082c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082cc:	4ba3      	ldr	r3, [pc, #652]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082d8:	49a0      	ldr	r1, [pc, #640]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	650b      	str	r3, [r1, #80]	; 0x50
 80082de:	e001      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d032      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d81b      	bhi.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80082f8:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80082fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fe:	bf00      	nop
 8008300:	08008337 	.word	0x08008337
 8008304:	08008311 	.word	0x08008311
 8008308:	0800831f 	.word	0x0800831f
 800830c:	08008337 	.word	0x08008337
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008310:	4b92      	ldr	r3, [pc, #584]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	4a91      	ldr	r2, [pc, #580]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800831c:	e00c      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	2102      	movs	r1, #2
 8008324:	4618      	mov	r0, r3
 8008326:	f000 ff03 	bl	8009130 <RCCEx_PLL2_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800832e:	e003      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	75fb      	strb	r3, [r7, #23]
      break;
 8008334:	e000      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800833e:	4b87      	ldr	r3, [pc, #540]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008342:	f023 0203 	bic.w	r2, r3, #3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	4984      	ldr	r1, [pc, #528]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800834c:	4313      	orrs	r3, r2
 800834e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008350:	e001      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8086 	beq.w	8008470 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008364:	4b7e      	ldr	r3, [pc, #504]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a7d      	ldr	r2, [pc, #500]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800836a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800836e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008370:	f7fb f99a 	bl	80036a8 <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008376:	e009      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008378:	f7fb f996 	bl	80036a8 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b64      	cmp	r3, #100	; 0x64
 8008384:	d902      	bls.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	75fb      	strb	r3, [r7, #23]
        break;
 800838a:	e005      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800838c:	4b74      	ldr	r3, [pc, #464]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0ef      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d166      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800839e:	4b6f      	ldr	r3, [pc, #444]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083a8:	4053      	eors	r3, r2
 80083aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d013      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083b2:	4b6a      	ldr	r3, [pc, #424]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083bc:	4b67      	ldr	r3, [pc, #412]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c0:	4a66      	ldr	r2, [pc, #408]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083c8:	4b64      	ldr	r3, [pc, #400]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083cc:	4a63      	ldr	r2, [pc, #396]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80083d4:	4a61      	ldr	r2, [pc, #388]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e4:	d115      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e6:	f7fb f95f 	bl	80036a8 <HAL_GetTick>
 80083ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ec:	e00b      	b.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ee:	f7fb f95b 	bl	80036a8 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d902      	bls.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	75fb      	strb	r3, [r7, #23]
            break;
 8008404:	e005      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008406:	4b55      	ldr	r3, [pc, #340]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0ed      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d126      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800841e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008426:	d10d      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008428:	4b4c      	ldr	r3, [pc, #304]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008436:	0919      	lsrs	r1, r3, #4
 8008438:	4b4a      	ldr	r3, [pc, #296]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800843a:	400b      	ands	r3, r1
 800843c:	4947      	ldr	r1, [pc, #284]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800843e:	4313      	orrs	r3, r2
 8008440:	610b      	str	r3, [r1, #16]
 8008442:	e005      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008444:	4b45      	ldr	r3, [pc, #276]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	4a44      	ldr	r2, [pc, #272]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800844a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800844e:	6113      	str	r3, [r2, #16]
 8008450:	4b42      	ldr	r3, [pc, #264]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800845a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800845e:	493f      	ldr	r1, [pc, #252]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008460:	4313      	orrs	r3, r2
 8008462:	670b      	str	r3, [r1, #112]	; 0x70
 8008464:	e004      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	75bb      	strb	r3, [r7, #22]
 800846a:	e001      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8085 	beq.w	8008588 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008482:	2b28      	cmp	r3, #40	; 0x28
 8008484:	d866      	bhi.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	08008569 	.word	0x08008569
 8008490:	08008555 	.word	0x08008555
 8008494:	08008555 	.word	0x08008555
 8008498:	08008555 	.word	0x08008555
 800849c:	08008555 	.word	0x08008555
 80084a0:	08008555 	.word	0x08008555
 80084a4:	08008555 	.word	0x08008555
 80084a8:	08008555 	.word	0x08008555
 80084ac:	08008531 	.word	0x08008531
 80084b0:	08008555 	.word	0x08008555
 80084b4:	08008555 	.word	0x08008555
 80084b8:	08008555 	.word	0x08008555
 80084bc:	08008555 	.word	0x08008555
 80084c0:	08008555 	.word	0x08008555
 80084c4:	08008555 	.word	0x08008555
 80084c8:	08008555 	.word	0x08008555
 80084cc:	08008543 	.word	0x08008543
 80084d0:	08008555 	.word	0x08008555
 80084d4:	08008555 	.word	0x08008555
 80084d8:	08008555 	.word	0x08008555
 80084dc:	08008555 	.word	0x08008555
 80084e0:	08008555 	.word	0x08008555
 80084e4:	08008555 	.word	0x08008555
 80084e8:	08008555 	.word	0x08008555
 80084ec:	08008569 	.word	0x08008569
 80084f0:	08008555 	.word	0x08008555
 80084f4:	08008555 	.word	0x08008555
 80084f8:	08008555 	.word	0x08008555
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008555 	.word	0x08008555
 8008504:	08008555 	.word	0x08008555
 8008508:	08008555 	.word	0x08008555
 800850c:	08008569 	.word	0x08008569
 8008510:	08008555 	.word	0x08008555
 8008514:	08008555 	.word	0x08008555
 8008518:	08008555 	.word	0x08008555
 800851c:	08008555 	.word	0x08008555
 8008520:	08008555 	.word	0x08008555
 8008524:	08008555 	.word	0x08008555
 8008528:	08008555 	.word	0x08008555
 800852c:	08008569 	.word	0x08008569
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3304      	adds	r3, #4
 8008534:	2101      	movs	r1, #1
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fdfa 	bl	8009130 <RCCEx_PLL2_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008540:	e013      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3324      	adds	r3, #36	; 0x24
 8008546:	2101      	movs	r1, #1
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fea3 	bl	8009294 <RCCEx_PLL3_Config>
 800854e:	4603      	mov	r3, r0
 8008550:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008552:	e00a      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	75fb      	strb	r3, [r7, #23]
      break;
 8008558:	e007      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800855a:	bf00      	nop
 800855c:	58024400 	.word	0x58024400
 8008560:	58024800 	.word	0x58024800
 8008564:	00ffffcf 	.word	0x00ffffcf
      break;
 8008568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d109      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008570:	4b96      	ldr	r3, [pc, #600]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008574:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800857c:	4993      	ldr	r1, [pc, #588]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800857e:	4313      	orrs	r3, r2
 8008580:	654b      	str	r3, [r1, #84]	; 0x54
 8008582:	e001      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d038      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008598:	2b05      	cmp	r3, #5
 800859a:	d821      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800859c:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800859e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a2:	bf00      	nop
 80085a4:	080085e7 	.word	0x080085e7
 80085a8:	080085bd 	.word	0x080085bd
 80085ac:	080085cf 	.word	0x080085cf
 80085b0:	080085e7 	.word	0x080085e7
 80085b4:	080085e7 	.word	0x080085e7
 80085b8:	080085e7 	.word	0x080085e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3304      	adds	r3, #4
 80085c0:	2101      	movs	r1, #1
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fdb4 	bl	8009130 <RCCEx_PLL2_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085cc:	e00c      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3324      	adds	r3, #36	; 0x24
 80085d2:	2101      	movs	r1, #1
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fe5d 	bl	8009294 <RCCEx_PLL3_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80085de:	e003      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
      break;
 80085e4:	e000      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80085e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d109      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80085ee:	4b77      	ldr	r3, [pc, #476]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	f023 0207 	bic.w	r2, r3, #7
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fa:	4974      	ldr	r1, [pc, #464]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	654b      	str	r3, [r1, #84]	; 0x54
 8008600:	e001      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	d03a      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008618:	2b05      	cmp	r3, #5
 800861a:	d821      	bhi.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800861c:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008667 	.word	0x08008667
 8008628:	0800863d 	.word	0x0800863d
 800862c:	0800864f 	.word	0x0800864f
 8008630:	08008667 	.word	0x08008667
 8008634:	08008667 	.word	0x08008667
 8008638:	08008667 	.word	0x08008667
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fd74 	bl	8009130 <RCCEx_PLL2_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800864c:	e00c      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3324      	adds	r3, #36	; 0x24
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fe1d 	bl	8009294 <RCCEx_PLL3_Config>
 800865a:	4603      	mov	r3, r0
 800865c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800865e:	e003      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	75fb      	strb	r3, [r7, #23]
      break;
 8008664:	e000      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800866e:	4b57      	ldr	r3, [pc, #348]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008672:	f023 0207 	bic.w	r2, r3, #7
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867c:	4953      	ldr	r1, [pc, #332]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800867e:	4313      	orrs	r3, r2
 8008680:	658b      	str	r3, [r1, #88]	; 0x58
 8008682:	e001      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0320 	and.w	r3, r3, #32
 8008690:	2b00      	cmp	r3, #0
 8008692:	d04b      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800869a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800869e:	d02e      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80086a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a4:	d828      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086aa:	d02a      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80086ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b0:	d822      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086b6:	d026      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80086b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086bc:	d81c      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c2:	d010      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80086c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c8:	d816      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01d      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80086ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d2:	d111      	bne.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	2100      	movs	r1, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fd28 	bl	8009130 <RCCEx_PLL2_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086e4:	e012      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3324      	adds	r3, #36	; 0x24
 80086ea:	2102      	movs	r1, #2
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fdd1 	bl	8009294 <RCCEx_PLL3_Config>
 80086f2:	4603      	mov	r3, r0
 80086f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086f6:	e009      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	75fb      	strb	r3, [r7, #23]
      break;
 80086fc:	e006      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80086fe:	bf00      	nop
 8008700:	e004      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008702:	bf00      	nop
 8008704:	e002      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800870a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008712:	4b2e      	ldr	r3, [pc, #184]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008716:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008720:	492a      	ldr	r1, [pc, #168]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008722:	4313      	orrs	r3, r2
 8008724:	654b      	str	r3, [r1, #84]	; 0x54
 8008726:	e001      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d04d      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800873e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008742:	d02e      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008744:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008748:	d828      	bhi.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874e:	d02a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008754:	d822      	bhi.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800875a:	d026      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800875c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008760:	d81c      	bhi.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008766:	d010      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800876c:	d816      	bhi.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d01d      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008776:	d111      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	2100      	movs	r1, #0
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fcd6 	bl	8009130 <RCCEx_PLL2_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008788:	e012      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3324      	adds	r3, #36	; 0x24
 800878e:	2102      	movs	r1, #2
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fd7f 	bl	8009294 <RCCEx_PLL3_Config>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800879a:	e009      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	75fb      	strb	r3, [r7, #23]
      break;
 80087a0:	e006      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087a2:	bf00      	nop
 80087a4:	e004      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087a6:	bf00      	nop
 80087a8:	e002      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087aa:	bf00      	nop
 80087ac:	e000      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80087ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087b6:	4b05      	ldr	r3, [pc, #20]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087c4:	4901      	ldr	r1, [pc, #4]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	658b      	str	r3, [r1, #88]	; 0x58
 80087ca:	e003      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80087cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d04b      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087ea:	d02e      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80087ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087f0:	d828      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80087f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f6:	d02a      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80087f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fc:	d822      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80087fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008802:	d026      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008804:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008808:	d81c      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800880a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800880e:	d010      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008814:	d816      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01d      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800881a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800881e:	d111      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3304      	adds	r3, #4
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fc82 	bl	8009130 <RCCEx_PLL2_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008830:	e012      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3324      	adds	r3, #36	; 0x24
 8008836:	2102      	movs	r1, #2
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fd2b 	bl	8009294 <RCCEx_PLL3_Config>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008842:	e009      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]
      break;
 8008848:	e006      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800884a:	bf00      	nop
 800884c:	e004      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800884e:	bf00      	nop
 8008850:	e002      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008852:	bf00      	nop
 8008854:	e000      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800885e:	4b9d      	ldr	r3, [pc, #628]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800886c:	4999      	ldr	r1, [pc, #612]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800886e:	4313      	orrs	r3, r2
 8008870:	658b      	str	r3, [r1, #88]	; 0x58
 8008872:	e001      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d01a      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800888a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800888e:	d10a      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3324      	adds	r3, #36	; 0x24
 8008894:	2102      	movs	r1, #2
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fcfc 	bl	8009294 <RCCEx_PLL3_Config>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80088a6:	4b8b      	ldr	r3, [pc, #556]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b4:	4987      	ldr	r1, [pc, #540]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0310 	and.w	r3, r3, #16
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01a      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d0:	d10a      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3324      	adds	r3, #36	; 0x24
 80088d6:	2102      	movs	r1, #2
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fcdb 	bl	8009294 <RCCEx_PLL3_Config>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088e8:	4b7a      	ldr	r3, [pc, #488]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088f6:	4977      	ldr	r1, [pc, #476]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d034      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800890e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008912:	d01d      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008918:	d817      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800891e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008922:	d009      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008924:	e011      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3304      	adds	r3, #4
 800892a:	2100      	movs	r1, #0
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fbff 	bl	8009130 <RCCEx_PLL2_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008936:	e00c      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3324      	adds	r3, #36	; 0x24
 800893c:	2102      	movs	r1, #2
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fca8 	bl	8009294 <RCCEx_PLL3_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008948:	e003      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	75fb      	strb	r3, [r7, #23]
      break;
 800894e:	e000      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008958:	4b5e      	ldr	r3, [pc, #376]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008966:	495b      	ldr	r1, [pc, #364]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008968:	4313      	orrs	r3, r2
 800896a:	658b      	str	r3, [r1, #88]	; 0x58
 800896c:	e001      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d033      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008988:	d01c      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800898a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800898e:	d816      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008994:	d003      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800899a:	d007      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800899c:	e00f      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899e:	4b4d      	ldr	r3, [pc, #308]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	4a4c      	ldr	r2, [pc, #304]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80089aa:	e00c      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3324      	adds	r3, #36	; 0x24
 80089b0:	2101      	movs	r1, #1
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fc6e 	bl	8009294 <RCCEx_PLL3_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80089bc:	e003      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
      break;
 80089c2:	e000      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80089c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089cc:	4b41      	ldr	r3, [pc, #260]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089da:	493e      	ldr	r1, [pc, #248]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	654b      	str	r3, [r1, #84]	; 0x54
 80089e0:	e001      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d029      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80089fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fe:	d007      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008a00:	e00f      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a02:	4b34      	ldr	r3, [pc, #208]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	4a33      	ldr	r2, [pc, #204]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a0e:	e00b      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3304      	adds	r3, #4
 8008a14:	2102      	movs	r1, #2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fb8a 	bl	8009130 <RCCEx_PLL2_Config>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a20:	e002      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	75fb      	strb	r3, [r7, #23]
      break;
 8008a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a2e:	4b29      	ldr	r3, [pc, #164]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3a:	4926      	ldr	r1, [pc, #152]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a40:	e001      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3324      	adds	r3, #36	; 0x24
 8008a56:	2102      	movs	r1, #2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fc1b 	bl	8009294 <RCCEx_PLL3_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d033      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a7c:	d017      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a82:	d811      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a88:	d013      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a8e:	d80b      	bhi.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d010      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a98:	d106      	bne.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	4a0d      	ldr	r2, [pc, #52]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008aa6:	e007      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8008aac:	e004      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008aae:	bf00      	nop
 8008ab0:	e002      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008ab2:	bf00      	nop
 8008ab4:	e000      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10c      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aca:	4902      	ldr	r1, [pc, #8]	; (8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	654b      	str	r3, [r1, #84]	; 0x54
 8008ad0:	e004      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d008      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ae8:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af4:	492e      	ldr	r1, [pc, #184]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b06:	4b2a      	ldr	r3, [pc, #168]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b14:	4926      	ldr	r1, [pc, #152]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d008      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b26:	4b22      	ldr	r3, [pc, #136]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b32:	491f      	ldr	r1, [pc, #124]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00d      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b44:	4b1a      	ldr	r3, [pc, #104]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	4a19      	ldr	r2, [pc, #100]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b4e:	6113      	str	r3, [r2, #16]
 8008b50:	4b17      	ldr	r3, [pc, #92]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b52:	691a      	ldr	r2, [r3, #16]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b5a:	4915      	ldr	r1, [pc, #84]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	da08      	bge.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b68:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b74:	490e      	ldr	r1, [pc, #56]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d009      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b86:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b94:	4906      	ldr	r1, [pc, #24]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008b9a:	7dbb      	ldrb	r3, [r7, #22]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	58024400 	.word	0x58024400

08008bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008bb8:	f7ff f85a 	bl	8007c70 <HAL_RCC_GetHCLKFreq>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	091b      	lsrs	r3, r3, #4
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	4904      	ldr	r1, [pc, #16]	; (8008bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008bca:	5ccb      	ldrb	r3, [r1, r3]
 8008bcc:	f003 031f 	and.w	r3, r3, #31
 8008bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	0800c64c 	.word	0x0800c64c

08008be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b089      	sub	sp, #36	; 0x24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008be8:	4ba1      	ldr	r3, [pc, #644]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008bf2:	4b9f      	ldr	r3, [pc, #636]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	0b1b      	lsrs	r3, r3, #12
 8008bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bfe:	4b9c      	ldr	r3, [pc, #624]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	091b      	lsrs	r3, r3, #4
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008c0a:	4b99      	ldr	r3, [pc, #612]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0e:	08db      	lsrs	r3, r3, #3
 8008c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 8111 	beq.w	8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	f000 8083 	beq.w	8008d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	f200 80a1 	bhi.w	8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d056      	beq.n	8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c4a:	e099      	b.n	8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c4c:	4b88      	ldr	r3, [pc, #544]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0320 	and.w	r3, r3, #32
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d02d      	beq.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c58:	4b85      	ldr	r3, [pc, #532]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	08db      	lsrs	r3, r3, #3
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	4a84      	ldr	r2, [pc, #528]	; (8008e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c64:	fa22 f303 	lsr.w	r3, r2, r3
 8008c68:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	ee07 3a90 	vmov	s15, r3
 8008c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c82:	4b7b      	ldr	r3, [pc, #492]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008cb2:	e087      	b.n	8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc6:	4b6a      	ldr	r3, [pc, #424]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cf6:	e065      	b.n	8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0a:	4b59      	ldr	r3, [pc, #356]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d3a:	e043      	b.n	8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4e:	4b48      	ldr	r3, [pc, #288]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d56:	ee07 3a90 	vmov	s15, r3
 8008d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d7e:	e021      	b.n	8008dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d92:	4b37      	ldr	r3, [pc, #220]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008da6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008dc4:	4b2a      	ldr	r3, [pc, #168]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	0a5b      	lsrs	r3, r3, #9
 8008dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dea:	ee17 2a90 	vmov	r2, s15
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008df2:	4b1f      	ldr	r3, [pc, #124]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	0c1b      	lsrs	r3, r3, #16
 8008df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e18:	ee17 2a90 	vmov	r2, s15
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008e20:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	0e1b      	lsrs	r3, r3, #24
 8008e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e46:	ee17 2a90 	vmov	r2, s15
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e4e:	e008      	b.n	8008e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	609a      	str	r2, [r3, #8]
}
 8008e62:	bf00      	nop
 8008e64:	3724      	adds	r7, #36	; 0x24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	58024400 	.word	0x58024400
 8008e74:	03d09000 	.word	0x03d09000
 8008e78:	46000000 	.word	0x46000000
 8008e7c:	4c742400 	.word	0x4c742400
 8008e80:	4a742400 	.word	0x4a742400
 8008e84:	4af42400 	.word	0x4af42400

08008e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b089      	sub	sp, #36	; 0x24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e90:	4ba1      	ldr	r3, [pc, #644]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e94:	f003 0303 	and.w	r3, r3, #3
 8008e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008e9a:	4b9f      	ldr	r3, [pc, #636]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9e:	0d1b      	lsrs	r3, r3, #20
 8008ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ea6:	4b9c      	ldr	r3, [pc, #624]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008eb2:	4b99      	ldr	r3, [pc, #612]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb6:	08db      	lsrs	r3, r3, #3
 8008eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	fb02 f303 	mul.w	r3, r2, r3
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 8111 	beq.w	80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	f000 8083 	beq.w	8008fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	f200 80a1 	bhi.w	8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d056      	beq.n	8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ef2:	e099      	b.n	8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ef4:	4b88      	ldr	r3, [pc, #544]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d02d      	beq.n	8008f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f00:	4b85      	ldr	r3, [pc, #532]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	08db      	lsrs	r3, r3, #3
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	4a84      	ldr	r2, [pc, #528]	; (800911c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	ee07 3a90 	vmov	s15, r3
 8008f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2a:	4b7b      	ldr	r3, [pc, #492]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008f5a:	e087      	b.n	800906c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b6a      	ldr	r3, [pc, #424]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f9e:	e065      	b.n	800906c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb2:	4b59      	ldr	r3, [pc, #356]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fe2:	e043      	b.n	800906c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800912c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff6:	4b48      	ldr	r3, [pc, #288]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	ed97 6a03 	vldr	s12, [r7, #12]
 800900a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800900e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009026:	e021      	b.n	800906c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903a:	4b37      	ldr	r3, [pc, #220]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904a:	ed97 6a03 	vldr	s12, [r7, #12]
 800904e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800906a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800906c:	4b2a      	ldr	r3, [pc, #168]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	0a5b      	lsrs	r3, r3, #9
 8009072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009086:	edd7 6a07 	vldr	s13, [r7, #28]
 800908a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800908e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009092:	ee17 2a90 	vmov	r2, s15
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800909a:	4b1f      	ldr	r3, [pc, #124]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	0c1b      	lsrs	r3, r3, #16
 80090a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a4:	ee07 3a90 	vmov	s15, r3
 80090a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090c0:	ee17 2a90 	vmov	r2, s15
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80090c8:	4b13      	ldr	r3, [pc, #76]	; (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	0e1b      	lsrs	r3, r3, #24
 80090ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ee:	ee17 2a90 	vmov	r2, s15
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090f6:	e008      	b.n	800910a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	609a      	str	r2, [r3, #8]
}
 800910a:	bf00      	nop
 800910c:	3724      	adds	r7, #36	; 0x24
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	58024400 	.word	0x58024400
 800911c:	03d09000 	.word	0x03d09000
 8009120:	46000000 	.word	0x46000000
 8009124:	4c742400 	.word	0x4c742400
 8009128:	4a742400 	.word	0x4a742400
 800912c:	4af42400 	.word	0x4af42400

08009130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800913e:	4b53      	ldr	r3, [pc, #332]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b03      	cmp	r3, #3
 8009148:	d101      	bne.n	800914e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e099      	b.n	8009282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800914e:	4b4f      	ldr	r3, [pc, #316]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a4e      	ldr	r2, [pc, #312]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800915a:	f7fa faa5 	bl	80036a8 <HAL_GetTick>
 800915e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009160:	e008      	b.n	8009174 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009162:	f7fa faa1 	bl	80036a8 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d901      	bls.n	8009174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e086      	b.n	8009282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009174:	4b45      	ldr	r3, [pc, #276]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f0      	bne.n	8009162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009180:	4b42      	ldr	r3, [pc, #264]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	031b      	lsls	r3, r3, #12
 800918e:	493f      	ldr	r1, [pc, #252]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009190:	4313      	orrs	r3, r2
 8009192:	628b      	str	r3, [r1, #40]	; 0x28
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	3b01      	subs	r3, #1
 800919a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	025b      	lsls	r3, r3, #9
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	041b      	lsls	r3, r3, #16
 80091b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	3b01      	subs	r3, #1
 80091be:	061b      	lsls	r3, r3, #24
 80091c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091c4:	4931      	ldr	r1, [pc, #196]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091ca:	4b30      	ldr	r3, [pc, #192]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	492d      	ldr	r1, [pc, #180]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80091dc:	4b2b      	ldr	r3, [pc, #172]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	f023 0220 	bic.w	r2, r3, #32
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	4928      	ldr	r1, [pc, #160]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80091ee:	4b27      	ldr	r3, [pc, #156]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f2:	4a26      	ldr	r2, [pc, #152]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091f4:	f023 0310 	bic.w	r3, r3, #16
 80091f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80091fa:	4b24      	ldr	r3, [pc, #144]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 80091fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091fe:	4b24      	ldr	r3, [pc, #144]	; (8009290 <RCCEx_PLL2_Config+0x160>)
 8009200:	4013      	ands	r3, r2
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	69d2      	ldr	r2, [r2, #28]
 8009206:	00d2      	lsls	r2, r2, #3
 8009208:	4920      	ldr	r1, [pc, #128]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 800920a:	4313      	orrs	r3, r2
 800920c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800920e:	4b1f      	ldr	r3, [pc, #124]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	4a1e      	ldr	r2, [pc, #120]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009214:	f043 0310 	orr.w	r3, r3, #16
 8009218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009220:	4b1a      	ldr	r3, [pc, #104]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	4a19      	ldr	r2, [pc, #100]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800922a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800922c:	e00f      	b.n	800924e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d106      	bne.n	8009242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009234:	4b15      	ldr	r3, [pc, #84]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	4a14      	ldr	r2, [pc, #80]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 800923a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800923e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009240:	e005      	b.n	800924e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009242:	4b12      	ldr	r3, [pc, #72]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	4a11      	ldr	r2, [pc, #68]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800924c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a0e      	ldr	r2, [pc, #56]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800925a:	f7fa fa25 	bl	80036a8 <HAL_GetTick>
 800925e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009260:	e008      	b.n	8009274 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009262:	f7fa fa21 	bl	80036a8 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d901      	bls.n	8009274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e006      	b.n	8009282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009274:	4b05      	ldr	r3, [pc, #20]	; (800928c <RCCEx_PLL2_Config+0x15c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0f0      	beq.n	8009262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	58024400 	.word	0x58024400
 8009290:	ffff0007 	.word	0xffff0007

08009294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092a2:	4b53      	ldr	r3, [pc, #332]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d101      	bne.n	80092b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e099      	b.n	80093e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092b2:	4b4f      	ldr	r3, [pc, #316]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a4e      	ldr	r2, [pc, #312]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80092b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092be:	f7fa f9f3 	bl	80036a8 <HAL_GetTick>
 80092c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092c4:	e008      	b.n	80092d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80092c6:	f7fa f9ef 	bl	80036a8 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d901      	bls.n	80092d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e086      	b.n	80093e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092d8:	4b45      	ldr	r3, [pc, #276]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1f0      	bne.n	80092c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80092e4:	4b42      	ldr	r3, [pc, #264]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	051b      	lsls	r3, r3, #20
 80092f2:	493f      	ldr	r1, [pc, #252]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80092f4:	4313      	orrs	r3, r2
 80092f6:	628b      	str	r3, [r1, #40]	; 0x28
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	3b01      	subs	r3, #1
 8009308:	025b      	lsls	r3, r3, #9
 800930a:	b29b      	uxth	r3, r3
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	3b01      	subs	r3, #1
 8009314:	041b      	lsls	r3, r3, #16
 8009316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	3b01      	subs	r3, #1
 8009322:	061b      	lsls	r3, r3, #24
 8009324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009328:	4931      	ldr	r1, [pc, #196]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 800932a:	4313      	orrs	r3, r2
 800932c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800932e:	4b30      	ldr	r3, [pc, #192]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	492d      	ldr	r1, [pc, #180]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 800933c:	4313      	orrs	r3, r2
 800933e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009340:	4b2b      	ldr	r3, [pc, #172]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	4928      	ldr	r1, [pc, #160]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 800934e:	4313      	orrs	r3, r2
 8009350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009352:	4b27      	ldr	r3, [pc, #156]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009356:	4a26      	ldr	r2, [pc, #152]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800935c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800935e:	4b24      	ldr	r3, [pc, #144]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009362:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <RCCEx_PLL3_Config+0x160>)
 8009364:	4013      	ands	r3, r2
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	69d2      	ldr	r2, [r2, #28]
 800936a:	00d2      	lsls	r2, r2, #3
 800936c:	4920      	ldr	r1, [pc, #128]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 800936e:	4313      	orrs	r3, r2
 8009370:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009372:	4b1f      	ldr	r3, [pc, #124]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	4a1e      	ldr	r2, [pc, #120]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800937c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009384:	4b1a      	ldr	r3, [pc, #104]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	4a19      	ldr	r2, [pc, #100]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 800938a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800938e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009390:	e00f      	b.n	80093b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d106      	bne.n	80093a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009398:	4b15      	ldr	r3, [pc, #84]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	4a14      	ldr	r2, [pc, #80]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 800939e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093a4:	e005      	b.n	80093b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093a6:	4b12      	ldr	r3, [pc, #72]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80093a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093aa:	4a11      	ldr	r2, [pc, #68]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80093ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093b2:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a0e      	ldr	r2, [pc, #56]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80093b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093be:	f7fa f973 	bl	80036a8 <HAL_GetTick>
 80093c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093c4:	e008      	b.n	80093d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80093c6:	f7fa f96f 	bl	80036a8 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d901      	bls.n	80093d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e006      	b.n	80093e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <RCCEx_PLL3_Config+0x15c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0f0      	beq.n	80093c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	58024400 	.word	0x58024400
 80093f4:	ffff0007 	.word	0xffff0007

080093f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e0f1      	b.n	80095ee <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a78      	ldr	r2, [pc, #480]	; (80095f8 <HAL_SPI_Init+0x200>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00f      	beq.n	800943a <HAL_SPI_Init+0x42>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a77      	ldr	r2, [pc, #476]	; (80095fc <HAL_SPI_Init+0x204>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00a      	beq.n	800943a <HAL_SPI_Init+0x42>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a75      	ldr	r2, [pc, #468]	; (8009600 <HAL_SPI_Init+0x208>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d005      	beq.n	800943a <HAL_SPI_Init+0x42>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	2b0f      	cmp	r3, #15
 8009434:	d901      	bls.n	800943a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e0d9      	b.n	80095ee <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fba2 	bl	8009b84 <SPI_GetPacketSize>
 8009440:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a6c      	ldr	r2, [pc, #432]	; (80095f8 <HAL_SPI_Init+0x200>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00c      	beq.n	8009466 <HAL_SPI_Init+0x6e>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a6a      	ldr	r2, [pc, #424]	; (80095fc <HAL_SPI_Init+0x204>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d007      	beq.n	8009466 <HAL_SPI_Init+0x6e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a69      	ldr	r2, [pc, #420]	; (8009600 <HAL_SPI_Init+0x208>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d002      	beq.n	8009466 <HAL_SPI_Init+0x6e>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b08      	cmp	r3, #8
 8009464:	d811      	bhi.n	800948a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800946a:	4a63      	ldr	r2, [pc, #396]	; (80095f8 <HAL_SPI_Init+0x200>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d009      	beq.n	8009484 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a61      	ldr	r2, [pc, #388]	; (80095fc <HAL_SPI_Init+0x204>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d004      	beq.n	8009484 <HAL_SPI_Init+0x8c>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a60      	ldr	r2, [pc, #384]	; (8009600 <HAL_SPI_Init+0x208>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d104      	bne.n	800948e <HAL_SPI_Init+0x96>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2b10      	cmp	r3, #16
 8009488:	d901      	bls.n	800948e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e0af      	b.n	80095ee <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7f9 fe3a 	bl	800311c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0201 	bic.w	r2, r2, #1
 80094be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80094ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094d4:	d119      	bne.n	800950a <HAL_SPI_Init+0x112>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094de:	d103      	bne.n	80094e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d008      	beq.n	80094fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10c      	bne.n	800950a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80094f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094f8:	d107      	bne.n	800950a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009508:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	69da      	ldr	r2, [r3, #28]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009512:	431a      	orrs	r2, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951c:	ea42 0103 	orr.w	r1, r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	430a      	orrs	r2, r1
 800952a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	431a      	orrs	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800956a:	ea42 0103 	orr.w	r1, r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d113      	bne.n	80095aa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009594:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0201 	bic.w	r2, r2, #1
 80095b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	40013000 	.word	0x40013000
 80095fc:	40003800 	.word	0x40003800
 8009600:	40003c00 	.word	0x40003c00

08009604 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08a      	sub	sp, #40	; 0x28
 8009608:	af02      	add	r7, sp, #8
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	4613      	mov	r3, r2
 8009612:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3320      	adds	r3, #32
 800961a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009626:	2b01      	cmp	r3, #1
 8009628:	d101      	bne.n	800962e <HAL_SPI_Transmit+0x2a>
 800962a:	2302      	movs	r3, #2
 800962c:	e1d7      	b.n	80099de <HAL_SPI_Transmit+0x3da>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009636:	f7fa f837 	bl	80036a8 <HAL_GetTick>
 800963a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b01      	cmp	r3, #1
 8009646:	d007      	beq.n	8009658 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009648:	2302      	movs	r3, #2
 800964a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009654:	7efb      	ldrb	r3, [r7, #27]
 8009656:	e1c2      	b.n	80099de <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <HAL_SPI_Transmit+0x60>
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d107      	bne.n	8009674 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009670:	7efb      	ldrb	r3, [r7, #27]
 8009672:	e1b4      	b.n	80099de <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2203      	movs	r2, #3
 8009678:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	88fa      	ldrh	r2, [r7, #6]
 800968e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	88fa      	ldrh	r2, [r7, #6]
 8009696:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80096c4:	d107      	bne.n	80096d6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	4b96      	ldr	r3, [pc, #600]	; (8009938 <HAL_SPI_Transmit+0x334>)
 80096de:	4013      	ands	r3, r2
 80096e0:	88f9      	ldrh	r1, [r7, #6]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	6812      	ldr	r2, [r2, #0]
 80096e6:	430b      	orrs	r3, r1
 80096e8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f042 0201 	orr.w	r2, r2, #1
 80096f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009702:	d107      	bne.n	8009714 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2b0f      	cmp	r3, #15
 800971a:	d947      	bls.n	80097ac <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800971c:	e03f      	b.n	800979e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b02      	cmp	r3, #2
 800972a:	d114      	bne.n	8009756 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800973c:	1d1a      	adds	r2, r3, #4
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009748:	b29b      	uxth	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009754:	e023      	b.n	800979e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009756:	f7f9 ffa7 	bl	80036a8 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d803      	bhi.n	800976e <HAL_SPI_Transmit+0x16a>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d102      	bne.n	8009774 <HAL_SPI_Transmit+0x170>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d114      	bne.n	800979e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f937 	bl	80099e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e11f      	b.n	80099de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1b9      	bne.n	800971e <HAL_SPI_Transmit+0x11a>
 80097aa:	e0f2      	b.n	8009992 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	2b07      	cmp	r3, #7
 80097b2:	f240 80e7 	bls.w	8009984 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80097b6:	e05d      	b.n	8009874 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d132      	bne.n	800982c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d918      	bls.n	8009804 <HAL_SPI_Transmit+0x200>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6812      	ldr	r2, [r2, #0]
 80097e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b02      	subs	r3, #2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009802:	e037      	b.n	8009874 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009808:	881a      	ldrh	r2, [r3, #0]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009812:	1c9a      	adds	r2, r3, #2
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800981e:	b29b      	uxth	r3, r3
 8009820:	3b01      	subs	r3, #1
 8009822:	b29a      	uxth	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800982a:	e023      	b.n	8009874 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800982c:	f7f9 ff3c 	bl	80036a8 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d803      	bhi.n	8009844 <HAL_SPI_Transmit+0x240>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d102      	bne.n	800984a <HAL_SPI_Transmit+0x246>
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d114      	bne.n	8009874 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f8cc 	bl	80099e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800985e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e0b4      	b.n	80099de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800987a:	b29b      	uxth	r3, r3
 800987c:	2b00      	cmp	r3, #0
 800987e:	d19b      	bne.n	80097b8 <HAL_SPI_Transmit+0x1b4>
 8009880:	e087      	b.n	8009992 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b02      	cmp	r3, #2
 800988e:	d155      	bne.n	800993c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b03      	cmp	r3, #3
 800989a:	d918      	bls.n	80098ce <HAL_SPI_Transmit+0x2ca>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a0:	2b40      	cmp	r3, #64	; 0x40
 80098a2:	d914      	bls.n	80098ce <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6812      	ldr	r2, [r2, #0]
 80098ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b4:	1d1a      	adds	r2, r3, #4
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b04      	subs	r3, #4
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80098cc:	e05a      	b.n	8009984 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d917      	bls.n	800990a <HAL_SPI_Transmit+0x306>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d013      	beq.n	800990a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e6:	881a      	ldrh	r2, [r3, #0]
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f0:	1c9a      	adds	r2, r3, #2
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	3b02      	subs	r3, #2
 8009900:	b29a      	uxth	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009908:	e03c      	b.n	8009984 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3320      	adds	r3, #32
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009928:	b29b      	uxth	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009934:	e026      	b.n	8009984 <HAL_SPI_Transmit+0x380>
 8009936:	bf00      	nop
 8009938:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800993c:	f7f9 feb4 	bl	80036a8 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d803      	bhi.n	8009954 <HAL_SPI_Transmit+0x350>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009952:	d102      	bne.n	800995a <HAL_SPI_Transmit+0x356>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d114      	bne.n	8009984 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f844 	bl	80099e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800996e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e02c      	b.n	80099de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f af78 	bne.w	8009882 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2200      	movs	r2, #0
 800999a:	2108      	movs	r1, #8
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f8c3 	bl	8009b28 <SPI_WaitOnFlagUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ae:	f043 0220 	orr.w	r2, r3, #32
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 f815 	bl	80099e8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80099dc:	7efb      	ldrb	r3, [r7, #27]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop

080099e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0208 	orr.w	r2, r2, #8
 8009a06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0210 	orr.w	r2, r2, #16
 8009a16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0201 	bic.w	r2, r2, #1
 8009a26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6919      	ldr	r1, [r3, #16]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b3c      	ldr	r3, [pc, #240]	; (8009b24 <SPI_CloseTransfer+0x13c>)
 8009a34:	400b      	ands	r3, r1
 8009a36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009a46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d014      	beq.n	8009a7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f003 0320 	and.w	r3, r3, #32
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00f      	beq.n	8009a7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f042 0220 	orr.w	r2, r2, #32
 8009a7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	d014      	beq.n	8009ab4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00f      	beq.n	8009ab4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a9a:	f043 0204 	orr.w	r2, r3, #4
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ab2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00f      	beq.n	8009ade <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ac4:	f043 0201 	orr.w	r2, r3, #1
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	699a      	ldr	r2, [r3, #24]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009adc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00f      	beq.n	8009b08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aee:	f043 0208 	orr.w	r2, r3, #8
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699a      	ldr	r2, [r3, #24]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009b18:	bf00      	nop
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	fffffc90 	.word	0xfffffc90

08009b28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	4613      	mov	r3, r2
 8009b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b38:	e010      	b.n	8009b5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b3a:	f7f9 fdb5 	bl	80036a8 <HAL_GetTick>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d803      	bhi.n	8009b52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b50:	d102      	bne.n	8009b58 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e00f      	b.n	8009b7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695a      	ldr	r2, [r3, #20]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4013      	ands	r3, r2
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	bf0c      	ite	eq
 8009b6c:	2301      	moveq	r3, #1
 8009b6e:	2300      	movne	r3, #0
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	461a      	mov	r2, r3
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d0df      	beq.n	8009b3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	3301      	adds	r3, #1
 8009b94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	3307      	adds	r3, #7
 8009ba2:	08db      	lsrs	r3, r3, #3
 8009ba4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e042      	b.n	8009c52 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7f9 fb08 	bl	80031f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2224      	movs	r2, #36	; 0x24
 8009be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0201 	bic.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fbeb 	bl	800a3d8 <UART_SetConfig>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d101      	bne.n	8009c0c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e022      	b.n	8009c52 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 f947 	bl	800aea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f042 0201 	orr.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 f9ce 	bl	800afec <UART_CheckIdleState>
 8009c50:	4603      	mov	r3, r0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b0ba      	sub	sp, #232	; 0xe8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009c86:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11b      	bne.n	8009cd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d015      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d105      	bne.n	8009cbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d009      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 835a 	beq.w	800a37a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	4798      	blx	r3
      }
      return;
 8009cce:	e354      	b.n	800a37a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 811f 	beq.w	8009f18 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009cda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009cde:	4b8b      	ldr	r3, [pc, #556]	; (8009f0c <HAL_UART_IRQHandler+0x2b0>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ce6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009cea:	4b89      	ldr	r3, [pc, #548]	; (8009f10 <HAL_UART_IRQHandler+0x2b4>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 8112 	beq.w	8009f18 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d011      	beq.n	8009d24 <HAL_UART_IRQHandler+0xc8>
 8009d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2201      	movs	r2, #1
 8009d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d1a:	f043 0201 	orr.w	r2, r3, #1
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d011      	beq.n	8009d54 <HAL_UART_IRQHandler+0xf8>
 8009d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2202      	movs	r2, #2
 8009d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d4a:	f043 0204 	orr.w	r2, r3, #4
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d011      	beq.n	8009d84 <HAL_UART_IRQHandler+0x128>
 8009d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2204      	movs	r2, #4
 8009d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d7a:	f043 0202 	orr.w	r2, r3, #2
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d017      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d94:	f003 0320 	and.w	r3, r3, #32
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009da0:	4b5a      	ldr	r3, [pc, #360]	; (8009f0c <HAL_UART_IRQHandler+0x2b0>)
 8009da2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2208      	movs	r2, #8
 8009dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db6:	f043 0208 	orr.w	r2, r3, #8
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d012      	beq.n	8009df2 <HAL_UART_IRQHandler+0x196>
 8009dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00c      	beq.n	8009df2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009de8:	f043 0220 	orr.w	r2, r3, #32
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 82c0 	beq.w	800a37e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d013      	beq.n	8009e32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d105      	bne.n	8009e22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e46:	2b40      	cmp	r3, #64	; 0x40
 8009e48:	d005      	beq.n	8009e56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d04f      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f9dc 	bl	800b214 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e66:	2b40      	cmp	r3, #64	; 0x40
 8009e68:	d141      	bne.n	8009eee <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1d9      	bne.n	8009e6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d013      	beq.n	8009ee6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ec2:	4a14      	ldr	r2, [pc, #80]	; (8009f14 <HAL_UART_IRQHandler+0x2b8>)
 8009ec4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fa fbc6 	bl	800465c <HAL_DMA_Abort_IT>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d017      	beq.n	8009f06 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee4:	e00f      	b.n	8009f06 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa60 	bl	800a3ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eec:	e00b      	b.n	8009f06 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa5c 	bl	800a3ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef4:	e007      	b.n	8009f06 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa58 	bl	800a3ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009f04:	e23b      	b.n	800a37e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f06:	bf00      	nop
    return;
 8009f08:	e239      	b.n	800a37e <HAL_UART_IRQHandler+0x722>
 8009f0a:	bf00      	nop
 8009f0c:	10000001 	.word	0x10000001
 8009f10:	04000120 	.word	0x04000120
 8009f14:	0800b2e1 	.word	0x0800b2e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	f040 81ce 	bne.w	800a2be <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f26:	f003 0310 	and.w	r3, r3, #16
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 81c7 	beq.w	800a2be <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 81c0 	beq.w	800a2be <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2210      	movs	r2, #16
 8009f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f50:	2b40      	cmp	r3, #64	; 0x40
 8009f52:	f040 813b 	bne.w	800a1cc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a8b      	ldr	r2, [pc, #556]	; (800a18c <HAL_UART_IRQHandler+0x530>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d059      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a89      	ldr	r2, [pc, #548]	; (800a190 <HAL_UART_IRQHandler+0x534>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d053      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a87      	ldr	r2, [pc, #540]	; (800a194 <HAL_UART_IRQHandler+0x538>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d04d      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a85      	ldr	r2, [pc, #532]	; (800a198 <HAL_UART_IRQHandler+0x53c>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d047      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a83      	ldr	r2, [pc, #524]	; (800a19c <HAL_UART_IRQHandler+0x540>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d041      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a81      	ldr	r2, [pc, #516]	; (800a1a0 <HAL_UART_IRQHandler+0x544>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d03b      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a7f      	ldr	r2, [pc, #508]	; (800a1a4 <HAL_UART_IRQHandler+0x548>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d035      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a7d      	ldr	r2, [pc, #500]	; (800a1a8 <HAL_UART_IRQHandler+0x54c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d02f      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a7b      	ldr	r2, [pc, #492]	; (800a1ac <HAL_UART_IRQHandler+0x550>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d029      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a79      	ldr	r2, [pc, #484]	; (800a1b0 <HAL_UART_IRQHandler+0x554>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d023      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a77      	ldr	r2, [pc, #476]	; (800a1b4 <HAL_UART_IRQHandler+0x558>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d01d      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a75      	ldr	r2, [pc, #468]	; (800a1b8 <HAL_UART_IRQHandler+0x55c>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d017      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a73      	ldr	r2, [pc, #460]	; (800a1bc <HAL_UART_IRQHandler+0x560>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d011      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a71      	ldr	r2, [pc, #452]	; (800a1c0 <HAL_UART_IRQHandler+0x564>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d00b      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a6f      	ldr	r2, [pc, #444]	; (800a1c4 <HAL_UART_IRQHandler+0x568>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d005      	beq.n	800a016 <HAL_UART_IRQHandler+0x3ba>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a6d      	ldr	r2, [pc, #436]	; (800a1c8 <HAL_UART_IRQHandler+0x56c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d105      	bne.n	800a022 <HAL_UART_IRQHandler+0x3c6>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	e004      	b.n	800a02c <HAL_UART_IRQHandler+0x3d0>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 81a4 	beq.w	800a382 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a040:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a044:	429a      	cmp	r2, r3
 800a046:	f080 819c 	bcs.w	800a382 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a05e:	f000 8086 	beq.w	800a16e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a07a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a07e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a08c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a090:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a098:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a09c:	e841 2300 	strex	r3, r2, [r1]
 800a0a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1da      	bne.n	800a062 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0be:	f023 0301 	bic.w	r3, r3, #1
 800a0c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e1      	bne.n	800a0ac <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0f2:	e853 3f00 	ldrex	r3, [r3]
 800a0f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3308      	adds	r3, #8
 800a108:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a10c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a10e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a11a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e3      	bne.n	800a0e8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2220      	movs	r2, #32
 800a124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a13e:	f023 0310 	bic.w	r3, r3, #16
 800a142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a150:	65bb      	str	r3, [r7, #88]	; 0x58
 800a152:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a158:	e841 2300 	strex	r3, r2, [r1]
 800a15c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e4      	bne.n	800a12e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a168:	4618      	mov	r0, r3
 800a16a:	f7f9 ff59 	bl	8004020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f91c 	bl	800a3c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a188:	e0fb      	b.n	800a382 <HAL_UART_IRQHandler+0x726>
 800a18a:	bf00      	nop
 800a18c:	40020010 	.word	0x40020010
 800a190:	40020028 	.word	0x40020028
 800a194:	40020040 	.word	0x40020040
 800a198:	40020058 	.word	0x40020058
 800a19c:	40020070 	.word	0x40020070
 800a1a0:	40020088 	.word	0x40020088
 800a1a4:	400200a0 	.word	0x400200a0
 800a1a8:	400200b8 	.word	0x400200b8
 800a1ac:	40020410 	.word	0x40020410
 800a1b0:	40020428 	.word	0x40020428
 800a1b4:	40020440 	.word	0x40020440
 800a1b8:	40020458 	.word	0x40020458
 800a1bc:	40020470 	.word	0x40020470
 800a1c0:	40020488 	.word	0x40020488
 800a1c4:	400204a0 	.word	0x400204a0
 800a1c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 80cc 	beq.w	800a386 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a1ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 80c7 	beq.w	800a386 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	e853 3f00 	ldrex	r3, [r3]
 800a204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a20c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a21a:	647b      	str	r3, [r7, #68]	; 0x44
 800a21c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e4      	bne.n	800a1f8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	623b      	str	r3, [r7, #32]
   return(result);
 800a23e:	6a3a      	ldr	r2, [r7, #32]
 800a240:	4b54      	ldr	r3, [pc, #336]	; (800a394 <HAL_UART_IRQHandler+0x738>)
 800a242:	4013      	ands	r3, r2
 800a244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3308      	adds	r3, #8
 800a24e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a252:	633a      	str	r2, [r7, #48]	; 0x30
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e3      	bne.n	800a22e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	60fb      	str	r3, [r7, #12]
   return(result);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0310 	bic.w	r3, r3, #16
 800a28e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a29c:	61fb      	str	r3, [r7, #28]
 800a29e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	69b9      	ldr	r1, [r7, #24]
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	e841 2300 	strex	r3, r2, [r1]
 800a2a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e4      	bne.n	800a27a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f882 	bl	800a3c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2bc:	e063      	b.n	800a386 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00e      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x68c>
 800a2ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d008      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a2de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f001 f83e 	bl	800b362 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2e6:	e051      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d014      	beq.n	800a31e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a310:	2b00      	cmp	r3, #0
 800a312:	d03a      	beq.n	800a38a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	4798      	blx	r3
    }
    return;
 800a31c:	e035      	b.n	800a38a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a31e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a326:	2b00      	cmp	r3, #0
 800a328:	d009      	beq.n	800a33e <HAL_UART_IRQHandler+0x6e2>
 800a32a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 ffe8 	bl	800b30c <UART_EndTransmit_IT>
    return;
 800a33c:	e026      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d009      	beq.n	800a35e <HAL_UART_IRQHandler+0x702>
 800a34a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a34e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 f817 	bl	800b38a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a35c:	e016      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d010      	beq.n	800a38c <HAL_UART_IRQHandler+0x730>
 800a36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	da0c      	bge.n	800a38c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 ffff 	bl	800b376 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a378:	e008      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
      return;
 800a37a:	bf00      	nop
 800a37c:	e006      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
    return;
 800a37e:	bf00      	nop
 800a380:	e004      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
      return;
 800a382:	bf00      	nop
 800a384:	e002      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
      return;
 800a386:	bf00      	nop
 800a388:	e000      	b.n	800a38c <HAL_UART_IRQHandler+0x730>
    return;
 800a38a:	bf00      	nop
  }
}
 800a38c:	37e8      	adds	r7, #232	; 0xe8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	effffffe 	.word	0xeffffffe

0800a398 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3dc:	b092      	sub	sp, #72	; 0x48
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4bbe      	ldr	r3, [pc, #760]	; (800a700 <UART_SetConfig+0x328>)
 800a408:	4013      	ands	r3, r2
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	6812      	ldr	r2, [r2, #0]
 800a40e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a410:	430b      	orrs	r3, r1
 800a412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	68da      	ldr	r2, [r3, #12]
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4ab3      	ldr	r2, [pc, #716]	; (800a704 <UART_SetConfig+0x32c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d004      	beq.n	800a444 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a440:	4313      	orrs	r3, r2
 800a442:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689a      	ldr	r2, [r3, #8]
 800a44a:	4baf      	ldr	r3, [pc, #700]	; (800a708 <UART_SetConfig+0x330>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a454:	430b      	orrs	r3, r1
 800a456:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45e:	f023 010f 	bic.w	r1, r3, #15
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4aa6      	ldr	r2, [pc, #664]	; (800a70c <UART_SetConfig+0x334>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d177      	bne.n	800a568 <UART_SetConfig+0x190>
 800a478:	4ba5      	ldr	r3, [pc, #660]	; (800a710 <UART_SetConfig+0x338>)
 800a47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a47c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a480:	2b28      	cmp	r3, #40	; 0x28
 800a482:	d86d      	bhi.n	800a560 <UART_SetConfig+0x188>
 800a484:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <UART_SetConfig+0xb4>)
 800a486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48a:	bf00      	nop
 800a48c:	0800a531 	.word	0x0800a531
 800a490:	0800a561 	.word	0x0800a561
 800a494:	0800a561 	.word	0x0800a561
 800a498:	0800a561 	.word	0x0800a561
 800a49c:	0800a561 	.word	0x0800a561
 800a4a0:	0800a561 	.word	0x0800a561
 800a4a4:	0800a561 	.word	0x0800a561
 800a4a8:	0800a561 	.word	0x0800a561
 800a4ac:	0800a539 	.word	0x0800a539
 800a4b0:	0800a561 	.word	0x0800a561
 800a4b4:	0800a561 	.word	0x0800a561
 800a4b8:	0800a561 	.word	0x0800a561
 800a4bc:	0800a561 	.word	0x0800a561
 800a4c0:	0800a561 	.word	0x0800a561
 800a4c4:	0800a561 	.word	0x0800a561
 800a4c8:	0800a561 	.word	0x0800a561
 800a4cc:	0800a541 	.word	0x0800a541
 800a4d0:	0800a561 	.word	0x0800a561
 800a4d4:	0800a561 	.word	0x0800a561
 800a4d8:	0800a561 	.word	0x0800a561
 800a4dc:	0800a561 	.word	0x0800a561
 800a4e0:	0800a561 	.word	0x0800a561
 800a4e4:	0800a561 	.word	0x0800a561
 800a4e8:	0800a561 	.word	0x0800a561
 800a4ec:	0800a549 	.word	0x0800a549
 800a4f0:	0800a561 	.word	0x0800a561
 800a4f4:	0800a561 	.word	0x0800a561
 800a4f8:	0800a561 	.word	0x0800a561
 800a4fc:	0800a561 	.word	0x0800a561
 800a500:	0800a561 	.word	0x0800a561
 800a504:	0800a561 	.word	0x0800a561
 800a508:	0800a561 	.word	0x0800a561
 800a50c:	0800a551 	.word	0x0800a551
 800a510:	0800a561 	.word	0x0800a561
 800a514:	0800a561 	.word	0x0800a561
 800a518:	0800a561 	.word	0x0800a561
 800a51c:	0800a561 	.word	0x0800a561
 800a520:	0800a561 	.word	0x0800a561
 800a524:	0800a561 	.word	0x0800a561
 800a528:	0800a561 	.word	0x0800a561
 800a52c:	0800a559 	.word	0x0800a559
 800a530:	2301      	movs	r3, #1
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a536:	e222      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a538:	2304      	movs	r3, #4
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a53e:	e21e      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a540:	2308      	movs	r3, #8
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a546:	e21a      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a548:	2310      	movs	r3, #16
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54e:	e216      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a550:	2320      	movs	r3, #32
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a556:	e212      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a558:	2340      	movs	r3, #64	; 0x40
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55e:	e20e      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a560:	2380      	movs	r3, #128	; 0x80
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e20a      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a69      	ldr	r2, [pc, #420]	; (800a714 <UART_SetConfig+0x33c>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d130      	bne.n	800a5d4 <UART_SetConfig+0x1fc>
 800a572:	4b67      	ldr	r3, [pc, #412]	; (800a710 <UART_SetConfig+0x338>)
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	d826      	bhi.n	800a5cc <UART_SetConfig+0x1f4>
 800a57e:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <UART_SetConfig+0x1ac>)
 800a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a584:	0800a59d 	.word	0x0800a59d
 800a588:	0800a5a5 	.word	0x0800a5a5
 800a58c:	0800a5ad 	.word	0x0800a5ad
 800a590:	0800a5b5 	.word	0x0800a5b5
 800a594:	0800a5bd 	.word	0x0800a5bd
 800a598:	0800a5c5 	.word	0x0800a5c5
 800a59c:	2300      	movs	r3, #0
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a2:	e1ec      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a5a4:	2304      	movs	r3, #4
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5aa:	e1e8      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a5ac:	2308      	movs	r3, #8
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5b2:	e1e4      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a5b4:	2310      	movs	r3, #16
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ba:	e1e0      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a5bc:	2320      	movs	r3, #32
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c2:	e1dc      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a5c4:	2340      	movs	r3, #64	; 0x40
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ca:	e1d8      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a5cc:	2380      	movs	r3, #128	; 0x80
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d2:	e1d4      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a4f      	ldr	r2, [pc, #316]	; (800a718 <UART_SetConfig+0x340>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d130      	bne.n	800a640 <UART_SetConfig+0x268>
 800a5de:	4b4c      	ldr	r3, [pc, #304]	; (800a710 <UART_SetConfig+0x338>)
 800a5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b05      	cmp	r3, #5
 800a5e8:	d826      	bhi.n	800a638 <UART_SetConfig+0x260>
 800a5ea:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <UART_SetConfig+0x218>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a609 	.word	0x0800a609
 800a5f4:	0800a611 	.word	0x0800a611
 800a5f8:	0800a619 	.word	0x0800a619
 800a5fc:	0800a621 	.word	0x0800a621
 800a600:	0800a629 	.word	0x0800a629
 800a604:	0800a631 	.word	0x0800a631
 800a608:	2300      	movs	r3, #0
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60e:	e1b6      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a610:	2304      	movs	r3, #4
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a616:	e1b2      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a618:	2308      	movs	r3, #8
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a61e:	e1ae      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a620:	2310      	movs	r3, #16
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a626:	e1aa      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a628:	2320      	movs	r3, #32
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62e:	e1a6      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a630:	2340      	movs	r3, #64	; 0x40
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e1a2      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e19e      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a35      	ldr	r2, [pc, #212]	; (800a71c <UART_SetConfig+0x344>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d130      	bne.n	800a6ac <UART_SetConfig+0x2d4>
 800a64a:	4b31      	ldr	r3, [pc, #196]	; (800a710 <UART_SetConfig+0x338>)
 800a64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a64e:	f003 0307 	and.w	r3, r3, #7
 800a652:	2b05      	cmp	r3, #5
 800a654:	d826      	bhi.n	800a6a4 <UART_SetConfig+0x2cc>
 800a656:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <UART_SetConfig+0x284>)
 800a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65c:	0800a675 	.word	0x0800a675
 800a660:	0800a67d 	.word	0x0800a67d
 800a664:	0800a685 	.word	0x0800a685
 800a668:	0800a68d 	.word	0x0800a68d
 800a66c:	0800a695 	.word	0x0800a695
 800a670:	0800a69d 	.word	0x0800a69d
 800a674:	2300      	movs	r3, #0
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67a:	e180      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a67c:	2304      	movs	r3, #4
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a682:	e17c      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a684:	2308      	movs	r3, #8
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a68a:	e178      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a68c:	2310      	movs	r3, #16
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a692:	e174      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a694:	2320      	movs	r3, #32
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a69a:	e170      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a69c:	2340      	movs	r3, #64	; 0x40
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a2:	e16c      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a6a4:	2380      	movs	r3, #128	; 0x80
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6aa:	e168      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a1b      	ldr	r2, [pc, #108]	; (800a720 <UART_SetConfig+0x348>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d142      	bne.n	800a73c <UART_SetConfig+0x364>
 800a6b6:	4b16      	ldr	r3, [pc, #88]	; (800a710 <UART_SetConfig+0x338>)
 800a6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	2b05      	cmp	r3, #5
 800a6c0:	d838      	bhi.n	800a734 <UART_SetConfig+0x35c>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <UART_SetConfig+0x2f0>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6e1 	.word	0x0800a6e1
 800a6cc:	0800a6e9 	.word	0x0800a6e9
 800a6d0:	0800a6f1 	.word	0x0800a6f1
 800a6d4:	0800a6f9 	.word	0x0800a6f9
 800a6d8:	0800a725 	.word	0x0800a725
 800a6dc:	0800a72d 	.word	0x0800a72d
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e6:	e14a      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a6e8:	2304      	movs	r3, #4
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ee:	e146      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a6f0:	2308      	movs	r3, #8
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6f6:	e142      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a6f8:	2310      	movs	r3, #16
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6fe:	e13e      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a700:	cfff69f3 	.word	0xcfff69f3
 800a704:	58000c00 	.word	0x58000c00
 800a708:	11fff4ff 	.word	0x11fff4ff
 800a70c:	40011000 	.word	0x40011000
 800a710:	58024400 	.word	0x58024400
 800a714:	40004400 	.word	0x40004400
 800a718:	40004800 	.word	0x40004800
 800a71c:	40004c00 	.word	0x40004c00
 800a720:	40005000 	.word	0x40005000
 800a724:	2320      	movs	r3, #32
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e128      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a72c:	2340      	movs	r3, #64	; 0x40
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e124      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a734:	2380      	movs	r3, #128	; 0x80
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e120      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4acb      	ldr	r2, [pc, #812]	; (800aa70 <UART_SetConfig+0x698>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d176      	bne.n	800a834 <UART_SetConfig+0x45c>
 800a746:	4bcb      	ldr	r3, [pc, #812]	; (800aa74 <UART_SetConfig+0x69c>)
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a74e:	2b28      	cmp	r3, #40	; 0x28
 800a750:	d86c      	bhi.n	800a82c <UART_SetConfig+0x454>
 800a752:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <UART_SetConfig+0x380>)
 800a754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a758:	0800a7fd 	.word	0x0800a7fd
 800a75c:	0800a82d 	.word	0x0800a82d
 800a760:	0800a82d 	.word	0x0800a82d
 800a764:	0800a82d 	.word	0x0800a82d
 800a768:	0800a82d 	.word	0x0800a82d
 800a76c:	0800a82d 	.word	0x0800a82d
 800a770:	0800a82d 	.word	0x0800a82d
 800a774:	0800a82d 	.word	0x0800a82d
 800a778:	0800a805 	.word	0x0800a805
 800a77c:	0800a82d 	.word	0x0800a82d
 800a780:	0800a82d 	.word	0x0800a82d
 800a784:	0800a82d 	.word	0x0800a82d
 800a788:	0800a82d 	.word	0x0800a82d
 800a78c:	0800a82d 	.word	0x0800a82d
 800a790:	0800a82d 	.word	0x0800a82d
 800a794:	0800a82d 	.word	0x0800a82d
 800a798:	0800a80d 	.word	0x0800a80d
 800a79c:	0800a82d 	.word	0x0800a82d
 800a7a0:	0800a82d 	.word	0x0800a82d
 800a7a4:	0800a82d 	.word	0x0800a82d
 800a7a8:	0800a82d 	.word	0x0800a82d
 800a7ac:	0800a82d 	.word	0x0800a82d
 800a7b0:	0800a82d 	.word	0x0800a82d
 800a7b4:	0800a82d 	.word	0x0800a82d
 800a7b8:	0800a815 	.word	0x0800a815
 800a7bc:	0800a82d 	.word	0x0800a82d
 800a7c0:	0800a82d 	.word	0x0800a82d
 800a7c4:	0800a82d 	.word	0x0800a82d
 800a7c8:	0800a82d 	.word	0x0800a82d
 800a7cc:	0800a82d 	.word	0x0800a82d
 800a7d0:	0800a82d 	.word	0x0800a82d
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a81d 	.word	0x0800a81d
 800a7dc:	0800a82d 	.word	0x0800a82d
 800a7e0:	0800a82d 	.word	0x0800a82d
 800a7e4:	0800a82d 	.word	0x0800a82d
 800a7e8:	0800a82d 	.word	0x0800a82d
 800a7ec:	0800a82d 	.word	0x0800a82d
 800a7f0:	0800a82d 	.word	0x0800a82d
 800a7f4:	0800a82d 	.word	0x0800a82d
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e0bc      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a804:	2304      	movs	r3, #4
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80a:	e0b8      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a80c:	2308      	movs	r3, #8
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e0b4      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a814:	2310      	movs	r3, #16
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81a:	e0b0      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a81c:	2320      	movs	r3, #32
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a822:	e0ac      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a824:	2340      	movs	r3, #64	; 0x40
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82a:	e0a8      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a832:	e0a4      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a8f      	ldr	r2, [pc, #572]	; (800aa78 <UART_SetConfig+0x6a0>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d130      	bne.n	800a8a0 <UART_SetConfig+0x4c8>
 800a83e:	4b8d      	ldr	r3, [pc, #564]	; (800aa74 <UART_SetConfig+0x69c>)
 800a840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a842:	f003 0307 	and.w	r3, r3, #7
 800a846:	2b05      	cmp	r3, #5
 800a848:	d826      	bhi.n	800a898 <UART_SetConfig+0x4c0>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <UART_SetConfig+0x478>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a869 	.word	0x0800a869
 800a854:	0800a871 	.word	0x0800a871
 800a858:	0800a879 	.word	0x0800a879
 800a85c:	0800a881 	.word	0x0800a881
 800a860:	0800a889 	.word	0x0800a889
 800a864:	0800a891 	.word	0x0800a891
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86e:	e086      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a870:	2304      	movs	r3, #4
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a876:	e082      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a878:	2308      	movs	r3, #8
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87e:	e07e      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a880:	2310      	movs	r3, #16
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a886:	e07a      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a888:	2320      	movs	r3, #32
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88e:	e076      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a890:	2340      	movs	r3, #64	; 0x40
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a896:	e072      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a898:	2380      	movs	r3, #128	; 0x80
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a89e:	e06e      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a75      	ldr	r2, [pc, #468]	; (800aa7c <UART_SetConfig+0x6a4>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d130      	bne.n	800a90c <UART_SetConfig+0x534>
 800a8aa:	4b72      	ldr	r3, [pc, #456]	; (800aa74 <UART_SetConfig+0x69c>)
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	d826      	bhi.n	800a904 <UART_SetConfig+0x52c>
 800a8b6:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <UART_SetConfig+0x4e4>)
 800a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8bc:	0800a8d5 	.word	0x0800a8d5
 800a8c0:	0800a8dd 	.word	0x0800a8dd
 800a8c4:	0800a8e5 	.word	0x0800a8e5
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a8f5 	.word	0x0800a8f5
 800a8d0:	0800a8fd 	.word	0x0800a8fd
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8da:	e050      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a8dc:	2304      	movs	r3, #4
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e2:	e04c      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a8e4:	2308      	movs	r3, #8
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ea:	e048      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f2:	e044      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fa:	e040      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a902:	e03c      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a904:	2380      	movs	r3, #128	; 0x80
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a90a:	e038      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a5b      	ldr	r2, [pc, #364]	; (800aa80 <UART_SetConfig+0x6a8>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d130      	bne.n	800a978 <UART_SetConfig+0x5a0>
 800a916:	4b57      	ldr	r3, [pc, #348]	; (800aa74 <UART_SetConfig+0x69c>)
 800a918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91a:	f003 0307 	and.w	r3, r3, #7
 800a91e:	2b05      	cmp	r3, #5
 800a920:	d826      	bhi.n	800a970 <UART_SetConfig+0x598>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <UART_SetConfig+0x550>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a941 	.word	0x0800a941
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a951 	.word	0x0800a951
 800a934:	0800a959 	.word	0x0800a959
 800a938:	0800a961 	.word	0x0800a961
 800a93c:	0800a969 	.word	0x0800a969
 800a940:	2302      	movs	r3, #2
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e01a      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a948:	2304      	movs	r3, #4
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94e:	e016      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a950:	2308      	movs	r3, #8
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a956:	e012      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a958:	2310      	movs	r3, #16
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95e:	e00e      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a960:	2320      	movs	r3, #32
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a966:	e00a      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a968:	2340      	movs	r3, #64	; 0x40
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96e:	e006      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a970:	2380      	movs	r3, #128	; 0x80
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a976:	e002      	b.n	800a97e <UART_SetConfig+0x5a6>
 800a978:	2380      	movs	r3, #128	; 0x80
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a3f      	ldr	r2, [pc, #252]	; (800aa80 <UART_SetConfig+0x6a8>)
 800a984:	4293      	cmp	r3, r2
 800a986:	f040 80f8 	bne.w	800ab7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a98a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a98e:	2b20      	cmp	r3, #32
 800a990:	dc46      	bgt.n	800aa20 <UART_SetConfig+0x648>
 800a992:	2b02      	cmp	r3, #2
 800a994:	f2c0 8082 	blt.w	800aa9c <UART_SetConfig+0x6c4>
 800a998:	3b02      	subs	r3, #2
 800a99a:	2b1e      	cmp	r3, #30
 800a99c:	d87e      	bhi.n	800aa9c <UART_SetConfig+0x6c4>
 800a99e:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <UART_SetConfig+0x5cc>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800aa27 	.word	0x0800aa27
 800a9a8:	0800aa9d 	.word	0x0800aa9d
 800a9ac:	0800aa2f 	.word	0x0800aa2f
 800a9b0:	0800aa9d 	.word	0x0800aa9d
 800a9b4:	0800aa9d 	.word	0x0800aa9d
 800a9b8:	0800aa9d 	.word	0x0800aa9d
 800a9bc:	0800aa3f 	.word	0x0800aa3f
 800a9c0:	0800aa9d 	.word	0x0800aa9d
 800a9c4:	0800aa9d 	.word	0x0800aa9d
 800a9c8:	0800aa9d 	.word	0x0800aa9d
 800a9cc:	0800aa9d 	.word	0x0800aa9d
 800a9d0:	0800aa9d 	.word	0x0800aa9d
 800a9d4:	0800aa9d 	.word	0x0800aa9d
 800a9d8:	0800aa9d 	.word	0x0800aa9d
 800a9dc:	0800aa4f 	.word	0x0800aa4f
 800a9e0:	0800aa9d 	.word	0x0800aa9d
 800a9e4:	0800aa9d 	.word	0x0800aa9d
 800a9e8:	0800aa9d 	.word	0x0800aa9d
 800a9ec:	0800aa9d 	.word	0x0800aa9d
 800a9f0:	0800aa9d 	.word	0x0800aa9d
 800a9f4:	0800aa9d 	.word	0x0800aa9d
 800a9f8:	0800aa9d 	.word	0x0800aa9d
 800a9fc:	0800aa9d 	.word	0x0800aa9d
 800aa00:	0800aa9d 	.word	0x0800aa9d
 800aa04:	0800aa9d 	.word	0x0800aa9d
 800aa08:	0800aa9d 	.word	0x0800aa9d
 800aa0c:	0800aa9d 	.word	0x0800aa9d
 800aa10:	0800aa9d 	.word	0x0800aa9d
 800aa14:	0800aa9d 	.word	0x0800aa9d
 800aa18:	0800aa9d 	.word	0x0800aa9d
 800aa1c:	0800aa8f 	.word	0x0800aa8f
 800aa20:	2b40      	cmp	r3, #64	; 0x40
 800aa22:	d037      	beq.n	800aa94 <UART_SetConfig+0x6bc>
 800aa24:	e03a      	b.n	800aa9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa26:	f7fe f8c5 	bl	8008bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa2c:	e03c      	b.n	800aaa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe f8d4 	bl	8008be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa3c:	e034      	b.n	800aaa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa3e:	f107 0318 	add.w	r3, r7, #24
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fa20 	bl	8008e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa4c:	e02c      	b.n	800aaa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa4e:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <UART_SetConfig+0x69c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d016      	beq.n	800aa88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa5a:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <UART_SetConfig+0x69c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	08db      	lsrs	r3, r3, #3
 800aa60:	f003 0303 	and.w	r3, r3, #3
 800aa64:	4a07      	ldr	r2, [pc, #28]	; (800aa84 <UART_SetConfig+0x6ac>)
 800aa66:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa6c:	e01c      	b.n	800aaa8 <UART_SetConfig+0x6d0>
 800aa6e:	bf00      	nop
 800aa70:	40011400 	.word	0x40011400
 800aa74:	58024400 	.word	0x58024400
 800aa78:	40007800 	.word	0x40007800
 800aa7c:	40007c00 	.word	0x40007c00
 800aa80:	58000c00 	.word	0x58000c00
 800aa84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aa88:	4b9d      	ldr	r3, [pc, #628]	; (800ad00 <UART_SetConfig+0x928>)
 800aa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa8c:	e00c      	b.n	800aaa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa8e:	4b9d      	ldr	r3, [pc, #628]	; (800ad04 <UART_SetConfig+0x92c>)
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa92:	e009      	b.n	800aaa8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa9a:	e005      	b.n	800aaa8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aaa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aaa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 81de 	beq.w	800ae6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	4a94      	ldr	r2, [pc, #592]	; (800ad08 <UART_SetConfig+0x930>)
 800aab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aabe:	fbb3 f3f2 	udiv	r3, r3, r2
 800aac2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	4613      	mov	r3, r2
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	4413      	add	r3, r2
 800aace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d305      	bcc.n	800aae0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aadc:	429a      	cmp	r2, r3
 800aade:	d903      	bls.n	800aae8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aae6:	e1c1      	b.n	800ae6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaea:	2200      	movs	r2, #0
 800aaec:	60bb      	str	r3, [r7, #8]
 800aaee:	60fa      	str	r2, [r7, #12]
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	4a84      	ldr	r2, [pc, #528]	; (800ad08 <UART_SetConfig+0x930>)
 800aaf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	2200      	movs	r2, #0
 800aafe:	603b      	str	r3, [r7, #0]
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab0a:	f7f5 fc39 	bl	8000380 <__aeabi_uldivmod>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4610      	mov	r0, r2
 800ab14:	4619      	mov	r1, r3
 800ab16:	f04f 0200 	mov.w	r2, #0
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	020b      	lsls	r3, r1, #8
 800ab20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab24:	0202      	lsls	r2, r0, #8
 800ab26:	6979      	ldr	r1, [r7, #20]
 800ab28:	6849      	ldr	r1, [r1, #4]
 800ab2a:	0849      	lsrs	r1, r1, #1
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	4605      	mov	r5, r0
 800ab32:	eb12 0804 	adds.w	r8, r2, r4
 800ab36:	eb43 0905 	adc.w	r9, r3, r5
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	469a      	mov	sl, r3
 800ab42:	4693      	mov	fp, r2
 800ab44:	4652      	mov	r2, sl
 800ab46:	465b      	mov	r3, fp
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fc18 	bl	8000380 <__aeabi_uldivmod>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4613      	mov	r3, r2
 800ab56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab5e:	d308      	bcc.n	800ab72 <UART_SetConfig+0x79a>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab66:	d204      	bcs.n	800ab72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab6e:	60da      	str	r2, [r3, #12]
 800ab70:	e17c      	b.n	800ae6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab78:	e178      	b.n	800ae6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	69db      	ldr	r3, [r3, #28]
 800ab7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab82:	f040 80c5 	bne.w	800ad10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ab86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab8a:	2b20      	cmp	r3, #32
 800ab8c:	dc48      	bgt.n	800ac20 <UART_SetConfig+0x848>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	db7b      	blt.n	800ac8a <UART_SetConfig+0x8b2>
 800ab92:	2b20      	cmp	r3, #32
 800ab94:	d879      	bhi.n	800ac8a <UART_SetConfig+0x8b2>
 800ab96:	a201      	add	r2, pc, #4	; (adr r2, 800ab9c <UART_SetConfig+0x7c4>)
 800ab98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9c:	0800ac27 	.word	0x0800ac27
 800aba0:	0800ac2f 	.word	0x0800ac2f
 800aba4:	0800ac8b 	.word	0x0800ac8b
 800aba8:	0800ac8b 	.word	0x0800ac8b
 800abac:	0800ac37 	.word	0x0800ac37
 800abb0:	0800ac8b 	.word	0x0800ac8b
 800abb4:	0800ac8b 	.word	0x0800ac8b
 800abb8:	0800ac8b 	.word	0x0800ac8b
 800abbc:	0800ac47 	.word	0x0800ac47
 800abc0:	0800ac8b 	.word	0x0800ac8b
 800abc4:	0800ac8b 	.word	0x0800ac8b
 800abc8:	0800ac8b 	.word	0x0800ac8b
 800abcc:	0800ac8b 	.word	0x0800ac8b
 800abd0:	0800ac8b 	.word	0x0800ac8b
 800abd4:	0800ac8b 	.word	0x0800ac8b
 800abd8:	0800ac8b 	.word	0x0800ac8b
 800abdc:	0800ac57 	.word	0x0800ac57
 800abe0:	0800ac8b 	.word	0x0800ac8b
 800abe4:	0800ac8b 	.word	0x0800ac8b
 800abe8:	0800ac8b 	.word	0x0800ac8b
 800abec:	0800ac8b 	.word	0x0800ac8b
 800abf0:	0800ac8b 	.word	0x0800ac8b
 800abf4:	0800ac8b 	.word	0x0800ac8b
 800abf8:	0800ac8b 	.word	0x0800ac8b
 800abfc:	0800ac8b 	.word	0x0800ac8b
 800ac00:	0800ac8b 	.word	0x0800ac8b
 800ac04:	0800ac8b 	.word	0x0800ac8b
 800ac08:	0800ac8b 	.word	0x0800ac8b
 800ac0c:	0800ac8b 	.word	0x0800ac8b
 800ac10:	0800ac8b 	.word	0x0800ac8b
 800ac14:	0800ac8b 	.word	0x0800ac8b
 800ac18:	0800ac8b 	.word	0x0800ac8b
 800ac1c:	0800ac7d 	.word	0x0800ac7d
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	d02e      	beq.n	800ac82 <UART_SetConfig+0x8aa>
 800ac24:	e031      	b.n	800ac8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac26:	f7fd f853 	bl	8007cd0 <HAL_RCC_GetPCLK1Freq>
 800ac2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac2c:	e033      	b.n	800ac96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac2e:	f7fd f865 	bl	8007cfc <HAL_RCC_GetPCLK2Freq>
 800ac32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac34:	e02f      	b.n	800ac96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fd ffd0 	bl	8008be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac44:	e027      	b.n	800ac96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac46:	f107 0318 	add.w	r3, r7, #24
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fe f91c 	bl	8008e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac54:	e01f      	b.n	800ac96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac56:	4b2d      	ldr	r3, [pc, #180]	; (800ad0c <UART_SetConfig+0x934>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0320 	and.w	r3, r3, #32
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d009      	beq.n	800ac76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac62:	4b2a      	ldr	r3, [pc, #168]	; (800ad0c <UART_SetConfig+0x934>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	08db      	lsrs	r3, r3, #3
 800ac68:	f003 0303 	and.w	r3, r3, #3
 800ac6c:	4a24      	ldr	r2, [pc, #144]	; (800ad00 <UART_SetConfig+0x928>)
 800ac6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac74:	e00f      	b.n	800ac96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ac76:	4b22      	ldr	r3, [pc, #136]	; (800ad00 <UART_SetConfig+0x928>)
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac7a:	e00c      	b.n	800ac96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac7c:	4b21      	ldr	r3, [pc, #132]	; (800ad04 <UART_SetConfig+0x92c>)
 800ac7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac80:	e009      	b.n	800ac96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac88:	e005      	b.n	800ac96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 80e7 	beq.w	800ae6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	4a19      	ldr	r2, [pc, #100]	; (800ad08 <UART_SetConfig+0x930>)
 800aca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aca8:	461a      	mov	r2, r3
 800acaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acac:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb0:	005a      	lsls	r2, r3, #1
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	085b      	lsrs	r3, r3, #1
 800acb8:	441a      	add	r2, r3
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	2b0f      	cmp	r3, #15
 800acc8:	d916      	bls.n	800acf8 <UART_SetConfig+0x920>
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acd0:	d212      	bcs.n	800acf8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	f023 030f 	bic.w	r3, r3, #15
 800acda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acde:	085b      	lsrs	r3, r3, #1
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acea:	4313      	orrs	r3, r2
 800acec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800acf4:	60da      	str	r2, [r3, #12]
 800acf6:	e0b9      	b.n	800ae6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800acfe:	e0b5      	b.n	800ae6c <UART_SetConfig+0xa94>
 800ad00:	03d09000 	.word	0x03d09000
 800ad04:	003d0900 	.word	0x003d0900
 800ad08:	0800dba4 	.word	0x0800dba4
 800ad0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	dc49      	bgt.n	800adac <UART_SetConfig+0x9d4>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	db7c      	blt.n	800ae16 <UART_SetConfig+0xa3e>
 800ad1c:	2b20      	cmp	r3, #32
 800ad1e:	d87a      	bhi.n	800ae16 <UART_SetConfig+0xa3e>
 800ad20:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <UART_SetConfig+0x950>)
 800ad22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad26:	bf00      	nop
 800ad28:	0800adb3 	.word	0x0800adb3
 800ad2c:	0800adbb 	.word	0x0800adbb
 800ad30:	0800ae17 	.word	0x0800ae17
 800ad34:	0800ae17 	.word	0x0800ae17
 800ad38:	0800adc3 	.word	0x0800adc3
 800ad3c:	0800ae17 	.word	0x0800ae17
 800ad40:	0800ae17 	.word	0x0800ae17
 800ad44:	0800ae17 	.word	0x0800ae17
 800ad48:	0800add3 	.word	0x0800add3
 800ad4c:	0800ae17 	.word	0x0800ae17
 800ad50:	0800ae17 	.word	0x0800ae17
 800ad54:	0800ae17 	.word	0x0800ae17
 800ad58:	0800ae17 	.word	0x0800ae17
 800ad5c:	0800ae17 	.word	0x0800ae17
 800ad60:	0800ae17 	.word	0x0800ae17
 800ad64:	0800ae17 	.word	0x0800ae17
 800ad68:	0800ade3 	.word	0x0800ade3
 800ad6c:	0800ae17 	.word	0x0800ae17
 800ad70:	0800ae17 	.word	0x0800ae17
 800ad74:	0800ae17 	.word	0x0800ae17
 800ad78:	0800ae17 	.word	0x0800ae17
 800ad7c:	0800ae17 	.word	0x0800ae17
 800ad80:	0800ae17 	.word	0x0800ae17
 800ad84:	0800ae17 	.word	0x0800ae17
 800ad88:	0800ae17 	.word	0x0800ae17
 800ad8c:	0800ae17 	.word	0x0800ae17
 800ad90:	0800ae17 	.word	0x0800ae17
 800ad94:	0800ae17 	.word	0x0800ae17
 800ad98:	0800ae17 	.word	0x0800ae17
 800ad9c:	0800ae17 	.word	0x0800ae17
 800ada0:	0800ae17 	.word	0x0800ae17
 800ada4:	0800ae17 	.word	0x0800ae17
 800ada8:	0800ae09 	.word	0x0800ae09
 800adac:	2b40      	cmp	r3, #64	; 0x40
 800adae:	d02e      	beq.n	800ae0e <UART_SetConfig+0xa36>
 800adb0:	e031      	b.n	800ae16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb2:	f7fc ff8d 	bl	8007cd0 <HAL_RCC_GetPCLK1Freq>
 800adb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800adb8:	e033      	b.n	800ae22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adba:	f7fc ff9f 	bl	8007cfc <HAL_RCC_GetPCLK2Freq>
 800adbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800adc0:	e02f      	b.n	800ae22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fd ff0a 	bl	8008be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800add0:	e027      	b.n	800ae22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800add2:	f107 0318 	add.w	r3, r7, #24
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe f856 	bl	8008e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade0:	e01f      	b.n	800ae22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ade2:	4b2d      	ldr	r3, [pc, #180]	; (800ae98 <UART_SetConfig+0xac0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	2b00      	cmp	r3, #0
 800adec:	d009      	beq.n	800ae02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adee:	4b2a      	ldr	r3, [pc, #168]	; (800ae98 <UART_SetConfig+0xac0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	08db      	lsrs	r3, r3, #3
 800adf4:	f003 0303 	and.w	r3, r3, #3
 800adf8:	4a28      	ldr	r2, [pc, #160]	; (800ae9c <UART_SetConfig+0xac4>)
 800adfa:	fa22 f303 	lsr.w	r3, r2, r3
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae00:	e00f      	b.n	800ae22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ae02:	4b26      	ldr	r3, [pc, #152]	; (800ae9c <UART_SetConfig+0xac4>)
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae06:	e00c      	b.n	800ae22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae08:	4b25      	ldr	r3, [pc, #148]	; (800aea0 <UART_SetConfig+0xac8>)
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0c:	e009      	b.n	800ae22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae14:	e005      	b.n	800ae22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae20:	bf00      	nop
    }

    if (pclk != 0U)
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d021      	beq.n	800ae6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	4a1d      	ldr	r2, [pc, #116]	; (800aea4 <UART_SetConfig+0xacc>)
 800ae2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae32:	461a      	mov	r2, r3
 800ae34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae36:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	085b      	lsrs	r3, r3, #1
 800ae40:	441a      	add	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4e:	2b0f      	cmp	r3, #15
 800ae50:	d909      	bls.n	800ae66 <UART_SetConfig+0xa8e>
 800ae52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae58:	d205      	bcs.n	800ae66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	60da      	str	r2, [r3, #12]
 800ae64:	e002      	b.n	800ae6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2200      	movs	r2, #0
 800ae86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ae88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3748      	adds	r7, #72	; 0x48
 800ae90:	46bd      	mov	sp, r7
 800ae92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae96:	bf00      	nop
 800ae98:	58024400 	.word	0x58024400
 800ae9c:	03d09000 	.word	0x03d09000
 800aea0:	003d0900 	.word	0x003d0900
 800aea4:	0800dba4 	.word	0x0800dba4

0800aea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00a      	beq.n	800aed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	430a      	orrs	r2, r1
 800aed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00a      	beq.n	800aef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	430a      	orrs	r2, r1
 800aef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef8:	f003 0304 	and.w	r3, r3, #4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00a      	beq.n	800af16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	430a      	orrs	r2, r1
 800af14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	f003 0308 	and.w	r3, r3, #8
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	430a      	orrs	r2, r1
 800af36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3c:	f003 0310 	and.w	r3, r3, #16
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00a      	beq.n	800af5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af84:	2b00      	cmp	r3, #0
 800af86:	d01a      	beq.n	800afbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	430a      	orrs	r2, r1
 800af9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afa6:	d10a      	bne.n	800afbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	605a      	str	r2, [r3, #4]
  }
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800affc:	f7f8 fb54 	bl	80036a8 <HAL_GetTick>
 800b000:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0308 	and.w	r3, r3, #8
 800b00c:	2b08      	cmp	r3, #8
 800b00e:	d10e      	bne.n	800b02e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f82f 	bl	800b082 <UART_WaitOnFlagUntilTimeout>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b02a:	2303      	movs	r3, #3
 800b02c:	e025      	b.n	800b07a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0304 	and.w	r3, r3, #4
 800b038:	2b04      	cmp	r3, #4
 800b03a:	d10e      	bne.n	800b05a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b03c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f819 	bl	800b082 <UART_WaitOnFlagUntilTimeout>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e00f      	b.n	800b07a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2220      	movs	r2, #32
 800b066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b09c      	sub	sp, #112	; 0x70
 800b086:	af00      	add	r7, sp, #0
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	603b      	str	r3, [r7, #0]
 800b08e:	4613      	mov	r3, r2
 800b090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b092:	e0a9      	b.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09a:	f000 80a5 	beq.w	800b1e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b09e:	f7f8 fb03 	bl	80036a8 <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d302      	bcc.n	800b0b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b0ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d140      	bne.n	800b136 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b0d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e6      	bne.n	800b0b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f8:	f023 0301 	bic.w	r3, r3, #1
 800b0fc:	663b      	str	r3, [r7, #96]	; 0x60
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3308      	adds	r3, #8
 800b104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b106:	64ba      	str	r2, [r7, #72]	; 0x48
 800b108:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b10c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e5      	bne.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2220      	movs	r2, #32
 800b126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e069      	b.n	800b20a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	2b00      	cmp	r3, #0
 800b142:	d051      	beq.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b14e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b152:	d149      	bne.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b15c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	e853 3f00 	ldrex	r3, [r3]
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b172:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b17c:	637b      	str	r3, [r7, #52]	; 0x34
 800b17e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b184:	e841 2300 	strex	r3, r2, [r1]
 800b188:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e6      	bne.n	800b15e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3308      	adds	r3, #8
 800b196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	e853 3f00 	ldrex	r3, [r3]
 800b19e:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f023 0301 	bic.w	r3, r3, #1
 800b1a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1b0:	623a      	str	r2, [r7, #32]
 800b1b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	69f9      	ldr	r1, [r7, #28]
 800b1b6:	6a3a      	ldr	r2, [r7, #32]
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e5      	bne.n	800b190 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e010      	b.n	800b20a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69da      	ldr	r2, [r3, #28]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2301      	moveq	r3, #1
 800b1fa:	2300      	movne	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	461a      	mov	r2, r3
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	429a      	cmp	r2, r3
 800b204:	f43f af46 	beq.w	800b094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3770      	adds	r7, #112	; 0x70
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
	...

0800b214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b095      	sub	sp, #84	; 0x54
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b230:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23a:	643b      	str	r3, [r7, #64]	; 0x40
 800b23c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e6      	bne.n	800b21c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b25e:	69fa      	ldr	r2, [r7, #28]
 800b260:	4b1e      	ldr	r3, [pc, #120]	; (800b2dc <UART_EndRxTransfer+0xc8>)
 800b262:	4013      	ands	r3, r2
 800b264:	64bb      	str	r3, [r7, #72]	; 0x48
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3308      	adds	r3, #8
 800b26c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b26e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e5      	bne.n	800b24e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b286:	2b01      	cmp	r3, #1
 800b288:	d118      	bne.n	800b2bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	e853 3f00 	ldrex	r3, [r3]
 800b296:	60bb      	str	r3, [r7, #8]
   return(result);
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	f023 0310 	bic.w	r3, r3, #16
 800b29e:	647b      	str	r3, [r7, #68]	; 0x44
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2a8:	61bb      	str	r3, [r7, #24]
 800b2aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ac:	6979      	ldr	r1, [r7, #20]
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	e841 2300 	strex	r3, r2, [r1]
 800b2b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e6      	bne.n	800b28a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b2d0:	bf00      	nop
 800b2d2:	3754      	adds	r7, #84	; 0x54
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	effffffe 	.word	0xeffffffe

0800b2e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff f854 	bl	800a3ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b304:	bf00      	nop
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	60bb      	str	r3, [r7, #8]
   return(result);
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b328:	61fb      	str	r3, [r7, #28]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	61bb      	str	r3, [r7, #24]
 800b334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b336:	6979      	ldr	r1, [r7, #20]
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	613b      	str	r3, [r7, #16]
   return(result);
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e6      	bne.n	800b314 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2220      	movs	r2, #32
 800b34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7ff f81f 	bl	800a398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b35a:	bf00      	nop
 800b35c:	3720      	adds	r7, #32
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b376:	b480      	push	{r7}
 800b378:	b083      	sub	sp, #12
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b37e:	bf00      	nop
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e027      	b.n	800b404 <HAL_UARTEx_DisableFifoMode+0x66>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2224      	movs	r2, #36	; 0x24
 800b3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0201 	bic.w	r2, r2, #1
 800b3da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b424:	2302      	movs	r3, #2
 800b426:	e02d      	b.n	800b484 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2224      	movs	r2, #36	; 0x24
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0201 	bic.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	430a      	orrs	r2, r1
 800b462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f84f 	bl	800b508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2220      	movs	r2, #32
 800b476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d101      	bne.n	800b4a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	e02d      	b.n	800b500 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2224      	movs	r2, #36	; 0x24
 800b4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0201 	bic.w	r2, r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f811 	bl	800b508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b514:	2b00      	cmp	r3, #0
 800b516:	d108      	bne.n	800b52a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b528:	e031      	b.n	800b58e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b52a:	2310      	movs	r3, #16
 800b52c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b52e:	2310      	movs	r3, #16
 800b530:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	0e5b      	lsrs	r3, r3, #25
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f003 0307 	and.w	r3, r3, #7
 800b540:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	0f5b      	lsrs	r3, r3, #29
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	f003 0307 	and.w	r3, r3, #7
 800b550:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	7b3a      	ldrb	r2, [r7, #12]
 800b556:	4911      	ldr	r1, [pc, #68]	; (800b59c <UARTEx_SetNbDataToProcess+0x94>)
 800b558:	5c8a      	ldrb	r2, [r1, r2]
 800b55a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b55e:	7b3a      	ldrb	r2, [r7, #12]
 800b560:	490f      	ldr	r1, [pc, #60]	; (800b5a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b562:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b564:	fb93 f3f2 	sdiv	r3, r3, r2
 800b568:	b29a      	uxth	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	7b7a      	ldrb	r2, [r7, #13]
 800b574:	4909      	ldr	r1, [pc, #36]	; (800b59c <UARTEx_SetNbDataToProcess+0x94>)
 800b576:	5c8a      	ldrb	r2, [r1, r2]
 800b578:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b57c:	7b7a      	ldrb	r2, [r7, #13]
 800b57e:	4908      	ldr	r1, [pc, #32]	; (800b5a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b580:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b582:	fb93 f3f2 	sdiv	r3, r3, r2
 800b586:	b29a      	uxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b58e:	bf00      	nop
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	0800dbbc 	.word	0x0800dbbc
 800b5a0:	0800dbc4 	.word	0x0800dbc4

0800b5a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	f107 001c 	add.w	r0, r7, #28
 800b5b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d120      	bne.n	800b5fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	4b2a      	ldr	r3, [pc, #168]	; (800b678 <USB_CoreInit+0xd4>)
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d105      	bne.n	800b5f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 faac 	bl	800bb50 <USB_CoreReset>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	73fb      	strb	r3, [r7, #15]
 800b5fc:	e01a      	b.n	800b634 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 faa0 	bl	800bb50 <USB_CoreReset>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b616:	2b00      	cmp	r3, #0
 800b618:	d106      	bne.n	800b628 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	639a      	str	r2, [r3, #56]	; 0x38
 800b626:	e005      	b.n	800b634 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b636:	2b01      	cmp	r3, #1
 800b638:	d116      	bne.n	800b668 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b63e:	b29a      	uxth	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b648:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <USB_CoreInit+0xd8>)
 800b64a:	4313      	orrs	r3, r2
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	f043 0206 	orr.w	r2, r3, #6
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	f043 0220 	orr.w	r2, r3, #32
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b674:	b004      	add	sp, #16
 800b676:	4770      	bx	lr
 800b678:	ffbdffbf 	.word	0xffbdffbf
 800b67c:	03ee0000 	.word	0x03ee0000

0800b680 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f023 0201 	bic.w	r2, r3, #1
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b6be:	78fb      	ldrb	r3, [r7, #3]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d115      	bne.n	800b6f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7f7 fff5 	bl	80036c0 <HAL_Delay>
      ms++;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fa29 	bl	800bb34 <USB_GetMode>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d01e      	beq.n	800b726 <USB_SetCurrentMode+0x84>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b31      	cmp	r3, #49	; 0x31
 800b6ec:	d9f0      	bls.n	800b6d0 <USB_SetCurrentMode+0x2e>
 800b6ee:	e01a      	b.n	800b726 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d115      	bne.n	800b722 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b702:	2001      	movs	r0, #1
 800b704:	f7f7 ffdc 	bl	80036c0 <HAL_Delay>
      ms++;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3301      	adds	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 fa10 	bl	800bb34 <USB_GetMode>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <USB_SetCurrentMode+0x84>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b31      	cmp	r3, #49	; 0x31
 800b71e:	d9f0      	bls.n	800b702 <USB_SetCurrentMode+0x60>
 800b720:	e001      	b.n	800b726 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e005      	b.n	800b732 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b32      	cmp	r3, #50	; 0x32
 800b72a:	d101      	bne.n	800b730 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e000      	b.n	800b732 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b73c:	b084      	sub	sp, #16
 800b73e:	b580      	push	{r7, lr}
 800b740:	b086      	sub	sp, #24
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b74a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b756:	2300      	movs	r3, #0
 800b758:	613b      	str	r3, [r7, #16]
 800b75a:	e009      	b.n	800b770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3340      	adds	r3, #64	; 0x40
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	2200      	movs	r2, #0
 800b768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	3301      	adds	r3, #1
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b0e      	cmp	r3, #14
 800b774:	d9f2      	bls.n	800b75c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d11c      	bne.n	800b7b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b78a:	f043 0302 	orr.w	r3, r3, #2
 800b78e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b794:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	e005      	b.n	800b7c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7dc:	461a      	mov	r2, r3
 800b7de:	680b      	ldr	r3, [r1, #0]
 800b7e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d10c      	bne.n	800b802 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d104      	bne.n	800b7f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f965 	bl	800bac0 <USB_SetDevSpeed>
 800b7f6:	e008      	b.n	800b80a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f960 	bl	800bac0 <USB_SetDevSpeed>
 800b800:	e003      	b.n	800b80a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b802:	2103      	movs	r1, #3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f95b 	bl	800bac0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b80a:	2110      	movs	r1, #16
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f8f3 	bl	800b9f8 <USB_FlushTxFifo>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f91f 	bl	800ba60 <USB_FlushRxFifo>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b832:	461a      	mov	r2, r3
 800b834:	2300      	movs	r3, #0
 800b836:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b83e:	461a      	mov	r2, r3
 800b840:	2300      	movs	r3, #0
 800b842:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b84a:	461a      	mov	r2, r3
 800b84c:	2300      	movs	r3, #0
 800b84e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b850:	2300      	movs	r3, #0
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	e043      	b.n	800b8de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b86c:	d118      	bne.n	800b8a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	015a      	lsls	r2, r3, #5
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b880:	461a      	mov	r2, r3
 800b882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	e013      	b.n	800b8b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b896:	461a      	mov	r2, r3
 800b898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	e008      	b.n	800b8b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8be:	461a      	mov	r2, r3
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	015a      	lsls	r2, r3, #5
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	613b      	str	r3, [r7, #16]
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d3b7      	bcc.n	800b856 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	613b      	str	r3, [r7, #16]
 800b8ea:	e043      	b.n	800b974 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	015a      	lsls	r2, r3, #5
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b902:	d118      	bne.n	800b936 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4413      	add	r3, r2
 800b912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b916:	461a      	mov	r2, r3
 800b918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	e013      	b.n	800b948 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	461a      	mov	r2, r3
 800b92e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	e008      	b.n	800b948 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	015a      	lsls	r2, r3, #5
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	4413      	add	r3, r2
 800b93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b942:	461a      	mov	r2, r3
 800b944:	2300      	movs	r3, #0
 800b946:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b954:	461a      	mov	r2, r3
 800b956:	2300      	movs	r3, #0
 800b958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b966:	461a      	mov	r2, r3
 800b968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b96c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3301      	adds	r3, #1
 800b972:	613b      	str	r3, [r7, #16]
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d3b7      	bcc.n	800b8ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b98a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b98e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b99c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d105      	bne.n	800b9b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	f043 0210 	orr.w	r2, r3, #16
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699a      	ldr	r2, [r3, #24]
 800b9b4:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <USB_DevInit+0x2b4>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d005      	beq.n	800b9ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	f043 0208 	orr.w	r2, r3, #8
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d105      	bne.n	800b9e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	699a      	ldr	r2, [r3, #24]
 800b9d8:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <USB_DevInit+0x2b8>)
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9ec:	b004      	add	sp, #16
 800b9ee:	4770      	bx	lr
 800b9f0:	803c3800 	.word	0x803c3800
 800b9f4:	40000004 	.word	0x40000004

0800b9f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	4a13      	ldr	r2, [pc, #76]	; (800ba5c <USB_FlushTxFifo+0x64>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d901      	bls.n	800ba18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e01b      	b.n	800ba50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	daf2      	bge.n	800ba06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	019b      	lsls	r3, r3, #6
 800ba28:	f043 0220 	orr.w	r2, r3, #32
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	4a08      	ldr	r2, [pc, #32]	; (800ba5c <USB_FlushTxFifo+0x64>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d901      	bls.n	800ba42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e006      	b.n	800ba50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b20      	cmp	r3, #32
 800ba4c:	d0f0      	beq.n	800ba30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	00030d40 	.word	0x00030d40

0800ba60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <USB_FlushRxFifo+0x5c>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d901      	bls.n	800ba7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	e018      	b.n	800bab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	daf2      	bge.n	800ba6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2210      	movs	r2, #16
 800ba8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3301      	adds	r3, #1
 800ba94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4a08      	ldr	r2, [pc, #32]	; (800babc <USB_FlushRxFifo+0x5c>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d901      	bls.n	800baa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e006      	b.n	800bab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	f003 0310 	and.w	r3, r3, #16
 800baaa:	2b10      	cmp	r3, #16
 800baac:	d0f0      	beq.n	800ba90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	00030d40 	.word	0x00030d40

0800bac0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	78fb      	ldrb	r3, [r7, #3]
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bae0:	4313      	orrs	r3, r2
 800bae2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b085      	sub	sp, #20
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb0c:	f023 0303 	bic.w	r3, r3, #3
 800bb10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb20:	f043 0302 	orr.w	r3, r3, #2
 800bb24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	f003 0301 	and.w	r3, r3, #1
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	4a13      	ldr	r2, [pc, #76]	; (800bbb4 <USB_CoreReset+0x64>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d901      	bls.n	800bb6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	e01b      	b.n	800bba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	daf2      	bge.n	800bb5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	f043 0201 	orr.w	r2, r3, #1
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4a09      	ldr	r2, [pc, #36]	; (800bbb4 <USB_CoreReset+0x64>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d901      	bls.n	800bb98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e006      	b.n	800bba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d0f0      	beq.n	800bb86 <USB_CoreReset+0x36>

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	00030d40 	.word	0x00030d40

0800bbb8 <__errno>:
 800bbb8:	4b01      	ldr	r3, [pc, #4]	; (800bbc0 <__errno+0x8>)
 800bbba:	6818      	ldr	r0, [r3, #0]
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	24000020 	.word	0x24000020

0800bbc4 <__libc_init_array>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	4d0d      	ldr	r5, [pc, #52]	; (800bbfc <__libc_init_array+0x38>)
 800bbc8:	4c0d      	ldr	r4, [pc, #52]	; (800bc00 <__libc_init_array+0x3c>)
 800bbca:	1b64      	subs	r4, r4, r5
 800bbcc:	10a4      	asrs	r4, r4, #2
 800bbce:	2600      	movs	r6, #0
 800bbd0:	42a6      	cmp	r6, r4
 800bbd2:	d109      	bne.n	800bbe8 <__libc_init_array+0x24>
 800bbd4:	4d0b      	ldr	r5, [pc, #44]	; (800bc04 <__libc_init_array+0x40>)
 800bbd6:	4c0c      	ldr	r4, [pc, #48]	; (800bc08 <__libc_init_array+0x44>)
 800bbd8:	f000 fc8e 	bl	800c4f8 <_init>
 800bbdc:	1b64      	subs	r4, r4, r5
 800bbde:	10a4      	asrs	r4, r4, #2
 800bbe0:	2600      	movs	r6, #0
 800bbe2:	42a6      	cmp	r6, r4
 800bbe4:	d105      	bne.n	800bbf2 <__libc_init_array+0x2e>
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbec:	4798      	blx	r3
 800bbee:	3601      	adds	r6, #1
 800bbf0:	e7ee      	b.n	800bbd0 <__libc_init_array+0xc>
 800bbf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbf6:	4798      	blx	r3
 800bbf8:	3601      	adds	r6, #1
 800bbfa:	e7f2      	b.n	800bbe2 <__libc_init_array+0x1e>
 800bbfc:	0800dc08 	.word	0x0800dc08
 800bc00:	0800dc08 	.word	0x0800dc08
 800bc04:	0800dc08 	.word	0x0800dc08
 800bc08:	0800dc0c 	.word	0x0800dc0c

0800bc0c <memset>:
 800bc0c:	4402      	add	r2, r0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d100      	bne.n	800bc16 <memset+0xa>
 800bc14:	4770      	bx	lr
 800bc16:	f803 1b01 	strb.w	r1, [r3], #1
 800bc1a:	e7f9      	b.n	800bc10 <memset+0x4>

0800bc1c <_free_r>:
 800bc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc1e:	2900      	cmp	r1, #0
 800bc20:	d044      	beq.n	800bcac <_free_r+0x90>
 800bc22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc26:	9001      	str	r0, [sp, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc2e:	bfb8      	it	lt
 800bc30:	18e4      	addlt	r4, r4, r3
 800bc32:	f000 f903 	bl	800be3c <__malloc_lock>
 800bc36:	4a1e      	ldr	r2, [pc, #120]	; (800bcb0 <_free_r+0x94>)
 800bc38:	9801      	ldr	r0, [sp, #4]
 800bc3a:	6813      	ldr	r3, [r2, #0]
 800bc3c:	b933      	cbnz	r3, 800bc4c <_free_r+0x30>
 800bc3e:	6063      	str	r3, [r4, #4]
 800bc40:	6014      	str	r4, [r2, #0]
 800bc42:	b003      	add	sp, #12
 800bc44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc48:	f000 b8fe 	b.w	800be48 <__malloc_unlock>
 800bc4c:	42a3      	cmp	r3, r4
 800bc4e:	d908      	bls.n	800bc62 <_free_r+0x46>
 800bc50:	6825      	ldr	r5, [r4, #0]
 800bc52:	1961      	adds	r1, r4, r5
 800bc54:	428b      	cmp	r3, r1
 800bc56:	bf01      	itttt	eq
 800bc58:	6819      	ldreq	r1, [r3, #0]
 800bc5a:	685b      	ldreq	r3, [r3, #4]
 800bc5c:	1949      	addeq	r1, r1, r5
 800bc5e:	6021      	streq	r1, [r4, #0]
 800bc60:	e7ed      	b.n	800bc3e <_free_r+0x22>
 800bc62:	461a      	mov	r2, r3
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	b10b      	cbz	r3, 800bc6c <_free_r+0x50>
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	d9fa      	bls.n	800bc62 <_free_r+0x46>
 800bc6c:	6811      	ldr	r1, [r2, #0]
 800bc6e:	1855      	adds	r5, r2, r1
 800bc70:	42a5      	cmp	r5, r4
 800bc72:	d10b      	bne.n	800bc8c <_free_r+0x70>
 800bc74:	6824      	ldr	r4, [r4, #0]
 800bc76:	4421      	add	r1, r4
 800bc78:	1854      	adds	r4, r2, r1
 800bc7a:	42a3      	cmp	r3, r4
 800bc7c:	6011      	str	r1, [r2, #0]
 800bc7e:	d1e0      	bne.n	800bc42 <_free_r+0x26>
 800bc80:	681c      	ldr	r4, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	6053      	str	r3, [r2, #4]
 800bc86:	4421      	add	r1, r4
 800bc88:	6011      	str	r1, [r2, #0]
 800bc8a:	e7da      	b.n	800bc42 <_free_r+0x26>
 800bc8c:	d902      	bls.n	800bc94 <_free_r+0x78>
 800bc8e:	230c      	movs	r3, #12
 800bc90:	6003      	str	r3, [r0, #0]
 800bc92:	e7d6      	b.n	800bc42 <_free_r+0x26>
 800bc94:	6825      	ldr	r5, [r4, #0]
 800bc96:	1961      	adds	r1, r4, r5
 800bc98:	428b      	cmp	r3, r1
 800bc9a:	bf04      	itt	eq
 800bc9c:	6819      	ldreq	r1, [r3, #0]
 800bc9e:	685b      	ldreq	r3, [r3, #4]
 800bca0:	6063      	str	r3, [r4, #4]
 800bca2:	bf04      	itt	eq
 800bca4:	1949      	addeq	r1, r1, r5
 800bca6:	6021      	streq	r1, [r4, #0]
 800bca8:	6054      	str	r4, [r2, #4]
 800bcaa:	e7ca      	b.n	800bc42 <_free_r+0x26>
 800bcac:	b003      	add	sp, #12
 800bcae:	bd30      	pop	{r4, r5, pc}
 800bcb0:	24000dbc 	.word	0x24000dbc

0800bcb4 <sbrk_aligned>:
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	4e0e      	ldr	r6, [pc, #56]	; (800bcf0 <sbrk_aligned+0x3c>)
 800bcb8:	460c      	mov	r4, r1
 800bcba:	6831      	ldr	r1, [r6, #0]
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	b911      	cbnz	r1, 800bcc6 <sbrk_aligned+0x12>
 800bcc0:	f000 f88c 	bl	800bddc <_sbrk_r>
 800bcc4:	6030      	str	r0, [r6, #0]
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f000 f887 	bl	800bddc <_sbrk_r>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	d00a      	beq.n	800bce8 <sbrk_aligned+0x34>
 800bcd2:	1cc4      	adds	r4, r0, #3
 800bcd4:	f024 0403 	bic.w	r4, r4, #3
 800bcd8:	42a0      	cmp	r0, r4
 800bcda:	d007      	beq.n	800bcec <sbrk_aligned+0x38>
 800bcdc:	1a21      	subs	r1, r4, r0
 800bcde:	4628      	mov	r0, r5
 800bce0:	f000 f87c 	bl	800bddc <_sbrk_r>
 800bce4:	3001      	adds	r0, #1
 800bce6:	d101      	bne.n	800bcec <sbrk_aligned+0x38>
 800bce8:	f04f 34ff 	mov.w	r4, #4294967295
 800bcec:	4620      	mov	r0, r4
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	24000dc0 	.word	0x24000dc0

0800bcf4 <_malloc_r>:
 800bcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf8:	1ccd      	adds	r5, r1, #3
 800bcfa:	f025 0503 	bic.w	r5, r5, #3
 800bcfe:	3508      	adds	r5, #8
 800bd00:	2d0c      	cmp	r5, #12
 800bd02:	bf38      	it	cc
 800bd04:	250c      	movcc	r5, #12
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	4607      	mov	r7, r0
 800bd0a:	db01      	blt.n	800bd10 <_malloc_r+0x1c>
 800bd0c:	42a9      	cmp	r1, r5
 800bd0e:	d905      	bls.n	800bd1c <_malloc_r+0x28>
 800bd10:	230c      	movs	r3, #12
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	2600      	movs	r6, #0
 800bd16:	4630      	mov	r0, r6
 800bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1c:	4e2e      	ldr	r6, [pc, #184]	; (800bdd8 <_malloc_r+0xe4>)
 800bd1e:	f000 f88d 	bl	800be3c <__malloc_lock>
 800bd22:	6833      	ldr	r3, [r6, #0]
 800bd24:	461c      	mov	r4, r3
 800bd26:	bb34      	cbnz	r4, 800bd76 <_malloc_r+0x82>
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	f7ff ffc2 	bl	800bcb4 <sbrk_aligned>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	4604      	mov	r4, r0
 800bd34:	d14d      	bne.n	800bdd2 <_malloc_r+0xde>
 800bd36:	6834      	ldr	r4, [r6, #0]
 800bd38:	4626      	mov	r6, r4
 800bd3a:	2e00      	cmp	r6, #0
 800bd3c:	d140      	bne.n	800bdc0 <_malloc_r+0xcc>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	4631      	mov	r1, r6
 800bd42:	4638      	mov	r0, r7
 800bd44:	eb04 0803 	add.w	r8, r4, r3
 800bd48:	f000 f848 	bl	800bddc <_sbrk_r>
 800bd4c:	4580      	cmp	r8, r0
 800bd4e:	d13a      	bne.n	800bdc6 <_malloc_r+0xd2>
 800bd50:	6821      	ldr	r1, [r4, #0]
 800bd52:	3503      	adds	r5, #3
 800bd54:	1a6d      	subs	r5, r5, r1
 800bd56:	f025 0503 	bic.w	r5, r5, #3
 800bd5a:	3508      	adds	r5, #8
 800bd5c:	2d0c      	cmp	r5, #12
 800bd5e:	bf38      	it	cc
 800bd60:	250c      	movcc	r5, #12
 800bd62:	4629      	mov	r1, r5
 800bd64:	4638      	mov	r0, r7
 800bd66:	f7ff ffa5 	bl	800bcb4 <sbrk_aligned>
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d02b      	beq.n	800bdc6 <_malloc_r+0xd2>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	442b      	add	r3, r5
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	e00e      	b.n	800bd94 <_malloc_r+0xa0>
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	1b52      	subs	r2, r2, r5
 800bd7a:	d41e      	bmi.n	800bdba <_malloc_r+0xc6>
 800bd7c:	2a0b      	cmp	r2, #11
 800bd7e:	d916      	bls.n	800bdae <_malloc_r+0xba>
 800bd80:	1961      	adds	r1, r4, r5
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	6025      	str	r5, [r4, #0]
 800bd86:	bf18      	it	ne
 800bd88:	6059      	strne	r1, [r3, #4]
 800bd8a:	6863      	ldr	r3, [r4, #4]
 800bd8c:	bf08      	it	eq
 800bd8e:	6031      	streq	r1, [r6, #0]
 800bd90:	5162      	str	r2, [r4, r5]
 800bd92:	604b      	str	r3, [r1, #4]
 800bd94:	4638      	mov	r0, r7
 800bd96:	f104 060b 	add.w	r6, r4, #11
 800bd9a:	f000 f855 	bl	800be48 <__malloc_unlock>
 800bd9e:	f026 0607 	bic.w	r6, r6, #7
 800bda2:	1d23      	adds	r3, r4, #4
 800bda4:	1af2      	subs	r2, r6, r3
 800bda6:	d0b6      	beq.n	800bd16 <_malloc_r+0x22>
 800bda8:	1b9b      	subs	r3, r3, r6
 800bdaa:	50a3      	str	r3, [r4, r2]
 800bdac:	e7b3      	b.n	800bd16 <_malloc_r+0x22>
 800bdae:	6862      	ldr	r2, [r4, #4]
 800bdb0:	42a3      	cmp	r3, r4
 800bdb2:	bf0c      	ite	eq
 800bdb4:	6032      	streq	r2, [r6, #0]
 800bdb6:	605a      	strne	r2, [r3, #4]
 800bdb8:	e7ec      	b.n	800bd94 <_malloc_r+0xa0>
 800bdba:	4623      	mov	r3, r4
 800bdbc:	6864      	ldr	r4, [r4, #4]
 800bdbe:	e7b2      	b.n	800bd26 <_malloc_r+0x32>
 800bdc0:	4634      	mov	r4, r6
 800bdc2:	6876      	ldr	r6, [r6, #4]
 800bdc4:	e7b9      	b.n	800bd3a <_malloc_r+0x46>
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	603b      	str	r3, [r7, #0]
 800bdca:	4638      	mov	r0, r7
 800bdcc:	f000 f83c 	bl	800be48 <__malloc_unlock>
 800bdd0:	e7a1      	b.n	800bd16 <_malloc_r+0x22>
 800bdd2:	6025      	str	r5, [r4, #0]
 800bdd4:	e7de      	b.n	800bd94 <_malloc_r+0xa0>
 800bdd6:	bf00      	nop
 800bdd8:	24000dbc 	.word	0x24000dbc

0800bddc <_sbrk_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d06      	ldr	r5, [pc, #24]	; (800bdf8 <_sbrk_r+0x1c>)
 800bde0:	2300      	movs	r3, #0
 800bde2:	4604      	mov	r4, r0
 800bde4:	4608      	mov	r0, r1
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	f7f7 fb78 	bl	80034dc <_sbrk>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_sbrk_r+0x1a>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_sbrk_r+0x1a>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	24000dc4 	.word	0x24000dc4

0800bdfc <siprintf>:
 800bdfc:	b40e      	push	{r1, r2, r3}
 800bdfe:	b500      	push	{lr}
 800be00:	b09c      	sub	sp, #112	; 0x70
 800be02:	ab1d      	add	r3, sp, #116	; 0x74
 800be04:	9002      	str	r0, [sp, #8]
 800be06:	9006      	str	r0, [sp, #24]
 800be08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be0c:	4809      	ldr	r0, [pc, #36]	; (800be34 <siprintf+0x38>)
 800be0e:	9107      	str	r1, [sp, #28]
 800be10:	9104      	str	r1, [sp, #16]
 800be12:	4909      	ldr	r1, [pc, #36]	; (800be38 <siprintf+0x3c>)
 800be14:	f853 2b04 	ldr.w	r2, [r3], #4
 800be18:	9105      	str	r1, [sp, #20]
 800be1a:	6800      	ldr	r0, [r0, #0]
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	a902      	add	r1, sp, #8
 800be20:	f000 f874 	bl	800bf0c <_svfiprintf_r>
 800be24:	9b02      	ldr	r3, [sp, #8]
 800be26:	2200      	movs	r2, #0
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	b01c      	add	sp, #112	; 0x70
 800be2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be30:	b003      	add	sp, #12
 800be32:	4770      	bx	lr
 800be34:	24000020 	.word	0x24000020
 800be38:	ffff0208 	.word	0xffff0208

0800be3c <__malloc_lock>:
 800be3c:	4801      	ldr	r0, [pc, #4]	; (800be44 <__malloc_lock+0x8>)
 800be3e:	f000 baf9 	b.w	800c434 <__retarget_lock_acquire_recursive>
 800be42:	bf00      	nop
 800be44:	24000dc8 	.word	0x24000dc8

0800be48 <__malloc_unlock>:
 800be48:	4801      	ldr	r0, [pc, #4]	; (800be50 <__malloc_unlock+0x8>)
 800be4a:	f000 baf4 	b.w	800c436 <__retarget_lock_release_recursive>
 800be4e:	bf00      	nop
 800be50:	24000dc8 	.word	0x24000dc8

0800be54 <__ssputs_r>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	688e      	ldr	r6, [r1, #8]
 800be5a:	429e      	cmp	r6, r3
 800be5c:	4682      	mov	sl, r0
 800be5e:	460c      	mov	r4, r1
 800be60:	4690      	mov	r8, r2
 800be62:	461f      	mov	r7, r3
 800be64:	d838      	bhi.n	800bed8 <__ssputs_r+0x84>
 800be66:	898a      	ldrh	r2, [r1, #12]
 800be68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be6c:	d032      	beq.n	800bed4 <__ssputs_r+0x80>
 800be6e:	6825      	ldr	r5, [r4, #0]
 800be70:	6909      	ldr	r1, [r1, #16]
 800be72:	eba5 0901 	sub.w	r9, r5, r1
 800be76:	6965      	ldr	r5, [r4, #20]
 800be78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be80:	3301      	adds	r3, #1
 800be82:	444b      	add	r3, r9
 800be84:	106d      	asrs	r5, r5, #1
 800be86:	429d      	cmp	r5, r3
 800be88:	bf38      	it	cc
 800be8a:	461d      	movcc	r5, r3
 800be8c:	0553      	lsls	r3, r2, #21
 800be8e:	d531      	bpl.n	800bef4 <__ssputs_r+0xa0>
 800be90:	4629      	mov	r1, r5
 800be92:	f7ff ff2f 	bl	800bcf4 <_malloc_r>
 800be96:	4606      	mov	r6, r0
 800be98:	b950      	cbnz	r0, 800beb0 <__ssputs_r+0x5c>
 800be9a:	230c      	movs	r3, #12
 800be9c:	f8ca 3000 	str.w	r3, [sl]
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea6:	81a3      	strh	r3, [r4, #12]
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295
 800beac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb0:	6921      	ldr	r1, [r4, #16]
 800beb2:	464a      	mov	r2, r9
 800beb4:	f000 fac0 	bl	800c438 <memcpy>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	6126      	str	r6, [r4, #16]
 800bec6:	6165      	str	r5, [r4, #20]
 800bec8:	444e      	add	r6, r9
 800beca:	eba5 0509 	sub.w	r5, r5, r9
 800bece:	6026      	str	r6, [r4, #0]
 800bed0:	60a5      	str	r5, [r4, #8]
 800bed2:	463e      	mov	r6, r7
 800bed4:	42be      	cmp	r6, r7
 800bed6:	d900      	bls.n	800beda <__ssputs_r+0x86>
 800bed8:	463e      	mov	r6, r7
 800beda:	6820      	ldr	r0, [r4, #0]
 800bedc:	4632      	mov	r2, r6
 800bede:	4641      	mov	r1, r8
 800bee0:	f000 fab8 	bl	800c454 <memmove>
 800bee4:	68a3      	ldr	r3, [r4, #8]
 800bee6:	1b9b      	subs	r3, r3, r6
 800bee8:	60a3      	str	r3, [r4, #8]
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	4433      	add	r3, r6
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	2000      	movs	r0, #0
 800bef2:	e7db      	b.n	800beac <__ssputs_r+0x58>
 800bef4:	462a      	mov	r2, r5
 800bef6:	f000 fac7 	bl	800c488 <_realloc_r>
 800befa:	4606      	mov	r6, r0
 800befc:	2800      	cmp	r0, #0
 800befe:	d1e1      	bne.n	800bec4 <__ssputs_r+0x70>
 800bf00:	6921      	ldr	r1, [r4, #16]
 800bf02:	4650      	mov	r0, sl
 800bf04:	f7ff fe8a 	bl	800bc1c <_free_r>
 800bf08:	e7c7      	b.n	800be9a <__ssputs_r+0x46>
	...

0800bf0c <_svfiprintf_r>:
 800bf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	4698      	mov	r8, r3
 800bf12:	898b      	ldrh	r3, [r1, #12]
 800bf14:	061b      	lsls	r3, r3, #24
 800bf16:	b09d      	sub	sp, #116	; 0x74
 800bf18:	4607      	mov	r7, r0
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	4614      	mov	r4, r2
 800bf1e:	d50e      	bpl.n	800bf3e <_svfiprintf_r+0x32>
 800bf20:	690b      	ldr	r3, [r1, #16]
 800bf22:	b963      	cbnz	r3, 800bf3e <_svfiprintf_r+0x32>
 800bf24:	2140      	movs	r1, #64	; 0x40
 800bf26:	f7ff fee5 	bl	800bcf4 <_malloc_r>
 800bf2a:	6028      	str	r0, [r5, #0]
 800bf2c:	6128      	str	r0, [r5, #16]
 800bf2e:	b920      	cbnz	r0, 800bf3a <_svfiprintf_r+0x2e>
 800bf30:	230c      	movs	r3, #12
 800bf32:	603b      	str	r3, [r7, #0]
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	e0d1      	b.n	800c0de <_svfiprintf_r+0x1d2>
 800bf3a:	2340      	movs	r3, #64	; 0x40
 800bf3c:	616b      	str	r3, [r5, #20]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9309      	str	r3, [sp, #36]	; 0x24
 800bf42:	2320      	movs	r3, #32
 800bf44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf48:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf4c:	2330      	movs	r3, #48	; 0x30
 800bf4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c0f8 <_svfiprintf_r+0x1ec>
 800bf52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf56:	f04f 0901 	mov.w	r9, #1
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	469a      	mov	sl, r3
 800bf5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf62:	b10a      	cbz	r2, 800bf68 <_svfiprintf_r+0x5c>
 800bf64:	2a25      	cmp	r2, #37	; 0x25
 800bf66:	d1f9      	bne.n	800bf5c <_svfiprintf_r+0x50>
 800bf68:	ebba 0b04 	subs.w	fp, sl, r4
 800bf6c:	d00b      	beq.n	800bf86 <_svfiprintf_r+0x7a>
 800bf6e:	465b      	mov	r3, fp
 800bf70:	4622      	mov	r2, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	4638      	mov	r0, r7
 800bf76:	f7ff ff6d 	bl	800be54 <__ssputs_r>
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	f000 80aa 	beq.w	800c0d4 <_svfiprintf_r+0x1c8>
 800bf80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf82:	445a      	add	r2, fp
 800bf84:	9209      	str	r2, [sp, #36]	; 0x24
 800bf86:	f89a 3000 	ldrb.w	r3, [sl]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 80a2 	beq.w	800c0d4 <_svfiprintf_r+0x1c8>
 800bf90:	2300      	movs	r3, #0
 800bf92:	f04f 32ff 	mov.w	r2, #4294967295
 800bf96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf9a:	f10a 0a01 	add.w	sl, sl, #1
 800bf9e:	9304      	str	r3, [sp, #16]
 800bfa0:	9307      	str	r3, [sp, #28]
 800bfa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfa6:	931a      	str	r3, [sp, #104]	; 0x68
 800bfa8:	4654      	mov	r4, sl
 800bfaa:	2205      	movs	r2, #5
 800bfac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb0:	4851      	ldr	r0, [pc, #324]	; (800c0f8 <_svfiprintf_r+0x1ec>)
 800bfb2:	f7f4 f995 	bl	80002e0 <memchr>
 800bfb6:	9a04      	ldr	r2, [sp, #16]
 800bfb8:	b9d8      	cbnz	r0, 800bff2 <_svfiprintf_r+0xe6>
 800bfba:	06d0      	lsls	r0, r2, #27
 800bfbc:	bf44      	itt	mi
 800bfbe:	2320      	movmi	r3, #32
 800bfc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfc4:	0711      	lsls	r1, r2, #28
 800bfc6:	bf44      	itt	mi
 800bfc8:	232b      	movmi	r3, #43	; 0x2b
 800bfca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfce:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd4:	d015      	beq.n	800c002 <_svfiprintf_r+0xf6>
 800bfd6:	9a07      	ldr	r2, [sp, #28]
 800bfd8:	4654      	mov	r4, sl
 800bfda:	2000      	movs	r0, #0
 800bfdc:	f04f 0c0a 	mov.w	ip, #10
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfe6:	3b30      	subs	r3, #48	; 0x30
 800bfe8:	2b09      	cmp	r3, #9
 800bfea:	d94e      	bls.n	800c08a <_svfiprintf_r+0x17e>
 800bfec:	b1b0      	cbz	r0, 800c01c <_svfiprintf_r+0x110>
 800bfee:	9207      	str	r2, [sp, #28]
 800bff0:	e014      	b.n	800c01c <_svfiprintf_r+0x110>
 800bff2:	eba0 0308 	sub.w	r3, r0, r8
 800bff6:	fa09 f303 	lsl.w	r3, r9, r3
 800bffa:	4313      	orrs	r3, r2
 800bffc:	9304      	str	r3, [sp, #16]
 800bffe:	46a2      	mov	sl, r4
 800c000:	e7d2      	b.n	800bfa8 <_svfiprintf_r+0x9c>
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	1d19      	adds	r1, r3, #4
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	9103      	str	r1, [sp, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfbb      	ittet	lt
 800c00e:	425b      	neglt	r3, r3
 800c010:	f042 0202 	orrlt.w	r2, r2, #2
 800c014:	9307      	strge	r3, [sp, #28]
 800c016:	9307      	strlt	r3, [sp, #28]
 800c018:	bfb8      	it	lt
 800c01a:	9204      	strlt	r2, [sp, #16]
 800c01c:	7823      	ldrb	r3, [r4, #0]
 800c01e:	2b2e      	cmp	r3, #46	; 0x2e
 800c020:	d10c      	bne.n	800c03c <_svfiprintf_r+0x130>
 800c022:	7863      	ldrb	r3, [r4, #1]
 800c024:	2b2a      	cmp	r3, #42	; 0x2a
 800c026:	d135      	bne.n	800c094 <_svfiprintf_r+0x188>
 800c028:	9b03      	ldr	r3, [sp, #12]
 800c02a:	1d1a      	adds	r2, r3, #4
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	9203      	str	r2, [sp, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	bfb8      	it	lt
 800c034:	f04f 33ff 	movlt.w	r3, #4294967295
 800c038:	3402      	adds	r4, #2
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c108 <_svfiprintf_r+0x1fc>
 800c040:	7821      	ldrb	r1, [r4, #0]
 800c042:	2203      	movs	r2, #3
 800c044:	4650      	mov	r0, sl
 800c046:	f7f4 f94b 	bl	80002e0 <memchr>
 800c04a:	b140      	cbz	r0, 800c05e <_svfiprintf_r+0x152>
 800c04c:	2340      	movs	r3, #64	; 0x40
 800c04e:	eba0 000a 	sub.w	r0, r0, sl
 800c052:	fa03 f000 	lsl.w	r0, r3, r0
 800c056:	9b04      	ldr	r3, [sp, #16]
 800c058:	4303      	orrs	r3, r0
 800c05a:	3401      	adds	r4, #1
 800c05c:	9304      	str	r3, [sp, #16]
 800c05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c062:	4826      	ldr	r0, [pc, #152]	; (800c0fc <_svfiprintf_r+0x1f0>)
 800c064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c068:	2206      	movs	r2, #6
 800c06a:	f7f4 f939 	bl	80002e0 <memchr>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d038      	beq.n	800c0e4 <_svfiprintf_r+0x1d8>
 800c072:	4b23      	ldr	r3, [pc, #140]	; (800c100 <_svfiprintf_r+0x1f4>)
 800c074:	bb1b      	cbnz	r3, 800c0be <_svfiprintf_r+0x1b2>
 800c076:	9b03      	ldr	r3, [sp, #12]
 800c078:	3307      	adds	r3, #7
 800c07a:	f023 0307 	bic.w	r3, r3, #7
 800c07e:	3308      	adds	r3, #8
 800c080:	9303      	str	r3, [sp, #12]
 800c082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c084:	4433      	add	r3, r6
 800c086:	9309      	str	r3, [sp, #36]	; 0x24
 800c088:	e767      	b.n	800bf5a <_svfiprintf_r+0x4e>
 800c08a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c08e:	460c      	mov	r4, r1
 800c090:	2001      	movs	r0, #1
 800c092:	e7a5      	b.n	800bfe0 <_svfiprintf_r+0xd4>
 800c094:	2300      	movs	r3, #0
 800c096:	3401      	adds	r4, #1
 800c098:	9305      	str	r3, [sp, #20]
 800c09a:	4619      	mov	r1, r3
 800c09c:	f04f 0c0a 	mov.w	ip, #10
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0a6:	3a30      	subs	r2, #48	; 0x30
 800c0a8:	2a09      	cmp	r2, #9
 800c0aa:	d903      	bls.n	800c0b4 <_svfiprintf_r+0x1a8>
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0c5      	beq.n	800c03c <_svfiprintf_r+0x130>
 800c0b0:	9105      	str	r1, [sp, #20]
 800c0b2:	e7c3      	b.n	800c03c <_svfiprintf_r+0x130>
 800c0b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e7f0      	b.n	800c0a0 <_svfiprintf_r+0x194>
 800c0be:	ab03      	add	r3, sp, #12
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	462a      	mov	r2, r5
 800c0c4:	4b0f      	ldr	r3, [pc, #60]	; (800c104 <_svfiprintf_r+0x1f8>)
 800c0c6:	a904      	add	r1, sp, #16
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f3af 8000 	nop.w
 800c0ce:	1c42      	adds	r2, r0, #1
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	d1d6      	bne.n	800c082 <_svfiprintf_r+0x176>
 800c0d4:	89ab      	ldrh	r3, [r5, #12]
 800c0d6:	065b      	lsls	r3, r3, #25
 800c0d8:	f53f af2c 	bmi.w	800bf34 <_svfiprintf_r+0x28>
 800c0dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0de:	b01d      	add	sp, #116	; 0x74
 800c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e4:	ab03      	add	r3, sp, #12
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	462a      	mov	r2, r5
 800c0ea:	4b06      	ldr	r3, [pc, #24]	; (800c104 <_svfiprintf_r+0x1f8>)
 800c0ec:	a904      	add	r1, sp, #16
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	f000 f87a 	bl	800c1e8 <_printf_i>
 800c0f4:	e7eb      	b.n	800c0ce <_svfiprintf_r+0x1c2>
 800c0f6:	bf00      	nop
 800c0f8:	0800dbcc 	.word	0x0800dbcc
 800c0fc:	0800dbd6 	.word	0x0800dbd6
 800c100:	00000000 	.word	0x00000000
 800c104:	0800be55 	.word	0x0800be55
 800c108:	0800dbd2 	.word	0x0800dbd2

0800c10c <_printf_common>:
 800c10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c110:	4616      	mov	r6, r2
 800c112:	4699      	mov	r9, r3
 800c114:	688a      	ldr	r2, [r1, #8]
 800c116:	690b      	ldr	r3, [r1, #16]
 800c118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c11c:	4293      	cmp	r3, r2
 800c11e:	bfb8      	it	lt
 800c120:	4613      	movlt	r3, r2
 800c122:	6033      	str	r3, [r6, #0]
 800c124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c128:	4607      	mov	r7, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	b10a      	cbz	r2, 800c132 <_printf_common+0x26>
 800c12e:	3301      	adds	r3, #1
 800c130:	6033      	str	r3, [r6, #0]
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	0699      	lsls	r1, r3, #26
 800c136:	bf42      	ittt	mi
 800c138:	6833      	ldrmi	r3, [r6, #0]
 800c13a:	3302      	addmi	r3, #2
 800c13c:	6033      	strmi	r3, [r6, #0]
 800c13e:	6825      	ldr	r5, [r4, #0]
 800c140:	f015 0506 	ands.w	r5, r5, #6
 800c144:	d106      	bne.n	800c154 <_printf_common+0x48>
 800c146:	f104 0a19 	add.w	sl, r4, #25
 800c14a:	68e3      	ldr	r3, [r4, #12]
 800c14c:	6832      	ldr	r2, [r6, #0]
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	42ab      	cmp	r3, r5
 800c152:	dc26      	bgt.n	800c1a2 <_printf_common+0x96>
 800c154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c158:	1e13      	subs	r3, r2, #0
 800c15a:	6822      	ldr	r2, [r4, #0]
 800c15c:	bf18      	it	ne
 800c15e:	2301      	movne	r3, #1
 800c160:	0692      	lsls	r2, r2, #26
 800c162:	d42b      	bmi.n	800c1bc <_printf_common+0xb0>
 800c164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c168:	4649      	mov	r1, r9
 800c16a:	4638      	mov	r0, r7
 800c16c:	47c0      	blx	r8
 800c16e:	3001      	adds	r0, #1
 800c170:	d01e      	beq.n	800c1b0 <_printf_common+0xa4>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	68e5      	ldr	r5, [r4, #12]
 800c176:	6832      	ldr	r2, [r6, #0]
 800c178:	f003 0306 	and.w	r3, r3, #6
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	bf08      	it	eq
 800c180:	1aad      	subeq	r5, r5, r2
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	6922      	ldr	r2, [r4, #16]
 800c186:	bf0c      	ite	eq
 800c188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c18c:	2500      	movne	r5, #0
 800c18e:	4293      	cmp	r3, r2
 800c190:	bfc4      	itt	gt
 800c192:	1a9b      	subgt	r3, r3, r2
 800c194:	18ed      	addgt	r5, r5, r3
 800c196:	2600      	movs	r6, #0
 800c198:	341a      	adds	r4, #26
 800c19a:	42b5      	cmp	r5, r6
 800c19c:	d11a      	bne.n	800c1d4 <_printf_common+0xc8>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e008      	b.n	800c1b4 <_printf_common+0xa8>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	47c0      	blx	r8
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d103      	bne.n	800c1b8 <_printf_common+0xac>
 800c1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	e7c6      	b.n	800c14a <_printf_common+0x3e>
 800c1bc:	18e1      	adds	r1, r4, r3
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	2030      	movs	r0, #48	; 0x30
 800c1c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1c6:	4422      	add	r2, r4
 800c1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1d0:	3302      	adds	r3, #2
 800c1d2:	e7c7      	b.n	800c164 <_printf_common+0x58>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	4649      	mov	r1, r9
 800c1da:	4638      	mov	r0, r7
 800c1dc:	47c0      	blx	r8
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d0e6      	beq.n	800c1b0 <_printf_common+0xa4>
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	e7d9      	b.n	800c19a <_printf_common+0x8e>
	...

0800c1e8 <_printf_i>:
 800c1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ec:	7e0f      	ldrb	r7, [r1, #24]
 800c1ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1f0:	2f78      	cmp	r7, #120	; 0x78
 800c1f2:	4691      	mov	r9, r2
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	469a      	mov	sl, r3
 800c1fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1fe:	d807      	bhi.n	800c210 <_printf_i+0x28>
 800c200:	2f62      	cmp	r7, #98	; 0x62
 800c202:	d80a      	bhi.n	800c21a <_printf_i+0x32>
 800c204:	2f00      	cmp	r7, #0
 800c206:	f000 80d8 	beq.w	800c3ba <_printf_i+0x1d2>
 800c20a:	2f58      	cmp	r7, #88	; 0x58
 800c20c:	f000 80a3 	beq.w	800c356 <_printf_i+0x16e>
 800c210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c218:	e03a      	b.n	800c290 <_printf_i+0xa8>
 800c21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c21e:	2b15      	cmp	r3, #21
 800c220:	d8f6      	bhi.n	800c210 <_printf_i+0x28>
 800c222:	a101      	add	r1, pc, #4	; (adr r1, 800c228 <_printf_i+0x40>)
 800c224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c228:	0800c281 	.word	0x0800c281
 800c22c:	0800c295 	.word	0x0800c295
 800c230:	0800c211 	.word	0x0800c211
 800c234:	0800c211 	.word	0x0800c211
 800c238:	0800c211 	.word	0x0800c211
 800c23c:	0800c211 	.word	0x0800c211
 800c240:	0800c295 	.word	0x0800c295
 800c244:	0800c211 	.word	0x0800c211
 800c248:	0800c211 	.word	0x0800c211
 800c24c:	0800c211 	.word	0x0800c211
 800c250:	0800c211 	.word	0x0800c211
 800c254:	0800c3a1 	.word	0x0800c3a1
 800c258:	0800c2c5 	.word	0x0800c2c5
 800c25c:	0800c383 	.word	0x0800c383
 800c260:	0800c211 	.word	0x0800c211
 800c264:	0800c211 	.word	0x0800c211
 800c268:	0800c3c3 	.word	0x0800c3c3
 800c26c:	0800c211 	.word	0x0800c211
 800c270:	0800c2c5 	.word	0x0800c2c5
 800c274:	0800c211 	.word	0x0800c211
 800c278:	0800c211 	.word	0x0800c211
 800c27c:	0800c38b 	.word	0x0800c38b
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	1d1a      	adds	r2, r3, #4
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	602a      	str	r2, [r5, #0]
 800c288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c290:	2301      	movs	r3, #1
 800c292:	e0a3      	b.n	800c3dc <_printf_i+0x1f4>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	6829      	ldr	r1, [r5, #0]
 800c298:	0606      	lsls	r6, r0, #24
 800c29a:	f101 0304 	add.w	r3, r1, #4
 800c29e:	d50a      	bpl.n	800c2b6 <_printf_i+0xce>
 800c2a0:	680e      	ldr	r6, [r1, #0]
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	2e00      	cmp	r6, #0
 800c2a6:	da03      	bge.n	800c2b0 <_printf_i+0xc8>
 800c2a8:	232d      	movs	r3, #45	; 0x2d
 800c2aa:	4276      	negs	r6, r6
 800c2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2b0:	485e      	ldr	r0, [pc, #376]	; (800c42c <_printf_i+0x244>)
 800c2b2:	230a      	movs	r3, #10
 800c2b4:	e019      	b.n	800c2ea <_printf_i+0x102>
 800c2b6:	680e      	ldr	r6, [r1, #0]
 800c2b8:	602b      	str	r3, [r5, #0]
 800c2ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c2be:	bf18      	it	ne
 800c2c0:	b236      	sxthne	r6, r6
 800c2c2:	e7ef      	b.n	800c2a4 <_printf_i+0xbc>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	6820      	ldr	r0, [r4, #0]
 800c2c8:	1d19      	adds	r1, r3, #4
 800c2ca:	6029      	str	r1, [r5, #0]
 800c2cc:	0601      	lsls	r1, r0, #24
 800c2ce:	d501      	bpl.n	800c2d4 <_printf_i+0xec>
 800c2d0:	681e      	ldr	r6, [r3, #0]
 800c2d2:	e002      	b.n	800c2da <_printf_i+0xf2>
 800c2d4:	0646      	lsls	r6, r0, #25
 800c2d6:	d5fb      	bpl.n	800c2d0 <_printf_i+0xe8>
 800c2d8:	881e      	ldrh	r6, [r3, #0]
 800c2da:	4854      	ldr	r0, [pc, #336]	; (800c42c <_printf_i+0x244>)
 800c2dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c2de:	bf0c      	ite	eq
 800c2e0:	2308      	moveq	r3, #8
 800c2e2:	230a      	movne	r3, #10
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2ea:	6865      	ldr	r5, [r4, #4]
 800c2ec:	60a5      	str	r5, [r4, #8]
 800c2ee:	2d00      	cmp	r5, #0
 800c2f0:	bfa2      	ittt	ge
 800c2f2:	6821      	ldrge	r1, [r4, #0]
 800c2f4:	f021 0104 	bicge.w	r1, r1, #4
 800c2f8:	6021      	strge	r1, [r4, #0]
 800c2fa:	b90e      	cbnz	r6, 800c300 <_printf_i+0x118>
 800c2fc:	2d00      	cmp	r5, #0
 800c2fe:	d04d      	beq.n	800c39c <_printf_i+0x1b4>
 800c300:	4615      	mov	r5, r2
 800c302:	fbb6 f1f3 	udiv	r1, r6, r3
 800c306:	fb03 6711 	mls	r7, r3, r1, r6
 800c30a:	5dc7      	ldrb	r7, [r0, r7]
 800c30c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c310:	4637      	mov	r7, r6
 800c312:	42bb      	cmp	r3, r7
 800c314:	460e      	mov	r6, r1
 800c316:	d9f4      	bls.n	800c302 <_printf_i+0x11a>
 800c318:	2b08      	cmp	r3, #8
 800c31a:	d10b      	bne.n	800c334 <_printf_i+0x14c>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	07de      	lsls	r6, r3, #31
 800c320:	d508      	bpl.n	800c334 <_printf_i+0x14c>
 800c322:	6923      	ldr	r3, [r4, #16]
 800c324:	6861      	ldr	r1, [r4, #4]
 800c326:	4299      	cmp	r1, r3
 800c328:	bfde      	ittt	le
 800c32a:	2330      	movle	r3, #48	; 0x30
 800c32c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c330:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c334:	1b52      	subs	r2, r2, r5
 800c336:	6122      	str	r2, [r4, #16]
 800c338:	f8cd a000 	str.w	sl, [sp]
 800c33c:	464b      	mov	r3, r9
 800c33e:	aa03      	add	r2, sp, #12
 800c340:	4621      	mov	r1, r4
 800c342:	4640      	mov	r0, r8
 800c344:	f7ff fee2 	bl	800c10c <_printf_common>
 800c348:	3001      	adds	r0, #1
 800c34a:	d14c      	bne.n	800c3e6 <_printf_i+0x1fe>
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	b004      	add	sp, #16
 800c352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c356:	4835      	ldr	r0, [pc, #212]	; (800c42c <_printf_i+0x244>)
 800c358:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c35c:	6829      	ldr	r1, [r5, #0]
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	f851 6b04 	ldr.w	r6, [r1], #4
 800c364:	6029      	str	r1, [r5, #0]
 800c366:	061d      	lsls	r5, r3, #24
 800c368:	d514      	bpl.n	800c394 <_printf_i+0x1ac>
 800c36a:	07df      	lsls	r7, r3, #31
 800c36c:	bf44      	itt	mi
 800c36e:	f043 0320 	orrmi.w	r3, r3, #32
 800c372:	6023      	strmi	r3, [r4, #0]
 800c374:	b91e      	cbnz	r6, 800c37e <_printf_i+0x196>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	f023 0320 	bic.w	r3, r3, #32
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	2310      	movs	r3, #16
 800c380:	e7b0      	b.n	800c2e4 <_printf_i+0xfc>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	f043 0320 	orr.w	r3, r3, #32
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	2378      	movs	r3, #120	; 0x78
 800c38c:	4828      	ldr	r0, [pc, #160]	; (800c430 <_printf_i+0x248>)
 800c38e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c392:	e7e3      	b.n	800c35c <_printf_i+0x174>
 800c394:	0659      	lsls	r1, r3, #25
 800c396:	bf48      	it	mi
 800c398:	b2b6      	uxthmi	r6, r6
 800c39a:	e7e6      	b.n	800c36a <_printf_i+0x182>
 800c39c:	4615      	mov	r5, r2
 800c39e:	e7bb      	b.n	800c318 <_printf_i+0x130>
 800c3a0:	682b      	ldr	r3, [r5, #0]
 800c3a2:	6826      	ldr	r6, [r4, #0]
 800c3a4:	6961      	ldr	r1, [r4, #20]
 800c3a6:	1d18      	adds	r0, r3, #4
 800c3a8:	6028      	str	r0, [r5, #0]
 800c3aa:	0635      	lsls	r5, r6, #24
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	d501      	bpl.n	800c3b4 <_printf_i+0x1cc>
 800c3b0:	6019      	str	r1, [r3, #0]
 800c3b2:	e002      	b.n	800c3ba <_printf_i+0x1d2>
 800c3b4:	0670      	lsls	r0, r6, #25
 800c3b6:	d5fb      	bpl.n	800c3b0 <_printf_i+0x1c8>
 800c3b8:	8019      	strh	r1, [r3, #0]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	4615      	mov	r5, r2
 800c3c0:	e7ba      	b.n	800c338 <_printf_i+0x150>
 800c3c2:	682b      	ldr	r3, [r5, #0]
 800c3c4:	1d1a      	adds	r2, r3, #4
 800c3c6:	602a      	str	r2, [r5, #0]
 800c3c8:	681d      	ldr	r5, [r3, #0]
 800c3ca:	6862      	ldr	r2, [r4, #4]
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f7f3 ff86 	bl	80002e0 <memchr>
 800c3d4:	b108      	cbz	r0, 800c3da <_printf_i+0x1f2>
 800c3d6:	1b40      	subs	r0, r0, r5
 800c3d8:	6060      	str	r0, [r4, #4]
 800c3da:	6863      	ldr	r3, [r4, #4]
 800c3dc:	6123      	str	r3, [r4, #16]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3e4:	e7a8      	b.n	800c338 <_printf_i+0x150>
 800c3e6:	6923      	ldr	r3, [r4, #16]
 800c3e8:	462a      	mov	r2, r5
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	47d0      	blx	sl
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d0ab      	beq.n	800c34c <_printf_i+0x164>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	079b      	lsls	r3, r3, #30
 800c3f8:	d413      	bmi.n	800c422 <_printf_i+0x23a>
 800c3fa:	68e0      	ldr	r0, [r4, #12]
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	4298      	cmp	r0, r3
 800c400:	bfb8      	it	lt
 800c402:	4618      	movlt	r0, r3
 800c404:	e7a4      	b.n	800c350 <_printf_i+0x168>
 800c406:	2301      	movs	r3, #1
 800c408:	4632      	mov	r2, r6
 800c40a:	4649      	mov	r1, r9
 800c40c:	4640      	mov	r0, r8
 800c40e:	47d0      	blx	sl
 800c410:	3001      	adds	r0, #1
 800c412:	d09b      	beq.n	800c34c <_printf_i+0x164>
 800c414:	3501      	adds	r5, #1
 800c416:	68e3      	ldr	r3, [r4, #12]
 800c418:	9903      	ldr	r1, [sp, #12]
 800c41a:	1a5b      	subs	r3, r3, r1
 800c41c:	42ab      	cmp	r3, r5
 800c41e:	dcf2      	bgt.n	800c406 <_printf_i+0x21e>
 800c420:	e7eb      	b.n	800c3fa <_printf_i+0x212>
 800c422:	2500      	movs	r5, #0
 800c424:	f104 0619 	add.w	r6, r4, #25
 800c428:	e7f5      	b.n	800c416 <_printf_i+0x22e>
 800c42a:	bf00      	nop
 800c42c:	0800dbdd 	.word	0x0800dbdd
 800c430:	0800dbee 	.word	0x0800dbee

0800c434 <__retarget_lock_acquire_recursive>:
 800c434:	4770      	bx	lr

0800c436 <__retarget_lock_release_recursive>:
 800c436:	4770      	bx	lr

0800c438 <memcpy>:
 800c438:	440a      	add	r2, r1
 800c43a:	4291      	cmp	r1, r2
 800c43c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c440:	d100      	bne.n	800c444 <memcpy+0xc>
 800c442:	4770      	bx	lr
 800c444:	b510      	push	{r4, lr}
 800c446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c44a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c44e:	4291      	cmp	r1, r2
 800c450:	d1f9      	bne.n	800c446 <memcpy+0xe>
 800c452:	bd10      	pop	{r4, pc}

0800c454 <memmove>:
 800c454:	4288      	cmp	r0, r1
 800c456:	b510      	push	{r4, lr}
 800c458:	eb01 0402 	add.w	r4, r1, r2
 800c45c:	d902      	bls.n	800c464 <memmove+0x10>
 800c45e:	4284      	cmp	r4, r0
 800c460:	4623      	mov	r3, r4
 800c462:	d807      	bhi.n	800c474 <memmove+0x20>
 800c464:	1e43      	subs	r3, r0, #1
 800c466:	42a1      	cmp	r1, r4
 800c468:	d008      	beq.n	800c47c <memmove+0x28>
 800c46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c46e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c472:	e7f8      	b.n	800c466 <memmove+0x12>
 800c474:	4402      	add	r2, r0
 800c476:	4601      	mov	r1, r0
 800c478:	428a      	cmp	r2, r1
 800c47a:	d100      	bne.n	800c47e <memmove+0x2a>
 800c47c:	bd10      	pop	{r4, pc}
 800c47e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c486:	e7f7      	b.n	800c478 <memmove+0x24>

0800c488 <_realloc_r>:
 800c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48c:	4680      	mov	r8, r0
 800c48e:	4614      	mov	r4, r2
 800c490:	460e      	mov	r6, r1
 800c492:	b921      	cbnz	r1, 800c49e <_realloc_r+0x16>
 800c494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c498:	4611      	mov	r1, r2
 800c49a:	f7ff bc2b 	b.w	800bcf4 <_malloc_r>
 800c49e:	b92a      	cbnz	r2, 800c4ac <_realloc_r+0x24>
 800c4a0:	f7ff fbbc 	bl	800bc1c <_free_r>
 800c4a4:	4625      	mov	r5, r4
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ac:	f000 f81b 	bl	800c4e6 <_malloc_usable_size_r>
 800c4b0:	4284      	cmp	r4, r0
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	d802      	bhi.n	800c4bc <_realloc_r+0x34>
 800c4b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4ba:	d812      	bhi.n	800c4e2 <_realloc_r+0x5a>
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4640      	mov	r0, r8
 800c4c0:	f7ff fc18 	bl	800bcf4 <_malloc_r>
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d0ed      	beq.n	800c4a6 <_realloc_r+0x1e>
 800c4ca:	42bc      	cmp	r4, r7
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	bf28      	it	cs
 800c4d2:	463a      	movcs	r2, r7
 800c4d4:	f7ff ffb0 	bl	800c438 <memcpy>
 800c4d8:	4631      	mov	r1, r6
 800c4da:	4640      	mov	r0, r8
 800c4dc:	f7ff fb9e 	bl	800bc1c <_free_r>
 800c4e0:	e7e1      	b.n	800c4a6 <_realloc_r+0x1e>
 800c4e2:	4635      	mov	r5, r6
 800c4e4:	e7df      	b.n	800c4a6 <_realloc_r+0x1e>

0800c4e6 <_malloc_usable_size_r>:
 800c4e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ea:	1f18      	subs	r0, r3, #4
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bfbc      	itt	lt
 800c4f0:	580b      	ldrlt	r3, [r1, r0]
 800c4f2:	18c0      	addlt	r0, r0, r3
 800c4f4:	4770      	bx	lr
	...

0800c4f8 <_init>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr

0800c504 <_fini>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr
